<p><a href="psi_element://pod%3A%3Aperlop">pod::perlop</a>: <a href="psi_element://pod%3A%3Aperlop%2FDESCRIPTION">DESCRIPTION</a>: <a href="psi_element://pod%3A%3Aperlop%2FRegexp+Quote-Like+Operators">Regexp Quote-Like Operators</a></p><dl><dt style="padding-bottom:4px;font-weight:bold;"><code>qr/<i>STRING</i>/msixpodualn</code>
      </dt><dd style="padding-top:6px;"><p style="padding-bottom: 10px;">This operator quotes (and possibly compiles) its <i>STRING</i> as a regular
expression.  <i>STRING</i> is interpolated the same way as <i>PATTERN</i>
in <code>m/<i>PATTERN</i>/</code>.  If <code>&quot;'&quot;</code> is used as the delimiter, no interpolation
is done.  Returns a Perl value which may be used instead of the
corresponding <code>/<i>STRING</i>/msixpodualn</code> expression.  The returned value is a
normalized version of the original pattern.  It magically differs from
a string containing the same characters: <code>ref(qr/x/)</code> returns &quot;Regexp&quot;;
however, dereferencing it is not well defined (you currently get the 
normalized version of the original pattern, but this may change).</p>

<p style="padding-bottom: 10px;">For example,</p>
<div style="padding-bottom: 10px;"><pre><code>    $rex = qr/my.STRING/is;
    print $rex;                 # prints (?si-xm:my.STRING)
    s/$rex/foo/;</code></pre></div>
<p style="padding-bottom: 10px;">is equivalent to</p>
<div style="padding-bottom: 10px;"><pre><code>    s/my.STRING/foo/is;</code></pre></div>
<p style="padding-bottom: 10px;">The result may be used as a subpattern in a match:</p>
<div style="padding-bottom: 10px;"><pre><code>    $re = qr/$pattern/;
    $string =~ /foo${re}bar/;	# can be interpolated in other
                                # patterns
    $string =~ $re;		# or used standalone
    $string =~ /$re/;		# or this way</code></pre></div>
<p style="padding-bottom: 10px;">Since Perl may compile the pattern at the moment of execution of the <code>qr()</code>
operator, using <code>qr()</code> may have speed advantages in some situations,
notably if the result of <code>qr()</code> is used standalone:</p>
<div style="padding-bottom: 10px;"><pre><code>    sub match {
	my $patterns = shift;
	my @compiled = map qr/$_/i, @$patterns;
	grep {
	    my $success = 0;
	    foreach my $pat (@compiled) {
		$success = 1, last if /$pat/;
	    }
	    $success;
	} @_;
    }</code></pre></div>
<p style="padding-bottom: 10px;">Precompilation of the pattern into an internal representation at
the moment of <code>qr()</code> avoids the need to recompile the pattern every
time a match <code>/$pat/</code> is attempted.  (Perl has many other internal
optimizations, but none would be triggered in the above example if
we did not use <code>qr()</code> operator.)</p>
<p style="padding-bottom: 10px;">Options (specified by the following modifiers) are:</p>
<div style="padding-bottom: 10px;"><pre><code>    m	Treat string as multiple lines.
    s	Treat string as single line. (Make . match a newline)
    i	Do case-insensitive pattern matching.
    x	Use extended regular expressions.
    p	When matching preserve a copy of the matched string so
        that ${^PREMATCH}, ${^MATCH}, ${^POSTMATCH} will be
        defined (ignored starting in v5.20) as these are always
        defined starting in that relese
    o	Compile pattern only once.
    a   ASCII-restrict: Use ASCII for \d, \s, \w; specifying two
        a's further restricts things to that that no ASCII
        character will match a non-ASCII one under /i.
    l   Use the current run-time locale's rules.
    u   Use Unicode rules.
    d   Use Unicode or native charset, as in 5.12 and earlier.
    n   Non-capture mode. Don't let () fill in $1, $2, etc...</code></pre></div>
<p style="padding-bottom: 10px;">If a precompiled pattern is embedded in a larger pattern then the effect
of <code>&quot;msixpluadn&quot;</code> will be propagated appropriately.  The effect that the
<code>/o</code> modifier has is not propagated, being restricted to those patterns
explicitly using it.</p>
<p style="padding-bottom: 10px;">The last four modifiers listed above, added in Perl 5.14,
control the character set rules, but <code>/a</code> is the only one you are likely
to want to specify explicitly; the other three are selected
automatically by various pragmas.</p>
<p style="padding-bottom: 10px;">See <a href="psi_element://perlre">perlre</a> for additional information on valid syntax for <i>STRING</i>, and
for a detailed look at the semantics of regular expressions.  In
particular, all modifiers except the largely obsolete <code>/o</code> are further
explained in <a href="psi_element://perlre%2FModifiers">Modifiers in perlre</a>.  <code>/o</code> is described in the next section.</p></dd></dl>
