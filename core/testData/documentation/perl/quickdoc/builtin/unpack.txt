<p><a href="psi_element://pod%3A%3Aperlfunc">pod::perlfunc</a>: <a href="psi_element://pod%3A%3Aperlfunc%2FDESCRIPTION">DESCRIPTION</a>: <a href="psi_element://pod%3A%3Aperlfunc%2FAlphabetical+Listing+of+Perl+Functions">Alphabetical Listing of Perl Functions</a></p><dl><dt style="padding-bottom:4px;font-weight:bold;">unpack TEMPLATE,EXPR</dt>
<dt style="padding-bottom:4px;font-weight:bold;">unpack TEMPLATE</dt><dd style="padding-top:6px;">
<p style="padding-bottom: 10px;"><a href="psi_element://pod%3A%3Aperlfunc%2Funpack+TEMPLATE%2CEXPR">C<unpack></a> does the reverse of
<a href="psi_element://pod%3A%3Aperlfunc%2Fpack+TEMPLATE%2CLIST">C<pack></a>: it takes a string
and expands it out into a list of values.
(In scalar context, it returns merely the first value produced.)</p>
<p style="padding-bottom: 10px;">If EXPR is omitted, unpacks the <a href="psi_element://perlvar%2F%24_">C<$_></a> string.
See <a href="psi_element://perlpacktut">perlpacktut</a> for an introduction to this function.</p>
<p style="padding-bottom: 10px;">The string is broken into chunks described by the TEMPLATE.  Each chunk
is converted separately to a value.  Typically, either the string is a result
of <a href="psi_element://pod%3A%3Aperlfunc%2Fpack+TEMPLATE%2CLIST">C<pack></a>, or the characters of the string
represent a C structure of some kind.</p>
<p style="padding-bottom: 10px;">The TEMPLATE has the same format as in the
<a href="psi_element://pod%3A%3Aperlfunc%2Fpack+TEMPLATE%2CLIST">C<pack></a> function.
Here's a subroutine that does substring:</p>
<div style="padding-bottom: 10px;"><pre><code>    sub substr {
        my ($what, $where, $howmuch) = @_;
        unpack(&quot;x$where a$howmuch&quot;, $what);
    }</code></pre></div>
<p style="padding-bottom: 10px;">and then there's</p>
<div style="padding-bottom: 10px;"><pre><code>    sub ordinal { unpack(&quot;W&quot;,$_[0]); } # same as ord()</code></pre></div>
<p style="padding-bottom: 10px;">In addition to fields allowed in <a href="psi_element://pod%3A%3Aperlfunc%2Fpack+TEMPLATE%2CLIST">C<pack></a>, you may
prefix a field with a %&lt;number&gt; to indicate that
you want a &lt;number&gt;-bit checksum of the items instead of the items
themselves.  Default is a 16-bit checksum.  The checksum is calculated by
summing numeric values of expanded values (for string fields the sum of
<code>ord($char)</code> is taken; for bit fields the sum of zeroes and ones).</p>
<p style="padding-bottom: 10px;">For example, the following
computes the same number as the System V sum program:</p>
<div style="padding-bottom: 10px;"><pre><code>    my $checksum = do {
        local $/;  # slurp!
        unpack(&quot;%32W*&quot;, readline) % 65535;
    };</code></pre></div>
<p style="padding-bottom: 10px;">The following efficiently counts the number of set bits in a bit vector:</p>
<div style="padding-bottom: 10px;"><pre><code>    my $setbits = unpack(&quot;%32b*&quot;, $selectmask);</code></pre></div>
<p style="padding-bottom: 10px;">The <code>p</code> and <code>P</code> formats should be used with care.  Since Perl
has no way of checking whether the value passed to
<a href="psi_element://pod%3A%3Aperlfunc%2Funpack+TEMPLATE%2CEXPR">C<unpack></a>
corresponds to a valid memory location, passing a pointer value that's
not known to be valid is likely to have disastrous consequences.</p>
<p style="padding-bottom: 10px;">If there are more pack codes or if the repeat count of a field or a group
is larger than what the remainder of the input string allows, the result
is not well defined: the repeat count may be decreased, or
<a href="psi_element://pod%3A%3Aperlfunc%2Funpack+TEMPLATE%2CEXPR">C<unpack></a> may produce empty strings or zeros,
or it may raise an exception.
If the input string is longer than one described by the TEMPLATE,
the remainder of that input string is ignored.</p>
<p style="padding-bottom: 10px;">See <a href="psi_element://pod%3A%3Aperlfunc%2Fpack+TEMPLATE%2CLIST">C<pack></a> for more examples and notes.</p></dd></dl>
