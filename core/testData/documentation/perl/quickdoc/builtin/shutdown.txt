<p><a href="psi_element://pod%3A%3Aperlfunc">pod::perlfunc</a>: <a href="psi_element://pod%3A%3Aperlfunc%2FDESCRIPTION">DESCRIPTION</a>: <a href="psi_element://pod%3A%3Aperlfunc%2FAlphabetical+Listing+of+Perl+Functions">Alphabetical Listing of Perl Functions</a></p><dl><dt style="padding-bottom:4px;font-weight:bold;">shutdown SOCKET,HOW</dt><dd style="padding-top:6px;">
<p style="padding-bottom: 10px;">Shuts down a socket connection in the manner indicated by HOW, which
has the same interpretation as in the syscall of the same name.</p>
<div style="padding-bottom: 10px;"><pre><code>    shutdown($socket, 0);    # I/we have stopped reading data
    shutdown($socket, 1);    # I/we have stopped writing data
    shutdown($socket, 2);    # I/we have stopped using this socket</code></pre></div>
<p style="padding-bottom: 10px;">This is useful with sockets when you want to tell the other
side you're done writing but not done reading, or vice versa.
It's also a more insistent form of close because it also
disables the file descriptor in any forked copies in other
processes.</p>
<p style="padding-bottom: 10px;">Returns <code>1</code> for success; on error, returns <a href="psi_element://pod%3A%3Aperlfunc%2Fundef+EXPR">C<undef></a> if
the first argument is not a valid filehandle, or returns <code>0</code> and sets
<a href="psi_element://perlvar%2F%24%21">C<$!></a> for any other failure.</p></dd></dl>
