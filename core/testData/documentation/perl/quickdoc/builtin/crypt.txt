<p><a href="psi_element://pod%3A%3Aperlfunc">pod::perlfunc</a>: <a href="psi_element://pod%3A%3Aperlfunc%2FDESCRIPTION">DESCRIPTION</a>: <a href="psi_element://pod%3A%3Aperlfunc%2FAlphabetical+Listing+of+Perl+Functions">Alphabetical Listing of Perl Functions</a></p><dl><dt style="padding-bottom:4px;font-weight:bold;">crypt PLAINTEXT,SALT
     
   </dt><dd style="padding-top:6px;">
<p style="padding-bottom: 10px;">Creates a digest string exactly like the <a href="psi_element://crypt%283%29" style="color:red">crypt(3)</a> function in the C
library (assuming that you actually have a version there that has not
been extirpated as a potential munition).</p>
<p style="padding-bottom: 10px;"><a href="psi_element://pod%3A%3Aperlfunc%2Fcrypt+PLAINTEXT%2CSALT">C<crypt></a> is a one-way hash function.  The
PLAINTEXT and SALT are turned
into a short string, called a digest, which is returned.  The same
PLAINTEXT and SALT will always return the same string, but there is no
(known) way to get the original PLAINTEXT from the hash.  Small
changes in the PLAINTEXT or SALT will result in large changes in the
digest.</p>
<p style="padding-bottom: 10px;">There is no decrypt function.  This function isn't all that useful for
cryptography (for that, look for <i>Crypt</i> modules on your nearby CPAN
mirror) and the name &quot;crypt&quot; is a bit of a misnomer.  Instead it is
primarily used to check if two pieces of text are the same without
having to transmit or store the text itself.  An example is checking
if a correct password is given.  The digest of the password is stored,
not the password itself.  The user types in a password that is
<a href="psi_element://pod%3A%3Aperlfunc%2Fcrypt+PLAINTEXT%2CSALT">C<crypt></a>'d with the same salt as the stored
digest.  If the two digests match, the password is correct.</p>
<p style="padding-bottom: 10px;">When verifying an existing digest string you should use the digest as
the salt (like <code>crypt($plain, $digest) eq $digest</code>).  The SALT used
to create the digest is visible as part of the digest.  This ensures
<a href="psi_element://pod%3A%3Aperlfunc%2Fcrypt+PLAINTEXT%2CSALT">C<crypt></a> will hash the new string with the same
salt as the digest.  This allows your code to work with the standard
<a href="psi_element://pod%3A%3Aperlfunc%2Fcrypt+PLAINTEXT%2CSALT">C<crypt></a> and with more exotic implementations.
In other words, assume nothing about the returned string itself nor
about how many bytes of SALT may matter.</p>
<p style="padding-bottom: 10px;">Traditionally the result is a string of 13 bytes: two first bytes of
the salt, followed by 11 bytes from the set <code>[./0-9A-Za-z]</code>, and only
the first eight bytes of PLAINTEXT mattered.  But alternative
hashing schemes (like MD5), higher level security schemes (like C2),
and implementations on non-Unix platforms may produce different
strings.</p>
<p style="padding-bottom: 10px;">When choosing a new salt create a random two character string whose
characters come from the set <code>[./0-9A-Za-z]</code> (like <code>join '', ('.',
'/', 0..9, 'A'..'Z', 'a'..'z')[rand 64, rand 64]</code>).  This set of
characters is just a recommendation; the characters allowed in
the salt depend solely on your system's crypt library, and Perl can't
restrict what salts <a href="psi_element://pod%3A%3Aperlfunc%2Fcrypt+PLAINTEXT%2CSALT">C<crypt></a> accepts.</p>
<p style="padding-bottom: 10px;">Here's an example that makes sure that whoever runs this program knows
their password:</p>
<div style="padding-bottom: 10px;"><pre><code>    my $pwd = (getpwuid($&lt;))[1];

    system &quot;stty -echo&quot;;
    print &quot;Password: &quot;;
    chomp(my $word = &lt;STDIN&gt;);
    print &quot;\n&quot;;
    system &quot;stty echo&quot;;

    if (crypt($word, $pwd) ne $pwd) {
        die &quot;Sorry...\n&quot;;
    } else {
        print &quot;ok\n&quot;;
    }</code></pre></div>
<p style="padding-bottom: 10px;">Of course, typing in your own password to whoever asks you
for it is unwise.</p>
<p style="padding-bottom: 10px;">The <a href="psi_element://pod%3A%3Aperlfunc%2Fcrypt+PLAINTEXT%2CSALT">C<crypt></a> function is unsuitable for hashing
large quantities of data, not least of all because you can't get the
information back.  Look at the <a href="psi_element://Digest" style="color:red">Digest</a> module for more robust
algorithms.</p>
<p style="padding-bottom: 10px;">If using <a href="psi_element://pod%3A%3Aperlfunc%2Fcrypt+PLAINTEXT%2CSALT">C<crypt></a> on a Unicode string (which
<i>potentially</i> has characters with codepoints above 255), Perl tries to
make sense of the situation by trying to downgrade (a copy of) the
string back to an eight-bit byte string before calling
<a href="psi_element://pod%3A%3Aperlfunc%2Fcrypt+PLAINTEXT%2CSALT">C<crypt></a> (on that copy).  If that works, good.
If not, <a href="psi_element://pod%3A%3Aperlfunc%2Fcrypt+PLAINTEXT%2CSALT">C<crypt></a> dies with
<a href="psi_element://perldiag%2FWide+character+in+%25s">C<Wide character in crypt></a>.</p>
<p style="padding-bottom: 10px;">Portability issues: <a href="psi_element://perlport%2Fcrypt">crypt in perlport</a>.</p></dd></dl>
