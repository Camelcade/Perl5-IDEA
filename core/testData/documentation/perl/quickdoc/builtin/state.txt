<p><a href="psi_element://pod%3A%3Aperlfunc">pod::perlfunc</a>: <a href="psi_element://pod%3A%3Aperlfunc%2FDESCRIPTION">DESCRIPTION</a>: <a href="psi_element://pod%3A%3Aperlfunc%2FAlphabetical+Listing+of+Perl+Functions">Alphabetical Listing of Perl Functions</a></p><dl><dt style="padding-bottom:4px;font-weight:bold;">state VARLIST</dt>
<dt style="padding-bottom:4px;font-weight:bold;">state TYPE VARLIST</dt>
<dt style="padding-bottom:4px;font-weight:bold;">state VARLIST : ATTRS</dt>
<dt style="padding-bottom:4px;font-weight:bold;">state TYPE VARLIST : ATTRS</dt><dd style="padding-top:6px;">
<p style="padding-bottom: 10px;"><a href="psi_element://pod%3A%3Aperlfunc%2Fstate+VARLIST">C<state></a> declares a lexically scoped variable, just
like <a href="psi_element://pod%3A%3Aperlfunc%2Fmy+VARLIST">C<my></a>.
However, those variables will never be reinitialized, contrary to
lexical variables that are reinitialized each time their enclosing block
is entered.
See <a href="psi_element://perlsub%2FPersistent+Private+Variables">Persistent Private Variables in perlsub</a> for details.</p>
<p style="padding-bottom: 10px;">If more than one variable is listed, the list must be placed in
parentheses.  With a parenthesised list, <a href="psi_element://pod%3A%3Aperlfunc%2Fundef+EXPR">C<undef></a> can be
used as a
dummy placeholder.  However, since initialization of state variables in
list context is currently not possible this would serve no purpose.</p>
<p style="padding-bottom: 10px;"><a href="psi_element://pod%3A%3Aperlfunc%2Fstate+VARLIST">C<state></a> is available only if the
<a href="psi_element://feature%2FThe+%27state%27+feature" style="color:red">C<"state"> feature</a> is enabled or if it is
prefixed with <code>CORE::</code>.  The
<a href="psi_element://feature%2FThe+%27state%27+feature" style="color:red">C<"state"> feature</a> is enabled
automatically with a <code>use v5.10</code> (or higher) declaration in the current
scope.</p></dd></dl>
