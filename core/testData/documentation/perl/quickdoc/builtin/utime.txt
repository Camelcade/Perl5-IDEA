<p><a href="psi_element://pod%3A%3Aperlfunc">pod::perlfunc</a>: <a href="psi_element://pod%3A%3Aperlfunc%2FDESCRIPTION">DESCRIPTION</a>: <a href="psi_element://pod%3A%3Aperlfunc%2FAlphabetical+Listing+of+Perl+Functions">Alphabetical Listing of Perl Functions</a></p><dl><dt style="padding-bottom:4px;font-weight:bold;">utime LIST</dt><dd style="padding-top:6px;">
<p style="padding-bottom: 10px;">Changes the access and modification times on each file of a list of
files.  The first two elements of the list must be the NUMERIC access
and modification times, in that order.  Returns the number of files
successfully changed.  The inode change time of each file is set
to the current time.  For example, this code has the same effect as the
Unix <a href="psi_element://touch%281%29" style="color:red">touch(1)</a> command when the files <i>already exist</i> and belong to
the user running the program:</p>
<div style="padding-bottom: 10px;"><pre><code>    #!/usr/bin/perl
    my $atime = my $mtime = time;
    utime $atime, $mtime, @ARGV;</code></pre></div>
<p style="padding-bottom: 10px;">Since Perl 5.8.0, if the first two elements of the list are
<a href="psi_element://pod%3A%3Aperlfunc%2Fundef+EXPR"><code>undef</code></a>,
the <a href="psi_element://utime%282%29" style="color:red">utime(2)</a> syscall from your C library is called with a null second
argument.  On most systems, this will set the file's access and
modification times to the current time (i.e., equivalent to the example
above) and will work even on files you don't own provided you have write
permission:</p>
<div style="padding-bottom: 10px;"><pre><code>    for my $file (@ARGV) {
	utime(undef, undef, $file)
	    || warn &quot;Couldn't touch $file: $!&quot;;
    }</code></pre></div>
<p style="padding-bottom: 10px;">Under NFS this will use the time of the NFS server, not the time of
the local machine.  If there is a time synchronization problem, the
NFS server and local machine will have different times.  The Unix
<a href="psi_element://touch%281%29" style="color:red">touch(1)</a> command will in fact normally use this form instead of the
one shown in the first example.</p>
<p style="padding-bottom: 10px;">Passing only one of the first two elements as <a href="psi_element://pod%3A%3Aperlfunc%2Fundef+EXPR"><code>undef</code></a> is
equivalent to passing a 0 and will not have the effect described when
both are <a href="psi_element://pod%3A%3Aperlfunc%2Fundef+EXPR"><code>undef</code></a>.  This also triggers an
uninitialized warning.</p>
<p style="padding-bottom: 10px;">On systems that support <a href="psi_element://futimes%282%29" style="color:red">futimes(2)</a>, you may pass filehandles among the
files.  On systems that don't support <a href="psi_element://futimes%282%29" style="color:red">futimes(2)</a>, passing filehandles raises
an exception.  Filehandles must be passed as globs or glob references to be
recognized; barewords are considered filenames.</p>
<p style="padding-bottom: 10px;">Portability issues: <a href="psi_element://perlport%2Futime">utime in perlport</a>.</p></dd></dl>
