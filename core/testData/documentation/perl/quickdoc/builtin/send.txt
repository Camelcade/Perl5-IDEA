<p><a href="psi_element://perlfunc">perlfunc</a>: <a href="psi_element://perlfunc%2FDESCRIPTION">DESCRIPTION</a>: <a href="psi_element://perlfunc%2FAlphabetical+Listing+of+Perl+Functions">Alphabetical Listing of Perl Functions</a></p><dl><dt style="padding-bottom:4px;font-weight:bold;">send SOCKET,MSG,FLAGS,TO</dt>
<dt style="padding-bottom:4px;font-weight:bold;">send SOCKET,MSG,FLAGS</dt><dd style="padding-top:6px;">
<p style="padding-bottom: 10px;">Sends a message on a socket.  Attempts to send the scalar MSG to the SOCKET
filehandle.  Takes the same flags as the system call of the same name.  On
unconnected sockets, you must specify a destination to <i>send to</i>, in which
case it does a <a href="psi_element://sendto%282%29" style="color:red">sendto(2)</a> syscall.  Returns the number of characters sent,
or the undefined value on error.  The <a href="psi_element://sendmsg%282%29" style="color:red">sendmsg(2)</a> syscall is currently
unimplemented.  See <a href="psi_element://perlipc%2FUDP%3A+Message+Passing">UDP: Message Passing in perlipc</a> for examples.</p>
<p style="padding-bottom: 10px;">Note the <i>characters</i>: depending on the status of the socket, either
(8-bit) bytes or characters are sent.  By default all sockets operate
on bytes, but for example if the socket has been changed using
<a href="psi_element://perlfunc%2Fbinmode+FILEHANDLE%2C+LAYER"><code>binmode</code></a> to operate with the
<code>:encoding(UTF-8)</code> I/O layer (see <a href="psi_element://perlfunc%2Fopen+FILEHANDLE%2CEXPR"><code>open</code></a>, or
the <a href="psi_element://open" style="color:red">open</a> pragma), the I/O will operate on UTF-8
encoded Unicode characters, not bytes.  Similarly for the <code>:encoding</code>
layer: in that case pretty much any characters can be sent.</p></dd></dl>
