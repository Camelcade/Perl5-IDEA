<p><a href="psi_element://pod%3A%3Aperlfunc">pod::perlfunc</a>: <a href="psi_element://pod%3A%3Aperlfunc%2FDESCRIPTION">DESCRIPTION</a>: <a href="psi_element://pod%3A%3Aperlfunc%2FAlphabetical+Listing+of+Perl+Functions">Alphabetical Listing of Perl Functions</a></p><dl><dt style="padding-bottom:4px;font-weight:bold;">redo LABEL</dt>
<dt style="padding-bottom:4px;font-weight:bold;">redo EXPR</dt>
<dt style="padding-bottom:4px;font-weight:bold;">redo</dt><dd style="padding-top:6px;">
<p style="padding-bottom: 10px;">The <a href="psi_element://pod%3A%3Aperlfunc%2Fredo+LABEL"><code>redo</code></a> command restarts the loop block without
evaluating the conditional again.  The <a href="psi_element://pod%3A%3Aperlfunc%2Fcontinue+BLOCK"><code>continue</code></a>
block, if any, is not executed.  If
the LABEL is omitted, the command refers to the innermost enclosing
loop.  The <code>redo EXPR</code> form, available starting in Perl 5.18.0, allows a
label name to be computed at run time, and is otherwise identical to <code>redo
LABEL</code>.  Programs that want to lie to themselves about what was just input
normally use this command:</p>
<div style="padding-bottom: 10px;"><pre><code>    # a simpleminded Pascal comment stripper
    # (warning: assumes no { or } in strings)
    LINE: while (&lt;STDIN&gt;) {
        while (s|({.*}.*){.*}|$1 |) {}
        s|{.*}| |;
        if (s|{.*| |) {
            my $front = $_;
            while (&lt;STDIN&gt;) {
                if (/}/) {  # end of comment?
                    s|^|$front\{|;
                    redo LINE;
                }
            }
        }
        print;
    }</code></pre></div>
<p style="padding-bottom: 10px;"><a href="psi_element://pod%3A%3Aperlfunc%2Fredo+LABEL"><code>redo</code></a> cannot return a value from a block that typically
returns a value, such as <code>eval {}</code>, <code>sub {}</code>, or <code>do {}</code>. It will perform
its flow control behavior, which precludes any return value. It should not be
used to exit a <a href="psi_element://pod%3A%3Aperlfunc%2Fgrep+BLOCK+LIST"><code>grep</code></a> or <a href="psi_element://pod%3A%3Aperlfunc%2Fmap+BLOCK+LIST"><code>map</code></a>
operation.</p>
<p style="padding-bottom: 10px;">Note that a block by itself is semantically identical to a loop
that executes once.  Thus <a href="psi_element://pod%3A%3Aperlfunc%2Fredo+LABEL"><code>redo</code></a> inside such a block
will effectively turn it into a looping construct.</p>
<p style="padding-bottom: 10px;">See also <a href="psi_element://pod%3A%3Aperlfunc%2Fcontinue+BLOCK"><code>continue</code></a> for an illustration of how
<a href="psi_element://pod%3A%3Aperlfunc%2Flast+LABEL"><code>last</code></a>, <a href="psi_element://pod%3A%3Aperlfunc%2Fnext+LABEL"><code>next</code></a>, and
<a href="psi_element://pod%3A%3Aperlfunc%2Fredo+LABEL"><code>redo</code></a> work.</p>
<p style="padding-bottom: 10px;">Unlike most named operators, this has the same precedence as assignment.
It is also exempt from the looks-like-a-function rule, so
<code>redo (&quot;foo&quot;).&quot;bar&quot;</code> will cause &quot;bar&quot; to be part of the argument to
<a href="psi_element://pod%3A%3Aperlfunc%2Fredo+LABEL"><code>redo</code></a>.</p></dd></dl>
