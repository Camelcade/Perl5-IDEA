<p><a href="psi_element://pod%3A%3Aperlfunc">pod::perlfunc</a>: <a href="psi_element://pod%3A%3Aperlfunc%2FDESCRIPTION">DESCRIPTION</a>: <a href="psi_element://pod%3A%3Aperlfunc%2FAlphabetical+Listing+of+Perl+Functions">Alphabetical Listing of Perl Functions</a></p><dl><dt style="padding-bottom:4px;font-weight:bold;">flock FILEHANDLE,OPERATION
  </dt><dd style="padding-top:6px;">
<p style="padding-bottom: 10px;">Calls <a href="psi_element://flock%282%29" style="color:red">flock(2)</a>, or an emulation of it, on FILEHANDLE.  Returns true
for success, false on failure.  Produces a fatal error if used on a
machine that doesn't implement <a href="psi_element://flock%282%29" style="color:red">flock(2)</a>, <a href="psi_element://fcntl%282%29" style="color:red">fcntl(2)</a> locking, or
<a href="psi_element://lockf%283%29" style="color:red">lockf(3)</a>.  <a href="psi_element://pod%3A%3Aperlfunc%2Fflock+FILEHANDLE%2COPERATION">C<flock></a> is Perl's portable
file-locking interface, although it locks entire files only, not
records.</p>
<p style="padding-bottom: 10px;">Two potentially non-obvious but traditional <a href="psi_element://pod%3A%3Aperlfunc%2Fflock+FILEHANDLE%2COPERATION">C<flock></a> semantics are
that it waits indefinitely until the lock is granted, and that its locks
are <B>merely advisory</B>.  Such discretionary locks are more flexible, but
offer fewer guarantees.  This means that programs that do not also use
<a href="psi_element://pod%3A%3Aperlfunc%2Fflock+FILEHANDLE%2COPERATION">C<flock></a> may modify files locked with
<a href="psi_element://pod%3A%3Aperlfunc%2Fflock+FILEHANDLE%2COPERATION">C<flock></a>.  See <a href="psi_element://perlport">perlport</a>,
your port's specific documentation, and your system-specific local manpages
for details.  It's best to assume traditional behavior if you're writing
portable programs.  (But if you're not, you should as always feel perfectly
free to write for your own system's idiosyncrasies (sometimes called
&quot;features&quot;).  Slavish adherence to portability concerns shouldn't get
in the way of your getting your job done.)</p>
<p style="padding-bottom: 10px;">OPERATION is one of LOCK_SH, LOCK_EX, or LOCK_UN, possibly combined with
LOCK_NB.  These constants are traditionally valued 1, 2, 8 and 4, but
you can use the symbolic names if you import them from the <a href="psi_element://Fcntl" style="color:red">Fcntl</a> module,
either individually, or as a group using the <code>:flock</code> tag.  LOCK_SH
requests a shared lock, LOCK_EX requests an exclusive lock, and LOCK_UN
releases a previously requested lock.  If LOCK_NB is bitwise-or'ed with
LOCK_SH or LOCK_EX, then <a href="psi_element://pod%3A%3Aperlfunc%2Fflock+FILEHANDLE%2COPERATION">C<flock></a> returns
immediately rather than blocking waiting for the lock; check the return
status to see if you got it.</p>
<p style="padding-bottom: 10px;">To avoid the possibility of miscoordination, Perl now flushes FILEHANDLE
before locking or unlocking it.</p>
<p style="padding-bottom: 10px;">Note that the emulation built with <a href="psi_element://lockf%283%29" style="color:red">lockf(3)</a> doesn't provide shared
locks, and it requires that FILEHANDLE be open with write intent.  These
are the semantics that <a href="psi_element://lockf%283%29" style="color:red">lockf(3)</a> implements.  Most if not all systems
implement <a href="psi_element://lockf%283%29" style="color:red">lockf(3)</a> in terms of <a href="psi_element://fcntl%282%29" style="color:red">fcntl(2)</a> locking, though, so the
differing semantics shouldn't bite too many people.</p>
<p style="padding-bottom: 10px;">Note that the <a href="psi_element://fcntl%282%29" style="color:red">fcntl(2)</a> emulation of <a href="psi_element://flock%283%29" style="color:red">flock(3)</a> requires that FILEHANDLE
be open with read intent to use LOCK_SH and requires that it be open
with write intent to use LOCK_EX.</p>
<p style="padding-bottom: 10px;">Note also that some versions of <a href="psi_element://pod%3A%3Aperlfunc%2Fflock+FILEHANDLE%2COPERATION">C<flock></a>
cannot lock things over the network; you would need to use the more
system-specific <a href="psi_element://pod%3A%3Aperlfunc%2Ffcntl+FILEHANDLE%2CFUNCTION%2CSCALAR">C<fcntl></a> for
that.  If you like you can force Perl to ignore your system's <a href="psi_element://flock%282%29" style="color:red">flock(2)</a>
function, and so provide its own <a href="psi_element://fcntl%282%29" style="color:red">fcntl(2)</a>-based emulation, by passing
the switch <code>-Ud_flock</code> to the <i>Configure</i> program when you configure
and build a new Perl.</p>
<p style="padding-bottom: 10px;">Here's a mailbox appender for BSD systems.</p>
<div style="padding-bottom: 10px;"><pre><code>    # import LOCK_* and SEEK_END constants
    use Fcntl qw(:flock SEEK_END);

    sub lock {
        my ($fh) = @_;
        flock($fh, LOCK_EX) or die &quot;Cannot lock mailbox - $!\n&quot;;

        # and, in case someone appended while we were waiting...
        seek($fh, 0, SEEK_END) or die &quot;Cannot seek - $!\n&quot;;
    }

    sub unlock {
        my ($fh) = @_;
        flock($fh, LOCK_UN) or die &quot;Cannot unlock mailbox - $!\n&quot;;
    }

    open(my $mbox, &quot;&gt;&gt;&quot;, &quot;/usr/spool/mail/$ENV{'USER'}&quot;)
        or die &quot;Can't open mailbox: $!&quot;;

    lock($mbox);
    print $mbox $msg,&quot;\n\n&quot;;
    unlock($mbox);</code></pre></div>
<p style="padding-bottom: 10px;">On systems that support a real <a href="psi_element://flock%282%29" style="color:red">flock(2)</a>, locks are inherited across
<a href="psi_element://pod%3A%3Aperlfunc%2Ffork">C<fork></a> calls, whereas those that must resort to the more
capricious <a href="psi_element://fcntl%282%29" style="color:red">fcntl(2)</a> function lose their locks, making it seriously
harder to write servers.</p>
<p style="padding-bottom: 10px;">See also <a href="psi_element://DB_File" style="color:red">DB_File</a> for other <a href="psi_element://pod%3A%3Aperlfunc%2Fflock+FILEHANDLE%2COPERATION">C<flock></a>
examples.</p>
<p style="padding-bottom: 10px;">Portability issues: <a href="psi_element://perlport%2Fflock">flock in perlport</a>.</p></dd></dl>
