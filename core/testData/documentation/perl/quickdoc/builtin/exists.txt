<p><a href="psi_element://pod%3A%3Aperlfunc">pod::perlfunc</a>: <a href="psi_element://pod%3A%3Aperlfunc%2FDESCRIPTION">DESCRIPTION</a>: <a href="psi_element://pod%3A%3Aperlfunc%2FAlphabetical+Listing+of+Perl+Functions">Alphabetical Listing of Perl Functions</a></p><dl><dt style="padding-bottom:4px;font-weight:bold;">exists EXPR
 </dt><dd style="padding-top:6px;">
<p style="padding-bottom: 10px;">Given an expression that specifies an element of a hash, returns true if the
specified element in the hash has ever been initialized, even if the
corresponding value is undefined.</p>
<div style="padding-bottom: 10px;"><pre><code>    print &quot;Exists\n&quot;    if exists $hash{$key};
    print &quot;Defined\n&quot;   if defined $hash{$key};
    print &quot;True\n&quot;      if $hash{$key};</code></pre></div>
<p style="padding-bottom: 10px;">exists may also be called on array elements, but its behavior is much less
obvious and is strongly tied to the use of <a href="psi_element://pod%3A%3Aperlfunc%2Fdelete+EXPR">C<delete></a> on
arrays.</p>
<p style="padding-bottom: 10px;"><B>WARNING:</B> Calling <a href="psi_element://pod%3A%3Aperlfunc%2Fexists+EXPR">C<exists></a> on array values is
strongly discouraged.  The
notion of deleting or checking the existence of Perl array elements is not
conceptually coherent, and can lead to surprising behavior.</p>
<div style="padding-bottom: 10px;"><pre><code>    print &quot;Exists\n&quot;    if exists $array[$index];
    print &quot;Defined\n&quot;   if defined $array[$index];
    print &quot;True\n&quot;      if $array[$index];</code></pre></div>
<p style="padding-bottom: 10px;">A hash or array element can be true only if it's defined and defined only if
it exists, but the reverse doesn't necessarily hold true.</p>
<p style="padding-bottom: 10px;">Given an expression that specifies the name of a subroutine,
returns true if the specified subroutine has ever been declared, even
if it is undefined.  Mentioning a subroutine name for exists or defined
does not count as declaring it.  Note that a subroutine that does not
exist may still be callable: its package may have an <code>AUTOLOAD</code>
method that makes it spring into existence the first time that it is
called; see <a href="psi_element://perlsub">perlsub</a>.</p>
<div style="padding-bottom: 10px;"><pre><code>    print &quot;Exists\n&quot;  if exists &amp;subroutine;
    print &quot;Defined\n&quot; if defined &amp;subroutine;</code></pre></div>
<p style="padding-bottom: 10px;">Note that the EXPR can be arbitrarily complicated as long as the final
operation is a hash or array key lookup or subroutine name:</p>
<div style="padding-bottom: 10px;"><pre><code>    if (exists $ref-&gt;{A}-&gt;{B}-&gt;{$key})  { }
    if (exists $hash{A}{B}{$key})       { }

    if (exists $ref-&gt;{A}-&gt;{B}-&gt;[$ix])   { }
    if (exists $hash{A}{B}[$ix])        { }

    if (exists &amp;{$ref-&gt;{A}{B}{$key}})   { }</code></pre></div>
<p style="padding-bottom: 10px;">Although the most deeply nested array or hash element will not spring into
existence just because its existence was tested, any intervening ones will.
Thus <code>$ref-&gt;{&quot;A&quot;}</code> and <code>$ref-&gt;{&quot;A&quot;}-&gt;{&quot;B&quot;}</code> will spring
into existence due to the existence test for the <code>$key</code> element above.
This happens anywhere the arrow operator is used, including even here:</p>
<div style="padding-bottom: 10px;"><pre><code>    undef $ref;
    if (exists $ref-&gt;{&quot;Some key&quot;})    { }
    print $ref;  # prints HASH(0x80d3d5c)</code></pre></div>
<p style="padding-bottom: 10px;">Use of a subroutine call, rather than a subroutine name, as an argument
to <a href="psi_element://pod%3A%3Aperlfunc%2Fexists+EXPR">C<exists></a> is an error.</p>
<div style="padding-bottom: 10px;"><pre><code>    exists &amp;sub;    # OK
    exists &amp;sub();  # Error</code></pre></div></dd></dl>
