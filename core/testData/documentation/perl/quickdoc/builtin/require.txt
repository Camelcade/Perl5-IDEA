<p><a href="psi_element://pod%3A%3Aperlfunc">pod::perlfunc</a>: <a href="psi_element://pod%3A%3Aperlfunc%2FDESCRIPTION">DESCRIPTION</a>: <a href="psi_element://pod%3A%3Aperlfunc%2FAlphabetical+Listing+of+Perl+Functions">Alphabetical Listing of Perl Functions</a></p><dl><dt style="padding-bottom:4px;font-weight:bold;">require VERSION</dt>
<dt style="padding-bottom:4px;font-weight:bold;">require EXPR</dt>
<dt style="padding-bottom:4px;font-weight:bold;">require</dt><dd style="padding-top:6px;">
<p style="padding-bottom: 10px;">Demands a version of Perl specified by VERSION, or demands some semantics
specified by EXPR or by <a href="psi_element://perlvar%2F%24_"><code>$_</code></a> if EXPR is not supplied.</p>
<p style="padding-bottom: 10px;">VERSION may be either a literal such as v5.24.1, which will be
compared to <a href="psi_element://perlvar%2F%24%5EV"><code>$^V</code></a> (or <code>$PERL_VERSION</code> in <a href="psi_element://English" style="color:red">English</a>),
or a numeric argument of the form 5.024001, which will be compared to
<a href="psi_element://perlvar%2F%24%5D"><code>$]</code></a>. An exception is raised if VERSION is greater than
the version of the current Perl interpreter.  Compare with
<a href="psi_element://pod%3A%3Aperlfunc%2Fuse+Module+VERSION+LIST"><code>use</code></a>, which can do a similar check at
compile time.</p>
<p style="padding-bottom: 10px;">Specifying VERSION as a numeric argument of the form 5.024001 should
generally be avoided as older less readable syntax compared to
v5.24.1. Before perl 5.8.0 (released in 2002), the more verbose numeric
form was the only supported syntax, which is why you might see it in
older code.</p>
<div style="padding-bottom: 10px;"><pre><code>    require v5.24.1;    # run time version check
    require 5.24.1;     # ditto
    require 5.024_001;  # ditto; older syntax compatible
                          with perl 5.6</code></pre></div>
<p style="padding-bottom: 10px;">Otherwise, <a href="psi_element://pod%3A%3Aperlfunc%2Frequire+VERSION"><code>require</code></a> demands that a library file be
included if it hasn't already been included.  The file is included via
the do-FILE mechanism, which is essentially just a variety of
<a href="psi_element://pod%3A%3Aperlfunc%2Feval+EXPR"><code>eval</code></a> with the
caveat that lexical variables in the invoking script will be invisible
to the included code.  If it were implemented in pure Perl, it
would have semantics similar to the following:</p>
<div style="padding-bottom: 10px;"><pre><code>    use Carp 'croak';
    use version;

    sub require {
        my ($filename) = @_;
        if ( my $version = eval { version-&gt;parse($filename) } ) {
            if ( $version &gt; $^V ) {
               my $vn = $version-&gt;normal;
               croak &quot;Perl $vn required--this is only $^V, stopped&quot;;
            }
            return 1;
        }

        if (exists $INC{$filename}) {
            return 1 if $INC{$filename};
            croak &quot;Compilation failed in require&quot;;
        }

        foreach $prefix (@INC) {
            if (ref($prefix)) {
                #... do other stuff - see text below ....
            }
            # (see text below about possible appending of .pmc
            # suffix to $filename)
            my $realfilename = &quot;$prefix/$filename&quot;;
            next if ! -e $realfilename || -d _ || -b _;
            $INC{$filename} = $realfilename;
            my $result = do($realfilename);
                         # but run in caller's namespace

            if (!defined $result) {
                $INC{$filename} = undef;
                croak $@ ? &quot;$@Compilation failed in require&quot;
                         : &quot;Can't locate $filename: $!\n&quot;;
            }
            if (!$result) {
                delete $INC{$filename};
                croak &quot;$filename did not return true value&quot;;
            }
            $! = 0;
            return $result;
        }
        croak &quot;Can't locate $filename in \@INC ...&quot;;
    }</code></pre></div>
<p style="padding-bottom: 10px;">Note that the file will not be included twice under the same specified
name.</p>
<p style="padding-bottom: 10px;">The file must return true as the last statement to indicate
successful execution of any initialization code, so it's customary to
end such a file with <code>1;</code> unless you're sure it'll return true
otherwise.  But it's better just to put the <code>1;</code>, in case you add more
statements.</p>
<p style="padding-bottom: 10px;">If EXPR is a bareword, <a href="psi_element://pod%3A%3Aperlfunc%2Frequire+VERSION"><code>require</code></a> assumes a <i>.pm</i>
extension and replaces <code>::</code> with <code>/</code> in the filename for you,
to make it easy to load standard modules.  This form of loading of
modules does not risk altering your namespace, however it will autovivify
the stash for the required module.</p>
<p style="padding-bottom: 10px;">In other words, if you try this:</p>
<div style="padding-bottom: 10px;"><pre><code>        require Foo::Bar;     # a splendid bareword</code></pre></div>
<p style="padding-bottom: 10px;">The require function will actually look for the <i>Foo/Bar.pm</i> file in the
directories specified in the <a href="psi_element://perlvar%2F%40INC"><code>@INC</code></a> array, and it will
autovivify the <code>Foo::Bar::</code> stash at compile time.</p>
<p style="padding-bottom: 10px;">But if you try this:</p>
<div style="padding-bottom: 10px;"><pre><code>        my $class = 'Foo::Bar';
        require $class;       # $class is not a bareword
    #or
        require &quot;Foo::Bar&quot;;   # not a bareword because of the &quot;&quot;</code></pre></div>
<p style="padding-bottom: 10px;">The require function will look for the <i>Foo::Bar</i> file in the
<a href="psi_element://perlvar%2F%40INC"><code>@INC</code></a>  array and
will complain about not finding <i>Foo::Bar</i> there.  In this case you can do:</p>
<div style="padding-bottom: 10px;"><pre><code>        eval &quot;require $class&quot;;</code></pre></div>
<p style="padding-bottom: 10px;">or you could do</p>
<div style="padding-bottom: 10px;"><pre><code>        require &quot;Foo/Bar.pm&quot;;</code></pre></div>
<p style="padding-bottom: 10px;">Neither of these forms will autovivify any stashes at compile time and
only have run time effects.</p>
<p style="padding-bottom: 10px;">Now that you understand how <a href="psi_element://pod%3A%3Aperlfunc%2Frequire+VERSION"><code>require</code></a> looks for
files with a bareword argument, there is a little extra functionality
going on behind the scenes.  Before <a href="psi_element://pod%3A%3Aperlfunc%2Frequire+VERSION"><code>require</code></a> looks
for a <i>.pm</i> extension, it will first look for a similar filename with a
<i>.pmc</i> extension.  If this file is found, it will be loaded in place of
any file ending in a <i>.pm</i> extension. This applies to both the explicit
<code>require &quot;Foo/Bar.pm&quot;;</code> form and the <code>require Foo::Bar;</code> form.</p>
<p style="padding-bottom: 10px;">You can also insert hooks into the import facility by putting Perl code
directly into the <a href="psi_element://perlvar%2F%40INC"><code>@INC</code></a> array.  There are three forms
of hooks: subroutine references, array references, and blessed objects.</p>
<p style="padding-bottom: 10px;">Subroutine references are the simplest case.  When the inclusion system
walks through <a href="psi_element://perlvar%2F%40INC"><code>@INC</code></a> and encounters a subroutine, this
subroutine gets called with two parameters, the first a reference to
itself, and the second the name of the file to be included (e.g.,
<i>Foo/Bar.pm</i>).  The subroutine should return either nothing or else a
list of up to four values in the following order:</p>
<dl><dt style="padding-bottom:4px;font-weight:bold;"></dt><dd style="padding-top:6px;">

<p style="padding-bottom: 10px;">A reference to a scalar, containing any initial source code to prepend to
the file or generator output.</p></dd>
<dt style="padding-bottom:4px;font-weight:bold;"></dt><dd style="padding-top:6px;">

<p style="padding-bottom: 10px;">A filehandle, from which the file will be read.</p></dd>
<dt style="padding-bottom:4px;font-weight:bold;"></dt><dd style="padding-top:6px;">

<p style="padding-bottom: 10px;">A reference to a subroutine.  If there is no filehandle (previous item),
then this subroutine is expected to generate one line of source code per
call, writing the line into <a href="psi_element://perlvar%2F%24_"><code>$_</code></a> and returning 1, then
finally at end of file returning 0.  If there is a filehandle, then the
subroutine will be called to act as a simple source filter, with the
line as read in <a href="psi_element://perlvar%2F%24_"><code>$_</code></a>.
Again, return 1 for each valid line, and 0 after all lines have been
returned.
For historical reasons the subroutine will receive a meaningless argument
(in fact always the numeric value zero) as <code>$_[0]</code>.</p></dd>
<dt style="padding-bottom:4px;font-weight:bold;"></dt><dd style="padding-top:6px;">

<p style="padding-bottom: 10px;">Optional state for the subroutine.  The state is passed in as <code>$_[1]</code>.</p></dd></dl>
<p style="padding-bottom: 10px;">If an empty list, <a href="psi_element://pod%3A%3Aperlfunc%2Fundef+EXPR"><code>undef</code></a>, or nothing that matches the
first 3 values above is returned, then <a href="psi_element://pod%3A%3Aperlfunc%2Frequire+VERSION"><code>require</code></a>
looks at the remaining elements of <a href="psi_element://perlvar%2F%40INC"><code>@INC</code></a>.
Note that this filehandle must be a real filehandle (strictly a typeglob
or reference to a typeglob, whether blessed or unblessed); tied filehandles
will be ignored and processing will stop there.</p>
<p style="padding-bottom: 10px;">If the hook is an array reference, its first element must be a subroutine
reference.  This subroutine is called as above, but the first parameter is
the array reference.  This lets you indirectly pass arguments to
the subroutine.</p>
<p style="padding-bottom: 10px;">In other words, you can write:</p>
<div style="padding-bottom: 10px;"><pre><code>    push @INC, \&amp;my_sub;
    sub my_sub {
        my ($coderef, $filename) = @_;  # $coderef is \&amp;my_sub
        ...
    }</code></pre></div>
<p style="padding-bottom: 10px;">or:</p>
<div style="padding-bottom: 10px;"><pre><code>    push @INC, [ \&amp;my_sub, $x, $y, ... ];
    sub my_sub {
        my ($arrayref, $filename) = @_;
        # Retrieve $x, $y, ...
        my (undef, @parameters) = @$arrayref;
        ...
    }</code></pre></div>
<p style="padding-bottom: 10px;">If the hook is an object, it must provide an <code>INC</code> method that will be
called as above, the first parameter being the object itself.  (Note that
you must fully qualify the sub's name, as unqualified <code>INC</code> is always forced
into package <code>main</code>.)  Here is a typical code layout:</p>
<div style="padding-bottom: 10px;"><pre><code>    # In Foo.pm
    package Foo;
    sub new { ... }
    sub Foo::INC {
        my ($self, $filename) = @_;
        ...
    }

    # In the main program
    push @INC, Foo-&gt;new(...);</code></pre></div>
<p style="padding-bottom: 10px;">These hooks are also permitted to set the <a href="psi_element://perlvar%2F%25INC"><code>%INC</code></a> entry
corresponding to the files they have loaded.  See <a href="psi_element://perlvar%2F%25INC">%INC in perlvar</a>.</p>
<p style="padding-bottom: 10px;">For a yet-more-powerful import facility, see
<a href="psi_element://pod%3A%3Aperlfunc%2Fuse+Module+VERSION+LIST"><code>use</code></a> and <a href="psi_element://perlmod">perlmod</a>.</p></dd></dl>
