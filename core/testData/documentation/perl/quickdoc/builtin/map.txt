<p><a href="psi_element://pod%3A%3Aperlfunc">pod::perlfunc</a>: <a href="psi_element://pod%3A%3Aperlfunc%2FDESCRIPTION">DESCRIPTION</a>: <a href="psi_element://pod%3A%3Aperlfunc%2FAlphabetical+Listing+of+Perl+Functions">Alphabetical Listing of Perl Functions</a></p><dl><dt style="padding-bottom:4px;font-weight:bold;">map BLOCK LIST</dt>
<dt style="padding-bottom:4px;font-weight:bold;">map EXPR,LIST</dt><dd style="padding-top:6px;">
<p style="padding-bottom: 10px;">Evaluates the BLOCK or EXPR for each element of LIST (locally setting
<a href="psi_element://perlvar%2F%24_">C<$_></a> to each element) and returns the list value composed
of the
results of each such evaluation.  In scalar context, returns the
total number of elements so generated.  Evaluates BLOCK or EXPR in
list context, so each element of LIST may produce zero, one, or
more elements in the returned value.</p>
<div style="padding-bottom: 10px;"><pre><code>    my @chars = map(chr, @numbers);</code></pre></div>
<p style="padding-bottom: 10px;">translates a list of numbers to the corresponding characters.</p>
<div style="padding-bottom: 10px;"><pre><code>    my @squares = map { $_ * $_ } @numbers;</code></pre></div>
<p style="padding-bottom: 10px;">translates a list of numbers to their squared values.</p>
<div style="padding-bottom: 10px;"><pre><code>    my @squares = map { $_ &gt; 5 ? ($_ * $_) : () } @numbers;</code></pre></div>
<p style="padding-bottom: 10px;">shows that number of returned elements can differ from the number of
input elements.  To omit an element, return an empty list ().
This could also be achieved by writing</p>
<div style="padding-bottom: 10px;"><pre><code>    my @squares = map { $_ * $_ } grep { $_ &gt; 5 } @numbers;</code></pre></div>
<p style="padding-bottom: 10px;">which makes the intention more clear.</p>
<p style="padding-bottom: 10px;">Map always returns a list, which can be
assigned to a hash such that the elements
become key/value pairs.  See <a href="psi_element://perldata">perldata</a> for more details.</p>
<div style="padding-bottom: 10px;"><pre><code>    my %hash = map { get_a_key_for($_) =&gt; $_ } @array;</code></pre></div>
<p style="padding-bottom: 10px;">is just a funny way to write</p>
<div style="padding-bottom: 10px;"><pre><code>    my %hash;
    foreach (@array) {
        $hash{get_a_key_for($_)} = $_;
    }</code></pre></div>
<p style="padding-bottom: 10px;">Note that <a href="psi_element://perlvar%2F%24_">C<$_></a> is an alias to the list value, so it can
be used to modify the elements of the LIST.  While this is useful and
supported, it can cause bizarre results if the elements of LIST are not
variables.  Using a regular <code>foreach</code> loop for this purpose would be
clearer in most cases.  See also <a href="psi_element://pod%3A%3Aperlfunc%2Fgrep+BLOCK+LIST">C<grep></a> for an
array composed of those items of the original list for which the BLOCK
or EXPR evaluates to true.</p>
<p style="padding-bottom: 10px;"><code>{</code> starts both hash references and blocks, so <code>map { ...</code> could be either
the start of map BLOCK LIST or map EXPR, LIST.  Because Perl doesn't look
ahead for the closing <code>}</code> it has to take a guess at which it's dealing with
based on what it finds just after the
<code>{</code>.  Usually it gets it right, but if it
doesn't it won't realize something is wrong until it gets to the <code>}</code> and
encounters the missing (or unexpected) comma.  The syntax error will be
reported close to the <code>}</code>, but you'll need to change something near the <code>{</code>
such as using a unary <code>+</code> or semicolon to give Perl some help:</p>
<div style="padding-bottom: 10px;"><pre><code> my %hash = map {  &quot;\L$_&quot; =&gt; 1  } @array # perl guesses EXPR. wrong
 my %hash = map { +&quot;\L$_&quot; =&gt; 1  } @array # perl guesses BLOCK. right
 my %hash = map {; &quot;\L$_&quot; =&gt; 1  } @array # this also works
 my %hash = map { (&quot;\L$_&quot; =&gt; 1) } @array # as does this
 my %hash = map {  lc($_) =&gt; 1  } @array # and this.
 my %hash = map +( lc($_) =&gt; 1 ), @array # this is EXPR and works!

 my %hash = map  ( lc($_), 1 ),   @array # evaluates to (1, @array)</code></pre></div>
<p style="padding-bottom: 10px;">or to force an anon hash constructor use <code>+{</code>:</p>
<div style="padding-bottom: 10px;"><pre><code>    my @hashes = map +{ lc($_) =&gt; 1 }, @array # EXPR, so needs
                                              # comma at end</code></pre></div>
<p style="padding-bottom: 10px;">to get a list of anonymous hashes each with only one entry apiece.</p></dd></dl>
