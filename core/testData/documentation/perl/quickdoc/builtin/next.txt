<p><a href="psi_element://pod%3A%3Aperlfunc">pod::perlfunc</a>: <a href="psi_element://pod%3A%3Aperlfunc%2FDESCRIPTION">DESCRIPTION</a>: <a href="psi_element://pod%3A%3Aperlfunc%2FAlphabetical+Listing+of+Perl+Functions">Alphabetical Listing of Perl Functions</a></p><dl><dt style="padding-bottom:4px;font-weight:bold;">next LABEL
 </dt>
<dt style="padding-bottom:4px;font-weight:bold;">next EXPR</dt>
<dt style="padding-bottom:4px;font-weight:bold;">next</dt><dd style="padding-top:6px;">
<p style="padding-bottom: 10px;">The <a href="psi_element://pod%3A%3Aperlfunc%2Fnext+LABEL"><code>next</code></a> command is like the <code>continue</code> statement in
C; it starts the next iteration of the loop:</p>
<div style="padding-bottom: 10px;"><pre><code>    LINE: while (&lt;STDIN&gt;) {
        next LINE if /^#/;  # discard comments
        #...
    }</code></pre></div>
<p style="padding-bottom: 10px;">Note that if there were a <a href="psi_element://pod%3A%3Aperlfunc%2Fcontinue+BLOCK"><code>continue</code></a> block on the
above, it would get
executed even on discarded lines.  If LABEL is omitted, the command
refers to the innermost enclosing loop.  The <code>next EXPR</code> form, available
as of Perl 5.18.0, allows a label name to be computed at run time, being
otherwise identical to <code>next LABEL</code>.</p>
<p style="padding-bottom: 10px;"><a href="psi_element://pod%3A%3Aperlfunc%2Fnext+LABEL"><code>next</code></a> cannot return a value from a block that typically
returns a value, such as <code>eval {}</code>, <code>sub {}</code>, or <code>do {}</code>. It will perform
its flow control behavior, which precludes any return value. It should not be
used to exit a <a href="psi_element://pod%3A%3Aperlfunc%2Fgrep+BLOCK+LIST"><code>grep</code></a> or <a href="psi_element://pod%3A%3Aperlfunc%2Fmap+BLOCK+LIST"><code>map</code></a>
operation.</p>
<p style="padding-bottom: 10px;">Note that a block by itself is semantically identical to a loop
that executes once.  Thus <a href="psi_element://pod%3A%3Aperlfunc%2Fnext+LABEL"><code>next</code></a> will exit such a block
early.</p>
<p style="padding-bottom: 10px;">See also <a href="psi_element://pod%3A%3Aperlfunc%2Fcontinue+BLOCK"><code>continue</code></a> for an illustration of how
<a href="psi_element://pod%3A%3Aperlfunc%2Flast+LABEL"><code>last</code></a>, <a href="psi_element://pod%3A%3Aperlfunc%2Fnext+LABEL"><code>next</code></a>, and
<a href="psi_element://pod%3A%3Aperlfunc%2Fredo+LABEL"><code>redo</code></a> work.</p>
<p style="padding-bottom: 10px;">Unlike most named operators, this has the same precedence as assignment.
It is also exempt from the looks-like-a-function rule, so
<code>next (&quot;foo&quot;).&quot;bar&quot;</code> will cause &quot;bar&quot; to be part of the argument to
<a href="psi_element://pod%3A%3Aperlfunc%2Fnext+LABEL"><code>next</code></a>.</p></dd></dl>
