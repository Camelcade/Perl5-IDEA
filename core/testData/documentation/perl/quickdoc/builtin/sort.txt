<p><a href="psi_element://pod%3A%3Aperlfunc">pod::perlfunc</a>: <a href="psi_element://pod%3A%3Aperlfunc%2FDESCRIPTION">DESCRIPTION</a>: <a href="psi_element://pod%3A%3Aperlfunc%2FAlphabetical+Listing+of+Perl+Functions">Alphabetical Listing of Perl Functions</a></p><dl><dt style="padding-bottom:4px;font-weight:bold;">sort SUBNAME LIST</dt>
<dt style="padding-bottom:4px;font-weight:bold;">sort BLOCK LIST</dt>
<dt style="padding-bottom:4px;font-weight:bold;">sort LIST</dt><dd style="padding-top:6px;">
<p style="padding-bottom: 10px;">In list context, this sorts the LIST and returns the sorted list value.
In scalar context, the behaviour of <a href="psi_element://pod%3A%3Aperlfunc%2Fsort+SUBNAME+LIST">C<sort></a> is
undefined.</p>
<p style="padding-bottom: 10px;">If SUBNAME or BLOCK is omitted, <a href="psi_element://pod%3A%3Aperlfunc%2Fsort+SUBNAME+LIST">C<sort></a>s in
standard string comparison
order.  If SUBNAME is specified, it gives the name of a subroutine
that returns an integer less than, equal to, or greater than <code>0</code>,
depending on how the elements of the list are to be ordered.  (The
<code>&lt;=&gt;</code> and <code>cmp</code> operators are extremely useful in such routines.)
SUBNAME may be a scalar variable name (unsubscripted), in which case
the value provides the name of (or a reference to) the actual
subroutine to use.  In place of a SUBNAME, you can provide a BLOCK as
an anonymous, in-line sort subroutine.</p>
<p style="padding-bottom: 10px;">If the subroutine's prototype is <code>($$)</code>, the elements to be compared are
passed by reference in <a href="psi_element://perlvar%2F%40_">C<@_></a>, as for a normal subroutine.
This is slower than unprototyped subroutines, where the elements to be
compared are passed into the subroutine as the package global variables
<code>$a</code> and <code>$b</code> (see example below).</p>
<p style="padding-bottom: 10px;">If the subroutine is an XSUB, the elements to be compared are pushed on
to the stack, the way arguments are usually passed to XSUBs.  <code>$a</code> and
<code>$b</code> are not set.</p>
<p style="padding-bottom: 10px;">The values to be compared are always passed by reference and should not
be modified.</p>
<p style="padding-bottom: 10px;">You also cannot exit out of the sort block or subroutine using any of the
loop control operators described in <a href="psi_element://perlsyn">perlsyn</a> or with
<a href="psi_element://pod%3A%3Aperlfunc%2Fgoto+LABEL">C<goto></a>.</p>
<p style="padding-bottom: 10px;">When <a href="psi_element://locale" style="color:red">C<use locale></a> (but not <code>use locale ':not_characters'</code>)
is in effect, <code>sort LIST</code> sorts LIST according to the
current collation locale.  See <a href="psi_element://perllocale">perllocale</a>.</p>
<p style="padding-bottom: 10px;"><a href="psi_element://pod%3A%3Aperlfunc%2Fsort+SUBNAME+LIST">C<sort></a> returns aliases into the original list,
much as a for loop's index variable aliases the list elements.  That is,
modifying an element of a list returned by <a href="psi_element://pod%3A%3Aperlfunc%2Fsort+SUBNAME+LIST">C<sort></a>
(for example, in a <code>foreach</code>, <a href="psi_element://pod%3A%3Aperlfunc%2Fmap+BLOCK+LIST">C<map></a> or
<a href="psi_element://pod%3A%3Aperlfunc%2Fgrep+BLOCK+LIST">C<grep></a>)
actually modifies the element in the original list.  This is usually
something to be avoided when writing clear code.</p>
<p style="padding-bottom: 10px;">Historically Perl has varied in whether sorting is stable by default.
If stability matters, it can be controlled explicitly by using the
<a href="psi_element://sort" style="color:red">sort</a> pragma.</p>
<p style="padding-bottom: 10px;">Examples:</p>
<div style="padding-bottom: 10px;"><pre><code>    # sort lexically
    my @articles = sort @files;

    # same thing, but with explicit sort routine
    my @articles = sort {$a cmp $b} @files;

    # now case-insensitively
    my @articles = sort {fc($a) cmp fc($b)} @files;

    # same thing in reversed order
    my @articles = sort {$b cmp $a} @files;

    # sort numerically ascending
    my @articles = sort {$a &lt;=&gt; $b} @files;

    # sort numerically descending
    my @articles = sort {$b &lt;=&gt; $a} @files;

    # this sorts the %age hash by value instead of key
    # using an in-line function
    my @eldest = sort { $age{$b} &lt;=&gt; $age{$a} } keys %age;

    # sort using explicit subroutine name
    sub byage {
        $age{$a} &lt;=&gt; $age{$b};  # presuming numeric
    }
    my @sortedclass = sort byage @class;

    sub backwards { $b cmp $a }
    my @harry  = qw(dog cat x Cain Abel);
    my @george = qw(gone chased yz Punished Axed);
    print sort @harry;
        # prints AbelCaincatdogx
    print sort backwards @harry;
        # prints xdogcatCainAbel
    print sort @george, 'to', @harry;
        # prints AbelAxedCainPunishedcatchaseddoggonetoxyz

    # inefficiently sort by descending numeric compare using
    # the first integer after the first = sign, or the
    # whole record case-insensitively otherwise

    my @new = sort {
        ($b =~ /=(\d+)/)[0] &lt;=&gt; ($a =~ /=(\d+)/)[0]
                            ||
                    fc($a)  cmp  fc($b)
    } @old;

    # same thing, but much more efficiently;
    # we'll build auxiliary indices instead
    # for speed
    my (@nums, @caps);
    for (@old) {
        push @nums, ( /=(\d+)/ ? $1 : undef );
        push @caps, fc($_);
    }

    my @new = @old[ sort {
                           $nums[$b] &lt;=&gt; $nums[$a]
                                    ||
                           $caps[$a] cmp $caps[$b]
                         } 0..$#old
                  ];

    # same thing, but without any temps
    my @new = map { $_-&gt;[0] }
           sort { $b-&gt;[1] &lt;=&gt; $a-&gt;[1]
                           ||
                  $a-&gt;[2] cmp $b-&gt;[2]
           } map { [$_, /=(\d+)/, fc($_)] } @old;

    # using a prototype allows you to use any comparison subroutine
    # as a sort subroutine (including other package's subroutines)
    package Other;
    sub backwards ($$) { $_[1] cmp $_[0]; }  # $a and $b are
                                             # not set here
    package main;
    my @new = sort Other::backwards @old;

    # guarantee stability
    use sort 'stable';
    my @new = sort { substr($a, 3, 5) cmp substr($b, 3, 5) } @old;</code></pre></div>
<p style="padding-bottom: 10px;">Warning: syntactical care is required when sorting the list returned from
a function.  If you want to sort the list returned by the function call
<code>find_records(@key)</code>, you can use:</p>
<div style="padding-bottom: 10px;"><pre><code>    my @contact = sort { $a cmp $b } find_records @key;
    my @contact = sort +find_records(@key);
    my @contact = sort &amp;find_records(@key);
    my @contact = sort(find_records(@key));</code></pre></div>
<p style="padding-bottom: 10px;">If instead you want to sort the array <code>@key</code> with the comparison routine
<code>find_records()</code> then you can use:</p>
<div style="padding-bottom: 10px;"><pre><code>    my @contact = sort { find_records() } @key;
    my @contact = sort find_records(@key);
    my @contact = sort(find_records @key);
    my @contact = sort(find_records (@key));</code></pre></div>
<p style="padding-bottom: 10px;"><code>$a</code> and <code>$b</code> are set as package globals in the package the sort() is
called from.  That means <code>$main::a</code> and <code>$main::b</code> (or <code>$::a</code> and
<code>$::b</code>) in the <code>main</code> package, <code>$FooPack::a</code> and <code>$FooPack::b</code> in the
<code>FooPack</code> package, etc.  If the sort block is in scope of a <code>my</code> or
<code>state</code> declaration of <code>$a</code> and/or <code>$b</code>, you <i>must</i> spell out the full
name of the variables in the sort block :</p>
<div style="padding-bottom: 10px;"><pre><code>   package main;
   my $a = &quot;C&quot;; # DANGER, Will Robinson, DANGER !!!

   print sort { $a cmp $b }               qw(A C E G B D F H);
                                          # WRONG
   sub badlexi { $a cmp $b }
   print sort badlexi                     qw(A C E G B D F H);
                                          # WRONG
   # the above prints BACFEDGH or some other incorrect ordering

   print sort { $::a cmp $::b }           qw(A C E G B D F H);
                                          # OK
   print sort { our $a cmp our $b }       qw(A C E G B D F H);
                                          # also OK
   print sort { our ($a, $b); $a cmp $b } qw(A C E G B D F H);
                                          # also OK
   sub lexi { our $a cmp our $b }
   print sort lexi                        qw(A C E G B D F H);
                                          # also OK
   # the above print ABCDEFGH</code></pre></div>
<p style="padding-bottom: 10px;">With proper care you may mix package and my (or state) <code>$a</code> and/or <code>$b</code>:</p>
<div style="padding-bottom: 10px;"><pre><code>   my $a = {
      tiny   =&gt; -2,
      small  =&gt; -1,
      normal =&gt; 0,
      big    =&gt; 1,
      huge   =&gt; 2
   };

   say sort { $a-&gt;{our $a} &lt;=&gt; $a-&gt;{our $b} }
       qw{ huge normal tiny small big};

   # prints tinysmallnormalbighuge</code></pre></div>
<p style="padding-bottom: 10px;"><code>$a</code> and <code>$b</code> are implicitly local to the sort() execution and regain their
former values upon completing the sort.</p>
<p style="padding-bottom: 10px;">Sort subroutines written using <code>$a</code> and <code>$b</code> are bound to their calling
package. It is possible, but of limited interest, to define them in a
different package, since the subroutine must still refer to the calling
package's <code>$a</code> and <code>$b</code> :</p>
<div style="padding-bottom: 10px;"><pre><code>   package Foo;
   sub lexi { $Bar::a cmp $Bar::b }
   package Bar;
   ... sort Foo::lexi ...</code></pre></div>
<p style="padding-bottom: 10px;">Use the prototyped versions (see above) for a more generic alternative.</p>
<p style="padding-bottom: 10px;">The comparison function is required to behave.  If it returns
inconsistent results (sometimes saying <code>$x[1]</code> is less than <code>$x[2]</code> and
sometimes saying the opposite, for example) the results are not
well-defined.</p>
<p style="padding-bottom: 10px;">Because <code>&lt;=&gt;</code> returns <a href="psi_element://pod%3A%3Aperlfunc%2Fundef+EXPR">C<undef></a> when either operand
is <code>NaN</code> (not-a-number), be careful when sorting with a
comparison function like <code>$a &lt;=&gt; $b</code> any lists that might contain a
<code>NaN</code>.  The following example takes advantage that <code>NaN != NaN</code> to
eliminate any <code>NaN</code>s from the input list.</p>
<div style="padding-bottom: 10px;"><pre><code>    my @result = sort { $a &lt;=&gt; $b } grep { $_ == $_ } @input;</code></pre></div></dd></dl>
