<p><a href="psi_element://pod%3A%3Aperlfunc">pod::perlfunc</a>: <a href="psi_element://pod%3A%3Aperlfunc%2FDESCRIPTION">DESCRIPTION</a>: <a href="psi_element://pod%3A%3Aperlfunc%2FAlphabetical+Listing+of+Perl+Functions">Alphabetical Listing of Perl Functions</a></p><dl><dt style="padding-bottom:4px;font-weight:bold;">select FILEHANDLE
 </dt>
<dt style="padding-bottom:4px;font-weight:bold;">select</dt><dd style="padding-top:6px;">
<p style="padding-bottom: 10px;">Returns the currently selected filehandle.  If FILEHANDLE is supplied,
sets the new current default filehandle for output.  This has two
effects: first, a <a href="psi_element://pod%3A%3Aperlfunc%2Fwrite+FILEHANDLE">C<write></a> or a <a href="psi_element://pod%3A%3Aperlfunc%2Fprint+FILEHANDLE+LIST">C<print></a> without a filehandle
default to this FILEHANDLE.  Second, references to variables related to
output will refer to this output channel.</p>
<p style="padding-bottom: 10px;">For example, to set the top-of-form format for more than one
output channel, you might do the following:</p>
<div style="padding-bottom: 10px;"><pre><code>    select(REPORT1);
    $^ = 'report1_top';
    select(REPORT2);
    $^ = 'report2_top';</code></pre></div>
<p style="padding-bottom: 10px;">FILEHANDLE may be an expression whose value gives the name of the
actual filehandle.  Thus:</p>
<div style="padding-bottom: 10px;"><pre><code>    my $oldfh = select(STDERR); $| = 1; select($oldfh);</code></pre></div>
<p style="padding-bottom: 10px;">Some programmers may prefer to think of filehandles as objects with
methods, preferring to write the last example as:</p>
<div style="padding-bottom: 10px;"><pre><code>    STDERR-&gt;autoflush(1);</code></pre></div>
<p style="padding-bottom: 10px;">(Prior to Perl version 5.14, you have to <code>use IO::Handle;</code> explicitly
first.)</p>
<p style="padding-bottom: 10px;">Portability issues: <a href="psi_element://perlport%2Fselect">select in perlport</a>.</p></dd></dl>
