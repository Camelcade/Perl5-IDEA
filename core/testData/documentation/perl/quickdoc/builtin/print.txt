<p><a href="psi_element://pod%3A%3Aperlfunc">pod::perlfunc</a>: <a href="psi_element://pod%3A%3Aperlfunc%2FDESCRIPTION">DESCRIPTION</a>: <a href="psi_element://pod%3A%3Aperlfunc%2FAlphabetical+Listing+of+Perl+Functions">Alphabetical Listing of Perl Functions</a></p><dl><dt style="padding-bottom:4px;font-weight:bold;">print FILEHANDLE LIST</dt>
<dt style="padding-bottom:4px;font-weight:bold;">print FILEHANDLE</dt>
<dt style="padding-bottom:4px;font-weight:bold;">print LIST</dt>
<dt style="padding-bottom:4px;font-weight:bold;">print</dt><dd style="padding-top:6px;">
<p style="padding-bottom: 10px;">Prints a string or a list of strings.  Returns true if successful.
FILEHANDLE may be a scalar variable containing the name of or a reference
to the filehandle, thus introducing one level of indirection.  (NOTE: If
FILEHANDLE is a variable and the next token is a term, it may be
misinterpreted as an operator unless you interpose a <code>+</code> or put
parentheses around the arguments.)  If FILEHANDLE is omitted, prints to the
last selected (see <a href="psi_element://pod%3A%3Aperlfunc%2Fselect+FILEHANDLE">C<select></a>) output handle.  If
LIST is omitted, prints <a href="psi_element://perlvar%2F%24_">C<$_></a> to the currently selected
output handle.  To use FILEHANDLE alone to print the content of
<a href="psi_element://perlvar%2F%24_">C<$_></a> to it, you must use a bareword filehandle like
<code>FH</code>, not an indirect one like <code>$fh</code>.  To set the default output handle
to something other than STDOUT, use the select operation.</p>
<p style="padding-bottom: 10px;">The current value of <a href="psi_element://perlvar%2F%24%2C">C<$,></a> (if any) is printed between
each LIST item.  The current value of <a href="psi_element://perlvar%2F%24%5C">C<$\></a> (if any) is
printed after the entire LIST has been printed.  Because print takes a
LIST, anything in the LIST is evaluated in list context, including any
subroutines whose return lists you pass to
<a href="psi_element://pod%3A%3Aperlfunc%2Fprint+FILEHANDLE+LIST">C<print></a>.  Be careful not to follow the print
keyword with a left
parenthesis unless you want the corresponding right parenthesis to
terminate the arguments to the print; put parentheses around all arguments
(or interpose a <code>+</code>, but that doesn't look as good).</p>
<p style="padding-bottom: 10px;">If you're storing handles in an array or hash, or in general whenever
you're using any expression more complex than a bareword handle or a plain,
unsubscripted scalar variable to retrieve it, you will have to use a block
returning the filehandle value instead, in which case the LIST may not be
omitted:</p>
<div style="padding-bottom: 10px;"><pre><code>    print { $files[$i] } &quot;stuff\n&quot;;
    print { $OK ? STDOUT : STDERR } &quot;stuff\n&quot;;</code></pre></div>
<p style="padding-bottom: 10px;">Printing to a closed pipe or socket will generate a SIGPIPE signal.  See
<a href="psi_element://perlipc">perlipc</a> for more on signal handling.</p></dd></dl>
