<p><a href="psi_element://pod%3A%3Aperlfunc">pod::perlfunc</a>: <a href="psi_element://pod%3A%3Aperlfunc%2FDESCRIPTION">DESCRIPTION</a>: <a href="psi_element://pod%3A%3Aperlfunc%2FAlphabetical+Listing+of+Perl+Functions">Alphabetical Listing of Perl Functions</a></p><dl><dt style="padding-bottom:4px;font-weight:bold;">delete EXPR</dt><dd style="padding-top:6px;">
<p style="padding-bottom: 10px;">Given an expression that specifies an element or slice of a hash,
<a href="psi_element://pod%3A%3Aperlfunc%2Fdelete+EXPR">C<delete></a> deletes the specified elements from that hash
so that <a href="psi_element://pod%3A%3Aperlfunc%2Fexists+EXPR">C<exists></a> on that element no longer returns
true.  Setting a hash element to the undefined value does not remove its
key, but deleting it does; see <a href="psi_element://pod%3A%3Aperlfunc%2Fexists+EXPR">C<exists></a>.</p>
<p style="padding-bottom: 10px;">In list context, usually returns the value or values deleted, or the last such
element in scalar context.  The return list's length corresponds to that of
the argument list: deleting non-existent elements returns the undefined value
in their corresponding positions. When a
<a href="psi_element://perldata%2FKeyE%3Csol%3EValue+Hash+Slices" style="color:red">keyE<sol>value hash slice</a> is passed to
<code>delete</code>, the return value is a list of key/value pairs (two elements for each
item deleted from the hash).</p>
<p style="padding-bottom: 10px;"><a href="psi_element://pod%3A%3Aperlfunc%2Fdelete+EXPR">C<delete></a> may also be used on arrays and array slices,
but its behavior is less straightforward.  Although
<a href="psi_element://pod%3A%3Aperlfunc%2Fexists+EXPR">C<exists></a> will return false for deleted entries,
deleting array elements never changes indices of existing values; use
<a href="psi_element://pod%3A%3Aperlfunc%2Fshift+ARRAY">C<shift></a> or <a href="psi_element://pod%3A%3Aperlfunc%2Fsplice+ARRAY%2COFFSET%2CLENGTH%2CLIST">C<splice></a> for that.  However, if any deleted elements
fall at the end of an array, the array's size shrinks to the position of
the highest element that still tests true for <a href="psi_element://pod%3A%3Aperlfunc%2Fexists+EXPR">C<exists></a>,
or to 0 if none do.  In other words, an array won't have trailing
nonexistent elements after a delete.</p>
<p style="padding-bottom: 10px;"><B>WARNING:</B> Calling <a href="psi_element://pod%3A%3Aperlfunc%2Fdelete+EXPR">C<delete></a> on array values is
strongly discouraged.  The
notion of deleting or checking the existence of Perl array elements is not
conceptually coherent, and can lead to surprising behavior.</p>
<p style="padding-bottom: 10px;">Deleting from <a href="psi_element://perlvar%2F%25ENV">C<%ENV></a> modifies the environment.
Deleting from a hash tied to a DBM file deletes the entry from the DBM
file.  Deleting from a <a href="psi_element://pod%3A%3Aperlfunc%2Ftied+VARIABLE">C<tied></a> hash or array may not
necessarily return anything; it depends on the implementation of the
<a href="psi_element://pod%3A%3Aperlfunc%2Ftied+VARIABLE">C<tied></a> package's DELETE method, which may do whatever
it pleases.</p>
<p style="padding-bottom: 10px;">The <code>delete local EXPR</code> construct localizes the deletion to the current
block at run time.  Until the block exits, elements locally deleted
temporarily no longer exist.  See <a href="psi_element://perlsub%2FLocalized+deletion+of+elements+of+composite+types">Localized deletion of elements of composite types in perlsub</a>.</p>
<div style="padding-bottom: 10px;"><pre><code>    my %hash = (foo =&gt; 11, bar =&gt; 22, baz =&gt; 33);
    my $scalar = delete $hash{foo};         # $scalar is 11
    $scalar = delete @hash{qw(foo bar)}; # $scalar is 22
    my @array  = delete @hash{qw(foo baz)}; # @array  is (undef,33)</code></pre></div>
<p style="padding-bottom: 10px;">The following (inefficiently) deletes all the values of %HASH and @ARRAY:</p>
<div style="padding-bottom: 10px;"><pre><code>    foreach my $key (keys %HASH) {
        delete $HASH{$key};
    }

    foreach my $index (0 .. $#ARRAY) {
        delete $ARRAY[$index];
    }</code></pre></div>
<p style="padding-bottom: 10px;">And so do these:</p>
<div style="padding-bottom: 10px;"><pre><code>    delete @HASH{keys %HASH};

    delete @ARRAY[0 .. $#ARRAY];</code></pre></div>
<p style="padding-bottom: 10px;">But both are slower than assigning the empty list
or undefining %HASH or @ARRAY, which is the customary
way to empty out an aggregate:</p>
<div style="padding-bottom: 10px;"><pre><code>    %HASH = ();     # completely empty %HASH
    undef %HASH;    # forget %HASH ever existed

    @ARRAY = ();    # completely empty @ARRAY
    undef @ARRAY;   # forget @ARRAY ever existed</code></pre></div>
<p style="padding-bottom: 10px;">The EXPR can be arbitrarily complicated provided its
final operation is an element or slice of an aggregate:</p>
<div style="padding-bottom: 10px;"><pre><code>    delete $ref-&gt;[$x][$y]{$key};
    delete @{$ref-&gt;[$x][$y]}{$key1, $key2, @morekeys};

    delete $ref-&gt;[$x][$y][$index];
    delete @{$ref-&gt;[$x][$y]}[$index1, $index2, @moreindices];</code></pre></div></dd></dl>
