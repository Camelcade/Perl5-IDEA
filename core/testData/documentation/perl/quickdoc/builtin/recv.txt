<p><a href="psi_element://pod%3A%3Aperlfunc">pod::perlfunc</a>: <a href="psi_element://pod%3A%3Aperlfunc%2FDESCRIPTION">DESCRIPTION</a>: <a href="psi_element://pod%3A%3Aperlfunc%2FAlphabetical+Listing+of+Perl+Functions">Alphabetical Listing of Perl Functions</a></p><dl><dt style="padding-bottom:4px;font-weight:bold;">recv SOCKET,SCALAR,LENGTH,FLAGS</dt><dd style="padding-top:6px;">
<p style="padding-bottom: 10px;">Receives a message on a socket.  Attempts to receive LENGTH characters
of data into variable SCALAR from the specified SOCKET filehandle.
SCALAR will be grown or shrunk to the length actually read.  Takes the
same flags as the system call of the same name.  Returns the address
of the sender if SOCKET's protocol supports this; returns an empty
string otherwise.  If there's an error, returns the undefined value.
This call is actually implemented in terms of the <a href="psi_element://recvfrom%282%29" style="color:red">recvfrom(2)</a> system call.
See <a href="psi_element://perlipc%2FUDP%3A+Message+Passing">UDP: Message Passing in perlipc</a> for examples.</p>
<p style="padding-bottom: 10px;">Note the <i>characters</i>: depending on the status of the socket, either
(8-bit) bytes or characters are received.  By default all sockets
operate on bytes, but for example if the socket has been changed using
<a href="psi_element://pod%3A%3Aperlfunc%2Fbinmode+FILEHANDLE%2C+LAYER">C<binmode></a> to operate with the
<code>:encoding(utf8)</code> I/O layer (see the <a href="psi_element://open" style="color:red">open</a> pragma), the I/O will
operate on UTF8-encoded Unicode
characters, not bytes.  Similarly for the <code>:encoding</code> layer: in that
case pretty much any characters can be read.</p></dd></dl>
