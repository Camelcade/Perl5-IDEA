<p><a href="psi_element://pod%3A%3Aperlfunc">pod::perlfunc</a>: <a href="psi_element://pod%3A%3Aperlfunc%2FDESCRIPTION">DESCRIPTION</a>: <a href="psi_element://pod%3A%3Aperlfunc%2FAlphabetical+Listing+of+Perl+Functions">Alphabetical Listing of Perl Functions</a></p><dl><dt style="padding-bottom:4px;font-weight:bold;">fork
  </dt><dd style="padding-top:6px;">
<p style="padding-bottom: 10px;">Does a <a href="psi_element://fork%282%29" style="color:red">fork(2)</a> system call to create a new process running the
same program at the same point.  It returns the child pid to the
parent process, <code>0</code> to the child process, or <a href="psi_element://pod%3A%3Aperlfunc%2Fundef+EXPR">C<undef></a> if
the fork is
unsuccessful.  File descriptors (and sometimes locks on those descriptors)
are shared, while everything else is copied.  On most systems supporting
<a href="psi_element://fork%282%29" style="color:red">fork(2)</a>, great care has gone into making it extremely efficient (for
example, using copy-on-write technology on data pages), making it the
dominant paradigm for multitasking over the last few decades.</p>
<p style="padding-bottom: 10px;">Perl attempts to flush all files opened for output before forking the
child process, but this may not be supported on some platforms (see
<a href="psi_element://perlport">perlport</a>).  To be safe, you may need to set
<a href="psi_element://perlvar%2F%24E%3Cverbar%3E" style="color:red">C<$E<verbar>></a> (<code>$AUTOFLUSH</code> in <a href="psi_element://English" style="color:red">English</a>) or
call the <code>autoflush</code> method of <a href="psi_element://IO%3A%3AHandle%2FMETHODS" style="color:red">C<IO::Handle></a> on
any open handles to avoid duplicate output.</p>
<p style="padding-bottom: 10px;">If you <a href="psi_element://pod%3A%3Aperlfunc%2Ffork">C<fork></a> without ever waiting on your children, you will
accumulate zombies.  On some systems, you can avoid this by setting
<a href="psi_element://perlvar%2F%25SIG">C<$SIG{CHLD}></a> to <code>&quot;IGNORE&quot;</code>.  See also <a href="psi_element://perlipc">perlipc</a> for
more examples of forking and reaping moribund children.</p>
<p style="padding-bottom: 10px;">Note that if your forked child inherits system file descriptors like
STDIN and STDOUT that are actually connected by a pipe or socket, even
if you exit, then the remote server (such as, say, a CGI script or a
backgrounded job launched from a remote shell) won't think you're done.
You should reopen those to <i>/dev/null</i> if it's any issue.</p>
<p style="padding-bottom: 10px;">On some platforms such as Windows, where the <a href="psi_element://fork%282%29" style="color:red">fork(2)</a> system call is
not available, Perl can be built to emulate <a href="psi_element://pod%3A%3Aperlfunc%2Ffork">C<fork></a> in the Perl
interpreter.  The emulation is designed, at the level of the Perl
program, to be as compatible as possible with the &quot;Unix&quot; <a href="psi_element://fork%282%29" style="color:red">fork(2)</a>.
However it has limitations that have to be considered in code intended
to be portable.  See <a href="psi_element://perlfork">perlfork</a> for more details.</p>
<p style="padding-bottom: 10px;">Portability issues: <a href="psi_element://perlport%2Ffork">fork in perlport</a>.</p></dd></dl>
