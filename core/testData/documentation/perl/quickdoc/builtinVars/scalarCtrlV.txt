<p><a href="psi_element://pod%3A%3Aperlvar">pod::perlvar</a>: <a href="psi_element://pod%3A%3Aperlvar%2FSPECIAL+VARIABLES">SPECIAL VARIABLES</a>: <a href="psi_element://pod%3A%3Aperlvar%2FGeneral+Variables">General Variables</a></p><dl><dt style="padding-bottom:4px;font-weight:bold;">$PERL_VERSION</dt>
<dt style="padding-bottom:4px;font-weight:bold;">$^V
 </dt><dd style="padding-top:6px;"><p style="padding-bottom: 10px;">The revision, version, and subversion of the Perl interpreter,
represented as a <a href="psi_element://version" style="color:red">version</a> object.</p>
<p style="padding-bottom: 10px;">This variable first appeared in perl v5.6.0; earlier versions of perl
will see an undefined value.  Before perl v5.10.0 <code>$^V</code> was represented
as a v-string rather than a <a href="psi_element://version" style="color:red">version</a> object.</p>
<p style="padding-bottom: 10px;"><code>$^V</code> can be used to determine whether the Perl interpreter executing
a script is in the right range of versions.  For example:</p>
<div style="padding-bottom: 10px;"><pre><code>    warn &quot;Hashes not randomized!\n&quot; if !$^V or $^V lt v5.8.1</code></pre></div>
<p style="padding-bottom: 10px;">While version objects overload stringification, to portably convert
<code>$^V</code> into its string representation, use <code>sprintf()</code>'s <code>&quot;%vd&quot;</code>
conversion, which works for both v-strings or version objects:</p>
<div style="padding-bottom: 10px;"><pre><code>    printf &quot;version is v%vd\n&quot;, $^V;  # Perl's version</code></pre></div>
<p style="padding-bottom: 10px;">See the documentation of <code>use VERSION</code> and <code>require VERSION</code>
for a convenient way to fail if the running Perl interpreter is too old.</p>
<p style="padding-bottom: 10px;">See also <code><a href="psi_element://pod%3A%3Aperlvar%2F%24%5D">$]</a></code> for a decimal representation of the Perl version.</p>
<p style="padding-bottom: 10px;">The main advantage of <code>$^V</code> over <code>$]</code> is that, for Perl v5.10.0 or
later, it overloads operators, allowing easy comparison against other
version representations (e.g. decimal, literal v-string, &quot;v1.2.3&quot;, or
objects).  The disadvantage is that prior to v5.10.0, it was only a
literal v-string, which can't be easily printed or compared, whereas
the behavior of <code>$]</code> is unchanged on all versions of Perl.</p>
<p style="padding-bottom: 10px;">Mnemonic: use ^V for a version object.</p></dd></dl>
