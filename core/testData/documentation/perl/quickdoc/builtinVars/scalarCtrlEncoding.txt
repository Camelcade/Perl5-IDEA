<p><a href="psi_element://perlvar">perlvar</a>: <a href="psi_element://perlvar%2FSPECIAL+VARIABLES">SPECIAL VARIABLES</a>: <a href="psi_element://perlvar%2FVariables+related+to+the+interpreter+state">Variables related to the interpreter state</a></p><dl><dt style="padding-bottom:4px;font-weight:bold;">${^ENCODING}</dt><dd style="padding-top:6px;"><p style="padding-bottom: 10px;">This variable is no longer supported.</p>
<p style="padding-bottom: 10px;">It used to hold the <i>object reference</i> to the <code>Encode</code> object that was
used to convert the source code to Unicode.</p>
<p style="padding-bottom: 10px;">Its purpose was to allow your non-ASCII Perl
scripts not to have to be written in UTF-8; this was
useful before editors that worked on UTF-8 encoded text were common, but
that was long ago.  It caused problems, such as affecting the operation
of other modules that weren't expecting it, causing general mayhem.</p>
<p style="padding-bottom: 10px;">If you need something like this functionality, it is recommended that use
you a simple source filter, such as <a href="psi_element://Filter%3A%3AEncoding" style="color:red">Filter::Encoding</a>.</p>
<p style="padding-bottom: 10px;">If you are coming here because code of yours is being adversely affected
by someone's use of this variable, you can usually work around it by
doing this:</p>
<div style="padding-bottom: 10px;"><pre><code> local ${^ENCODING};</code></pre></div>
<p style="padding-bottom: 10px;">near the beginning of the functions that are getting broken.  This
undefines the variable during the scope of execution of the including
function.</p>
<p style="padding-bottom: 10px;">This variable was added in Perl 5.8.2 and removed in 5.26.0.
Setting it to anything other than <code>undef</code> was made fatal in Perl 5.28.0.</p></dd></dl>
