<p><a href="psi_element://pod%3A%3Aperlvar">pod::perlvar</a>: <a href="psi_element://pod%3A%3Aperlvar%2FSPECIAL+VARIABLES">SPECIAL VARIABLES</a>: <a href="psi_element://pod%3A%3Aperlvar%2FVariables+related+to+the+interpreter+state">Variables related to the interpreter state</a></p><dl><dt style="padding-bottom:4px;font-weight:bold;">%^H</dt><dd style="padding-top:6px;"><p style="padding-bottom: 10px;">The <code>%^H</code> hash provides the same scoping semantic as <code>$^H</code>.  This makes
it useful for implementation of lexically scoped pragmas.  See
<a href="psi_element://perlpragma">perlpragma</a>.   All the entries are stringified when accessed at
runtime, so only simple values can be accommodated.  This means no
pointers to objects, for example.</p>
<p style="padding-bottom: 10px;">When putting items into <code>%^H</code>, in order to avoid conflicting with other
users of the hash there is a convention regarding which keys to use.
A module should use only keys that begin with the module's name (the
name of its main package) and a &quot;/&quot; character.  For example, a module
<code>Foo::Bar</code> should use keys such as <code>Foo::Bar/baz</code>.</p>
<p style="padding-bottom: 10px;">This variable was added in Perl v5.6.0.</p></dd></dl>
