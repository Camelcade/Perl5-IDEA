<p><a href="psi_element://pod%3A%3Aperlvar">pod::perlvar</a>: <a href="psi_element://pod%3A%3Aperlvar%2FSPECIAL+VARIABLES">SPECIAL VARIABLES</a>: <a href="psi_element://pod%3A%3Aperlvar%2FGeneral+Variables">General Variables</a></p><dl><dt style="padding-bottom:4px;font-weight:bold;">$ARG</dt>
<dt style="padding-bottom:4px;font-weight:bold;">$_
 </dt><dd style="padding-top:6px;"><p style="padding-bottom: 10px;">The default input and pattern-searching space.  The following pairs are
equivalent:</p>
<div style="padding-bottom: 10px;"><pre><code>    while (&lt;&gt;) {...}    # equivalent only in while!
    while (defined($_ = &lt;&gt;)) {...}

    /^Subject:/
    $_ =~ /^Subject:/

    tr/a-z/A-Z/
    $_ =~ tr/a-z/A-Z/

    chomp
    chomp($_)</code></pre></div>
<p style="padding-bottom: 10px;">Here are the places where Perl will assume <code>$_</code> even if you don't use it:</p>
<ul><li>

<p style="padding-bottom: 10px;">The following functions use <code>$_</code> as a default argument:</p>
<p style="padding-bottom: 10px;">abs, alarm, chomp, chop, chr, chroot,
cos, defined, eval, evalbytes, exp, fc, glob, hex, int, lc,
lcfirst, length, log, lstat, mkdir, oct, ord, pos, print, printf,
quotemeta, readlink, readpipe, ref, require, reverse (in scalar context only),
rmdir, say, sin, split (for its second
argument), sqrt, stat, study, uc, ucfirst,
unlink, unpack.</p></li>
<li>

<p style="padding-bottom: 10px;">All file tests (<code>-f</code>, <code>-d</code>) except for <code>-t</code>, which defaults to STDIN.
See <a href="psi_element://perlfunc%2F-X">-X in perlfunc</a></p></li>
<li>

<p style="padding-bottom: 10px;">The pattern matching operations <code>m//</code>, <code>s///</code> and <code>tr///</code> (aka <code>y///</code>)
when used without an <code>=~</code> operator.</p></li>
<li>

<p style="padding-bottom: 10px;">The default iterator variable in a <code>foreach</code> loop if no other
variable is supplied.</p></li>
<li>

<p style="padding-bottom: 10px;">The implicit iterator variable in the <code>grep()</code> and <code>map()</code> functions.</p></li>
<li>

<p style="padding-bottom: 10px;">The implicit variable of <code>given()</code>.</p></li>
<li>

<p style="padding-bottom: 10px;">The default place to put the next value or input record
when a <code>&lt;FH&gt;</code>, <code>readline</code>, <code>readdir</code> or <code>each</code>
operation's result is tested by itself as the sole criterion of a <code>while</code>
test.  Outside a <code>while</code> test, this will not happen.</p></li></ul>
<p style="padding-bottom: 10px;"><code>$_</code> is a global variable.</p>
<p style="padding-bottom: 10px;">However, between perl v5.10.0 and v5.24.0, it could be used lexically by
writing <code>my $_</code>.  Making <code>$_</code> refer to the global <code>$_</code> in the same scope
was then possible with <code>our $_</code>.  This experimental feature was removed and is
now a fatal error, but you may encounter it in older code.</p>
<p style="padding-bottom: 10px;">Mnemonic: underline is understood in certain operations.</p></dd></dl>
