<p><a href="psi_element://pod%3A%3Aperlvar">pod::perlvar</a>: <a href="psi_element://pod%3A%3Aperlvar%2FSPECIAL+VARIABLES">SPECIAL VARIABLES</a>: <a href="psi_element://pod%3A%3Aperlvar%2FGeneral+Variables">General Variables</a></p><dl><dt style="padding-bottom:4px;font-weight:bold;">$PROCESS_ID</dt>
<dt style="padding-bottom:4px;font-weight:bold;">$PID</dt>
<dt style="padding-bottom:4px;font-weight:bold;">$$
  </dt><dd style="padding-top:6px;"><p style="padding-bottom: 10px;">The process number of the Perl running this script.  Though you <i>can</i> set
this variable, doing so is generally discouraged, although it can be
invaluable for some testing purposes.  It will be reset automatically
across <code>fork()</code> calls.</p>
<p style="padding-bottom: 10px;">Note for Linux and Debian GNU/kFreeBSD users: Before Perl v5.16.0 perl
would emulate POSIX semantics on Linux systems using LinuxThreads, a
partial implementation of POSIX Threads that has since been superseded
by the Native POSIX Thread Library (NPTL).</p>
<p style="padding-bottom: 10px;">LinuxThreads is now obsolete on Linux, and caching <code>getpid()</code>
like this made embedding perl unnecessarily complex (since you'd have
to manually update the value of $$), so now <code>$$</code> and <code>getppid()</code>
will always return the same values as the underlying C library.</p>
<p style="padding-bottom: 10px;">Debian GNU/kFreeBSD systems also used LinuxThreads up until and
including the 6.0 release, but after that moved to FreeBSD thread
semantics, which are POSIX-like.</p>
<p style="padding-bottom: 10px;">To see if your system is affected by this discrepancy check if
<code>getconf GNU_LIBPTHREAD_VERSION | grep -q NPTL</code> returns a false
value.  NTPL threads preserve the POSIX semantics.</p>
<p style="padding-bottom: 10px;">Mnemonic: same as shells.</p></dd></dl>
