<p><a href="psi_element://perlvar">perlvar</a>: <a href="psi_element://perlvar%2FSPECIAL+VARIABLES">SPECIAL VARIABLES</a>: <a href="psi_element://perlvar%2FVariables+related+to+filehandles">Variables related to filehandles</a></p><dl><dt style="padding-bottom:4px;font-weight:bold;">IO::Handle-&gt;input_record_separator( EXPR )</dt>
<dt style="padding-bottom:4px;font-weight:bold;">$INPUT_RECORD_SEPARATOR</dt>
<dt style="padding-bottom:4px;font-weight:bold;">$RS</dt>
<dt style="padding-bottom:4px;font-weight:bold;">$/
  </dt><dd style="padding-top:6px;"><p style="padding-bottom: 10px;">The input record separator, newline by default.  This influences Perl's
idea of what a &quot;line&quot; is.  Works like <B>awk</B>'s RS variable, including
treating empty lines as a terminator if set to the null string (an
empty line cannot contain any spaces or tabs).  You may set it to a
multi-character string to match a multi-character terminator, or to
<code>undef</code> to read through the end of file.  Setting it to <code>&quot;\n\n&quot;</code>
means something slightly different than setting to <code>&quot;&quot;</code>, if the file
contains consecutive empty lines.  Setting to <code>&quot;&quot;</code> will treat two or
more consecutive empty lines as a single empty line.  Setting to
<code>&quot;\n\n&quot;</code> will blindly assume that the next input character belongs to
the next paragraph, even if it's a newline.</p>
<div style="padding-bottom: 10px;"><pre><code>    local $/;           # enable &quot;slurp&quot; mode
    local $_ = &lt;FH&gt;;    # whole file now here
    s/\n[ \t]+/ /g;</code></pre></div>
<p style="padding-bottom: 10px;">Remember: the value of <code>$/</code> is a string, not a regex.  <B>awk</B> has to
be better for something. :-)</p>
<p style="padding-bottom: 10px;">Setting <code>$/</code> to a reference to an integer, scalar containing an
integer, or scalar that's convertible to an integer will attempt to
read records instead of lines, with the maximum record size being the
referenced integer number of characters.  So this:</p>
<div style="padding-bottom: 10px;"><pre><code>    local $/ = \32768; # or \&quot;32768&quot;, or \$var_containing_32768
    open my $fh, &quot;&lt;&quot;, $myfile or die $!;
    local $_ = &lt;$fh&gt;;</code></pre></div>
<p style="padding-bottom: 10px;">will read a record of no more than 32768 characters from $fh.  If you're
not reading from a record-oriented file (or your OS doesn't have
record-oriented files), then you'll likely get a full chunk of data
with every read.  If a record is larger than the record size you've
set, you'll get the record back in pieces.  Trying to set the record
size to zero or less is deprecated and will cause $/ to have the value
of &quot;undef&quot;, which will cause reading in the (rest of the) whole file.</p>
<p style="padding-bottom: 10px;">As of 5.19.9 setting <code>$/</code> to any other form of reference will throw a
fatal exception. This is in preparation for supporting new ways to set
<code>$/</code> in the future.</p>
<p style="padding-bottom: 10px;">On VMS only, record reads bypass PerlIO layers and any associated
buffering, so you must not mix record and non-record reads on the
same filehandle.  Record mode mixes with line mode only when the
same buffering layer is in use for both modes.</p>
<p style="padding-bottom: 10px;">You cannot call <code>input_record_separator()</code> on a handle, only as a
static method.  See <a href="psi_element://IO%3A%3AHandle" style="color:red">IO::Handle</a>.</p>
<p style="padding-bottom: 10px;">See also <a href="psi_element://perlport%2FNewlines">Newlines in perlport</a>.  Also see <a href="psi_element://perlvar%2F%24.">$.</a>.</p>
<p style="padding-bottom: 10px;">Mnemonic: / delimits line boundaries when quoting poetry.</p></dd></dl>
