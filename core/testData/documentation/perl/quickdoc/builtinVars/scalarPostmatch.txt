<p><a href="psi_element://pod%3A%3Aperlvar">pod::perlvar</a>: <a href="psi_element://pod%3A%3Aperlvar%2FSPECIAL+VARIABLES">SPECIAL VARIABLES</a>: <a href="psi_element://pod%3A%3Aperlvar%2FVariables+related+to+regular+expressions">Variables related to regular expressions</a>: <a href="psi_element://pod%3A%3Aperlvar%2FPerformance+issues">Performance issues</a></p><dl><dt style="padding-bottom:4px;font-weight:bold;">$POSTMATCH</dt>
<dt style="padding-bottom:4px;font-weight:bold;">$'
   </dt><dd style="padding-top:6px;"><p style="padding-bottom: 10px;">The string following whatever was matched by the last successful
pattern match (not counting any matches hidden within a BLOCK or <code>eval()</code>
enclosed by the current BLOCK).  Example:</p>
<div style="padding-bottom: 10px;"><pre><code>    local $_ = 'abcdefghi';
    /def/;
    print &quot;$`:$&amp;:$'\n&quot;;  	# prints abc:def:ghi</code></pre></div>
<p style="padding-bottom: 10px;">See <a href="psi_element://pod%3A%3Aperlvar%2FPerformance+issues">Performance issues</a> above for the serious performance implications
of using this variable (even once) in your code.</p>
<p style="padding-bottom: 10px;">This variable is read-only and dynamically-scoped.</p>
<p style="padding-bottom: 10px;">Mnemonic: <code>'</code> often follows a quoted string.</p></dd></dl>
