<p><a href="psi_element://pod%3A%3Aperlfunc">pod::perlfunc</a>: <a href="psi_element://pod%3A%3Aperlfunc%2FDESCRIPTION">DESCRIPTION</a>: <a href="psi_element://pod%3A%3Aperlfunc%2FAlphabetical+Listing+of+Perl+Functions">Alphabetical Listing of Perl Functions</a></p><dl><dt style="padding-bottom:4px;font-weight:bold;">each HASH
 </dt>
<dt style="padding-bottom:4px;font-weight:bold;">each ARRAY</dt><dd style="padding-top:6px;">
<p style="padding-bottom: 10px;">When called on a hash in list context, returns a 2-element list
consisting of the key and value for the next element of a hash.  In Perl
5.12 and later only, it will also return the index and value for the next
element of an array so that you can iterate over it; older Perls consider
this a syntax error.  When called in scalar context, returns only the key
(not the value) in a hash, or the index in an array.</p>
<p style="padding-bottom: 10px;">Hash entries are returned in an apparently random order.  The actual random
order is specific to a given hash; the exact same series of operations
on two hashes may result in a different order for each hash.  Any insertion
into the hash may change the order, as will any deletion, with the exception
that the most recent key returned by <a href="psi_element://pod%3A%3Aperlfunc%2Feach+HASH">C<each></a> or
<a href="psi_element://pod%3A%3Aperlfunc%2Fkeys+HASH">C<keys></a> may be deleted without changing the order.  So
long as a given hash is unmodified you may rely on
<a href="psi_element://pod%3A%3Aperlfunc%2Fkeys+HASH">C<keys></a>, <a href="psi_element://pod%3A%3Aperlfunc%2Fvalues+HASH">C<values></a> and
<a href="psi_element://pod%3A%3Aperlfunc%2Feach+HASH">C<each></a> to repeatedly return the same order
as each other.  See <a href="psi_element://perlsec%2FAlgorithmic+Complexity+Attacks">Algorithmic Complexity Attacks in perlsec</a> for
details on why hash order is randomized.  Aside from the guarantees
provided here the exact details of Perl's hash algorithm and the hash
traversal order are subject to change in any release of Perl.</p>
<p style="padding-bottom: 10px;">After <a href="psi_element://pod%3A%3Aperlfunc%2Feach+HASH">C<each></a> has returned all entries from the hash or
array, the next call to <a href="psi_element://pod%3A%3Aperlfunc%2Feach+HASH">C<each></a> returns the empty list in
list context and <a href="psi_element://pod%3A%3Aperlfunc%2Fundef+EXPR">C<undef></a> in scalar context; the next
call following <i>that</i> one restarts iteration.  Each hash or array has
its own internal iterator, accessed by <a href="psi_element://pod%3A%3Aperlfunc%2Feach+HASH">C<each></a>,
<a href="psi_element://pod%3A%3Aperlfunc%2Fkeys+HASH">C<keys></a>, and <a href="psi_element://pod%3A%3Aperlfunc%2Fvalues+HASH">C<values></a>.  The iterator is
implicitly reset when <a href="psi_element://pod%3A%3Aperlfunc%2Feach+HASH">C<each></a> has reached the end as just
described; it can be explicitly reset by calling <a href="psi_element://pod%3A%3Aperlfunc%2Fkeys+HASH">C<keys></a>
or <a href="psi_element://pod%3A%3Aperlfunc%2Fvalues+HASH">C<values></a> on the hash or array.  If you add or delete
a hash's elements while iterating over it, the effect on the iterator is
unspecified; for example, entries may be skipped or duplicated--so don't
do that.  Exception: It is always safe to delete the item most recently
returned by <a href="psi_element://pod%3A%3Aperlfunc%2Feach+HASH">C<each></a>, so the following code works properly:</p>
<div style="padding-bottom: 10px;"><pre><code>    while (my ($key, $value) = each %hash) {
        print $key, &quot;\n&quot;;
        delete $hash{$key};   # This is safe
    }</code></pre></div>
<p style="padding-bottom: 10px;">Tied hashes may have a different ordering behaviour to perl's hash
implementation.</p>
<p style="padding-bottom: 10px;">This prints out your environment like the <a href="psi_element://printenv%281%29" style="color:red">printenv(1)</a> program,
but in a different order:</p>
<div style="padding-bottom: 10px;"><pre><code>    while (my ($key,$value) = each %ENV) {
        print &quot;$key=$value\n&quot;;
    }</code></pre></div>
<p style="padding-bottom: 10px;">Starting with Perl 5.14, an experimental feature allowed
<a href="psi_element://pod%3A%3Aperlfunc%2Feach+HASH">C<each></a> to take a scalar expression. This experiment has
been deemed unsuccessful, and was removed as of Perl 5.24.</p>
<p style="padding-bottom: 10px;">As of Perl 5.18 you can use a bare <a href="psi_element://pod%3A%3Aperlfunc%2Feach+HASH">C<each></a> in a <code>while</code>
loop, which will set <a href="psi_element://perlvar%2F%24_">C<$_></a> on every iteration.</p>
<div style="padding-bottom: 10px;"><pre><code>    while (each %ENV) {
	print &quot;$_=$ENV{$_}\n&quot;;
    }</code></pre></div>
<p style="padding-bottom: 10px;">To avoid confusing would-be users of your code who are running earlier
versions of Perl with mysterious syntax errors, put this sort of thing at
the top of your file to signal that your code will work <i>only</i> on Perls of
a recent vintage:</p>
<div style="padding-bottom: 10px;"><pre><code>    use 5.012;	# so keys/values/each work on arrays
    use 5.018;	# so each assigns to $_ in a lone while test</code></pre></div>
<p style="padding-bottom: 10px;">See also <a href="psi_element://pod%3A%3Aperlfunc%2Fkeys+HASH">C<keys></a>, <a href="psi_element://pod%3A%3Aperlfunc%2Fvalues+HASH">C<values></a>, and
<a href="psi_element://pod%3A%3Aperlfunc%2Fsort+SUBNAME+LIST">C<sort></a>.</p></dd></dl>
