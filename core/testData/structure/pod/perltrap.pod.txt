Documentation in null; /perl5language.png -> POD file at 0 in perltrap.pod

  NAME in null; /perl5language.png, null] -> PsiHead1SectionImpl(Perl5 POD: HEAD_1_SECTION) at 0 in perltrap.pod

  DESCRIPTION in null; /perl5language.png, null] -> PsiHead1SectionImpl(Perl5 POD: HEAD_1_SECTION) at 51 in perltrap.pod

    Awk Traps in null; /perl5language.png, null] -> PsiHead2SectionImpl(Perl5 POD: HEAD_2_SECTION) at 376 in perltrap.pod

      A Perl program executes only once, not once for each input line.  You can do an ... in null; /perl5language.png, null] -> PsiItemSectionImpl(Perl5 POD: ITEM_SECTION) at 471 in perltrap.pod

      The English module, loaded via      use English;
 allows you to refer to special... in null; /perl5language.png, null] -> PsiItemSectionImpl(Perl5 POD: ITEM_SECTION) at 596 in perltrap.pod

      Semicolons are required after all simple statements in Perl (except at the end o... in null; /perl5language.png, null] -> PsiItemSectionImpl(Perl5 POD: ITEM_SECTION) at 792 in perltrap.pod

      Curly brackets are required on ifs and whiles. in null; /perl5language.png, null] -> PsiItemSectionImpl(Perl5 POD: ITEM_SECTION) at 933 in perltrap.pod

      Variables begin with "$", "@" or "%" in Perl. in null; /perl5language.png, null] -> PsiItemSectionImpl(Perl5 POD: ITEM_SECTION) at 996 in perltrap.pod

      Arrays index from 0.  Likewise string positions in substr() and index(). in null; /perl5language.png, null] -> PsiItemSectionImpl(Perl5 POD: ITEM_SECTION) at 1052 in perltrap.pod

      You have to decide whether your array has numeric or string indices. in null; /perl5language.png, null] -> PsiItemSectionImpl(Perl5 POD: ITEM_SECTION) at 1135 in perltrap.pod

      Hash values do not spring into existence upon mere reference. in null; /perl5language.png, null] -> PsiItemSectionImpl(Perl5 POD: ITEM_SECTION) at 1214 in perltrap.pod

      You have to decide whether you want to use string or numeric comparisons. in null; /perl5language.png, null] -> PsiItemSectionImpl(Perl5 POD: ITEM_SECTION) at 1286 in perltrap.pod

      Reading an input line does not split it for you.  You get to split it to an arra... in null; /perl5language.png, null] -> PsiItemSectionImpl(Perl5 POD: ITEM_SECTION) at 1370 in perltrap.pod

      The current input line is normally in $_, not $0.  It generally does not have th... in null; /perl5language.png, null] -> PsiItemSectionImpl(Perl5 POD: ITEM_SECTION) at 1537 in perltrap.pod

      $<digit> does not refer to fields--it refers to substrings matched by the last m... in null; /perl5language.png, null] -> PsiItemSectionImpl(Perl5 POD: ITEM_SECTION) at 1707 in perltrap.pod

      The print() statement does not add field and record separators unless you set $,... in null; /perl5language.png, null] -> PsiItemSectionImpl(Perl5 POD: ITEM_SECTION) at 1814 in perltrap.pod

      You must open your files before you print to them. in null; /perl5language.png, null] -> PsiItemSectionImpl(Perl5 POD: ITEM_SECTION) at 1982 in perltrap.pod

      The range operator is "..", not comma.  The comma operator works as in C. in null; /perl5language.png, null] -> PsiItemSectionImpl(Perl5 POD: ITEM_SECTION) at 2043 in perltrap.pod

      The match operator is "=~", not "~".  ("~" is the one's complement operator, as ... in null; /perl5language.png, null] -> PsiItemSectionImpl(Perl5 POD: ITEM_SECTION) at 2127 in perltrap.pod

      The exponentiation operator is "**", not "^".  "^" is the XOR operator, as in C.... in null; /perl5language.png, null] -> PsiItemSectionImpl(Perl5 POD: ITEM_SECTION) at 2224 in perltrap.pod

      The concatenation operator is ".", not the null string.  (Using the null string ... in null; /perl5language.png, null] -> PsiItemSectionImpl(Perl5 POD: ITEM_SECTION) at 2400 in perltrap.pod

      The next, exit, and continue keywords work differently. in null; /perl5language.png, null] -> PsiItemSectionImpl(Perl5 POD: ITEM_SECTION) at 2748 in perltrap.pod

      The following variables work differently:        Awk	Perl
      ARGC	scalar @ARG... in null; /perl5language.png, null] -> PsiItemSectionImpl(Perl5 POD: ITEM_SECTION) at 2823 in perltrap.pod

      You cannot set $RS to a pattern, only a string. in null; /perl5language.png, null] -> PsiItemSectionImpl(Perl5 POD: ITEM_SECTION) at 3188 in perltrap.pod

      When in doubt, run the awk construct through a2p and see what it gives you. in null; /perl5language.png, null] -> PsiItemSectionImpl(Perl5 POD: ITEM_SECTION) at 3246 in perltrap.pod

    C/C++ Traps in null; /perl5language.png, null] -> PsiHead2SectionImpl(Perl5 POD: HEAD_2_SECTION) at 3345 in perltrap.pod

      Curly brackets are required on if's and while's. in null; /perl5language.png, null] -> PsiItemSectionImpl(Perl5 POD: ITEM_SECTION) at 3441 in perltrap.pod

      You must use elsif rather than else if. in null; /perl5language.png, null] -> PsiItemSectionImpl(Perl5 POD: ITEM_SECTION) at 3506 in perltrap.pod

      The break and continue keywords from C become in Perl last and next, respectivel... in null; /perl5language.png, null] -> PsiItemSectionImpl(Perl5 POD: ITEM_SECTION) at 3562 in perltrap.pod

      The switch statement is called given/when and only available in perl 5.10 or new... in null; /perl5language.png, null] -> PsiItemSectionImpl(Perl5 POD: ITEM_SECTION) at 3770 in perltrap.pod

      Variables begin with "$", "@" or "%" in Perl. in null; /perl5language.png, null] -> PsiItemSectionImpl(Perl5 POD: ITEM_SECTION) at 3907 in perltrap.pod

      Comments begin with "#", not "/*" or "//".  Perl may interpret C/C++ comments as... in null; /perl5language.png, null] -> PsiItemSectionImpl(Perl5 POD: ITEM_SECTION) at 3963 in perltrap.pod

      You can't take the address of anything, although a similar operator in Perl is t... in null; /perl5language.png, null] -> PsiItemSectionImpl(Perl5 POD: ITEM_SECTION) at 4135 in perltrap.pod

      ARGV must be capitalized.  $ARGV[0] is C's argv[1], and argv[0] ends up in $0. in null; /perl5language.png, null] -> PsiItemSectionImpl(Perl5 POD: ITEM_SECTION) at 4266 in perltrap.pod

      System calls such as link(), unlink(), rename(), etc. return nonzero for success... in null; /perl5language.png, null] -> PsiItemSectionImpl(Perl5 POD: ITEM_SECTION) at 4370 in perltrap.pod

      Signal handlers deal with signal names, not numbers.  Use kill -l to find their ... in null; /perl5language.png, null] -> PsiItemSectionImpl(Perl5 POD: ITEM_SECTION) at 4516 in perltrap.pod

    JavaScript Traps in null; /perl5language.png, null] -> PsiHead2SectionImpl(Perl5 POD: HEAD_2_SECTION) at 4638 in perltrap.pod

      In Perl, binary + is always addition.  $string1 + $string2 converts both strings... in null; /perl5language.png, null] -> PsiItemSectionImpl(Perl5 POD: ITEM_SECTION) at 4741 in perltrap.pod

      The + unary operator doesn't do anything in Perl.  It exists to avoid syntactic ... in null; /perl5language.png, null] -> PsiItemSectionImpl(Perl5 POD: ITEM_SECTION) at 4921 in perltrap.pod

      Unlike for...in, Perl's for (also spelled foreach) does not allow the left-hand ... in null; /perl5language.png, null] -> PsiItemSectionImpl(Perl5 POD: ITEM_SECTION) at 5027 in perltrap.pod

      To iterate over the indices of an array, use foreach my $i (0 .. $#array) {}.  f... in null; /perl5language.png, null] -> PsiItemSectionImpl(Perl5 POD: ITEM_SECTION) at 5423 in perltrap.pod

      Perl requires braces following if, while, foreach, etc. in null; /perl5language.png, null] -> PsiItemSectionImpl(Perl5 POD: ITEM_SECTION) at 5570 in perltrap.pod

      In Perl, else if is spelled elsif. in null; /perl5language.png, null] -> PsiItemSectionImpl(Perl5 POD: ITEM_SECTION) at 5645 in perltrap.pod

      ? : has higher precedence than assignment.  In JavaScript, one can write:      c... in null; /perl5language.png, null] -> PsiItemSectionImpl(Perl5 POD: ITEM_SECTION) at 5696 in perltrap.pod

      Perl requires semicolons to separate statements. in null; /perl5language.png, null] -> PsiItemSectionImpl(Perl5 POD: ITEM_SECTION) at 5996 in perltrap.pod

      Variables declared with my only affect code after the declaration. You cannot wr... in null; /perl5language.png, null] -> PsiItemSectionImpl(Perl5 POD: ITEM_SECTION) at 6055 in perltrap.pod

      my variables are scoped to the current block, not to the current function.  If y... in null; /perl5language.png, null] -> PsiItemSectionImpl(Perl5 POD: ITEM_SECTION) at 6499 in perltrap.pod

      An object's members cannot be made accessible as variables.  The closest Perl eq... in null; /perl5language.png, null] -> PsiItemSectionImpl(Perl5 POD: ITEM_SECTION) at 6688 in perltrap.pod

      The object or class on which a method is called is passed as one of the method's... in null; /perl5language.png, null] -> PsiItemSectionImpl(Perl5 POD: ITEM_SECTION) at 6907 in perltrap.pod

    Sed Traps in null; /perl5language.png, null] -> PsiHead2SectionImpl(Perl5 POD: HEAD_2_SECTION) at 7049 in perltrap.pod

      A Perl program executes only once, not once for each input line.  You can do an ... in null; /perl5language.png, null] -> PsiItemSectionImpl(Perl5 POD: ITEM_SECTION) at 7140 in perltrap.pod

      Backreferences in substitutions use "$" rather than "\". in null; /perl5language.png, null] -> PsiItemSectionImpl(Perl5 POD: ITEM_SECTION) at 7265 in perltrap.pod

      The pattern matching metacharacters "(", ")", and "|" do not have backslashes in... in null; /perl5language.png, null] -> PsiItemSectionImpl(Perl5 POD: ITEM_SECTION) at 7332 in perltrap.pod

      The range operator is ..., rather than comma. in null; /perl5language.png, null] -> PsiItemSectionImpl(Perl5 POD: ITEM_SECTION) at 7430 in perltrap.pod

    Shell Traps in null; /perl5language.png, null] -> PsiHead2SectionImpl(Perl5 POD: HEAD_2_SECTION) at 7496 in perltrap.pod

      The backtick operator does variable interpolation without regard to the presence... in null; /perl5language.png, null] -> PsiItemSectionImpl(Perl5 POD: ITEM_SECTION) at 7585 in perltrap.pod

      The backtick operator does no translation of the return value, unlike csh. in null; /perl5language.png, null] -> PsiItemSectionImpl(Perl5 POD: ITEM_SECTION) at 7709 in perltrap.pod

      Shells (especially csh) do several levels of substitution on each command line. ... in null; /perl5language.png, null] -> PsiItemSectionImpl(Perl5 POD: ITEM_SECTION) at 7797 in perltrap.pod

      Shells interpret scripts a little bit at a time.  Perl compiles the entire progr... in null; /perl5language.png, null] -> PsiItemSectionImpl(Perl5 POD: ITEM_SECTION) at 8012 in perltrap.pod

      The arguments are available via @ARGV, not $1, $2, etc. in null; /perl5language.png, null] -> PsiItemSectionImpl(Perl5 POD: ITEM_SECTION) at 8186 in perltrap.pod

      The environment is not automatically made available as separate scalar variables... in null; /perl5language.png, null] -> PsiItemSectionImpl(Perl5 POD: ITEM_SECTION) at 8252 in perltrap.pod

      The shell's test uses "=", "!=", "<" etc for string comparisons and "-eq", "-ne"... in null; /perl5language.png, null] -> PsiItemSectionImpl(Perl5 POD: ITEM_SECTION) at 8344 in perltrap.pod

    Perl Traps in null; /perl5language.png, null] -> PsiHead2SectionImpl(Perl5 POD: HEAD_2_SECTION) at 8620 in perltrap.pod

      Remember that many operations behave differently in a list context than they do ... in null; /perl5language.png, null] -> PsiItemSectionImpl(Perl5 POD: ITEM_SECTION) at 8712 in perltrap.pod

      Avoid barewords if you can, especially all lowercase ones. You can't tell by jus... in null; /perl5language.png, null] -> PsiItemSectionImpl(Perl5 POD: ITEM_SECTION) at 8849 in perltrap.pod

      You cannot discern from mere inspection which builtins are unary operators (like... in null; /perl5language.png, null] -> PsiItemSectionImpl(Perl5 POD: ITEM_SECTION) at 9098 in perltrap.pod

      People have a hard time remembering that some functions default to $_, or @ARGV,... in null; /perl5language.png, null] -> PsiItemSectionImpl(Perl5 POD: ITEM_SECTION) at 9393 in perltrap.pod

      The <FH> construct is not the name of the filehandle, it is a readline operation... in null; /perl5language.png, null] -> PsiItemSectionImpl(Perl5 POD: ITEM_SECTION) at 9547 in perltrap.pod

      Remember not to use = when you need =~; these two constructs are quite different... in null; /perl5language.png, null] -> PsiItemSectionImpl(Perl5 POD: ITEM_SECTION) at 9841 in perltrap.pod

      The do {} construct isn't a real loop that you can use loop control on. in null; /perl5language.png, null] -> PsiItemSectionImpl(Perl5 POD: ITEM_SECTION) at 9974 in perltrap.pod

      Use my() for local variables whenever you can get away with it (but see perlform... in null; /perl5language.png, null] -> PsiItemSectionImpl(Perl5 POD: ITEM_SECTION) at 10059 in perltrap.pod

      If you localize an exported variable in a module, its exported value will not ch... in null; /perl5language.png, null] -> PsiItemSectionImpl(Perl5 POD: ITEM_SECTION) at 10315 in perltrap.pod

