#!./perl
# we need to make a capture of utf packages in lexer on bad character fallback
package раз::два::три;
sub stub{}
package раз'два::три;
sub stub{}
package раз'два'три;
sub stub{}
package раз::'два::::'три;
sub stub{}
package one::два::три;
sub stub{}
package one::два::three;
sub stub{}
package раз::two::три;
sub stub{}
package раз::два::three;
sub stub{}

package раз::два::три::;
sub stub1{}
package раз'два::три::;
sub stub1{}
package раз'два'три::;
sub stub1{}
package раз::'два::::'три::;
sub stub1{}
package one::два::три::;
sub stub1{}
package one::два::three::;
sub stub1{}
package раз::two::три::;
sub stub1{}
package раз::два::three::;

package ::раз::два::три;
sub stub2{}
package ::раз'два::три;
sub stub2{}
package ::раз'два'три;
sub stub2{}
package ::раз::'два::::'три;
sub stub2{}
package ::one::два::три;
sub stub2{}
package ::one::два::three;
sub stub2{}
package ::раз::two::три;
sub stub2{}
package ::раз::два::three;
package ::раз::два::три::;
sub stub3{}
package ::раз'два::три::;
sub stub3{}
package ::раз'два'три::;
sub stub3{}
package ::раз::'два::::'три::;
sub stub3{}
package ::one::два::три::;
sub stub3{}
package ::one::два::three::;
sub stub3{}
package ::раз::two::три::;
sub stub3{}
package ::раз::два::three::;
sub stub3{}
package one::two::threeраз::;
package one::two::threeраз;
package one::two::threeразthree::;
package one::two::threeразthree;

${'};
$раз::два::три;
$раз'два::три;
$раз'два'три;
$раз::'два::::'три;
$one::два::три;
$one::два::three;
$раз::two::три;
$раз::два::three;

$раз::два::три::;
$раз'два::три::;
$раз'два'три::;
$раз::'два::::'три::;
$one::два::три::;
$one::два::three::;
$раз::two::три::;
$раз::два::three::;

$::раз::два::три;
$::раз'два::три;
$::раз'два'три;
$::раз::'два::::'три;
$::one::два::три;
$::one::два::three;
$::раз::two::три;
$::раз::два::three;

$'раз;
$'раз::два::три;
$'раз'два::три;
$'раз'два'три;
$'раз::'два::::'три;
$'one::два::три;
$'one::два::three;
$'раз::two::три;
$'раз::два::three;


$'раз::два::три::;
$'раз'два::три::;
$'раз'два'три::;
$'раз::'два::::'три::;
$'one::два::три::;
$'one::два::three::;
$'раз::two::три::;
$'раз::два::three::;

$one::two::threeраз::;
$one::two::threeраз;
$one::two::threeразthree::;
$one::two::threeразthree;

$::one::two::threeраз::;
$::one::two::threeраз;
$::one::two::threeразthree::;
$::one::two::threeразthree;

$'one::two::threeраз::;
$'one::two::threeраз;
$'one::two::threeразthree::;
$'one::two::threeразthree;

*{'};
*раз::два::три;
*раз'два::три;
*раз'два'три;
*раз::'два::::'три;
*one::два::три;
*one::два::three;
*раз::two::три;
*раз::два::three;

*раз::два::три::;
*раз'два::три::;
*раз'два'три::;
*раз::'два::::'три::;
*one::два::три::;
*one::два::three::;
*раз::two::три::;
*раз::два::three::;

*::раз::два::три;
*::раз'два::три;
*::раз'два'три;
*::раз::'два::::'три;
*::one::два::три;
*::one::два::three;
*::раз::two::три;
*::раз::два::three;

*'раз;
*'раз::два::три;
*'раз'два::три;
*'раз'два'три;
*'раз::'два::::'три;
*'one::два::три;
*'one::два::three;
*'раз::two::три;
*'раз::два::three;


*'раз::два::три::;
*'раз'два::три::;
*'раз'два'три::;
*'раз::'два::::'три::;
*'one::два::три::;
*'one::два::three::;
*'раз::two::три::;
*'раз::два::three::;

*one::two::threeраз::;
*one::two::threeраз;
*one::two::threeразthree::;
*one::two::threeразthree;

*::one::two::threeраз::;
*::one::two::threeраз;
*::one::two::threeразthree::;
*::one::two::threeразthree;

*'one::two::threeраз::;
*'one::two::threeраз;
*'one::two::threeразthree::;
*'one::two::threeразthree;

# these should be errors
#$'::раз::два::три;
#$'::раз'два::три;
#$'::раз'два'три;
#$'::раз::'два::::'три;
#$'::one::два::три;
#$'::one::два::three;
#$'::раз::two::три;
#$'::раз::два::three;

@'раз;
@раз::два::три;
@раз'два::три;
@раз'два'три;
@раз::'два::::'три;
@one::два::три;
@one::два::three;
@раз::two::три;
@раз::два::three;

@раз::два::три::;
@раз'два::три::;
@раз'два'три::;
@раз::'два::::'три::;
@one::два::три::;
@one::два::three::;
@раз::two::три::;
@раз::два::three::;

@::раз::два::три;
@::раз'два::три;
@::раз'два'три;
@::раз::'два::::'три;
@::one::два::три;
@::one::два::three;
@::раз::two::три;
@::раз::два::three;

@'раз::два::три;
@'раз'два::три;
@'раз'два'три;
@'раз::'два::::'три;
@'one::два::три;
@'one::два::three;
@'раз::two::три;
@'раз::два::three;

@'раз::два::три::;
@'раз'два::три::;
@'раз'два'три::;
@'раз::'два::::'три::;
@'one::два::три::;
@'one::два::three::;
@'раз::two::три::;
@'раз::два::three::;

@one::two::threeраз::;
@one::two::threeраз;
@one::two::threeразthree::;
@one::two::threeразthree;

@::one::two::threeраз::;
@::one::two::threeраз;
@::one::two::threeразthree::;
@::one::two::threeразthree;

@'one::two::threeраз::;
@'one::two::threeраз;
@'one::two::threeразthree::;
@'one::two::threeразthree;

# these should be errors
#    @'::раз::два::три;
#    @'::раз'два::три;
#    @'::раз'два'три;
#    @'::раз::'два::::'три;
#    @'::one::два::три;
#    @'::one::два::three;
#    @'::раз::two::три;
#    @'::раз::два::three;

%раз::два::три;
%раз'два::три;
%раз'два'три;
%раз::'два::::'три;
%one::два::три;
%one::два::three;
%раз::two::три;
%раз::два::three;

%раз::два::три::;
%раз'два::три::;
%раз'два'три::;
%раз::'два::::'три::;
%one::два::три::;
%one::два::three::;
%раз::two::три::;
%раз::два::three::;

%::раз::два::три;
%::раз'два::три;
%::раз'два'три;
%::раз::'два::::'три;
%::one::два::три;
%::one::два::three;
%::раз::two::три;
%::раз::два::three;

%'раз::два::три;
%'раз'два::три;
%'раз'два'три;
%'раз::'два::::'три;
%'one::два::три;
%'one::два::three;
%'раз::two::три;
%'раз::два::three;

%'раз::два::три::;
%'раз'два::три::;
%'раз'два'три::;
%'раз::'два::::'три::;
%'one::два::три::;
%'one::два::three::;
%'раз::two::три::;
%'раз::два::three::;

%one::two::threeраз::;
%one::two::threeраз;
%one::two::threeразthree::;
%one::two::threeразthree;

%::one::two::threeраз::;
%::one::two::threeраз;
%::one::two::threeразthree::;
%::one::two::threeразthree;

%'one::two::threeраз::;
%'one::two::threeраз;
%'one::two::threeразthree::;
%'one::two::threeразthree;

# these should be errors
#    %'::раз::два::три;
#    %'::раз'два::три;
#    %'::раз'два'три;
#    %'::раз::'два::::'три;
#    %'::one::два::три;
#    %'::one::два::three;
#    %'::раз::two::три;
#    %'::раз::два::three;

sub раз::два::три;
sub раз'два::три;
sub раз'два'три;
sub раз::'два::::'три;
sub one::два::три;
sub one::два::three;
sub раз::two::три;
sub раз::два::three;

sub ::раз::два::три;
sub ::раз'два::три;
sub ::раз'два'три;
sub ::раз::'два::::'три;
sub ::one::два::три;
sub ::one::два::three;
sub ::раз::two::три;
sub ::раз::два::three;

sub one::two::threeраз::раз;
sub one::two::threeраз;
sub one::two::threeразthree::два;
sub one::two::threeразthree;

BEGIN { chdir 't' if -d 't'; @INC = '../lib'; require './test.pl' }

use utf8;
use open qw( :utf8 :std );

plan 12;

@ฟ옥ʮ::ISA = "ᶶ";
*ຜ옥ㄏ::ISA = *ฟ옥ʮ::ISA;
@ฟ옥ʮ::ISA = "Ｂᐊㄗ";

ok 'ฟ옥ʮ'->isa("Ｂᐊㄗ"),
    'isa after another stash has claimed the @ISA via glob assignment';
ok 'ຜ옥ㄏ'->isa("Ｂᐊㄗ"),
    'isa on the stash that claimed the @ISA via glob assignment';
ok !ฟ옥ʮ->isa("ᶶ"),
    '!isa when another stash has claimed the @ISA via glob assignment';
ok !ຜ옥ㄏ->isa("ᶶ"),
    '!isa on the stash that claimed the @ISA via glob assignment';

@ฟ옥ʮ::ISA = "ᶶ";
*ฟ옥ʮ::ISA = ["Ｂᐊㄗ"];

ok 'ฟ옥ʮ'->isa("Ｂᐊㄗ"),
    'isa after glob-to-ref assignment when *ISA is shared';
ok 'ຜ옥ㄏ'->isa("Ｂᐊㄗ"),
    'isa after glob-to-ref assignment on another stash when *ISA is shared';
ok !ฟ옥ʮ->isa("ᶶ"),
    '!isa after glob-to-ref assignment when *ISA is shared';
ok !ຜ옥ㄏ->isa("ᶶ"),
    '!isa after glob-to-ref assignment on another stash when *ISA is shared';

@ᕘ::ISA = "ᶶ";
*ጶ::ISA = \@ᕘ::ISA;
@ᕘ::ISA = "Ｂᐊㄗ";

ok 'ᕘ'->isa("Ｂᐊㄗ"),
    'isa after another stash has claimed the @ISA via ref-to-glob assignment';
ok 'ጶ'->isa("Ｂᐊㄗ"),
    'isa on the stash that claimed the @ISA via ref-to-glob assignment';
ok !ᕘ->isa("ᶶ"),
    '!isa when another stash has claimed the @ISA via ref-to-glob assignment';
ok !ጶ->isa("ᶶ"),
    '!isa on the stash that claimed the @ISA via ref-to-glob assignment';

#!./perl

# Checks if 'package' work as intended.

BEGIN {
    chdir 't' if -d 't';
    require './test.pl';
}

plan (tests => 18);

use utf8;
use open qw( :utf8 :std );

package Føø::Bær { }

package クラス { }

package ฟọ::バッズ { }

ok 1, "sanity check. If we got this far, UTF-8 in package names is legal.";

#The next few come from comp/package.t
{

    $ㄅĽuṞfⳐ = 123;

    package ꑭʑ;

    sub ニュー {bless [];}
    $bar = 4;
    {
        package 압Ƈ;
        $ㄅĽuṞfⳐ = 5;
    }

    $압Ƈ'd읯ⱪ = 6;        #'

    $ꑭʑ = 2;

    $ꑭʑ = join(':', sort(keys %ꑭʑ::));
    $압Ƈ = join(':', sort(keys %압Ƈ::));

    ::is $ꑭʑ, 'bar:ニュー:ꑭʑ:압Ƈ', "comp/stash.t test 1";
    ::is $압Ƈ, "d읯ⱪ:ㄅĽuṞfⳐ", "comp/stash.t test 2";
    ::is $main'ㄅĽuṞfⳐ, 123, "comp/stash.t test 3";

    package 압Ƈ;

    ::is $ㄅĽuṞfⳐ, 5, "comp/stash.t test 4";
    eval '::is $ㄅĽuṞfⳐ, 5, "comp/stash.t test 5";';
    eval 'package main; is $ㄅĽuṞfⳐ, 123, "comp/stash.t test 6";';
    ::is $ㄅĽuṞfⳐ, 5, "comp/stash.t test 7";

    #This is actually pretty bad, as caller() wasn't clean to begin with.
    package main;
    sub ㄘ { caller(0) }

    sub ƒஓ {
        my $s = shift;
        if ($s) {
            package ᛔQR;
            main::ㄘ();
        }
    }

    is((ƒஓ(1))[0], 'ᛔQR', "comp/stash.t test 8");

    my $Q = ꑭʑ->ニュー();
    undef %ꑭʑ::;
    eval { $a = *ꑭʑ::ニュー{PACKAGE}; };
    is $a, "__ANON__", "comp/stash.t test 9";

    {
        local $@;
        eval { $Q->param; };
        like $@, qr/^Can't use anonymous symbol table for method lookup/, "comp/stash.t test 10";
    }

    like "$Q", qr/^__ANON__=/, "comp/stash.t test 11";

    is ref $Q, "__ANON__", "comp/stash.t test 12";

    #    package bugⅲⅱⅴⅵⅱ { #not really latin, but bear with me, I'm not Damian.
    #        ::is( __PACKAGE__,   'bugⅲⅱⅴⅵⅱ', "comp/stash.t test 13");
    #        ::is( eval('__PACKAGE__'), 'bugⅲⅱⅴⅵⅱ', "comp/stash.t test 14");
    #    }
}

#This comes from comp/package_block.t
{
    local $@;
    eval q[package ᕘ {];
    like $@, qr/\AMissing right curly /, "comp/package_block.t test";
}

# perl #105922

{
    my $latin_1 = "þackage";
    my $utf8    = "þackage";
    utf8::downgrade($latin_1);
    utf8::upgrade($utf8);

    local $@;
    eval { $latin_1->can("yadda") };
    ok(!$@, "latin1->meth works");

    local $@;
    eval { $utf8->can("yadda") };
    ok(!$@, "utf8->meth works");
}
