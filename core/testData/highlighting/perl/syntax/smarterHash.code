$foo = reduce { defined($a)            ? $a :
    $code->(local $_ = $b) ? $b :
        undef } undef, @list; # first
$foo = reduce { $a > $b ? $a : $b } 1..10;       # max
$foo = reduce { $a gt $b ? $a : $b } 'A'..'Z';   # maxstr
$foo = reduce { $a < $b ? $a : $b } 1..10;       # min
$foo = reduce { $a lt $b ? $a : $b } 'aa'..'zz'; # minstr
$foo = reduce { $a + $b } 1 .. 10;               # sum
$foo = reduce { $a . $b } @bar;                  # concat
$foo = reduce { $a || $code->(local $_ = $b) } 0, @bar;   # any
$foo = reduce { $a && $code->(local $_ = $b) } 1, @bar;   # all
$foo = reduce { $a && !$code->(local $_ = $b) } 1, @bar;  # none
$foo = reduce { $a || !$code->(local $_ = $b) } 0, @bar;  # notall
# Note that these implementations do not fully short-circuit

$foo = reduce { defined($a)            ? $a :
    $code->(local $_ = $b) ? $b :
        undef }, undef, @list; # first
$foo = reduce { $a > $b ? $a : $b }, 1..10;       # max
$foo = reduce { $a gt $b ? $a : $b }, 'A'..'Z';   # maxstr
$foo = reduce { $a < $b ? $a : $b }, 1..10;       # min
$foo = reduce { $a lt $b ? $a : $b }, 'aa'..'zz'; # minstr
$foo = reduce { $a + $b }, 1 .. 10;               # sum
$foo = reduce { $a . $b }, @bar;                  # concat
$foo = reduce { $a || $code->(local $_ = $b) }, 0, @bar;   # any
$foo = reduce { $a && $code->(local $_ = $b) }, 1, @bar;   # all
$foo = reduce { $a && !$code->(local $_ = $b) }, 1, @bar;  # none
$foo = reduce { $a || !$code->(local $_ = $b) }, 0, @bar;  # notall

