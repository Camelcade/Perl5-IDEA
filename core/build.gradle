import org.jetbrains.grammarkit.tasks.GenerateLexer
import org.jetbrains.grammarkit.tasks.GenerateParser

/*
 * Copyright 2015-2018 Alexandr Evstigneev
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

def genRoot = file('gen')

sourceSets {
  main {
    java.srcDirs project.files('src', genRoot)
    resources.srcDir file('resources')
  }
  test {
    java.srcDir file('test')
    resources.srcDirs file('testData')
  }
}

idea{
  module {
    generatedSourceDirs += genRoot
  }
}

intellij{
  type 'IC'
  intellij.plugins = [ 'PsiViewer:183.2153', 'IntelliLang', 'coverage']
}

apply plugin: 'org.jetbrains.grammarkit'

task generatePerl5Parser(type: GenerateParser) {
  source = "grammar/Perl5.bnf"
  pathToParser = '/com/perl5/lang/perl/parser/PerlParserGenerated.java'
  pathToPsiRoot = '/com/perl5/lang/perl/psi'
}

task generatePodParser(type: GenerateParser) {
  source = "grammar/Pod.bnf"
  pathToParser = '/com/perl5/lang/pod/parser/PodParserGenerated.java'
  pathToPsiRoot = '/com/perl5/lang/pod/psi'
}


task generatePerlLexer(type: GenerateLexer) {
  dependsOn generatePerl5Parser
  source = "grammar/Perl.flex"
  targetDir = "gen/com/perl5/lang/perl/lexer/"
  targetClass = "PerlLexer"
}

task generatePodLexer(type: GenerateLexer) {
  dependsOn generatePodParser
  source = "grammar/Pod.flex"
  targetDir = "gen/com/perl5/lang/pod/lexer/"
  targetClass = "PodLexerGenerated"
}

tasks.withType(GenerateLexer).each {
  it.skeleton = rootProject.file(lexer_skeleton)
  it.purgeOldFiles = true
}

tasks.withType(GenerateParser).each {
  it.targetRoot = genRoot
  it.purgeOldFiles = true
}

compileJava {
  dependsOn generatePerlLexer
  dependsOn generatePodLexer
}

project.afterEvaluate {
  prepareSandbox.doLast {
    def targetPath = "$it.destinationDir/$intellij.pluginName/perl/"
    copy {
      from 'scripts'
      into targetPath
    }
  }
}
