/*
Copyright 2015 Alexandr Evstigneev

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
{
  psiVisitorName="PodVisitorGenerated"
  elementTypeHolderClass="com.perl5.lang.pod.lexer.PodElementTypesGenerated"

  elementTypeFactory="com.perl5.lang.pod.elementTypes.PodElementTypeFactory.getElementType"
  tokenTypeFactory="com.perl5.lang.pod.elementTypes.PodElementTypeFactory.getTokenType"

  parserClass="com.perl5.lang.pod.parser.PodParser"
  extends="com.perl5.lang.pod.parser.psi.mixin.PodCompositeElementMixin"

  stubClass("pod_format_index")="com.perl5.lang.pod.parser.psi.stubs.PodSectionStub"

  mixin("head1_section")="com.perl5.lang.pod.parser.psi.mixin.PodSectionH1Mixin"
  mixin("head2_section")="com.perl5.lang.pod.parser.psi.mixin.PodSectionH2Mixin"
  mixin("head3_section")="com.perl5.lang.pod.parser.psi.mixin.PodSectionH3Mixin"
  mixin("head4_section")="com.perl5.lang.pod.parser.psi.mixin.PodSectionH4Mixin"
  mixin("pod_paragraph")="com.perl5.lang.pod.parser.psi.mixin.PodSectionParagraphMixin"
  mixin("pod_verbatim_paragraph")="com.perl5.lang.pod.parser.psi.mixin.PodSectionVerbatimParagraphMixin"
  mixin("unknown_section")="com.perl5.lang.pod.parser.psi.mixin.PodUnknownSectionMixIn"

  mixin("over_section")="com.perl5.lang.pod.parser.psi.mixin.PodSectionOverMixin"
  mixin("over_section_content")="com.perl5.lang.pod.parser.psi.mixin.PodOverSectionContentMixin"
  mixin("item_section")="com.perl5.lang.pod.parser.psi.mixin.PodSectionItemMixin"
  mixin("begin_section|for_section")="com.perl5.lang.pod.parser.psi.mixin.PodSectionFormattedMixin"

  mixin(".+_section")="com.perl5.lang.pod.parser.psi.mixin.PodTitledSectionMixin"

  mixin("item_section_title")="com.perl5.lang.pod.parser.psi.mixin.PodSectionItemTitleMixin"

  mixin("pod_format_bold")="com.perl5.lang.pod.parser.psi.mixin.PodFormatterBMixin"
  mixin("pod_format_code")="com.perl5.lang.pod.parser.psi.mixin.PodFormatterCMixin"
  mixin("pod_format_escape")="com.perl5.lang.pod.parser.psi.mixin.PodFormatterEMixin"
  mixin("pod_format_file")="com.perl5.lang.pod.parser.psi.mixin.PodFormatterFMixin"
  mixin("pod_format_italic")="com.perl5.lang.pod.parser.psi.mixin.PodFormatterIMixin"

  implements("pod_format_link")="com.perl5.lang.pod.parser.psi.PodFormatterL"
  mixin("pod_format_link")="com.perl5.lang.pod.parser.psi.mixin.PodFormatterLMixin"

  implements("head1_section|head2_section|head3_section|head4_section|item_section")="com.perl5.lang.pod.parser.psi.PodTitledSection"

  mixin("pod_format_nbsp")="com.perl5.lang.pod.parser.psi.mixin.PodFormatterSMixin"
  mixin("pod_format_index")="com.perl5.lang.pod.parser.psi.mixin.PodFormatterXMixin"
  mixin("pod_format_null")="com.perl5.lang.pod.parser.psi.mixin.PodFormatterZMixin"

  implements(".+section_content")="com.perl5.lang.pod.parser.psi.PodSectionContent"
  implements("section_title")="com.perl5.lang.pod.parser.psi.PodSectionTitle"

  psiClassPrefix="Psi"
  psiImplClassSuffix="Impl"
  psiPackage="com.perl5.lang.pod.psi"
  psiImplPackage="com.perl5.lang.pod.psi.impl"

  elementTypeClass="com.perl5.lang.pod.elementTypes.PodElementType"
  tokenTypeClass="com.perl5.lang.pod.elementTypes.PodTokenType"
  parserUtilClass="com.perl5.lang.pod.parser.PodParserUtil"


//  psiImplUtilClass="com.perl5.lang.pod.psi.impl.PodPsiImplUtil"

    tokens=[
        POD_NEWLINE='NL'

        POD_POD='=pod'

        POD_HEAD1='=head1'
        POD_HEAD2='=head2'
        POD_HEAD3='=head3'
        POD_HEAD4='=head4'

        POD_OVER='=over'
        POD_ITEM='=item'
        POD_BACK='=back'

	POD_UNKNOWN='=unknown'

        POD_BEGIN='=begin'
        POD_FORMATTED_BLOCK='formatted_block'
        POD_END='=end'
        POD_FORMAT_NAME="format_name"
        POD_FOR='=for'

        POD_ENCODING='=encoding'
        POD_ENCODING_NAME="encoding_name"

        POD_CUT='=cut'

        POD_CODE='code'

        POD_ANGLE_LEFT='<'
        POD_ANGLE_RIGHT='>'
        POD_PAREN_LEFT='('
        POD_PAREN_RIGHT=')'
        POD_BRACKET_LEFT='['
        POD_BRACKET_RIGHT=']'
        POD_BRACE_LEFT='{'
        POD_BRACE_RIGHT='}'

        POD_QUOTE_DOUBLE='"'
        POD_QUOTE_SINGLE="'"
        POD_QUOTE_TICK='`'

        POD_I='I'	// italic
        POD_B='B'	// bold
        POD_C='C'	// code
        POD_L='L'	// hyperlink
        POD_E='E'	// escape
        POD_F='F'	// filename
        POD_S='S'	// nbsp
        POD_X='X'	// index
        POD_Z='Z'	// null

        POD_IDENTIFIER='identifier'
        POD_PACKAGE='package'
        POD_NUMBER='number'
        POD_INDENT_LEVEL="indent_level"
        POD_SYMBOL='symbol'

        POD_DIV='/'
        POD_BACKREF='\'
        POD_ASTERISK='*'
        POD_PIPE='|'
        POD_COLON=':'
    ]

}

root ::= pod_file_item *

private pod_file_item ::=
!<<eof>>
{
	head1_section
	| head2_section
	| head3_section
	| head4_section
	| any_level_item
	| item_section
}

private any_level_item ::=
	pod_section
	| over_section
//	| begin_section
	| for_section
	| encoding_section
	| unknown_section
	| cut_section
	| pod_paragraph
	| pod_verbatim_paragraph
	| POD_NEWLINE+

pod_paragraph ::= pod_paragraph_content
pod_verbatim_paragraph ::= POD_CODE

private pod_paragraph_content ::= pod_term+ POD_NEWLINE*

pod_section ::= POD_POD

private parse_section_title ::= section_title POD_NEWLINE*
section_title ::= pod_term*

private parse_item_section_title ::= item_section_title POD_NEWLINE*
item_section_title ::= pod_term*

head1_section ::= POD_HEAD1 [ parse_section_title [head1_section_content]] {pin=1}
head1_section_content ::= head1_section_item *
private head1_section_item ::= head2_section | head3_section | head4_section | any_level_item

//private recover_pod_section ::= !(POD_HEAD1|POD_HEAD2|POD_HEAD3|POD_HEAD4|POD_OVER|POD_CUT|POD_POD|POD_FOR|POD_BEGIN|POD_ENCODING|POD_UNKNOWN)

head2_section ::= POD_HEAD2 [parse_section_title [head2_section_content]] {pin=1}
head2_section_content ::= head2_section_item *
private head2_section_item ::= head3_section | head4_section | any_level_item

head3_section ::= POD_HEAD3 [parse_section_title [head3_section_content]] {pin=1}
head3_section_content ::= head3_section_item *
private head3_section_item ::= head4_section | any_level_item

head4_section ::= POD_HEAD4 [parse_section_title [head4_section_content]] {pin=1}
head4_section_content ::= head4_section_item *
private head4_section_item ::= any_level_item

over_section ::= over_section_opener  over_section_content over_section_closer {pin=1}
private over_section_opener ::= POD_OVER [<<checkAndConvert 'POD_NUMBER, POD_INDENT_LEVEL'>>] POD_NEWLINE+ {pin=1}
private over_section_closer ::= POD_BACK POD_NEWLINE* {pin=1}
over_section_content ::= over_section_item* {recoverWhile=recover_over_section}
private over_section_item ::=
 	item_section
	| any_level_item
item_section ::= POD_ITEM [parse_item_section_title [item_section_content]] {pin=1}
item_section_content ::= any_level_item +
private recover_over_section ::= !(<<eof>>|POD_BACK|POD_HEAD1|POD_HEAD2|POD_HEAD3|POD_HEAD4)

// these are not commented to keep PSI elements, need to be reworked
begin_section ::= POD_BEGIN parse_begin_section_content begin_section_closer  {pin=1}
private begin_section_closer ::= POD_END pod_section_format POD_NEWLINE* {pin=1}

private parse_begin_section_content ::=
	&POD_COLON pod_section_format begin_section_content
	| pod_section_format <<parsePodSectionContent 'POD_END, BEGIN_SECTION_CONTENT, "Unclosed begin-end section"'>>

begin_section_content ::= {pod_term|POD_NEWLINE}* {recoverWhile=recover_begin_section} // fixme we should merge when no colon in format
private recover_begin_section ::= !(<<eof>>|POD_END|POD_HEAD1|POD_HEAD2|POD_HEAD3|POD_HEAD4)

pod_section_format ::= POD_COLON ? <<collapseNonSpaceTo 'POD_FORMAT_NAME '>>

for_section ::= {POD_FOR|POD_BEGIN|POD_END} parse_for_section_content POD_NEWLINE *{pin=1}
private parse_for_section_content ::=
	&POD_COLON pod_section_format for_section_content
	 | pod_section_format <<parsePodSectionContent 'POD_NEWLINE, FOR_SECTION_CONTENT, "Unclosed for section"'>>

for_section_content ::=	pod_term * // fixme we should merge when no colon in format

encoding_section ::= POD_ENCODING <<collapseNonSpaceTo 'POD_ENCODING_NAME '>> POD_NEWLINE+ {pin=1}

cut_section ::= POD_CUT [parse_section_title] POD_NEWLINE* {pin=1}

unknown_section ::= POD_UNKNOWN [parse_section_title] POD_NEWLINE*  {pin=1}


private pod_term ::=
	pod_format
	| POD_ANGLE_LEFT
	| POD_ANGLE_RIGHT
	| POD_IDENTIFIER
	| POD_NUMBER

	| POD_DIV
	| POD_BACKREF
	| POD_ASTERISK
	| POD_PIPE
	| POD_COLON
	| POD_SYMBOL

	| POD_QUOTE_DOUBLE
	| POD_QUOTE_SINGLE
	| POD_QUOTE_TICK

	| POD_PAREN_LEFT
	| POD_PAREN_RIGHT
	| POD_BRACKET_LEFT
	| POD_BRACKET_RIGHT
	| POD_BRACE_LEFT
	| POD_BRACE_RIGHT

private pod_format ::=
 	pod_format_italic
 	| pod_format_bold
 	| pod_format_code
 	| pod_format_link
 	| pod_format_escape
 	| pod_format_file
 	| pod_format_nbsp
 	| pod_format_index
 	| pod_format_null

pod_format_italic ::= POD_I <<parseTermParam>> {pin=1}
pod_format_bold ::= POD_B <<parseTermParam>> {pin=1}
pod_format_code ::= POD_C <<parseTermParam>> {pin=1}
pod_format_escape ::= POD_E <<parseTermParam>> {pin=1}
pod_format_file ::= POD_F <<parseTermParam>> {pin=1}
pod_format_nbsp ::= POD_S <<parseTermParam>> {pin=1}
pod_format_index ::= POD_X <<parseTermParam>> {pin=1}
pod_format_null ::= POD_Z <<parseTermParam>> {pin=1}
pod_format_link ::= POD_L <<parseTermParam>> {pin=1}

formatting_section_content ::= pod_term*