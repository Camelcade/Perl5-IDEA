Subtree: HTML (HTML)
HtmlFile:comments.tt
  PsiElement(HTML_DOCUMENT)
    PsiElement(XML_PROLOG)
      <empty list>
    HtmlTag:html
      XmlToken:XML_START_TAG_START('<')
      XmlToken:XML_NAME('html')
      XmlToken:XML_TAG_END('>')
      XmlText
      HtmlTag:head
        XmlToken:XML_START_TAG_START('<')
        XmlToken:XML_NAME('head')
        XmlToken:XML_TAG_END('>')
        XmlText
          XmlToken:XML_DATA_CHARACTERS('http://template-toolkit.org/docs/manual/Variables.html')
        XmlToken:XML_END_TAG_START('</')
        XmlToken:XML_NAME('head')
        XmlToken:XML_TAG_END('>')
      XmlText
      HtmlTag:body
        XmlToken:XML_START_TAG_START('<')
        XmlToken:XML_NAME('body')
        XmlToken:XML_TAG_END('>')
        XmlText
          PsiElement(TT2: TT2_OUTER)('[% #line comment in block %]\n\n[%#\n    this entire directive is ignored no\n    matter how many lines it wraps onto\n%]\n\n[%#\n    this entire directive is ignored no\n    matter how 'many lines it wraps onto\n%]\n\n[%# this entire\n    "directive is ignored no\n    matter how many lines it wraps onto\n%]\n\n[% # this is a comment\n   theta = 20      # so is' this\n   rho   = 30      # <aol>me "too!</aol>\n   blah = 69       # same here\n   comment1 = '#notcomment' # this is\n   comment2 = "#notcomment too" # this is\n%]')
        XmlToken:XML_END_TAG_START('</')
        XmlToken:XML_NAME('body')
        XmlToken:XML_TAG_END('>')
      XmlText
      XmlToken:XML_END_TAG_START('</')
      XmlToken:XML_NAME('html')
      XmlToken:XML_TAG_END('>')
--------------------------------------------------------------------------------
Subtree: Template Toolkit 2 (Template Toolkit 2)
Template Toolkit File
  PsiComment(TT2: TT2_HTML)('<html>\n<head>http://template-toolkit.org/docs/manual/Variables.html</head>\n<body>\n\n')
  PsiElement(TT2: [%)('[%')
  PsiComment(TT2: LINE_COMMENT)('#line comment in block ')
  TemplateToolkitCompositeElementImpl(TT2: EMPTY_DIRECTIVE)
    <empty list>
  PsiElement(TT2: %])('%]')
  PsiBlockCommentImpl(TT2: BLOCK_COMMENT)
    PsiElement(TT2: [%)('[%')
    PsiComment(TT2: LINE_COMMENT)('#\n    this entire directive is ignored no\n    matter how many lines it wraps onto\n')
  TemplateToolkitCompositeElementImpl(TT2: EMPTY_DIRECTIVE)
    <empty list>
  PsiElement(TT2: %])('%]')
  PsiBlockCommentImpl(TT2: BLOCK_COMMENT)
    PsiElement(TT2: [%)('[%')
    PsiComment(TT2: LINE_COMMENT)('#\n    this entire directive is ignored no\n    matter how 'many lines it wraps onto\n')
  TemplateToolkitCompositeElementImpl(TT2: EMPTY_DIRECTIVE)
    <empty list>
  PsiElement(TT2: %])('%]')
  PsiBlockCommentImpl(TT2: BLOCK_COMMENT)
    PsiElement(TT2: [%)('[%')
    PsiComment(TT2: LINE_COMMENT)('# this entire\n    "directive is ignored no\n    matter how many lines it wraps onto\n')
  TemplateToolkitCompositeElementImpl(TT2: EMPTY_DIRECTIVE)
    <empty list>
  PsiElement(TT2: %])('%]')
  PsiElement(TT2: [%)('[%')
  PsiComment(TT2: LINE_COMMENT)('# this is a comment')
  PsiSetDirectiveImpl(TT2: SET_DIRECTIVE)
    PsiAssignExprImpl(TT2: ASSIGN_EXPR)
      PsiIdentifierExprImpl(TT2: IDENTIFIER_EXPR)
        PsiElement(TT2: TT2_IDENTIFIER)('theta')
      PsiElement(TT2: =)('=')
      PsiTermExprImpl(TT2: TERM_EXPR)
        PsiElement(TT2: TT2_NUMBER_SIMPLE)('20')
    PsiComment(TT2: LINE_COMMENT)('# so is' this')
    PsiAssignExprImpl(TT2: ASSIGN_EXPR)
      PsiIdentifierExprImpl(TT2: IDENTIFIER_EXPR)
        PsiElement(TT2: TT2_IDENTIFIER)('rho')
      PsiElement(TT2: =)('=')
      PsiTermExprImpl(TT2: TERM_EXPR)
        PsiElement(TT2: TT2_NUMBER_SIMPLE)('30')
    PsiComment(TT2: LINE_COMMENT)('# <aol>me "too!</aol>')
    PsiAssignExprImpl(TT2: ASSIGN_EXPR)
      PsiIdentifierExprImpl(TT2: IDENTIFIER_EXPR)
        PsiElement(TT2: TT2_IDENTIFIER)('blah')
      PsiElement(TT2: =)('=')
      PsiTermExprImpl(TT2: TERM_EXPR)
        PsiElement(TT2: TT2_NUMBER_SIMPLE)('69')
    PsiComment(TT2: LINE_COMMENT)('# same here')
    PsiAssignExprImpl(TT2: ASSIGN_EXPR)
      PsiIdentifierExprImpl(TT2: IDENTIFIER_EXPR)
        PsiElement(TT2: TT2_IDENTIFIER)('comment1')
      PsiElement(TT2: =)('=')
      PsiSqStringExprImpl(TT2: SQ_STRING_EXPR)
        PsiElement(TT2: SQ_OPEN)(''')
        PsiElement(TT2: STRING_CONTENT)('#')
        PsiElement(TT2: STRING_CONTENT)('notcomment')
        PsiElement(TT2: SQ_CLOSE)(''')
    PsiComment(TT2: LINE_COMMENT)('# this is')
    PsiAssignExprImpl(TT2: ASSIGN_EXPR)
      PsiIdentifierExprImpl(TT2: IDENTIFIER_EXPR)
        PsiElement(TT2: TT2_IDENTIFIER)('comment2')
      PsiElement(TT2: =)('=')
      PsiDqStringExprImpl(TT2: DQ_STRING_EXPR)
        PsiElement(TT2: DQ_OPEN)('"')
        PsiElement(TT2: STRING_CONTENT)('#')
        PsiElement(TT2: STRING_CONTENT)('notcomment')
        PsiElement(TT2: STRING_CONTENT)(' ')
        PsiElement(TT2: STRING_CONTENT)('too')
        PsiElement(TT2: DQ_CLOSE)('"')
  PsiComment(TT2: LINE_COMMENT)('# this is')
  PsiElement(TT2: %])('%]')
  PsiComment(TT2: TT2_HTML)('\n\n\n</body>\n</html>')
--------------------------------------------------------------------------------
