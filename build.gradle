/*
 * Copyright 2016 Alexandr Evstigneev
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {
  repositories {
    maven { url 'http://dl.bintray.com/jetbrains/intellij-plugin-service' }
  }
}

plugins {
  id "org.jetbrains.intellij" version "0.4.8"
  id 'jacoco'
  id 'com.github.kt3k.coveralls' version '2.8.2'
  id 'org.jetbrains.grammarkit' version '2019.1'
}

allprojects {
  repositories {
    mavenCentral()
    maven { url "http://mvnrepository.com/artifact" }
  }

  apply plugin: 'jacoco'
  apply plugin: 'java'
  sourceCompatibility = javaVersion
  targetCompatibility = javaTargetVersion
  tasks.withType(JavaCompile) { options.encoding = 'UTF-8' }

  apply plugin: 'org.jetbrains.intellij'
  version = "${pluginVersion}${platformBranch}${pluginBuild}"

  intellij {
    version "${platformVersion}${platformBranch}${platformBuild}"
    updateSinceUntilBuild = true

    if (project.hasProperty('idea_sandbox')) {
      sandboxDirectory "${project.buildDir}/${project.idea_sandbox}"
    }
  }

  test {
    outputs.upToDateWhen { false }
    if (project.hasProperty("overwrite")) {
      systemProperty "idea.tests.overwrite.data", "true"
    }
    useJUnit {
      if (project.hasProperty("runtest")) {
        include '**/' + project.property('runtest') + '.class'
      }

      if (project.hasProperty("perf")) {
        includeCategories 'categories.Performance'
      }
      else {
        excludeCategories 'categories.Performance'
      }
    }
    testLogging {
      exceptionFormat = 'full'
      showStandardStreams = true
    }
    jacoco {
      enabled = System.getenv("WITH_COVERAGE") || project.hasProperty("with_coverage")
    }
  }

  publishPlugin {
    username = project.findProperty('jbRepoUser') ?: ''
    password = project.findProperty('jbRepoPass') ?: ''
  }
}


subprojects {
  patchPluginXml {
    inputs.files(descriptionFile, changesFile)
    pluginDescription(file(descriptionFile).text)
    changeNotes(file(changesFile).text)
  }

  jacocoTestReport {
    reports {
      xml.enabled = true
      html.enabled = true
      csv.enabled = false
    }
  }

  afterEvaluate {
    coveralls.sourceDirs += it.sourceSets.main.java.srcDirs.findAll { file -> file.name == "src" }
  }
}

apply plugin: 'idea'
idea {
  project {
    jdkName = javaVersion
    languageLevel = javaVersion
  }
}

task jacocoMerge(type: JacocoMerge) {
  dependsOn(subprojects.jacocoTestReport.dependsOn)
  mustRunAfter(subprojects.jacocoTestReport.mustRunAfter)
  destinationFile = file("${buildDir}/jacoco/test.exec")
  executionData = files(subprojects.jacocoTestReport.executionData)
    .filter { f -> f.exists() }
}

task jacocoRootReport(type: JacocoReport, group: 'Coverage reports') {
  description = 'Generates an aggregate report from all subprojects'
  dependsOn jacocoMerge

  additionalSourceDirs = files(subprojects.sourceSets.main.allSource.srcDirs)
  sourceDirectories = files(subprojects.sourceSets.main.allSource.srcDirs)
  classDirectories = files(subprojects.sourceSets.main.output)
  executionData jacocoMerge.destinationFile

  reports {
    html.enabled = true // human readable
    xml.enabled = true // required by coveralls
    csv.enabled = false
  }
}

tasks.coveralls {
  group = 'Coverage reports'
  description = 'Uploads the aggregated coverage report to Coveralls'

  dependsOn jacocoRootReport
}

intellij {
  type 'IU'
  downloadSources Boolean.valueOf(downloadIdeaSource)
  if (project.hasProperty('idea_path')) {
    alternativeIdePath = project.idea_path
  }
  plugins = ["PsiViewer:$psiViewerVersion", 'IntelliLang', 'coverage', 'Docker', 'remote-run', // would be nice to have transient plugins
             project(':perl5.core'),
             project(':perl5.transport.docker'),
             project(':perl5.transport.wsl'),
             project(':perl5.lang.tt2'),
             project(':perl5.lang.mojo'),
             project(':perl5.lang.embedded'),
             project(':perl5.lang.mason.framework'),
             project(':perl5.lang.mason.htmlmason'),
             project(':perl5.lang.mason.mason2'),
  ]
}

runIde {
  if (project.hasProperty("nocancel")) {
    systemProperty("idea.ProcessCanceledException", "disabled")
  }
  if (project.hasProperty("traverseUI")) {
    args("traverseUI", "$project.rootDir.canonicalPath/resources/search/searchableOptions.xml")
  }
  jvmArgs("-Xmx2048m")
}
sourceSets {
  test {
    resources.srcDirs file('testData')
  }
}

task publishAllPlugins {
  subprojects.each { dependsOn("${it.name}:publishPlugin") }
}