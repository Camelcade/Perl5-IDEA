import org.jetbrains.grammarkit.tasks.GenerateLexer
import org.jetbrains.grammarkit.tasks.GenerateParser

/*
 * Copyright 2016 Alexandr Evstigneev
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {
    repositories {
        maven { url 'http://dl.bintray.com/jetbrains/intellij-plugin-service' }
        maven { url 'https://jitpack.io' }
    }
    dependencies {
        classpath "com.github.hurricup:gradle-grammar-kit-plugin:2017.1.1"
    }
}

plugins {
    id "org.jetbrains.intellij" version "0.2.17"
}

version = "$version$buildNumber"

apply plugin: 'java'
sourceCompatibility = javaVersion
targetCompatibility = javaTargetVersion
tasks.withType(JavaCompile) { options.encoding = 'UTF-8' }
def genRoot = file('gen')

sourceSets {
    main {
        java.srcDirs 'src', genRoot
        resources.srcDir 'resources'
    }
    test {
        java.srcDir 'test'
        resources.srcDirs 'testData'
    }
}

apply plugin: 'org.jetbrains.intellij'
intellij {
    version ideaVersion
    downloadSources Boolean.valueOf(downloadIdeaSource)
    intellij.plugins = ['IntelliLang', 'PsiViewer:3.28.93']
    if (project.hasProperty('idea_sandbox')) {
        sandboxDirectory project.rootDir.canonicalPath + "/" + project.idea_sandbox
    } else {
        sandboxDirectory project.rootDir.canonicalPath + "/.sandbox"
    }
    if (project.hasProperty('idea_path')) {
        alternativeIdePath = project.idea_path
    }
    updateSinceUntilBuild = true
}

runIdea{
    if( project.hasProperty("nocancel")){
        systemProperty("idea.ProcessCanceledException", "disabled")
    }
}

test {
    systemProperty("idea.plugins.path", project.rootDir.canonicalPath + "/.test-plugins")

    useJUnit {
        if (project.hasProperty("runtest")) {
            include '**/' + project.property('runtest') + '.class'
        } else {
            if (project.hasProperty("perf")) {
                includeCategories 'categories.Performance'
            } else {
                excludeCategories 'categories.Performance'
            }
        }
    }
    testLogging {
        exceptionFormat = 'full'
        showStandardStreams = true
    }
}

repositories {
    mavenCentral()
}

dependencies {
    testCompile 'junit:junit:4.+'
}

project.afterEvaluate {
    prepareSandbox.doLast {
        def perlUtils = "$it.destinationDir/$intellij.pluginName/perl/"
        def XSParser = file("perl-utils/xs_parser_simple.pl")
        copy {
            from XSParser
            into perlUtils
        }
    }
}

apply plugin: 'idea'
idea {
    project {
        jdkName = javaVersion
        languageLevel = javaVersion
    }
    module {
        generatedSourceDirs += genRoot
    }
}

apply plugin: 'org.jetbrains.grammarkit'

grammarKit {
    jflexRelease = jflex_version
    grammarKitRelease = grammarkit_version
}

task generatePerl5Parser(type: GenerateParser) {
    source = "grammar/Perl5.bnf"
    pathToParser = '/com/perl5/lang/perl/parser/PerlParserGenerated.java'
    pathToPsiRoot = '/com/perl5/lang/perl/psi'
}

task generatePodParser(type: GenerateParser) {
    source = "grammar/Pod.bnf"
    pathToParser = '/com/perl5/lang/pod/parser/PodParserGenerated.java'
    pathToPsiRoot = '/com/perl5/lang/pod/psi'
}

task generateTT2Parser(type: GenerateParser) {
    source = "grammar/TemplateToolkit.bnf"
    pathToParser = '/com/perl5/lang/tt2/parser/TemplateToolkitParserGenerated.java'
    pathToPsiRoot = '/com/perl5/lang/tt2/psi'
}


task generatePerlLexer(type: GenerateLexer) {
    dependsOn generatePerl5Parser
    source = "grammar/Perl.flex"
    targetDir = "gen/com/perl5/lang/perl/lexer/"
    targetClass = "PerlLexer"
}

task generatePodLexer(type: GenerateLexer) {
    dependsOn generatePodParser
    source = "grammar/Pod.flex"
    targetDir = "gen/com/perl5/lang/pod/lexer/"
    targetClass = "PodLexerGenerated"
}

task generateTT2Lexer(type: GenerateLexer) {
    dependsOn generateTT2Parser
    source = "grammar/TemplateToolkit.flex"
    targetDir = "gen/com/perl5/lang/tt2/lexer/"
    targetClass = "TemplateToolkitLexerGenerated"
}


task generateEmbeddedPerlLexer(type: GenerateLexer) {
    dependsOn generatePerl5Parser
    source = "grammar/EmbeddedPerl.flex"
    targetDir = "gen/com/perl5/lang/embedded/lexer/"
    targetClass = "EmbeddedPerlLexer"
}

task generateHTMLMasonLexer(type: GenerateLexer) {
    dependsOn generatePerl5Parser
    source = "grammar/HTMLMason.flex"
    targetDir = "gen/com/perl5/lang/htmlmason/lexer/"
    targetClass = "HTMLMasonLexer"
}
task generateMason2Lexer(type: GenerateLexer) {
    dependsOn generatePerl5Parser
    source = "grammar/Mason2.flex"
    targetDir = "gen/com/perl5/lang/mason2/lexer/"
    targetClass = "Mason2TemplatingLexer"
}
task generateMojoliciousLexer(type: GenerateLexer) {
    dependsOn generatePerl5Parser
    source = "grammar/Mojolicious.flex"
    targetDir = "gen/com/perl5/lang/mojolicious/lexer/"
    targetClass = "MojoliciousLexer"
}

tasks.withType(GenerateLexer).each {
    it.skeleton = lexer_skeleton
    it.purgeOldFiles = true
}

tasks.withType(GenerateParser).each {
    it.targetRoot = genRoot
    it.purgeOldFiles = true
}


task generateLexers {
    dependsOn generatePerlLexer
    dependsOn generatePodLexer
    dependsOn generateTT2Lexer

    dependsOn generateEmbeddedPerlLexer
    dependsOn generateHTMLMasonLexer
    dependsOn generateMason2Lexer
    dependsOn generateMojoliciousLexer

}

// doesn't work
jar.archiveName = "camelcade.jar"


compileJava {
    dependsOn generateLexers
}




