/*
 * Copyright 2016 Alexandr Evstigneev
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {
    repositories {
        maven { url 'http://dl.bintray.com/jetbrains/intellij-plugin-service' }
    }
}

plugins {
    id "org.jetbrains.intellij" version "0.3.12"
    id "jacoco"
    id 'com.github.kt3k.coveralls' version '2.8.2'
    id 'org.jetbrains.grammarkit' version '2018.2.2'
}

repositories {
    mavenCentral()
}


allprojects{
    apply plugin: 'java'
    sourceCompatibility = javaVersion
    targetCompatibility = javaTargetVersion
    tasks.withType(JavaCompile) { options.encoding = 'UTF-8' }

    apply plugin: 'org.jetbrains.intellij'
    version = "${pluginVersion}${platformBranch}${pluginBuild}"

    intellij{
        version "${platformVersion}${platformBranch}${platformBuild}"
        updateSinceUntilBuild = true

        if (project.hasProperty('idea_sandbox')) {
            sandboxDirectory "${project.buildDir}/${project.idea_sandbox}"
        }
    }

    test{
        useJUnit {
            if (project.hasProperty("runtest")) {
                include '**/' + project.property('runtest') + '.class'
            } else {
                if (project.hasProperty("perf")) {
                    includeCategories 'categories.Performance'
                } else {
                    excludeCategories 'categories.Performance'
                }
            }
        }
    }

    publishPlugin{
        username=jbRepoUser
        password=jbRepoPass
    }
}

subprojects{
    patchPluginXml{
        inputs.files(descriptionFile, changesFile)
        pluginDescription(file(descriptionFile).text)
        changeNotes(file(changesFile).text)
    }
}

apply plugin: 'idea'
idea {
    project {
        jdkName = javaVersion
        languageLevel = javaVersion
    }
}
jacocoTestReport {
    reports {
        xml.enabled true
    }
}

intellij {
    type 'IU'
    downloadSources Boolean.valueOf(downloadIdeaSource)
    if (project.hasProperty('idea_path')) {
        alternativeIdePath = project.idea_path
    }
    plugins = ['PsiViewer:183.2153', 'IntelliLang', 'coverage', 'Docker', 'remote-run', // would be nice to have transient plugins
               project(':perl5.core'),
               project(':perl5.transport.docker'),
               project(':perl5.transport.wsl'),
               project(':perl5.lang.tt2'),
               project(':perl5.lang.mojo'),
               project(':perl5.lang.embedded'),
               project(':perl5.lang.mason.framework'),
               project(':perl5.lang.mason.htmlmason'),
               project(':perl5.lang.mason.mason2'),
    ]
}

runIde{
    if( project.hasProperty("nocancel")){
        systemProperty("idea.ProcessCanceledException", "disabled")
    }
    if( project.hasProperty("traverseUI")){
        args("traverseUI", "$project.rootDir.canonicalPath/resources/search/searchableOptions.xml")
    }
}

test {
    systemProperty("idea.plugins.path", project.rootDir.canonicalPath + "/.test-plugins")

    if (!System.getenv("WITH_COVERAGE") && !project.hasProperty("with_coverage")) {
        jacoco {
            enabled = false
        }
    }
    testLogging {
        exceptionFormat = 'full'
        showStandardStreams = true
    }
}

sourceSets {
    test {
        resources.srcDirs file('testData')
    }
}
