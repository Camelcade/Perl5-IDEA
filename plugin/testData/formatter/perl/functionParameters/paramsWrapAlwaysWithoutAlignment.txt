#   Empty   signature
fun something() {}
fun() {};
method something() {}
method() {};
override something() {}
after something() {}
before something() {}
around something() {}
augment something() {}

#   Simple code
fun something() {say 'hi';}
fun() {say 'hi';};
method something() {say 'hi';}
method() {say 'hi';};
override something() {say 'hi';}
after something() {say 'hi';}
before something() {say 'hi';}
around something() {say 'hi';}
augment something() {say 'hi';}

#   Complex code
fun something() {
    say 'hi';
    say 'hi';
}
fun() {
    say 'hi';
    say 'hi';
};
method something() {
    say 'hi';
    say 'hi';
}
method() {
    say 'hi';
    say 'hi';
};
override something() {
    say 'hi';
    say 'hi';
}
after something() {
    say 'hi';
    say 'hi';
}
before something() {
    say 'hi';
    say 'hi';
}
around something() {
    say 'hi';
    say 'hi';
}
augment something() {
    say 'hi';
    say 'hi';
}

#   Empty   with   attrs
fun something() :some thing {}
fun() :some thing {};
method something() :some thing {}
method() :some thing {};
override something() :some thing {}
after something() :some thing {}
before something() :some thing {}
around something() :some thing {}
augment something() :some thing {}

#   Empty   with   colon   attrs
fun something() :some :thing {}
fun() :some :thing {};
method something() :some :thing {}
method() :some :thing {};
override something() :some :thing {}
after something() :some :thing {}
before something() :some :thing {}
around something() :some :thing {}
augment something() :some :thing {}

#   Invocant   only
method something($class:) {}
method($class:) {};
override something($class:) {}
after something($class:) {}
before something($class:) {}
around something($orig, $class:) {}
augment something($class:) {}

#   Invocant   +   variable
method something($class:
        $var) {}
method($class:
        $var) {};
override something($class:
        $var) {}
after something($class:
        $var) {}
before something($class:
        $var) {}
around something($orig, $class:
        $var) {}
augment something($class:
        $var) {}

#   Invocant   +   named   variable
method something($class:
        :$var) {}
method($class:
        :$var) {};
override something($class:
        :$var) {}
after something($class:
        :$var) {}
before something($class:
        :$var) {}
around something($orig, $class:
        :$var) {}
augment something($class:
        :$var) {}

#   Invocant   +   ignored
method something($class:
        $) {}
method($class:
        @) {};
override something($class:
        $) {}
after something($class:
        $) {}
before something($class:
        $) {}
around something($orig, $class:
        $) {}
augment something($class:
        $) {}

#   Variable   only
fun something($somevar) {}
fun($somevar) {};
method something($somevar) {}
method($somevar) {};
override something($somevar) {}
after something($somevar) {}
before something($somevar) {}
around something($somevar) {}
augment something($somevar) {}

#   Named   only
fun something(:$somevar) {}
fun(:$somevar) {};
method something(:$somevar) {}
method(:$somevar) {};
override something(:$somevar) {}
after something(:$somevar) {}
before something(:$somevar) {}
around something(:$somevar) {}
augment something(:$somevar) {}

#   Ignored   only
fun something($) {}
fun($) {};
method something($) {}
method(@) {};
override something(@) {}
after something(@) {}
before something(@) {}
around something($) {}
augment something($) {}

#   Variable   with   empty   default
fun something($some =) {}
fun($some =) {};
method something($some =) {}
method($some =) {};
override something($some =) {}
after something($some =) {}
before something($some =) {}
around something($some =) {}
augment something($some =) {}

#   Named   with   empty   default
fun something(:$some =) {}
fun(:$some =) {};
method something(:$some =) {}
method(:$some =) {};
override something(:$some =) {}
after something(:$some =) {}
before something(:$some =) {}
around something(:$some =) {}
augment something(:$some =) {}

#   Variable   with   default
fun something($some = somecall(42 + 'sparta')) {}
fun($some = somecall(42 + 'sparta')) {};
method something($some = somecall(42 + 'sparta')) {}
method($some = somecall(42 + 'sparta')) {};
override something($some = somecall(42 + 'sparta')) {}
after something($some = somecall(42 + 'sparta')) {}
before something($some = somecall(42 + 'sparta')) {}
around something($some = somecall(42 + 'sparta')) {}
augment something($some = somecall(42 + 'sparta')) {}

#   Named   with   default
fun something(:$some = somecall(42 + 'sparta')) {}
fun(:$some = somecall(42 + 'sparta')) {};
method something(:$some = somecall(42 + 'sparta')) {}
method(:$some = somecall(42 + 'sparta')) {};
override something(:$some = somecall(42 + 'sparta')) {}
after something(:$some = somecall(42 + 'sparta')) {}
before something(:$some = somecall(42 + 'sparta')) {}
around something(:$some = somecall(42 + 'sparta')) {}
augment something(:$some = somecall(42 + 'sparta')) {}

#   Mixed   cases
fun something($var,
        $othervar,
        :$namedvar,
        :@namedarray,
        $,
        @) :some stuff {}
fun($var,
        $othervar,
        :$namedvar,
        :@namedarray,
        $,
        @) :some stuff {};
fun something(:$var,
        $othervar,
        :$namedvar,
        :@namedarray,
        $,
        @) :some stuff {}
fun(:$var,
        $othervar,
        :$namedvar,
        :@namedarray,
        $,
        @) :some stuff {};
method something($someself:
        $var,
        $othervar,
        :$namedvar,
        :@namedarray,
        $,
        @) :some stuff {}
method something($someself:
        :$var,
        $othervar,
        :$namedvar,
        :@namedarray,
        $,
        @) :some stuff {}
method($someself:
        $var,
        $othervar,
        :$namedvar,
        :@namedarray,
        $,
        @) :some stuff {};
method($someself:
        :$var,
        $othervar,
        :$namedvar,
        :@namedarray,
        $,
        @) :some stuff {};
override something($someself:
        $var,
        $othervar,
        :$namedvar,
        :@namedarray,
        $,
        @) :some stuff {}
override something($someself:
        :$var,
        $othervar,
        :$namedvar,
        :@namedarray,
        $,
        @) :some stuff {}
after something($someself:
        :$var,
        $othervar,
        :$namedvar,
        :@namedarray,
        $,
        @) :some stuff {}
before something($someself:
        :$var,
        $othervar,
        :$namedvar,
        :@namedarray,
        $,
        @) :some stuff {}
augment something($someself:
        :$var,
        $othervar,
        :$namedvar,
        :@namedarray,
        $,
        @) :some stuff {}
after something($someself:
        $var,
        $othervar,
        :$namedvar,
        :@namedarray,
        $,
        @) :some stuff {}
before something($someself:
        $var,
        $othervar,
        :$namedvar,
        :@namedarray,
        $,
        @) :some stuff {}
augment something($someself:
        $var,
        $othervar,
        :$namedvar,
        :@namedarray,
        $,
        @) :some stuff {}
around something($originals, $someself:
        :$var,
        $othervar,
        :$namedvar,
        :@namedarray,
        $,
        @) :some stuff {}
around something($originals, $someself:
        $var,
        $othervar,
        :$namedvar,
        :@namedarray,
        $,
        @) :some stuff {}
around something(:$var,
        $othervar,
        :$namedvar,
        :@namedarray,
        $,
        @) :some stuff {}
around something($var,
        $othervar,
        :$namedvar,
        :@namedarray,
        $,
        @) :some stuff {}

#   Mixed   cases with params and attrs on the new line
fun something(
        $var,
        $othervar,
        :$namedvar,
        :@namedarray,
        $,
        @)
        :some stuff {}
fun(
        $var,
        $othervar,
        :$namedvar,
        :@namedarray,
        $,
        @)
        :some stuff {};
method something(
        $someself:
        $var,
        $othervar,
        :$namedvar,
        :@namedarray,
        $,
        @)
        :some stuff {}
method(
        $someself:
        $var,
        $othervar,
        :$namedvar,
        :@namedarray,
        $,
        @)
        :some stuff {};
override something(
        $someself:
        $var,
        $othervar,
        :$namedvar,
        :@namedarray,
        $,
        @)
        :some stuff {}
after something(
        $someself:
        :$var,
        $othervar,
        :$namedvar,
        :@namedarray,
        $,
        @)
        :some stuff {}
before something(
        $someself:
        :$var,
        $othervar,
        :$namedvar,
        :@namedarray,
        $,
        @)
        :some stuff {}
augment something(
        $someself:
        :$var,
        $othervar,
        :$namedvar,
        :@namedarray,
        $,
        @)
        :some stuff {}
around something(
        $var,
        $othervar,
        :$namedvar,
        :@namedarray,
        $,
        @)
        :some stuff {}

# Sub cases
sub somesub($var1,
        $var2 = 123,
        $var4,
        $) :one two three {
    say 'hi';
    say 'hi';
}

sub(
        $var1,
        $var2 = 123,
        $var4,
        $)
        :one
        two
        three {
    say 'hi';
    say 'hi';
};
sub($var1,
        $var2 = 123,
        $var4,
        $) :one two three {
    say 'hi';
    say 'hi';
};

sub(
        $var1,
        $var2 = 123,
        $var4,
        $)
        :one
        two
        three {
    say 'hi';
    say 'hi';
};

# Assignments alignment
sub something($var1 = 123,
        $varvar2 = 42,
        $varvarvar3 = 69) {
}
sub($var1 = 123,
        $varvar2 = 42,
        $varvarvar3 = 69) {
};

method something($var1 = 123,
        $varvar2 = 42,
        $varvarvar3 = 69) {
}
method($var1 = 123,
        $varvar2 = 42,
        $varvarvar3 = 69) {
};

fun something($var1 = 123,
        $varvar2 = 42,
        $varvarvar3 = 69) {
}
fun($var1 = 123,
        $varvar2 = 42,
        $varvarvar3 = 69) {
};

after something($var1 = 123,
        $varvar2 = 42,
        $varvarvar3 = 69) {
}
before something($var1 = 123,
        $varvar2 = 42,
        $varvarvar3 = 69) {
}
around something($var1 = 123,
        $varvar2 = 42,
        $varvarvar3 = 69) {
}
augment something($var1 = 123,
        $varvar2 = 42,
        $varvarvar3 = 69) {
}

