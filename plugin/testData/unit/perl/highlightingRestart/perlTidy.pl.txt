File size: 1134567
Re-highlighted ranges: 63389
Avg range size: 17.898294656801653
Min range size: 1
Max range size: 29378
10% of text has range <= 9
20% of text has range <= 17
30% of text has range <= 23
40% of text has range <= 31
50% of text has range <= 42
60% of text has range <= 52
70% of text has range <= 61
80% of text has range <= 71
90% of text has range <= 175
----------
Range: (4832,5116) (284)
confess␣<<EOM;
------------------------------------------------------------------------
No␣'getline'␣method␣is␣defined␣for␣object␣of␣class␣$ref
Please␣check␣your␣call␣to␣Perl::Tidy::perltidy.␣␣Trace␣follows.
------------------------------------------------------------------------
EOM
----------
Range: (5630,5911) (281)
confess␣<<EOM;
------------------------------------------------------------------------
No␣'print'␣method␣is␣defined␣for␣object␣of␣class␣$ref
Please␣check␣your␣call␣to␣Perl::Tidy::perltidy.␣Trace␣follows.
------------------------------------------------------------------------
EOM
----------
Range: (9712,10350) (638)
argv␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣=>␣undef,
␣␣␣␣␣␣␣␣destination␣␣␣␣␣␣␣␣␣␣␣=>␣undef,
␣␣␣␣␣␣␣␣formatter␣␣␣␣␣␣␣␣␣␣␣␣␣=>␣undef,
␣␣␣␣␣␣␣␣logfile␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣=>␣undef,
␣␣␣␣␣␣␣␣errorfile␣␣␣␣␣␣␣␣␣␣␣␣␣=>␣undef,
␣␣␣␣␣␣␣␣perltidyrc␣␣␣␣␣␣␣␣␣␣␣␣=>␣undef,
␣␣␣␣␣␣␣␣source␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣=>␣undef,
␣␣␣␣␣␣␣␣stderr␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣=>␣undef,
␣␣␣␣␣␣␣␣dump_options␣␣␣␣␣␣␣␣␣␣=>␣undef,
␣␣␣␣␣␣␣␣dump_options_type␣␣␣␣␣=>␣undef,
␣␣␣␣␣␣␣␣dump_getopt_flags␣␣␣␣␣=>␣undef,
␣␣␣␣␣␣␣␣dump_options_category␣=>␣undef,
␣␣␣␣␣␣␣␣dump_options_range␣␣␣␣=>␣undef,
␣␣␣␣␣␣␣␣dump_abbreviations␣␣␣␣=>␣undef,
␣␣␣␣␣␣␣␣prefilter␣␣␣␣␣␣␣␣␣␣␣␣␣=>␣undef,
␣␣␣␣␣␣␣␣postfilter␣␣␣␣␣␣␣␣␣␣␣␣=>␣undef,
␣␣␣␣);
----------
Range: (10660,10907) (247)
confess␣<<EOM;
------------------------------------------------------------------------
Unknown␣perltidy␣parameter␣:␣(@bad_keys)
perltidy␣only␣understands␣:␣(@good_keys)
------------------------------------------------------------------------

EOM
----------
Range: (11260,11489) (229)
croak␣<<EOM;
------------------------------------------------------------------------
error␣in␣call␣to␣perltidy:
-$key␣must␣be␣reference␣to␣HASH␣$but_is
------------------------------------------------------------------------
EOM
----------
Range: (12304,12560) (256)
croak␣<<EOM;
------------------------------------------------------------------------
Unable␣to␣redirect␣STDERR␣to␣$stderr_stream
Please␣check␣value␣of␣-stderr␣in␣call␣to␣perltidy
------------------------------------------------------------------------
EOM
----------
Range: (13538,13822) (284)
croak␣<<EOM;
------------------------------------------------------------------------
Please␣check␣value␣of␣-dump_options_type␣in␣call␣to␣perltidy;
saw:␣'$dump_options_type'
expecting:␣'perltidyrc'␣or␣'full'
------------------------------------------------------------------------
EOM
----------
Range: (14439,14701) (262)
croak␣<<EOM;
------------------------------------------------------------------------
Please␣check␣value␣of␣-argv␣in␣call␣to␣perltidy;
it␣must␣be␣a␣string␣or␣ref␣to␣ARRAY␣but␣is:␣$rargv
------------------------------------------------------------------------
EOM
----------
Range: (27066,27297) (231)
Die␣<<EOM;
------------------------------------------------------------------------
Problem␣combining␣$new_path␣and␣$base␣to␣make␣a␣filename;␣check␣-opath
------------------------------------------------------------------------
EOM
----------
Range: (37950,38125) (175)
logger_object␣␣␣␣␣␣=>␣$logger_object,
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣diagnostics_object␣=>␣$diagnostics_object,
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣sink_object␣␣␣␣␣␣␣␣=>␣$sink_object,
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣);
----------
Range: (38730,39652) (922)
source_object␣␣␣␣␣␣=>␣$source_object,
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣logger_object␣␣␣␣␣␣=>␣$logger_object,
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣debugger_object␣␣␣␣=>␣$debugger_object,
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣diagnostics_object␣=>␣$diagnostics_object,
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣tabsize␣␣␣␣␣␣␣␣␣␣␣␣=>␣$tabsize,

␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣starting_level␣␣␣␣␣␣=>␣$rOpts->{'starting-indentation-level'},
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣indent_columns␣␣␣␣␣␣=>␣$rOpts->{'indent-columns'},
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣look_for_hash_bang␣␣=>␣$rOpts->{'look-for-hash-bang'},
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣look_for_autoloader␣=>␣$rOpts->{'look-for-autoloader'},
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣look_for_selfloader␣=>␣$rOpts->{'look-for-selfloader'},
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣trim_qw␣␣␣␣␣␣␣␣␣␣␣␣␣=>␣$rOpts->{'trim-qw'},
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣extended_syntax␣␣␣␣␣=>␣$rOpts->{'extended-syntax'},

␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣continuation_indentation␣=>
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣$rOpts->{'continuation-indentation'},
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣outdent_labels␣=>␣$rOpts->{'outdent-labels'},
␣␣␣␣␣␣␣␣␣␣␣␣);
----------
Range: (55180,55668) (488)
'0.␣I/O␣control',
␣␣␣␣␣␣␣␣'1.␣Basic␣formatting␣options',
␣␣␣␣␣␣␣␣'2.␣Code␣indentation␣control',
␣␣␣␣␣␣␣␣'3.␣Whitespace␣control',
␣␣␣␣␣␣␣␣'4.␣Comment␣controls',
␣␣␣␣␣␣␣␣'5.␣Linebreak␣controls',
␣␣␣␣␣␣␣␣'6.␣Controlling␣list␣formatting',
␣␣␣␣␣␣␣␣'7.␣Retaining␣or␣ignoring␣existing␣line␣breaks',
␣␣␣␣␣␣␣␣'8.␣Blank␣line␣control',
␣␣␣␣␣␣␣␣'9.␣Other␣controls',
␣␣␣␣␣␣␣␣'10.␣HTML␣options',
␣␣␣␣␣␣␣␣'11.␣pod2html␣options',
␣␣␣␣␣␣␣␣'12.␣Controlling␣HTML␣properties',
␣␣␣␣␣␣␣␣'13.␣Debugging',
␣␣␣␣);
----------
Range: (74333,76536) (2203)
my␣@defaults␣=␣qw(
␣␣␣␣␣␣add-newlines
␣␣␣␣␣␣add-semicolons
␣␣␣␣␣␣add-whitespace
␣␣␣␣␣␣blanks-before-blocks
␣␣␣␣␣␣blanks-before-comments
␣␣␣␣␣␣blank-lines-before-subs=1
␣␣␣␣␣␣blank-lines-before-packages=1
␣␣␣␣␣␣block-brace-tightness=0
␣␣␣␣␣␣block-brace-vertical-tightness=0
␣␣␣␣␣␣brace-tightness=1
␣␣␣␣␣␣brace-vertical-tightness-closing=0
␣␣␣␣␣␣brace-vertical-tightness=0
␣␣␣␣␣␣break-at-old-logical-breakpoints
␣␣␣␣␣␣break-at-old-ternary-breakpoints
␣␣␣␣␣␣break-at-old-attribute-breakpoints
␣␣␣␣␣␣break-at-old-keyword-breakpoints
␣␣␣␣␣␣comma-arrow-breakpoints=5
␣␣␣␣␣␣nocheck-syntax
␣␣␣␣␣␣closing-side-comment-interval=6
␣␣␣␣␣␣closing-side-comment-maximum-text=20
␣␣␣␣␣␣closing-side-comment-else-flag=0
␣␣␣␣␣␣closing-side-comments-balanced
␣␣␣␣␣␣closing-paren-indentation=0
␣␣␣␣␣␣closing-brace-indentation=0
␣␣␣␣␣␣closing-square-bracket-indentation=0
␣␣␣␣␣␣continuation-indentation=2
␣␣␣␣␣␣delete-old-newlines
␣␣␣␣␣␣delete-semicolons
␣␣␣␣␣␣extended-syntax
␣␣␣␣␣␣fuzzy-line-length
␣␣␣␣␣␣hanging-side-comments
␣␣␣␣␣␣indent-block-comments
␣␣␣␣␣␣indent-columns=4
␣␣␣␣␣␣iterations=1
␣␣␣␣␣␣keep-old-blank-lines=1
␣␣␣␣␣␣long-block-line-count=8
␣␣␣␣␣␣look-for-autoloader
␣␣␣␣␣␣look-for-selfloader
␣␣␣␣␣␣maximum-consecutive-blank-lines=1
␣␣␣␣␣␣maximum-fields-per-table=0
␣␣␣␣␣␣maximum-line-length=80
␣␣␣␣␣␣memoize
␣␣␣␣␣␣minimum-space-to-comment=4
␣␣␣␣␣␣nobrace-left-and-indent
␣␣␣␣␣␣nocuddled-else
␣␣␣␣␣␣nodelete-old-whitespace
␣␣␣␣␣␣nohtml
␣␣␣␣␣␣nologfile
␣␣␣␣␣␣noquiet
␣␣␣␣␣␣noshow-options
␣␣␣␣␣␣nostatic-side-comments
␣␣␣␣␣␣notabs
␣␣␣␣␣␣nowarning-output
␣␣␣␣␣␣character-encoding=none
␣␣␣␣␣␣outdent-labels
␣␣␣␣␣␣outdent-long-quotes
␣␣␣␣␣␣outdent-long-comments
␣␣␣␣␣␣paren-tightness=1
␣␣␣␣␣␣paren-vertical-tightness-closing=0
␣␣␣␣␣␣paren-vertical-tightness=0
␣␣␣␣␣␣pass-version-line
␣␣␣␣␣␣recombine
␣␣␣␣␣␣valign
␣␣␣␣␣␣short-concatenation-item-length=8
␣␣␣␣␣␣space-for-semicolon
␣␣␣␣␣␣square-bracket-tightness=1
␣␣␣␣␣␣square-bracket-vertical-tightness-closing=0
␣␣␣␣␣␣square-bracket-vertical-tightness=0
␣␣␣␣␣␣static-block-comments
␣␣␣␣␣␣trim-qw
␣␣␣␣␣␣format=tidy
␣␣␣␣␣␣backup-file-extension=bak
␣␣␣␣␣␣format-skipping
␣␣␣␣␣␣default-tabsize=8

␣␣␣␣␣␣pod2html
␣␣␣␣␣␣html-table-of-contents
␣␣␣␣␣␣html-entities
␣␣␣␣);
----------
Range: (82184,82607) (423)
qw(it=1)],

␣␣␣␣␣␣␣␣#␣'mangle'␣originally␣deleted␣pod␣and␣comments,␣but␣to␣keep␣it
␣␣␣␣␣␣␣␣#␣reversible,␣it␣no␣longer␣does.␣␣But␣if␣you␣really␣want␣to
␣␣␣␣␣␣␣␣#␣delete␣them,␣just␣use:
␣␣␣␣␣␣␣␣#␣␣␣-mangle␣-dac

␣␣␣␣␣␣␣␣#␣An␣interesting␣use␣for␣'mangle'␣is␣to␣do␣this:
␣␣␣␣␣␣␣␣#␣␣␣␣perltidy␣-mangle␣myfile.pl␣-st␣|␣perltidy␣-o␣myfile.pl.new
␣␣␣␣␣␣␣␣#␣which␣will␣form␣as␣many␣one-line␣blocks␣as␣possible

␣␣␣␣␣␣␣␣'mangle'␣=>␣[
----------
Range: (82620,83583) (963)
qw(
␣␣␣␣␣␣␣␣␣␣␣␣␣␣check-syntax
␣␣␣␣␣␣␣␣␣␣␣␣␣␣keep-old-blank-lines=0
␣␣␣␣␣␣␣␣␣␣␣␣␣␣delete-old-newlines
␣␣␣␣␣␣␣␣␣␣␣␣␣␣delete-old-whitespace
␣␣␣␣␣␣␣␣␣␣␣␣␣␣delete-semicolons
␣␣␣␣␣␣␣␣␣␣␣␣␣␣indent-columns=0
␣␣␣␣␣␣␣␣␣␣␣␣␣␣maximum-consecutive-blank-lines=0
␣␣␣␣␣␣␣␣␣␣␣␣␣␣maximum-line-length=100000
␣␣␣␣␣␣␣␣␣␣␣␣␣␣noadd-newlines
␣␣␣␣␣␣␣␣␣␣␣␣␣␣noadd-semicolons
␣␣␣␣␣␣␣␣␣␣␣␣␣␣noadd-whitespace
␣␣␣␣␣␣␣␣␣␣␣␣␣␣noblanks-before-blocks
␣␣␣␣␣␣␣␣␣␣␣␣␣␣blank-lines-before-subs=0
␣␣␣␣␣␣␣␣␣␣␣␣␣␣blank-lines-before-packages=0
␣␣␣␣␣␣␣␣␣␣␣␣␣␣notabs
␣␣␣␣␣␣␣␣␣␣␣␣␣␣)
␣␣␣␣␣␣␣␣],

␣␣␣␣␣␣␣␣#␣'extrude'␣originally␣deleted␣pod␣and␣comments,␣but␣to␣keep␣it
␣␣␣␣␣␣␣␣#␣reversible,␣it␣no␣longer␣does.␣␣But␣if␣you␣really␣want␣to
␣␣␣␣␣␣␣␣#␣delete␣them,␣just␣use
␣␣␣␣␣␣␣␣#␣␣␣extrude␣-dac
␣␣␣␣␣␣␣␣#
␣␣␣␣␣␣␣␣#␣An␣interesting␣use␣for␣'extrude'␣is␣to␣do␣this:
␣␣␣␣␣␣␣␣#␣␣␣␣perltidy␣-extrude␣myfile.pl␣-st␣|␣perltidy␣-o␣myfile.pl.new
␣␣␣␣␣␣␣␣#␣which␣will␣break␣up␣all␣one-line␣blocks.

␣␣␣␣␣␣␣␣'extrude'␣=>␣[
----------
Range: (83596,84346) (750)
qw(
␣␣␣␣␣␣␣␣␣␣␣␣␣␣check-syntax
␣␣␣␣␣␣␣␣␣␣␣␣␣␣ci=0
␣␣␣␣␣␣␣␣␣␣␣␣␣␣delete-old-newlines
␣␣␣␣␣␣␣␣␣␣␣␣␣␣delete-old-whitespace
␣␣␣␣␣␣␣␣␣␣␣␣␣␣delete-semicolons
␣␣␣␣␣␣␣␣␣␣␣␣␣␣indent-columns=0
␣␣␣␣␣␣␣␣␣␣␣␣␣␣maximum-consecutive-blank-lines=0
␣␣␣␣␣␣␣␣␣␣␣␣␣␣maximum-line-length=1
␣␣␣␣␣␣␣␣␣␣␣␣␣␣noadd-semicolons
␣␣␣␣␣␣␣␣␣␣␣␣␣␣noadd-whitespace
␣␣␣␣␣␣␣␣␣␣␣␣␣␣noblanks-before-blocks
␣␣␣␣␣␣␣␣␣␣␣␣␣␣blank-lines-before-subs=0
␣␣␣␣␣␣␣␣␣␣␣␣␣␣blank-lines-before-packages=0
␣␣␣␣␣␣␣␣␣␣␣␣␣␣nofuzzy-line-length
␣␣␣␣␣␣␣␣␣␣␣␣␣␣notabs
␣␣␣␣␣␣␣␣␣␣␣␣␣␣norecombine
␣␣␣␣␣␣␣␣␣␣␣␣␣␣)
␣␣␣␣␣␣␣␣],

␣␣␣␣␣␣␣␣#␣this␣style␣tries␣to␣follow␣the␣GNU␣Coding␣Standards␣(which␣do
␣␣␣␣␣␣␣␣#␣not␣really␣apply␣to␣perl␣but␣which␣are␣followed␣by␣some␣perl
␣␣␣␣␣␣␣␣#␣programmers).
␣␣␣␣␣␣␣␣'gnu-style'␣=>␣[
----------
Range: (84359,84550) (191)
qw(
␣␣␣␣␣␣␣␣␣␣␣␣␣␣lp␣bl␣noll␣pt=2␣bt=2␣sbt=2␣cpi=1␣csbi=1␣cbi=1
␣␣␣␣␣␣␣␣␣␣␣␣␣␣)
␣␣␣␣␣␣␣␣],

␣␣␣␣␣␣␣␣#␣Style␣suggested␣in␣Damian␣Conway's␣Perl␣Best␣Practices
␣␣␣␣␣␣␣␣'perl-best-practices'␣=>␣[
----------
Range: (84563,84796) (233)
qw(l=78␣i=4␣ci=4␣st␣se␣vt=2␣cti=0␣pt=1␣bt=1␣sbt=1␣bbt=1␣nsfs␣nolq),
q(wbb=%␣+␣-␣*␣/␣x␣!=␣==␣>=␣<=␣=~␣!~␣<␣>␣|␣&␣=␣**=␣+=␣*=␣&=␣<<=␣&&=␣-=␣/=␣|=␣>>=␣||=␣//=␣.=␣%=␣^=␣x=)
␣␣␣␣␣␣␣␣],

␣␣␣␣␣␣␣␣#␣Additional␣styles␣can␣be␣added␣here
␣␣␣␣);
----------
Range: (90847,91045) (198)
Warn␣<<EOM;
␣Conflict:␣a␣perltidyrc␣configuration␣file␣was␣specified␣both␣as␣this
␣perltidy␣call␣parameter:␣$perltidyrc_stream
␣and␣with␣this␣-profile=$config_file.
␣Using␣-profile=$config_file.
EOM
----------
Range: (93431,93640) (209)
}
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣}
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣Die␣<<EOM;
There␣are␣$count␣unrecognized␣values␣in␣the␣configuration␣file␣'$config_file':
$str
Use␣leading␣dashes␣for␣parameters.␣␣Use␣-npro␣to␣ignore␣this␣file.
EOM
----------
Range: (93916,94356) (440)
qw{
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣dump-defaults
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣dump-long-names
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣dump-options
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣dump-profile
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣dump-short-names
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣dump-token-types
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣dump-want-left-space
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣dump-want-right-space
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣help
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣stylesheet
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣version
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣}
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣)
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣{
----------
Range: (106321,106665) (344)
<<EOM;
List␣of␣short␣names.␣␣This␣list␣shows␣how␣all␣abbreviations␣are
translated␣into␣other␣abbreviations␣and,␣eventually,␣into␣long␣names.
New␣abbreviations␣may␣be␣defined␣in␣a␣.perltidyrc␣file.
For␣a␣list␣of␣all␣long␣names,␣use␣perltidy␣--dump-long-names␣(-dln).
--------------------------------------------------------------------------
EOM
----------
Range: (107230,107628) (398)
s/(␣␣␣␣␣␣␣␣␣␣#␣begin␣capture␣$1
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣(?:^|[^^])\.␣#␣match␣a␣dot␣not␣preceded␣by␣a␣caret
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣(?:␣␣␣␣␣␣␣␣␣␣#␣followed␣by␣nothing
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣|␣␣␣␣␣␣␣␣␣␣#␣or
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣.*[^^]␣␣␣␣␣#␣anything␣ending␣in␣a␣non␣caret
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣)
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣)␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣end␣capture␣$1
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣\.-?\d*$␣␣␣␣␣␣␣#␣match␣.␣version␣number
␣␣␣␣␣␣␣␣␣␣␣␣␣␣/$1/x;
----------
Range: (109203,109613) (410)
$os␣=␣{␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣Magic␣numbers␣from␣MSDN
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣documentation␣of␣GetOSVersion
␣␣␣␣␣␣␣␣1␣=>␣{
␣␣␣␣␣␣␣␣␣␣␣␣0␣␣=>␣"95",
␣␣␣␣␣␣␣␣␣␣␣␣10␣=>␣"98",
␣␣␣␣␣␣␣␣␣␣␣␣90␣=>␣"Me"
␣␣␣␣␣␣␣␣},
␣␣␣␣␣␣␣␣2␣=>␣{
␣␣␣␣␣␣␣␣␣␣␣␣0␣␣=>␣"2000",␣␣␣␣␣␣␣␣␣␣#␣or␣NT␣4,␣see␣below
␣␣␣␣␣␣␣␣␣␣␣␣1␣␣=>␣"XP/.Net",
␣␣␣␣␣␣␣␣␣␣␣␣2␣␣=>␣"Win2003",
␣␣␣␣␣␣␣␣␣␣␣␣51␣=>␣"NT3.51"
␣␣␣␣␣␣␣␣}
␣␣␣␣}->{$id}->{$minor};
----------
Range: (120299,120504) (205)
$msg␣=␣<<EOM;
Error␣reading␣file␣$config_file␣at␣line␣number␣$line_no.
Did␣not␣see␣ending␣quote␣character␣<$quote_char>␣in␣this␣text:
$instr
Please␣fix␣this␣line␣or␣use␣-npro␣to␣avoid␣reading␣this␣file
EOM
----------
Range: (122903,123430) (527)
<<EOM;
#␣Command␣line␣long␣names␣(passed␣to␣GetOptions)
#---------------------------------------------------------------
#␣here␣is␣a␣summary␣of␣the␣Getopt␣codes:
#␣<none>␣does␣not␣take␣an␣argument
#␣=s␣takes␣a␣mandatory␣string
#␣:s␣takes␣an␣optional␣string
#␣=i␣takes␣a␣mandatory␣integer
#␣:i␣takes␣an␣optional␣integer
#␣!␣does␣not␣take␣an␣argument␣and␣may␣be␣negated
#␣␣i.e.,␣-foo␣and␣-nofoo␣are␣allowed
#␣a␣double␣dash␣signals␣the␣end␣of␣the␣options␣list
#
#---------------------------------------------------------------
EOM
----------
Range: (125074,125417) (343)
<<"EOM";
This␣is␣perltidy,␣v$VERSION

Copyright␣2000-2016,␣Steve␣Hancock

Perltidy␣is␣free␣software␣and␣may␣be␣copied␣under␣the␣terms␣of␣the␣GNU
General␣Public␣License,␣which␣is␣included␣in␣the␣distribution␣files.

Complete␣documentation␣for␣perltidy␣can␣be␣found␣using␣'man␣perltidy'
or␣on␣the␣internet␣at␣http://perltidy.sourceforge.net.
EOM
----------
Range: (125451,134745) (9294)
<<EOF;
This␣is␣perltidy␣version␣$VERSION,␣a␣perl␣script␣indenter.␣␣Usage:

␣␣␣␣perltidy␣[␣options␣]␣file1␣file2␣file3␣...
␣␣␣␣␣␣␣␣␣␣␣␣(output␣goes␣to␣file1.tdy,␣file2.tdy,␣file3.tdy,␣...)
␣␣␣␣perltidy␣[␣options␣]␣file1␣-o␣outfile
␣␣␣␣perltidy␣[␣options␣]␣file1␣-st␣>outfile
␣␣␣␣perltidy␣[␣options␣]␣<infile␣>outfile

Options␣have␣short␣and␣long␣forms.␣Short␣forms␣are␣shown;␣see
man␣pages␣for␣long␣forms.␣␣Note:␣'=s'␣indicates␣a␣required␣string,
and␣'=n'␣indicates␣a␣required␣integer.

I/O␣control
␣-h␣␣␣␣␣␣show␣this␣help
␣-o=file␣name␣of␣the␣output␣file␣(only␣if␣single␣input␣file)
␣-oext=s␣change␣output␣extension␣from␣'tdy'␣to␣s
␣-opath=path␣␣change␣path␣to␣be␣'path'␣for␣output␣files
␣-b␣␣␣␣␣␣backup␣original␣to␣.bak␣and␣modify␣file␣in-place
␣-bext=s␣change␣default␣backup␣extension␣from␣'bak'␣to␣s
␣-q␣␣␣␣␣␣deactivate␣error␣messages␣(for␣running␣under␣editor)
␣-w␣␣␣␣␣␣include␣non-critical␣warning␣messages␣in␣the␣.ERR␣error␣output
␣-syn␣␣␣␣run␣perl␣-c␣to␣check␣syntax␣(default␣under␣unix␣systems)
␣-log␣␣␣␣save␣.LOG␣file,␣which␣has␣useful␣diagnostics
␣-f␣␣␣␣␣␣force␣perltidy␣to␣read␣a␣binary␣file
␣-g␣␣␣␣␣␣like␣-log␣but␣writes␣more␣detailed␣.LOG␣file,␣for␣debugging␣scripts
␣-opt␣␣␣␣write␣the␣set␣of␣options␣actually␣used␣to␣a␣.LOG␣file
␣-npro␣␣␣ignore␣.perltidyrc␣configuration␣command␣file
␣-pro=file␣␣␣read␣configuration␣commands␣from␣file␣instead␣of␣.perltidyrc
␣-st␣␣␣␣␣send␣output␣to␣standard␣output,␣STDOUT
␣-se␣␣␣␣␣send␣all␣error␣output␣to␣standard␣error␣output,␣STDERR
␣-v␣␣␣␣␣␣display␣version␣number␣to␣standard␣output␣and␣quit

Basic␣Options:
␣-i=n␣␣␣␣use␣n␣columns␣per␣indentation␣level␣(default␣n=4)
␣-t␣␣␣␣␣␣tabs:␣use␣one␣tab␣character␣per␣indentation␣level,␣not␣recommeded
␣-nt␣␣␣␣␣no␣tabs:␣use␣n␣spaces␣per␣indentation␣level␣(default)
␣-et=n␣␣␣entab␣leading␣whitespace␣n␣spaces␣per␣tab;␣not␣recommended
␣-io␣␣␣␣␣"indent␣only":␣just␣do␣indentation,␣no␣other␣formatting.
␣-sil=n␣␣set␣starting␣indentation␣level␣to␣n;␣␣use␣if␣auto␣detection␣fails
␣-ole=s␣␣specify␣output␣line␣ending␣(s=dos␣or␣win,␣mac,␣unix)
␣-ple␣␣␣␣keep␣output␣line␣endings␣same␣as␣input␣(input␣must␣be␣filename)

Whitespace␣Control
␣-fws␣␣␣␣freeze␣whitespace;␣this␣disables␣all␣whitespace␣changes
␣␣␣␣␣␣␣␣␣␣␣and␣disables␣the␣following␣switches:
␣-bt=n␣␣␣sets␣brace␣tightness,␣␣n=␣(0␣=␣loose,␣1=default,␣2␣=␣tight)
␣-bbt␣␣␣␣same␣as␣-bt␣but␣for␣code␣block␣braces;␣same␣as␣-bt␣if␣not␣given
␣-bbvt␣␣␣block␣braces␣vertically␣tight;␣use␣with␣-bl␣or␣-bli
␣-bbvtl=s␣␣make␣-bbvt␣to␣apply␣to␣selected␣list␣of␣block␣types
␣-pt=n␣␣␣paren␣tightness␣(n=0,␣1␣or␣2)
␣-sbt=n␣␣square␣bracket␣tightness␣(n=0,␣1,␣or␣2)
␣-bvt=n␣␣brace␣vertical␣tightness,
␣␣␣␣␣␣␣␣␣n=(0=open,␣1=close␣unless␣multiple␣steps␣on␣a␣line,␣2=always␣close)
␣-pvt=n␣␣paren␣vertical␣tightness␣(see␣-bvt␣for␣n)
␣-sbvt=n␣square␣bracket␣vertical␣tightness␣(see␣-bvt␣for␣n)
␣-bvtc=n␣closing␣brace␣vertical␣tightness:
␣␣␣␣␣␣␣␣␣n=(0=open,␣1=sometimes␣close,␣2=always␣close)
␣-pvtc=n␣closing␣paren␣vertical␣tightness,␣see␣-bvtc␣for␣n.
␣-sbvtc=n␣closing␣square␣bracket␣vertical␣tightness,␣see␣-bvtc␣for␣n.
␣-ci=n␣␣␣sets␣continuation␣indentation=n,␣␣default␣is␣n=2␣spaces
␣-lp␣␣␣␣␣line␣up␣parentheses,␣brackets,␣and␣non-BLOCK␣braces
␣-sfs␣␣␣␣add␣space␣before␣semicolon␣in␣for(␣;␣;␣)
␣-aws␣␣␣␣allow␣perltidy␣to␣add␣whitespace␣(default)
␣-dws␣␣␣␣delete␣all␣old␣non-essential␣whitespace
␣-icb␣␣␣␣indent␣closing␣brace␣of␣a␣code␣block
␣-cti=n␣␣closing␣indentation␣of␣paren,␣square␣bracket,␣or␣non-block␣brace:
␣␣␣␣␣␣␣␣␣n=0␣none,␣=1␣align␣with␣opening,␣=2␣one␣full␣indentation␣level
␣-icp␣␣␣␣equivalent␣to␣-cti=2
␣-wls=s␣␣want␣space␣left␣of␣tokens␣in␣string;␣i.e.␣-nwls='+␣-␣*␣/'
␣-wrs=s␣␣want␣space␣right␣of␣tokens␣in␣string;
␣-sts␣␣␣␣put␣space␣before␣terminal␣semicolon␣of␣a␣statement
␣-sak=s␣␣put␣space␣between␣keywords␣given␣in␣s␣and␣'(';
␣-nsak=s␣no␣space␣between␣keywords␣in␣s␣and␣'(';␣i.e.␣-nsak='my␣our␣local'

Line␣Break␣Control
␣-fnl␣␣␣␣freeze␣newlines;␣this␣disables␣all␣line␣break␣changes
␣␣␣␣␣␣␣␣␣␣␣␣and␣disables␣the␣following␣switches:
␣-anl␣␣␣␣add␣newlines;␣␣ok␣to␣introduce␣new␣line␣breaks
␣-bbs␣␣␣␣add␣blank␣line␣before␣subs␣and␣packages
␣-bbc␣␣␣␣add␣blank␣line␣before␣block␣comments
␣-bbb␣␣␣␣add␣blank␣line␣between␣major␣blocks
␣-kbl=n␣␣keep␣old␣blank␣lines?␣0=no,␣1=some,␣2=all
␣-mbl=n␣␣maximum␣consecutive␣blank␣lines␣to␣output␣(default=1)
␣-ce␣␣␣␣␣cuddled␣else;␣use␣this␣style:␣'}␣else␣{'
␣-dnl␣␣␣␣delete␣old␣newlines␣(default)
␣-l=n␣␣␣␣maximum␣line␣length;␣␣default␣n=80
␣-bl␣␣␣␣␣opening␣brace␣on␣new␣line
␣-sbl␣␣␣␣opening␣sub␣brace␣on␣new␣line.␣␣value␣of␣-bl␣is␣used␣if␣not␣given.
␣-bli␣␣␣␣opening␣brace␣on␣new␣line␣and␣indented
␣-bar␣␣␣␣opening␣brace␣always␣on␣right,␣even␣for␣long␣clauses
␣-vt=n␣␣␣vertical␣tightness␣(requires␣-lp);␣n␣controls␣break␣after␣opening
␣␣␣␣␣␣␣␣␣token:␣0=never␣␣1=no␣break␣if␣next␣line␣balanced␣␣␣2=no␣break
␣-vtc=n␣␣vertical␣tightness␣of␣closing␣container;␣n␣controls␣if␣closing
␣␣␣␣␣␣␣␣␣token␣starts␣new␣line:␣0=always␣␣1=not␣unless␣list␣␣1=never
␣-wba=s␣␣want␣break␣after␣tokens␣in␣string;␣i.e.␣wba=':␣.'
␣-wbb=s␣␣want␣break␣before␣tokens␣in␣string

Following␣Old␣Breakpoints
␣-kis␣␣␣␣keep␣interior␣semicolons.␣␣Allows␣multiple␣statements␣per␣line.
␣-boc␣␣␣␣break␣at␣old␣comma␣breaks:␣turns␣off␣all␣automatic␣list␣formatting
␣-bol␣␣␣␣break␣at␣old␣logical␣breakpoints:␣or,␣and,␣||,␣&&␣(default)
␣-bok␣␣␣␣break␣at␣old␣list␣keyword␣breakpoints␣such␣as␣map,␣sort␣(default)
␣-bot␣␣␣␣break␣at␣old␣conditional␣(ternary␣?:)␣operator␣breakpoints␣(default)
␣-boa␣␣␣␣break␣at␣old␣attribute␣breakpoints
␣-cab=n␣␣break␣at␣commas␣after␣a␣comma-arrow␣(=>):
␣␣␣␣␣␣␣␣␣n=0␣break␣at␣all␣commas␣after␣=>
␣␣␣␣␣␣␣␣␣n=1␣stable:␣break␣unless␣this␣breaks␣an␣existing␣one-line␣container
␣␣␣␣␣␣␣␣␣n=2␣break␣only␣if␣a␣one-line␣container␣cannot␣be␣formed
␣␣␣␣␣␣␣␣␣n=3␣do␣not␣treat␣commas␣after␣=>␣specially␣at␣all

Comment␣controls
␣-ibc␣␣␣␣indent␣block␣comments␣(default)
␣-isbc␣␣␣indent␣spaced␣block␣comments;␣may␣indent␣unless␣no␣leading␣space
␣-msc=n␣␣minimum␣desired␣spaces␣to␣side␣comment,␣default␣4
␣-fpsc=n␣fix␣position␣for␣side␣comments;␣default␣0;
␣-csc␣␣␣␣add␣or␣update␣closing␣side␣comments␣after␣closing␣BLOCK␣brace
␣-dcsc␣␣␣delete␣closing␣side␣comments␣created␣by␣a␣-csc␣command
␣-cscp=s␣change␣closing␣side␣comment␣prefix␣to␣be␣other␣than␣'##␣end'
␣-cscl=s␣change␣closing␣side␣comment␣to␣apply␣to␣selected␣list␣of␣blocks
␣-csci=n␣minimum␣number␣of␣lines␣needed␣to␣apply␣a␣-csc␣tag,␣default␣n=6
␣-csct=n␣maximum␣number␣of␣columns␣of␣appended␣text,␣default␣n=20
␣-cscw␣␣␣causes␣warning␣if␣old␣side␣comment␣is␣overwritten␣with␣-csc

␣-sbc␣␣␣␣use␣'static␣block␣comments'␣identified␣by␣leading␣'##'␣(default)
␣-sbcp=s␣change␣static␣block␣comment␣identifier␣to␣be␣other␣than␣'##'
␣-osbc␣␣␣outdent␣static␣block␣comments

␣-ssc␣␣␣␣use␣'static␣side␣comments'␣identified␣by␣leading␣'##'␣(default)
␣-sscp=s␣change␣static␣side␣comment␣identifier␣to␣be␣other␣than␣'##'

Delete␣selected␣text
␣-dac␣␣␣␣delete␣all␣comments␣AND␣pod
␣-dbc␣␣␣␣delete␣block␣comments
␣-dsc␣␣␣␣delete␣side␣comments
␣-dp␣␣␣␣␣delete␣pod

Send␣selected␣text␣to␣a␣'.TEE'␣file
␣-tac␣␣␣␣tee␣all␣comments␣AND␣pod
␣-tbc␣␣␣␣tee␣block␣comments
␣-tsc␣␣␣␣tee␣side␣comments
␣-tp␣␣␣␣␣tee␣pod

Outdenting
␣-olq␣␣␣␣outdent␣long␣quoted␣strings␣(default)
␣-olc␣␣␣␣outdent␣a␣long␣block␣comment␣line
␣-ola␣␣␣␣outdent␣statement␣labels
␣-okw␣␣␣␣outdent␣control␣keywords␣(redo,␣next,␣last,␣goto,␣return)
␣-okwl=s␣specify␣alternative␣keywords␣for␣-okw␣command

Other␣controls
␣-mft=n␣␣maximum␣fields␣per␣table;␣default␣n=40
␣-x␣␣␣␣␣␣do␣not␣format␣lines␣before␣hash-bang␣line␣(i.e.,␣for␣VMS)
␣-asc␣␣␣␣allows␣perltidy␣to␣add␣a␣';'␣when␣missing␣(default)
␣-dsm␣␣␣␣allows␣perltidy␣to␣delete␣an␣unnecessary␣';'␣␣(default)

Combinations␣of␣other␣parameters
␣-gnu␣␣␣␣␣attempt␣to␣follow␣GNU␣Coding␣Standards␣as␣applied␣to␣perl
␣-mangle␣␣remove␣as␣many␣newlines␣as␣possible␣(but␣keep␣comments␣and␣pods)
␣-extrude␣␣insert␣as␣many␣newlines␣as␣possible

Dump␣and␣die,␣debugging
␣-dop␣␣␣␣dump␣options␣used␣in␣this␣run␣to␣standard␣output␣and␣quit
␣-ddf␣␣␣␣dump␣default␣options␣to␣standard␣output␣and␣quit
␣-dsn␣␣␣␣dump␣all␣option␣short␣names␣to␣standard␣output␣and␣quit
␣-dln␣␣␣␣dump␣option␣long␣names␣to␣standard␣output␣and␣quit
␣-dpro␣␣␣dump␣whatever␣configuration␣file␣is␣in␣effect␣to␣standard␣output
␣-dtt␣␣␣␣dump␣all␣token␣types␣to␣standard␣output␣and␣quit

HTML
␣-html␣write␣an␣html␣file␣(see␣'man␣perl2web'␣for␣many␣options)
␣␣␣␣␣␣␣Note:␣when␣-html␣is␣used,␣no␣indentation␣or␣formatting␣are␣done.
␣␣␣␣␣␣␣Hint:␣try␣perltidy␣-html␣-css=mystyle.css␣filename.pl
␣␣␣␣␣␣␣and␣edit␣mystyle.css␣to␣change␣the␣appearance␣of␣filename.html.
␣␣␣␣␣␣␣-nnn␣gives␣line␣numbers
␣␣␣␣␣␣␣-pre␣only␣writes␣out␣<pre>..</pre>␣code␣section
␣␣␣␣␣␣␣-toc␣places␣a␣table␣of␣contents␣to␣subs␣at␣the␣top␣(default)
␣␣␣␣␣␣␣-pod␣passes␣pod␣text␣through␣pod2html␣(default)
␣␣␣␣␣␣␣-frm␣write␣html␣as␣a␣frame␣(3␣files)
␣␣␣␣␣␣␣-text=s␣extra␣extension␣for␣table␣of␣contents␣if␣-frm,␣default='toc'
␣␣␣␣␣␣␣-sext=s␣extra␣extension␣for␣file␣content␣if␣-frm,␣default='src'

A␣prefix␣of␣"n"␣negates␣short␣form␣toggle␣switches,␣and␣a␣prefix␣of␣"no"
negates␣the␣long␣forms.␣␣For␣example,␣-nasc␣means␣don't␣add␣missing
semicolons.

If␣you␣are␣unable␣to␣see␣this␣entire␣text,␣try␣"perltidy␣-h␣|␣more"
For␣more␣detailed␣information,␣and␣additional␣options,␣try␣"man␣perltidy",
or␣go␣to␣the␣perltidy␣home␣page␣at␣http://perltidy.sourceforge.net
EOF
----------
Range: (140898,141124) (226)
confess␣<<EOM;
------------------------------------------------------------------------
expecting␣ref␣to␣SCALAR␣but␣got␣ref␣to␣($ref);␣trace␣follows:
------------------------------------------------------------------------
EOM
----------
Range: (141898,142127) (229)
confess␣<<EOM;
------------------------------------------------------------------------
expecting␣mode␣=␣'r'␣or␣'w'␣but␣got␣mode␣($mode);␣trace␣follows:
------------------------------------------------------------------------
EOM
----------
Range: (142234,142466) (232)
confess␣<<EOM;
------------------------------------------------------------------------
getline␣call␣requires␣mode␣=␣'r'␣but␣mode␣=␣($mode);␣trace␣follows:
------------------------------------------------------------------------
EOM
----------
Range: (142626,142856) (230)
confess␣<<EOM;
------------------------------------------------------------------------
print␣call␣requires␣mode␣=␣'w'␣but␣mode␣=␣($mode);␣trace␣follows:
------------------------------------------------------------------------
EOM
----------
Range: (143567,143792) (225)
confess␣<<EOM;
------------------------------------------------------------------------
expecting␣ref␣to␣ARRAY␣but␣got␣ref␣to␣($ref);␣trace␣follows:
------------------------------------------------------------------------
EOM
----------
Range: (144044,144273) (229)
confess␣<<EOM;
------------------------------------------------------------------------
expecting␣mode␣=␣'r'␣or␣'w'␣but␣got␣mode␣($mode);␣trace␣follows:
------------------------------------------------------------------------
EOM
----------
Range: (144380,144607) (227)
confess␣<<EOM;
------------------------------------------------------------------------
getline␣requires␣mode␣=␣'r'␣but␣mode␣=␣($mode);␣trace␣follows:
------------------------------------------------------------------------
EOM
----------
Range: (144767,144992) (225)
confess␣<<EOM;
------------------------------------------------------------------------
print␣requires␣mode␣=␣'w'␣but␣mode␣=␣($mode);␣trace␣follows:
------------------------------------------------------------------------
EOM
----------
Range: (149241,149599) (358)
_fh␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣=>␣$fh,
␣␣␣␣␣␣␣␣_fh_tee␣␣␣␣␣␣␣␣␣␣␣=>␣$fh_tee,
␣␣␣␣␣␣␣␣_output_file␣␣␣␣␣␣=>␣$output_file,
␣␣␣␣␣␣␣␣_output_file_open␣=>␣$output_file_open,
␣␣␣␣␣␣␣␣_tee_flag␣␣␣␣␣␣␣␣␣=>␣0,
␣␣␣␣␣␣␣␣_tee_file␣␣␣␣␣␣␣␣␣=>␣$tee_file,
␣␣␣␣␣␣␣␣_tee_file_opened␣␣=>␣0,
␣␣␣␣␣␣␣␣_line_separator␣␣␣=>␣$line_separator,
␣␣␣␣␣␣␣␣_binmode␣␣␣␣␣␣␣␣␣␣=>␣$binmode,
␣␣␣␣},␣$class;
----------
Range: (153647,154398) (751)
_log_file␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣=>␣$log_file,
␣␣␣␣␣␣␣␣_logfile_gap␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣=>␣$logfile_gap,
␣␣␣␣␣␣␣␣_rOpts␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣=>␣$rOpts,
␣␣␣␣␣␣␣␣_fh_warnings␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣=>␣$fh_warnings,
␣␣␣␣␣␣␣␣_last_input_line_written␣␣␣␣␣␣␣=>␣0,
␣␣␣␣␣␣␣␣_at_end_of_file␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣=>␣0,
␣␣␣␣␣␣␣␣_use_prefix␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣=>␣1,
␣␣␣␣␣␣␣␣_block_log_output␣␣␣␣␣␣␣␣␣␣␣␣␣␣=>␣0,
␣␣␣␣␣␣␣␣_line_of_tokens␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣=>␣undef,
␣␣␣␣␣␣␣␣_output_line_number␣␣␣␣␣␣␣␣␣␣␣␣=>␣undef,
␣␣␣␣␣␣␣␣_wrote_line_information_string␣=>␣0,
␣␣␣␣␣␣␣␣_wrote_column_headings␣␣␣␣␣␣␣␣␣=>␣0,
␣␣␣␣␣␣␣␣_warning_file␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣=>␣$warning_file,
␣␣␣␣␣␣␣␣_warning_count␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣=>␣0,
␣␣␣␣␣␣␣␣_complaint_count␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣=>␣0,
␣␣␣␣␣␣␣␣_saw_code_bug␣␣␣␣=>␣-
----------
Range: (157063,157507) (444)
@{$routput_array},␣<<EOM;
The␣nesting␣depths␣in␣the␣table␣below␣are␣at␣the␣start␣of␣the␣lines.
The␣indicated␣output␣line␣numbers␣are␣not␣always␣exact.
ci␣=␣levels␣of␣continuation␣indentation;␣bk␣=␣1␣if␣in␣BLOCK,␣0␣if␣not.

in:out␣indent␣c␣b␣␣nesting␣␣␣code␣+␣messages;␣(messages␣begin␣with␣>>>)
lines␣␣levels␣i␣k␣␣␣␣␣␣␣␣␣␣␣␣(code␣begins␣with␣one␣'.'␣per␣indent␣level)
------␣␣-----␣-␣-␣--------␣␣␣-------------------------------------------
EOM
----------
Range: (159882,160061) (179)
}
␣␣␣␣␣␣␣␣$line_information_string␣=
"L$input_line_number:$output_line_number$extra_space␣i$guessed_indentation_level:$structural_indentation_level␣$ci_level␣$bk␣$nesting_string";
----------
Range: (163916,164268) (352)
<<EOM);

You␣may␣have␣encountered␣a␣code␣bug␣in␣perltidy.␣␣If␣you␣think␣so,␣and
the␣problem␣is␣not␣listed␣in␣the␣BUGS␣file␣at
http://perltidy.sourceforge.net,␣please␣report␣it␣so␣that␣it␣can␣be
corrected.␣␣Include␣the␣smallest␣possible␣script␣which␣has␣the␣problem,
along␣with␣the␣.LOG␣file.␣See␣the␣manual␣pages␣for␣contact␣information.
Thank␣you!
EOM
----------
Range: (164377,164914) (537)
<<EOM);

You␣may␣have␣encountered␣a␣bug␣in␣perltidy.␣␣However,␣since␣you␣are␣using␣the
-extrude␣option,␣the␣problem␣may␣be␣with␣perl␣or␣one␣of␣its␣modules,␣which␣have
occasional␣problems␣with␣this␣type␣of␣file.␣␣If␣you␣believe␣that␣the
problem␣is␣with␣perltidy,␣and␣the␣problem␣is␣not␣listed␣in␣the␣BUGS␣file␣at
http://perltidy.sourceforge.net,␣please␣report␣it␣so␣that␣it␣can␣be␣corrected.
Include␣the␣smallest␣possible␣script␣which␣has␣the␣problem,␣along␣with␣the␣.LOG
file.␣See␣the␣manual␣pages␣for␣contact␣information.
Thank␣you!
EOM
----------
Range: (164967,165376) (409)
<<EOM);

Oops,␣you␣seem␣to␣have␣encountered␣a␣bug␣in␣perltidy.␣␣Please␣check␣the
BUGS␣file␣at␣http://perltidy.sourceforge.net.␣␣If␣the␣problem␣is␣not
listed␣there,␣please␣report␣it␣so␣that␣it␣can␣be␣corrected.␣␣Include␣the
smallest␣possible␣script␣which␣produces␣this␣message,␣along␣with␣the
.LOG␣file␣if␣appropriate.␣␣See␣the␣manual␣pages␣for␣contact␣information.
Your␣efforts␣are␣appreciated.
Thank␣you!
EOM
----------
Range: (165633,165864) (231)
<<EOM);

The␣log␣file␣shows␣that␣perltidy␣added␣$added_semicolon_count␣semicolons.
Please␣rerun␣with␣-nasc␣to␣see␣if␣that␣is␣the␣cause␣of␣the␣syntax␣error.␣␣Even
if␣that␣is␣the␣problem,␣please␣report␣it␣so␣that␣it␣can␣be␣fixed.
EOM
----------
Range: (171129,171729) (600)
_input_file␣␣␣␣␣␣␣␣=>␣$input_file,␣␣␣␣␣␣␣␣␣␣#␣name␣of␣input␣file
␣␣␣␣␣␣␣␣_title␣␣␣␣␣␣␣␣␣␣␣␣␣=>␣$title,␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣title,␣unescaped
␣␣␣␣␣␣␣␣_html_file␣␣␣␣␣␣␣␣␣=>␣$html_file,␣␣␣␣␣␣␣␣␣␣␣#␣name␣of␣.html␣output␣file
␣␣␣␣␣␣␣␣_toc_filename␣␣␣␣␣␣=>␣$toc_filename,␣␣␣␣␣␣␣␣#␣for␣frames␣option
␣␣␣␣␣␣␣␣_src_filename␣␣␣␣␣␣=>␣$src_filename,␣␣␣␣␣␣␣␣#␣for␣frames␣option
␣␣␣␣␣␣␣␣_html_file_opened␣␣=>␣$html_file_opened,␣␣␣␣#␣a␣flag
␣␣␣␣␣␣␣␣_html_fh␣␣␣␣␣␣␣␣␣␣␣=>␣$html_fh,␣␣␣␣␣␣␣␣␣␣␣␣␣#␣the␣output␣stream
␣␣␣␣␣␣␣␣_html_pre_fh␣␣␣␣␣␣␣=>␣$html_pre_fh,␣␣␣␣␣␣␣␣␣#␣pre␣section␣goes␣here
␣␣␣␣␣␣␣␣_rpre_string_stack␣=>␣\
----------
Range: (171885,172108) (223)
$pod_string,␣␣␣␣␣␣␣␣␣#␣string␣holding␣pod
␣␣␣␣␣␣␣␣_pod_cut_count␣␣␣␣␣=>␣0,␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣how␣many␣=cut's?
␣␣␣␣␣␣␣␣_html_toc_fh␣␣␣␣␣␣␣=>␣$html_toc_fh,␣␣␣␣␣␣␣␣␣#␣fh␣for␣table␣of␣contents
␣␣␣␣␣␣␣␣_rtoc_string␣␣␣␣␣␣␣=>␣\
----------
Range: (176853,177358) (505)
'n'␣␣=>␣'numeric',
␣␣␣␣␣␣␣␣'p'␣␣=>␣'paren',
␣␣␣␣␣␣␣␣'q'␣␣=>␣'quote',
␣␣␣␣␣␣␣␣'s'␣␣=>␣'structure',
␣␣␣␣␣␣␣␣'c'␣␣=>␣'comment',
␣␣␣␣␣␣␣␣'v'␣␣=>␣'v-string',
␣␣␣␣␣␣␣␣'cm'␣=>␣'comma',
␣␣␣␣␣␣␣␣'w'␣␣=>␣'bareword',
␣␣␣␣␣␣␣␣'co'␣=>␣'colon',
␣␣␣␣␣␣␣␣'pu'␣=>␣'punctuation',
␣␣␣␣␣␣␣␣'i'␣␣=>␣'identifier',
␣␣␣␣␣␣␣␣'j'␣␣=>␣'label',
␣␣␣␣␣␣␣␣'h'␣␣=>␣'here-doc-target',
␣␣␣␣␣␣␣␣'hh'␣=>␣'here-doc-text',
␣␣␣␣␣␣␣␣'k'␣␣=>␣'keyword',
␣␣␣␣␣␣␣␣'sc'␣=>␣'semicolon',
␣␣␣␣␣␣␣␣'m'␣␣=>␣'subroutine',
␣␣␣␣␣␣␣␣'pd'␣=>␣'pod-text',
␣␣␣␣);
----------
Range: (177838,178306) (468)
'#'␣␣=>␣'c',
␣␣␣␣␣␣␣␣'n'␣␣=>␣'n',
␣␣␣␣␣␣␣␣'v'␣␣=>␣'v',
␣␣␣␣␣␣␣␣'k'␣␣=>␣'k',
␣␣␣␣␣␣␣␣'F'␣␣=>␣'k',
␣␣␣␣␣␣␣␣'Q'␣␣=>␣'q',
␣␣␣␣␣␣␣␣'q'␣␣=>␣'q',
␣␣␣␣␣␣␣␣'J'␣␣=>␣'j',
␣␣␣␣␣␣␣␣'j'␣␣=>␣'j',
␣␣␣␣␣␣␣␣'h'␣␣=>␣'h',
␣␣␣␣␣␣␣␣'H'␣␣=>␣'hh',
␣␣␣␣␣␣␣␣'w'␣␣=>␣'w',
␣␣␣␣␣␣␣␣','␣␣=>␣'cm',
␣␣␣␣␣␣␣␣'=>'␣=>␣'cm',
␣␣␣␣␣␣␣␣';'␣␣=>␣'sc',
␣␣␣␣␣␣␣␣':'␣␣=>␣'co',
␣␣␣␣␣␣␣␣'f'␣␣=>␣'sc',
␣␣␣␣␣␣␣␣'('␣␣=>␣'p',
␣␣␣␣␣␣␣␣')'␣␣=>␣'p',
␣␣␣␣␣␣␣␣'M'␣␣=>␣'m',
␣␣␣␣␣␣␣␣'P'␣␣=>␣'pd',
␣␣␣␣␣␣␣␣'A'␣␣=>␣'co',
␣␣␣␣);
----------
Range: (187298,187502) (204)
<<"EOM");
/*␣default␣style␣sheet␣generated␣by␣perltidy␣*/
body␣{background:␣$bg_color;␣color:␣$text_color}
pre␣{␣color:␣$text_color;
␣␣␣␣␣␣background:␣$pre_bg_color;
␣␣␣␣␣␣font-family:␣courier;
␣␣␣␣}

EOM
----------
Range: (201199,201454) (255)
<<EOM);
<!DOCTYPE␣html␣PUBLIC␣"-//W3C//DTD␣XHTML␣1.0␣Frameset//EN"
␣␣␣␣"http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd">
<?xml␣version="1.0"␣encoding="iso-8859-1"␣?>
<html␣xmlns="http://www.w3.org/1999/xhtml">
<head>
<title>$title</title>
</head>
EOM
----------
Range: (201879,202235) (356)
<<EOM);
<frame␣src␣=␣"$src_basename"␣name␣=␣"$src_frame_name"␣/>
<noframes>
<body>
<p>If␣you␣see␣this␣message,␣you␣are␣using␣a␣non-frame-capable␣web␣client.</p>
<p>This␣document␣contains:</p>
<ul>
<li><a␣href="$toc_basename">A␣table␣of␣contents</a></li>
<li><a␣href="$src_basename">The␣source␣code</a></li>
</ul>
</body>
</noframes>
</frameset>
</html>
EOM
----------
Range: (205411,205676) (265)
<<"HTML_START");
<!DOCTYPE␣html␣PUBLIC␣"-//W3C//DTD␣XHTML␣1.0␣Transitional//EN"
␣␣␣"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<!--␣Generated␣by␣perltidy␣on␣$date␣-->
<html␣xmlns="http://www.w3.org/1999/xhtml">
<head>
<title>$title</title>
HTML_START
----------
Range: (217860,223026) (5166)
use␣vars␣qw{

␣␣@gnu_stack
␣␣$max_gnu_stack_index
␣␣$gnu_position_predictor
␣␣$line_start_index_to_go
␣␣$last_indentation_written
␣␣$last_unadjusted_indentation
␣␣$last_leading_token
␣␣$last_output_short_opening_token

␣␣$saw_VERSION_in_this_file
␣␣$saw_END_or_DATA_

␣␣@gnu_item_list
␣␣$max_gnu_item_index
␣␣$gnu_sequence_number
␣␣$last_output_indentation
␣␣%last_gnu_equals
␣␣%gnu_comma_count
␣␣%gnu_arrow_count

␣␣@block_type_to_go
␣␣@type_sequence_to_go
␣␣@container_environment_to_go
␣␣@bond_strength_to_go
␣␣@forced_breakpoint_to_go
␣␣@token_lengths_to_go
␣␣@summed_lengths_to_go
␣␣@levels_to_go
␣␣@leading_spaces_to_go
␣␣@reduced_spaces_to_go
␣␣@matching_token_to_go
␣␣@mate_index_to_go
␣␣@nesting_blocks_to_go
␣␣@ci_levels_to_go
␣␣@nesting_depth_to_go
␣␣@nobreak_to_go
␣␣@old_breakpoint_to_go
␣␣@tokens_to_go
␣␣@types_to_go
␣␣@inext_to_go
␣␣@iprev_to_go

␣␣%saved_opening_indentation

␣␣$max_index_to_go
␣␣$comma_count_in_batch
␣␣$old_line_count_in_batch
␣␣$last_nonblank_index_to_go
␣␣$last_nonblank_type_to_go
␣␣$last_nonblank_token_to_go
␣␣$last_last_nonblank_index_to_go
␣␣$last_last_nonblank_type_to_go
␣␣$last_last_nonblank_token_to_go
␣␣@nonblank_lines_at_depth
␣␣$starting_in_quote
␣␣$ending_in_quote
␣␣@whitespace_level_stack
␣␣$whitespace_last_level

␣␣$in_format_skipping_section
␣␣$format_skipping_pattern_begin
␣␣$format_skipping_pattern_end

␣␣$forced_breakpoint_count
␣␣$forced_breakpoint_undo_count
␣␣@forced_breakpoint_undo_stack
␣␣%postponed_breakpoint

␣␣$tabbing
␣␣$embedded_tab_count
␣␣$first_embedded_tab_at
␣␣$last_embedded_tab_at
␣␣$deleted_semicolon_count
␣␣$first_deleted_semicolon_at
␣␣$last_deleted_semicolon_at
␣␣$added_semicolon_count
␣␣$first_added_semicolon_at
␣␣$last_added_semicolon_at
␣␣$first_tabbing_disagreement
␣␣$last_tabbing_disagreement
␣␣$in_tabbing_disagreement
␣␣$tabbing_disagreement_count
␣␣$input_line_tabbing

␣␣$last_line_type
␣␣$last_line_leading_type
␣␣$last_line_leading_level
␣␣$last_last_line_leading_level

␣␣%block_leading_text
␣␣%block_opening_line_number
␣␣$csc_new_statement_ok
␣␣$csc_last_label
␣␣%csc_block_label
␣␣$accumulating_text_for_block
␣␣$leading_block_text
␣␣$rleading_block_if_elsif_text
␣␣$leading_block_text_level
␣␣$leading_block_text_length_exceeded
␣␣$leading_block_text_line_length
␣␣$leading_block_text_line_number
␣␣$closing_side_comment_prefix_pattern
␣␣$closing_side_comment_list_pattern

␣␣$last_nonblank_token
␣␣$last_nonblank_type
␣␣$last_last_nonblank_token
␣␣$last_last_nonblank_type
␣␣$last_nonblank_block_type
␣␣$last_output_level
␣␣%is_do_follower
␣␣%is_if_brace_follower
␣␣%space_after_keyword
␣␣$rbrace_follower
␣␣$looking_for_else
␣␣%is_last_next_redo_return
␣␣%is_other_brace_follower
␣␣%is_else_brace_follower
␣␣%is_anon_sub_brace_follower
␣␣%is_anon_sub_1_brace_follower
␣␣%is_sort_map_grep
␣␣%is_sort_map_grep_eval
␣␣%is_sort_map_grep_eval_do
␣␣%is_block_without_semicolon
␣␣%is_if_unless
␣␣%is_and_or
␣␣%is_assignment
␣␣%is_chain_operator
␣␣%is_if_unless_and_or_last_next_redo_return
␣␣%ok_to_add_semicolon_for_block_type

␣␣@has_broken_sublist
␣␣@dont_align
␣␣@want_comma_break

␣␣$is_static_block_comment
␣␣$index_start_one_line_block
␣␣$semicolons_before_block_self_destruct
␣␣$index_max_forced_break
␣␣$input_line_number
␣␣$diagnostics_object
␣␣$vertical_aligner_object
␣␣$logger_object
␣␣$file_writer_object
␣␣$formatter_self
␣␣@ci_stack
␣␣$last_line_had_side_comment
␣␣%want_break_before
␣␣%outdent_keyword
␣␣$static_block_comment_pattern
␣␣$static_side_comment_pattern
␣␣%opening_vertical_tightness
␣␣%closing_vertical_tightness
␣␣%closing_token_indentation
␣␣$some_closing_token_indentation

␣␣%opening_token_right
␣␣%stack_opening_token
␣␣%stack_closing_token

␣␣$block_brace_vertical_tightness_pattern

␣␣$rOpts_add_newlines
␣␣$rOpts_add_whitespace
␣␣$rOpts_block_brace_tightness
␣␣$rOpts_block_brace_vertical_tightness
␣␣$rOpts_brace_left_and_indent
␣␣$rOpts_comma_arrow_breakpoints
␣␣$rOpts_break_at_old_keyword_breakpoints
␣␣$rOpts_break_at_old_comma_breakpoints
␣␣$rOpts_break_at_old_logical_breakpoints
␣␣$rOpts_break_at_old_ternary_breakpoints
␣␣$rOpts_break_at_old_attribute_breakpoints
␣␣$rOpts_closing_side_comment_else_flag
␣␣$rOpts_closing_side_comment_maximum_text
␣␣$rOpts_continuation_indentation
␣␣$rOpts_cuddled_else
␣␣$rOpts_delete_old_whitespace
␣␣$rOpts_fuzzy_line_length
␣␣$rOpts_indent_columns
␣␣$rOpts_line_up_parentheses
␣␣$rOpts_maximum_fields_per_table
␣␣$rOpts_maximum_line_length
␣␣$rOpts_variable_maximum_line_length
␣␣$rOpts_short_concatenation_item_length
␣␣$rOpts_keep_old_blank_lines
␣␣$rOpts_ignore_old_breakpoints
␣␣$rOpts_format_skipping
␣␣$rOpts_space_function_paren
␣␣$rOpts_space_keyword_paren
␣␣$rOpts_keep_interior_semicolons
␣␣$rOpts_ignore_side_comment_lengths
␣␣$rOpts_stack_closing_block_brace
␣␣$rOpts_whitespace_cycle
␣␣$rOpts_tight_secret_operators

␣␣%is_opening_type
␣␣%is_closing_type
␣␣%is_keyword_returning_list
␣␣%tightness
␣␣%matching_token
␣␣$rOpts
␣␣%right_bond_strength
␣␣%left_bond_strength
␣␣%binary_ws_rules
␣␣%want_left_space
␣␣%want_right_space
␣␣%is_digraph
␣␣%is_trigraph
␣␣$bli_pattern
␣␣$bli_list_string
␣␣%is_closing_type
␣␣%is_opening_type
␣␣%is_closing_token
␣␣%is_opening_token
};
----------
Range: (239357,239547) (190)
$spaces,␣␣␣␣␣␣$level,
␣␣␣␣␣␣␣␣$ci_level,␣␣␣␣$available_spaces,
␣␣␣␣␣␣␣␣$index,␣␣␣␣␣␣␣$gnu_sequence_number,
␣␣␣␣␣␣␣␣$align_paren,␣$max_gnu_stack_index,
␣␣␣␣␣␣␣␣$line_start_index_to_go,
␣␣␣␣);
----------
Range: (260896,261078) (182)
"program␣bug␣with␣-lp:␣want␣to␣delete␣$deleted_spaces␣from␣item␣$i,␣but␣old=$old_spaces␣deleted:␣lev=$level␣ci=$ci_level␣␣deleted:␣level=$old_level␣ci=$ci_level\n"
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣);
----------
Range: (270494,270947) (453)
Perl::Tidy::Warn␣<<EOM;
-----------------------------------------------------------------------
Conflict:␣-lp␣␣conflicts␣with␣-io,␣-fnl,␣-nanl,␣or␣-ndnl;␣ignoring␣-lp

The␣-lp␣indentation␣logic␣requires␣that␣perltidy␣be␣able␣to␣coordinate
arbitrarily␣large␣numbers␣of␣line␣breakpoints.␣␣This␣isn't␣possible
with␣these␣flags.␣Sometimes␣an␣acceptable␣workaround␣is␣to␣use␣-wocb=3
-----------------------------------------------------------------------
EOM
----------
Range: (279809,280089) (280)
'{'␣=>␣$rOpts->{'brace-tightness'},
␣␣␣␣␣␣␣␣'}'␣=>␣$rOpts->{'brace-tightness'},
␣␣␣␣␣␣␣␣'('␣=>␣$rOpts->{'paren-tightness'},
␣␣␣␣␣␣␣␣')'␣=>␣$rOpts->{'paren-tightness'},
␣␣␣␣␣␣␣␣'['␣=>␣$rOpts->{'square-bracket-tightness'},
␣␣␣␣␣␣␣␣']'␣=>␣$rOpts->{'square-bracket-tightness'},
␣␣␣␣);
----------
Range: (282861,283195) (334)
'('␣=>␣$rOpts->{'paren-vertical-tightness'},
␣␣␣␣␣␣␣␣'{'␣=>␣$rOpts->{'brace-vertical-tightness'},
␣␣␣␣␣␣␣␣'['␣=>␣$rOpts->{'square-bracket-vertical-tightness'},
␣␣␣␣␣␣␣␣')'␣=>␣$rOpts->{'paren-vertical-tightness'},
␣␣␣␣␣␣␣␣'}'␣=>␣$rOpts->{'brace-vertical-tightness'},
␣␣␣␣␣␣␣␣']'␣=>␣$rOpts->{'square-bracket-vertical-tightness'},
␣␣␣␣);
----------
Range: (283241,283623) (382)
'('␣=>␣$rOpts->{'paren-vertical-tightness-closing'},
␣␣␣␣␣␣␣␣'{'␣=>␣$rOpts->{'brace-vertical-tightness-closing'},
␣␣␣␣␣␣␣␣'['␣=>␣$rOpts->{'square-bracket-vertical-tightness-closing'},
␣␣␣␣␣␣␣␣')'␣=>␣$rOpts->{'paren-vertical-tightness-closing'},
␣␣␣␣␣␣␣␣'}'␣=>␣$rOpts->{'brace-vertical-tightness-closing'},
␣␣␣␣␣␣␣␣']'␣=>␣$rOpts->{'square-bracket-vertical-tightness-closing'},
␣␣␣␣);
----------
Range: (283801,284024) (223)
')'␣=>␣$rOpts->{'closing-paren-indentation'},
␣␣␣␣␣␣␣␣'}'␣=>␣$rOpts->{'closing-brace-indentation'},
␣␣␣␣␣␣␣␣']'␣=>␣$rOpts->{'closing-square-bracket-indentation'},
␣␣␣␣␣␣␣␣'>'␣=>␣$rOpts->{'closing-paren-indentation'},
␣␣␣␣);
----------
Range: (291422,291801) (379)
print␣$fh␣<<EOM;
These␣values␣are␣the␣main␣control␣of␣whitespace␣to␣the␣left␣of␣a␣token␣type;
They␣may␣be␣altered␣with␣the␣-wls␣parameter.
For␣a␣list␣of␣token␣types,␣use␣perltidy␣--dump-token-types␣(-dtt)
␣1␣means␣the␣token␣wants␣a␣space␣to␣its␣left
-1␣means␣the␣token␣does␣not␣want␣a␣space␣to␣its␣left
------------------------------------------------------------------------
EOM
----------
Range: (291977,292359) (382)
print␣$fh␣<<EOM;
These␣values␣are␣the␣main␣control␣of␣whitespace␣to␣the␣right␣of␣a␣token␣type;
They␣may␣be␣altered␣with␣the␣-wrs␣parameter.
For␣a␣list␣of␣token␣types,␣use␣perltidy␣--dump-token-types␣(-dtt)
␣1␣means␣the␣token␣wants␣a␣space␣to␣its␣right
-1␣means␣the␣token␣does␣not␣want␣a␣space␣to␣its␣right
------------------------------------------------------------------------
EOM
----------
Range: (293546,294094) (548)
my␣$result␣=

␣␣␣␣␣␣␣␣␣␣#␣never␣combine␣two␣bare␣words␣or␣numbers
␣␣␣␣␣␣␣␣␣␣#␣examples:␣␣and␣::ok(1)
␣␣␣␣␣␣␣␣␣␣#␣␣␣␣␣␣␣␣␣␣␣␣return␣::spw(...)
␣␣␣␣␣␣␣␣␣␣#␣␣␣␣␣␣␣␣␣␣␣␣for␣bla::bla::␣abc
␣␣␣␣␣␣␣␣␣␣#␣example␣is␣"%overload::␣and"␣in␣files␣Dumpvalue.pm␣or␣colonbug.pl
␣␣␣␣␣␣␣␣␣␣#␣␣␣␣␣␣␣␣␣␣␣␣$input␣eq"quit"␣to␣make␣$inputeq"quit"
␣␣␣␣␣␣␣␣␣␣#␣␣␣␣␣␣␣␣␣␣␣␣my␣$size=-s::SINK␣if␣$file;␣␣<==OK␣but␣we␣won't␣do␣it
␣␣␣␣␣␣␣␣␣␣#␣don't␣join␣something␣like:␣for␣bla::bla::␣abc
␣␣␣␣␣␣␣␣␣␣#␣example␣is␣"%overload::␣and"␣in␣files␣Dumpvalue.pm␣or␣colonbug.pl
␣␣␣␣␣␣␣␣␣␣(
----------
Range: (294184,294375) (191)
/^([\'\w]|\:\:)/␣)␣)

␣␣␣␣␣␣␣␣␣␣#␣do␣not␣combine␣a␣number␣with␣a␣concatenation␣dot
␣␣␣␣␣␣␣␣␣␣#␣example:␣pom.caputo:
␣␣␣␣␣␣␣␣␣␣#␣$vt100_compatible␣?␣"\e[0;0H"␣:␣('-'␣x␣78␣.␣"\n");
␣␣␣␣␣␣␣␣␣␣||
----------
Range: (294469,294703) (234)
'.'␣)␣)

␣␣␣␣␣␣␣␣␣␣#␣do␣not␣join␣a␣minus␣with␣a␣bare␣word,␣because␣you␣might␣form
␣␣␣␣␣␣␣␣␣␣#␣a␣file␣test␣operator.␣␣Example␣from␣Complex.pm:
␣␣␣␣␣␣␣␣␣␣#␣if␣(CORE::abs($z␣-␣i)␣<␣$eps);␣"z-i"␣would␣be␣taken␣as␣a␣file␣test.
␣␣␣␣␣␣␣␣␣␣||
----------
Range: (294741,294989) (248)
/^[_A-Za-z]$/␣)␣)

␣␣␣␣␣␣␣␣␣␣#␣and␣something␣like␣this␣could␣become␣ambiguous␣without␣space
␣␣␣␣␣␣␣␣␣␣#␣after␣the␣'-':
␣␣␣␣␣␣␣␣␣␣#␣␣␣use␣constant␣III=>1;
␣␣␣␣␣␣␣␣␣␣#␣␣␣$a␣=␣$b␣-␣III;
␣␣␣␣␣␣␣␣␣␣#␣and␣even␣this:
␣␣␣␣␣␣␣␣␣␣#␣␣␣$a␣=␣-␣III;
␣␣␣␣␣␣␣␣␣␣||
----------
Range: (295061,295343) (282)
/^[_A-Za-z]/␣)␣)

␣␣␣␣␣␣␣␣␣␣#␣'=␣-'␣should␣not␣become␣=-␣or␣you␣will␣get␣a␣warning
␣␣␣␣␣␣␣␣␣␣#␣about␣reversed␣-=
␣␣␣␣␣␣␣␣␣␣#␣||␣($tokenr␣eq␣'-')

␣␣␣␣␣␣␣␣␣␣#␣keep␣a␣space␣between␣a␣quote␣and␣a␣bareword␣to␣prevent␣the
␣␣␣␣␣␣␣␣␣␣#␣bareword␣from␣becoming␣a␣quote␣modifier.
␣␣␣␣␣␣␣␣␣␣||
----------
Range: (297279,297459) (180)
/^[\;\}\)\]]/␣)␣)

␣␣␣␣␣␣␣␣␣␣#␣need␣space␣after␣foreach␣my;␣for␣example,␣this␣will␣fail␣in
␣␣␣␣␣␣␣␣␣␣#␣older␣versions␣of␣Perl:
␣␣␣␣␣␣␣␣␣␣#␣foreach␣my$ft(@filetypes)...
␣␣␣␣␣␣␣␣␣␣||
----------
Range: (297718,297893) (175)
$is_sort_grep_map{$tokenl}␣)

␣␣␣␣␣␣␣␣␣␣#␣don't␣stick␣numbers␣next␣to␣left␣parens,␣as␣in:
␣␣␣␣␣␣␣␣␣␣#use␣Mail::Internet␣1.28␣();␣(see␣Entity.pm,␣Head.pm,␣Test.pm)
␣␣␣␣␣␣␣␣␣␣||
----------
Range: (297930,298654) (724)
'('␣)␣)

␣␣␣␣␣␣␣␣␣␣#␣We␣must␣be␣sure␣that␣a␣space␣between␣a␣?␣and␣a␣quoted␣string
␣␣␣␣␣␣␣␣␣␣#␣remains␣if␣the␣space␣before␣the␣?␣remains.␣␣[Loca.pm,␣lockarea]
␣␣␣␣␣␣␣␣␣␣#␣ie,
␣␣␣␣␣␣␣␣␣␣#␣␣␣␣$b=join␣$comma␣?␣','␣:␣':',␣@_;␣␣#␣ok
␣␣␣␣␣␣␣␣␣␣#␣␣␣␣$b=join␣$comma?','␣:␣':',␣@_;␣␣␣␣#␣ok!
␣␣␣␣␣␣␣␣␣␣#␣␣␣␣$b=join␣$comma␣?','␣:␣':',␣@_;␣␣␣#␣error!
␣␣␣␣␣␣␣␣␣␣#␣Not␣really␣required:
␣␣␣␣␣␣␣␣␣␣##␣||␣(␣(␣$typel␣eq␣'?'␣)␣&&␣(␣$typer␣eq␣'Q'␣)␣)

␣␣␣␣␣␣␣␣␣␣#␣do␣not␣remove␣space␣between␣an␣'&'␣and␣a␣bare␣word␣because
␣␣␣␣␣␣␣␣␣␣#␣it␣may␣turn␣into␣a␣function␣evaluation,␣like␣here
␣␣␣␣␣␣␣␣␣␣#␣between␣'&'␣and␣'O_ACCMODE',␣producing␣a␣syntax␣error␣[File.pm]
␣␣␣␣␣␣␣␣␣␣#␣␣␣␣$opts{rdonly}␣=␣(($opts{mode}␣&␣O_ACCMODE)␣==␣O_RDONLY);
␣␣␣␣␣␣␣␣␣␣||
----------
Range: (303470,303705) (235)
my␣@spaces_both_sides␣=␣qw"
␣␣␣␣␣␣␣␣␣␣+␣-␣*␣/␣%␣?␣=␣.␣:␣x␣<␣>␣|␣&␣^␣..␣<<␣>>␣**␣&&␣..␣||␣//␣=>␣+=␣-=
␣␣␣␣␣␣␣␣␣␣.=␣%=␣x=␣&=␣|=␣^=␣*=␣<>␣<=␣>=␣==␣=~␣!~␣/=␣!=␣...␣<<=␣>>=␣~~␣!~~
␣␣␣␣␣␣␣␣␣␣&&=␣||=␣//=␣<=>␣A␣k␣f␣w␣F␣n␣C␣Y␣U␣G␣v
␣␣␣␣␣␣␣␣␣␣";
----------
Range: (321720,322142) (422)
do␣{
␣␣␣␣␣␣␣␣␣␣␣␣my␣$str␣=␣substr(␣$last_token,␣0,␣15␣);
␣␣␣␣␣␣␣␣␣␣␣␣$str␣.=␣'␣'␣x␣(␣16␣-␣length($str)␣);
␣␣␣␣␣␣␣␣␣␣␣␣if␣(␣!defined($ws_1)␣)␣{␣$ws_1␣=␣"*"␣}
␣␣␣␣␣␣␣␣␣␣␣␣if␣(␣!defined($ws_2)␣)␣{␣$ws_2␣=␣"*"␣}
␣␣␣␣␣␣␣␣␣␣␣␣if␣(␣!defined($ws_3)␣)␣{␣$ws_3␣=␣"*"␣}
␣␣␣␣␣␣␣␣␣␣␣␣if␣(␣!defined($ws_4)␣)␣{␣$ws_4␣=␣"*"␣}
␣␣␣␣␣␣␣␣␣␣␣␣print␣STDOUT
"WHITE:␣␣i=$j␣$str␣$last_type␣$type␣$ws_1␣:␣$ws_2␣:␣$ws_3␣:␣$ws_4␣:␣$ws␣\n";
␣␣␣␣␣␣␣␣};
----------
Range: (323818,324139) (321)
$block_type,␣␣␣␣␣␣␣␣␣␣␣␣$ci_level,
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣$container_environment,␣$container_type,
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣$in_continued_quote,␣␣␣␣$level,
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣$nesting_blocks,␣␣␣␣␣␣␣␣$no_internal_newlines,
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣$slevel,␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣$token,
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣$type,␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣$type_sequence,
␣␣␣␣␣␣␣␣␣␣␣␣);
----------
Range: (324217,324553) (336)
$block_type,␣␣␣␣␣␣␣␣␣␣␣␣$ci_level,
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣$container_environment,␣$container_type,
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣$in_continued_quote,␣␣␣␣$level,
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣$nesting_blocks,␣␣␣␣␣␣␣␣$no_internal_newlines,
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣$slevel,␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣$token,
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣$type,␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣$type_sequence,
␣␣␣␣␣␣␣␣␣␣␣␣)␣=␣@saved_token;
----------
Range: (328971,329153) (182)
do␣{
␣␣␣␣␣␣␣␣␣␣␣␣my␣(␣$a,␣$b,␣$c␣)␣=␣caller();
␣␣␣␣␣␣␣␣␣␣␣␣print␣STDOUT
"STORE:␣from␣$a␣$c:␣storing␣token␣$token␣type␣$type␣lev=$level␣slev=$slevel␣at␣$max_index_to_go\n";
␣␣␣␣␣␣␣␣};
----------
Range: (336145,336320) (175)
/^\#␣␣␣\s*
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣line␣\s+␣(\d+)␣␣␣\s*
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣(?:\s("?)([^"]+)\2)?␣\s*
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣$/x
␣␣␣␣␣␣␣␣␣␣)
␣␣␣␣␣␣␣␣{
----------
Range: (336904,337121) (217)
$rOpts->{'hanging-side-comments'}␣␣␣␣#␣user␣is␣allowing
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣hanging␣side␣comments
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣like␣this
␣␣␣␣␣␣␣␣␣␣)
␣␣␣␣␣␣␣␣{
----------
Range: (338919,339221) (302)
'#'

␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣not␣after␣a␣short␣line␣ending␣in␣an␣opening␣token
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣because␣we␣already␣have␣space␣above␣this␣comment.
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣Note␣that␣the␣first␣comment␣in␣this␣if␣block,␣after
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣the␣'if␣(',␣does␣not␣get␣a␣blank␣line␣because␣of␣this.
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣&&
----------
Range: (344531,344827) (296)
$last_last_nonblank_token,
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣$last_last_nonblank_type,
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣$tokens_to_go[$max_index_to_go],
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣$types_to_go[$max_index_to_go],
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣$$rtokens[0],
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣$$rtoken_type[0]
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣)
␣␣␣␣␣␣␣␣␣␣␣␣␣␣)
␣␣␣␣␣␣␣␣␣␣␣␣{
----------
Range: (356111,356374) (263)
UNDEFINED_INDEX

␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣or␣if␣it␣will␣not␣be␣on␣same␣line␣as␣its␣keyword,␣so␣that
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣it␣will␣be␣outdented␣(eval.t,␣overload.t),␣and␣the␣user
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣has␣not␣insisted␣on␣keeping␣it␣on␣the␣right
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣||
----------
Range: (362098,362309) (211)
$is_block_without_semicolon{$block_type}

␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣Follow␣users␣break␣point␣for
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣one␣line␣block␣types␣U␣&␣G,␣such␣as␣a␣'try'␣block
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣||
----------
Range: (367053,367235) (182)
$rOpts->{'delete-semicolons'}

␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣don't␣delete␣;␣before␣a␣#␣because␣it␣would␣promote␣it
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣to␣a␣block␣comment
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣&&
----------
Range: (369022,369353) (331)
$last_last_nonblank_token,
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣$last_last_nonblank_type,
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣$tokens_to_go[$max_index_to_go],
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣$types_to_go[$max_index_to_go],
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣$$rtokens[␣$j␣+␣1␣],
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣$$rtoken_type[␣$j␣+␣1␣]
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣);
----------
Range: (370286,370523) (237)
$rOpts->{'delete-side-comments'}␣)

␣␣␣␣␣␣␣␣␣␣␣␣#␣if␣this␣line␣ends␣in␣a␣quote
␣␣␣␣␣␣␣␣␣␣␣␣#␣NOTE:␣This␣is␣critically␣important␣for␣insuring␣that␣quoted␣lines
␣␣␣␣␣␣␣␣␣␣␣␣#␣do␣not␣get␣processed␣by␣things␣like␣-sot␣and␣-sct
␣␣␣␣␣␣␣␣␣␣␣␣||
----------
Range: (371542,371902) (360)
do␣{
␣␣␣␣␣␣␣␣my␣(␣$a,␣$b,␣$c␣)␣=␣caller;
␣␣␣␣␣␣␣␣write_diagnostics(
"OUTPUT:␣output_line_to_go␣called:␣$a␣$c␣$last_nonblank_type␣$last_nonblank_token,␣one_line=$index_start_one_line_block,␣tokens␣to␣write=$max_index_to_go\n"
␣␣␣␣␣␣␣␣);
␣␣␣␣␣␣␣␣my␣$output_str␣=␣join␣"",␣@tokens_to_go[␣0␣..␣$max_index_to_go␣];
␣␣␣␣␣␣␣␣write_diagnostics("$output_str\n");
␣␣␣␣};
----------
Range: (377774,377964) (190)
do␣{
␣␣␣␣␣␣␣␣␣␣␣␣my␣(␣$package,␣$file,␣$line␣)␣=␣caller;
␣␣␣␣␣␣␣␣␣␣␣␣print␣STDOUT
"FLUSH:␣flushing␣from␣$package␣$file␣$line,␣types=␣$types_to_go[$imin]␣to␣$types_to_go[$imax]\n";
␣␣␣␣␣␣␣␣};
----------
Range: (426992,427293) (301)
$rOpts_closing_side_comment_maximum_text

␣␣␣␣␣␣␣␣␣␣␣␣#␣and␣either:
␣␣␣␣␣␣␣␣␣␣␣␣#␣the␣new␣total␣line␣length␣must␣be␣below␣the␣line␣length␣limit
␣␣␣␣␣␣␣␣␣␣␣␣#␣or␣the␣new␣length␣must␣be␣below␣the␣text␣length␣limit
␣␣␣␣␣␣␣␣␣␣␣␣#␣(ie,␣we␣may␣allow␣one␣token␣to␣exceed␣the␣text␣length␣limit)
␣␣␣␣␣␣␣␣␣␣␣␣&&
----------
Range: (427486,427958) (472)
$rOpts_closing_side_comment_maximum_text
␣␣␣␣␣␣␣␣␣␣␣␣)

␣␣␣␣␣␣␣␣␣␣␣␣#␣UNLESS:␣we␣are␣adding␣a␣closing␣paren␣before␣the␣brace␣we␣seek.
␣␣␣␣␣␣␣␣␣␣␣␣#␣This␣is␣an␣attempt␣to␣avoid␣situations␣where␣the␣...␣to␣be
␣␣␣␣␣␣␣␣␣␣␣␣#␣added␣are␣longer␣than␣the␣omitted␣right␣paren,␣as␣in:

␣␣␣␣␣␣␣␣␣␣␣␣#␣␣␣foreach␣my␣$item␣(@a_rather_long_variable_name_here)␣{
␣␣␣␣␣␣␣␣␣␣␣␣#␣␣␣␣␣␣&whatever;
␣␣␣␣␣␣␣␣␣␣␣␣#␣␣␣}␣##␣end␣foreach␣my␣$item␣(@a_rather_long_variable_name_here...

␣␣␣␣␣␣␣␣␣␣␣␣||
----------
Range: (441896,442273) (377)
/$closing_side_comment_list_pattern/o

␣␣␣␣␣␣␣␣#␣..␣but␣not␣an␣anonymous␣sub
␣␣␣␣␣␣␣␣#␣These␣are␣not␣normally␣of␣interest,␣and␣their␣closing␣braces␣are
␣␣␣␣␣␣␣␣#␣often␣followed␣by␣commas␣or␣semicolons␣anyway.␣␣This␣also␣avoids
␣␣␣␣␣␣␣␣#␣possible␣erratic␣output␣due␣to␣line␣numbering␣inconsistencies
␣␣␣␣␣␣␣␣#␣in␣the␣cases␣where␣their␣closing␣braces␣terminate␣a␣line.
␣␣␣␣␣␣␣␣&&
----------
Range: (442308,442532) (224)
'sub'

␣␣␣␣␣␣␣␣#␣..and␣the␣corresponding␣opening␣brace␣must␣is␣not␣in␣this␣batch
␣␣␣␣␣␣␣␣#␣(because␣we␣do␣not␣need␣to␣tag␣one-line␣blocks,␣although␣this
␣␣␣␣␣␣␣␣#␣should␣also␣be␣caught␣with␣a␣positive␣-csci␣value)
␣␣␣␣␣␣␣␣&&
----------
Range: (452777,453083) (306)
$lev␣)␣)

␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣the␣terminal␣term␣must␣not␣contain␣any␣ternary␣terms,␣as␣in
␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣my␣$ECHO␣=␣(
␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣␣␣␣␣␣␣$Is_MSWin32␣?␣".\\echo$$"
␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣␣␣␣␣:␣$Is_MacOS␣␣␣?␣":echo$$"
␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣␣␣␣␣:␣(␣$Is_NetWare␣?␣"echo$$"␣:␣"./echo$$"␣)
␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣);
␣␣␣␣␣␣␣␣␣␣␣␣␣␣&&
----------
Range: (453491,453712) (221)
$in_comma_list,
␣␣␣␣␣␣␣␣␣␣␣␣$outdent_long_lines,
␣␣␣␣␣␣␣␣␣␣␣␣$is_terminal_ternary,
␣␣␣␣␣␣␣␣␣␣␣␣$is_semicolon_terminated,
␣␣␣␣␣␣␣␣␣␣␣␣$do_not_pad,
␣␣␣␣␣␣␣␣␣␣␣␣$rvertical_tightness_flags,
␣␣␣␣␣␣␣␣␣␣␣␣$level_jump,
␣␣␣␣␣␣␣␣);
----------
Range: (455331,455579) (248)
'unless'␣␣=>␣'if',
␣␣␣␣␣␣␣␣␣␣␣␣'else'␣␣␣␣=>␣'if',
␣␣␣␣␣␣␣␣␣␣␣␣'elsif'␣␣␣=>␣'if',
␣␣␣␣␣␣␣␣␣␣␣␣'when'␣␣␣␣=>␣'if',
␣␣␣␣␣␣␣␣␣␣␣␣'default'␣=>␣'if',
␣␣␣␣␣␣␣␣␣␣␣␣'case'␣␣␣␣=>␣'if',
␣␣␣␣␣␣␣␣␣␣␣␣'sort'␣␣␣␣=>␣'map',
␣␣␣␣␣␣␣␣␣␣␣␣'grep'␣␣␣␣=>␣'map',
␣␣␣␣␣␣␣␣);
----------
Range: (455727,456011) (284)
'unless'␣␣=>␣'if',
␣␣␣␣␣␣␣␣␣␣␣␣'else'␣␣␣␣=>␣'if',
␣␣␣␣␣␣␣␣␣␣␣␣'elsif'␣␣␣=>␣'if',
␣␣␣␣␣␣␣␣␣␣␣␣'when'␣␣␣␣=>␣'given',
␣␣␣␣␣␣␣␣␣␣␣␣'default'␣=>␣'given',
␣␣␣␣␣␣␣␣␣␣␣␣'case'␣␣␣␣=>␣'switch',

␣␣␣␣␣␣␣␣␣␣␣␣#␣treat␣an␣'undef'␣similar␣to␣numbers␣and␣quotes
␣␣␣␣␣␣␣␣␣␣␣␣'undef'␣=>␣'Q',
␣␣␣␣␣␣␣␣);
----------
Range: (477407,477838) (431)
$nesting_depth_to_go[$ibeg]␣)
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣)

␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣and␣when␣the␣next␣line␣is␣at␣a␣lower␣indentation␣level
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣PATCH:␣and␣only␣if␣the␣style␣allows␣undoing␣continuation
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣for␣all␣closing␣token␣types.␣We␣should␣really␣wait␣until
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣the␣indentation␣of␣the␣next␣line␣is␣known␣and␣then␣make
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣a␣decision,␣but␣that␣would␣require␣another␣pass.
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣||
----------
Range: (478181,478360) (179)
1

␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣require␣LIST␣environment;␣otherwise,␣we␣may␣outdent␣too␣much␣-
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣this␣can␣happen␣in␣calls␣without␣parentheses␣(overload.t);
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣&&
----------
Range: (553595,553912) (317)
do␣{
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣my␣$str␣=␣substr(␣$token,␣0,␣15␣);
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣$str␣.=␣'␣'␣x␣(␣16␣-␣length($str)␣);
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣print␣STDOUT
"BOND:␣␣i=$i␣$str␣$type␣$next_nonblank_type␣depth=$total_nesting_depth␣strength=$bond_str_1␣->␣$bond_str_2␣->␣$bond_str_3␣->␣$bond_str_4␣$bond_str␣->␣$strength␣\n";
␣␣␣␣␣␣␣␣␣␣␣␣};
----------
Range: (555127,555686) (559)
my␣(
␣␣␣␣␣␣␣␣$block_type,␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣$current_depth,
␣␣␣␣␣␣␣␣$depth,␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣$i,
␣␣␣␣␣␣␣␣$i_last_nonblank_token,␣␣␣␣$last_colon_sequence_number,
␣␣␣␣␣␣␣␣$last_nonblank_token,␣␣␣␣␣␣$last_nonblank_type,
␣␣␣␣␣␣␣␣$last_nonblank_block_type,␣$last_old_breakpoint_count,
␣␣␣␣␣␣␣␣$minimum_depth,␣␣␣␣␣␣␣␣␣␣␣␣$next_nonblank_block_type,
␣␣␣␣␣␣␣␣$next_nonblank_token,␣␣␣␣␣␣$next_nonblank_type,
␣␣␣␣␣␣␣␣$old_breakpoint_count,␣␣␣␣␣$starting_breakpoint_count,
␣␣␣␣␣␣␣␣$starting_depth,␣␣␣␣␣␣␣␣␣␣␣$token,
␣␣␣␣␣␣␣␣$type,␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣$type_sequence,
␣␣␣␣);
----------
Range: (555692,556206) (514)
my␣(
␣␣␣␣␣␣␣␣@breakpoint_stack,␣␣␣␣␣␣␣␣␣␣␣␣␣␣@breakpoint_undo_stack,
␣␣␣␣␣␣␣␣@comma_index,␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣@container_type,
␣␣␣␣␣␣␣␣@identifier_count_stack,␣␣␣␣␣␣␣␣@index_before_arrow,
␣␣␣␣␣␣␣␣@interrupted_list,␣␣␣␣␣␣␣␣␣␣␣␣␣␣@item_count_stack,
␣␣␣␣␣␣␣␣@last_comma_index,␣␣␣␣␣␣␣␣␣␣␣␣␣␣@last_dot_index,
␣␣␣␣␣␣␣␣@last_nonblank_type,␣␣␣␣␣␣␣␣␣␣␣␣@old_breakpoint_count_stack,
␣␣␣␣␣␣␣␣@opening_structure_index_stack,␣@rfor_semicolon_list,
␣␣␣␣␣␣␣␣@has_old_logical_breakpoints,␣␣␣@rand_or_list,
␣␣␣␣␣␣␣␣@i_equals,
␣␣␣␣);
----------
Range: (558829,559196) (367)
$dd,
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣$opening_structure_index_stack[$dd],
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣$i,
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣$item_count_stack[$dd],
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣$identifier_count_stack[$dd],
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣$comma_index[$dd],
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣$next_nonblank_type,
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣$container_type[$dd],
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣$interrupted_list[$dd],
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣\
----------
Range: (581775,581960) (185)
#print␣"LISTY␣sees:␣i=$i␣type=$type␣␣tok=$token␣␣block=$block_type␣depth=$depth␣next=$next_nonblank_type␣next_block=$next_nonblank_block_type␣inter=$interrupted_list[$current_depth]\n";
----------
Range: (585313,585519) (206)
$forced_breakpoint_undo_count␣)

␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣and␣this␣block␣is␣short␣enough␣to␣fit␣on␣one␣line
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣Note:␣use␣<␣because␣need␣1␣more␣space␣for␣possible␣comma
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣&&
----------
Range: (591167,591580) (413)
$is_simple_logical_expression

␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣##␣modification␣to␣keep␣':␣('␣containers␣vertically␣tight;
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣##␣but␣probably␣better␣to␣let␣user␣set␣-vt=1␣to␣avoid
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣##␣inconsistency␣with␣other␣paren␣types
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣##␣&&␣($container_type[$current_depth]␣ne␣':')

␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣otherwise,␣we␣require␣one␣of␣these␣reasons␣for␣breaking:
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣&&
----------
Range: (591669,591955) (286)
$has_comma_breakpoints

␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣-␣the␣opening␣container␣is␣separated␣from␣this␣batch
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣␣␣for␣some␣reason␣(comment,␣blank␣line,␣code␣block)
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣-␣this␣is␣a␣non-paren␣container␣spanning␣multiple␣lines
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣||
----------
Range: (593204,593395) (191)
$i_start_2)

␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣we␣are␣breaking␣after␣an␣opening␣brace,␣paren,
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣so␣don't␣break␣before␣it␣too
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣&&
----------
Range: (608284,608562) (278)
my␣(
␣␣␣␣␣␣␣␣␣␣␣␣$depth,␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣$i_opening_paren,␣␣$i_closing_paren,
␣␣␣␣␣␣␣␣␣␣␣␣$item_count,␣␣␣␣␣␣␣␣␣␣$identifier_count,␣$rcomma_index,
␣␣␣␣␣␣␣␣␣␣␣␣$next_nonblank_type,␣␣$list_type,␣␣␣␣␣␣␣␣$interrupted,
␣␣␣␣␣␣␣␣␣␣␣␣$rdo_not_break_apart,␣$must_break_open,
␣␣␣␣␣␣␣␣)␣=␣@_;
----------
Range: (631530,631906) (376)
do␣{
␣␣␣␣␣␣␣␣␣␣␣␣print␣STDOUT
"SPARSE:cols=$columns␣commas=$comma_count␣items:$item_count␣ids=$identifier_count␣pairwidth=$pair_width␣fields=$number_of_fields␣lines␣packed:␣$packed_lines␣packed_cols=$packed_columns␣fmtd:$formatted_lines␣cols␣/line:$columns_per_line␣␣unused:$unused_columns␣fmtd:$formatted_columns␣sparsity=$sparsity␣allow=$max_allowed_sparsity\n";

␣␣␣␣␣␣␣␣};
----------
Range: (633990,634293) (303)
#print␣"LISTX:␣next=$next_nonblank_type␣␣avail␣cols=$columns␣packed=$packed_columns␣must␣format␣=␣$must_break_open_container␣too-long=$too_long␣␣opening=$opening_token␣list_type=$list_type␣formatted_lines=$formatted_lines␣␣packed=$packed_lines␣max_sparsity=␣$max_allowed_sparsity␣sparsity=$sparsity␣\n";
----------
Range: (645169,645372) (203)
do␣{
␣␣␣␣␣␣␣␣␣␣␣␣my␣(␣$a,␣$b,␣$c␣)␣=␣caller();
␣␣␣␣␣␣␣␣␣␣␣␣print␣STDOUT
"NOBREAK:␣forced_breakpoint␣$forced_breakpoint_count␣from␣$a␣$c␣with␣i=$i␣max=$max_index_to_go␣type=$types_to_go[$i]\n";
␣␣␣␣␣␣␣␣};
----------
Range: (646554,646818) (264)
do␣{
␣␣␣␣␣␣␣␣␣␣␣␣my␣(␣$a,␣$b,␣$c␣)␣=␣caller();
␣␣␣␣␣␣␣␣␣␣␣␣print␣STDOUT
"FORCE␣$forced_breakpoint_count␣from␣$a␣$c␣with␣i=$i_nonblank␣max=$max_index_to_go␣tok=$tokens_to_go[$i_nonblank]␣type=$types_to_go[$i_nonblank]␣nobr=$nobreak_to_go[$i_nonblank]\n";
␣␣␣␣␣␣␣␣};
----------
Range: (648104,648301) (197)
do␣{
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣my␣(␣$a,␣$b,␣$c␣)␣=␣caller();
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣print␣STDOUT
"UNDOBP:␣undo␣forced_breakpoint␣i=$i␣$forced_breakpoint_undo_count␣from␣$a␣$c␣max=$max_index_to_go\n";
␣␣␣␣␣␣␣␣␣␣␣␣};
----------
Range: (648424,648602) (178)
do␣{
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣my␣(␣$a,␣$b,␣$c␣)␣=␣caller();
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣print␣STDOUT
"Program␣Bug:␣undo_forced_breakpoint␣from␣$a␣$c␣has␣i=$i␣but␣max=$max_index_to_go";
␣␣␣␣␣␣␣␣␣␣␣␣};
----------
Range: (654387,654585) (198)
do␣{
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣print␣STDERR
"RECOMBINE:␣n=$n␣imid=$iend_1␣if=$ibeg_1␣type=$type_ibeg_1␣=$tokens_to_go[$ibeg_1]␣next_type=$type_ibeg_2␣next_tok=$tokens_to_go[$ibeg_2]\n";
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣};
----------
Range: (661379,661588) (209)
$rOpts_short_concatenation_item_length
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣)

␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣)

␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣keep␣pure␣terms;␣don't␣mix␣+-␣with␣*/
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣&&
----------
Range: (665672,665928) (256)
$closing_token_indentation{')'}

␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣only␣leading␣'&&',␣'||',␣and␣':'␣if␣no␣others␣seen
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣(but␣note:␣our␣count␣made␣below␣could␣be␣wrong
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣due␣to␣intervening␣comments)
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣&&
----------
Range: (665998,666185) (187)
/^(:|\&\&|\|\|)$/␣)

␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣but␣leading␣colons␣probably␣line␣up␣with␣a
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣previous␣colon␣or␣question␣(count␣could␣be␣wrong).
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣&&
----------
Range: (673657,673852) (195)
'h'

␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣or␣the␣next␣line␣ends␣in␣an␣open␣paren␣or␣brace
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣and␣the␣break␣hasn't␣been␣forced␣[dima.t]
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣||
----------
Range: (673946,674165) (219)
'{'␣)
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣)

␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣do␣not␣recombine␣if␣the␣two␣lines␣might␣align␣well
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣this␣is␣a␣very␣approximate␣test␣for␣this
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣&&
----------
Range: (674425,674787) (362)
2

␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣-lp␣users␣often␣prefer␣this:
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣␣my␣$title␣=␣function($env,␣$env,␣$sysarea,
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣"bubba␣Borrower␣Entry");
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣␣so␣we␣will␣recombine␣if␣-lp␣is␣used␣we␣have
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣␣ending␣comma
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣&&
----------
Range: (678760,680044) (1284)
'('␣)

␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣or␣is␣followed␣by␣a␣?␣or␣:␣at␣same␣depth
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣We␣are␣looking␣for␣something␣like␣this.␣We␣can
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣recombine␣the␣&&␣line␣with␣the␣line␣above␣to␣make␣the
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣structure␣more␣clear:
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣␣return
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣␣␣␣exists␣$G->{Attr}->{V}
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣␣␣␣&&␣exists␣$G->{Attr}->{V}->{$u}
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣␣␣␣?␣%{␣$G->{Attr}->{V}->{$u}␣}
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣␣␣␣:␣();
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣We␣should␣probably␣leave␣something␣like␣this␣alone:
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣␣return
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣␣␣␣␣␣␣exists␣$G->{Attr}->{E}
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣␣␣␣&&␣exists␣$G->{Attr}->{E}->{$u}
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣␣␣␣&&␣exists␣$G->{Attr}->{E}->{$u}->{$v}
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣␣␣␣?␣%{␣$G->{Attr}->{E}->{$u}->{$v}␣}
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣␣␣␣:␣();
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣so␣that␣we␣either␣have␣all␣of␣the␣&&'s␣(or␣||'s)
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣on␣one␣line,␣as␣in␣the␣first␣example,␣or␣break␣at
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣each␣one␣as␣in␣the␣second␣example.␣␣However,␣it
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣sometimes␣makes␣things␣worse␣to␣check␣for␣this␣because
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣it␣prevents␣multiple␣recombinations.␣␣So␣this␣is␣not␣done.
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣||
----------
Range: (683155,683410) (255)
$type_ibeg_2
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣)

␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣␣...␣or␣this␣would␣strand␣a␣short␣quote␣,␣like␣this
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣.␣"some␣long␣quote"
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣.␣"\n";

␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣||
----------
Range: (684212,684635) (423)
$is_if_unless{␣$tokens_to_go[$ibeg_1]␣}

␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣important:␣only␣combine␣a␣very␣simple␣or
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣statement␣because␣the␣step␣below␣may␣have
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣combined␣a␣trailing␣'and'␣with␣this␣or,
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣and␣we␣do␣not␣want␣to␣then␣combine
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣everything␣together
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣&&
----------
Range: (708145,708334) (189)
$want_break_before{$type}

␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣and␣either␣we␣want␣to␣break␣before␣the␣next␣token
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣or␣the␣next␣token␣is␣not␣short␣(i.e.␣not␣a␣'*',␣'/'␣etc.)
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣&&
----------
Range: (710874,711533) (659)
$forced_breakpoint_to_go[$i_test]

␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣break␣between␣)␣{␣in␣a␣continued␣line␣so␣that␣the␣'{'␣can
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣be␣outdented
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣See␣similar␣logic␣in␣scan_list␣which␣catches␣instances
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣where␣a␣line␣is␣just␣something␣like␣')␣{'.␣␣We␣have␣to
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣be␣careful␣because␣the␣corresponding␣block␣keyword␣might
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣not␣be␣on␣the␣first␣line,␣such␣as␣'for'␣here:
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣eval␣{
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣␣␣␣␣for␣("a")␣{
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣␣␣␣␣␣␣␣␣for␣$x␣(␣1,␣2␣)␣{␣local␣$_␣=␣"b";␣s/(.*)/+$1/␣}
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣␣␣␣␣}
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣};
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣||
----------
Range: (711771,712044) (273)
$tokens_to_go[$i_begin]␣)

␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣RT␣#104427:␣Dont␣break␣before␣opening␣sub␣brace␣because
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣sub␣block␣breaks␣handled␣at␣higher␣level,␣unless
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣it␣looks␣like␣the␣preceeding␣list␣is␣long␣and␣broken
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣&&
----------
Range: (720733,721408) (675)
do␣{
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣my␣$ltok␣␣␣␣␣=␣$token;
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣my␣$rtok␣␣␣␣␣=␣$next_nonblank_token␣?␣$next_nonblank_token␣:␣"";
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣my␣$i_testp2␣=␣$i_test␣+␣2;
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣if␣(␣$i_testp2␣>␣$max_index_to_go␣+␣1␣)␣{
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣$i_testp2␣=␣$max_index_to_go␣+␣1;
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣}
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣if␣(␣length($ltok)␣>␣6␣)␣{␣$ltok␣=␣substr(␣$ltok,␣0,␣8␣)␣}
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣if␣(␣length($rtok)␣>␣6␣)␣{␣$rtok␣=␣substr(␣$rtok,␣0,␣8␣)␣}
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣print␣STDOUT
"BREAK:␣i=$i_test␣imax=$imax␣$types_to_go[$i_test]␣$next_nonblank_type␣sp=($leading_spaces)␣lnext=␣$summed_lengths_to_go[$i_testp2]␣2long=$too_long␣str=$strength␣␣␣␣$ltok␣$rtok\n";
␣␣␣␣␣␣␣␣␣␣␣␣␣␣};
----------
Range: (734260,734478) (218)
my␣(
␣␣␣␣␣␣␣␣$class,␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣$spaces,␣␣␣␣␣␣␣␣␣␣␣$level,
␣␣␣␣␣␣␣␣$ci_level,␣␣␣␣␣␣␣␣␣␣␣␣$available_spaces,␣$index,
␣␣␣␣␣␣␣␣$gnu_sequence_number,␣$align_paren,␣␣␣␣␣␣$stack_depth,
␣␣␣␣␣␣␣␣$starting_index,
␣␣␣␣)␣=␣@_;
----------
Range: (734686,734988) (302)
$spaces,␣␣␣␣␣␣␣␣␣␣␣␣␣␣$level,␣␣␣␣␣␣␣␣␣␣$ci_level,
␣␣␣␣␣␣␣␣$available_spaces,␣␣␣␣$closed,␣␣␣␣␣␣␣␣␣$comma_count,
␣␣␣␣␣␣␣␣$gnu_sequence_number,␣$index,␣␣␣␣␣␣␣␣␣␣$have_child,
␣␣␣␣␣␣␣␣$want_right_spaces,␣␣␣$align_paren,␣␣␣␣$marked,
␣␣␣␣␣␣␣␣$stack_depth,␣␣␣␣␣␣␣␣␣$starting_index,␣$arrow_count,
␣␣␣␣],␣$class;
----------
Range: (750405,751682) (1277)
}

use␣vars␣qw(
␣␣$vertical_aligner_self
␣␣$current_line
␣␣$maximum_alignment_index
␣␣$ralignment_list
␣␣$maximum_jmax_seen
␣␣$minimum_jmax_seen
␣␣$previous_minimum_jmax_seen
␣␣$previous_maximum_jmax_seen
␣␣$maximum_line_index
␣␣$group_level
␣␣$group_type
␣␣$group_maximum_gap
␣␣$marginal_match
␣␣$last_level_written
␣␣$last_leading_space_count
␣␣$extra_indent_ok
␣␣$zero_count
␣␣@group_lines
␣␣$last_comment_column
␣␣$last_side_comment_line_number
␣␣$last_side_comment_length
␣␣$last_side_comment_level
␣␣$outdented_line_count
␣␣$first_outdented_line_at
␣␣$last_outdented_line_at
␣␣$diagnostics_object
␣␣$logger_object
␣␣$file_writer_object
␣␣@side_comment_history
␣␣$comment_leading_space_count
␣␣$is_matching_terminal_line
␣␣$consecutive_block_comments

␣␣$cached_line_text
␣␣$cached_line_type
␣␣$cached_line_flag
␣␣$cached_seqno
␣␣$cached_line_valid
␣␣$cached_line_leading_space_count
␣␣$cached_seqno_string

␣␣$valign_buffer_filling
␣␣@valign_buffer

␣␣$seqno_string
␣␣$last_nonblank_seqno_string

␣␣$rOpts

␣␣$rOpts_maximum_line_length
␣␣$rOpts_variable_maximum_line_length
␣␣$rOpts_continuation_indentation
␣␣$rOpts_indent_columns
␣␣$rOpts_tabs
␣␣$rOpts_entab_leading_whitespace
␣␣$rOpts_valign

␣␣$rOpts_fixed_position_side_comment
␣␣$rOpts_minimum_space_to_comment

);
----------
Range: (756111,756359) (248)
column␣␣␣␣␣␣␣␣␣␣=>␣$col,
␣␣␣␣␣␣␣␣starting_column␣=>␣$col,
␣␣␣␣␣␣␣␣matching_token␣␣=>␣$token,
␣␣␣␣␣␣␣␣starting_line␣␣␣=>␣$maximum_line_index,
␣␣␣␣␣␣␣␣ending_line␣␣␣␣␣=>␣$maximum_line_index,
␣␣␣␣␣␣␣␣serial_number␣␣␣=>␣$maximum_alignment_index,
␣␣␣␣);
----------
Range: (760306,760630) (324)
my␣(
␣␣␣␣␣␣␣␣$level,␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣$level_end,
␣␣␣␣␣␣␣␣$indentation,␣␣␣␣␣␣␣␣␣$rfields,
␣␣␣␣␣␣␣␣$rtokens,␣␣␣␣␣␣␣␣␣␣␣␣␣$rpatterns,
␣␣␣␣␣␣␣␣$is_forced_break,␣␣␣␣␣$outdent_long_lines,
␣␣␣␣␣␣␣␣$is_terminal_ternary,␣$is_terminal_statement,
␣␣␣␣␣␣␣␣$do_not_pad,␣␣␣␣␣␣␣␣␣␣$rvertical_tightness_flags,
␣␣␣␣␣␣␣␣$level_jump,
␣␣␣␣)␣=␣@_;
----------
Range: (761634,761823) (189)
do␣{
␣␣␣␣␣␣␣␣print␣STDOUT
"APPEND0:␣entering␣lines=$maximum_line_index␣new␣#fields=␣$jmax,␣leading_count=$leading_space_count␣last_cmt=$last_comment_column␣force=$is_forced_break\n";
␣␣␣␣};
----------
Range: (767888,768450) (562)
jmax␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣=>␣$jmax,
␣␣␣␣␣␣␣␣jmax_original_line␣␣␣␣␣␣␣␣=>␣$jmax,
␣␣␣␣␣␣␣␣rtokens␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣=>␣$rtokens,
␣␣␣␣␣␣␣␣rfields␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣=>␣$rfields,
␣␣␣␣␣␣␣␣rpatterns␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣=>␣$rpatterns,
␣␣␣␣␣␣␣␣indentation␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣=>␣$indentation,
␣␣␣␣␣␣␣␣leading_space_count␣␣␣␣␣␣␣=>␣$leading_space_count,
␣␣␣␣␣␣␣␣outdent_long_lines␣␣␣␣␣␣␣␣=>␣$outdent_long_lines,
␣␣␣␣␣␣␣␣list_type␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣=>␣"",
␣␣␣␣␣␣␣␣is_hanging_side_comment␣␣␣=>␣$is_hanging_side_comment,
␣␣␣␣␣␣␣␣maximum_line_length␣␣␣␣␣␣␣=>␣maximum_line_length_for_level(
----------
Range: (773704,773956) (252)
do␣{
␣␣␣␣␣␣␣␣print␣STDOUT␣"APPEND␣fields:";
␣␣␣␣␣␣␣␣dump_array(@$rfields);
␣␣␣␣␣␣␣␣print␣STDOUT␣"APPEND␣tokens:";
␣␣␣␣␣␣␣␣dump_array(@$rtokens);
␣␣␣␣␣␣␣␣print␣STDOUT␣"APPEND␣patterns:";
␣␣␣␣␣␣␣␣dump_array(@$rpatterns);
␣␣␣␣␣␣␣␣dump_alignments();
␣␣␣␣};
----------
Range: (784818,785213) (395)
do␣{
␣␣␣␣␣␣␣␣local␣$"␣=␣'><';
␣␣␣␣␣␣␣␣print␣STDOUT␣"CURRENT␣FIELDS=<@{$rfields_old}>\n";
␣␣␣␣␣␣␣␣print␣STDOUT␣"CURRENT␣TOKENS=<@{$rtokens_old}>\n";
␣␣␣␣␣␣␣␣print␣STDOUT␣"CURRENT␣PATTERNS=<@{$rpatterns_old}>\n";
␣␣␣␣␣␣␣␣print␣STDOUT␣"UNMODIFIED␣FIELDS=<@{$rfields}>\n";
␣␣␣␣␣␣␣␣print␣STDOUT␣"UNMODIFIED␣TOKENS=<@{$rtokens}>\n";
␣␣␣␣␣␣␣␣print␣STDOUT␣"UNMODIFIED␣PATTERNS=<@{$rpatterns}>\n";
␣␣␣␣};
----------
Range: (788061,788257) (196)
do␣{
␣␣␣␣␣␣␣␣local␣$"␣=␣'><';
␣␣␣␣␣␣␣␣print␣STDOUT␣"MODIFIED␣TOKENS=<@tokens>\n";
␣␣␣␣␣␣␣␣print␣STDOUT␣"MODIFIED␣PATTERNS=<@patterns>\n";
␣␣␣␣␣␣␣␣print␣STDOUT␣"MODIFIED␣FIELDS=<@fields>\n";
␣␣␣␣};
----------
Range: (795676,795851) (175)
$old_tok

␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣Exception␣for␣matching␣terminal␣:␣of␣ternary␣statement..
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣consider␣containers␣prefixed␣by␣?␣and␣:␣a␣match
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣||
----------
Range: (796121,796837) (716)
$jlimit

␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣and␣there␣is␣either␣at␣least␣one␣alignment␣token
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣or␣this␣is␣a␣single␣item␣following␣a␣list.␣␣This
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣latter␣rule␣is␣required␣for␣'December'␣to␣join
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣the␣following␣list:
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣my␣(@months)␣=␣(
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣␣␣␣␣'',␣␣␣␣␣␣␣'January',␣␣␣'February',␣'March',
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣␣␣␣␣'April',␣␣'May',␣␣␣␣␣␣␣'June',␣␣␣␣␣'July',
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣␣␣␣␣'August',␣'September',␣'October',␣␣'November',
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣␣␣␣␣'December'
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣);
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣If␣it␣doesn't␣then␣the␣-lp␣formatting␣will␣fail.
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣&&
----------
Range: (805572,805766) (194)
$padding_available␣)

␣␣␣␣␣␣␣␣␣␣␣␣#␣previously,␣there␣were␣upper␣bounds␣placed␣on␣padding␣here
␣␣␣␣␣␣␣␣␣␣␣␣#␣(maximum_whitespace_columns),␣but␣they␣were␣not␣really␣helpful

␣␣␣␣␣␣␣␣␣␣)
␣␣␣␣␣␣␣␣{
----------
Range: (812017,812375) (358)
do␣{
␣␣␣␣␣␣␣␣␣␣␣␣my␣$group_list_type␣=␣$group_lines[0]->get_list_type();
␣␣␣␣␣␣␣␣␣␣␣␣my␣(␣$a,␣$b,␣$c␣)␣=␣caller();
␣␣␣␣␣␣␣␣␣␣␣␣my␣$maximum_field_index␣=␣$group_lines[0]->get_jmax();
␣␣␣␣␣␣␣␣␣␣␣␣print␣STDOUT
"APPEND0:␣Flush␣called␣from␣$a␣$b␣$c␣fields=$maximum_field_index␣list=$group_list_type␣lines=$maximum_line_index␣extra=$extra_indent_ok\n";

␣␣␣␣␣␣␣␣};
----------
Range: (813820,814000) (180)
12

␣␣␣␣␣␣␣␣␣␣␣␣#␣or␣lines␣with␣differing␣number␣of␣alignment␣tokens
␣␣␣␣␣␣␣␣␣␣␣␣#␣TODO:␣this␣could␣be␣improved.␣␣It␣occasionally␣rejects
␣␣␣␣␣␣␣␣␣␣␣␣#␣good␣matches.
␣␣␣␣␣␣␣␣␣␣␣␣||
----------
Range: (845405,846075) (670)
_line_sink_object␣␣␣␣␣␣␣␣␣␣␣=>␣$line_sink_object,
␣␣␣␣␣␣␣␣_logger_object␣␣␣␣␣␣␣␣␣␣␣␣␣␣=>␣$logger_object,
␣␣␣␣␣␣␣␣_rOpts␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣=>␣$rOpts,
␣␣␣␣␣␣␣␣_output_line_number␣␣␣␣␣␣␣␣␣=>␣1,
␣␣␣␣␣␣␣␣_consecutive_blank_lines␣␣␣␣=>␣0,
␣␣␣␣␣␣␣␣_consecutive_nonblank_lines␣=>␣0,
␣␣␣␣␣␣␣␣_first_line_length_error␣␣␣␣=>␣0,
␣␣␣␣␣␣␣␣_max_line_length_error␣␣␣␣␣␣=>␣0,
␣␣␣␣␣␣␣␣_last_line_length_error␣␣␣␣␣=>␣0,
␣␣␣␣␣␣␣␣_first_line_length_error_at␣=>␣0,
␣␣␣␣␣␣␣␣_max_line_length_error_at␣␣␣=>␣0,
␣␣␣␣␣␣␣␣_last_line_length_error_at␣␣=>␣0,
␣␣␣␣␣␣␣␣_line_length_error_count␣␣␣␣=>␣0,
␣␣␣␣␣␣␣␣_max_output_line_length␣␣␣␣␣=>␣0,
␣␣␣␣␣␣␣␣_max_output_line_length_at␣␣=>␣0,
␣␣␣␣},␣$class;
----------
Range: (858537,859298) (761)
use␣vars␣qw{
␣␣$tokenizer_self

␣␣$last_nonblank_token
␣␣$last_nonblank_type
␣␣$last_nonblank_block_type
␣␣$statement_type
␣␣$in_attribute_list
␣␣$current_package
␣␣$context

␣␣%is_constant
␣␣%is_user_function
␣␣%user_function_prototype
␣␣%is_block_function
␣␣%is_block_list_function
␣␣%saw_function_definition

␣␣$brace_depth
␣␣$paren_depth
␣␣$square_bracket_depth

␣␣@current_depth
␣␣@total_depth
␣␣$total_depth
␣␣@nesting_sequence_number
␣␣@current_sequence_number
␣␣@paren_type
␣␣@paren_semicolon_count
␣␣@paren_structural_type
␣␣@brace_type
␣␣@brace_structural_type
␣␣@brace_context
␣␣@brace_package
␣␣@square_bracket_type
␣␣@square_bracket_structural_type
␣␣@depth_array
␣␣@nested_ternary_flag
␣␣@nested_statement_type
␣␣@starting_line_of_current_depth
};
----------
Range: (859348,859751) (403)
use␣vars␣qw{
␣␣%is_indirect_object_taker
␣␣%is_block_operator
␣␣%expecting_operator_token
␣␣%expecting_operator_types
␣␣%expecting_term_types
␣␣%expecting_term_token
␣␣%is_digraph
␣␣%is_file_test_operator
␣␣%is_trigraph
␣␣%is_valid_token_type
␣␣%is_keyword
␣␣%is_code_block_token
␣␣%really_want_term
␣␣@opening_brace_names
␣␣@closing_brace_names
␣␣%is_keyword_taking_list
␣␣%is_q_qq_qw_qx_qr_s_y_tr_m
};
----------
Range: (860494,860967) (473)
source_object␣␣␣␣␣␣␣␣=>␣undef,
␣␣␣␣␣␣␣␣debugger_object␣␣␣␣␣␣=>␣undef,
␣␣␣␣␣␣␣␣diagnostics_object␣␣␣=>␣undef,
␣␣␣␣␣␣␣␣logger_object␣␣␣␣␣␣␣␣=>␣undef,
␣␣␣␣␣␣␣␣starting_level␣␣␣␣␣␣␣=>␣undef,
␣␣␣␣␣␣␣␣indent_columns␣␣␣␣␣␣␣=>␣4,
␣␣␣␣␣␣␣␣tabsize␣␣␣␣␣␣␣␣␣␣␣␣␣␣=>␣8,
␣␣␣␣␣␣␣␣look_for_hash_bang␣␣␣=>␣0,
␣␣␣␣␣␣␣␣trim_qw␣␣␣␣␣␣␣␣␣␣␣␣␣␣=>␣1,
␣␣␣␣␣␣␣␣look_for_autoloader␣␣=>␣1,
␣␣␣␣␣␣␣␣look_for_selfloader␣␣=>␣1,
␣␣␣␣␣␣␣␣starting_line_number␣=>␣1,
␣␣␣␣␣␣␣␣extended_syntax␣␣␣␣␣␣=>␣0,
␣␣␣␣);
----------
Range: (862632,865276) (2644)
$tokenizer_self␣=␣{
␣␣␣␣␣␣␣␣_rhere_target_list␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣=>␣[],
␣␣␣␣␣␣␣␣_in_here_doc␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣=>␣0,
␣␣␣␣␣␣␣␣_here_doc_target␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣=>␣"",
␣␣␣␣␣␣␣␣_here_quote_character␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣=>␣"",
␣␣␣␣␣␣␣␣_in_data␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣=>␣0,
␣␣␣␣␣␣␣␣_in_end␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣=>␣0,
␣␣␣␣␣␣␣␣_in_format␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣=>␣0,
␣␣␣␣␣␣␣␣_in_error␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣=>␣0,
␣␣␣␣␣␣␣␣_in_pod␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣=>␣0,
␣␣␣␣␣␣␣␣_in_attribute_list␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣=>␣0,
␣␣␣␣␣␣␣␣_in_quote␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣=>␣0,
␣␣␣␣␣␣␣␣_quote_target␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣=>␣"",
␣␣␣␣␣␣␣␣_line_start_quote␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣=>␣-1,
␣␣␣␣␣␣␣␣_starting_level␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣=>␣$args{starting_level},
␣␣␣␣␣␣␣␣_know_starting_level␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣=>␣defined(␣$args{starting_level}␣),
␣␣␣␣␣␣␣␣_tabsize␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣=>␣$args{tabsize},
␣␣␣␣␣␣␣␣_indent_columns␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣=>␣$args{indent_columns},
␣␣␣␣␣␣␣␣_look_for_hash_bang␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣=>␣$args{look_for_hash_bang},
␣␣␣␣␣␣␣␣_trim_qw␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣=>␣$args{trim_qw},
␣␣␣␣␣␣␣␣_continuation_indentation␣␣␣␣␣␣␣␣␣␣␣=>␣$args{continuation_indentation},
␣␣␣␣␣␣␣␣_outdent_labels␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣=>␣$args{outdent_labels},
␣␣␣␣␣␣␣␣_last_line_number␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣=>␣$args{starting_line_number}␣-␣1,
␣␣␣␣␣␣␣␣_saw_perl_dash_P␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣=>␣0,
␣␣␣␣␣␣␣␣_saw_perl_dash_w␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣=>␣0,
␣␣␣␣␣␣␣␣_saw_use_strict␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣=>␣0,
␣␣␣␣␣␣␣␣_saw_v_string␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣=>␣0,
␣␣␣␣␣␣␣␣_look_for_autoloader␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣=>␣$args{look_for_autoloader},
␣␣␣␣␣␣␣␣_look_for_selfloader␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣=>␣$args{look_for_selfloader},
␣␣␣␣␣␣␣␣_saw_autoloader␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣=>␣0,
␣␣␣␣␣␣␣␣_saw_selfloader␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣=>␣0,
␣␣␣␣␣␣␣␣_saw_hash_bang␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣=>␣0,
␣␣␣␣␣␣␣␣_saw_end␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣=>␣0,
␣␣␣␣␣␣␣␣_saw_data␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣=>␣0,
␣␣␣␣␣␣␣␣_saw_negative_indentation␣␣␣␣␣␣␣␣␣␣␣=>␣0,
␣␣␣␣␣␣␣␣_started_tokenizing␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣=>␣0,
␣␣␣␣␣␣␣␣_line_buffer_object␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣=>␣$line_buffer_object,
␣␣␣␣␣␣␣␣_debugger_object␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣=>␣$args{debugger_object},
␣␣␣␣␣␣␣␣_diagnostics_object␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣=>␣$args{diagnostics_object},
␣␣␣␣␣␣␣␣_logger_object␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣=>␣$args{logger_object},
␣␣␣␣␣␣␣␣_unexpected_error_count␣␣␣␣␣␣␣␣␣␣␣␣␣=>␣0,
␣␣␣␣␣␣␣␣_started_looking_for_here_target_at␣=>␣0,
␣␣␣␣␣␣␣␣_nearly_matched_here_target_at␣␣␣␣␣␣=>␣undef,
␣␣␣␣␣␣␣␣_line_text␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣=>␣"",
␣␣␣␣␣␣␣␣_rlower_case_labels_at␣␣␣␣␣␣␣␣␣␣␣␣␣␣=>␣undef,
␣␣␣␣␣␣␣␣_extended_syntax␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣=>␣$args{extended_syntax},
␣␣␣␣};
----------
Range: (873764,874787) (1023)
my␣$line_of_tokens␣=␣{
␣␣␣␣␣␣␣␣_line_type␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣=>␣'EOF',
␣␣␣␣␣␣␣␣_line_text␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣=>␣$input_line,
␣␣␣␣␣␣␣␣_line_number␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣=>␣$input_line_number,
␣␣␣␣␣␣␣␣_rtoken_type␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣=>␣undef,
␣␣␣␣␣␣␣␣_rtokens␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣=>␣undef,
␣␣␣␣␣␣␣␣_rlevels␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣=>␣undef,
␣␣␣␣␣␣␣␣_rslevels␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣=>␣undef,
␣␣␣␣␣␣␣␣_rblock_type␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣=>␣undef,
␣␣␣␣␣␣␣␣_rcontainer_type␣␣␣␣␣␣␣␣␣␣␣=>␣undef,
␣␣␣␣␣␣␣␣_rcontainer_environment␣␣␣␣=>␣undef,
␣␣␣␣␣␣␣␣_rtype_sequence␣␣␣␣␣␣␣␣␣␣␣␣=>␣undef,
␣␣␣␣␣␣␣␣_rnesting_tokens␣␣␣␣␣␣␣␣␣␣␣=>␣undef,
␣␣␣␣␣␣␣␣_rci_levels␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣=>␣undef,
␣␣␣␣␣␣␣␣_rnesting_blocks␣␣␣␣␣␣␣␣␣␣␣=>␣undef,
␣␣␣␣␣␣␣␣_guessed_indentation_level␣=>␣0,
␣␣␣␣␣␣␣␣_starting_in_quote␣␣␣␣=>␣0,␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣to␣be␣set␣by␣subroutine
␣␣␣␣␣␣␣␣_ending_in_quote␣␣␣␣␣␣=>␣0,
␣␣␣␣␣␣␣␣_curly_brace_depth␣␣␣␣=>␣$brace_depth,
␣␣␣␣␣␣␣␣_square_bracket_depth␣=>␣$square_bracket_depth,
␣␣␣␣␣␣␣␣_paren_depth␣␣␣␣␣␣␣␣␣␣=>␣$paren_depth,
␣␣␣␣␣␣␣␣_quote_character␣␣␣␣␣␣=>␣'',
␣␣␣␣};
----------
Range: (894015,894453) (438)
my␣(
␣␣␣␣␣␣␣␣$block_type,␣␣␣␣␣␣␣␣$container_type,␣␣␣␣$expecting,
␣␣␣␣␣␣␣␣$i,␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣$i_tok,␣␣␣␣␣␣␣␣␣␣␣␣␣$input_line,
␣␣␣␣␣␣␣␣$input_line_number,␣$last_nonblank_i,␣␣␣$max_token_index,
␣␣␣␣␣␣␣␣$next_tok,␣␣␣␣␣␣␣␣␣␣$next_type,␣␣␣␣␣␣␣␣␣$peeked_ahead,
␣␣␣␣␣␣␣␣$prototype,␣␣␣␣␣␣␣␣␣$rhere_target_list,␣$rtoken_map,
␣␣␣␣␣␣␣␣$rtoken_type,␣␣␣␣␣␣␣$rtokens,␣␣␣␣␣␣␣␣␣␣␣$tok,
␣␣␣␣␣␣␣␣$type,␣␣␣␣␣␣␣␣␣␣␣␣␣␣$type_sequence,␣␣␣␣␣$indent_flag,
␣␣␣␣);
----------
Range: (895580,895942) (362)
my␣(
␣␣␣␣␣␣␣␣$nesting_token_string,␣␣␣␣␣␣$nesting_type_string,
␣␣␣␣␣␣␣␣$nesting_block_string,␣␣␣␣␣␣$nesting_block_flag,
␣␣␣␣␣␣␣␣$nesting_list_string,␣␣␣␣␣␣␣$nesting_list_flag,
␣␣␣␣␣␣␣␣$ci_string_in_tokenizer,␣␣␣␣$continuation_string_in_tokenizer,
␣␣␣␣␣␣␣␣$in_statement_continuation,␣$level_in_tokenizer,
␣␣␣␣␣␣␣␣$slevel_in_tokenizer,␣␣␣␣␣␣␣$rslevel_stack,
␣␣␣␣);
----------
Range: (896085,896386) (301)
my␣(
␣␣␣␣␣␣␣␣$last_nonblank_container_type,␣␣␣␣␣$last_nonblank_type_sequence,
␣␣␣␣␣␣␣␣$last_last_nonblank_token,␣␣␣␣␣␣␣␣␣$last_last_nonblank_type,
␣␣␣␣␣␣␣␣$last_last_nonblank_block_type,␣␣␣␣$last_last_nonblank_container_type,
␣␣␣␣␣␣␣␣$last_last_nonblank_type_sequence,␣$last_nonblank_prototype,
␣␣␣␣);
----------
Range: (898350,898803) (453)
$block_type,␣␣␣␣␣␣␣␣$container_type,␣␣␣␣$expecting,
␣␣␣␣␣␣␣␣␣␣␣␣$i,␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣$i_tok,␣␣␣␣␣␣␣␣␣␣␣␣␣$input_line,
␣␣␣␣␣␣␣␣␣␣␣␣$input_line_number,␣$last_nonblank_i,␣␣␣$max_token_index,
␣␣␣␣␣␣␣␣␣␣␣␣$next_tok,␣␣␣␣␣␣␣␣␣␣$next_type,␣␣␣␣␣␣␣␣␣$peeked_ahead,
␣␣␣␣␣␣␣␣␣␣␣␣$prototype,␣␣␣␣␣␣␣␣␣$rhere_target_list,␣$rtoken_map,
␣␣␣␣␣␣␣␣␣␣␣␣$rtoken_type,␣␣␣␣␣␣␣$rtokens,␣␣␣␣␣␣␣␣␣␣␣$tok,
␣␣␣␣␣␣␣␣␣␣␣␣$type,␣␣␣␣␣␣␣␣␣␣␣␣␣␣$type_sequence,␣␣␣␣␣$indent_flag,
␣␣␣␣␣␣␣␣];
----------
Range: (899047,899234) (187)
$in_quote,␣␣␣␣␣␣␣␣$quote_type,
␣␣␣␣␣␣␣␣␣␣␣␣$quote_character,␣$quote_pos,
␣␣␣␣␣␣␣␣␣␣␣␣$quote_depth,␣␣␣␣␣$quoted_string_1,
␣␣␣␣␣␣␣␣␣␣␣␣$quoted_string_2,␣$allowed_quote_modifiers,
␣␣␣␣␣␣␣␣];
----------
Range: (899365,899738) (373)
$nesting_token_string,␣␣␣␣␣␣$nesting_type_string,
␣␣␣␣␣␣␣␣␣␣␣␣$nesting_block_string,␣␣␣␣␣␣$nesting_block_flag,
␣␣␣␣␣␣␣␣␣␣␣␣$nesting_list_string,␣␣␣␣␣␣␣$nesting_list_flag,
␣␣␣␣␣␣␣␣␣␣␣␣$ci_string_in_tokenizer,␣␣␣␣$continuation_string_in_tokenizer,
␣␣␣␣␣␣␣␣␣␣␣␣$in_statement_continuation,␣$level_in_tokenizer,
␣␣␣␣␣␣␣␣␣␣␣␣$slevel_in_tokenizer,␣␣␣␣␣␣␣$rslevel_stack,
␣␣␣␣␣␣␣␣];
----------
Range: (899773,900110) (337)
$last_nonblank_container_type,
␣␣␣␣␣␣␣␣␣␣␣␣$last_nonblank_type_sequence,
␣␣␣␣␣␣␣␣␣␣␣␣$last_last_nonblank_token,
␣␣␣␣␣␣␣␣␣␣␣␣$last_last_nonblank_type,
␣␣␣␣␣␣␣␣␣␣␣␣$last_last_nonblank_block_type,
␣␣␣␣␣␣␣␣␣␣␣␣$last_last_nonblank_container_type,
␣␣␣␣␣␣␣␣␣␣␣␣$last_last_nonblank_type_sequence,
␣␣␣␣␣␣␣␣␣␣␣␣$last_nonblank_prototype,
␣␣␣␣␣␣␣␣];
----------
Range: (900332,900796) (464)
$block_type,␣␣␣␣␣␣␣␣$container_type,␣␣␣␣$expecting,
␣␣␣␣␣␣␣␣␣␣␣␣$i,␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣$i_tok,␣␣␣␣␣␣␣␣␣␣␣␣␣$input_line,
␣␣␣␣␣␣␣␣␣␣␣␣$input_line_number,␣$last_nonblank_i,␣␣␣$max_token_index,
␣␣␣␣␣␣␣␣␣␣␣␣$next_tok,␣␣␣␣␣␣␣␣␣␣$next_type,␣␣␣␣␣␣␣␣␣$peeked_ahead,
␣␣␣␣␣␣␣␣␣␣␣␣$prototype,␣␣␣␣␣␣␣␣␣$rhere_target_list,␣$rtoken_map,
␣␣␣␣␣␣␣␣␣␣␣␣$rtoken_type,␣␣␣␣␣␣␣$rtokens,␣␣␣␣␣␣␣␣␣␣␣$tok,
␣␣␣␣␣␣␣␣␣␣␣␣$type,␣␣␣␣␣␣␣␣␣␣␣␣␣␣$type_sequence,␣␣␣␣␣$indent_flag,
␣␣␣␣␣␣␣␣)␣=␣@{$rTV1};
----------
Range: (900820,901007) (187)
$routput_token_list,␣␣␣␣$routput_token_type,
␣␣␣␣␣␣␣␣␣␣␣␣$routput_block_type,␣␣␣␣$routput_container_type,
␣␣␣␣␣␣␣␣␣␣␣␣$routput_type_sequence,␣$routput_type_sequence,
␣␣␣␣␣␣␣␣)␣=␣@{$rTV2};
----------
Range: (901314,901698) (384)
$nesting_token_string,␣␣␣␣␣␣$nesting_type_string,
␣␣␣␣␣␣␣␣␣␣␣␣$nesting_block_string,␣␣␣␣␣␣$nesting_block_flag,
␣␣␣␣␣␣␣␣␣␣␣␣$nesting_list_string,␣␣␣␣␣␣␣$nesting_list_flag,
␣␣␣␣␣␣␣␣␣␣␣␣$ci_string_in_tokenizer,␣␣␣␣$continuation_string_in_tokenizer,
␣␣␣␣␣␣␣␣␣␣␣␣$in_statement_continuation,␣$level_in_tokenizer,
␣␣␣␣␣␣␣␣␣␣␣␣$slevel_in_tokenizer,␣␣␣␣␣␣␣$rslevel_stack,
␣␣␣␣␣␣␣␣)␣=␣@{$rTV5};
----------
Range: (901722,902070) (348)
$last_nonblank_container_type,
␣␣␣␣␣␣␣␣␣␣␣␣$last_nonblank_type_sequence,
␣␣␣␣␣␣␣␣␣␣␣␣$last_last_nonblank_token,
␣␣␣␣␣␣␣␣␣␣␣␣$last_last_nonblank_type,
␣␣␣␣␣␣␣␣␣␣␣␣$last_last_nonblank_block_type,
␣␣␣␣␣␣␣␣␣␣␣␣$last_last_nonblank_container_type,
␣␣␣␣␣␣␣␣␣␣␣␣$last_last_nonblank_type_sequence,
␣␣␣␣␣␣␣␣␣␣␣␣$last_nonblank_prototype,
␣␣␣␣␣␣␣␣)␣=␣@{$rTV6};
----------
Range: (903621,904745) (1124)
$tokenizer_self,␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣$last_nonblank_token,
␣␣␣␣␣␣␣␣␣␣␣␣$last_nonblank_type,␣␣␣␣␣␣␣␣␣␣␣␣␣$last_nonblank_block_type,
␣␣␣␣␣␣␣␣␣␣␣␣$statement_type,␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣$in_attribute_list,
␣␣␣␣␣␣␣␣␣␣␣␣$current_package,␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣$context,
␣␣␣␣␣␣␣␣␣␣␣␣%is_constant,␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣%is_user_function,
␣␣␣␣␣␣␣␣␣␣␣␣%user_function_prototype,␣␣␣␣␣␣␣␣%is_block_function,
␣␣␣␣␣␣␣␣␣␣␣␣%is_block_list_function,␣␣␣␣␣␣␣␣␣%saw_function_definition,
␣␣␣␣␣␣␣␣␣␣␣␣$brace_depth,␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣$paren_depth,
␣␣␣␣␣␣␣␣␣␣␣␣$square_bracket_depth,␣␣␣␣␣␣␣␣␣␣␣@current_depth,
␣␣␣␣␣␣␣␣␣␣␣␣@total_depth,␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣$total_depth,
␣␣␣␣␣␣␣␣␣␣␣␣@nesting_sequence_number,␣␣␣␣␣␣␣␣@current_sequence_number,
␣␣␣␣␣␣␣␣␣␣␣␣@paren_type,␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣@paren_semicolon_count,
␣␣␣␣␣␣␣␣␣␣␣␣@paren_structural_type,␣␣␣␣␣␣␣␣␣␣@brace_type,
␣␣␣␣␣␣␣␣␣␣␣␣@brace_structural_type,␣␣␣␣␣␣␣␣␣␣@brace_context,
␣␣␣␣␣␣␣␣␣␣␣␣@brace_package,␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣@square_bracket_type,
␣␣␣␣␣␣␣␣␣␣␣␣@square_bracket_structural_type,␣@depth_array,
␣␣␣␣␣␣␣␣␣␣␣␣@starting_line_of_current_depth,␣@nested_ternary_flag,
␣␣␣␣␣␣␣␣␣␣␣␣@nested_statement_type,
␣␣␣␣␣␣␣␣);
----------
Range: (908877,938255) (29378)
my␣$tokenization_code␣=␣{

␣␣␣␣␣␣␣␣#␣no␣special␣code␣for␣these␣types␣yet,␣but␣syntax␣checks
␣␣␣␣␣␣␣␣#␣could␣be␣added

##␣␣␣␣␣␣'!'␣␣␣=>␣undef,
##␣␣␣␣␣␣'!='␣␣=>␣undef,
##␣␣␣␣␣␣'!~'␣␣=>␣undef,
##␣␣␣␣␣␣'%='␣␣=>␣undef,
##␣␣␣␣␣␣'&&='␣=>␣undef,
##␣␣␣␣␣␣'&='␣␣=>␣undef,
##␣␣␣␣␣␣'+='␣␣=>␣undef,
##␣␣␣␣␣␣'-='␣␣=>␣undef,
##␣␣␣␣␣␣'..'␣␣=>␣undef,
##␣␣␣␣␣␣'..'␣␣=>␣undef,
##␣␣␣␣␣␣'...'␣=>␣undef,
##␣␣␣␣␣␣'.='␣␣=>␣undef,
##␣␣␣␣␣␣'<<='␣=>␣undef,
##␣␣␣␣␣␣'<='␣␣=>␣undef,
##␣␣␣␣␣␣'<=>'␣=>␣undef,
##␣␣␣␣␣␣'<>'␣␣=>␣undef,
##␣␣␣␣␣␣'='␣␣␣=>␣undef,
##␣␣␣␣␣␣'=='␣␣=>␣undef,
##␣␣␣␣␣␣'=~'␣␣=>␣undef,
##␣␣␣␣␣␣'>='␣␣=>␣undef,
##␣␣␣␣␣␣'>>'␣␣=>␣undef,
##␣␣␣␣␣␣'>>='␣=>␣undef,
##␣␣␣␣␣␣'\\'␣␣=>␣undef,
##␣␣␣␣␣␣'^='␣␣=>␣undef,
##␣␣␣␣␣␣'|='␣␣=>␣undef,
##␣␣␣␣␣␣'||='␣=>␣undef,
##␣␣␣␣␣␣'//='␣=>␣undef,
##␣␣␣␣␣␣'~'␣␣␣=>␣undef,
##␣␣␣␣␣␣'~~'␣␣=>␣undef,
##␣␣␣␣␣␣'!~~'␣␣=>␣undef,

␣␣␣␣␣␣␣␣'>'␣=>␣sub␣{
␣␣␣␣␣␣␣␣␣␣␣␣error_if_expecting_TERM()
␣␣␣␣␣␣␣␣␣␣␣␣␣␣if␣(␣$expecting␣==␣TERM␣);
␣␣␣␣␣␣␣␣},
␣␣␣␣␣␣␣␣'|'␣=>␣sub␣{
␣␣␣␣␣␣␣␣␣␣␣␣error_if_expecting_TERM()
␣␣␣␣␣␣␣␣␣␣␣␣␣␣if␣(␣$expecting␣==␣TERM␣);
␣␣␣␣␣␣␣␣},
␣␣␣␣␣␣␣␣'$'␣=>␣sub␣{

␣␣␣␣␣␣␣␣␣␣␣␣#␣start␣looking␣for␣a␣scalar
␣␣␣␣␣␣␣␣␣␣␣␣error_if_expecting_OPERATOR("Scalar")
␣␣␣␣␣␣␣␣␣␣␣␣␣␣if␣(␣$expecting␣==␣OPERATOR␣);
␣␣␣␣␣␣␣␣␣␣␣␣scan_identifier();

␣␣␣␣␣␣␣␣␣␣␣␣if␣(␣$identifier␣eq␣'$^W'␣)␣{
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣$tokenizer_self->{_saw_perl_dash_w}␣=␣1;
␣␣␣␣␣␣␣␣␣␣␣␣}

␣␣␣␣␣␣␣␣␣␣␣␣#␣Check␣for␣identifier␣in␣indirect␣object␣slot
␣␣␣␣␣␣␣␣␣␣␣␣#␣(vorboard.pl,␣sort.t).␣␣Something␣like:
␣␣␣␣␣␣␣␣␣␣␣␣#␣␣␣/^(print|printf|sort|exec|system)$/
␣␣␣␣␣␣␣␣␣␣␣␣if␣(
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣$is_indirect_object_taker{$last_nonblank_token}

␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣||␣(␣(␣$last_nonblank_token␣eq␣'('␣)
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣&&␣$is_indirect_object_taker{␣$paren_type[$paren_depth]␣}␣)
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣||␣(␣$last_nonblank_type␣=~␣/^[Uw]$/␣)␣␣␣␣#␣possible␣object
␣␣␣␣␣␣␣␣␣␣␣␣␣␣)
␣␣␣␣␣␣␣␣␣␣␣␣{
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣$type␣=␣'Z';
␣␣␣␣␣␣␣␣␣␣␣␣}
␣␣␣␣␣␣␣␣},
␣␣␣␣␣␣␣␣'('␣=>␣sub␣{

␣␣␣␣␣␣␣␣␣␣␣␣++$paren_depth;
␣␣␣␣␣␣␣␣␣␣␣␣$paren_semicolon_count[$paren_depth]␣=␣0;
␣␣␣␣␣␣␣␣␣␣␣␣if␣($want_paren)␣{
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣$container_type␣=␣$want_paren;
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣$want_paren␣␣␣␣␣=␣"";
␣␣␣␣␣␣␣␣␣␣␣␣}
␣␣␣␣␣␣␣␣␣␣␣␣elsif␣(␣$statement_type␣=~␣/^sub/␣)␣{
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣$container_type␣=␣$statement_type;
␣␣␣␣␣␣␣␣␣␣␣␣}
␣␣␣␣␣␣␣␣␣␣␣␣else␣{
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣$container_type␣=␣$last_nonblank_token;

␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣We␣can␣check␣for␣a␣syntax␣error␣here␣of␣unexpected␣'(',
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣but␣this␣is␣going␣to␣get␣messy...
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣if␣(
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣$expecting␣==␣OPERATOR

␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣be␣sure␣this␣is␣not␣a␣method␣call␣of␣the␣form
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣&method(...),␣$method->(..),␣&{method}(...),
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣$ref[2](list)␣is␣ok␣&␣short␣for␣$ref[2]->(list)
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣NOTE:␣at␣present,␣braces␣in␣something␣like␣&{␣xxx␣}
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣are␣not␣marked␣as␣a␣block,␣we␣might␣have␣a␣method␣call
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣&&␣$last_nonblank_token␣!~␣/^([\]\}\&]|\-\>)/

␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣)
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣{

␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣ref:␣camel␣3␣p␣703.
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣if␣(␣$last_last_nonblank_token␣eq␣'do'␣)␣{
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣complain(
"do␣SUBROUTINE␣is␣deprecated;␣consider␣&␣or␣->␣notation\n"
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣);
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣}
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣else␣{

␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣if␣this␣is␣an␣empty␣list,␣(),␣then␣it␣is␣not␣an
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣error;␣for␣example,␣we␣might␣have␣a␣constant␣pi␣and
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣invoke␣it␣with␣pi()␣or␣just␣pi;
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣my␣(␣$next_nonblank_token,␣$i_next␣)␣=
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣find_next_nonblank_token(␣$i,␣$rtokens,
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣$max_token_index␣);
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣if␣(␣$next_nonblank_token␣ne␣')'␣)␣{
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣my␣$hint;
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣error_if_expecting_OPERATOR('(');

␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣if␣(␣$last_nonblank_type␣eq␣'C'␣)␣{
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣$hint␣=
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣"$last_nonblank_token␣has␣a␣void␣prototype\n";
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣}
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣elsif␣(␣$last_nonblank_type␣eq␣'i'␣)␣{
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣if␣(␣␣␣$i_tok␣>␣0
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣&&␣$last_nonblank_token␣=~␣/^\$/␣)
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣{
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣$hint␣=
"Do␣you␣mean␣'$last_nonblank_token->('␣?\n";
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣}
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣}
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣if␣($hint)␣{
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣interrupt_logfile();
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣warning($hint);
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣resume_logfile();
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣}
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣}␣##␣end␣if␣(␣$next_nonblank_token...
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣}␣##␣end␣else␣[␣if␣(␣$last_last_nonblank_token...
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣}␣##␣end␣if␣(␣$expecting␣==␣OPERATOR...
␣␣␣␣␣␣␣␣␣␣␣␣}
␣␣␣␣␣␣␣␣␣␣␣␣$paren_type[$paren_depth]␣=␣$container_type;
␣␣␣␣␣␣␣␣␣␣␣␣(␣$type_sequence,␣$indent_flag␣)␣=
␣␣␣␣␣␣␣␣␣␣␣␣␣␣increase_nesting_depth(␣PAREN,␣$$rtoken_map[$i_tok]␣);

␣␣␣␣␣␣␣␣␣␣␣␣#␣propagate␣types␣down␣through␣nested␣parens
␣␣␣␣␣␣␣␣␣␣␣␣#␣for␣example:␣the␣second␣paren␣in␣'if␣(('␣would␣be␣structural
␣␣␣␣␣␣␣␣␣␣␣␣#␣since␣the␣first␣is.

␣␣␣␣␣␣␣␣␣␣␣␣if␣(␣$last_nonblank_token␣eq␣'('␣)␣{
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣$type␣=␣$last_nonblank_type;
␣␣␣␣␣␣␣␣␣␣␣␣}

␣␣␣␣␣␣␣␣␣␣␣␣#␣␣␣␣␣We␣exclude␣parens␣as␣structural␣after␣a␣','␣because␣it
␣␣␣␣␣␣␣␣␣␣␣␣#␣␣␣␣␣causes␣subtle␣problems␣with␣continuation␣indentation␣for
␣␣␣␣␣␣␣␣␣␣␣␣#␣␣␣␣␣something␣like␣this,␣where␣the␣first␣'or'␣will␣not␣get
␣␣␣␣␣␣␣␣␣␣␣␣#␣␣␣␣␣indented.
␣␣␣␣␣␣␣␣␣␣␣␣#
␣␣␣␣␣␣␣␣␣␣␣␣#␣␣␣␣␣␣␣␣␣assert(
␣␣␣␣␣␣␣␣␣␣␣␣#␣␣␣␣␣␣␣␣␣␣␣␣␣__LINE__,
␣␣␣␣␣␣␣␣␣␣␣␣#␣␣␣␣␣␣␣␣␣␣␣␣␣(␣not␣defined␣$check␣)
␣␣␣␣␣␣␣␣␣␣␣␣#␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣or␣ref␣$check
␣␣␣␣␣␣␣␣␣␣␣␣#␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣or␣$check␣eq␣"new"
␣␣␣␣␣␣␣␣␣␣␣␣#␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣or␣$check␣eq␣"old",
␣␣␣␣␣␣␣␣␣␣␣␣#␣␣␣␣␣␣␣␣␣);
␣␣␣␣␣␣␣␣␣␣␣␣#
␣␣␣␣␣␣␣␣␣␣␣␣#␣␣␣␣␣Likewise,␣we␣exclude␣parens␣where␣a␣statement␣can␣start
␣␣␣␣␣␣␣␣␣␣␣␣#␣␣␣␣␣because␣of␣problems␣with␣continuation␣indentation,␣like
␣␣␣␣␣␣␣␣␣␣␣␣#␣␣␣␣␣these:
␣␣␣␣␣␣␣␣␣␣␣␣#
␣␣␣␣␣␣␣␣␣␣␣␣#␣␣␣␣␣␣␣␣␣($firstline␣=~␣/^#\!.*perl/)
␣␣␣␣␣␣␣␣␣␣␣␣#␣␣␣␣␣␣␣␣␣and␣(print␣$File::Find::name,␣"\n")
␣␣␣␣␣␣␣␣␣␣␣␣#␣␣␣␣␣␣␣␣␣␣␣and␣(return␣1);
␣␣␣␣␣␣␣␣␣␣␣␣#
␣␣␣␣␣␣␣␣␣␣␣␣#␣␣␣␣␣␣␣␣␣(ref($usage_fref)␣=~␣/CODE/)
␣␣␣␣␣␣␣␣␣␣␣␣#␣␣␣␣␣␣␣␣␣?␣&$usage_fref
␣␣␣␣␣␣␣␣␣␣␣␣#␣␣␣␣␣␣␣␣␣␣␣:␣(&blast_usage,␣&blast_params,␣&blast_general_params);

␣␣␣␣␣␣␣␣␣␣␣␣else␣{
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣$type␣=␣'{';
␣␣␣␣␣␣␣␣␣␣␣␣}

␣␣␣␣␣␣␣␣␣␣␣␣if␣(␣$last_nonblank_type␣eq␣')'␣)␣{
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣warning(
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣"Syntax␣error?␣found␣token␣'$last_nonblank_type'␣then␣'('\n"
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣);
␣␣␣␣␣␣␣␣␣␣␣␣}
␣␣␣␣␣␣␣␣␣␣␣␣$paren_structural_type[$paren_depth]␣=␣$type;

␣␣␣␣␣␣␣␣},
␣␣␣␣␣␣␣␣')'␣=>␣sub␣{
␣␣␣␣␣␣␣␣␣␣␣␣(␣$type_sequence,␣$indent_flag␣)␣=
␣␣␣␣␣␣␣␣␣␣␣␣␣␣decrease_nesting_depth(␣PAREN,␣$$rtoken_map[$i_tok]␣);

␣␣␣␣␣␣␣␣␣␣␣␣if␣(␣$paren_structural_type[$paren_depth]␣eq␣'{'␣)␣{
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣$type␣=␣'}';
␣␣␣␣␣␣␣␣␣␣␣␣}

␣␣␣␣␣␣␣␣␣␣␣␣$container_type␣=␣$paren_type[$paren_depth];

␣␣␣␣␣␣␣␣␣␣␣␣#␣␣␣␣/^(for|foreach)$/
␣␣␣␣␣␣␣␣␣␣␣␣if␣(␣$is_for_foreach{␣$paren_type[$paren_depth]␣}␣)␣{
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣my␣$num_sc␣=␣$paren_semicolon_count[$paren_depth];
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣if␣(␣$num_sc␣>␣0␣&&␣$num_sc␣!=␣2␣)␣{
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣warning("Expected␣2␣';'␣in␣'for(;;)'␣but␣saw␣$num_sc\n");
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣}
␣␣␣␣␣␣␣␣␣␣␣␣}

␣␣␣␣␣␣␣␣␣␣␣␣if␣(␣$paren_depth␣>␣0␣)␣{␣$paren_depth--␣}
␣␣␣␣␣␣␣␣},
␣␣␣␣␣␣␣␣','␣=>␣sub␣{
␣␣␣␣␣␣␣␣␣␣␣␣if␣(␣$last_nonblank_type␣eq␣','␣)␣{
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣complain("Repeated␣','s␣\n");
␣␣␣␣␣␣␣␣␣␣␣␣}

␣␣␣␣␣␣␣␣␣␣␣␣#␣patch␣for␣operator_expected:␣note␣if␣we␣are␣in␣the␣list␣(use.t)
␣␣␣␣␣␣␣␣␣␣␣␣if␣(␣$statement_type␣eq␣'use'␣)␣{␣$statement_type␣=␣'_use'␣}
##␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣FIXME:␣need␣to␣move␣this␣elsewhere,␣perhaps␣check␣after␣a␣'('
##␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣elsif␣($last_nonblank_token␣eq␣'(')␣{
##␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣warning("Leading␣','s␣illegal␣in␣some␣versions␣of␣perl\n");
##␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣}
␣␣␣␣␣␣␣␣},
␣␣␣␣␣␣␣␣';'␣=>␣sub␣{
␣␣␣␣␣␣␣␣␣␣␣␣$context␣␣␣␣␣␣␣␣=␣UNKNOWN_CONTEXT;
␣␣␣␣␣␣␣␣␣␣␣␣$statement_type␣=␣'';
␣␣␣␣␣␣␣␣␣␣␣␣$want_paren␣␣␣␣␣=␣"";

␣␣␣␣␣␣␣␣␣␣␣␣#␣␣␣␣/^(for|foreach)$/
␣␣␣␣␣␣␣␣␣␣␣␣if␣(␣$is_for_foreach{␣$paren_type[$paren_depth]␣}␣)
␣␣␣␣␣␣␣␣␣␣␣␣{␣␣␣␣#␣mark␣;␣in␣for␣loop

␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣Be␣careful:␣we␣do␣not␣want␣a␣semicolon␣such␣as␣the
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣following␣to␣be␣included:
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣␣␣␣for␣(sort␣{strcoll($a,$b);}␣keys␣%investments)␣{

␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣if␣(␣␣␣$brace_depth␣==␣$depth_array[PAREN][BRACE][$paren_depth]
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣&&␣$square_bracket_depth␣==
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣$depth_array[PAREN][SQUARE_BRACKET][$paren_depth]␣)
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣{

␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣$type␣=␣'f';
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣$paren_semicolon_count[$paren_depth]++;
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣}
␣␣␣␣␣␣␣␣␣␣␣␣}

␣␣␣␣␣␣␣␣},
␣␣␣␣␣␣␣␣'"'␣=>␣sub␣{
␣␣␣␣␣␣␣␣␣␣␣␣error_if_expecting_OPERATOR("String")
␣␣␣␣␣␣␣␣␣␣␣␣␣␣if␣(␣$expecting␣==␣OPERATOR␣);
␣␣␣␣␣␣␣␣␣␣␣␣$in_quote␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣=␣1;
␣␣␣␣␣␣␣␣␣␣␣␣$type␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣=␣'Q';
␣␣␣␣␣␣␣␣␣␣␣␣$allowed_quote_modifiers␣=␣"";
␣␣␣␣␣␣␣␣},
␣␣␣␣␣␣␣␣"'"␣=>␣sub␣{
␣␣␣␣␣␣␣␣␣␣␣␣error_if_expecting_OPERATOR("String")
␣␣␣␣␣␣␣␣␣␣␣␣␣␣if␣(␣$expecting␣==␣OPERATOR␣);
␣␣␣␣␣␣␣␣␣␣␣␣$in_quote␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣=␣1;
␣␣␣␣␣␣␣␣␣␣␣␣$type␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣=␣'Q';
␣␣␣␣␣␣␣␣␣␣␣␣$allowed_quote_modifiers␣=␣"";
␣␣␣␣␣␣␣␣},
␣␣␣␣␣␣␣␣'`'␣=>␣sub␣{
␣␣␣␣␣␣␣␣␣␣␣␣error_if_expecting_OPERATOR("String")
␣␣␣␣␣␣␣␣␣␣␣␣␣␣if␣(␣$expecting␣==␣OPERATOR␣);
␣␣␣␣␣␣␣␣␣␣␣␣$in_quote␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣=␣1;
␣␣␣␣␣␣␣␣␣␣␣␣$type␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣=␣'Q';
␣␣␣␣␣␣␣␣␣␣␣␣$allowed_quote_modifiers␣=␣"";
␣␣␣␣␣␣␣␣},
␣␣␣␣␣␣␣␣'/'␣=>␣sub␣{
␣␣␣␣␣␣␣␣␣␣␣␣my␣$is_pattern;

␣␣␣␣␣␣␣␣␣␣␣␣if␣(␣$expecting␣==␣UNKNOWN␣)␣{␣␣␣␣#␣indeterminate,␣must␣guess..
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣my␣$msg;
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣(␣$is_pattern,␣$msg␣)␣=
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣guess_if_pattern_or_division(␣$i,␣$rtokens,␣$rtoken_map,
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣$max_token_index␣);

␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣if␣($msg)␣{
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣write_diagnostics("DIVIDE:$msg\n");
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣write_logfile_entry($msg);
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣}
␣␣␣␣␣␣␣␣␣␣␣␣}
␣␣␣␣␣␣␣␣␣␣␣␣else␣{␣$is_pattern␣=␣(␣$expecting␣==␣TERM␣)␣}

␣␣␣␣␣␣␣␣␣␣␣␣if␣($is_pattern)␣{
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣$in_quote␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣=␣1;
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣$type␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣=␣'Q';
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣$allowed_quote_modifiers␣=␣'[msixpodualngc]';
␣␣␣␣␣␣␣␣␣␣␣␣}
␣␣␣␣␣␣␣␣␣␣␣␣else␣{␣␣␣␣#␣not␣a␣pattern;␣check␣for␣a␣/=␣token

␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣if␣(␣$$rtokens[␣$i␣+␣1␣]␣eq␣'='␣)␣{␣␣␣␣#␣form␣token␣/=
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣$i++;
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣$tok␣␣=␣'/=';
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣$type␣=␣$tok;
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣}

␣␣␣␣␣␣␣␣␣␣␣␣␣␣#DEBUG␣-␣collecting␣info␣on␣what␣tokens␣follow␣a␣divide
␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣for␣development␣of␣guessing␣algorithm
␣␣␣␣␣␣␣␣␣␣␣␣␣␣#if␣(␣numerator_expected(␣$i,␣$rtokens,␣$max_token_index␣)␣<␣0␣)␣{
␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣␣␣␣#write_diagnostics(␣"DIVIDE?␣$input_line\n"␣);
␣␣␣␣␣␣␣␣␣␣␣␣␣␣#}
␣␣␣␣␣␣␣␣␣␣␣␣}
␣␣␣␣␣␣␣␣},
␣␣␣␣␣␣␣␣'{'␣=>␣sub␣{

␣␣␣␣␣␣␣␣␣␣␣␣#␣if␣we␣just␣saw␣a␣')',␣we␣will␣label␣this␣block␣with
␣␣␣␣␣␣␣␣␣␣␣␣#␣its␣type.␣␣We␣need␣to␣do␣this␣to␣allow␣sub
␣␣␣␣␣␣␣␣␣␣␣␣#␣code_block_type␣to␣determine␣if␣this␣brace␣starts␣a
␣␣␣␣␣␣␣␣␣␣␣␣#␣code␣block␣or␣anonymous␣hash.␣␣(The␣type␣of␣a␣paren
␣␣␣␣␣␣␣␣␣␣␣␣#␣pair␣is␣the␣preceding␣token,␣such␣as␣'if',␣'else',
␣␣␣␣␣␣␣␣␣␣␣␣#␣etc).
␣␣␣␣␣␣␣␣␣␣␣␣$container_type␣=␣"";

␣␣␣␣␣␣␣␣␣␣␣␣#␣ATTRS:␣for␣a␣'{'␣following␣an␣attribute␣list,␣reset
␣␣␣␣␣␣␣␣␣␣␣␣#␣things␣to␣look␣like␣we␣just␣saw␣the␣sub␣name
␣␣␣␣␣␣␣␣␣␣␣␣if␣(␣$statement_type␣=~␣/^sub/␣)␣{
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣$last_nonblank_token␣=␣$statement_type;
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣$last_nonblank_type␣␣=␣'i';
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣$statement_type␣␣␣␣␣␣=␣"";
␣␣␣␣␣␣␣␣␣␣␣␣}

␣␣␣␣␣␣␣␣␣␣␣␣#␣patch␣for␣SWITCH/CASE:␣hide␣these␣keywords␣from␣an␣immediately
␣␣␣␣␣␣␣␣␣␣␣␣#␣following␣opening␣brace
␣␣␣␣␣␣␣␣␣␣␣␣elsif␣(␣(␣$statement_type␣eq␣'case'␣||␣$statement_type␣eq␣'when'␣)
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣&&␣$statement_type␣eq␣$last_nonblank_token␣)
␣␣␣␣␣␣␣␣␣␣␣␣{
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣$last_nonblank_token␣=␣";";
␣␣␣␣␣␣␣␣␣␣␣␣}

␣␣␣␣␣␣␣␣␣␣␣␣elsif␣(␣$last_nonblank_token␣eq␣')'␣)␣{
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣$last_nonblank_token␣=␣$paren_type[␣$paren_depth␣+␣1␣];

␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣defensive␣move␣in␣case␣of␣a␣nesting␣error␣(pbug.t)
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣in␣which␣this␣')'␣had␣no␣previous␣'('
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣this␣nesting␣error␣will␣have␣been␣caught
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣if␣(␣!defined($last_nonblank_token)␣)␣{
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣$last_nonblank_token␣=␣'if';
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣}

␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣check␣for␣syntax␣error␣here;
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣unless␣(␣$is_blocktype_with_paren{$last_nonblank_token}␣)␣{
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣if␣(␣$tokenizer_self->{'_extended_syntax'}␣)␣{

␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣we␣append␣a␣trailing␣()␣to␣mark␣this␣as␣an␣unknown
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣block␣type.␣␣This␣allows␣perltidy␣to␣format␣some
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣common␣extensions␣of␣perl␣syntax.
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣This␣is␣used␣by␣sub␣code_block_type
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣$last_nonblank_token␣.=␣'()';
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣}
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣else␣{
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣my␣$list␣=
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣join(␣'␣',␣sort␣keys␣%is_blocktype_with_paren␣);
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣warning(
"syntax␣error␣at␣')␣{',␣didn't␣see␣one␣of:␣<<$list>>;␣If␣this␣code␣is␣okay␣try␣using␣the␣-xs␣flag\n"
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣);
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣}
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣}
␣␣␣␣␣␣␣␣␣␣␣␣}

␣␣␣␣␣␣␣␣␣␣␣␣#␣patch␣for␣paren-less␣for/foreach␣glitch,␣part␣2.
␣␣␣␣␣␣␣␣␣␣␣␣#␣see␣note␣below␣under␣'qw'
␣␣␣␣␣␣␣␣␣␣␣␣elsif␣($last_nonblank_token␣eq␣'qw'
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣&&␣$is_for_foreach{$want_paren}␣)
␣␣␣␣␣␣␣␣␣␣␣␣{
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣$last_nonblank_token␣=␣$want_paren;
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣if␣(␣$last_last_nonblank_token␣eq␣$want_paren␣)␣{
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣warning(
"syntax␣error␣at␣'$want_paren␣..␣{'␣--␣missing␣\$␣loop␣variable\n"
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣);

␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣}
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣$want_paren␣=␣"";
␣␣␣␣␣␣␣␣␣␣␣␣}

␣␣␣␣␣␣␣␣␣␣␣␣#␣now␣identify␣which␣of␣the␣three␣possible␣types␣of
␣␣␣␣␣␣␣␣␣␣␣␣#␣curly␣braces␣we␣have:␣hash␣index␣container,␣anonymous
␣␣␣␣␣␣␣␣␣␣␣␣#␣hash␣reference,␣or␣code␣block.

␣␣␣␣␣␣␣␣␣␣␣␣#␣non-structural␣(hash␣index)␣curly␣brace␣pair
␣␣␣␣␣␣␣␣␣␣␣␣#␣get␣marked␣'L'␣and␣'R'
␣␣␣␣␣␣␣␣␣␣␣␣if␣(␣is_non_structural_brace()␣)␣{
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣$type␣=␣'L';

␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣patch␣for␣SWITCH/CASE:
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣allow␣paren-less␣identifier␣after␣'when'
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣if␣the␣brace␣is␣preceded␣by␣a␣space
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣if␣(␣␣␣$statement_type␣eq␣'when'
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣&&␣$last_nonblank_type␣eq␣'i'
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣&&␣$last_last_nonblank_type␣eq␣'k'
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣&&␣(␣$i_tok␣==␣0␣||␣$rtoken_type->[␣$i_tok␣-␣1␣]␣eq␣'b'␣)␣)
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣{
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣$type␣␣␣␣␣␣␣=␣'{';
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣$block_type␣=␣$statement_type;
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣}
␣␣␣␣␣␣␣␣␣␣␣␣}

␣␣␣␣␣␣␣␣␣␣␣␣#␣code␣and␣anonymous␣hash␣have␣the␣same␣type,␣'{',␣but␣are
␣␣␣␣␣␣␣␣␣␣␣␣#␣distinguished␣by␣'block_type',
␣␣␣␣␣␣␣␣␣␣␣␣#␣which␣will␣be␣blank␣for␣an␣anonymous␣hash
␣␣␣␣␣␣␣␣␣␣␣␣else␣{

␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣$block_type␣=␣code_block_type(␣$i_tok,␣$rtokens,␣$rtoken_type,
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣$max_token_index␣);

␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣patch␣to␣promote␣bareword␣type␣to␣function␣taking␣block
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣if␣(␣␣␣$block_type
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣&&␣$last_nonblank_type␣eq␣'w'
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣&&␣$last_nonblank_i␣>=␣0␣)
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣{
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣if␣(␣$routput_token_type->[$last_nonblank_i]␣eq␣'w'␣)␣{
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣$routput_token_type->[$last_nonblank_i]␣=␣'G';
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣}
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣}

␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣patch␣for␣SWITCH/CASE:␣if␣we␣find␣a␣stray␣opening␣block␣brace
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣where␣we␣might␣accept␣a␣'case'␣or␣'when'␣block,␣then␣take␣it
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣if␣(␣␣␣$statement_type␣eq␣'case'
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣||␣$statement_type␣eq␣'when'␣)
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣{
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣if␣(␣!$block_type␣||␣$block_type␣eq␣'}'␣)␣{
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣$block_type␣=␣$statement_type;
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣}
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣}
␣␣␣␣␣␣␣␣␣␣␣␣}

␣␣␣␣␣␣␣␣␣␣␣␣$brace_type[␣++$brace_depth␣]␣␣␣␣␣␣␣␣=␣$block_type;
␣␣␣␣␣␣␣␣␣␣␣␣$brace_package[$brace_depth]␣␣␣␣␣␣␣␣␣=␣$current_package;
␣␣␣␣␣␣␣␣␣␣␣␣$brace_structural_type[$brace_depth]␣=␣$type;
␣␣␣␣␣␣␣␣␣␣␣␣$brace_context[$brace_depth]␣␣␣␣␣␣␣␣␣=␣$context;
␣␣␣␣␣␣␣␣␣␣␣␣(␣$type_sequence,␣$indent_flag␣)␣=
␣␣␣␣␣␣␣␣␣␣␣␣␣␣increase_nesting_depth(␣BRACE,␣$$rtoken_map[$i_tok]␣);
␣␣␣␣␣␣␣␣},
␣␣␣␣␣␣␣␣'}'␣=>␣sub␣{
␣␣␣␣␣␣␣␣␣␣␣␣$block_type␣=␣$brace_type[$brace_depth];
␣␣␣␣␣␣␣␣␣␣␣␣if␣($block_type)␣{␣$statement_type␣=␣''␣}
␣␣␣␣␣␣␣␣␣␣␣␣if␣(␣defined(␣$brace_package[$brace_depth]␣)␣)␣{
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣$current_package␣=␣$brace_package[$brace_depth];
␣␣␣␣␣␣␣␣␣␣␣␣}

␣␣␣␣␣␣␣␣␣␣␣␣#␣can␣happen␣on␣brace␣error␣(caught␣elsewhere)
␣␣␣␣␣␣␣␣␣␣␣␣else␣{
␣␣␣␣␣␣␣␣␣␣␣␣}
␣␣␣␣␣␣␣␣␣␣␣␣(␣$type_sequence,␣$indent_flag␣)␣=
␣␣␣␣␣␣␣␣␣␣␣␣␣␣decrease_nesting_depth(␣BRACE,␣$$rtoken_map[$i_tok]␣);

␣␣␣␣␣␣␣␣␣␣␣␣if␣(␣$brace_structural_type[$brace_depth]␣eq␣'L'␣)␣{
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣$type␣=␣'R';
␣␣␣␣␣␣␣␣␣␣␣␣}

␣␣␣␣␣␣␣␣␣␣␣␣#␣propagate␣type␣information␣for␣'do'␣and␣'eval'␣blocks,␣and␣also
␣␣␣␣␣␣␣␣␣␣␣␣#␣for␣smartmatch␣operator.␣␣This␣is␣necessary␣to␣enable␣us␣to␣know
␣␣␣␣␣␣␣␣␣␣␣␣#␣if␣an␣operator␣or␣term␣is␣expected␣next.
␣␣␣␣␣␣␣␣␣␣␣␣if␣(␣$is_block_operator{$block_type}␣)␣{
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣$tok␣=␣$block_type;
␣␣␣␣␣␣␣␣␣␣␣␣}

␣␣␣␣␣␣␣␣␣␣␣␣$context␣=␣$brace_context[$brace_depth];
␣␣␣␣␣␣␣␣␣␣␣␣if␣(␣$brace_depth␣>␣0␣)␣{␣$brace_depth--;␣}
␣␣␣␣␣␣␣␣},
␣␣␣␣␣␣␣␣'&'␣=>␣sub␣{␣␣␣␣#␣maybe␣sub␣call?␣start␣looking

␣␣␣␣␣␣␣␣␣␣␣␣#␣We␣have␣to␣check␣for␣sub␣call␣unless␣we␣are␣sure␣we
␣␣␣␣␣␣␣␣␣␣␣␣#␣are␣expecting␣an␣operator.␣␣This␣example␣from␣s2p
␣␣␣␣␣␣␣␣␣␣␣␣#␣got␣mistaken␣as␣a␣q␣operator␣in␣an␣early␣version:
␣␣␣␣␣␣␣␣␣␣␣␣#␣␣␣print␣BODY␣&q(<<'EOT');
␣␣␣␣␣␣␣␣␣␣␣␣if␣(␣$expecting␣!=␣OPERATOR␣)␣{

␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣But␣only␣look␣for␣a␣sub␣call␣if␣we␣are␣expecting␣a␣term␣or
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣if␣there␣is␣no␣existing␣space␣after␣the␣&.
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣For␣example␣we␣probably␣don't␣want␣&␣as␣sub␣call␣here:
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣␣␣␣Fcntl::S_IRUSR␣&␣$mode;
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣if␣(␣$expecting␣==␣TERM␣||␣$next_type␣ne␣'b'␣)␣{
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣scan_identifier();
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣}
␣␣␣␣␣␣␣␣␣␣␣␣}
␣␣␣␣␣␣␣␣␣␣␣␣else␣{
␣␣␣␣␣␣␣␣␣␣␣␣}
␣␣␣␣␣␣␣␣},
␣␣␣␣␣␣␣␣'<'␣=>␣sub␣{␣␣␣␣#␣angle␣operator␣or␣less␣than?

␣␣␣␣␣␣␣␣␣␣␣␣if␣(␣$expecting␣!=␣OPERATOR␣)␣{
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣(␣$i,␣$type␣)␣=
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣find_angle_operator_termination(␣$input_line,␣$i,␣$rtoken_map,
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣$expecting,␣$max_token_index␣);

␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣if␣(␣$type␣eq␣'<'␣&&␣$expecting␣==␣TERM␣)␣{
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣error_if_expecting_TERM();
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣interrupt_logfile();
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣warning("Unterminated␣<>␣operator?\n");
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣resume_logfile();
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣}
␣␣␣␣␣␣␣␣␣␣␣␣}
␣␣␣␣␣␣␣␣␣␣␣␣else␣{
␣␣␣␣␣␣␣␣␣␣␣␣}
␣␣␣␣␣␣␣␣},
␣␣␣␣␣␣␣␣'?'␣=>␣sub␣{␣␣␣␣#␣?:␣conditional␣or␣starting␣pattern?

␣␣␣␣␣␣␣␣␣␣␣␣my␣$is_pattern;

␣␣␣␣␣␣␣␣␣␣␣␣if␣(␣$expecting␣==␣UNKNOWN␣)␣{

␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣my␣$msg;
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣(␣$is_pattern,␣$msg␣)␣=
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣guess_if_pattern_or_conditional(␣$i,␣$rtokens,␣$rtoken_map,
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣$max_token_index␣);

␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣if␣($msg)␣{␣write_logfile_entry($msg)␣}
␣␣␣␣␣␣␣␣␣␣␣␣}
␣␣␣␣␣␣␣␣␣␣␣␣else␣{␣$is_pattern␣=␣(␣$expecting␣==␣TERM␣)␣}

␣␣␣␣␣␣␣␣␣␣␣␣if␣($is_pattern)␣{
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣$in_quote␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣=␣1;
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣$type␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣=␣'Q';
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣$allowed_quote_modifiers␣=␣'[msixpodualngc]';
␣␣␣␣␣␣␣␣␣␣␣␣}
␣␣␣␣␣␣␣␣␣␣␣␣else␣{
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣(␣$type_sequence,␣$indent_flag␣)␣=
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣increase_nesting_depth(␣QUESTION_COLON,
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣$$rtoken_map[$i_tok]␣);
␣␣␣␣␣␣␣␣␣␣␣␣}
␣␣␣␣␣␣␣␣},
␣␣␣␣␣␣␣␣'*'␣=>␣sub␣{␣␣␣␣#␣typeglob,␣or␣multiply?

␣␣␣␣␣␣␣␣␣␣␣␣if␣(␣$expecting␣==␣TERM␣)␣{
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣scan_identifier();
␣␣␣␣␣␣␣␣␣␣␣␣}
␣␣␣␣␣␣␣␣␣␣␣␣else␣{

␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣if␣(␣$$rtokens[␣$i␣+␣1␣]␣eq␣'='␣)␣{
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣$tok␣␣=␣'*=';
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣$type␣=␣$tok;
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣$i++;
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣}
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣elsif␣(␣$$rtokens[␣$i␣+␣1␣]␣eq␣'*'␣)␣{
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣$tok␣␣=␣'**';
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣$type␣=␣$tok;
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣$i++;
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣if␣(␣$$rtokens[␣$i␣+␣1␣]␣eq␣'='␣)␣{
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣$tok␣␣=␣'**=';
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣$type␣=␣$tok;
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣$i++;
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣}
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣}
␣␣␣␣␣␣␣␣␣␣␣␣}
␣␣␣␣␣␣␣␣},
␣␣␣␣␣␣␣␣'.'␣=>␣sub␣{␣␣␣␣#␣what␣kind␣of␣.␣?

␣␣␣␣␣␣␣␣␣␣␣␣if␣(␣$expecting␣!=␣OPERATOR␣)␣{
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣scan_number();
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣if␣(␣$type␣eq␣'.'␣)␣{
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣error_if_expecting_TERM()
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣if␣(␣$expecting␣==␣TERM␣);
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣}
␣␣␣␣␣␣␣␣␣␣␣␣}
␣␣␣␣␣␣␣␣␣␣␣␣else␣{
␣␣␣␣␣␣␣␣␣␣␣␣}
␣␣␣␣␣␣␣␣},
␣␣␣␣␣␣␣␣':'␣=>␣sub␣{

␣␣␣␣␣␣␣␣␣␣␣␣#␣if␣this␣is␣the␣first␣nonblank␣character,␣call␣it␣a␣label
␣␣␣␣␣␣␣␣␣␣␣␣#␣since␣perl␣seems␣to␣just␣swallow␣it
␣␣␣␣␣␣␣␣␣␣␣␣if␣(␣$input_line_number␣==␣1␣&&␣$last_nonblank_i␣==␣-1␣)␣{
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣$type␣=␣'J';
␣␣␣␣␣␣␣␣␣␣␣␣}

␣␣␣␣␣␣␣␣␣␣␣␣#␣ATTRS:␣check␣for␣a␣':'␣which␣introduces␣an␣attribute␣list
␣␣␣␣␣␣␣␣␣␣␣␣#␣(this␣might␣eventually␣get␣its␣own␣token␣type)
␣␣␣␣␣␣␣␣␣␣␣␣elsif␣(␣$statement_type␣=~␣/^sub/␣)␣{
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣$type␣␣␣␣␣␣␣␣␣␣␣␣␣␣=␣'A';
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣$in_attribute_list␣=␣1;
␣␣␣␣␣␣␣␣␣␣␣␣}

␣␣␣␣␣␣␣␣␣␣␣␣#␣check␣for␣scalar␣attribute,␣such␣as
␣␣␣␣␣␣␣␣␣␣␣␣#␣my␣$foo␣:␣shared␣=␣1;
␣␣␣␣␣␣␣␣␣␣␣␣elsif␣($is_my_our{$statement_type}
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣&&␣$current_depth[QUESTION_COLON]␣==␣0␣)
␣␣␣␣␣␣␣␣␣␣␣␣{
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣$type␣␣␣␣␣␣␣␣␣␣␣␣␣␣=␣'A';
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣$in_attribute_list␣=␣1;
␣␣␣␣␣␣␣␣␣␣␣␣}

␣␣␣␣␣␣␣␣␣␣␣␣#␣otherwise,␣it␣should␣be␣part␣of␣a␣?/:␣operator
␣␣␣␣␣␣␣␣␣␣␣␣else␣{
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣(␣$type_sequence,␣$indent_flag␣)␣=
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣decrease_nesting_depth(␣QUESTION_COLON,
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣$$rtoken_map[$i_tok]␣);
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣if␣(␣$last_nonblank_token␣eq␣'?'␣)␣{
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣warning("Syntax␣error␣near␣?␣:\n");
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣}
␣␣␣␣␣␣␣␣␣␣␣␣}
␣␣␣␣␣␣␣␣},
␣␣␣␣␣␣␣␣'+'␣=>␣sub␣{␣␣␣␣#␣what␣kind␣of␣plus?

␣␣␣␣␣␣␣␣␣␣␣␣if␣(␣$expecting␣==␣TERM␣)␣{
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣my␣$number␣=␣scan_number();

␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣unary␣plus␣is␣safest␣assumption␣if␣not␣a␣number
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣if␣(␣!defined($number)␣)␣{␣$type␣=␣'p';␣}
␣␣␣␣␣␣␣␣␣␣␣␣}
␣␣␣␣␣␣␣␣␣␣␣␣elsif␣(␣$expecting␣==␣OPERATOR␣)␣{
␣␣␣␣␣␣␣␣␣␣␣␣}
␣␣␣␣␣␣␣␣␣␣␣␣else␣{
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣if␣(␣$next_type␣eq␣'w'␣)␣{␣$type␣=␣'p'␣}
␣␣␣␣␣␣␣␣␣␣␣␣}
␣␣␣␣␣␣␣␣},
␣␣␣␣␣␣␣␣'@'␣=>␣sub␣{

␣␣␣␣␣␣␣␣␣␣␣␣error_if_expecting_OPERATOR("Array")
␣␣␣␣␣␣␣␣␣␣␣␣␣␣if␣(␣$expecting␣==␣OPERATOR␣);
␣␣␣␣␣␣␣␣␣␣␣␣scan_identifier();
␣␣␣␣␣␣␣␣},
␣␣␣␣␣␣␣␣'%'␣=>␣sub␣{␣␣␣␣#␣hash␣or␣modulo?

␣␣␣␣␣␣␣␣␣␣␣␣#␣first␣guess␣is␣hash␣if␣no␣following␣blank
␣␣␣␣␣␣␣␣␣␣␣␣if␣(␣$expecting␣==␣UNKNOWN␣)␣{
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣if␣(␣$next_type␣ne␣'b'␣)␣{␣$expecting␣=␣TERM␣}
␣␣␣␣␣␣␣␣␣␣␣␣}
␣␣␣␣␣␣␣␣␣␣␣␣if␣(␣$expecting␣==␣TERM␣)␣{
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣scan_identifier();
␣␣␣␣␣␣␣␣␣␣␣␣}
␣␣␣␣␣␣␣␣},
␣␣␣␣␣␣␣␣'['␣=>␣sub␣{
␣␣␣␣␣␣␣␣␣␣␣␣$square_bracket_type[␣++$square_bracket_depth␣]␣=
␣␣␣␣␣␣␣␣␣␣␣␣␣␣$last_nonblank_token;
␣␣␣␣␣␣␣␣␣␣␣␣(␣$type_sequence,␣$indent_flag␣)␣=
␣␣␣␣␣␣␣␣␣␣␣␣␣␣increase_nesting_depth(␣SQUARE_BRACKET,␣$$rtoken_map[$i_tok]␣);

␣␣␣␣␣␣␣␣␣␣␣␣#␣It␣may␣seem␣odd,␣but␣structural␣square␣brackets␣have
␣␣␣␣␣␣␣␣␣␣␣␣#␣type␣'{'␣and␣'}'.␣␣This␣simplifies␣the␣indentation␣logic.
␣␣␣␣␣␣␣␣␣␣␣␣if␣(␣!is_non_structural_brace()␣)␣{
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣$type␣=␣'{';
␣␣␣␣␣␣␣␣␣␣␣␣}
␣␣␣␣␣␣␣␣␣␣␣␣$square_bracket_structural_type[$square_bracket_depth]␣=␣$type;
␣␣␣␣␣␣␣␣},
␣␣␣␣␣␣␣␣']'␣=>␣sub␣{
␣␣␣␣␣␣␣␣␣␣␣␣(␣$type_sequence,␣$indent_flag␣)␣=
␣␣␣␣␣␣␣␣␣␣␣␣␣␣decrease_nesting_depth(␣SQUARE_BRACKET,␣$$rtoken_map[$i_tok]␣);

␣␣␣␣␣␣␣␣␣␣␣␣if␣(␣$square_bracket_structural_type[$square_bracket_depth]␣eq␣'{'␣)
␣␣␣␣␣␣␣␣␣␣␣␣{
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣$type␣=␣'}';
␣␣␣␣␣␣␣␣␣␣␣␣}

␣␣␣␣␣␣␣␣␣␣␣␣#␣propagate␣type␣information␣for␣smartmatch␣operator.␣␣This␣is
␣␣␣␣␣␣␣␣␣␣␣␣#␣necessary␣to␣enable␣us␣to␣know␣if␣an␣operator␣or␣term␣is␣expected
␣␣␣␣␣␣␣␣␣␣␣␣#␣next.
␣␣␣␣␣␣␣␣␣␣␣␣if␣(␣$square_bracket_type[$square_bracket_depth]␣eq␣'~~'␣)␣{
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣$tok␣=␣$square_bracket_type[$square_bracket_depth];
␣␣␣␣␣␣␣␣␣␣␣␣}

␣␣␣␣␣␣␣␣␣␣␣␣if␣(␣$square_bracket_depth␣>␣0␣)␣{␣$square_bracket_depth--;␣}
␣␣␣␣␣␣␣␣},
␣␣␣␣␣␣␣␣'-'␣=>␣sub␣{␣␣␣␣#␣what␣kind␣of␣minus?

␣␣␣␣␣␣␣␣␣␣␣␣if␣(␣(␣$expecting␣!=␣OPERATOR␣)
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣&&␣$is_file_test_operator{$next_tok}␣)
␣␣␣␣␣␣␣␣␣␣␣␣{
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣my␣(␣$next_nonblank_token,␣$i_next␣)␣=
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣find_next_nonblank_token(␣$i␣+␣1,␣$rtokens,
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣$max_token_index␣);

␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣check␣for␣a␣quoted␣word␣like␣"-w=>xx";
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣it␣is␣sufficient␣to␣just␣check␣for␣a␣following␣'='
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣if␣(␣$next_nonblank_token␣eq␣'='␣)␣{
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣$type␣=␣'m';
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣}
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣else␣{
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣$i++;
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣$tok␣.=␣$next_tok;
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣$type␣=␣'F';
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣}
␣␣␣␣␣␣␣␣␣␣␣␣}
␣␣␣␣␣␣␣␣␣␣␣␣elsif␣(␣$expecting␣==␣TERM␣)␣{
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣my␣$number␣=␣scan_number();

␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣maybe␣part␣of␣bareword␣token?␣unary␣is␣safest
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣if␣(␣!defined($number)␣)␣{␣$type␣=␣'m';␣}

␣␣␣␣␣␣␣␣␣␣␣␣}
␣␣␣␣␣␣␣␣␣␣␣␣elsif␣(␣$expecting␣==␣OPERATOR␣)␣{
␣␣␣␣␣␣␣␣␣␣␣␣}
␣␣␣␣␣␣␣␣␣␣␣␣else␣{

␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣if␣(␣$next_type␣eq␣'w'␣)␣{
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣$type␣=␣'m';
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣}
␣␣␣␣␣␣␣␣␣␣␣␣}
␣␣␣␣␣␣␣␣},

␣␣␣␣␣␣␣␣'^'␣=>␣sub␣{

␣␣␣␣␣␣␣␣␣␣␣␣#␣check␣for␣special␣variables␣like␣${^WARNING_BITS}
␣␣␣␣␣␣␣␣␣␣␣␣if␣(␣$expecting␣==␣TERM␣)␣{

␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣FIXME:␣this␣should␣work␣but␣will␣not␣catch␣errors
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣because␣we␣also␣have␣to␣be␣sure␣that␣previous␣token␣is
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣a␣type␣character␣($,@,%).
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣if␣(␣$last_nonblank_token␣eq␣'{'
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣&&␣(␣$next_tok␣=~␣/^[A-Za-z_]/␣)␣)
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣{

␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣if␣(␣$next_tok␣eq␣'W'␣)␣{
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣$tokenizer_self->{_saw_perl_dash_w}␣=␣1;
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣}
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣$tok␣␣=␣$tok␣.␣$next_tok;
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣$i␣␣␣␣=␣$i␣+␣1;
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣$type␣=␣'w';
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣}

␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣else␣{
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣unless␣(␣error_if_expecting_TERM()␣)␣{

␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣Something␣like␣this␣is␣valid␣but␣strange:
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣undef␣^I;
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣complain("The␣'^'␣seems␣unusual␣here\n");
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣}
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣}
␣␣␣␣␣␣␣␣␣␣␣␣}
␣␣␣␣␣␣␣␣},

␣␣␣␣␣␣␣␣'::'␣=>␣sub␣{␣␣␣␣#␣probably␣a␣sub␣call
␣␣␣␣␣␣␣␣␣␣␣␣scan_bare_identifier();
␣␣␣␣␣␣␣␣},
␣␣␣␣␣␣␣␣'<<'␣=>␣sub␣{␣␣␣␣#␣maybe␣a␣here-doc?
␣␣␣␣␣␣␣␣␣␣␣␣return
␣␣␣␣␣␣␣␣␣␣␣␣␣␣unless␣(␣$i␣<␣$max_token_index␣)
␣␣␣␣␣␣␣␣␣␣␣␣␣␣;␣␣␣␣␣␣␣␣␣␣#␣here-doc␣not␣possible␣if␣end␣of␣line

␣␣␣␣␣␣␣␣␣␣␣␣if␣(␣$expecting␣!=␣OPERATOR␣)␣{
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣my␣(␣$found_target,␣$here_doc_target,␣$here_quote_character,
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣$saw_error␣);
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣(
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣$found_target,␣$here_doc_target,␣$here_quote_character,␣$i,
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣$saw_error
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣)
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣=␣find_here_doc(␣$expecting,␣$i,␣$rtokens,␣$rtoken_map,
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣$max_token_index␣);

␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣if␣($found_target)␣{
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣push␣@{$rhere_target_list},
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣[␣$here_doc_target,␣$here_quote_character␣];
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣$type␣=␣'h';
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣if␣(␣length($here_doc_target)␣>␣80␣)␣{
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣my␣$truncated␣=␣substr(␣$here_doc_target,␣0,␣80␣);
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣complain("Long␣here-target:␣'$truncated'␣...\n");
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣}
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣elsif␣(␣$here_doc_target␣!~␣/^[A-Z_]\w+$/␣)␣{
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣complain(
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣"Unconventional␣here-target:␣'$here_doc_target'\n"
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣);
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣}
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣}
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣elsif␣(␣$expecting␣==␣TERM␣)␣{
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣unless␣($saw_error)␣{

␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣shouldn't␣happen..
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣warning("Program␣bug;␣didn't␣find␣here␣doc␣target\n");
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣report_definite_bug();
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣}
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣}
␣␣␣␣␣␣␣␣␣␣␣␣}
␣␣␣␣␣␣␣␣␣␣␣␣else␣{
␣␣␣␣␣␣␣␣␣␣␣␣}
␣␣␣␣␣␣␣␣},
␣␣␣␣␣␣␣␣'->'␣=>␣sub␣{

␣␣␣␣␣␣␣␣␣␣␣␣#␣if␣->␣points␣to␣a␣bare␣word,␣we␣must␣scan␣for␣an␣identifier,
␣␣␣␣␣␣␣␣␣␣␣␣#␣otherwise␣something␣like␣->y␣would␣look␣like␣the␣y␣operator
␣␣␣␣␣␣␣␣␣␣␣␣scan_identifier();
␣␣␣␣␣␣␣␣},

␣␣␣␣␣␣␣␣#␣type␣=␣'pp'␣for␣pre-increment,␣'++'␣for␣post-increment
␣␣␣␣␣␣␣␣'++'␣=>␣sub␣{
␣␣␣␣␣␣␣␣␣␣␣␣if␣(␣$expecting␣==␣TERM␣)␣{␣$type␣=␣'pp'␣}
␣␣␣␣␣␣␣␣␣␣␣␣elsif␣(␣$expecting␣==␣UNKNOWN␣)␣{
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣my␣(␣$next_nonblank_token,␣$i_next␣)␣=
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣find_next_nonblank_token(␣$i,␣$rtokens,␣$max_token_index␣);
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣if␣(␣$next_nonblank_token␣eq␣'$'␣)␣{␣$type␣=␣'pp'␣}
␣␣␣␣␣␣␣␣␣␣␣␣}
␣␣␣␣␣␣␣␣},

␣␣␣␣␣␣␣␣'=>'␣=>␣sub␣{
␣␣␣␣␣␣␣␣␣␣␣␣if␣(␣$last_nonblank_type␣eq␣$tok␣)␣{
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣complain("Repeated␣'=>'s␣\n");
␣␣␣␣␣␣␣␣␣␣␣␣}

␣␣␣␣␣␣␣␣␣␣␣␣#␣patch␣for␣operator_expected:␣note␣if␣we␣are␣in␣the␣list␣(use.t)
␣␣␣␣␣␣␣␣␣␣␣␣#␣TODO:␣make␣version␣numbers␣a␣new␣token␣type
␣␣␣␣␣␣␣␣␣␣␣␣if␣(␣$statement_type␣eq␣'use'␣)␣{␣$statement_type␣=␣'_use'␣}
␣␣␣␣␣␣␣␣},

␣␣␣␣␣␣␣␣#␣type␣=␣'mm'␣for␣pre-decrement,␣'--'␣for␣post-decrement
␣␣␣␣␣␣␣␣'--'␣=>␣sub␣{

␣␣␣␣␣␣␣␣␣␣␣␣if␣(␣$expecting␣==␣TERM␣)␣{␣$type␣=␣'mm'␣}
␣␣␣␣␣␣␣␣␣␣␣␣elsif␣(␣$expecting␣==␣UNKNOWN␣)␣{
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣my␣(␣$next_nonblank_token,␣$i_next␣)␣=
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣find_next_nonblank_token(␣$i,␣$rtokens,␣$max_token_index␣);
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣if␣(␣$next_nonblank_token␣eq␣'$'␣)␣{␣$type␣=␣'mm'␣}
␣␣␣␣␣␣␣␣␣␣␣␣}
␣␣␣␣␣␣␣␣},

␣␣␣␣␣␣␣␣'&&'␣=>␣sub␣{
␣␣␣␣␣␣␣␣␣␣␣␣error_if_expecting_TERM()
␣␣␣␣␣␣␣␣␣␣␣␣␣␣if␣(␣$expecting␣==␣TERM␣);
␣␣␣␣␣␣␣␣},

␣␣␣␣␣␣␣␣'||'␣=>␣sub␣{
␣␣␣␣␣␣␣␣␣␣␣␣error_if_expecting_TERM()
␣␣␣␣␣␣␣␣␣␣␣␣␣␣if␣(␣$expecting␣==␣TERM␣);
␣␣␣␣␣␣␣␣},

␣␣␣␣␣␣␣␣'//'␣=>␣sub␣{
␣␣␣␣␣␣␣␣␣␣␣␣error_if_expecting_TERM()
␣␣␣␣␣␣␣␣␣␣␣␣␣␣if␣(␣$expecting␣==␣TERM␣);
␣␣␣␣␣␣␣␣},
␣␣␣␣};
----------
Range: (940651,940886) (235)
's'␣␣=>␣'[msixpodualngcer]',
␣␣␣␣␣␣␣␣'y'␣␣=>␣'[cdsr]',
␣␣␣␣␣␣␣␣'tr'␣=>␣'[cdsr]',
␣␣␣␣␣␣␣␣'m'␣␣=>␣'[msixpodualngc]',
␣␣␣␣␣␣␣␣'qr'␣=>␣'[msixpodualn]',
␣␣␣␣␣␣␣␣'q'␣␣=>␣"",
␣␣␣␣␣␣␣␣'qq'␣=>␣"",
␣␣␣␣␣␣␣␣'qw'␣=>␣"",
␣␣␣␣␣␣␣␣'qx'␣=>␣"",
␣␣␣␣);
----------
Range: (950603,950845) (242)
$i,␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣$in_quote,␣␣␣␣$quote_character,
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣$quote_pos,␣␣␣␣␣␣␣$quote_depth,␣$quoted_string_1,
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣$quoted_string_2,␣$rtokens,␣␣␣␣␣$rtoken_map,
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣$max_token_index
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣);
----------
Range: (961096,961480) (384)
do␣{
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣local␣$"␣=␣')(';
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣my␣@debug_list␣=␣(
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣$last_nonblank_token,␣␣␣␣␣␣$tok,
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣$next_tok,␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣$brace_depth,
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣$brace_type[$brace_depth],␣$paren_depth,
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣$paren_type[$paren_depth]
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣);
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣print␣STDOUT␣"TOKENIZE:(@debug_list)\n";
␣␣␣␣␣␣␣␣␣␣␣␣};
----------
Range: (974915,975196) (281)
/^(if|elsif|unless|case|when)$/

␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣patch␣to␣avoid␣an␣unwanted␣error␣message␣for
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣the␣case␣of␣a␣parenless␣'case'␣(RT␣105484):
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣switch␣(␣1␣)␣{␣case␣x␣{␣2␣}␣else␣{␣}␣}
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣&&
----------
Range: (1033667,1033926) (259)
/^([\$\@\*\&\%\)]|->|::)/

␣␣␣␣␣␣␣␣␣␣#␣or␣if␣we␣follow␣a␣hash␣or␣array␣closing␣curly␣brace␣or␣bracket
␣␣␣␣␣␣␣␣␣␣#␣For␣example,␣the␣second␣'{'␣in␣this␣is␣non-structural:␣$a{'x'}{'y'}
␣␣␣␣␣␣␣␣␣␣#␣because␣the␣first␣'}'␣would␣have␣been␣given␣type␣'R'
␣␣␣␣␣␣␣␣␣␣||
----------
Range: (1082695,1082898) (203)
1␣)

␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣In␣something␣like␣'@$='␣we␣have␣an␣identifier␣'@$'
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣In␣something␣like␣'$${'␣we␣have␣type␣'$$'␣(and␣only
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣part␣of␣an␣identifier)
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣&&
----------
Range: (1083618,1083927) (309)
do␣{
␣␣␣␣␣␣␣␣my␣(␣$a,␣$b,␣$c␣)␣=␣caller;
␣␣␣␣␣␣␣␣print␣STDOUT
"SCANID:␣called␣from␣$a␣$b␣$c␣with␣tok,␣i,␣state,␣identifier␣=$tok_begin,␣$i_begin,␣$id_scan_state_begin,␣$identifier_begin\n";
␣␣␣␣␣␣␣␣print␣STDOUT
"SCANID:␣returned␣with␣tok,␣i,␣state,␣identifier␣=$tok,␣$i,␣$id_scan_state,␣$identifier\n";
␣␣␣␣};
----------
Range: (1084689,1084867) (178)
my␣(
␣␣␣␣␣␣␣␣␣␣␣␣$input_line,␣$i,␣␣␣␣␣␣␣␣␣␣␣␣␣$i_beg,
␣␣␣␣␣␣␣␣␣␣␣␣$tok,␣␣␣␣␣␣␣␣$type,␣␣␣␣␣␣␣␣␣␣$rtokens,
␣␣␣␣␣␣␣␣␣␣␣␣$rtoken_map,␣$id_scan_state,␣$max_token_index
␣␣␣␣␣␣␣␣)␣=␣@_;
----------
Range: (1107701,1107911) (210)
my␣(
␣␣␣␣␣␣␣␣$i,␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣$in_quote,␣␣␣␣$quote_character,
␣␣␣␣␣␣␣␣$quote_pos,␣␣␣␣␣␣␣$quote_depth,␣$quoted_string_1,
␣␣␣␣␣␣␣␣$quoted_string_2,␣$rtokens,␣␣␣␣␣$rtoken_map,
␣␣␣␣␣␣␣␣$max_token_index
␣␣␣␣)␣=␣@_;
----------
Range: (1119610,1120174) (564)
do␣{

␣␣␣␣␣␣␣␣#␣whitespace
␣␣␣␣␣␣␣␣if␣(␣$str␣=~␣/\G(\s+)/gc␣)␣{␣push␣@type,␣'b';␣}

␣␣␣␣␣␣␣␣#␣numbers
␣␣␣␣␣␣␣␣#␣note␣that␣this␣must␣come␣before␣words!
␣␣␣␣␣␣␣␣elsif␣(␣$str␣=~␣/\G(\d+)/gc␣)␣{␣push␣@type,␣'d';␣}

␣␣␣␣␣␣␣␣#␣words
␣␣␣␣␣␣␣␣elsif␣(␣$str␣=~␣/\G(\w+)/gc␣)␣{␣push␣@type,␣'w';␣}

␣␣␣␣␣␣␣␣#␣single-character␣punctuation
␣␣␣␣␣␣␣␣elsif␣(␣$str␣=~␣/\G(\W)/gc␣)␣{␣push␣@type,␣$1;␣}

␣␣␣␣␣␣␣␣#␣that's␣all..
␣␣␣␣␣␣␣␣else␣{
␣␣␣␣␣␣␣␣␣␣␣␣return␣(␣\@tokens,␣\@token_map,␣\@type␣);
␣␣␣␣␣␣␣␣}

␣␣␣␣␣␣␣␣push␣@tokens,␣␣␣␣$1;
␣␣␣␣␣␣␣␣push␣@token_map,␣pos($str);

␣␣␣␣}␣while
----------
Range: (1121111,1123990) (2879)
print␣$fh␣<<'END_OF_LIST';

Here␣is␣a␣list␣of␣the␣token␣types␣currently␣used␣for␣lines␣of␣type␣'CODE'.
For␣the␣following␣tokens,␣the␣"type"␣of␣a␣token␣is␣just␣the␣token␣itself.

..␣::␣<<␣>>␣**␣&&␣..␣||␣//␣->␣=>␣+=␣-=␣.=␣%=␣&=␣|=␣^=␣*=␣<>
(␣)␣<=␣>=␣==␣=~␣!~␣!=␣++␣--␣/=␣x=
...␣**=␣<<=␣>>=␣&&=␣||=␣//=␣<=>
,␣+␣-␣/␣*␣|␣%␣!␣x␣~␣=␣\␣?␣:␣.␣<␣>␣^␣&

The␣following␣additional␣token␣types␣are␣defined:

␣type␣␣␣␣meaning
␣␣␣␣b␣␣␣␣blank␣(white␣space)
␣␣␣␣{␣␣␣␣indent:␣opening␣structural␣curly␣brace␣or␣square␣bracket␣or␣paren
␣␣␣␣␣␣␣␣␣(code␣block,␣anonymous␣hash␣reference,␣or␣anonymous␣array␣reference)
␣␣␣␣}␣␣␣␣outdent:␣right␣structural␣curly␣brace␣or␣square␣bracket␣or␣paren
␣␣␣␣[␣␣␣␣left␣non-structural␣square␣bracket␣(enclosing␣an␣array␣index)
␣␣␣␣]␣␣␣␣right␣non-structural␣square␣bracket
␣␣␣␣(␣␣␣␣left␣non-structural␣paren␣(all␣but␣a␣list␣right␣of␣an␣=)
␣␣␣␣)␣␣␣␣right␣non-structural␣paren
␣␣␣␣L␣␣␣␣left␣non-structural␣curly␣brace␣(enclosing␣a␣key)
␣␣␣␣R␣␣␣␣right␣non-structural␣curly␣brace
␣␣␣␣;␣␣␣␣terminal␣semicolon
␣␣␣␣f␣␣␣␣indicates␣a␣semicolon␣in␣a␣"for"␣statement
␣␣␣␣h␣␣␣␣here_doc␣operator␣<<
␣␣␣␣#␣␣␣␣a␣comment
␣␣␣␣Q␣␣␣␣indicates␣a␣quote␣or␣pattern
␣␣␣␣q␣␣␣␣indicates␣a␣qw␣quote␣block
␣␣␣␣k␣␣␣␣a␣perl␣keyword
␣␣␣␣C␣␣␣␣user-defined␣constant␣or␣constant␣function␣(with␣void␣prototype␣=␣())
␣␣␣␣U␣␣␣␣user-defined␣function␣taking␣parameters
␣␣␣␣G␣␣␣␣user-defined␣function␣taking␣block␣parameter␣(like␣grep/map/eval)
␣␣␣␣M␣␣␣␣(unused,␣but␣reserved␣for␣subroutine␣definition␣name)
␣␣␣␣P␣␣␣␣(unused,␣but␣-html␣uses␣it␣to␣label␣pod␣text)
␣␣␣␣t␣␣␣␣type␣indicater␣such␣as␣%,$,@,*,&,sub
␣␣␣␣w␣␣␣␣bare␣word␣(perhaps␣a␣subroutine␣call)
␣␣␣␣i␣␣␣␣identifier␣of␣some␣type␣(with␣leading␣%,␣$,␣@,␣*,␣&,␣sub,␣->␣)
␣␣␣␣n␣␣␣␣a␣number
␣␣␣␣v␣␣␣␣a␣v-string
␣␣␣␣F␣␣␣␣a␣file␣test␣operator␣(like␣-e)
␣␣␣␣Y␣␣␣␣File␣handle
␣␣␣␣Z␣␣␣␣identifier␣in␣indirect␣object␣slot:␣may␣be␣file␣handle,␣object
␣␣␣␣J␣␣␣␣LABEL:␣␣code␣block␣label
␣␣␣␣j␣␣␣␣LABEL␣after␣next,␣last,␣redo,␣goto
␣␣␣␣p␣␣␣␣unary␣+
␣␣␣␣m␣␣␣␣unary␣-
␣␣␣␣pp␣␣␣pre-increment␣operator␣++
␣␣␣␣mm␣␣␣pre-decrement␣operator␣--
␣␣␣␣A␣␣␣␣:␣used␣as␣attribute␣separator

␣␣␣␣Here␣are␣the␣'_line_type'␣codes␣used␣internally:
␣␣␣␣SYSTEM␣␣␣␣␣␣␣␣␣-␣system-specific␣code␣before␣hash-bang␣line
␣␣␣␣CODE␣␣␣␣␣␣␣␣␣␣␣-␣line␣of␣perl␣code␣(including␣comments)
␣␣␣␣POD_START␣␣␣␣␣␣-␣line␣starting␣pod,␣such␣as␣'=head'
␣␣␣␣POD␣␣␣␣␣␣␣␣␣␣␣␣-␣pod␣documentation␣text
␣␣␣␣POD_END␣␣␣␣␣␣␣␣-␣last␣line␣of␣pod␣section,␣'=cut'
␣␣␣␣HERE␣␣␣␣␣␣␣␣␣␣␣-␣text␣of␣here-document
␣␣␣␣HERE_END␣␣␣␣␣␣␣-␣last␣line␣of␣here-doc␣(target␣word)
␣␣␣␣FORMAT␣␣␣␣␣␣␣␣␣-␣format␣section
␣␣␣␣FORMAT_END␣␣␣␣␣-␣last␣line␣of␣format␣section,␣'.'
␣␣␣␣DATA_START␣␣␣␣␣-␣__DATA__␣line
␣␣␣␣DATA␣␣␣␣␣␣␣␣␣␣␣-␣unidentified␣text␣following␣__DATA__
␣␣␣␣END_START␣␣␣␣␣␣-␣__END__␣line
␣␣␣␣END␣␣␣␣␣␣␣␣␣␣␣␣-␣unidentified␣text␣following␣__END__
␣␣␣␣ERROR␣␣␣␣␣␣␣␣␣␣-␣we␣are␣in␣big␣trouble,␣probably␣not␣a␣perl␣script
END_OF_LIST
----------
Range: (1125919,1126100) (181)
@_␣=
␣␣␣␣␣␣qw(␣BEGIN␣END␣CHECK␣INIT␣AUTOLOAD␣DESTROY␣UNITCHECK␣continue␣if␣elsif␣else
␣␣␣␣␣␣unless␣do␣while␣until␣eval␣for␣foreach␣map␣grep␣sort
␣␣␣␣␣␣switch␣case␣given␣when␣catch);
----------
Range: (1126475,1129240) (2765)
my␣@value_requestor␣=␣qw(
␣␣␣␣␣␣AUTOLOAD
␣␣␣␣␣␣BEGIN
␣␣␣␣␣␣CHECK
␣␣␣␣␣␣DESTROY
␣␣␣␣␣␣END
␣␣␣␣␣␣EQ
␣␣␣␣␣␣GE
␣␣␣␣␣␣GT
␣␣␣␣␣␣INIT
␣␣␣␣␣␣LE
␣␣␣␣␣␣LT
␣␣␣␣␣␣NE
␣␣␣␣␣␣UNITCHECK
␣␣␣␣␣␣abs
␣␣␣␣␣␣accept
␣␣␣␣␣␣alarm
␣␣␣␣␣␣and
␣␣␣␣␣␣atan2
␣␣␣␣␣␣bind
␣␣␣␣␣␣binmode
␣␣␣␣␣␣bless
␣␣␣␣␣␣break
␣␣␣␣␣␣caller
␣␣␣␣␣␣chdir
␣␣␣␣␣␣chmod
␣␣␣␣␣␣chomp
␣␣␣␣␣␣chop
␣␣␣␣␣␣chown
␣␣␣␣␣␣chr
␣␣␣␣␣␣chroot
␣␣␣␣␣␣close
␣␣␣␣␣␣closedir
␣␣␣␣␣␣cmp
␣␣␣␣␣␣connect
␣␣␣␣␣␣continue
␣␣␣␣␣␣cos
␣␣␣␣␣␣crypt
␣␣␣␣␣␣dbmclose
␣␣␣␣␣␣dbmopen
␣␣␣␣␣␣defined
␣␣␣␣␣␣delete
␣␣␣␣␣␣die
␣␣␣␣␣␣dump
␣␣␣␣␣␣each
␣␣␣␣␣␣else
␣␣␣␣␣␣elsif
␣␣␣␣␣␣eof
␣␣␣␣␣␣eq
␣␣␣␣␣␣exec
␣␣␣␣␣␣exists
␣␣␣␣␣␣exit
␣␣␣␣␣␣exp
␣␣␣␣␣␣fcntl
␣␣␣␣␣␣fileno
␣␣␣␣␣␣flock
␣␣␣␣␣␣for
␣␣␣␣␣␣foreach
␣␣␣␣␣␣formline
␣␣␣␣␣␣ge
␣␣␣␣␣␣getc
␣␣␣␣␣␣getgrgid
␣␣␣␣␣␣getgrnam
␣␣␣␣␣␣gethostbyaddr
␣␣␣␣␣␣gethostbyname
␣␣␣␣␣␣getnetbyaddr
␣␣␣␣␣␣getnetbyname
␣␣␣␣␣␣getpeername
␣␣␣␣␣␣getpgrp
␣␣␣␣␣␣getpriority
␣␣␣␣␣␣getprotobyname
␣␣␣␣␣␣getprotobynumber
␣␣␣␣␣␣getpwnam
␣␣␣␣␣␣getpwuid
␣␣␣␣␣␣getservbyname
␣␣␣␣␣␣getservbyport
␣␣␣␣␣␣getsockname
␣␣␣␣␣␣getsockopt
␣␣␣␣␣␣glob
␣␣␣␣␣␣gmtime
␣␣␣␣␣␣goto
␣␣␣␣␣␣grep
␣␣␣␣␣␣gt
␣␣␣␣␣␣hex
␣␣␣␣␣␣if
␣␣␣␣␣␣index
␣␣␣␣␣␣int
␣␣␣␣␣␣ioctl
␣␣␣␣␣␣join
␣␣␣␣␣␣keys
␣␣␣␣␣␣kill
␣␣␣␣␣␣last
␣␣␣␣␣␣lc
␣␣␣␣␣␣lcfirst
␣␣␣␣␣␣le
␣␣␣␣␣␣length
␣␣␣␣␣␣link
␣␣␣␣␣␣listen
␣␣␣␣␣␣local
␣␣␣␣␣␣localtime
␣␣␣␣␣␣lock
␣␣␣␣␣␣log
␣␣␣␣␣␣lstat
␣␣␣␣␣␣lt
␣␣␣␣␣␣map
␣␣␣␣␣␣mkdir
␣␣␣␣␣␣msgctl
␣␣␣␣␣␣msgget
␣␣␣␣␣␣msgrcv
␣␣␣␣␣␣msgsnd
␣␣␣␣␣␣my
␣␣␣␣␣␣ne
␣␣␣␣␣␣next
␣␣␣␣␣␣no
␣␣␣␣␣␣not
␣␣␣␣␣␣oct
␣␣␣␣␣␣open
␣␣␣␣␣␣opendir
␣␣␣␣␣␣or
␣␣␣␣␣␣ord
␣␣␣␣␣␣our
␣␣␣␣␣␣pack
␣␣␣␣␣␣pipe
␣␣␣␣␣␣pop
␣␣␣␣␣␣pos
␣␣␣␣␣␣print
␣␣␣␣␣␣printf
␣␣␣␣␣␣prototype
␣␣␣␣␣␣push
␣␣␣␣␣␣quotemeta
␣␣␣␣␣␣rand
␣␣␣␣␣␣read
␣␣␣␣␣␣readdir
␣␣␣␣␣␣readlink
␣␣␣␣␣␣readline
␣␣␣␣␣␣readpipe
␣␣␣␣␣␣recv
␣␣␣␣␣␣redo
␣␣␣␣␣␣ref
␣␣␣␣␣␣rename
␣␣␣␣␣␣require
␣␣␣␣␣␣reset
␣␣␣␣␣␣return
␣␣␣␣␣␣reverse
␣␣␣␣␣␣rewinddir
␣␣␣␣␣␣rindex
␣␣␣␣␣␣rmdir
␣␣␣␣␣␣scalar
␣␣␣␣␣␣seek
␣␣␣␣␣␣seekdir
␣␣␣␣␣␣select
␣␣␣␣␣␣semctl
␣␣␣␣␣␣semget
␣␣␣␣␣␣semop
␣␣␣␣␣␣send
␣␣␣␣␣␣sethostent
␣␣␣␣␣␣setnetent
␣␣␣␣␣␣setpgrp
␣␣␣␣␣␣setpriority
␣␣␣␣␣␣setprotoent
␣␣␣␣␣␣setservent
␣␣␣␣␣␣setsockopt
␣␣␣␣␣␣shift
␣␣␣␣␣␣shmctl
␣␣␣␣␣␣shmget
␣␣␣␣␣␣shmread
␣␣␣␣␣␣shmwrite
␣␣␣␣␣␣shutdown
␣␣␣␣␣␣sin
␣␣␣␣␣␣sleep
␣␣␣␣␣␣socket
␣␣␣␣␣␣socketpair
␣␣␣␣␣␣sort
␣␣␣␣␣␣splice
␣␣␣␣␣␣split
␣␣␣␣␣␣sprintf
␣␣␣␣␣␣sqrt
␣␣␣␣␣␣srand
␣␣␣␣␣␣stat
␣␣␣␣␣␣study
␣␣␣␣␣␣substr
␣␣␣␣␣␣symlink
␣␣␣␣␣␣syscall
␣␣␣␣␣␣sysopen
␣␣␣␣␣␣sysread
␣␣␣␣␣␣sysseek
␣␣␣␣␣␣system
␣␣␣␣␣␣syswrite
␣␣␣␣␣␣tell
␣␣␣␣␣␣telldir
␣␣␣␣␣␣tie
␣␣␣␣␣␣tied
␣␣␣␣␣␣truncate
␣␣␣␣␣␣uc
␣␣␣␣␣␣ucfirst
␣␣␣␣␣␣umask
␣␣␣␣␣␣undef
␣␣␣␣␣␣unless
␣␣␣␣␣␣unlink
␣␣␣␣␣␣unpack
␣␣␣␣␣␣unshift
␣␣␣␣␣␣untie
␣␣␣␣␣␣until
␣␣␣␣␣␣use
␣␣␣␣␣␣utime
␣␣␣␣␣␣values
␣␣␣␣␣␣vec
␣␣␣␣␣␣waitpid
␣␣␣␣␣␣warn
␣␣␣␣␣␣while
␣␣␣␣␣␣write
␣␣␣␣␣␣xor

␣␣␣␣␣␣switch
␣␣␣␣␣␣case
␣␣␣␣␣␣given
␣␣␣␣␣␣when
␣␣␣␣␣␣err
␣␣␣␣␣␣say
␣␣␣␣);
----------
Range: (1129923,1130274) (351)
my␣@operator_requestor␣=␣qw(
␣␣␣␣␣␣endgrent
␣␣␣␣␣␣endhostent
␣␣␣␣␣␣endnetent
␣␣␣␣␣␣endprotoent
␣␣␣␣␣␣endpwent
␣␣␣␣␣␣endservent
␣␣␣␣␣␣fork
␣␣␣␣␣␣getgrent
␣␣␣␣␣␣gethostent
␣␣␣␣␣␣getlogin
␣␣␣␣␣␣getnetent
␣␣␣␣␣␣getppid
␣␣␣␣␣␣getprotoent
␣␣␣␣␣␣getpwent
␣␣␣␣␣␣getservent
␣␣␣␣␣␣setgrent
␣␣␣␣␣␣setpwent
␣␣␣␣␣␣time
␣␣␣␣␣␣times
␣␣␣␣␣␣wait
␣␣␣␣␣␣wantarray
␣␣␣␣);
----------
Range: (1131046,1131324) (278)
my␣@value_requestor_type␣=␣qw#
␣␣␣␣␣␣L␣{␣(␣[␣~␣!~␣=~␣;␣.␣..␣...␣A␣:␣&&␣!␣||␣//␣=␣+␣-␣x
␣␣␣␣␣␣**=␣+=␣-=␣.=␣/=␣*=␣%=␣x=␣&=␣|=␣^=␣<<=␣>>=␣&&=␣||=␣//=
␣␣␣␣␣␣<=␣>=␣==␣!=␣=>␣\␣>␣<␣%␣*␣/␣?␣&␣|␣**␣<=>␣~~␣!~~
␣␣␣␣␣␣f␣F␣pp␣mm␣Y␣p␣m␣U␣J␣G␣j␣>>␣<<␣^␣t
␣␣␣␣␣␣~.␣^.␣|.␣&.␣^.=␣|.=␣&.=
␣␣␣␣␣␣#;
----------
Range: (1132817,1133753) (936)
my␣@keyword_taking_list␣=␣qw(
␣␣␣␣␣␣and
␣␣␣␣␣␣chmod
␣␣␣␣␣␣chomp
␣␣␣␣␣␣chop
␣␣␣␣␣␣chown
␣␣␣␣␣␣dbmopen
␣␣␣␣␣␣die
␣␣␣␣␣␣elsif
␣␣␣␣␣␣exec
␣␣␣␣␣␣fcntl
␣␣␣␣␣␣for
␣␣␣␣␣␣foreach
␣␣␣␣␣␣formline
␣␣␣␣␣␣getsockopt
␣␣␣␣␣␣if
␣␣␣␣␣␣index
␣␣␣␣␣␣ioctl
␣␣␣␣␣␣join
␣␣␣␣␣␣kill
␣␣␣␣␣␣local
␣␣␣␣␣␣msgctl
␣␣␣␣␣␣msgrcv
␣␣␣␣␣␣msgsnd
␣␣␣␣␣␣my
␣␣␣␣␣␣open
␣␣␣␣␣␣or
␣␣␣␣␣␣our
␣␣␣␣␣␣pack
␣␣␣␣␣␣print
␣␣␣␣␣␣printf
␣␣␣␣␣␣push
␣␣␣␣␣␣read
␣␣␣␣␣␣readpipe
␣␣␣␣␣␣recv
␣␣␣␣␣␣return
␣␣␣␣␣␣reverse
␣␣␣␣␣␣rindex
␣␣␣␣␣␣seek
␣␣␣␣␣␣select
␣␣␣␣␣␣semctl
␣␣␣␣␣␣semget
␣␣␣␣␣␣send
␣␣␣␣␣␣setpriority
␣␣␣␣␣␣setsockopt
␣␣␣␣␣␣shmctl
␣␣␣␣␣␣shmget
␣␣␣␣␣␣shmread
␣␣␣␣␣␣shmwrite
␣␣␣␣␣␣socket
␣␣␣␣␣␣socketpair
␣␣␣␣␣␣sort
␣␣␣␣␣␣splice
␣␣␣␣␣␣split
␣␣␣␣␣␣sprintf
␣␣␣␣␣␣substr
␣␣␣␣␣␣syscall
␣␣␣␣␣␣sysopen
␣␣␣␣␣␣sysread
␣␣␣␣␣␣sysseek
␣␣␣␣␣␣system
␣␣␣␣␣␣syswrite
␣␣␣␣␣␣tie
␣␣␣␣␣␣unless
␣␣␣␣␣␣unlink
␣␣␣␣␣␣unpack
␣␣␣␣␣␣unshift
␣␣␣␣␣␣until
␣␣␣␣␣␣vec
␣␣␣␣␣␣warn
␣␣␣␣␣␣while
␣␣␣␣␣␣given
␣␣␣␣␣␣when
␣␣␣␣);
----------
