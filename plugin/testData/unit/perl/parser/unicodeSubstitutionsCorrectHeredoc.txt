Subtree: Perl5 (Perl5)
Perl5
  PsiPerlStatementImpl(Perl5: STATEMENT)
    PsiPerlHeredocOpenerImpl(Perl5: HEREDOC_OPENER)
      PsiElement(Perl5: heredoc<<)('<<')
      PsiPerlStringBareImpl(Perl5: STRING_BARE)
        PerlStringContentElementImpl(Perl5: STRING_CONTENT)('EOM')
    PsiElement(Perl5: ;)(';')
  PerlHeredocElementImpl(Perl5: HEREDOC_QQ)
    PerlStringContentElementImpl(Perl5: STRING_CONTENT_QQ)('use charnames ':full';\nprint "')
    PsiPerlUnicodeCharImpl(Perl5: UNICODE_CHAR)
      PsiElement(Perl5: \N)('\N')
      PsiElement(Perl5: "{)('{')
      PsiElement(Perl5: charname)('GREEK SMALL LETTER SIGMA')
      PsiElement(Perl5: }")('}')
    PerlStringContentElementImpl(Perl5: STRING_CONTENT_QQ)(' is called sigma.')
    PsiElement(Perl5: \n)('\n')
    PerlStringContentElementImpl(Perl5: STRING_CONTENT_QQ)('";\nprint "')
    PsiPerlUnicodeCharImpl(Perl5: UNICODE_CHAR)
      PsiElement(Perl5: \N)('\N')
      PsiElement(Perl5: "{)('{')
      PsiElement(Perl5: charname)('LATIN CAPITAL LETTER E WITH VERTICAL LINE BELOW')
      PsiElement(Perl5: }")('}')
    PerlStringContentElementImpl(Perl5: STRING_CONTENT_QQ)('",\n    " is an officially named sequence of two Unicode characters')
    PsiElement(Perl5: \n)('\n')
    PerlStringContentElementImpl(Perl5: STRING_CONTENT_QQ)('";\nuse charnames ':loose';\nprint "')
    PsiPerlUnicodeCharImpl(Perl5: UNICODE_CHAR)
      PsiElement(Perl5: \N)('\N')
      PsiElement(Perl5: "{)('{')
      PsiElement(Perl5: charname)('Greek small-letter  sigma')
      PsiElement(Perl5: }")('}')
    PerlStringContentElementImpl(Perl5: STRING_CONTENT_QQ)('",\n    "can be used to ignore case, underscores, most blanks,",\n    "and when you aren't sure if the official name has hyphens')
    PsiElement(Perl5: \n)('\n')
    PerlStringContentElementImpl(Perl5: STRING_CONTENT_QQ)('";\nuse charnames ':short';\nprint "')
    PsiPerlUnicodeCharImpl(Perl5: UNICODE_CHAR)
      PsiElement(Perl5: \N)('\N')
      PsiElement(Perl5: "{)('{')
      PsiElement(Perl5: charname)('greek:Sigma')
      PsiElement(Perl5: }")('}')
    PerlStringContentElementImpl(Perl5: STRING_CONTENT_QQ)(' is an upper-case sigma.')
    PsiElement(Perl5: \n)('\n')
    PerlStringContentElementImpl(Perl5: STRING_CONTENT_QQ)('";\nuse charnames qw(cyrillic greek);\nprint "')
    PsiPerlUnicodeCharImpl(Perl5: UNICODE_CHAR)
      PsiElement(Perl5: \N)('\N')
      PsiElement(Perl5: "{)('{')
      PsiElement(Perl5: charname)('sigma')
      PsiElement(Perl5: }")('}')
    PerlStringContentElementImpl(Perl5: STRING_CONTENT_QQ)(' is Greek sigma, and ')
    PsiPerlUnicodeCharImpl(Perl5: UNICODE_CHAR)
      PsiElement(Perl5: \N)('\N')
      PsiElement(Perl5: "{)('{')
      PsiElement(Perl5: charname)('be')
      PsiElement(Perl5: }")('}')
    PerlStringContentElementImpl(Perl5: STRING_CONTENT_QQ)(' is Cyrillic b.')
    PsiElement(Perl5: \n)('\n')
    PerlStringContentElementImpl(Perl5: STRING_CONTENT_QQ)('";\n\nuse charnames ":full", ":alias" => {\n    e_ACUTE   => "LATIN SMALL LETTER E WITH ACUTE",\n    mychar    => 0xE8000, # Private use area\n    "自転車に乗る人" => "BICYCLIST"\n};\nprint "')
    PsiPerlUnicodeCharImpl(Perl5: UNICODE_CHAR)
      PsiElement(Perl5: \N)('\N')
      PsiElement(Perl5: "{)('{')
      PsiElement(Perl5: charname)('e_ACUTE')
      PsiElement(Perl5: }")('}')
    PerlStringContentElementImpl(Perl5: STRING_CONTENT_QQ)(' is a small letter e with an acute.')
    PsiElement(Perl5: \n)('\n')
    PerlStringContentElementImpl(Perl5: STRING_CONTENT_QQ)('";\nprint "')
    PsiPerlUnicodeCharImpl(Perl5: UNICODE_CHAR)
      PsiElement(Perl5: \N)('\N')
      PsiElement(Perl5: "{)('{')
      PsiElement(Perl5: charname)('mychar')
      PsiElement(Perl5: }")('}')
    PerlStringContentElementImpl(Perl5: STRING_CONTENT_QQ)(' allows me to name private use characters.')
    PsiElement(Perl5: \n)('\n')
    PerlStringContentElementImpl(Perl5: STRING_CONTENT_QQ)('";\nprint "And I can create synonyms in other languages,",\n    " such as ')
    PsiPerlUnicodeCharImpl(Perl5: UNICODE_CHAR)
      PsiElement(Perl5: \N)('\N')
      PsiElement(Perl5: "{)('{')
      PsiElement(Perl5: charname)('自転車に乗る人')
      PsiElement(Perl5: }")('}')
    PerlStringContentElementImpl(Perl5: STRING_CONTENT_QQ)(' for ')
    PsiElement(Perl5: \\")('\')
    PerlStringContentElementImpl(Perl5: STRING_CONTENT_QQ)('"BICYCLIST (U+1F6B4)')
    PsiElement(Perl5: \n)('\n')
    PerlStringContentElementImpl(Perl5: STRING_CONTENT_QQ)('";\nsay "Hello man ')
    PsiPerlUnicodeCharImpl(Perl5: UNICODE_CHAR)
      PsiElement(Perl5: \N)('\N')
      PsiElement(Perl5: "{)('{')
      PsiElement(Perl5: U+)('U+')
      PsiElement(Perl5: NUMBER_HEX)('21')
      PsiElement(Perl5: }")('}')
    PerlStringContentElementImpl(Perl5: STRING_CONTENT_QQ)(' ')
    PsiPerlUnicodeCharImpl(Perl5: UNICODE_CHAR)
      PsiElement(Perl5: \N)('\N')
      PsiElement(Perl5: "{)('{')
      PsiElement(Perl5: U+)('U+')
      PsiElement(Perl5: NUMBER_HEX)('021')
      PsiElement(Perl5: }")('}')
    PerlStringContentElementImpl(Perl5: STRING_CONTENT_QQ)(' ')
    PsiPerlUnicodeCharImpl(Perl5: UNICODE_CHAR)
      PsiElement(Perl5: \N)('\N')
      PsiElement(Perl5: "{)('{')
      PsiElement(Perl5: U+)('U+')
      PsiElement(Perl5: NUMBER_HEX)('0021')
      PsiElement(Perl5: }")('}')
    PerlStringContentElementImpl(Perl5: STRING_CONTENT_QQ)(' ')
    PsiPerlUnicodeCharImpl(Perl5: UNICODE_CHAR)
      PsiElement(Perl5: \N)('\N')
      PsiElement(Perl5: "{)('{')
      PsiElement(Perl5: U+)('U+')
      PsiElement(Perl5: NUMBER_HEX)('00021')
      PsiElement(Perl5: }")('}')
    PerlStringContentElementImpl(Perl5: STRING_CONTENT_QQ)('";\n')
  PsiComment(Perl5: HEREDOC_END)('EOM')
  PsiPerlStatementImpl(Perl5: STATEMENT)
    PsiPerlHeredocOpenerImpl(Perl5: HEREDOC_OPENER)
      PsiElement(Perl5: heredoc<<)('<<')
      PsiPerlStringDqImpl(Perl5: STRING_DQ)
        PsiElement(Perl5: QUOTE_DOUBLE_OPEN)('"')
        PerlStringContentElementImpl(Perl5: STRING_CONTENT_QQ)('EOM')
        PsiElement(Perl5: QUOTE_DOUBLE_CLOSE)('"')
    PsiElement(Perl5: ;)(';')
  PerlHeredocElementImpl(Perl5: HEREDOC_QQ)
    PerlStringContentElementImpl(Perl5: STRING_CONTENT_QQ)('use charnames ':full';\nprint "')
    PsiPerlUnicodeCharImpl(Perl5: UNICODE_CHAR)
      PsiElement(Perl5: \N)('\N')
      PsiElement(Perl5: "{)('{')
      PsiElement(Perl5: charname)('GREEK SMALL LETTER SIGMA')
      PsiElement(Perl5: }")('}')
    PerlStringContentElementImpl(Perl5: STRING_CONTENT_QQ)(' is called sigma.')
    PsiElement(Perl5: \n)('\n')
    PerlStringContentElementImpl(Perl5: STRING_CONTENT_QQ)('";\nprint "')
    PsiPerlUnicodeCharImpl(Perl5: UNICODE_CHAR)
      PsiElement(Perl5: \N)('\N')
      PsiElement(Perl5: "{)('{')
      PsiElement(Perl5: charname)('LATIN CAPITAL LETTER E WITH VERTICAL LINE BELOW')
      PsiElement(Perl5: }")('}')
    PerlStringContentElementImpl(Perl5: STRING_CONTENT_QQ)('",\n    " is an officially named sequence of two Unicode characters')
    PsiElement(Perl5: \n)('\n')
    PerlStringContentElementImpl(Perl5: STRING_CONTENT_QQ)('";\nuse charnames ':loose';\nprint "')
    PsiPerlUnicodeCharImpl(Perl5: UNICODE_CHAR)
      PsiElement(Perl5: \N)('\N')
      PsiElement(Perl5: "{)('{')
      PsiElement(Perl5: charname)('Greek small-letter  sigma')
      PsiElement(Perl5: }")('}')
    PerlStringContentElementImpl(Perl5: STRING_CONTENT_QQ)('",\n    "can be used to ignore case, underscores, most blanks,",\n    "and when you aren't sure if the official name has hyphens')
    PsiElement(Perl5: \n)('\n')
    PerlStringContentElementImpl(Perl5: STRING_CONTENT_QQ)('";\nuse charnames ':short';\nprint "')
    PsiPerlUnicodeCharImpl(Perl5: UNICODE_CHAR)
      PsiElement(Perl5: \N)('\N')
      PsiElement(Perl5: "{)('{')
      PsiElement(Perl5: charname)('greek:Sigma')
      PsiElement(Perl5: }")('}')
    PerlStringContentElementImpl(Perl5: STRING_CONTENT_QQ)(' is an upper-case sigma.')
    PsiElement(Perl5: \n)('\n')
    PerlStringContentElementImpl(Perl5: STRING_CONTENT_QQ)('";\nuse charnames qw(cyrillic greek);\nprint "')
    PsiPerlUnicodeCharImpl(Perl5: UNICODE_CHAR)
      PsiElement(Perl5: \N)('\N')
      PsiElement(Perl5: "{)('{')
      PsiElement(Perl5: charname)('sigma')
      PsiElement(Perl5: }")('}')
    PerlStringContentElementImpl(Perl5: STRING_CONTENT_QQ)(' is Greek sigma, and ')
    PsiPerlUnicodeCharImpl(Perl5: UNICODE_CHAR)
      PsiElement(Perl5: \N)('\N')
      PsiElement(Perl5: "{)('{')
      PsiElement(Perl5: charname)('be')
      PsiElement(Perl5: }")('}')
    PerlStringContentElementImpl(Perl5: STRING_CONTENT_QQ)(' is Cyrillic b.')
    PsiElement(Perl5: \n)('\n')
    PerlStringContentElementImpl(Perl5: STRING_CONTENT_QQ)('";\n\nuse charnames ":full", ":alias" => {\n    e_ACUTE   => "LATIN SMALL LETTER E WITH ACUTE",\n    mychar    => 0xE8000, # Private use area\n    "自転車に乗る人" => "BICYCLIST"\n};\nprint "')
    PsiPerlUnicodeCharImpl(Perl5: UNICODE_CHAR)
      PsiElement(Perl5: \N)('\N')
      PsiElement(Perl5: "{)('{')
      PsiElement(Perl5: charname)('e_ACUTE')
      PsiElement(Perl5: }")('}')
    PerlStringContentElementImpl(Perl5: STRING_CONTENT_QQ)(' is a small letter e with an acute.')
    PsiElement(Perl5: \n)('\n')
    PerlStringContentElementImpl(Perl5: STRING_CONTENT_QQ)('";\nprint "')
    PsiPerlUnicodeCharImpl(Perl5: UNICODE_CHAR)
      PsiElement(Perl5: \N)('\N')
      PsiElement(Perl5: "{)('{')
      PsiElement(Perl5: charname)('mychar')
      PsiElement(Perl5: }")('}')
    PerlStringContentElementImpl(Perl5: STRING_CONTENT_QQ)(' allows me to name private use characters.')
    PsiElement(Perl5: \n)('\n')
    PerlStringContentElementImpl(Perl5: STRING_CONTENT_QQ)('";\nprint "And I can create synonyms in other languages,",\n    " such as ')
    PsiPerlUnicodeCharImpl(Perl5: UNICODE_CHAR)
      PsiElement(Perl5: \N)('\N')
      PsiElement(Perl5: "{)('{')
      PsiElement(Perl5: charname)('自転車に乗る人')
      PsiElement(Perl5: }")('}')
    PerlStringContentElementImpl(Perl5: STRING_CONTENT_QQ)(' for ')
    PsiElement(Perl5: \\")('\')
    PerlStringContentElementImpl(Perl5: STRING_CONTENT_QQ)('"BICYCLIST (U+1F6B4)')
    PsiElement(Perl5: \n)('\n')
    PerlStringContentElementImpl(Perl5: STRING_CONTENT_QQ)('";\nsay "Hello man ')
    PsiPerlUnicodeCharImpl(Perl5: UNICODE_CHAR)
      PsiElement(Perl5: \N)('\N')
      PsiElement(Perl5: "{)('{')
      PsiElement(Perl5: U+)('U+')
      PsiElement(Perl5: NUMBER_HEX)('21')
      PsiElement(Perl5: }")('}')
    PerlStringContentElementImpl(Perl5: STRING_CONTENT_QQ)(' ')
    PsiPerlUnicodeCharImpl(Perl5: UNICODE_CHAR)
      PsiElement(Perl5: \N)('\N')
      PsiElement(Perl5: "{)('{')
      PsiElement(Perl5: U+)('U+')
      PsiElement(Perl5: NUMBER_HEX)('021')
      PsiElement(Perl5: }")('}')
    PerlStringContentElementImpl(Perl5: STRING_CONTENT_QQ)(' ')
    PsiPerlUnicodeCharImpl(Perl5: UNICODE_CHAR)
      PsiElement(Perl5: \N)('\N')
      PsiElement(Perl5: "{)('{')
      PsiElement(Perl5: U+)('U+')
      PsiElement(Perl5: NUMBER_HEX)('0021')
      PsiElement(Perl5: }")('}')
    PerlStringContentElementImpl(Perl5: STRING_CONTENT_QQ)(' ')
    PsiPerlUnicodeCharImpl(Perl5: UNICODE_CHAR)
      PsiElement(Perl5: \N)('\N')
      PsiElement(Perl5: "{)('{')
      PsiElement(Perl5: U+)('U+')
      PsiElement(Perl5: NUMBER_HEX)('00021')
      PsiElement(Perl5: }")('}')
    PerlStringContentElementImpl(Perl5: STRING_CONTENT_QQ)('";\n')
  PsiComment(Perl5: HEREDOC_END)('EOM')
  PsiPerlStatementImpl(Perl5: STATEMENT)
    PsiPerlHeredocOpenerImpl(Perl5: HEREDOC_OPENER)
      PsiElement(Perl5: heredoc<<)('<<')
      PsiPerlStringSqImpl(Perl5: STRING_SQ)
        PsiElement(Perl5: QUOTE_SINGLE_OPEN)(''')
        PerlStringContentElementImpl(Perl5: STRING_CONTENT)('EOM')
        PsiElement(Perl5: QUOTE_SINGLE_CLOSE)(''')
    PsiElement(Perl5: ;)(';')
  PerlHeredocElementImpl(Perl5: HEREDOC)
    PerlStringContentElementImpl(Perl5: STRING_CONTENT)('use charnames ':full';\nprint "\N{GREEK SMALL LETTER SIGMA} is called sigma.\n";\nprint "\N{LATIN CAPITAL LETTER E WITH VERTICAL LINE BELOW}",\n    " is an officially named sequence of two Unicode characters\n";\nuse charnames ':loose';\nprint "\N{Greek small-letter  sigma}",\n    "can be used to ignore case, underscores, most blanks,",\n    "and when you aren't sure if the official name has hyphens\n";\nuse charnames ':short';\nprint "\N{greek:Sigma} is an upper-case sigma.\n";\nuse charnames qw(cyrillic greek);\nprint "\N{sigma} is Greek sigma, and \N{be} is Cyrillic b.\n";\n\nuse charnames ":full", ":alias" => {\n    e_ACUTE   => "LATIN SMALL LETTER E WITH ACUTE",\n    mychar    => 0xE8000, # Private use area\n    "自転車に乗る人" => "BICYCLIST"\n};\nprint "\N{e_ACUTE} is a small letter e with an acute.\n";\nprint "\N{mychar} allows me to name private use characters.\n";\nprint "And I can create synonyms in other languages,",\n    " such as \N{自転車に乗る人} for \"BICYCLIST (U+1F6B4)\n";\nsay "Hello man \N{U+21} \N{U+021} \N{U+0021} \N{U+00021}";\n')
  PsiComment(Perl5: HEREDOC_END)('EOM')
  PsiPerlStatementImpl(Perl5: STATEMENT)
    PsiPerlHeredocOpenerImpl(Perl5: HEREDOC_OPENER)
      PsiElement(Perl5: heredoc<<)('<<')
      PsiPerlStringXqImpl(Perl5: STRING_XQ)
        PsiElement(Perl5: QUOTE_TICK_OPEN)('`')
        PerlStringContentElementImpl(Perl5: STRING_CONTENT_XQ)('EOM')
        PsiElement(Perl5: QUOTE_TICK_CLOSE)('`')
    PsiElement(Perl5: ;)(';')
  PerlHeredocElementImpl(Perl5: HEREDOC_QX)
    PerlStringContentElementImpl(Perl5: STRING_CONTENT_XQ)('use charnames ':full';\nprint "')
    PsiPerlUnicodeCharImpl(Perl5: UNICODE_CHAR)
      PsiElement(Perl5: \N)('\N')
      PsiElement(Perl5: "{)('{')
      PsiElement(Perl5: charname)('GREEK SMALL LETTER SIGMA')
      PsiElement(Perl5: }")('}')
    PerlStringContentElementImpl(Perl5: STRING_CONTENT_XQ)(' is called sigma.')
    PsiElement(Perl5: \n)('\n')
    PerlStringContentElementImpl(Perl5: STRING_CONTENT_XQ)('";\nprint "')
    PsiPerlUnicodeCharImpl(Perl5: UNICODE_CHAR)
      PsiElement(Perl5: \N)('\N')
      PsiElement(Perl5: "{)('{')
      PsiElement(Perl5: charname)('LATIN CAPITAL LETTER E WITH VERTICAL LINE BELOW')
      PsiElement(Perl5: }")('}')
    PerlStringContentElementImpl(Perl5: STRING_CONTENT_XQ)('",\n    " is an officially named sequence of two Unicode characters')
    PsiElement(Perl5: \n)('\n')
    PerlStringContentElementImpl(Perl5: STRING_CONTENT_XQ)('";\nuse charnames ':loose';\nprint "')
    PsiPerlUnicodeCharImpl(Perl5: UNICODE_CHAR)
      PsiElement(Perl5: \N)('\N')
      PsiElement(Perl5: "{)('{')
      PsiElement(Perl5: charname)('Greek small-letter  sigma')
      PsiElement(Perl5: }")('}')
    PerlStringContentElementImpl(Perl5: STRING_CONTENT_XQ)('",\n    "can be used to ignore case, underscores, most blanks,",\n    "and when you aren't sure if the official name has hyphens')
    PsiElement(Perl5: \n)('\n')
    PerlStringContentElementImpl(Perl5: STRING_CONTENT_XQ)('";\nuse charnames ':short';\nprint "')
    PsiPerlUnicodeCharImpl(Perl5: UNICODE_CHAR)
      PsiElement(Perl5: \N)('\N')
      PsiElement(Perl5: "{)('{')
      PsiElement(Perl5: charname)('greek:Sigma')
      PsiElement(Perl5: }")('}')
    PerlStringContentElementImpl(Perl5: STRING_CONTENT_XQ)(' is an upper-case sigma.')
    PsiElement(Perl5: \n)('\n')
    PerlStringContentElementImpl(Perl5: STRING_CONTENT_XQ)('";\nuse charnames qw(cyrillic greek);\nprint "')
    PsiPerlUnicodeCharImpl(Perl5: UNICODE_CHAR)
      PsiElement(Perl5: \N)('\N')
      PsiElement(Perl5: "{)('{')
      PsiElement(Perl5: charname)('sigma')
      PsiElement(Perl5: }")('}')
    PerlStringContentElementImpl(Perl5: STRING_CONTENT_XQ)(' is Greek sigma, and ')
    PsiPerlUnicodeCharImpl(Perl5: UNICODE_CHAR)
      PsiElement(Perl5: \N)('\N')
      PsiElement(Perl5: "{)('{')
      PsiElement(Perl5: charname)('be')
      PsiElement(Perl5: }")('}')
    PerlStringContentElementImpl(Perl5: STRING_CONTENT_XQ)(' is Cyrillic b.')
    PsiElement(Perl5: \n)('\n')
    PerlStringContentElementImpl(Perl5: STRING_CONTENT_XQ)('";\n\nuse charnames ":full", ":alias" => {\n    e_ACUTE   => "LATIN SMALL LETTER E WITH ACUTE",\n    mychar    => 0xE8000, # Private use area\n    "自転車に乗る人" => "BICYCLIST"\n};\nprint "')
    PsiPerlUnicodeCharImpl(Perl5: UNICODE_CHAR)
      PsiElement(Perl5: \N)('\N')
      PsiElement(Perl5: "{)('{')
      PsiElement(Perl5: charname)('e_ACUTE')
      PsiElement(Perl5: }")('}')
    PerlStringContentElementImpl(Perl5: STRING_CONTENT_XQ)(' is a small letter e with an acute.')
    PsiElement(Perl5: \n)('\n')
    PerlStringContentElementImpl(Perl5: STRING_CONTENT_XQ)('";\nprint "')
    PsiPerlUnicodeCharImpl(Perl5: UNICODE_CHAR)
      PsiElement(Perl5: \N)('\N')
      PsiElement(Perl5: "{)('{')
      PsiElement(Perl5: charname)('mychar')
      PsiElement(Perl5: }")('}')
    PerlStringContentElementImpl(Perl5: STRING_CONTENT_XQ)(' allows me to name private use characters.')
    PsiElement(Perl5: \n)('\n')
    PerlStringContentElementImpl(Perl5: STRING_CONTENT_XQ)('";\nprint "And I can create synonyms in other languages,",\n    " such as ')
    PsiPerlUnicodeCharImpl(Perl5: UNICODE_CHAR)
      PsiElement(Perl5: \N)('\N')
      PsiElement(Perl5: "{)('{')
      PsiElement(Perl5: charname)('自転車に乗る人')
      PsiElement(Perl5: }")('}')
    PerlStringContentElementImpl(Perl5: STRING_CONTENT_XQ)(' for ')
    PsiElement(Perl5: \\")('\')
    PerlStringContentElementImpl(Perl5: STRING_CONTENT_XQ)('"BICYCLIST (U+1F6B4)')
    PsiElement(Perl5: \n)('\n')
    PerlStringContentElementImpl(Perl5: STRING_CONTENT_XQ)('";\nsay "Hello man ')
    PsiPerlUnicodeCharImpl(Perl5: UNICODE_CHAR)
      PsiElement(Perl5: \N)('\N')
      PsiElement(Perl5: "{)('{')
      PsiElement(Perl5: U+)('U+')
      PsiElement(Perl5: NUMBER_HEX)('21')
      PsiElement(Perl5: }")('}')
    PerlStringContentElementImpl(Perl5: STRING_CONTENT_XQ)(' ')
    PsiPerlUnicodeCharImpl(Perl5: UNICODE_CHAR)
      PsiElement(Perl5: \N)('\N')
      PsiElement(Perl5: "{)('{')
      PsiElement(Perl5: U+)('U+')
      PsiElement(Perl5: NUMBER_HEX)('021')
      PsiElement(Perl5: }")('}')
    PerlStringContentElementImpl(Perl5: STRING_CONTENT_XQ)(' ')
    PsiPerlUnicodeCharImpl(Perl5: UNICODE_CHAR)
      PsiElement(Perl5: \N)('\N')
      PsiElement(Perl5: "{)('{')
      PsiElement(Perl5: U+)('U+')
      PsiElement(Perl5: NUMBER_HEX)('0021')
      PsiElement(Perl5: }")('}')
    PerlStringContentElementImpl(Perl5: STRING_CONTENT_XQ)(' ')
    PsiPerlUnicodeCharImpl(Perl5: UNICODE_CHAR)
      PsiElement(Perl5: \N)('\N')
      PsiElement(Perl5: "{)('{')
      PsiElement(Perl5: U+)('U+')
      PsiElement(Perl5: NUMBER_HEX)('00021')
      PsiElement(Perl5: }")('}')
    PerlStringContentElementImpl(Perl5: STRING_CONTENT_XQ)('";\n')
  PsiComment(Perl5: HEREDOC_END)('EOM')
--------------------------------------------------------------------------------
Subtree: Perl5 POD (Perl5 POD)
POD file
  PsiElement(Perl5 POD: POD_OUTER)('<<EOM;\nuse charnames ':full';\nprint "\N{GREEK SMALL LETTER SIGMA} is called sigma.\n";\nprint "\N{LATIN CAPITAL LETTER E WITH VERTICAL LINE BELOW}",\n    " is an officially named sequence of two Unicode characters\n";\nuse charnames ':loose';\nprint "\N{Greek small-letter  sigma}",\n    "can be used to ignore case, underscores, most blanks,",\n    "and when you aren't sure if the official name has hyphens\n";\nuse charnames ':short';\nprint "\N{greek:Sigma} is an upper-case sigma.\n";\nuse charnames qw(cyrillic greek);\nprint "\N{sigma} is Greek sigma, and \N{be} is Cyrillic b.\n";\n\nuse charnames ":full", ":alias" => {\n    e_ACUTE   => "LATIN SMALL LETTER E WITH ACUTE",\n    mychar    => 0xE8000, # Private use area\n    "自転車に乗る人" => "BICYCLIST"\n};\nprint "\N{e_ACUTE} is a small letter e with an acute.\n";\nprint "\N{mychar} allows me to name private use characters.\n";\nprint "And I can create synonyms in other languages,",\n    " such as \N{自転車に乗る人} for \"BICYCLIST (U+1F6B4)\n";\nsay "Hello man \N{U+21} \N{U+021} \N{U+0021} \N{U+00021}";\nEOM\n\n<<"EOM";\nuse charnames ':full';\nprint "\N{GREEK SMALL LETTER SIGMA} is called sigma.\n";\nprint "\N{LATIN CAPITAL LETTER E WITH VERTICAL LINE BELOW}",\n    " is an officially named sequence of two Unicode characters\n";\nuse charnames ':loose';\nprint "\N{Greek small-letter  sigma}",\n    "can be used to ignore case, underscores, most blanks,",\n    "and when you aren't sure if the official name has hyphens\n";\nuse charnames ':short';\nprint "\N{greek:Sigma} is an upper-case sigma.\n";\nuse charnames qw(cyrillic greek);\nprint "\N{sigma} is Greek sigma, and \N{be} is Cyrillic b.\n";\n\nuse charnames ":full", ":alias" => {\n    e_ACUTE   => "LATIN SMALL LETTER E WITH ACUTE",\n    mychar    => 0xE8000, # Private use area\n    "自転車に乗る人" => "BICYCLIST"\n};\nprint "\N{e_ACUTE} is a small letter e with an acute.\n";\nprint "\N{mychar} allows me to name private use characters.\n";\nprint "And I can create synonyms in other languages,",\n    " such as \N{自転車に乗る人} for \"BICYCLIST (U+1F6B4)\n";\nsay "Hello man \N{U+21} \N{U+021} \N{U+0021} \N{U+00021}";\nEOM\n\n<<'EOM';\nuse charnames ':full';\nprint "\N{GREEK SMALL LETTER SIGMA} is called sigma.\n";\nprint "\N{LATIN CAPITAL LETTER E WITH VERTICAL LINE BELOW}",\n    " is an officially named sequence of two Unicode characters\n";\nuse charnames ':loose';\nprint "\N{Greek small-letter  sigma}",\n    "can be used to ignore case, underscores, most blanks,",\n    "and when you aren't sure if the official name has hyphens\n";\nuse charnames ':short';\nprint "\N{greek:Sigma} is an upper-case sigma.\n";\nuse charnames qw(cyrillic greek);\nprint "\N{sigma} is Greek sigma, and \N{be} is Cyrillic b.\n";\n\nuse charnames ":full", ":alias" => {\n    e_ACUTE   => "LATIN SMALL LETTER E WITH ACUTE",\n    mychar    => 0xE8000, # Private use area\n    "自転車に乗る人" => "BICYCLIST"\n};\nprint "\N{e_ACUTE} is a small letter e with an acute.\n";\nprint "\N{mychar} allows me to name private use characters.\n";\nprint "And I can create synonyms in other languages,",\n    " such as \N{自転車に乗る人} for \"BICYCLIST (U+1F6B4)\n";\nsay "Hello man \N{U+21} \N{U+021} \N{U+0021} \N{U+00021}";\nEOM\n\n<<`EOM`;\nuse charnames ':full';\nprint "\N{GREEK SMALL LETTER SIGMA} is called sigma.\n";\nprint "\N{LATIN CAPITAL LETTER E WITH VERTICAL LINE BELOW}",\n    " is an officially named sequence of two Unicode characters\n";\nuse charnames ':loose';\nprint "\N{Greek small-letter  sigma}",\n    "can be used to ignore case, underscores, most blanks,",\n    "and when you aren't sure if the official name has hyphens\n";\nuse charnames ':short';\nprint "\N{greek:Sigma} is an upper-case sigma.\n";\nuse charnames qw(cyrillic greek);\nprint "\N{sigma} is Greek sigma, and \N{be} is Cyrillic b.\n";\n\nuse charnames ":full", ":alias" => {\n    e_ACUTE   => "LATIN SMALL LETTER E WITH ACUTE",\n    mychar    => 0xE8000, # Private use area\n    "自転車に乗る人" => "BICYCLIST"\n};\nprint "\N{e_ACUTE} is a small letter e with an acute.\n";\nprint "\N{mychar} allows me to name private use characters.\n";\nprint "And I can create synonyms in other languages,",\n    " such as \N{自転車に乗る人} for \"BICYCLIST (U+1F6B4)\n";\nsay "Hello man \N{U+21} \N{U+021} \N{U+0021} \N{U+00021}";\nEOM')
--------------------------------------------------------------------------------
