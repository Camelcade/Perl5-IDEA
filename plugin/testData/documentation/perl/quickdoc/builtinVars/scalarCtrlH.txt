<p><a href="psi_element://perlvar">perlvar</a>: <a href="psi_element://perlvar%2FSPECIAL+VARIABLES">SPECIAL VARIABLES</a>: <a href="psi_element://perlvar%2FVariables+related+to+the+interpreter+state">Variables related to the interpreter state</a></p><dl><dt style="padding-bottom:4px;font-weight:bold;">$^H</dt><dd style="padding-top:6px;"><p style="padding-bottom: 10px;">WARNING: This variable is strictly for
internal use only.  Its availability,
behavior, and contents are subject to change without notice.</p>
<p style="padding-bottom: 10px;">This variable contains compile-time hints for the Perl interpreter.  At the
end of compilation of a BLOCK the value of this variable is restored to the
value when the interpreter started to compile the BLOCK.</p>
<p style="padding-bottom: 10px;">When perl begins to parse any block construct that provides a lexical scope
(e.g., eval body, required file, subroutine body, loop body, or conditional
block), the existing value of <code>$^H</code> is saved, but its value is left unchanged.
When the compilation of the block is completed, it regains the saved value.
Between the points where its value is saved and restored, code that
executes within BEGIN blocks is free to change the value of <code>$^H</code>.</p>
<p style="padding-bottom: 10px;">This behavior provides the semantic of lexical scoping, and is used in,
for instance, the <code>use strict</code> pragma.</p>
<p style="padding-bottom: 10px;">The contents should be an integer; different bits of it are used for
different pragmatic flags.  Here's an example:</p>
<div style="padding-bottom: 10px;"><pre><code>    sub add_100 { $^H |= 0x100 }

    sub foo {
	BEGIN { add_100() }
	bar-&gt;baz($boon);
    }</code></pre></div>
<p style="padding-bottom: 10px;">Consider what happens during execution of the BEGIN block.  At this point
the BEGIN block has already been compiled, but the body of <code>foo()</code> is still
being compiled.  The new value of <code>$^H</code>
will therefore be visible only while
the body of <code>foo()</code> is being compiled.</p>
<p style="padding-bottom: 10px;">Substitution of <code>BEGIN { add_100() }</code> block with:</p>
<div style="padding-bottom: 10px;"><pre><code>    BEGIN { require strict; strict-&gt;import('vars') }</code></pre></div>
<p style="padding-bottom: 10px;">demonstrates how <code>use strict 'vars'</code> is implemented.  Here's a conditional
version of the same lexical pragma:</p>
<div style="padding-bottom: 10px;"><pre><code>    BEGIN {
	require strict; strict-&gt;import('vars') if $condition
    }</code></pre></div>
<p style="padding-bottom: 10px;">This variable was added in Perl 5.003.</p></dd></dl>
