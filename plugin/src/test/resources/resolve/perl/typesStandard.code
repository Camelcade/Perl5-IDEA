package Types::Standard;
say Any;
say Item;
say Bool;
say Undef;
say Defined;
say Value;
say Str;
say LaxNum;
say StrictNum;
say Num;
say Int;
say ClassName;
say RoleName;
say Ref;
say CodeRef;
say RegexpRef;
say GlobRef;
say FileHandle;
say ArrayRef;
say HashRef;
say ScalarRef;
say Object;
say Maybe;
say Map;
say Optional;
say Tuple;
say CycleTuple;
say Dict;
say Overload;
say StrMatch;
say OptList;
say Tied;
say InstanceOf;
say ConsumerOf;
say HasMethods;
say Enum;
say MkOpt;
say Join;
say Split;
say Any();
say Item();
say Bool();
say Undef();
say Defined();
say Value();
say Str();
say LaxNum();
say StrictNum();
say Num();
say Int();
say ClassName();
say RoleName();
say Ref();
say CodeRef();
say RegexpRef();
say GlobRef();
#say FileHandle(); # this one is lexed as a package now
say ArrayRef();
say HashRef();
say ScalarRef();
say Object();
say Maybe();
say Map();
say Optional();
say Tuple();
say CycleTuple();
say Dict();
say Overload();
say StrMatch();
say OptList();
say Tied();
say InstanceOf();
say ConsumerOf();
say HasMethods();
say Enum();
say MkOpt();
say Join();
say Split();

package main;
say Types::Standard::Any;
say Types::Standard->Any;
say Types::Standard::Any();
say Types::Standard->Any();
say Types::Standard::ArrayRef;
say Types::Standard->ArrayRef;
say Types::Standard::ArrayRef();
say Types::Standard->ArrayRef();
say Types::Standard::Bool;
say Types::Standard->Bool;
say Types::Standard::Bool();
say Types::Standard->Bool();
say Types::Standard::ClassName;
say Types::Standard->ClassName;
say Types::Standard::ClassName();
say Types::Standard->ClassName();
say Types::Standard::CodeRef;
say Types::Standard->CodeRef;
say Types::Standard::CodeRef();
say Types::Standard->CodeRef();
say Types::Standard::ConsumerOf;
say Types::Standard->ConsumerOf;
say Types::Standard::ConsumerOf();
say Types::Standard->ConsumerOf();
say Types::Standard::CycleTuple;
say Types::Standard->CycleTuple;
say Types::Standard::CycleTuple();
say Types::Standard->CycleTuple();
say Types::Standard::Defined;
say Types::Standard->Defined;
say Types::Standard::Defined();
say Types::Standard->Defined();
say Types::Standard::Dict;
say Types::Standard->Dict;
say Types::Standard::Dict();
say Types::Standard->Dict();
say Types::Standard::Enum;
say Types::Standard->Enum;
say Types::Standard::Enum();
say Types::Standard->Enum();
say Types::Standard::FileHandle;
say Types::Standard->FileHandle;
say Types::Standard::FileHandle();
say Types::Standard->FileHandle();
say Types::Standard::GlobRef;
say Types::Standard->GlobRef;
say Types::Standard::GlobRef();
say Types::Standard->GlobRef();
say Types::Standard::HasMethods;
say Types::Standard->HasMethods;
say Types::Standard::HasMethods();
say Types::Standard->HasMethods();
say Types::Standard::HashRef;
say Types::Standard->HashRef;
say Types::Standard::HashRef();
say Types::Standard->HashRef();
say Types::Standard::InstanceOf;
say Types::Standard->InstanceOf;
say Types::Standard::InstanceOf();
say Types::Standard->InstanceOf();
say Types::Standard::Int;
say Types::Standard->Int;
say Types::Standard::Int();
say Types::Standard->Int();
say Types::Standard::Item;
say Types::Standard->Item;
say Types::Standard::Item();
say Types::Standard->Item();
say Types::Standard::Join;
say Types::Standard->Join;
say Types::Standard::Join();
say Types::Standard->Join();
say Types::Standard::LaxNum;
say Types::Standard->LaxNum;
say Types::Standard::LaxNum();
say Types::Standard->LaxNum();
say Types::Standard::Map;
say Types::Standard->Map;
say Types::Standard::Map();
say Types::Standard->Map();
say Types::Standard::Maybe;
say Types::Standard->Maybe;
say Types::Standard::Maybe();
say Types::Standard->Maybe();
say Types::Standard::MkOpt;
say Types::Standard->MkOpt;
say Types::Standard::MkOpt();
say Types::Standard->MkOpt();
say Types::Standard::Num;
say Types::Standard->Num;
say Types::Standard::Num();
say Types::Standard->Num();
say Types::Standard::Object;
say Types::Standard->Object;
say Types::Standard::Object();
say Types::Standard->Object();
say Types::Standard::OptList;
say Types::Standard->OptList;
say Types::Standard::OptList();
say Types::Standard->OptList();
say Types::Standard::Optional;
say Types::Standard->Optional;
say Types::Standard::Optional();
say Types::Standard->Optional();
say Types::Standard::Overload;
say Types::Standard->Overload;
say Types::Standard::Overload();
say Types::Standard->Overload();
say Types::Standard::Ref;
say Types::Standard->Ref;
say Types::Standard::Ref();
say Types::Standard->Ref();
say Types::Standard::RegexpRef;
say Types::Standard->RegexpRef;
say Types::Standard::RegexpRef();
say Types::Standard->RegexpRef();
say Types::Standard::RoleName;
say Types::Standard->RoleName;
say Types::Standard::RoleName();
say Types::Standard->RoleName();
say Types::Standard::ScalarRef;
say Types::Standard->ScalarRef;
say Types::Standard::ScalarRef();
say Types::Standard->ScalarRef();
say Types::Standard::Split;
say Types::Standard->Split;
say Types::Standard::Split();
say Types::Standard->Split();
say Types::Standard::Str;
say Types::Standard->Str;
say Types::Standard::Str();
say Types::Standard->Str();
say Types::Standard::StrMatch;
say Types::Standard->StrMatch;
say Types::Standard::StrMatch();
say Types::Standard->StrMatch();
say Types::Standard::StrictNum;
say Types::Standard->StrictNum;
say Types::Standard::StrictNum();
say Types::Standard->StrictNum();
say Types::Standard::Tied;
say Types::Standard->Tied;
say Types::Standard::Tied();
say Types::Standard->Tied();
say Types::Standard::Tuple;
say Types::Standard->Tuple;
say Types::Standard::Tuple();
say Types::Standard->Tuple();
say Types::Standard::Undef;
say Types::Standard->Undef;
say Types::Standard::Undef();
say Types::Standard->Undef();
say Types::Standard::Value;
say Types::Standard->Value;
say Types::Standard::Value();
say Types::Standard->Value();
