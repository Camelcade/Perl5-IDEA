sub fnord (&\%) : switch(10,foo(7,3))  :  expensive;
sub plugh () : Ugly('\(") :Bad;
sub xyzzy : _5x5 { ... }

sub foo : method;
my $s = sub : method { ... };
sub foo : method;
sub foo : switch(10,foo(7,3))  :  expensive;
sub foo : Ugly('\(") :Bad;
sub foo : _5x5;
sub foo : lvalue method;

sub abc: prototype($$$$){};
sub abc: prototype($$$$);

sub abc($$$@): method;
sub abc($$$@): method {};

sub abc($argument): method othermethod : otherthing(withparame) {};
sub abc($): method othermethod : otherthing(withparame) {};
sub abc($=): method othermethod : otherthing(withparame) {};
sub abc($argument, $): method othermethod : otherthing(withparame) {};
sub abc($argument, %): method othermethod : otherthing(withparame) {};
sub abc($argument, @): method othermethod : otherthing(withparame) {};
sub abc($argument, $=): method othermethod : otherthing(withparame) {};
sub abc($argument, %=): method othermethod : otherthing(withparame) {};
sub abc($argument, @=): method othermethod : otherthing(withparame) {};

sub abc($$$@): method othermethod : otherthing(withparame);
sub abc($$$@): method othermethod : otherthing(withparame);
sub abc($$$@): method othermethod : otherthing(withparame);
sub abc($$$@): method othermethod : otherthing(withparame);
sub abc($$$@): method othermethod : otherthing(withparame);
sub abc($$$@): method othermethod : otherthing(withparame);

sub abc: method;
sub abc: method{};

sub foo : MyAttribute Test {
    print "foo\n";
}
sub foo :Loud("turn it up to 11, man!") {...}
sub foo :Loud(till=>ears=>are=>bleeding) {...}
sub foo :Loud(qw/till ears are bleeding/) {...}
sub foo :Loud(qw/till, ears, are, bleeding/) {...}
sub foo :Loud(till,ears,are,bleeding) {...}
sub foo :Loud(['till','ears','are','bleeding']) {...}
sub foo :Loud(my,ears,are,bleeding) {...}
sub foo :Loud(qw/my ears are bleeding) {...}
sub RealLoud :ATTR(SCALAR) { print "Yeeeeow!" }
sub RealLoud :ATTR(SCALAR) { print "Yeeeeow!" }
sub RealLoud :ATTR(ARRAY) { print "Urrrrrrrrrr!" }
sub RealLoud :ATTR(HASH) { print "Arrrrrgggghhhhhh!" }
sub RealLoud :ATTR(CODE) { croak "Real loud sub torpedoed" }
sub SeriousLoud :ATTR(ANY) { warn "Hearing loss imminent" }
sub Raw          : ATTR(RAWDATA) {...}
sub Nekkid       : ATTR(SCALAR,RAWDATA) {...}
sub Au::Naturale : ATTR(RAWDATA,ANY) {...}
sub Early    :ATTR(SCALAR,BEGIN) {...}
sub Normal   :ATTR(SCALAR,CHECK) {...}
sub Late     :ATTR(SCALAR,INIT) {...}
sub Final    :ATTR(SCALAR,END) {...}
sub Bookends :ATTR(SCALAR,BEGIN,END) {...}
sub UNIVERSAL::Name :ATTR {
    $name{$_[2]} = $_[4];
}
sub UNIVERSAL::Purpose :ATTR {
    print STDERR "Purpose of ", &name, " is $_[4]\n";
}
sub UNIVERSAL::Unit :ATTR {
    print STDERR & name, " measured in $_[4]\n";
}

sub foo :Loud("turn it up to 11, man!")
    :Loud(till=>ears=>are=>bleeding)
    :Loud(qw/till ears are bleeding/)
    sub foo :Loud(qw/till, ears, are, bleeding/)
    sub foo :Loud(till,ears,are,bleeding)
    sub foo :Loud(['till','ears','are','bleeding'])
    sub foo :Loud(my,ears,are,bleeding)
    sub foo :Loud(qw/my ears are bleeding)
    sub RealLoud :ATTR(SCALAR)
    sub RealLoud :ATTR(SCALAR)
    sub RealLoud :ATTR(ARRAY)
    sub RealLoud :ATTR(HASH)
    sub RealLoud :ATTR(CODE)
    sub SeriousLoud :ATTR(ANY)
    sub Raw          : ATTR(RAWDATA)
    sub Nekkid       : ATTR(SCALAR,RAWDATA)
    sub Au :Naturale : ATTR(RAWDATA,ANY)
    sub Early    :ATTR(SCALAR,BEGIN)
    sub Normal   :ATTR(SCALAR,CHECK)
    sub Late     :ATTR(SCALAR,INIT)
    sub Final    :ATTR(SCALAR,END)
    sub Bookends :ATTR(SCALAR,BEGIN,END) {...}

sub Good : ATTR(SCALAR) {
    my ($package, $symbol, $referent, $attr, $data) = @_;
    # Invoked for any scalar variable with a :Good attribute,
    # provided the variable was declared in MyClass (or
    # a derived class) or typed to MyClass.
    # Do whatever to $referent here (executed in CHECK phase).
    ...
}
sub Bad : ATTR(SCALAR) {
    # Invoked for any scalar variable with a :Bad attribute,
    # provided the variable was declared in MyClass (or
    # a derived class) or typed to MyClass.
    ...
}
sub Good : ATTR(ARRAY) {
    # Invoked for any array variable with a :Good attribute,
    # provided the variable was declared in MyClass (or
    # a derived class) or typed to MyClass.
    ...
}
sub Good : ATTR(HASH) {
    # Invoked for any hash variable with a :Good attribute,
    # provided the variable was declared in MyClass (or
    # a derived class) or typed to MyClass.
    ...
}
sub Ugly : ATTR(CODE) {
    # Invoked for any subroutine declared in MyClass (or a
    # derived class) with an :Ugly attribute.
    ...
}
sub Omni : ATTR {
    # Invoked for any scalar, array, hash, or subroutine
    # with an :Omni attribute, provided the variable or
    # subroutine was declared in MyClass (or a derived class)
    # or the variable was typed to MyClass.
    # Use ref($_[2]) to determine what kind of referent it was.
    ...
}

sub Loud :ATTR {
    my ($package, $symbol, $referent, $attr, $data, $phase,
        $filename, $linenum) = @_;
    print STDERR
        ref($referent), " ",
        *{$symbol}{NAME}, " ",
        "($referent) ", "was just declared ",
        "and ascribed the ${attr} attribute ",
        "with data ($data)\n",
        "in phase $phase\n",
        "in file $filename at line $linenum\n";
}
