File size: 7549450
Re-highlighted ranges: 681520
Avg range size: 11.077363833783307
Min range size: 1
Max range size: 88063
10% of text has range <= 6
20% of text has range <= 9
30% of text has range <= 13
40% of text has range <= 19
50% of text has range <= 26
60% of text has range <= 31
70% of text has range <= 52
80% of text has range <= 86
90% of text has range <= 1855
----------
Range: (5044,7849) (2805)
=head1␣NAME

Test␣-␣provides␣a␣simple␣framework␣for␣writing␣test␣scripts

=head1␣SYNOPSIS

␣␣use␣strict;
␣␣use␣Test;

␣␣#␣use␣a␣BEGIN␣block␣so␣we␣print␣our␣plan␣before␣MyModule␣is␣loaded
␣␣BEGIN␣{␣plan␣tests␣=>␣14,␣todo␣=>␣[3,4]␣}

␣␣#␣load␣your␣module...
␣␣use␣MyModule;

␣␣#␣Helpful␣notes.␣␣All␣note-lines␣must␣start␣with␣a␣"#".
␣␣print␣"#␣I'm␣testing␣MyModule␣version␣$MyModule::VERSION\n";

␣␣ok(0);␣#␣failure
␣␣ok(1);␣#␣success

␣␣ok(0);␣#␣ok,␣expected␣failure␣(see␣todo␣list,␣above)
␣␣ok(1);␣#␣surprise␣success!

␣␣ok(0,1);␣␣␣␣␣␣␣␣␣␣␣␣␣#␣failure:␣'0'␣ne␣'1'
␣␣ok('broke','fixed');␣#␣failure:␣'broke'␣ne␣'fixed'
␣␣ok('fixed','fixed');␣#␣success:␣'fixed'␣eq␣'fixed'
␣␣ok('fixed',qr/x/);␣␣␣#␣success:␣'fixed'␣=~␣qr/x/

␣␣ok(sub␣{␣1+1␣},␣2);␣␣#␣success:␣'2'␣eq␣'2'
␣␣ok(sub␣{␣1+1␣},␣3);␣␣#␣failure:␣'2'␣ne␣'3'

␣␣my␣@list␣=␣(0,0);
␣␣ok␣@list,␣3,␣"\@list=".join(',',@list);␣␣␣␣␣␣#extra␣notes
␣␣ok␣'segmentation␣fault',␣'/(?i)success/';␣␣␣␣#regex␣match

␣␣skip(
␣␣␣␣$^O␣=~␣m/MSWin/␣?␣"Skip␣if␣MSWin"␣:␣0,␣␣#␣whether␣to␣skip
␣␣␣␣$foo,␣$bar␣␣#␣arguments␣just␣like␣for␣ok(...)
␣␣);
␣␣skip(
␣␣␣␣$^O␣=~␣m/MSWin/␣?␣0␣:␣"Skip␣unless␣MSWin",␣␣#␣whether␣to␣skip
␣␣␣␣$foo,␣$bar␣␣#␣arguments␣just␣like␣for␣ok(...)
␣␣);

=head1␣DESCRIPTION

This␣module␣simplifies␣the␣task␣of␣writing␣test␣files␣for␣Perl␣modules,
such␣that␣their␣output␣is␣in␣the␣format␣that
L<Test::Harness|Test::Harness>␣expects␣to␣see.

=head1␣QUICK␣START␣GUIDE

To␣write␣a␣test␣for␣your␣new␣(and␣probably␣not␣even␣done)␣module,␣create
a␣new␣file␣called␣F<t/test.t>␣(in␣a␣new␣F<t>␣directory).␣If␣you␣have
multiple␣test␣files,␣to␣test␣the␣"foo",␣"bar",␣and␣"baz"␣feature␣sets,
then␣feel␣free␣to␣call␣your␣files␣F<t/foo.t>,␣F<t/bar.t>,␣and
F<t/baz.t>

=head2␣Functions

This␣module␣defines␣three␣public␣functions,␣C<plan(...)>,␣C<ok(...)>,
and␣C<skip(...)>.␣␣By␣default,␣all␣three␣are␣exported␣by
the␣C<use␣Test;>␣statement.

=over␣4

=item␣C<plan(...)>

␣␣␣␣␣BEGIN␣{␣plan␣%theplan;␣}

This␣should␣be␣the␣first␣thing␣you␣call␣in␣your␣test␣script.␣␣It
declares␣your␣testing␣plan,␣how␣many␣there␣will␣be,␣if␣any␣of␣them
should␣be␣allowed␣to␣fail,␣and␣so␣on.

Typical␣usage␣is␣just:

␣␣␣␣␣use␣Test;
␣␣␣␣␣BEGIN␣{␣plan␣tests␣=>␣23␣}

These␣are␣the␣things␣that␣you␣can␣put␣in␣the␣parameters␣to␣plan:

=over

=item␣C<tests␣=E<gt>␣I<number>>

The␣number␣of␣tests␣in␣your␣script.
This␣means␣all␣ok()␣and␣skip()␣calls.

=item␣C<todo␣=E<gt>␣[I<1,5,14>]>

A␣reference␣to␣a␣list␣of␣tests␣which␣are␣allowed␣to␣fail.
See␣L</TODO␣TESTS>.

=item␣C<onfail␣=E<gt>␣sub␣{␣...␣}>

=item␣C<onfail␣=E<gt>␣\&some_sub>

A␣subroutine␣reference␣to␣be␣run␣at␣the␣end␣of␣the␣test␣script,␣if
any␣of␣the␣tests␣fail.␣␣See␣L</ONFAIL>.

=back

You␣must␣call␣C<plan(...)>␣once␣and␣only␣once.␣␣You␣should␣call␣it
in␣a␣C<BEGIN␣{...}>␣block,␣like␣so:

␣␣␣␣␣BEGIN␣{␣plan␣tests␣=>␣23␣}

=cut
----------
Range: (10628,14651) (4023)
}


=end␣_private

=item␣C<ok(...)>

␣␣ok(1␣+␣1␣==␣2);
␣␣ok($have,␣$expect);
␣␣ok($have,␣$expect,␣$diagnostics);

This␣function␣is␣the␣reason␣for␣C<Test>'s␣existence.␣␣It's
the␣basic␣function␣that
handles␣printing␣"C<ok>"␣or␣"C<not␣ok>",␣along␣with␣the
current␣test␣number.␣␣(That's␣what␣C<Test::Harness>␣wants␣to␣see.)

In␣its␣most␣basic␣usage,␣C<ok(...)>␣simply␣takes␣a␣single␣scalar
expression.␣␣If␣its␣value␣is␣true,␣the␣test␣passes;␣if␣false,
the␣test␣fails.␣␣Examples:

␣␣␣␣#␣Examples␣of␣ok(scalar)

␣␣␣␣ok(␣1␣+␣1␣==␣2␣);␣␣␣␣␣␣␣␣␣␣␣#␣ok␣if␣1␣+␣1␣==␣2
␣␣␣␣ok(␣$foo␣=~␣/bar/␣);␣␣␣␣␣␣␣␣#␣ok␣if␣$foo␣contains␣'bar'
␣␣␣␣ok(␣baz($x␣+␣$y)␣eq␣'Armondo'␣);␣␣␣␣#␣ok␣if␣baz($x␣+␣$y)␣returns
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣'Armondo'
␣␣␣␣ok(␣@a␣==␣@b␣);␣␣␣␣␣␣␣␣␣␣␣␣␣#␣ok␣if␣@a␣and␣@b␣are␣the␣same␣length

The␣expression␣is␣evaluated␣in␣scalar␣context.␣␣So␣the␣following␣will
work:

␣␣␣␣ok(␣@stuff␣);␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣ok␣if␣@stuff␣has␣any␣elements
␣␣␣␣ok(␣!grep␣!defined␣$_,␣@stuff␣);␣␣␣␣#␣ok␣if␣everything␣in␣@stuff␣is
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣defined.

A␣special␣case␣is␣if␣the␣expression␣is␣a␣subroutine␣reference␣(in␣either
C<sub␣{...}>␣syntax␣or␣C<\&foo>␣syntax).␣␣In
that␣case,␣it␣is␣executed␣and␣its␣value␣(true␣or␣false)␣determines␣if
the␣test␣passes␣or␣fails.␣␣For␣example,

␣␣␣␣ok(␣sub␣{␣␣␣#␣See␣whether␣sleep␣works␣at␣least␣passably
␣␣␣␣␣␣my␣$start_time␣=␣time;
␣␣␣␣␣␣sleep␣5;
␣␣␣␣␣␣time()␣-␣$start_time␣␣>=␣4
␣␣␣␣});

In␣its␣two-argument␣form,␣C<ok(I<arg1>,␣I<arg2>)>␣compares␣the␣two
scalar␣values␣to␣see␣if␣they␣match.␣␣They␣match␣if␣both␣are␣undefined,
or␣if␣I<arg2>␣is␣a␣regex␣that␣matches␣I<arg1>,␣or␣if␣they␣compare␣equal
with␣C<eq>.

␣␣␣␣#␣Example␣of␣ok(scalar,␣scalar)

␣␣␣␣ok(␣"this",␣"that"␣);␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣not␣ok,␣'this'␣ne␣'that'
␣␣␣␣ok(␣"",␣undef␣);␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣not␣ok,␣""␣is␣defined

The␣second␣argument␣is␣considered␣a␣regex␣if␣it␣is␣either␣a␣regex
object␣or␣a␣string␣that␣looks␣like␣a␣regex.␣␣Regex␣objects␣are
constructed␣with␣the␣qr//␣operator␣in␣recent␣versions␣of␣perl.␣␣A
string␣is␣considered␣to␣look␣like␣a␣regex␣if␣its␣first␣and␣last
characters␣are␣"/",␣or␣if␣the␣first␣character␣is␣"m"
and␣its␣second␣and␣last␣characters␣are␣both␣the
same␣non-alphanumeric␣non-whitespace␣character.␣␣These␣regexp

Regex␣examples:

␣␣␣␣ok(␣'JaffO',␣'/Jaff/'␣);␣␣␣␣#␣ok,␣'JaffO'␣=~␣/Jaff/
␣␣␣␣ok(␣'JaffO',␣'m|Jaff|'␣);␣␣␣#␣ok,␣'JaffO'␣=~␣m|Jaff|
␣␣␣␣ok(␣'JaffO',␣qr/Jaff/␣);␣␣␣␣#␣ok,␣'JaffO'␣=~␣qr/Jaff/;
␣␣␣␣ok(␣'JaffO',␣'/(?i)jaff/␣);␣#␣ok,␣'JaffO'␣=~␣/jaff/i;

If␣either␣(or␣both!)␣is␣a␣subroutine␣reference,␣it␣is␣run␣and␣used
as␣the␣value␣for␣comparing.␣␣For␣example:

␣␣␣␣ok␣sub␣{
␣␣␣␣␣␣␣␣open(OUT,␣">x.dat")␣||␣die␣$!;
␣␣␣␣␣␣␣␣print␣OUT␣"\x{e000}";
␣␣␣␣␣␣␣␣close␣OUT;
␣␣␣␣␣␣␣␣my␣$bytecount␣=␣-s␣'x.dat';
␣␣␣␣␣␣␣␣unlink␣'x.dat'␣or␣warn␣"Can't␣unlink␣:␣$!";
␣␣␣␣␣␣␣␣return␣$bytecount;
␣␣␣␣␣␣},
␣␣␣␣␣␣4
␣␣␣␣;

The␣above␣test␣passes␣two␣values␣to␣C<ok(arg1,␣arg2)>␣--␣the␣first␣
a␣coderef,␣and␣the␣second␣is␣the␣number␣4.␣␣Before␣C<ok>␣compares␣them,
it␣calls␣the␣coderef,␣and␣uses␣its␣return␣value␣as␣the␣real␣value␣of
this␣parameter.␣Assuming␣that␣C<$bytecount>␣returns␣4,␣C<ok>␣ends␣up
testing␣C<4␣eq␣4>.␣␣Since␣that's␣true,␣this␣test␣passes.

Finally,␣you␣can␣append␣an␣optional␣third␣argument,␣in
C<ok(I<arg1>,I<arg2>,␣I<note>)>,␣where␣I<note>␣is␣a␣string␣value␣that
will␣be␣printed␣if␣the␣test␣fails.␣␣This␣should␣be␣some␣useful
information␣about␣the␣test,␣pertaining␣to␣why␣it␣failed,␣and/or
a␣description␣of␣the␣test.␣␣For␣example:

␣␣␣␣ok(␣grep($_␣eq␣'something␣unique',␣@stuff),␣1,
␣␣␣␣␣␣␣␣"Something␣that␣should␣be␣unique␣isn't!\n".
␣␣␣␣␣␣␣␣'@stuff␣=␣'.join␣',␣',␣@stuff
␣␣␣␣␣␣);

Unfortunately,␣a␣note␣cannot␣be␣used␣with␣the␣single␣argument
style␣of␣C<ok()>.␣␣That␣is,␣if␣you␣try␣C<ok(I<arg1>,␣I<note>)>,␣then
C<Test>␣will␣interpret␣this␣as␣C<ok(I<arg1>,␣I<arg2>)>,␣and␣probably
end␣up␣testing␣C<I<arg1>␣eq␣I<arg2>>␣--␣and␣that's␣not␣what␣you␣want!

All␣of␣the␣above␣special␣cases␣can␣occasionally␣cause␣some
problems.␣␣See␣L</BUGS␣and␣CAVEATS>.

=cut
----------
Range: (22147,24477) (2330)
=item␣C<skip(I<skip_if_true>,␣I<args...>)>

This␣is␣used␣for␣tests␣that␣under␣some␣conditions␣can␣be␣skipped.␣␣It's
basically␣equivalent␣to:

␣␣if(␣$skip_if_true␣)␣{
␣␣␣␣ok(1);
␣␣}␣else␣{
␣␣␣␣ok(␣args...␣);
␣␣}

...except␣that␣the␣C<ok(1)>␣emits␣not␣just␣"C<ok␣I<testnum>>"␣but
actually␣"C<ok␣I<testnum>␣#␣I<skip_if_true_value>>".

The␣arguments␣after␣the␣I<skip_if_true>␣are␣what␣is␣fed␣to␣C<ok(...)>␣if
this␣test␣isn't␣skipped.

Example␣usage:

␣␣my␣$if_MSWin␣=
␣␣␣␣$^O␣=~␣m/MSWin/␣?␣'Skip␣if␣under␣MSWin'␣:␣'';

␣␣#␣A␣test␣to␣be␣skipped␣if␣under␣MSWin␣(i.e.,␣run␣except␣under␣MSWin)
␣␣skip($if_MSWin,␣thing($foo),␣thing($bar)␣);

Or,␣going␣the␣other␣way:

␣␣my␣$unless_MSWin␣=
␣␣␣␣$^O␣=~␣m/MSWin/␣?␣''␣:␣'Skip␣unless␣under␣MSWin';

␣␣#␣A␣test␣to␣be␣skipped␣unless␣under␣MSWin␣(i.e.,␣run␣only␣under␣MSWin)
␣␣skip($unless_MSWin,␣thing($foo),␣thing($bar)␣);

The␣tricky␣thing␣to␣remember␣is␣that␣the␣first␣parameter␣is␣true␣if
you␣want␣to␣I<skip>␣the␣test,␣not␣I<run>␣it;␣and␣it␣also␣doubles␣as␣a
note␣about␣why␣it's␣being␣skipped.␣So␣in␣the␣first␣codeblock␣above,␣read
the␣code␣as␣"skip␣if␣MSWin␣--␣(otherwise)␣test␣whether␣C<thing($foo)>␣is
C<thing($bar)>"␣or␣for␣the␣second␣case,␣"skip␣unless␣MSWin...".

Also,␣when␣your␣I<skip_if_reason>␣string␣is␣true,␣it␣really␣should␣(for
backwards␣compatibility␣with␣older␣Test.pm␣versions)␣start␣with␣the
string␣"Skip",␣as␣shown␣in␣the␣above␣examples.

Note␣that␣in␣the␣above␣cases,␣C<thing($foo)>␣and␣C<thing($bar)>
I<are>␣evaluated␣--␣but␣as␣long␣as␣the␣C<skip_if_true>␣is␣true,
then␣we␣C<skip(...)>␣just␣tosses␣out␣their␣value␣(i.e.,␣not
bothering␣to␣treat␣them␣like␣values␣to␣C<ok(...)>.␣␣But␣if
you␣need␣to␣I<not>␣eval␣the␣arguments␣when␣skipping␣the
test,␣use
this␣format:

␣␣skip(␣$unless_MSWin,
␣␣␣␣sub␣{
␣␣␣␣␣␣#␣This␣code␣returns␣true␣if␣the␣test␣passes.
␣␣␣␣␣␣#␣(But␣it␣doesn't␣even␣get␣called␣if␣the␣test␣is␣skipped.)
␣␣␣␣␣␣thing($foo)␣eq␣thing($bar)
␣␣␣␣}
␣␣);

or␣even␣this,␣which␣is␣basically␣equivalent:

␣␣skip(␣$unless_MSWin,
␣␣␣␣sub␣{␣thing($foo)␣},␣sub␣{␣thing($bar)␣}
␣␣);

That␣is,␣both␣are␣like␣this:

␣␣if(␣$unless_MSWin␣)␣{
␣␣␣␣ok(1);␣␣#␣but␣it␣actually␣appends␣"#␣$unless_MSWin"
␣␣␣␣␣␣␣␣␣␣␣␣#␣␣so␣that␣Test::Harness␣can␣tell␣it's␣a␣skip
␣␣}␣else␣{
␣␣␣␣#␣Not␣skipping,␣so␣actually␣call␣and␣evaluate...
␣␣␣␣ok(␣sub␣{␣thing($foo)␣},␣sub␣{␣thing($bar)␣}␣);
␣␣}

=cut
----------
Range: (31056,43215) (12159)
=head1␣NAME

Benchmark␣-␣benchmark␣running␣times␣of␣Perl␣code

=head1␣SYNOPSIS

␣␣␣␣use␣Benchmark␣qw(:all)␣;

␣␣␣␣timethis␣($count,␣"code");

␣␣␣␣#␣Use␣Perl␣code␣in␣strings...
␣␣␣␣timethese($count,␣{
	'Name1'␣=>␣'...code1...',
	'Name2'␣=>␣'...code2...',
␣␣␣␣});

␣␣␣␣#␣...␣or␣use␣subroutine␣references.
␣␣␣␣timethese($count,␣{
	'Name1'␣=>␣sub␣{␣...code1...␣},
	'Name2'␣=>␣sub␣{␣...code2...␣},
␣␣␣␣});

␣␣␣␣#␣cmpthese␣can␣be␣used␣both␣ways␣as␣well
␣␣␣␣cmpthese($count,␣{
	'Name1'␣=>␣'...code1...',
	'Name2'␣=>␣'...code2...',
␣␣␣␣});

␣␣␣␣cmpthese($count,␣{
	'Name1'␣=>␣sub␣{␣...code1...␣},
	'Name2'␣=>␣sub␣{␣...code2...␣},
␣␣␣␣});

␣␣␣␣#␣...or␣in␣two␣stages
␣␣␣␣$results␣=␣timethese($count,␣
␣␣␣␣␣␣␣␣{
	␣␣␣␣'Name1'␣=>␣sub␣{␣...code1...␣},
	␣␣␣␣'Name2'␣=>␣sub␣{␣...code2...␣},
␣␣␣␣␣␣␣␣},
	'none'
␣␣␣␣);
␣␣␣␣cmpthese(␣$results␣)␣;

␣␣␣␣$t␣=␣timeit($count,␣'...other␣code...')
␣␣␣␣print␣"$count␣loops␣of␣other␣code␣took:",timestr($t),"\n";

␣␣␣␣$t␣=␣countit($time,␣'...other␣code...')
␣␣␣␣$count␣=␣$t->iters␣;
␣␣␣␣print␣"$count␣loops␣of␣other␣code␣took:",timestr($t),"\n";

␣␣␣␣#␣enable␣hires␣wallclock␣timing␣if␣possible
␣␣␣␣use␣Benchmark␣':hireswallclock';

=head1␣DESCRIPTION

The␣Benchmark␣module␣encapsulates␣a␣number␣of␣routines␣to␣help␣you
figure␣out␣how␣long␣it␣takes␣to␣execute␣some␣code.

timethis␣-␣run␣a␣chunk␣of␣code␣several␣times

timethese␣-␣run␣several␣chunks␣of␣code␣several␣times

cmpthese␣-␣print␣results␣of␣timethese␣as␣a␣comparison␣chart

timeit␣-␣run␣a␣chunk␣of␣code␣and␣see␣how␣long␣it␣goes

countit␣-␣see␣how␣many␣times␣a␣chunk␣of␣code␣runs␣in␣a␣given␣time


=head2␣Methods

=over␣10

=item␣new

Returns␣the␣current␣time.␣␣␣Example:

␣␣␣␣use␣Benchmark;
␣␣␣␣$t0␣=␣Benchmark->new;
␣␣␣␣#␣...␣your␣code␣here␣...
␣␣␣␣$t1␣=␣Benchmark->new;
␣␣␣␣$td␣=␣timediff($t1,␣$t0);
␣␣␣␣print␣"the␣code␣took:",timestr($td),"\n";

=item␣debug

Enables␣or␣disable␣debugging␣by␣setting␣the␣C<$Benchmark::Debug>␣flag:

␣␣␣␣Benchmark->debug(1);
␣␣␣␣$t␣=␣timeit(10,␣'␣5␣**␣$Global␣');
␣␣␣␣Benchmark->debug(0);

=item␣iters

Returns␣the␣number␣of␣iterations.

=back

=head2␣Standard␣Exports

The␣following␣routines␣will␣be␣exported␣into␣your␣namespace
if␣you␣use␣the␣Benchmark␣module:

=over␣10

=item␣timeit(COUNT,␣CODE)

Arguments:␣COUNT␣is␣the␣number␣of␣times␣to␣run␣the␣loop,␣and␣CODE␣is
the␣code␣to␣run.␣␣CODE␣may␣be␣either␣a␣code␣reference␣or␣a␣string␣to
be␣eval'd;␣either␣way␣it␣will␣be␣run␣in␣the␣caller's␣package.

Returns:␣a␣Benchmark␣object.

=item␣timethis␣(␣COUNT,␣CODE,␣[␣TITLE,␣[␣STYLE␣]]␣)

Time␣COUNT␣iterations␣of␣CODE.␣CODE␣may␣be␣a␣string␣to␣eval␣or␣a
code␣reference;␣either␣way␣the␣CODE␣will␣run␣in␣the␣caller's␣package.
Results␣will␣be␣printed␣to␣STDOUT␣as␣TITLE␣followed␣by␣the␣times.
TITLE␣defaults␣to␣"timethis␣COUNT"␣if␣none␣is␣provided.␣STYLE
determines␣the␣format␣of␣the␣output,␣as␣described␣for␣timestr()␣below.

The␣COUNT␣can␣be␣zero␣or␣negative:␣this␣means␣the␣I<minimum␣number␣of
CPU␣seconds>␣to␣run.␣␣A␣zero␣signifies␣the␣default␣of␣3␣seconds.␣␣For
example␣to␣run␣at␣least␣for␣10␣seconds:

	timethis(-10,␣$code)

or␣to␣run␣two␣pieces␣of␣code␣tests␣for␣at␣least␣3␣seconds:

	timethese(0,␣{␣test1␣=>␣'...',␣test2␣=>␣'...'})

CPU␣seconds␣is,␣in␣UNIX␣terms,␣the␣user␣time␣plus␣the␣system␣time␣of
the␣process␣itself,␣as␣opposed␣to␣the␣real␣(wallclock)␣time␣and␣the
time␣spent␣by␣the␣child␣processes.␣␣Less␣than␣0.1␣seconds␣is␣not
accepted␣(-0.01␣as␣the␣count,␣for␣example,␣will␣cause␣a␣fatal␣runtime
exception).

Note␣that␣the␣CPU␣seconds␣is␣the␣B<minimum>␣time:␣CPU␣scheduling␣and
other␣operating␣system␣factors␣may␣complicate␣the␣attempt␣so␣that␣a
little␣bit␣more␣time␣is␣spent.␣␣The␣benchmark␣output␣will,␣however,
also␣tell␣the␣number␣of␣C<$code>␣runs/second,␣which␣should␣be␣a␣more
interesting␣number␣than␣the␣actually␣spent␣seconds.

Returns␣a␣Benchmark␣object.

=item␣timethese␣(␣COUNT,␣CODEHASHREF,␣[␣STYLE␣]␣)

The␣CODEHASHREF␣is␣a␣reference␣to␣a␣hash␣containing␣names␣as␣keys
and␣either␣a␣string␣to␣eval␣or␣a␣code␣reference␣for␣each␣value.
For␣each␣(KEY,␣VALUE)␣pair␣in␣the␣CODEHASHREF,␣this␣routine␣will
call

	timethis(COUNT,␣VALUE,␣KEY,␣STYLE)

The␣routines␣are␣called␣in␣string␣comparison␣order␣of␣KEY.

The␣COUNT␣can␣be␣zero␣or␣negative,␣see␣timethis().

Returns␣a␣hash␣reference␣of␣Benchmark␣objects,␣keyed␣by␣name.

=item␣timediff␣(␣T1,␣T2␣)

Returns␣the␣difference␣between␣two␣Benchmark␣times␣as␣a␣Benchmark
object␣suitable␣for␣passing␣to␣timestr().

=item␣timestr␣(␣TIMEDIFF,␣[␣STYLE,␣[␣FORMAT␣]␣]␣)

Returns␣a␣string␣that␣formats␣the␣times␣in␣the␣TIMEDIFF␣object␣in
the␣requested␣STYLE.␣TIMEDIFF␣is␣expected␣to␣be␣a␣Benchmark␣object
similar␣to␣that␣returned␣by␣timediff().

STYLE␣can␣be␣any␣of␣'all',␣'none',␣'noc',␣'nop'␣or␣'auto'.␣'all'␣shows
each␣of␣the␣5␣times␣available␣('wallclock'␣time,␣user␣time,␣system␣time,
user␣time␣of␣children,␣and␣system␣time␣of␣children).␣'noc'␣shows␣all
except␣the␣two␣children␣times.␣'nop'␣shows␣only␣wallclock␣and␣the
two␣children␣times.␣'auto'␣(the␣default)␣will␣act␣as␣'all'␣unless
the␣children␣times␣are␣both␣zero,␣in␣which␣case␣it␣acts␣as␣'noc'.
'none'␣prevents␣output.

FORMAT␣is␣the␣L<printf(3)>-style␣format␣specifier␣(without␣the
leading␣'%')␣to␣use␣to␣print␣the␣times.␣It␣defaults␣to␣'5.2f'.

=back

=head2␣Optional␣Exports

The␣following␣routines␣will␣be␣exported␣into␣your␣namespace
if␣you␣specifically␣ask␣that␣they␣be␣imported:

=over␣10

=item␣clearcache␣(␣COUNT␣)

Clear␣the␣cached␣time␣for␣COUNT␣rounds␣of␣the␣null␣loop.

=item␣clearallcache␣(␣)

Clear␣all␣cached␣times.

=item␣cmpthese␣(␣COUNT,␣CODEHASHREF,␣[␣STYLE␣]␣)

=item␣cmpthese␣(␣RESULTSHASHREF,␣[␣STYLE␣]␣)

Optionally␣calls␣timethese(),␣then␣outputs␣comparison␣chart.␣␣This:

␣␣␣␣cmpthese(␣-1,␣{␣a␣=>␣"++\$i",␣b␣=>␣"\$i␣*=␣2"␣}␣)␣;

outputs␣a␣chart␣like:

␣␣␣␣␣␣␣␣␣␣␣Rate␣␣␣␣b␣␣␣␣a
␣␣␣␣b␣2831802/s␣␣␣--␣-61%
␣␣␣␣a␣7208959/s␣155%␣␣␣--

This␣chart␣is␣sorted␣from␣slowest␣to␣fastest,␣and␣shows␣the␣percent␣speed
difference␣between␣each␣pair␣of␣tests.

C<cmpthese>␣can␣also␣be␣passed␣the␣data␣structure␣that␣timethese()␣returns:

␣␣␣␣$results␣=␣timethese(␣-1,␣{␣a␣=>␣"++\$i",␣b␣=>␣"\$i␣*=␣2"␣}␣)␣;
␣␣␣␣cmpthese(␣$results␣);

in␣case␣you␣want␣to␣see␣both␣sets␣of␣results.
If␣the␣first␣argument␣is␣an␣unblessed␣hash␣reference,
that␣is␣RESULTSHASHREF;␣otherwise␣that␣is␣COUNT.

Returns␣a␣reference␣to␣an␣ARRAY␣of␣rows,␣each␣row␣is␣an␣ARRAY␣of␣cells␣from␣the
above␣chart,␣including␣labels.␣This:

␣␣␣␣my␣$rows␣=␣cmpthese(␣-1,␣{␣a␣=>␣'++$i',␣b␣=>␣'$i␣*=␣2'␣},␣"none"␣);

returns␣a␣data␣structure␣like:

␣␣␣␣[
␣␣␣␣␣␣␣␣[␣'',␣␣␣␣␣␣␣'Rate',␣␣␣'b',␣␣␣␣'a'␣],
␣␣␣␣␣␣␣␣[␣'b',␣'2885232/s',␣␣'--',␣'-59%'␣],
␣␣␣␣␣␣␣␣[␣'a',␣'7099126/s',␣'146%',␣␣'--'␣],
␣␣␣␣]

B<NOTE>:␣This␣result␣value␣differs␣from␣previous␣versions,␣which␣returned
the␣C<timethese()>␣result␣structure.␣␣If␣you␣want␣that,␣just␣use␣the␣two
statement␣C<timethese>...C<cmpthese>␣idiom␣shown␣above.

Incidently,␣note␣the␣variance␣in␣the␣result␣values␣between␣the␣two␣examples;
this␣is␣typical␣of␣benchmarking.␣␣If␣this␣were␣a␣real␣benchmark,␣you␣would
probably␣want␣to␣run␣a␣lot␣more␣iterations.

=item␣countit(TIME,␣CODE)

Arguments:␣TIME␣is␣the␣minimum␣length␣of␣time␣to␣run␣CODE␣for,␣and␣CODE␣is
the␣code␣to␣run.␣␣CODE␣may␣be␣either␣a␣code␣reference␣or␣a␣string␣to
be␣eval'd;␣either␣way␣it␣will␣be␣run␣in␣the␣caller's␣package.

TIME␣is␣I<not>␣negative.␣␣countit()␣will␣run␣the␣loop␣many␣times␣to
calculate␣the␣speed␣of␣CODE␣before␣running␣it␣for␣TIME.␣␣The␣actual
time␣run␣for␣will␣usually␣be␣greater␣than␣TIME␣due␣to␣system␣clock
resolution,␣so␣it's␣best␣to␣look␣at␣the␣number␣of␣iterations␣divided
by␣the␣times␣that␣you␣are␣concerned␣with,␣not␣just␣the␣iterations.

Returns:␣a␣Benchmark␣object.

=item␣disablecache␣(␣)

Disable␣caching␣of␣timings␣for␣the␣null␣loop.␣This␣will␣force␣Benchmark
to␣recalculate␣these␣timings␣for␣each␣new␣piece␣of␣code␣timed.

=item␣enablecache␣(␣)

Enable␣caching␣of␣timings␣for␣the␣null␣loop.␣The␣time␣taken␣for␣COUNT
rounds␣of␣the␣null␣loop␣will␣be␣calculated␣only␣once␣for␣each
different␣COUNT␣used.

=item␣timesum␣(␣T1,␣T2␣)

Returns␣the␣sum␣of␣two␣Benchmark␣times␣as␣a␣Benchmark␣object␣suitable
for␣passing␣to␣timestr().

=back

=head2␣:hireswallclock

If␣the␣Time::HiRes␣module␣has␣been␣installed,␣you␣can␣specify␣the
special␣tag␣C<:hireswallclock>␣for␣Benchmark␣(if␣Time::HiRes␣is␣not
available,␣the␣tag␣will␣be␣silently␣ignored).␣␣This␣tag␣will␣cause␣the
wallclock␣time␣to␣be␣measured␣in␣microseconds,␣instead␣of␣integer
seconds.␣␣Note␣though␣that␣the␣speed␣computations␣are␣still␣conducted
in␣CPU␣time,␣not␣wallclock␣time.

=head1␣NOTES

The␣data␣is␣stored␣as␣a␣list␣of␣values␣from␣the␣time␣and␣times
functions:

␣␣␣␣␣␣($real,␣$user,␣$system,␣$children_user,␣$children_system,␣$iters)

in␣seconds␣for␣the␣whole␣loop␣(not␣divided␣by␣the␣number␣of␣rounds).

The␣timing␣is␣done␣using␣time(3)␣and␣times(3).

Code␣is␣executed␣in␣the␣caller's␣package.

The␣time␣of␣the␣null␣loop␣(a␣loop␣with␣the␣same
number␣of␣rounds␣but␣empty␣loop␣body)␣is␣subtracted
from␣the␣time␣of␣the␣real␣loop.

The␣null␣loop␣times␣can␣be␣cached,␣the␣key␣being␣the
number␣of␣rounds.␣The␣caching␣can␣be␣controlled␣using
calls␣like␣these:

␣␣␣␣clearcache($key);
␣␣␣␣clearallcache();

␣␣␣␣disablecache();
␣␣␣␣enablecache();

Caching␣is␣off␣by␣default,␣as␣it␣can␣(usually␣slightly)␣decrease
accuracy␣and␣does␣not␣usually␣noticably␣affect␣runtimes.

=head1␣EXAMPLES

For␣example,

␣␣␣␣use␣Benchmark␣qw(␣cmpthese␣)␣;
␣␣␣␣$x␣=␣3;
␣␣␣␣cmpthese(␣-5,␣{
␣␣␣␣␣␣␣␣a␣=>␣sub{$x*$x},
␣␣␣␣␣␣␣␣b␣=>␣sub{$x**2},
␣␣␣␣}␣);

outputs␣something␣like␣this:

␣␣␣Benchmark:␣running␣a,␣b,␣each␣for␣at␣least␣5␣CPU␣seconds...
␣␣␣␣␣␣␣␣␣␣Rate␣␣␣␣b␣␣␣␣a
␣␣␣b␣1559428/s␣␣␣--␣-62%
␣␣␣a␣4152037/s␣166%␣␣␣--


while␣

␣␣␣␣use␣Benchmark␣qw(␣timethese␣cmpthese␣)␣;
␣␣␣␣$x␣=␣3;
␣␣␣␣$r␣=␣timethese(␣-5,␣{
␣␣␣␣␣␣␣␣a␣=>␣sub{$x*$x},
␣␣␣␣␣␣␣␣b␣=>␣sub{$x**2},
␣␣␣␣}␣);
␣␣␣␣cmpthese␣$r;

outputs␣something␣like␣this:

␣␣␣␣Benchmark:␣running␣a,␣b,␣each␣for␣at␣least␣5␣CPU␣seconds...
␣␣␣␣␣␣␣␣␣␣␣␣␣a:␣10␣wallclock␣secs␣(␣5.14␣usr␣+␣␣0.13␣sys␣=␣␣5.27␣CPU)␣@␣3835055.60/s␣(n=20210743)
␣␣␣␣␣␣␣␣␣␣␣␣␣b:␣␣5␣wallclock␣secs␣(␣5.41␣usr␣+␣␣0.00␣sys␣=␣␣5.41␣CPU)␣@␣1574944.92/s␣(n=8520452)
␣␣␣␣␣␣␣␣␣␣␣Rate␣␣␣␣b␣␣␣␣a
␣␣␣␣b␣1574945/s␣␣␣--␣-59%
␣␣␣␣a␣3835056/s␣144%␣␣␣--


=head1␣INHERITANCE

Benchmark␣inherits␣from␣no␣other␣class,␣except␣of␣course
for␣Exporter.

=head1␣CAVEATS

Comparing␣eval'd␣strings␣with␣code␣references␣will␣give␣you
inaccurate␣results:␣a␣code␣reference␣will␣show␣a␣slightly␣slower
execution␣time␣than␣the␣equivalent␣eval'd␣string.

The␣real␣time␣timing␣is␣done␣using␣time(2)␣and
the␣granularity␣is␣therefore␣only␣one␣second.

Short␣tests␣may␣produce␣negative␣figures␣because␣perl
can␣appear␣to␣take␣longer␣to␣execute␣the␣empty␣loop
than␣a␣short␣test;␣try:

␣␣␣␣timethis(100,'1');

The␣system␣time␣of␣the␣null␣loop␣might␣be␣slightly
more␣than␣the␣system␣time␣of␣the␣loop␣with␣the␣actual
code␣and␣therefore␣the␣difference␣might␣end␣up␣being␣E<lt>␣0.

=head1␣SEE␣ALSO

L<Devel::DProf>␣-␣a␣Perl␣code␣profiler

=head1␣AUTHORS

Jarkko␣Hietaniemi␣<F<jhi@iki.fi>>,␣Tim␣Bunce␣<F<Tim.Bunce@ig.co.uk>>

=head1␣MODIFICATION␣HISTORY

September␣8th,␣1994;␣by␣Tim␣Bunce.

March␣28th,␣1997;␣by␣Hugo␣van␣der␣Sanden:␣added␣support␣for␣code
references␣and␣the␣already␣documented␣'debug'␣method;␣revamped
documentation.

April␣04-07th,␣1997:␣by␣Jarkko␣Hietaniemi,␣added␣the␣run-for-some-time
functionality.

September,␣1999;␣by␣Barrie␣Slaymaker:␣math␣fixes␣and␣accuracy␣and␣
efficiency␣tweaks.␣␣Added␣cmpthese().␣␣A␣result␣is␣now␣returned␣from␣
timethese().␣␣Exposed␣countit()␣(was␣runfor()).

December,␣2001;␣by␣Nicholas␣Clark:␣make␣timestr()␣recognise␣the␣style␣'none'
and␣return␣an␣empty␣string.␣If␣cmpthese␣is␣calling␣timethese,␣make␣it␣pass␣the
style␣in.␣(so␣that␣'none'␣will␣suppress␣output).␣Make␣sub␣new␣dump␣its
debugging␣output␣to␣STDERR,␣to␣be␣consistent␣with␣everything␣else.
All␣bugs␣found␣while␣writing␣a␣regression␣test.

September,␣2002;␣by␣Jarkko␣Hietaniemi:␣add␣':hireswallclock'␣special␣tag.

February,␣2004;␣by␣Chia-liang␣Kao:␣make␣cmpthese␣and␣timestr␣use␣time
statistics␣for␣children␣instead␣of␣parent␣when␣the␣style␣is␣'nop'.

November,␣2007;␣by␣Christophe␣Grosjean:␣make␣cmpthese␣and␣timestr␣compute
time␣consistently␣with␣style␣argument,␣default␣is␣'all'␣not␣'noc'␣any␣more.

=cut
----------
Range: (61369,64942) (3573)
=head1␣NAME

filetest␣-␣Perl␣pragma␣to␣control␣the␣filetest␣permission␣operators

=head1␣SYNOPSIS

␣␣␣␣$can_perhaps_read␣=␣-r␣"file";	#␣use␣the␣mode␣bits
␣␣␣␣{
␣␣␣␣␣␣␣␣use␣filetest␣'access';		#␣intuit␣harder
␣␣␣␣␣␣␣␣$can_really_read␣=␣-r␣"file";
␣␣␣␣}
␣␣␣␣$can_perhaps_read␣=␣-r␣"file";	#␣use␣the␣mode␣bits␣again

=head1␣DESCRIPTION

This␣pragma␣tells␣the␣compiler␣to␣change␣the␣behaviour␣of␣the␣filetest
permission␣operators,␣C<-r>␣C<-w>␣C<-x>␣C<-R>␣C<-W>␣C<-X>
(see␣L<perlfunc>).

The␣default␣behaviour␣of␣file␣test␣operators␣is␣to␣use␣the␣simple
mode␣bits␣as␣returned␣by␣the␣stat()␣family␣of␣system␣calls.␣␣However,
many␣operating␣systems␣have␣additional␣features␣to␣define␣more␣complex
access␣rights,␣for␣example␣ACLs␣(Access␣Control␣Lists).
For␣such␣environments,␣C<use␣filetest>␣may␣help␣the␣permission
operators␣to␣return␣results␣more␣consistent␣with␣other␣tools.

The␣C<use␣filetest>␣or␣C<no␣filetest>␣statements␣affect␣file␣tests␣defined␣in
their␣block,␣up␣to␣the␣end␣of␣the␣closest␣enclosing␣block␣(they␣are␣lexically
block-scoped).

Currently,␣only␣the␣C<access>␣sub-pragma␣is␣implemented.␣␣It␣enables␣(or
disables)␣the␣use␣of␣access()␣when␣available,␣that␣is,␣on␣most␣UNIX␣systems␣and
other␣POSIX␣environments.␣␣See␣details␣below.

=head2␣Consider␣this␣carefully

The␣stat()␣mode␣bits␣are␣probably␣right␣for␣most␣of␣the␣files␣and
directories␣found␣on␣your␣system,␣because␣few␣people␣want␣to␣use␣the
additional␣features␣offered␣by␣access().␣But␣you␣may␣encounter␣surprises
if␣your␣program␣runs␣on␣a␣system␣that␣uses␣ACLs,␣since␣the␣stat()
information␣won't␣reflect␣the␣actual␣permissions.

There␣may␣be␣a␣slight␣performance␣decrease␣in␣the␣filetest␣operations
when␣the␣filetest␣pragma␣is␣in␣effect,␣because␣checking␣bits␣is␣very
cheap.

Also,␣note␣that␣using␣the␣file␣tests␣for␣security␣purposes␣is␣a␣lost␣cause
from␣the␣start:␣there␣is␣a␣window␣open␣for␣race␣conditions␣(who␣is␣to
say␣that␣the␣permissions␣will␣not␣change␣between␣the␣test␣and␣the␣real
operation?).␣␣Therefore␣if␣you␣are␣serious␣about␣security,␣just␣try
the␣real␣operation␣and␣test␣for␣its␣success␣-␣think␣in␣terms␣of␣atomic
operations.␣␣Filetests␣are␣more␣useful␣for␣filesystem␣administrative
tasks,␣when␣you␣have␣no␣need␣for␣the␣content␣of␣the␣elements␣on␣disk.

=head2␣The␣"access"␣sub-pragma

UNIX␣and␣POSIX␣systems␣provide␣an␣abstract␣access()␣operating␣system␣call,
which␣should␣be␣used␣to␣query␣the␣read,␣write,␣and␣execute␣rights.␣This
function␣hides␣various␣distinct␣approaches␣in␣additional␣operating␣system
specific␣security␣features,␣like␣Access␣Control␣Lists␣(ACLs)

The␣extended␣filetest␣functionality␣is␣used␣by␣Perl␣only␣when␣the␣argument
of␣the␣operators␣is␣a␣filename,␣not␣when␣it␣is␣a␣filehandle.

=head2␣Limitation␣with␣regard␣to␣C<_>

Because␣access()␣does␣not␣invoke␣stat()␣(at␣least␣not␣in␣a␣way␣visible
to␣Perl),␣B<the␣stat␣result␣cache␣"_"␣is␣not␣set>.␣␣This␣means␣that␣the
outcome␣of␣the␣following␣two␣tests␣is␣different.␣␣The␣first␣has␣the␣stat
bits␣of␣C</etc/passwd>␣in␣C<_>,␣and␣in␣the␣second␣case␣this␣still
contains␣the␣bits␣of␣C</etc>.

␣{␣-d␣'/etc';
␣␣␣-w␣'/etc/passwd';
␣␣␣print␣-f␣_␣?␣'Yes'␣:␣'No';␣␣␣#␣Yes
␣}

␣{␣use␣filetest␣'access';
␣␣␣-d␣'/etc';
␣␣␣-w␣'/etc/passwd';
␣␣␣print␣-f␣_␣?␣'Yes'␣:␣'No';␣␣␣#␣No
␣}

Of␣course,␣unless␣your␣OS␣does␣not␣implement␣access(),␣in␣which␣case␣the
pragma␣is␣simply␣ignored.␣␣Best␣not␣to␣use␣C<_>␣at␣all␣in␣a␣file␣where
the␣filetest␣pragma␣is␣active!

As␣a␣side␣effect,␣as␣C<_>␣doesn't␣work,␣stacked␣filetest␣operators
(C<-f␣-w␣$file>)␣won't␣work␣either.

This␣limitation␣might␣be␣removed␣in␣a␣future␣version␣of␣perl.

=cut
----------
Range: (231770,237226) (5456)
}

=item␣catdir()

Concatenate␣two␣or␣more␣directory␣names␣to␣form␣a␣path␣separated␣by␣colons
(":")␣ending␣with␣a␣directory.␣Resulting␣paths␣are␣B<relative>␣by␣default,
but␣can␣be␣forced␣to␣be␣absolute␣(but␣avoid␣this,␣see␣below).␣Automatically
puts␣a␣trailing␣":"␣on␣the␣end␣of␣the␣complete␣path,␣because␣that's␣what's
done␣in␣MacPerl's␣environment␣and␣helps␣to␣distinguish␣a␣file␣path␣from␣a
directory␣path.

B<IMPORTANT␣NOTE:>␣Beginning␣with␣version␣1.3␣of␣this␣module,␣the␣resulting
path␣is␣relative␣by␣default␣and␣I<not>␣absolute.␣This␣decision␣was␣made␣due
to␣portability␣reasons.␣Since␣C<File::Spec-E<gt>catdir()>␣returns␣relative␣paths
on␣all␣other␣operating␣systems,␣it␣will␣now␣also␣follow␣this␣convention␣on␣Mac
OS.␣Note␣that␣this␣may␣break␣some␣existing␣scripts.

The␣intended␣purpose␣of␣this␣routine␣is␣to␣concatenate␣I<directory␣names>.
But␣because␣of␣the␣nature␣of␣Macintosh␣paths,␣some␣additional␣possibilities
are␣allowed␣to␣make␣using␣this␣routine␣give␣reasonable␣results␣for␣some
common␣situations.␣In␣other␣words,␣you␣are␣also␣allowed␣to␣concatenate
I<paths>␣instead␣of␣directory␣names␣(strictly␣speaking,␣a␣string␣like␣":a"
is␣a␣path,␣but␣not␣a␣name,␣since␣it␣contains␣a␣punctuation␣character␣":").

So,␣beside␣calls␣like

␣␣␣␣catdir("a")␣=␣":a:"
␣␣␣␣catdir("a","b")␣=␣":a:b:"
␣␣␣␣catdir()␣=␣""␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣(special␣case)

calls␣like␣the␣following

␣␣␣␣catdir(":a:")␣=␣":a:"
␣␣␣␣catdir(":a","b")␣=␣":a:b:"
␣␣␣␣catdir(":a:","b")␣=␣":a:b:"
␣␣␣␣catdir(":a:",":b:")␣=␣":a:b:"
␣␣␣␣catdir(":")␣=␣":"

are␣allowed.

Here␣are␣the␣rules␣that␣are␣used␣in␣C<catdir()>;␣note␣that␣we␣try␣to␣be␣as
compatible␣as␣possible␣to␣Unix:

=over␣2

=item␣1.

The␣resulting␣path␣is␣relative␣by␣default,␣i.e.␣the␣resulting␣path␣will␣have␣a
leading␣colon.

=item␣2.

A␣trailing␣colon␣is␣added␣automatically␣to␣the␣resulting␣path,␣to␣denote␣a
directory.

=item␣3.

Generally,␣each␣argument␣has␣one␣leading␣":"␣and␣one␣trailing␣":"
removed␣(if␣any).␣They␣are␣then␣joined␣together␣by␣a␣":".␣Special
treatment␣applies␣for␣arguments␣denoting␣updir␣paths␣like␣"::lib:",
see␣(4),␣or␣arguments␣consisting␣solely␣of␣colons␣("colon␣paths"),
see␣(5).

=item␣4.

When␣an␣updir␣path␣like␣":::lib::"␣is␣passed␣as␣argument,␣the␣number
of␣directories␣to␣climb␣up␣is␣handled␣correctly,␣not␣removing␣leading
or␣trailing␣colons␣when␣necessary.␣E.g.

␣␣␣␣catdir(":::a","::b","c")␣␣␣␣=␣":::a::b:c:"
␣␣␣␣catdir(":::a::","::b","c")␣␣=␣":::a:::b:c:"

=item␣5.

Adding␣a␣colon␣":"␣or␣empty␣string␣""␣to␣a␣path␣at␣I<any>␣position
doesn't␣alter␣the␣path,␣i.e.␣these␣arguments␣are␣ignored.␣(When␣a␣""
is␣passed␣as␣the␣first␣argument,␣it␣has␣a␣special␣meaning,␣see
(6)).␣This␣way,␣a␣colon␣":"␣is␣handled␣like␣a␣"."␣(curdir)␣on␣Unix,
while␣an␣empty␣string␣""␣is␣generally␣ignored␣(see
C<Unix-E<gt>canonpath()>␣).␣Likewise,␣a␣"::"␣is␣handled␣like␣a␣".."
(updir),␣and␣a␣":::"␣is␣handled␣like␣a␣"../.."␣etc.␣␣E.g.

␣␣␣␣catdir("a",":",":","b")␣␣␣=␣":a:b:"
␣␣␣␣catdir("a",":","::",":b")␣=␣":a::b:"

=item␣6.

If␣the␣first␣argument␣is␣an␣empty␣string␣""␣or␣is␣a␣volume␣name,␣i.e.␣matches
the␣pattern␣/^[^:]+:/,␣the␣resulting␣path␣is␣B<absolute>.

=item␣7.

Passing␣an␣empty␣string␣""␣as␣the␣first␣argument␣to␣C<catdir()>␣is
like␣passingC<File::Spec-E<gt>rootdir()>␣as␣the␣first␣argument,␣i.e.

␣␣␣␣catdir("","a","b")␣␣␣␣␣␣␣␣␣␣is␣the␣same␣as

␣␣␣␣catdir(rootdir(),"a","b").

This␣is␣true␣on␣Unix,␣where␣C<catdir("","a","b")>␣yields␣"/a/b"␣and
C<rootdir()>␣is␣"/".␣Note␣that␣C<rootdir()>␣on␣Mac␣OS␣is␣the␣startup
volume,␣which␣is␣the␣closest␣in␣concept␣to␣Unix'␣"/".␣This␣should␣help
to␣run␣existing␣scripts␣originally␣written␣for␣Unix.

=item␣8.

For␣absolute␣paths,␣some␣cleanup␣is␣done,␣to␣ensure␣that␣the␣volume
name␣isn't␣immediately␣followed␣by␣updirs.␣This␣is␣invalid,␣because
this␣would␣go␣beyond␣"root".␣Generally,␣these␣cases␣are␣handled␣like
their␣Unix␣counterparts:

␣Unix:
␣␣␣␣Unix->catdir("","")␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣=␣␣"/"
␣␣␣␣Unix->catdir("",".")␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣=␣␣"/"
␣␣␣␣Unix->catdir("","..")␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣=␣␣"/"␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣can't␣go␣beyond␣root
␣␣␣␣Unix->catdir("",".","..","..","a")␣␣=␣␣"/a"
␣Mac:
␣␣␣␣Mac->catdir("","")␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣=␣␣rootdir()␣␣␣␣␣␣␣␣␣#␣(e.g.␣"HD:")
␣␣␣␣Mac->catdir("",":")␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣=␣␣rootdir()
␣␣␣␣Mac->catdir("","::")␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣=␣␣rootdir()␣␣␣␣␣␣␣␣␣#␣can't␣go␣beyond␣root
␣␣␣␣Mac->catdir("",":","::","::","a")␣␣␣=␣␣rootdir()␣.␣"a:"␣␣#␣(e.g.␣"HD:a:")

However,␣this␣approach␣is␣limited␣to␣the␣first␣arguments␣following
"root"␣(again,␣see␣C<Unix-E<gt>canonpath()>␣).␣If␣there␣are␣more
arguments␣that␣move␣up␣the␣directory␣tree,␣an␣invalid␣path␣going
beyond␣root␣can␣be␣created.

=back

As␣you've␣seen,␣you␣can␣force␣C<catdir()>␣to␣create␣an␣absolute␣path
by␣passing␣either␣an␣empty␣string␣or␣a␣path␣that␣begins␣with␣a␣volume
name␣as␣the␣first␣argument.␣However,␣you␣are␣strongly␣encouraged␣not
to␣do␣so,␣since␣this␣is␣done␣only␣for␣backward␣compatibility.␣Newer
versions␣of␣File::Spec␣come␣with␣a␣method␣called␣C<catpath()>␣(see
below),␣that␣is␣designed␣to␣offer␣a␣portable␣solution␣for␣the␣creation
of␣absolute␣paths.␣␣It␣takes␣volume,␣directory␣and␣file␣portions␣and
returns␣an␣entire␣path.␣While␣C<catdir()>␣is␣still␣suitable␣for␣the
concatenation␣of␣I<directory␣names>,␣you␣are␣encouraged␣to␣use
C<catpath()>␣to␣concatenate␣I<volume␣names>␣and␣I<directory
paths>.␣E.g.

␣␣␣␣$dir␣␣␣␣␣␣=␣File::Spec->catdir("tmp","sources");
␣␣␣␣$abs_path␣=␣File::Spec->catpath("MacintoshHD:",␣$dir,"");

yields

␣␣␣␣"MacintoshHD:tmp:sources:"␣.

=cut
----------
Range: (260541,263250) (2709)
=head1␣NAME

B::Xref␣-␣Generates␣cross␣reference␣reports␣for␣Perl␣programs

=head1␣SYNOPSIS

perl␣-MO=Xref[,OPTIONS]␣foo.pl

=head1␣DESCRIPTION

The␣B::Xref␣module␣is␣used␣to␣generate␣a␣cross␣reference␣listing␣of␣all
definitions␣and␣uses␣of␣variables,␣subroutines␣and␣formats␣in␣a␣Perl␣program.
It␣is␣implemented␣as␣a␣backend␣for␣the␣Perl␣compiler.

The␣report␣generated␣is␣in␣the␣following␣format:

␣␣␣␣File␣filename1
␣␣␣␣␣␣Subroutine␣subname1
	Package␣package1
	␣␣object1␣␣␣␣␣␣␣␣line␣numbers
	␣␣object2␣␣␣␣␣␣␣␣line␣numbers
	␣␣...
	Package␣package2
	...

Each␣B<File>␣section␣reports␣on␣a␣single␣file.␣Each␣B<Subroutine>␣section
reports␣on␣a␣single␣subroutine␣apart␣from␣the␣special␣cases
"(definitions)"␣and␣"(main)".␣These␣report,␣respectively,␣on␣subroutine
definitions␣found␣by␣the␣initial␣symbol␣table␣walk␣and␣on␣the␣main␣part␣of
the␣program␣or␣module␣external␣to␣all␣subroutines.

The␣report␣is␣then␣grouped␣by␣the␣B<Package>␣of␣each␣variable,
subroutine␣or␣format␣with␣the␣special␣case␣"(lexicals)"␣meaning
lexical␣variables.␣Each␣B<object>␣name␣(implicitly␣qualified␣by␣its
containing␣B<Package>)␣includes␣its␣type␣character(s)␣at␣the␣beginning
where␣possible.␣Lexical␣variables␣are␣easier␣to␣track␣and␣even
included␣dereferencing␣information␣where␣possible.

The␣C<line␣numbers>␣are␣a␣comma␣separated␣list␣of␣line␣numbers␣(some
preceded␣by␣code␣letters)␣where␣that␣object␣is␣used␣in␣some␣way.
Simple␣uses␣aren't␣preceded␣by␣a␣code␣letter.␣Introductions␣(such␣as
where␣a␣lexical␣is␣first␣defined␣with␣C<my>)␣are␣indicated␣with␣the
letter␣"i".␣Subroutine␣and␣method␣calls␣are␣indicated␣by␣the␣character
"&".␣␣Subroutine␣definitions␣are␣indicated␣by␣"s"␣and␣format
definitions␣by␣"f".

=head1␣OPTIONS

Option␣words␣are␣separated␣by␣commas␣(not␣whitespace)␣and␣follow␣the
usual␣conventions␣of␣compiler␣backend␣options.

=over␣8

=item␣C<-oFILENAME>

Directs␣output␣to␣C<FILENAME>␣instead␣of␣standard␣output.

=item␣C<-r>

Raw␣output.␣Instead␣of␣producing␣a␣human-readable␣report,␣outputs␣a␣line
in␣machine-readable␣form␣for␣each␣definition/use␣of␣a␣variable/sub/format.

=item␣C<-d>

Don't␣output␣the␣"(definitions)"␣sections.

=item␣C<-D[tO]>

(Internal)␣debug␣options,␣probably␣only␣useful␣if␣C<-r>␣included.
The␣C<t>␣option␣prints␣the␣object␣on␣the␣top␣of␣the␣stack␣as␣it's
being␣tracked.␣The␣C<O>␣option␣prints␣each␣operator␣as␣it's␣being
processed␣in␣the␣execution␣order␣of␣the␣program.

=back

=head1␣BUGS

Non-lexical␣variables␣are␣quite␣difficult␣to␣track␣through␣a␣program.
Sometimes␣the␣type␣of␣a␣non-lexical␣variable's␣use␣is␣impossible␣to
determine.␣Introductions␣of␣non-lexical␣non-scalars␣don't␣seem␣to␣be
reported␣properly.

=head1␣AUTHOR

Malcolm␣Beattie,␣mbeattie@sable.ox.ac.uk.

=cut
----------
Range: (381837,385977) (4140)
=head1␣NAME

Cwd␣-␣get␣pathname␣of␣current␣working␣directory

=head1␣SYNOPSIS

␣␣␣␣use␣Cwd;
␣␣␣␣my␣$dir␣=␣getcwd;

␣␣␣␣use␣Cwd␣'abs_path';
␣␣␣␣my␣$abs_path␣=␣abs_path($file);

=head1␣DESCRIPTION

This␣module␣provides␣functions␣for␣determining␣the␣pathname␣of␣the
current␣working␣directory.␣␣It␣is␣recommended␣that␣getcwd␣(or␣another
*cwd()␣function)␣be␣used␣in␣I<all>␣code␣to␣ensure␣portability.

By␣default,␣it␣exports␣the␣functions␣cwd(),␣getcwd(),␣fastcwd(),␣and
fastgetcwd()␣(and,␣on␣Win32,␣getdcwd())␣into␣the␣caller's␣namespace.␣␣


=head2␣getcwd␣and␣friends

Each␣of␣these␣functions␣are␣called␣without␣arguments␣and␣return␣the
absolute␣path␣of␣the␣current␣working␣directory.

=over␣4

=item␣getcwd

␣␣␣␣my␣$cwd␣=␣getcwd();

Returns␣the␣current␣working␣directory.

Exposes␣the␣POSIX␣function␣getcwd(3)␣or␣re-implements␣it␣if␣it's␣not
available.

=item␣cwd

␣␣␣␣my␣$cwd␣=␣cwd();

The␣cwd()␣is␣the␣most␣natural␣form␣for␣the␣current␣architecture.␣For
most␣systems␣it␣is␣identical␣to␣`pwd`␣(but␣without␣the␣trailing␣line
terminator).

=item␣fastcwd

␣␣␣␣my␣$cwd␣=␣fastcwd();

A␣more␣dangerous␣version␣of␣getcwd(),␣but␣potentially␣faster.

It␣might␣conceivably␣chdir()␣you␣out␣of␣a␣directory␣that␣it␣can't
chdir()␣you␣back␣into.␣␣If␣fastcwd␣encounters␣a␣problem␣it␣will␣return
undef␣but␣will␣probably␣leave␣you␣in␣a␣different␣directory.␣␣For␣a
measure␣of␣extra␣security,␣if␣everything␣appears␣to␣have␣worked,␣the
fastcwd()␣function␣will␣check␣that␣it␣leaves␣you␣in␣the␣same␣directory
that␣it␣started␣in.␣If␣it␣has␣changed␣it␣will␣C<die>␣with␣the␣message
"Unstable␣directory␣path,␣current␣directory␣changed
unexpectedly".␣That␣should␣never␣happen.

=item␣fastgetcwd

␣␣my␣$cwd␣=␣fastgetcwd();

The␣fastgetcwd()␣function␣is␣provided␣as␣a␣synonym␣for␣cwd().

=item␣getdcwd

␣␣␣␣my␣$cwd␣=␣getdcwd();
␣␣␣␣my␣$cwd␣=␣getdcwd('C:');

The␣getdcwd()␣function␣is␣also␣provided␣on␣Win32␣to␣get␣the␣current␣working
directory␣on␣the␣specified␣drive,␣since␣Windows␣maintains␣a␣separate␣current
working␣directory␣for␣each␣drive.␣␣If␣no␣drive␣is␣specified␣then␣the␣current
drive␣is␣assumed.

This␣function␣simply␣calls␣the␣Microsoft␣C␣library␣_getdcwd()␣function.

=back


=head2␣abs_path␣and␣friends

These␣functions␣are␣exported␣only␣on␣request.␣␣They␣each␣take␣a␣single
argument␣and␣return␣the␣absolute␣pathname␣for␣it.␣␣If␣no␣argument␣is
given␣they'll␣use␣the␣current␣working␣directory.

=over␣4

=item␣abs_path

␣␣my␣$abs_path␣=␣abs_path($file);

Uses␣the␣same␣algorithm␣as␣getcwd().␣␣Symbolic␣links␣and␣relative-path
components␣("."␣and␣"..")␣are␣resolved␣to␣return␣the␣canonical
pathname,␣just␣like␣realpath(3).

=item␣realpath

␣␣my␣$abs_path␣=␣realpath($file);

A␣synonym␣for␣abs_path().

=item␣fast_abs_path

␣␣my␣$abs_path␣=␣fast_abs_path($file);

A␣more␣dangerous,␣but␣potentially␣faster␣version␣of␣abs_path.

=back

=head2␣$ENV{PWD}

If␣you␣ask␣to␣override␣your␣chdir()␣built-in␣function,␣

␣␣use␣Cwd␣qw(chdir);

then␣your␣PWD␣environment␣variable␣will␣be␣kept␣up␣to␣date.␣␣Note␣that
it␣will␣only␣be␣kept␣up␣to␣date␣if␣all␣packages␣which␣use␣chdir␣import
it␣from␣Cwd.


=head1␣NOTES

=over␣4

=item␣*

Since␣the␣path␣seperators␣are␣different␣on␣some␣operating␣systems␣('/'
on␣Unix,␣':'␣on␣MacPerl,␣etc...)␣we␣recommend␣you␣use␣the␣File::Spec
modules␣wherever␣portability␣is␣a␣concern.

=item␣*

Actually,␣on␣Mac␣OS,␣the␣C<getcwd()>,␣C<fastgetcwd()>␣and␣C<fastcwd()>
functions␣␣are␣all␣aliases␣for␣the␣C<cwd()>␣function,␣which,␣on␣Mac␣OS,
calls␣`pwd`.␣Likewise,␣the␣C<abs_path()>␣function␣is␣an␣alias␣for
C<fast_abs_path()>.

=back

=head1␣AUTHOR

Originally␣by␣the␣perl5-porters.

Maintained␣by␣Ken␣Williams␣<KWILLIAMS@cpan.org>

=head1␣COPYRIGHT

Copyright␣(c)␣2004␣by␣the␣Perl␣5␣Porters.␣␣All␣rights␣reserved.

This␣program␣is␣free␣software;␣you␣can␣redistribute␣it␣and/or␣modify
it␣under␣the␣same␣terms␣as␣Perl␣itself.

Portions␣of␣the␣C␣code␣in␣this␣library␣are␣copyright␣(c)␣1994␣by␣the
Regents␣of␣the␣University␣of␣California.␣␣All␣rights␣reserved.␣␣The
license␣on␣this␣code␣is␣compatible␣with␣the␣licensing␣of␣the␣rest␣of
the␣distribution␣-␣please␣see␣the␣source␣code␣in␣F<Cwd.xs>␣for␣the
details.

=head1␣SEE␣ALSO

L<File::chdir>

=cut
----------
Range: (440160,443385) (3225)
=head1␣NAME

IO::File␣-␣supply␣object␣methods␣for␣filehandles

=head1␣SYNOPSIS

␣␣␣␣use␣IO::File;

␣␣␣␣$fh␣=␣new␣IO::File;
␣␣␣␣if␣($fh->open("<␣file"))␣{
␣␣␣␣␣␣␣␣print␣<$fh>;
␣␣␣␣␣␣␣␣$fh->close;
␣␣␣␣}

␣␣␣␣$fh␣=␣new␣IO::File␣">␣file";
␣␣␣␣if␣(defined␣$fh)␣{
␣␣␣␣␣␣␣␣print␣$fh␣"bar\n";
␣␣␣␣␣␣␣␣$fh->close;
␣␣␣␣}

␣␣␣␣$fh␣=␣new␣IO::File␣"file",␣"r";
␣␣␣␣if␣(defined␣$fh)␣{
␣␣␣␣␣␣␣␣print␣<$fh>;
␣␣␣␣␣␣␣␣undef␣$fh;␣␣␣␣␣␣␣#␣automatically␣closes␣the␣file
␣␣␣␣}

␣␣␣␣$fh␣=␣new␣IO::File␣"file",␣O_WRONLY|O_APPEND;
␣␣␣␣if␣(defined␣$fh)␣{
␣␣␣␣␣␣␣␣print␣$fh␣"corge\n";

␣␣␣␣␣␣␣␣$pos␣=␣$fh->getpos;
␣␣␣␣␣␣␣␣$fh->setpos($pos);

␣␣␣␣␣␣␣␣undef␣$fh;␣␣␣␣␣␣␣#␣automatically␣closes␣the␣file
␣␣␣␣}

␣␣␣␣autoflush␣STDOUT␣1;

=head1␣DESCRIPTION

C<IO::File>␣inherits␣from␣C<IO::Handle>␣and␣C<IO::Seekable>.␣It␣extends
these␣classes␣with␣methods␣that␣are␣specific␣to␣file␣handles.

=head1␣CONSTRUCTOR

=over␣4

=item␣new␣(␣FILENAME␣[,MODE␣[,PERMS]]␣)

Creates␣an␣C<IO::File>.␣␣If␣it␣receives␣any␣parameters,␣they␣are␣passed␣to
the␣method␣C<open>;␣if␣the␣open␣fails,␣the␣object␣is␣destroyed.␣␣Otherwise,
it␣is␣returned␣to␣the␣caller.

=item␣new_tmpfile

Creates␣an␣C<IO::File>␣opened␣for␣read/write␣on␣a␣newly␣created␣temporary
file.␣␣On␣systems␣where␣this␣is␣possible,␣the␣temporary␣file␣is␣anonymous
(i.e.␣it␣is␣unlinked␣after␣creation,␣but␣held␣open).␣␣If␣the␣temporary
file␣cannot␣be␣created␣or␣opened,␣the␣C<IO::File>␣object␣is␣destroyed.
Otherwise,␣it␣is␣returned␣to␣the␣caller.

=back

=head1␣METHODS

=over␣4

=item␣open(␣FILENAME␣[,MODE␣[,PERMS]]␣)

=item␣open(␣FILENAME,␣IOLAYERS␣)

C<open>␣accepts␣one,␣two␣or␣three␣parameters.␣␣With␣one␣parameter,
it␣is␣just␣a␣front␣end␣for␣the␣built-in␣C<open>␣function.␣␣With␣two␣or␣three
parameters,␣the␣first␣parameter␣is␣a␣filename␣that␣may␣include
whitespace␣or␣other␣special␣characters,␣and␣the␣second␣parameter␣is
the␣open␣mode,␣optionally␣followed␣by␣a␣file␣permission␣value.

If␣C<IO::File::open>␣receives␣a␣Perl␣mode␣string␣("E<gt>",␣"+E<lt>",␣etc.)
or␣an␣ANSI␣C␣fopen()␣mode␣string␣("w",␣"r+",␣etc.),␣it␣uses␣the␣basic
Perl␣C<open>␣operator␣(but␣protects␣any␣special␣characters).

If␣C<IO::File::open>␣is␣given␣a␣numeric␣mode,␣it␣passes␣that␣mode
and␣the␣optional␣permissions␣value␣to␣the␣Perl␣C<sysopen>␣operator.
The␣permissions␣default␣to␣0666.

If␣C<IO::File::open>␣is␣given␣a␣mode␣that␣includes␣the␣C<:>␣character,
it␣passes␣all␣the␣three␣arguments␣to␣the␣three-argument␣C<open>␣operator.

For␣convenience,␣C<IO::File>␣exports␣the␣O_XXX␣constants␣from␣the
Fcntl␣module,␣if␣this␣module␣is␣available.

=item␣binmode(␣[LAYER]␣)

C<binmode>␣sets␣C<binmode>␣on␣the␣underlying␣C<IO>␣object,␣as␣documented
in␣C<perldoc␣-f␣binmode>.

C<binmode>␣accepts␣one␣optional␣parameter,␣which␣is␣the␣layer␣to␣be
passed␣on␣to␣the␣C<binmode>␣call.

=back

=head1␣NOTE

Some␣operating␣systems␣may␣perform␣␣C<IO::File::new()>␣or␣C<IO::File::open()>
on␣a␣directory␣without␣errors.␣␣This␣behavior␣is␣not␣portable␣and␣not
suggested␣for␣use.␣␣Using␣C<opendir()>␣and␣C<readdir()>␣or␣C<IO::Dir>␣are
suggested␣instead.

=head1␣SEE␣ALSO

L<perlfunc>,␣
L<perlop/"I/O␣Operators">,
L<IO::Handle>,
L<IO::Seekable>,
L<IO::Dir>

=head1␣HISTORY

Derived␣from␣FileHandle.pm␣by␣Graham␣Barr␣E<lt>F<gbarr@pobox.com>E<gt>.

=cut
----------
Range: (454459,463181) (8722)
=head1␣NAME

IO::Handle␣-␣supply␣object␣methods␣for␣I/O␣handles

=head1␣SYNOPSIS

␣␣␣␣use␣IO::Handle;

␣␣␣␣$io␣=␣new␣IO::Handle;
␣␣␣␣if␣($io->fdopen(fileno(STDIN),"r"))␣{
␣␣␣␣␣␣␣␣print␣$io->getline;
␣␣␣␣␣␣␣␣$io->close;
␣␣␣␣}

␣␣␣␣$io␣=␣new␣IO::Handle;
␣␣␣␣if␣($io->fdopen(fileno(STDOUT),"w"))␣{
␣␣␣␣␣␣␣␣$io->print("Some␣text\n");
␣␣␣␣}

␣␣␣␣#␣setvbuf␣is␣not␣available␣by␣default␣on␣Perls␣5.8.0␣and␣later.
␣␣␣␣use␣IO::Handle␣'_IOLBF';
␣␣␣␣$io->setvbuf($buffer_var,␣_IOLBF,␣1024);

␣␣␣␣undef␣$io;␣␣␣␣␣␣␣#␣automatically␣closes␣the␣file␣if␣it's␣open

␣␣␣␣autoflush␣STDOUT␣1;

=head1␣DESCRIPTION

C<IO::Handle>␣is␣the␣base␣class␣for␣all␣other␣IO␣handle␣classes.␣It␣is
not␣intended␣that␣objects␣of␣C<IO::Handle>␣would␣be␣created␣directly,
but␣instead␣C<IO::Handle>␣is␣inherited␣from␣by␣several␣other␣classes
in␣the␣IO␣hierarchy.

If␣you␣are␣reading␣this␣documentation,␣looking␣for␣a␣replacement␣for
the␣C<FileHandle>␣package,␣then␣I␣suggest␣you␣read␣the␣documentation
for␣C<IO::File>␣too.

=head1␣CONSTRUCTOR

=over␣4

=item␣new␣()

Creates␣a␣new␣C<IO::Handle>␣object.

=item␣new_from_fd␣(␣FD,␣MODE␣)

Creates␣an␣C<IO::Handle>␣like␣C<new>␣does.
It␣requires␣two␣parameters,␣which␣are␣passed␣to␣the␣method␣C<fdopen>;
if␣the␣fdopen␣fails,␣the␣object␣is␣destroyed.␣Otherwise,␣it␣is␣returned
to␣the␣caller.

=back

=head1␣METHODS

See␣L<perlfunc>␣for␣complete␣descriptions␣of␣each␣of␣the␣following
supported␣C<IO::Handle>␣methods,␣which␣are␣just␣front␣ends␣for␣the
corresponding␣built-in␣functions:

␣␣␣␣$io->close
␣␣␣␣$io->eof
␣␣␣␣$io->fcntl(␣FUNCTION,␣SCALAR␣)
␣␣␣␣$io->fileno
␣␣␣␣$io->format_write(␣[FORMAT_NAME]␣)
␣␣␣␣$io->getc
␣␣␣␣$io->ioctl(␣FUNCTION,␣SCALAR␣)
␣␣␣␣$io->read␣(␣BUF,␣LEN,␣[OFFSET]␣)
␣␣␣␣$io->print␣(␣ARGS␣)
␣␣␣␣$io->printf␣(␣FMT,␣[ARGS]␣)
␣␣␣␣$io->say␣(␣ARGS␣)
␣␣␣␣$io->stat
␣␣␣␣$io->sysread␣(␣BUF,␣LEN,␣[OFFSET]␣)
␣␣␣␣$io->syswrite␣(␣BUF,␣[LEN,␣[OFFSET]]␣)
␣␣␣␣$io->truncate␣(␣LEN␣)

See␣L<perlvar>␣for␣complete␣descriptions␣of␣each␣of␣the␣following
supported␣C<IO::Handle>␣methods.␣␣All␣of␣them␣return␣the␣previous
value␣of␣the␣attribute␣and␣takes␣an␣optional␣single␣argument␣that␣when
given␣will␣set␣the␣value.␣␣If␣no␣argument␣is␣given␣the␣previous␣value
is␣unchanged␣(except␣for␣$io->autoflush␣will␣actually␣turn␣ON
autoflush␣by␣default).

␣␣␣␣$io->autoflush␣(␣[BOOL]␣)␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣$|
␣␣␣␣$io->format_page_number(␣[NUM]␣)␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣$%
␣␣␣␣$io->format_lines_per_page(␣[NUM]␣)␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣$=
␣␣␣␣$io->format_lines_left(␣[NUM]␣)␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣$-
␣␣␣␣$io->format_name(␣[STR]␣)␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣$~
␣␣␣␣$io->format_top_name(␣[STR]␣)␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣$^
␣␣␣␣$io->input_line_number(␣[NUM])␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣$.

The␣following␣methods␣are␣not␣supported␣on␣a␣per-filehandle␣basis.

␣␣␣␣IO::Handle->format_line_break_characters(␣[STR]␣)␣$:
␣␣␣␣IO::Handle->format_formfeed(␣[STR])␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣$^L
␣␣␣␣IO::Handle->output_field_separator(␣[STR]␣)␣␣␣␣␣␣␣$,
␣␣␣␣IO::Handle->output_record_separator(␣[STR]␣)␣␣␣␣␣␣$\

␣␣␣␣IO::Handle->input_record_separator(␣[STR]␣)␣␣␣␣␣␣␣$/

Furthermore,␣for␣doing␣normal␣I/O␣you␣might␣need␣these:

=over␣4

=item␣$io->fdopen␣(␣FD,␣MODE␣)

C<fdopen>␣is␣like␣an␣ordinary␣C<open>␣except␣that␣its␣first␣parameter
is␣not␣a␣filename␣but␣rather␣a␣file␣handle␣name,␣an␣IO::Handle␣object,
or␣a␣file␣descriptor␣number.␣␣(For␣the␣documentation␣of␣the␣C<open>
method,␣see␣L<IO::File>.)

=item␣$io->opened

Returns␣true␣if␣the␣object␣is␣currently␣a␣valid␣file␣descriptor,␣false
otherwise.

=item␣$io->getline

This␣works␣like␣<$io>␣described␣in␣L<perlop/"I/O␣Operators">
except␣that␣it's␣more␣readable␣and␣can␣be␣safely␣called␣in␣a
list␣context␣but␣still␣returns␣just␣one␣line.␣␣If␣used␣as␣the␣conditional
+within␣a␣C<while>␣or␣C-style␣C<for>␣loop,␣however,␣you␣will␣need␣to
+emulate␣the␣functionality␣of␣<$io>␣with␣C<<␣defined($_␣=␣$io->getline)␣>>.

=item␣$io->getlines

This␣works␣like␣<$io>␣when␣called␣in␣a␣list␣context␣to␣read␣all
the␣remaining␣lines␣in␣a␣file,␣except␣that␣it's␣more␣readable.
It␣will␣also␣croak()␣if␣accidentally␣called␣in␣a␣scalar␣context.

=item␣$io->ungetc␣(␣ORD␣)

Pushes␣a␣character␣with␣the␣given␣ordinal␣value␣back␣onto␣the␣given
handle's␣input␣stream.␣␣Only␣one␣character␣of␣pushback␣per␣handle␣is
guaranteed.

=item␣$io->write␣(␣BUF,␣LEN␣[,␣OFFSET␣]␣)

This␣C<write>␣is␣like␣C<write>␣found␣in␣C,␣that␣is␣it␣is␣the
opposite␣of␣read.␣The␣wrapper␣for␣the␣perl␣C<write>␣function␣is
called␣C<format_write>.

=item␣$io->error

Returns␣a␣true␣value␣if␣the␣given␣handle␣has␣experienced␣any␣errors
since␣it␣was␣opened␣or␣since␣the␣last␣call␣to␣C<clearerr>,␣or␣if␣the
handle␣is␣invalid.␣It␣only␣returns␣false␣for␣a␣valid␣handle␣with␣no
outstanding␣errors.

=item␣$io->clearerr

Clear␣the␣given␣handle's␣error␣indicator.␣Returns␣-1␣if␣the␣handle␣is
invalid,␣0␣otherwise.

=item␣$io->sync

C<sync>␣synchronizes␣a␣file's␣in-memory␣state␣␣with␣␣that␣␣on␣the
physical␣medium.␣C<sync>␣does␣not␣operate␣at␣the␣perlio␣api␣level,␣but
operates␣on␣the␣file␣descriptor␣(similar␣to␣sysread,␣sysseek␣and
systell).␣This␣means␣that␣any␣data␣held␣at␣the␣perlio␣api␣level␣will␣not
be␣synchronized.␣To␣synchronize␣data␣that␣is␣buffered␣at␣the␣perlio␣api
level␣you␣must␣use␣the␣flush␣method.␣C<sync>␣is␣not␣implemented␣on␣all
platforms.␣Returns␣"0␣but␣true"␣on␣success,␣C<undef>␣on␣error,␣C<undef>
for␣an␣invalid␣handle.␣See␣L<fsync(3c)>.

=item␣$io->flush

C<flush>␣causes␣perl␣to␣flush␣any␣buffered␣data␣at␣the␣perlio␣api␣level.
Any␣unread␣data␣in␣the␣buffer␣will␣be␣discarded,␣and␣any␣unwritten␣data
will␣be␣written␣to␣the␣underlying␣file␣descriptor.␣Returns␣"0␣but␣true"
on␣success,␣C<undef>␣on␣error.

=item␣$io->printflush␣(␣ARGS␣)

Turns␣on␣autoflush,␣print␣ARGS␣and␣then␣restores␣the␣autoflush␣status␣of␣the
C<IO::Handle>␣object.␣Returns␣the␣return␣value␣from␣print.

=item␣$io->blocking␣(␣[␣BOOL␣]␣)

If␣called␣with␣an␣argument␣C<blocking>␣will␣turn␣on␣non-blocking␣IO␣if
C<BOOL>␣is␣false,␣and␣turn␣it␣off␣if␣C<BOOL>␣is␣true.

C<blocking>␣will␣return␣the␣value␣of␣the␣previous␣setting,␣or␣the
current␣setting␣if␣C<BOOL>␣is␣not␣given.␣

If␣an␣error␣occurs␣C<blocking>␣will␣return␣undef␣and␣C<$!>␣will␣be␣set.

=back


If␣the␣C␣functions␣setbuf()␣and/or␣setvbuf()␣are␣available,␣then
C<IO::Handle::setbuf>␣and␣C<IO::Handle::setvbuf>␣set␣the␣buffering
policy␣for␣an␣IO::Handle.␣␣The␣calling␣sequences␣for␣the␣Perl␣functions
are␣the␣same␣as␣their␣C␣counterparts--including␣the␣constants␣C<_IOFBF>,
C<_IOLBF>,␣and␣C<_IONBF>␣for␣setvbuf()--except␣that␣the␣buffer␣parameter
specifies␣a␣scalar␣variable␣to␣use␣as␣a␣buffer.␣You␣should␣only
change␣the␣buffer␣before␣any␣I/O,␣or␣immediately␣after␣calling␣flush.

WARNING:␣The␣IO::Handle::setvbuf()␣is␣not␣available␣by␣default␣on
Perls␣5.8.0␣and␣later␣because␣setvbuf()␣is␣rather␣specific␣to␣using
the␣stdio␣library,␣while␣Perl␣prefers␣the␣new␣perlio␣subsystem␣instead.

WARNING:␣A␣variable␣used␣as␣a␣buffer␣by␣C<setbuf>␣or␣C<setvbuf>␣B<must␣not
be␣modified>␣in␣any␣way␣until␣the␣IO::Handle␣is␣closed␣or␣C<setbuf>␣or
C<setvbuf>␣is␣called␣again,␣or␣memory␣corruption␣may␣result!␣Remember␣that
the␣order␣of␣global␣destruction␣is␣undefined,␣so␣even␣if␣your␣buffer
variable␣remains␣in␣scope␣until␣program␣termination,␣it␣may␣be␣undefined
before␣the␣file␣IO::Handle␣is␣closed.␣Note␣that␣you␣need␣to␣import␣the
constants␣C<_IOFBF>,␣C<_IOLBF>,␣and␣C<_IONBF>␣explicitly.␣Like␣C,␣setbuf
returns␣nothing.␣setvbuf␣returns␣"0␣but␣true",␣on␣success,␣C<undef>␣on
failure.

Lastly,␣there␣is␣a␣special␣method␣for␣working␣under␣B<-T>␣and␣setuid/gid
scripts:

=over␣4

=item␣$io->untaint

Marks␣the␣object␣as␣taint-clean,␣and␣as␣such␣data␣read␣from␣it␣will␣also
be␣considered␣taint-clean.␣Note␣that␣this␣is␣a␣very␣trusting␣action␣to
take,␣and␣appropriate␣consideration␣for␣the␣data␣source␣and␣potential
vulnerability␣should␣be␣kept␣in␣mind.␣Returns␣0␣on␣success,␣-1␣if␣setting
the␣taint-clean␣flag␣failed.␣(eg␣invalid␣handle)

=back

=head1␣NOTE

An␣C<IO::Handle>␣object␣is␣a␣reference␣to␣a␣symbol/GLOB␣reference␣(see
the␣C<Symbol>␣package).␣␣Some␣modules␣that
inherit␣from␣C<IO::Handle>␣may␣want␣to␣keep␣object␣related␣variables
in␣the␣hash␣table␣part␣of␣the␣GLOB.␣In␣an␣attempt␣to␣prevent␣modules
trampling␣on␣each␣other␣I␣propose␣the␣that␣any␣such␣module␣should␣prefix
its␣variables␣with␣its␣own␣name␣separated␣by␣_'s.␣For␣example␣the␣IO::Socket
module␣keeps␣a␣C<timeout>␣variable␣in␣'io_socket_timeout'.

=head1␣SEE␣ALSO

L<perlfunc>,␣
L<perlop/"I/O␣Operators">,
L<IO::File>

=head1␣BUGS

Due␣to␣backwards␣compatibility,␣all␣filehandles␣resemble␣objects
of␣class␣C<IO::Handle>,␣or␣actually␣classes␣derived␣from␣that␣class.
They␣actually␣aren't.␣␣Which␣means␣you␣can't␣derive␣your␣own␣
class␣from␣C<IO::Handle>␣and␣inherit␣those␣methods.

=head1␣HISTORY

Derived␣from␣FileHandle.pm␣by␣Graham␣Barr␣E<lt>F<gbarr@pobox.com>E<gt>

=cut
----------
Range: (470885,473132) (2247)
=head1␣NAME

IO::Seekable␣-␣supply␣seek␣based␣methods␣for␣I/O␣objects

=head1␣SYNOPSIS

␣␣␣␣use␣IO::Seekable;
␣␣␣␣package␣IO::Something;
␣␣␣␣@ISA␣=␣qw(IO::Seekable);

=head1␣DESCRIPTION

C<IO::Seekable>␣does␣not␣have␣a␣constructor␣of␣its␣own␣as␣it␣is␣intended␣to
be␣inherited␣by␣other␣C<IO::Handle>␣based␣objects.␣It␣provides␣methods
which␣allow␣seeking␣of␣the␣file␣descriptors.

=over␣4

=item␣$io->getpos

Returns␣an␣opaque␣value␣that␣represents␣the␣current␣position␣of␣the
IO::File,␣or␣C<undef>␣if␣this␣is␣not␣possible␣(eg␣an␣unseekable␣stream␣such
as␣a␣terminal,␣pipe␣or␣socket).␣If␣the␣fgetpos()␣function␣is␣available␣in
your␣C␣library␣it␣is␣used␣to␣implements␣getpos,␣else␣perl␣emulates␣getpos
using␣C's␣ftell()␣function.

=item␣$io->setpos

Uses␣the␣value␣of␣a␣previous␣getpos␣call␣to␣return␣to␣a␣previously␣visited
position.␣Returns␣"0␣but␣true"␣on␣success,␣C<undef>␣on␣failure.

=back

See␣L<perlfunc>␣for␣complete␣descriptions␣of␣each␣of␣the␣following
supported␣C<IO::Seekable>␣methods,␣which␣are␣just␣front␣ends␣for␣the
corresponding␣built-in␣functions:

=over␣4

=item␣$io->seek␣(␣POS,␣WHENCE␣)

Seek␣the␣IO::File␣to␣position␣POS,␣relative␣to␣WHENCE:

=over␣8

=item␣WHENCE=0␣(SEEK_SET)

POS␣is␣absolute␣position.␣(Seek␣relative␣to␣the␣start␣of␣the␣file)

=item␣WHENCE=1␣(SEEK_CUR)

POS␣is␣an␣offset␣from␣the␣current␣position.␣(Seek␣relative␣to␣current)

=item␣WHENCE=2␣(SEEK_END)

POS␣is␣an␣offset␣from␣the␣end␣of␣the␣file.␣(Seek␣relative␣to␣end)

=back

The␣SEEK_*␣constants␣can␣be␣imported␣from␣the␣C<Fcntl>␣module␣if␣you
don't␣wish␣to␣use␣the␣numbers␣C<0>␣C<1>␣or␣C<2>␣in␣your␣code.

Returns␣C<1>␣upon␣success,␣C<0>␣otherwise.

=item␣$io->sysseek(␣POS,␣WHENCE␣)

Similar␣to␣$io->seek,␣but␣sets␣the␣IO::File's␣position␣using␣the␣system
call␣lseek(2)␣directly,␣so␣will␣confuse␣most␣perl␣IO␣operators␣except
sysread␣and␣syswrite␣(see␣L<perlfunc>␣for␣full␣details)

Returns␣the␣new␣position,␣or␣C<undef>␣on␣failure.␣␣A␣position
of␣zero␣is␣returned␣as␣the␣string␣C<"0␣but␣true">

=item␣$io->tell

Returns␣the␣IO::File's␣current␣position,␣or␣-1␣on␣error.

=back

=head1␣SEE␣ALSO

L<perlfunc>,␣
L<perlop/"I/O␣Operators">,
L<IO::Handle>
L<IO::File>

=head1␣HISTORY

Derived␣from␣FileHandle.pm␣by␣Graham␣Barr␣E<lt>gbarr@pobox.comE<gt>

=cut
----------
Range: (529368,548888) (19520)
=head1␣NAME

Devel::PPPort␣-␣Perl/Pollution/Portability

=head1␣SYNOPSIS

␣␣␣␣Devel::PPPort::WriteFile();␣␣␣#␣defaults␣to␣./ppport.h
␣␣␣␣Devel::PPPort::WriteFile('someheader.h');

=head1␣DESCRIPTION

Perl's␣API␣has␣changed␣over␣time,␣gaining␣new␣features,␣new␣functions,
increasing␣its␣flexibility,␣and␣reducing␣the␣impact␣on␣the␣C␣namespace
environment␣(reduced␣pollution).␣The␣header␣file␣written␣by␣this␣module,
typically␣F<ppport.h>,␣attempts␣to␣bring␣some␣of␣the␣newer␣Perl␣API
features␣to␣older␣versions␣of␣Perl,␣so␣that␣you␣can␣worry␣less␣about
keeping␣track␣of␣old␣releases,␣but␣users␣can␣still␣reap␣the␣benefit.

C<Devel::PPPort>␣contains␣a␣single␣function,␣called␣C<WriteFile>.␣Its
only␣purpose␣is␣to␣write␣the␣F<ppport.h>␣C␣header␣file.␣This␣file
contains␣a␣series␣of␣macros␣and,␣if␣explicitly␣requested,␣functions␣that
allow␣XS␣modules␣to␣be␣built␣using␣older␣versions␣of␣Perl.␣Currently,
Perl␣versions␣from␣5.003␣to␣5.10.0␣are␣supported.

This␣module␣is␣used␣by␣C<h2xs>␣to␣write␣the␣file␣F<ppport.h>.

=head2␣Why␣use␣ppport.h?

You␣should␣use␣F<ppport.h>␣in␣modern␣code␣so␣that␣your␣code␣will␣work
with␣the␣widest␣range␣of␣Perl␣interpreters␣possible,␣without␣significant
additional␣work.

You␣should␣attempt␣older␣code␣to␣fully␣use␣F<ppport.h>,␣because␣the
reduced␣pollution␣of␣newer␣Perl␣versions␣is␣an␣important␣thing.␣It's␣so
important␣that␣the␣old␣polluting␣ways␣of␣original␣Perl␣modules␣will␣not␣be
supported␣very␣far␣into␣the␣future,␣and␣your␣module␣will␣almost␣certainly
break!␣By␣adapting␣to␣it␣now,␣you'll␣gain␣compatibility␣and␣a␣sense␣of
having␣done␣the␣electronic␣ecology␣some␣good.

=head2␣How␣to␣use␣ppport.h

Don't␣direct␣the␣users␣of␣your␣module␣to␣download␣C<Devel::PPPort>.
They␣are␣most␣probably␣no␣XS␣writers.␣Also,␣don't␣make␣F<ppport.h>
optional.␣Rather,␣just␣take␣the␣most␣recent␣copy␣of␣F<ppport.h>␣that
you␣can␣find␣(e.g.␣by␣generating␣it␣with␣the␣latest␣C<Devel::PPPort>
release␣from␣CPAN),␣copy␣it␣into␣your␣project,␣adjust␣your␣project␣to
use␣it,␣and␣distribute␣the␣header␣along␣with␣your␣module.

=head2␣Running␣ppport.h

But␣F<ppport.h>␣is␣more␣than␣just␣a␣C␣header.␣It's␣also␣a␣Perl␣script
that␣can␣check␣your␣source␣code.␣It␣will␣suggest␣hints␣and␣portability
notes,␣and␣can␣even␣make␣suggestions␣on␣how␣to␣change␣your␣code.␣You
can␣run␣it␣like␣any␣other␣Perl␣program:

␣␣␣␣perl␣ppport.h␣[options]␣[files]

It␣also␣has␣embedded␣documentation,␣so␣you␣can␣use

␣␣␣␣perldoc␣ppport.h

to␣find␣out␣more␣about␣how␣to␣use␣it.

=head1␣FUNCTIONS

=head2␣WriteFile

C<WriteFile>␣takes␣one␣optional␣argument.␣When␣called␣with␣one
argument,␣it␣expects␣to␣be␣passed␣a␣filename.␣When␣called␣with
no␣arguments,␣it␣defaults␣to␣the␣filename␣F<ppport.h>.

The␣function␣returns␣a␣true␣value␣if␣the␣file␣was␣written␣successfully.
Otherwise␣it␣returns␣a␣false␣value.

=head1␣COMPATIBILITY

F<ppport.h>␣supports␣Perl␣versions␣from␣5.003␣to␣5.10.0
in␣threaded␣and␣non-threaded␣configurations.

=head2␣Provided␣Perl␣compatibility␣API

The␣header␣file␣written␣by␣this␣module,␣typically␣F<ppport.h>,␣provides
access␣to␣the␣following␣elements␣of␣the␣Perl␣API␣that␣is␣not␣available
in␣older␣Perl␣releases:

␣␣␣␣_aMY_CXT
␣␣␣␣_pMY_CXT
␣␣␣␣aMY_CXT
␣␣␣␣aMY_CXT_
␣␣␣␣aTHX
␣␣␣␣aTHX_
␣␣␣␣aTHXR
␣␣␣␣aTHXR_
␣␣␣␣AvFILLp
␣␣␣␣boolSV
␣␣␣␣call_argv
␣␣␣␣call_method
␣␣␣␣call_pv
␣␣␣␣call_sv
␣␣␣␣ckWARN
␣␣␣␣CopFILE
␣␣␣␣CopFILE_set
␣␣␣␣CopFILEAV
␣␣␣␣CopFILEGV
␣␣␣␣CopFILEGV_set
␣␣␣␣CopFILESV
␣␣␣␣CopSTASH
␣␣␣␣CopSTASH_eq
␣␣␣␣CopSTASH_set
␣␣␣␣CopSTASHPV
␣␣␣␣CopSTASHPV_set
␣␣␣␣CopyD
␣␣␣␣CPERLscope
␣␣␣␣dAX
␣␣␣␣dAXMARK
␣␣␣␣DEFSV
␣␣␣␣DEFSV_set
␣␣␣␣dITEMS
␣␣␣␣dMY_CXT
␣␣␣␣dMY_CXT_SV
␣␣␣␣dNOOP
␣␣␣␣dTHR
␣␣␣␣dTHX
␣␣␣␣dTHXa
␣␣␣␣dTHXoa
␣␣␣␣dTHXR
␣␣␣␣dUNDERBAR
␣␣␣␣dVAR
␣␣␣␣dXCPT
␣␣␣␣dXSTARG
␣␣␣␣END_EXTERN_C
␣␣␣␣ERRSV
␣␣␣␣eval_pv
␣␣␣␣eval_sv
␣␣␣␣EXTERN_C
␣␣␣␣G_METHOD
␣␣␣␣get_av
␣␣␣␣get_cv
␣␣␣␣get_hv
␣␣␣␣get_sv
␣␣␣␣grok_bin
␣␣␣␣grok_hex
␣␣␣␣grok_number
␣␣␣␣GROK_NUMERIC_RADIX
␣␣␣␣grok_numeric_radix
␣␣␣␣grok_oct
␣␣␣␣gv_fetchpvn_flags
␣␣␣␣gv_fetchpvs
␣␣␣␣gv_stashpvn
␣␣␣␣gv_stashpvs
␣␣␣␣GvSVn
␣␣␣␣hv_fetchs
␣␣␣␣hv_stores
␣␣␣␣HvNAME_get
␣␣␣␣HvNAMELEN_get
␣␣␣␣IN_LOCALE
␣␣␣␣IN_LOCALE_COMPILETIME
␣␣␣␣IN_LOCALE_RUNTIME
␣␣␣␣IN_PERL_COMPILETIME
␣␣␣␣INT2PTR
␣␣␣␣IS_NUMBER_GREATER_THAN_UV_MAX
␣␣␣␣IS_NUMBER_IN_UV
␣␣␣␣IS_NUMBER_INFINITY
␣␣␣␣IS_NUMBER_NAN
␣␣␣␣IS_NUMBER_NEG
␣␣␣␣IS_NUMBER_NOT_INT
␣␣␣␣isALNUMC
␣␣␣␣isASCII
␣␣␣␣isBLANK
␣␣␣␣isCNTRL
␣␣␣␣isGRAPH
␣␣␣␣isGV_with_GP
␣␣␣␣isPRINT
␣␣␣␣isPSXSPC
␣␣␣␣isPUNCT
␣␣␣␣isXDIGIT
␣␣␣␣IVdf
␣␣␣␣IVSIZE
␣␣␣␣IVTYPE
␣␣␣␣load_module
␣␣␣␣memEQ
␣␣␣␣memNE
␣␣␣␣MoveD
␣␣␣␣mPUSHi
␣␣␣␣mPUSHn
␣␣␣␣mPUSHp
␣␣␣␣mPUSHs
␣␣␣␣mPUSHu
␣␣␣␣mXPUSHi
␣␣␣␣mXPUSHn
␣␣␣␣mXPUSHp
␣␣␣␣mXPUSHs
␣␣␣␣mXPUSHu
␣␣␣␣MY_CXT
␣␣␣␣MY_CXT_CLONE
␣␣␣␣MY_CXT_INIT
␣␣␣␣my_snprintf
␣␣␣␣my_sprintf
␣␣␣␣my_strlcat
␣␣␣␣my_strlcpy
␣␣␣␣newCONSTSUB
␣␣␣␣newRV_inc
␣␣␣␣newRV_noinc
␣␣␣␣newSV_type
␣␣␣␣newSVpvn
␣␣␣␣newSVpvn_flags
␣␣␣␣newSVpvn_share
␣␣␣␣newSVpvn_utf8
␣␣␣␣newSVpvs
␣␣␣␣newSVpvs_flags
␣␣␣␣newSVuv
␣␣␣␣Newx
␣␣␣␣Newxc
␣␣␣␣Newxz
␣␣␣␣NOOP
␣␣␣␣NUM2PTR
␣␣␣␣NVef
␣␣␣␣NVff
␣␣␣␣NVgf
␣␣␣␣NVTYPE
␣␣␣␣packWARN
␣␣␣␣PERL_ABS
␣␣␣␣PERL_BCDVERSION
␣␣␣␣PERL_GCC_BRACE_GROUPS_FORBIDDEN
␣␣␣␣PERL_HASH
␣␣␣␣PERL_INT_MAX
␣␣␣␣PERL_INT_MIN
␣␣␣␣PERL_LONG_MAX
␣␣␣␣PERL_LONG_MIN
␣␣␣␣PERL_MAGIC_arylen
␣␣␣␣PERL_MAGIC_backref
␣␣␣␣PERL_MAGIC_bm
␣␣␣␣PERL_MAGIC_collxfrm
␣␣␣␣PERL_MAGIC_dbfile
␣␣␣␣PERL_MAGIC_dbline
␣␣␣␣PERL_MAGIC_defelem
␣␣␣␣PERL_MAGIC_env
␣␣␣␣PERL_MAGIC_envelem
␣␣␣␣PERL_MAGIC_ext
␣␣␣␣PERL_MAGIC_fm
␣␣␣␣PERL_MAGIC_glob
␣␣␣␣PERL_MAGIC_isa
␣␣␣␣PERL_MAGIC_isaelem
␣␣␣␣PERL_MAGIC_mutex
␣␣␣␣PERL_MAGIC_nkeys
␣␣␣␣PERL_MAGIC_overload
␣␣␣␣PERL_MAGIC_overload_elem
␣␣␣␣PERL_MAGIC_overload_table
␣␣␣␣PERL_MAGIC_pos
␣␣␣␣PERL_MAGIC_qr
␣␣␣␣PERL_MAGIC_regdata
␣␣␣␣PERL_MAGIC_regdatum
␣␣␣␣PERL_MAGIC_regex_global
␣␣␣␣PERL_MAGIC_shared
␣␣␣␣PERL_MAGIC_shared_scalar
␣␣␣␣PERL_MAGIC_sig
␣␣␣␣PERL_MAGIC_sigelem
␣␣␣␣PERL_MAGIC_substr
␣␣␣␣PERL_MAGIC_sv
␣␣␣␣PERL_MAGIC_taint
␣␣␣␣PERL_MAGIC_tied
␣␣␣␣PERL_MAGIC_tiedelem
␣␣␣␣PERL_MAGIC_tiedscalar
␣␣␣␣PERL_MAGIC_utf8
␣␣␣␣PERL_MAGIC_uvar
␣␣␣␣PERL_MAGIC_uvar_elem
␣␣␣␣PERL_MAGIC_vec
␣␣␣␣PERL_MAGIC_vstring
␣␣␣␣PERL_PV_ESCAPE_ALL
␣␣␣␣PERL_PV_ESCAPE_FIRSTCHAR
␣␣␣␣PERL_PV_ESCAPE_NOBACKSLASH
␣␣␣␣PERL_PV_ESCAPE_NOCLEAR
␣␣␣␣PERL_PV_ESCAPE_QUOTE
␣␣␣␣PERL_PV_ESCAPE_RE
␣␣␣␣PERL_PV_ESCAPE_UNI
␣␣␣␣PERL_PV_ESCAPE_UNI_DETECT
␣␣␣␣PERL_PV_PRETTY_DUMP
␣␣␣␣PERL_PV_PRETTY_ELLIPSES
␣␣␣␣PERL_PV_PRETTY_LTGT
␣␣␣␣PERL_PV_PRETTY_NOCLEAR
␣␣␣␣PERL_PV_PRETTY_QUOTE
␣␣␣␣PERL_PV_PRETTY_REGPROP
␣␣␣␣PERL_QUAD_MAX
␣␣␣␣PERL_QUAD_MIN
␣␣␣␣PERL_REVISION
␣␣␣␣PERL_SCAN_ALLOW_UNDERSCORES
␣␣␣␣PERL_SCAN_DISALLOW_PREFIX
␣␣␣␣PERL_SCAN_GREATER_THAN_UV_MAX
␣␣␣␣PERL_SCAN_SILENT_ILLDIGIT
␣␣␣␣PERL_SHORT_MAX
␣␣␣␣PERL_SHORT_MIN
␣␣␣␣PERL_SIGNALS_UNSAFE_FLAG
␣␣␣␣PERL_SUBVERSION
␣␣␣␣PERL_UCHAR_MAX
␣␣␣␣PERL_UCHAR_MIN
␣␣␣␣PERL_UINT_MAX
␣␣␣␣PERL_UINT_MIN
␣␣␣␣PERL_ULONG_MAX
␣␣␣␣PERL_ULONG_MIN
␣␣␣␣PERL_UNUSED_ARG
␣␣␣␣PERL_UNUSED_CONTEXT
␣␣␣␣PERL_UNUSED_DECL
␣␣␣␣PERL_UNUSED_VAR
␣␣␣␣PERL_UQUAD_MAX
␣␣␣␣PERL_UQUAD_MIN
␣␣␣␣PERL_USE_GCC_BRACE_GROUPS
␣␣␣␣PERL_USHORT_MAX
␣␣␣␣PERL_USHORT_MIN
␣␣␣␣PERL_VERSION
␣␣␣␣Perl_warner
␣␣␣␣Perl_warner_nocontext
␣␣␣␣PERLIO_FUNCS_CAST
␣␣␣␣PERLIO_FUNCS_DECL
␣␣␣␣PL_bufend
␣␣␣␣PL_bufptr
␣␣␣␣PL_compiling
␣␣␣␣PL_copline
␣␣␣␣PL_curcop
␣␣␣␣PL_curstash
␣␣␣␣PL_DBsignal
␣␣␣␣PL_DBsingle
␣␣␣␣PL_DBsub
␣␣␣␣PL_DBtrace
␣␣␣␣PL_debstash
␣␣␣␣PL_defgv
␣␣␣␣PL_diehook
␣␣␣␣PL_dirty
␣␣␣␣PL_dowarn
␣␣␣␣PL_errgv
␣␣␣␣PL_error_count
␣␣␣␣PL_expect
␣␣␣␣PL_hexdigit
␣␣␣␣PL_hints
␣␣␣␣PL_in_my
␣␣␣␣PL_in_my_stash
␣␣␣␣PL_laststatval
␣␣␣␣PL_lex_state
␣␣␣␣PL_lex_stuff
␣␣␣␣PL_linestr
␣␣␣␣PL_na
␣␣␣␣PL_no_modify
␣␣␣␣PL_parser
␣␣␣␣PL_perl_destruct_level
␣␣␣␣PL_perldb
␣␣␣␣PL_ppaddr
␣␣␣␣PL_rsfp
␣␣␣␣PL_rsfp_filters
␣␣␣␣PL_signals
␣␣␣␣PL_stack_base
␣␣␣␣PL_stack_sp
␣␣␣␣PL_statcache
␣␣␣␣PL_stdingv
␣␣␣␣PL_Sv
␣␣␣␣PL_sv_arenaroot
␣␣␣␣PL_sv_no
␣␣␣␣PL_sv_undef
␣␣␣␣PL_sv_yes
␣␣␣␣PL_tainted
␣␣␣␣PL_tainting
␣␣␣␣PL_tokenbuf
␣␣␣␣pMY_CXT
␣␣␣␣pMY_CXT_
␣␣␣␣Poison
␣␣␣␣PoisonFree
␣␣␣␣PoisonNew
␣␣␣␣PoisonWith
␣␣␣␣pTHX
␣␣␣␣pTHX_
␣␣␣␣PTR2IV
␣␣␣␣PTR2nat
␣␣␣␣PTR2NV
␣␣␣␣PTR2ul
␣␣␣␣PTR2UV
␣␣␣␣PTRV
␣␣␣␣PUSHmortal
␣␣␣␣PUSHu
␣␣␣␣pv_display
␣␣␣␣pv_escape
␣␣␣␣pv_pretty
␣␣␣␣SAVE_DEFSV
␣␣␣␣START_EXTERN_C
␣␣␣␣START_MY_CXT
␣␣␣␣STMT_END
␣␣␣␣STMT_START
␣␣␣␣STR_WITH_LEN
␣␣␣␣sv_2pv_flags
␣␣␣␣sv_2pv_nolen
␣␣␣␣sv_2pvbyte
␣␣␣␣sv_2pvbyte_nolen
␣␣␣␣sv_2uv
␣␣␣␣sv_catpv_mg
␣␣␣␣sv_catpvf_mg
␣␣␣␣sv_catpvf_mg_nocontext
␣␣␣␣sv_catpvn_mg
␣␣␣␣sv_catpvn_nomg
␣␣␣␣sv_catpvs
␣␣␣␣sv_catsv_mg
␣␣␣␣sv_catsv_nomg
␣␣␣␣SV_CONST_RETURN
␣␣␣␣SV_COW_DROP_PV
␣␣␣␣SV_COW_SHARED_HASH_KEYS
␣␣␣␣SV_GMAGIC
␣␣␣␣SV_HAS_TRAILING_NUL
␣␣␣␣SV_IMMEDIATE_UNREF
␣␣␣␣sv_magic_portable
␣␣␣␣SV_MUTABLE_RETURN
␣␣␣␣SV_NOSTEAL
␣␣␣␣sv_pvn_force_flags
␣␣␣␣sv_pvn_nomg
␣␣␣␣sv_setiv_mg
␣␣␣␣sv_setnv_mg
␣␣␣␣sv_setpv_mg
␣␣␣␣sv_setpvf_mg
␣␣␣␣sv_setpvf_mg_nocontext
␣␣␣␣sv_setpvn_mg
␣␣␣␣sv_setpvs
␣␣␣␣sv_setsv_mg
␣␣␣␣sv_setsv_nomg
␣␣␣␣sv_setuv
␣␣␣␣sv_setuv_mg
␣␣␣␣SV_SMAGIC
␣␣␣␣sv_usepvn_mg
␣␣␣␣SV_UTF8_NO_ENCODING
␣␣␣␣sv_uv
␣␣␣␣sv_vcatpvf
␣␣␣␣sv_vcatpvf_mg
␣␣␣␣sv_vsetpvf
␣␣␣␣sv_vsetpvf_mg
␣␣␣␣SVf
␣␣␣␣SVf_UTF8
␣␣␣␣SVfARG
␣␣␣␣SvGETMAGIC
␣␣␣␣SvIV_nomg
␣␣␣␣SvMAGIC_set
␣␣␣␣SvPV_const
␣␣␣␣SvPV_flags
␣␣␣␣SvPV_flags_const
␣␣␣␣SvPV_flags_const_nolen
␣␣␣␣SvPV_flags_mutable
␣␣␣␣SvPV_force
␣␣␣␣SvPV_force_flags
␣␣␣␣SvPV_force_flags_mutable
␣␣␣␣SvPV_force_flags_nolen
␣␣␣␣SvPV_force_mutable
␣␣␣␣SvPV_force_nolen
␣␣␣␣SvPV_force_nomg
␣␣␣␣SvPV_force_nomg_nolen
␣␣␣␣SvPV_mutable
␣␣␣␣SvPV_nolen
␣␣␣␣SvPV_nolen_const
␣␣␣␣SvPV_nomg
␣␣␣␣SvPV_nomg_const
␣␣␣␣SvPV_nomg_const_nolen
␣␣␣␣SvPV_renew
␣␣␣␣SvPVbyte
␣␣␣␣SvPVX_const
␣␣␣␣SvPVX_mutable
␣␣␣␣SvREFCNT_inc
␣␣␣␣SvREFCNT_inc_NN
␣␣␣␣SvREFCNT_inc_simple
␣␣␣␣SvREFCNT_inc_simple_NN
␣␣␣␣SvREFCNT_inc_simple_void
␣␣␣␣SvREFCNT_inc_simple_void_NN
␣␣␣␣SvREFCNT_inc_void
␣␣␣␣SvREFCNT_inc_void_NN
␣␣␣␣SvRV_set
␣␣␣␣SvSHARED_HASH
␣␣␣␣SvSTASH_set
␣␣␣␣SvUOK
␣␣␣␣SvUV
␣␣␣␣SvUV_nomg
␣␣␣␣SvUV_set
␣␣␣␣SvUVX
␣␣␣␣SvUVx
␣␣␣␣SvUVXx
␣␣␣␣SvVSTRING_mg
␣␣␣␣UNDERBAR
␣␣␣␣UTF8_MAXBYTES
␣␣␣␣UVof
␣␣␣␣UVSIZE
␣␣␣␣UVTYPE
␣␣␣␣UVuf
␣␣␣␣UVXf
␣␣␣␣UVxf
␣␣␣␣vload_module
␣␣␣␣vnewSVpvf
␣␣␣␣WARN_ALL
␣␣␣␣WARN_AMBIGUOUS
␣␣␣␣WARN_ASSERTIONS
␣␣␣␣WARN_BAREWORD
␣␣␣␣WARN_CLOSED
␣␣␣␣WARN_CLOSURE
␣␣␣␣WARN_DEBUGGING
␣␣␣␣WARN_DEPRECATED
␣␣␣␣WARN_DIGIT
␣␣␣␣WARN_EXEC
␣␣␣␣WARN_EXITING
␣␣␣␣WARN_GLOB
␣␣␣␣WARN_INPLACE
␣␣␣␣WARN_INTERNAL
␣␣␣␣WARN_IO
␣␣␣␣WARN_LAYER
␣␣␣␣WARN_MALLOC
␣␣␣␣WARN_MISC
␣␣␣␣WARN_NEWLINE
␣␣␣␣WARN_NUMERIC
␣␣␣␣WARN_ONCE
␣␣␣␣WARN_OVERFLOW
␣␣␣␣WARN_PACK
␣␣␣␣WARN_PARENTHESIS
␣␣␣␣WARN_PIPE
␣␣␣␣WARN_PORTABLE
␣␣␣␣WARN_PRECEDENCE
␣␣␣␣WARN_PRINTF
␣␣␣␣WARN_PROTOTYPE
␣␣␣␣WARN_QW
␣␣␣␣WARN_RECURSION
␣␣␣␣WARN_REDEFINE
␣␣␣␣WARN_REGEXP
␣␣␣␣WARN_RESERVED
␣␣␣␣WARN_SEMICOLON
␣␣␣␣WARN_SEVERE
␣␣␣␣WARN_SIGNAL
␣␣␣␣WARN_SUBSTR
␣␣␣␣WARN_SYNTAX
␣␣␣␣WARN_TAINT
␣␣␣␣WARN_THREADS
␣␣␣␣WARN_UNINITIALIZED
␣␣␣␣WARN_UNOPENED
␣␣␣␣WARN_UNPACK
␣␣␣␣WARN_UNTIE
␣␣␣␣WARN_UTF8
␣␣␣␣WARN_VOID
␣␣␣␣warner
␣␣␣␣XCPT_CATCH
␣␣␣␣XCPT_RETHROW
␣␣␣␣XCPT_TRY_END
␣␣␣␣XCPT_TRY_START
␣␣␣␣XPUSHmortal
␣␣␣␣XPUSHu
␣␣␣␣XSprePUSH
␣␣␣␣XSPROTO
␣␣␣␣XSRETURN
␣␣␣␣XSRETURN_UV
␣␣␣␣XST_mUV
␣␣␣␣ZeroD

=head2␣Perl␣API␣not␣supported␣by␣ppport.h

There␣is␣still␣a␣big␣part␣of␣the␣API␣not␣supported␣by␣F<ppport.h>.
Either␣because␣it␣doesn't␣make␣sense␣to␣back-port␣that␣part␣of␣the␣API,
or␣simply␣because␣it␣hasn't␣been␣implemented␣yet.␣Patches␣welcome!

Here's␣a␣list␣of␣the␣currently␣unsupported␣API,␣and␣also␣the␣version␣of
Perl␣below␣which␣it␣is␣unsupported:

=over␣4

=item␣perl␣5.11.0

␣␣HeUTF8
␣␣MULTICALL
␣␣PERL_SYS_TERM
␣␣POP_MULTICALL
␣␣PUSH_MULTICALL
␣␣SvOOK_offset
␣␣av_iter_p
␣␣croak_xs_usage
␣␣fetch_cop_label
␣␣gv_fetchmethod_flags
␣␣hv_assert
␣␣mro_get_from_name
␣␣mro_get_private_data
␣␣mro_register
␣␣mro_set_mro
␣␣mro_set_private_data
␣␣pad_sv
␣␣pregfree2
␣␣ref
␣␣save_adelete
␣␣save_helem_flags
␣␣save_padsv_and_mortalize
␣␣save_pushptr
␣␣stashpv_hvname_match
␣␣sv_insert_flags
␣␣sv_utf8_upgrade_flags_grow

=item␣perl␣5.10.0

␣␣hv_common
␣␣hv_common_key_len
␣␣sv_destroyable
␣␣sys_init
␣␣sys_init3
␣␣sys_term

=item␣perl␣5.9.5

␣␣Perl_signbit
␣␣SvRX
␣␣SvRXOK
␣␣av_create_and_push
␣␣av_create_and_unshift_one
␣␣get_cvn_flags
␣␣gv_fetchfile_flags
␣␣mro_get_linear_isa
␣␣mro_method_changed_in
␣␣my_dirfd
␣␣pregcomp
␣␣ptr_table_clear
␣␣ptr_table_fetch
␣␣ptr_table_free
␣␣ptr_table_new
␣␣ptr_table_split
␣␣ptr_table_store
␣␣re_compile
␣␣re_intuit_start
␣␣reg_named_buff_all
␣␣reg_named_buff_exists
␣␣reg_named_buff_fetch
␣␣reg_named_buff_firstkey
␣␣reg_named_buff_nextkey
␣␣reg_named_buff_scalar
␣␣regfree_internal
␣␣savesharedpvn
␣␣scan_vstring
␣␣upg_version

=item␣perl␣5.9.4

␣␣PerlIO_context_layers
␣␣gv_name_set
␣␣my_vsnprintf
␣␣newXS_flags
␣␣regclass_swash
␣␣sv_does
␣␣sv_usepvn_flags

=item␣perl␣5.9.3

␣␣av_arylen_p
␣␣ckwarn
␣␣ckwarn_d
␣␣csighandler
␣␣dMULTICALL
␣␣doref
␣␣gv_const_sv
␣␣hv_eiter_p
␣␣hv_eiter_set
␣␣hv_name_set
␣␣hv_placeholders_get
␣␣hv_placeholders_p
␣␣hv_placeholders_set
␣␣hv_riter_p
␣␣hv_riter_set
␣␣is_utf8_string_loclen
␣␣newGIVENOP
␣␣newSVhek
␣␣newSVpvs_share
␣␣newWHENOP
␣␣newWHILEOP
␣␣savepvs
␣␣sortsv_flags
␣␣vverify

=item␣perl␣5.9.2

␣␣SvPVbyte_force
␣␣find_rundefsvoffset
␣␣gv_fetchsv
␣␣op_refcnt_lock
␣␣op_refcnt_unlock
␣␣savesvpv
␣␣vnormal

=item␣perl␣5.9.1

␣␣hv_clear_placeholders
␣␣hv_scalar
␣␣scan_version
␣␣sv_2iv_flags
␣␣sv_2uv_flags

=item␣perl␣5.9.0

␣␣new_version
␣␣save_set_svflags
␣␣vcmp
␣␣vnumify
␣␣vstringify

=item␣perl␣5.8.3

␣␣SvIsCOW
␣␣SvIsCOW_shared_hash

=item␣perl␣5.8.1

␣␣SvVOK
␣␣doing_taint
␣␣find_runcv
␣␣is_utf8_string_loc
␣␣packlist
␣␣save_bool
␣␣savestack_grow_cnt
␣␣seed
␣␣sv_cat_decode
␣␣sv_compile_2op
␣␣sv_setpviv
␣␣sv_setpviv_mg
␣␣unpackstring

=item␣perl␣5.8.0

␣␣hv_iternext_flags
␣␣hv_store_flags
␣␣is_utf8_idcont
␣␣nothreadhook

=item␣perl␣5.7.3

␣␣PerlIO_clearerr
␣␣PerlIO_close
␣␣PerlIO_eof
␣␣PerlIO_error
␣␣PerlIO_fileno
␣␣PerlIO_fill
␣␣PerlIO_flush
␣␣PerlIO_get_base
␣␣PerlIO_get_bufsiz
␣␣PerlIO_get_cnt
␣␣PerlIO_get_ptr
␣␣PerlIO_read
␣␣PerlIO_seek
␣␣PerlIO_set_cnt
␣␣PerlIO_set_ptrcnt
␣␣PerlIO_setlinebuf
␣␣PerlIO_stderr
␣␣PerlIO_stdin
␣␣PerlIO_stdout
␣␣PerlIO_tell
␣␣PerlIO_unread
␣␣PerlIO_write
␣␣SvLOCK
␣␣SvSHARE
␣␣SvUNLOCK
␣␣atfork_lock
␣␣atfork_unlock
␣␣custom_op_desc
␣␣custom_op_name
␣␣deb
␣␣debstack
␣␣debstackptrs
␣␣gv_fetchmeth_autoload
␣␣ibcmp_utf8
␣␣my_fork
␣␣my_socketpair
␣␣pack_cat
␣␣perl_destruct
␣␣pv_uni_display
␣␣save_shared_pvref
␣␣savesharedpv
␣␣sortsv
␣␣sv_copypv
␣␣sv_magicext
␣␣sv_nolocking
␣␣sv_nosharing
␣␣sv_recode_to_utf8
␣␣sv_uni_display
␣␣to_uni_fold
␣␣to_uni_lower
␣␣to_uni_title
␣␣to_uni_upper
␣␣to_utf8_case
␣␣to_utf8_fold
␣␣to_utf8_lower
␣␣to_utf8_title
␣␣to_utf8_upper
␣␣unpack_str
␣␣uvchr_to_utf8_flags
␣␣uvuni_to_utf8_flags
␣␣vdeb

=item␣perl␣5.7.2

␣␣calloc
␣␣getcwd_sv
␣␣init_tm
␣␣malloc
␣␣mfree
␣␣mini_mktime
␣␣my_atof2
␣␣my_strftime
␣␣op_null
␣␣realloc
␣␣sv_catpvn_flags
␣␣sv_catsv_flags
␣␣sv_setsv_flags
␣␣sv_utf8_upgrade_flags
␣␣sv_utf8_upgrade_nomg
␣␣swash_fetch

=item␣perl␣5.7.1

␣␣POPpbytex
␣␣bytes_from_utf8
␣␣despatch_signals
␣␣do_openn
␣␣gv_handler
␣␣is_lvalue_sub
␣␣my_popen_list
␣␣save_mortalizesv
␣␣scan_num
␣␣sv_force_normal_flags
␣␣sv_setref_uv
␣␣sv_unref_flags
␣␣sv_utf8_upgrade
␣␣utf8_length
␣␣utf8_to_uvchr
␣␣utf8_to_uvuni
␣␣utf8n_to_uvuni
␣␣uvuni_to_utf8

=item␣perl␣5.6.1

␣␣SvGAMAGIC
␣␣apply_attrs_string
␣␣bytes_to_utf8
␣␣gv_efullname4
␣␣gv_fullname4
␣␣is_utf8_string
␣␣save_generic_pvref
␣␣utf16_to_utf8
␣␣utf16_to_utf8_reversed
␣␣utf8_to_bytes

=item␣perl␣5.6.0

␣␣PERL_SYS_INIT3
␣␣SvIOK_UV
␣␣SvIOK_notUV
␣␣SvIOK_only_UV
␣␣SvPOK_only_UTF8
␣␣SvPVbyte_nolen
␣␣SvPVbytex
␣␣SvPVbytex_force
␣␣SvPVutf8
␣␣SvPVutf8_force
␣␣SvPVutf8_nolen
␣␣SvPVutf8x
␣␣SvPVutf8x_force
␣␣SvUOK
␣␣SvUTF8
␣␣SvUTF8_off
␣␣SvUTF8_on
␣␣av_delete
␣␣av_exists
␣␣call_atexit
␣␣cast_i32
␣␣cast_iv
␣␣cast_ulong
␣␣cast_uv
␣␣do_gv_dump
␣␣do_gvgv_dump
␣␣do_hv_dump
␣␣do_magic_dump
␣␣do_op_dump
␣␣do_open9
␣␣do_pmop_dump
␣␣do_sv_dump
␣␣dump_all
␣␣dump_eval
␣␣dump_form
␣␣dump_indent
␣␣dump_packsubs
␣␣dump_sub
␣␣dump_vindent
␣␣get_context
␣␣get_ppaddr
␣␣gv_dump
␣␣init_i18nl10n
␣␣init_i18nl14n
␣␣is_uni_alnum
␣␣is_uni_alnum_lc
␣␣is_uni_alnumc
␣␣is_uni_alnumc_lc
␣␣is_uni_alpha
␣␣is_uni_alpha_lc
␣␣is_uni_ascii
␣␣is_uni_ascii_lc
␣␣is_uni_cntrl
␣␣is_uni_cntrl_lc
␣␣is_uni_digit
␣␣is_uni_digit_lc
␣␣is_uni_graph
␣␣is_uni_graph_lc
␣␣is_uni_idfirst
␣␣is_uni_idfirst_lc
␣␣is_uni_lower
␣␣is_uni_lower_lc
␣␣is_uni_print
␣␣is_uni_print_lc
␣␣is_uni_punct
␣␣is_uni_punct_lc
␣␣is_uni_space
␣␣is_uni_space_lc
␣␣is_uni_upper
␣␣is_uni_upper_lc
␣␣is_uni_xdigit
␣␣is_uni_xdigit_lc
␣␣is_utf8_alnum
␣␣is_utf8_alnumc
␣␣is_utf8_alpha
␣␣is_utf8_ascii
␣␣is_utf8_char
␣␣is_utf8_cntrl
␣␣is_utf8_digit
␣␣is_utf8_graph
␣␣is_utf8_idfirst
␣␣is_utf8_lower
␣␣is_utf8_mark
␣␣is_utf8_print
␣␣is_utf8_punct
␣␣is_utf8_space
␣␣is_utf8_upper
␣␣is_utf8_xdigit
␣␣magic_dump
␣␣mess
␣␣my_atof
␣␣my_fflush_all
␣␣newANONATTRSUB
␣␣newATTRSUB
␣␣newXS
␣␣newXSproto
␣␣new_collate
␣␣new_ctype
␣␣new_numeric
␣␣op_dump
␣␣perl_parse
␣␣pmop_dump
␣␣re_intuit_string
␣␣reginitcolors
␣␣require_pv
␣␣safesyscalloc
␣␣safesysfree
␣␣safesysmalloc
␣␣safesysrealloc
␣␣save_I8
␣␣save_alloc
␣␣save_destructor
␣␣save_destructor_x
␣␣save_re_context
␣␣save_vptr
␣␣scan_bin
␣␣set_context
␣␣set_numeric_local
␣␣set_numeric_radix
␣␣set_numeric_standard
␣␣str_to_version
␣␣sv_2pvutf8
␣␣sv_2pvutf8_nolen
␣␣sv_force_normal
␣␣sv_len_utf8
␣␣sv_pos_b2u
␣␣sv_pos_u2b
␣␣sv_pv
␣␣sv_pvbyte
␣␣sv_pvbyten
␣␣sv_pvbyten_force
␣␣sv_pvutf8
␣␣sv_pvutf8n
␣␣sv_pvutf8n_force
␣␣sv_rvweaken
␣␣sv_utf8_decode
␣␣sv_utf8_downgrade
␣␣sv_utf8_encode
␣␣swash_init
␣␣tmps_grow
␣␣to_uni_lower_lc
␣␣to_uni_title_lc
␣␣to_uni_upper_lc
␣␣utf8_distance
␣␣utf8_hop
␣␣vcroak
␣␣vform
␣␣vmess
␣␣vwarn
␣␣vwarner

=item␣perl␣5.005_03

␣␣POPpx
␣␣get_vtbl
␣␣save_generic_svref

=item␣perl␣5.005

␣␣PL_modglobal
␣␣cx_dump
␣␣debop
␣␣debprofdump
␣␣fbm_compile
␣␣fbm_instr
␣␣get_op_descs
␣␣get_op_names
␣␣init_stacks
␣␣mg_length
␣␣mg_size
␣␣newHVhv
␣␣new_stackinfo
␣␣regdump
␣␣regexec_flags
␣␣regnext
␣␣runops_debug
␣␣runops_standard
␣␣save_iv
␣␣screaminstr
␣␣sv_iv
␣␣sv_nv
␣␣sv_peek
␣␣sv_pvn
␣␣sv_pvn_nomg
␣␣sv_true

=item␣perl␣5.004_05

␣␣do_binmode
␣␣save_aelem
␣␣save_helem

=item␣perl␣5.004

␣␣GIMME_V
␣␣G_VOID
␣␣HEf_SVKEY
␣␣HeHASH
␣␣HeKEY
␣␣HeKLEN
␣␣HePV
␣␣HeSVKEY
␣␣HeSVKEY_force
␣␣HeSVKEY_set
␣␣HeVAL
␣␣SvSetMagicSV
␣␣SvSetMagicSV_nosteal
␣␣SvSetSV_nosteal
␣␣SvTAINTED
␣␣SvTAINTED_off
␣␣SvTAINTED_on
␣␣block_gimme
␣␣call_list
␣␣cv_const_sv
␣␣delimcpy
␣␣do_open
␣␣form
␣␣gv_autoload4
␣␣gv_efullname3
␣␣gv_fetchmethod_autoload
␣␣gv_fullname3
␣␣hv_delayfree_ent
␣␣hv_delete_ent
␣␣hv_exists_ent
␣␣hv_fetch_ent
␣␣hv_free_ent
␣␣hv_iterkeysv
␣␣hv_ksplit
␣␣hv_store_ent
␣␣ibcmp_locale
␣␣my_failure_exit
␣␣my_memcmp
␣␣my_pclose
␣␣my_popen
␣␣newSVpvf
␣␣rsignal
␣␣rsignal_state
␣␣save_I16
␣␣save_gp
␣␣share_hek
␣␣start_subparse
␣␣sv_catpvf
␣␣sv_catpvf_mg
␣␣sv_cmp_locale
␣␣sv_derived_from
␣␣sv_gets
␣␣sv_magic_portable
␣␣sv_setpvf
␣␣sv_setpvf_mg
␣␣sv_taint
␣␣sv_tainted
␣␣sv_untaint
␣␣sv_vcatpvf
␣␣sv_vcatpvf_mg
␣␣sv_vcatpvfn
␣␣sv_vsetpvf
␣␣sv_vsetpvf_mg
␣␣sv_vsetpvfn
␣␣unsharepvn
␣␣vnewSVpvf
␣␣warner

=back

=head1␣BUGS

If␣you␣find␣any␣bugs,␣C<Devel::PPPort>␣doesn't␣seem␣to␣build␣on␣your
system␣or␣any␣of␣its␣tests␣fail,␣please␣use␣the␣CPAN␣Request␣Tracker
at␣L<http://rt.cpan.org/>␣to␣create␣a␣ticket␣for␣the␣module.

=head1␣AUTHORS

=over␣2

=item␣*

Version␣1.x␣of␣Devel::PPPort␣was␣written␣by␣Kenneth␣Albanowski.

=item␣*

Version␣2.x␣was␣ported␣to␣the␣Perl␣core␣by␣Paul␣Marquess.

=item␣*

Version␣3.x␣was␣ported␣back␣to␣CPAN␣by␣Marcus␣Holland-Moritz.

=back

=head1␣COPYRIGHT

Version␣3.x,␣Copyright␣(C)␣2004-2009,␣Marcus␣Holland-Moritz.

Version␣2.x,␣Copyright␣(C)␣2001,␣Paul␣Marquess.

Version␣1.x,␣Copyright␣(C)␣1999,␣Kenneth␣Albanowski.

This␣program␣is␣free␣software;␣you␣can␣redistribute␣it␣and/or
modify␣it␣under␣the␣same␣terms␣as␣Perl␣itself.

=head1␣SEE␣ALSO

See␣L<h2xs>,␣L<ppport.h>.

=cut
----------
Range: (551168,557300) (6132)
=head1␣NAME

Devel::DProf␣-␣a␣Perl␣code␣profiler

=head1␣SYNOPSIS

	perl␣-d:DProf␣test.pl

=head1␣DESCRIPTION

The␣Devel::DProf␣package␣is␣a␣Perl␣code␣profiler.␣␣This␣will␣collect
information␣on␣the␣execution␣time␣of␣a␣Perl␣script␣and␣of␣the␣subs␣in␣that
script.␣␣This␣information␣can␣be␣used␣to␣determine␣which␣subroutines␣are
using␣the␣most␣time␣and␣which␣subroutines␣are␣being␣called␣most␣often.␣␣This
information␣can␣also␣be␣used␣to␣create␣an␣execution␣graph␣of␣the␣script,
showing␣subroutine␣relationships.

To␣profile␣a␣Perl␣script␣run␣the␣perl␣interpreter␣with␣the␣B<-d>␣debugging
switch.␣␣The␣profiler␣uses␣the␣debugging␣hooks.␣␣So␣to␣profile␣script
F<test.pl>␣the␣following␣command␣should␣be␣used:

	perl␣-d:DProf␣test.pl

When␣the␣script␣terminates␣(or␣when␣the␣output␣buffer␣is␣filled)␣the
profiler␣will␣dump␣the␣profile␣information␣to␣a␣file␣called
F<tmon.out>.␣␣A␣tool␣like␣I<dprofpp>␣can␣be␣used␣to␣interpret␣the
information␣which␣is␣in␣that␣profile.␣␣The␣following␣command␣will
print␣the␣top␣15␣subroutines␣which␣used␣the␣most␣time:

	dprofpp

To␣print␣an␣execution␣graph␣of␣the␣subroutines␣in␣the␣script␣use␣the
following␣command:

	dprofpp␣-T

Consult␣L<dprofpp>␣for␣other␣options.

=head1␣PROFILE␣FORMAT

The␣old␣profile␣is␣a␣text␣file␣which␣looks␣like␣this:

	#fOrTyTwO
	$hz=100;
	$XS_VERSION='DProf␣19970606';
	#␣All␣values␣are␣given␣in␣HZ
	$rrun_utime=2;␣$rrun_stime=0;␣$rrun_rtime=7
	PART2
	+␣26␣28␣566822884␣DynaLoader::import
	-␣26␣28␣566822884␣DynaLoader::import
	+␣27␣28␣566822885␣main::bar
	-␣27␣28␣566822886␣main::bar
	+␣27␣28␣566822886␣main::baz
	+␣27␣28␣566822887␣main::bar
	-␣27␣28␣566822888␣main::bar
	[....]

The␣first␣line␣is␣the␣magic␣number.␣␣The␣second␣line␣is␣the␣hertz␣value,␣or
clock␣ticks,␣of␣the␣machine␣where␣the␣profile␣was␣collected.␣␣The␣third␣line
is␣the␣name␣and␣version␣identifier␣of␣the␣tool␣which␣created␣the␣profile.
The␣fourth␣line␣is␣a␣comment.␣␣The␣fifth␣line␣contains␣three␣variables
holding␣the␣user␣time,␣system␣time,␣and␣realtime␣of␣the␣process␣while␣it␣was
being␣profiled.␣␣The␣sixth␣line␣indicates␣the␣beginning␣of␣the␣sub
entry/exit␣profile␣section.

The␣columns␣in␣B<PART2>␣are:

	sub␣entry(+)/exit(-)␣mark
	app's␣user␣time␣at␣sub␣entry/exit␣mark,␣in␣ticks
	app's␣system␣time␣at␣sub␣entry/exit␣mark,␣in␣ticks
	app's␣realtime␣at␣sub␣entry/exit␣mark,␣in␣ticks
	fully-qualified␣sub␣name,␣when␣possible

With␣newer␣perls␣another␣format␣is␣used,␣which␣may␣look␣like␣this:

␣␣␣␣␣␣␣␣#fOrTyTwO
␣␣␣␣␣␣␣␣$hz=10000;
␣␣␣␣␣␣␣␣$XS_VERSION='DProf␣19971213';
␣␣␣␣␣␣␣␣#␣All␣values␣are␣given␣in␣HZ
␣␣␣␣␣␣␣␣$over_utime=5917;␣$over_stime=0;␣$over_rtime=5917;
␣␣␣␣␣␣␣␣$over_tests=10000;
␣␣␣␣␣␣␣␣$rrun_utime=1284;␣$rrun_stime=0;␣$rrun_rtime=1284;
␣␣␣␣␣␣␣␣$total_marks=6;

␣␣␣␣␣␣␣␣PART2
␣␣␣␣␣␣␣␣@␣406␣0␣406
␣␣␣␣␣␣␣␣&␣2␣main␣bar
␣␣␣␣␣␣␣␣+␣2
␣␣␣␣␣␣␣␣@␣456␣0␣456
␣␣␣␣␣␣␣␣-␣2
␣␣␣␣␣␣␣␣@␣1␣0␣1
␣␣␣␣␣␣␣␣&␣3␣main␣baz
␣␣␣␣␣␣␣␣+␣3
␣␣␣␣␣␣␣␣@␣141␣0␣141
␣␣␣␣␣␣␣␣+␣2
␣␣␣␣␣␣␣␣@␣141␣0␣141
␣␣␣␣␣␣␣␣-␣2
␣␣␣␣␣␣␣␣@␣1␣0␣1
␣␣␣␣␣␣␣␣&␣4␣main␣foo
␣␣␣␣␣␣␣␣+␣4
␣␣␣␣␣␣␣␣@␣142␣0␣142
␣␣␣␣␣␣␣␣+␣&␣Devel::DProf::write
␣␣␣␣␣␣␣␣@␣5␣0␣5
␣␣␣␣␣␣␣␣-␣&␣Devel::DProf::write

(with␣high␣value␣of␣$ENV{PERL_DPROF_TICKS}).␣␣

New␣C<$over_*>␣values␣show␣the␣measured␣overhead␣of␣making␣$over_tests
calls␣to␣the␣profiler␣These␣values␣are␣used␣by␣the␣profiler␣to
subtract␣the␣overhead␣from␣the␣runtimes.

Lines␣starting␣with␣C<@>␣mark␣the␣amount␣of␣time␣passed␣since␣the
previous␣C<@>␣line.␣␣The␣numbers␣following␣the␣C<@>␣are␣integer␣tick
counts␣representing␣user,␣system,␣and␣real␣time.␣␣Divide␣these␣numbers
by␣the␣$hz␣value␣in␣the␣header␣to␣get␣seconds.

Lines␣starting␣with␣C<&>␣map␣subroutine␣identifiers␣(an␣integer)␣to
subroutine␣packages␣and␣names.␣␣These␣should␣only␣occur␣once␣per
subroutine.

Lines␣starting␣with␣C<+>␣or␣C<->␣mark␣normal␣entering␣and␣exit␣of
subroutines.␣␣The␣number␣following␣is␣a␣reference␣to␣a␣subroutine
identifier.

Lines␣starting␣with␣C<*>␣mark␣where␣subroutines␣are␣entered␣by␣C<goto
&subr>,␣but␣note␣that␣the␣return␣will␣still␣be␣marked␣as␣coming␣from
the␣original␣sub.␣␣The␣sequence␣might␣look␣like␣this:

	+␣5
	*␣6
	-␣5

Lines␣starting␣with␣C</>␣is␣like␣C<->␣but␣mark␣where␣subroutines␣are
exited␣by␣dying.␣␣Example:

	+␣5
	+␣6
	/␣6
	/␣5

Finally␣you␣might␣find␣C<@>␣time␣stamp␣marks␣surrounded␣by␣C<+␣&
Devel::DProf::write>␣and␣C<-␣&␣Devel::DProf::write>␣lines.␣␣These␣3
lines␣are␣outputted␣when␣printing␣of␣the␣mark␣above␣actually␣consumed
measurable␣time.

=head1␣AUTOLOAD

When␣Devel::DProf␣finds␣a␣call␣to␣an␣C<&AUTOLOAD>␣subroutine␣it␣looks␣at␣the
C<$AUTOLOAD>␣variable␣to␣find␣the␣real␣name␣of␣the␣sub␣being␣called.␣␣See
L<perlsub/"Autoloading">.

=head1␣ENVIRONMENT

C<PERL_DPROF_BUFFER>␣sets␣size␣of␣output␣buffer␣in␣words.␣␣Defaults␣to␣2**14.

C<PERL_DPROF_TICKS>␣sets␣number␣of␣ticks␣per␣second␣on␣some␣systems␣where
a␣replacement␣for␣times()␣is␣used.␣␣Defaults␣to␣the␣value␣of␣C<HZ>␣macro.

C<PERL_DPROF_OUT_FILE_NAME>␣sets␣the␣name␣of␣the␣output␣file.␣␣If␣not␣set,
defaults␣to␣tmon.out.

=head1␣BUGS

Builtin␣functions␣cannot␣be␣measured␣by␣Devel::DProf.

With␣a␣newer␣Perl␣DProf␣relies␣on␣the␣fact␣that␣the␣numeric␣slot␣of
$DB::sub␣contains␣an␣address␣of␣a␣subroutine.␣␣Excessive␣manipulation
of␣this␣variable␣may␣overwrite␣this␣slot,␣as␣in

␣␣$DB::sub␣=␣'current_sub';
␣␣...
␣␣$addr␣=␣$DB::sub␣+␣0;

will␣set␣this␣numeric␣slot␣to␣numeric␣value␣of␣the␣string
C<current_sub>,␣i.e.,␣to␣C<0>.␣␣This␣will␣cause␣a␣segfault␣on␣the␣exit
from␣this␣subroutine.␣␣Note␣that␣the␣first␣assignment␣above␣does␣not
change␣the␣numeric␣slot␣(it␣will␣I<mark>␣it␣as␣invalid,␣but␣will␣not
write␣over␣it).

Another␣problem␣is␣that␣if␣a␣subroutine␣exits␣using␣goto(LABEL),
last(LABEL)␣or␣next(LABEL)␣then␣perl␣may␣crash␣or␣Devel::DProf␣will␣die
with␣the␣error:

␣␣␣panic:␣Devel::DProf␣inconsistent␣subroutine␣return

For␣example,␣this␣code␣will␣break␣under␣Devel::DProf:

␣␣␣sub␣foo␣{
␣␣␣␣␣last␣FOO;
␣␣␣}
␣␣␣FOO:␣{
␣␣␣␣␣foo();
␣␣␣}

A␣pattern␣like␣this␣is␣used␣by␣Test::More's␣skip()␣function,␣for
example.␣␣See␣L<perldiag>␣for␣more␣details.

Mail␣bug␣reports␣and␣feature␣requests␣to␣the␣perl5-porters␣mailing␣list␣at
F<E<lt>perl5-porters@perl.orgE<gt>>.

=head1␣SEE␣ALSO

L<perl>,␣L<dprofpp>,␣times(2)

=cut
----------
Range: (558163,565261) (7098)
=head1␣NAME

Socket,␣sockaddr_in,␣sockaddr_un,␣inet_aton,␣inet_ntoa,␣inet_pton,␣inet_ntop␣-␣load␣the␣C␣socket.h␣defines␣and␣structure␣manipulators␣

=head1␣SYNOPSIS

␣␣␣␣use␣Socket;

␣␣␣␣$proto␣=␣getprotobyname('udp');
␣␣␣␣socket(Socket_Handle,␣PF_INET,␣SOCK_DGRAM,␣$proto);
␣␣␣␣$iaddr␣=␣gethostbyname('hishost.com');
␣␣␣␣$port␣=␣getservbyname('time',␣'udp');
␣␣␣␣$sin␣=␣sockaddr_in($port,␣$iaddr);
␣␣␣␣send(Socket_Handle,␣0,␣0,␣$sin);

␣␣␣␣$proto␣=␣getprotobyname('tcp');
␣␣␣␣socket(Socket_Handle,␣PF_INET,␣SOCK_STREAM,␣$proto);
␣␣␣␣$port␣=␣getservbyname('smtp',␣'tcp');
␣␣␣␣$sin␣=␣sockaddr_in($port,inet_aton("127.1"));
␣␣␣␣$sin␣=␣sockaddr_in(7,inet_aton("localhost"));
␣␣␣␣$sin␣=␣sockaddr_in(7,INADDR_LOOPBACK);
␣␣␣␣connect(Socket_Handle,$sin);

␣␣␣␣($port,␣$iaddr)␣=␣sockaddr_in(getpeername(Socket_Handle));
␣␣␣␣$peer_host␣=␣gethostbyaddr($iaddr,␣AF_INET);
␣␣␣␣$peer_addr␣=␣inet_ntoa($iaddr);

␣␣␣␣$proto␣=␣getprotobyname('tcp');
␣␣␣␣socket(Socket_Handle,␣PF_UNIX,␣SOCK_STREAM,␣$proto);
␣␣␣␣unlink('/var/run/usock');
␣␣␣␣$sun␣=␣sockaddr_un('/var/run/usock');
␣␣␣␣connect(Socket_Handle,$sun);

=head1␣DESCRIPTION

This␣module␣is␣just␣a␣translation␣of␣the␣C␣F<socket.h>␣file.
Unlike␣the␣old␣mechanism␣of␣requiring␣a␣translated␣F<socket.ph>
file,␣this␣uses␣the␣B<h2xs>␣program␣(see␣the␣Perl␣source␣distribution)
and␣your␣native␣C␣compiler.␣␣This␣means␣that␣it␣has␣a␣
far␣more␣likely␣chance␣of␣getting␣the␣numbers␣right.␣␣This␣includes
all␣of␣the␣commonly␣used␣pound-defines␣like␣AF_INET,␣SOCK_STREAM,␣etc.

Also,␣some␣common␣socket␣"newline"␣constants␣are␣provided:␣the
constants␣C<CR>,␣C<LF>,␣and␣C<CRLF>,␣as␣well␣as␣C<$CR>,␣C<$LF>,␣and
C<$CRLF>,␣which␣map␣to␣C<\015>,␣C<\012>,␣and␣C<\015\012>.␣␣If␣you␣do
not␣want␣to␣use␣the␣literal␣characters␣in␣your␣programs,␣then␣use
the␣constants␣provided␣here.␣␣They␣are␣not␣exported␣by␣default,␣but␣can
be␣imported␣individually,␣and␣with␣the␣C<:crlf>␣export␣tag:

␣␣␣␣use␣Socket␣qw(:DEFAULT␣:crlf);

In␣addition,␣some␣structure␣manipulation␣functions␣are␣available:

=over␣4

=item␣inet_aton␣HOSTNAME

Takes␣a␣string␣giving␣the␣name␣of␣a␣host,␣and␣translates␣that␣to␣an
opaque␣string␣(if␣programming␣in␣C,␣struct␣in_addr).␣Takes␣arguments
of␣both␣the␣'rtfm.mit.edu'␣type␣and␣'18.181.0.24'.␣If␣the␣host␣name
cannot␣be␣resolved,␣returns␣undef.␣␣For␣multi-homed␣hosts␣(hosts␣with
more␣than␣one␣address),␣the␣first␣address␣found␣is␣returned.

For␣portability␣do␣not␣assume␣that␣the␣result␣of␣inet_aton()␣is␣32
bits␣wide,␣in␣other␣words,␣that␣it␣would␣contain␣only␣the␣IPv4␣address
in␣network␣order.

=item␣inet_ntoa␣IP_ADDRESS

Takes␣a␣string␣(an␣opaque␣string␣as␣returned␣by␣inet_aton(),
or␣a␣v-string␣representing␣the␣four␣octets␣of␣the␣IPv4␣address␣in
network␣order)␣and␣translates␣it␣into␣a␣string␣of␣the␣form␣'d.d.d.d'
where␣the␣'d's␣are␣numbers␣less␣than␣256␣(the␣normal␣human-readable
four␣dotted␣number␣notation␣for␣Internet␣addresses).

=item␣INADDR_ANY

Note:␣does␣not␣return␣a␣number,␣but␣a␣packed␣string.

Returns␣the␣4-byte␣wildcard␣ip␣address␣which␣specifies␣any
of␣the␣hosts␣ip␣addresses.␣␣(A␣particular␣machine␣can␣have
more␣than␣one␣ip␣address,␣each␣address␣corresponding␣to
a␣particular␣network␣interface.␣This␣wildcard␣address
allows␣you␣to␣bind␣to␣all␣of␣them␣simultaneously.)
Normally␣equivalent␣to␣inet_aton('0.0.0.0').

=item␣INADDR_BROADCAST

Note:␣does␣not␣return␣a␣number,␣but␣a␣packed␣string.

Returns␣the␣4-byte␣'this-lan'␣ip␣broadcast␣address.
This␣can␣be␣useful␣for␣some␣protocols␣to␣solicit␣information
from␣all␣servers␣on␣the␣same␣LAN␣cable.
Normally␣equivalent␣to␣inet_aton('255.255.255.255').

=item␣INADDR_LOOPBACK

Note␣-␣does␣not␣return␣a␣number.

Returns␣the␣4-byte␣loopback␣address.␣␣Normally␣equivalent
to␣inet_aton('localhost').

=item␣INADDR_NONE

Note␣-␣does␣not␣return␣a␣number.

Returns␣the␣4-byte␣'invalid'␣ip␣address.␣␣Normally␣equivalent
to␣inet_aton('255.255.255.255').

=item␣sockaddr_family␣SOCKADDR

Takes␣a␣sockaddr␣structure␣(as␣returned␣by␣pack_sockaddr_in(),
pack_sockaddr_un()␣or␣the␣perl␣builtin␣functions␣getsockname()␣and
getpeername())␣and␣returns␣the␣address␣family␣tag.␣␣It␣will␣match␣the
constant␣AF_INET␣for␣a␣sockaddr_in␣and␣AF_UNIX␣for␣a␣sockaddr_un.␣␣It
can␣be␣used␣to␣figure␣out␣what␣unpacker␣to␣use␣for␣a␣sockaddr␣of
unknown␣type.

=item␣sockaddr_in␣PORT,␣ADDRESS

=item␣sockaddr_in␣SOCKADDR_IN

In␣a␣list␣context,␣unpacks␣its␣SOCKADDR_IN␣argument␣and␣returns␣an␣array
consisting␣of␣(PORT,␣ADDRESS).␣␣In␣a␣scalar␣context,␣packs␣its␣(PORT,
ADDRESS)␣arguments␣as␣a␣SOCKADDR_IN␣and␣returns␣it.␣␣If␣this␣is␣confusing,
use␣pack_sockaddr_in()␣and␣unpack_sockaddr_in()␣explicitly.

=item␣pack_sockaddr_in␣PORT,␣IP_ADDRESS

Takes␣two␣arguments,␣a␣port␣number␣and␣an␣opaque␣string,␣IP_ADDRESS
(as␣returned␣by␣inet_aton(),␣or␣a␣v-string).␣␣Returns␣the␣sockaddr_in
structure␣with␣those␣arguments␣packed␣in␣with␣AF_INET␣filled␣in.␣␣For
Internet␣domain␣sockets,␣this␣structure␣is␣normally␣what␣you␣need␣for
the␣arguments␣in␣bind(),␣connect(),␣and␣send(),␣and␣is␣also␣returned
by␣getpeername(),␣getsockname()␣and␣recv().

=item␣unpack_sockaddr_in␣SOCKADDR_IN

Takes␣a␣sockaddr_in␣structure␣(as␣returned␣by␣pack_sockaddr_in())␣and
returns␣an␣array␣of␣two␣elements:␣the␣port␣and␣an␣opaque␣string
representing␣the␣IP␣address␣(you␣can␣use␣inet_ntoa()␣to␣convert␣the
address␣to␣the␣four-dotted␣numeric␣format).␣␣Will␣croak␣if␣the
structure␣does␣not␣have␣AF_INET␣in␣the␣right␣place.

=item␣sockaddr_un␣PATHNAME

=item␣sockaddr_un␣SOCKADDR_UN

In␣a␣list␣context,␣unpacks␣its␣SOCKADDR_UN␣argument␣and␣returns␣an␣array
consisting␣of␣(PATHNAME).␣␣In␣a␣scalar␣context,␣packs␣its␣PATHNAME
arguments␣as␣a␣SOCKADDR_UN␣and␣returns␣it.␣␣If␣this␣is␣confusing,␣use
pack_sockaddr_un()␣and␣unpack_sockaddr_un()␣explicitly.
These␣are␣only␣supported␣if␣your␣system␣has␣E<lt>F<sys/un.h>E<gt>.

=item␣pack_sockaddr_un␣PATH

Takes␣one␣argument,␣a␣pathname.␣Returns␣the␣sockaddr_un␣structure␣with
that␣path␣packed␣in␣with␣AF_UNIX␣filled␣in.␣For␣unix␣domain␣sockets,␣this
structure␣is␣normally␣what␣you␣need␣for␣the␣arguments␣in␣bind(),
connect(),␣and␣send(),␣and␣is␣also␣returned␣by␣getpeername(),
getsockname()␣and␣recv().

=item␣unpack_sockaddr_un␣SOCKADDR_UN

Takes␣a␣sockaddr_un␣structure␣(as␣returned␣by␣pack_sockaddr_un())
and␣returns␣the␣pathname.␣␣Will␣croak␣if␣the␣structure␣does␣not
have␣AF_UNIX␣in␣the␣right␣place.

=item␣inet_pton␣ADDRESS_FAMILY,␣HOSTNAME

Takes␣an␣address␣family,␣either␣AF_INET␣or␣AF_INET6,␣and␣a␣string␣giving
the␣name␣of␣a␣host,␣and␣translates␣that␣to␣an␣opaque␣string
(if␣programming␣in␣C,␣struct␣in_addr␣or␣struct␣in6_addr␣depending␣on␣the␣
address␣family␣passed␣in).␣␣The␣host␣string␣may␣be␣a␣string␣hostname,␣such
as␣'www.perl.org',␣or␣an␣IP␣address.␣␣If␣using␣an␣IP␣address,␣the␣type␣of
IP␣address␣must␣be␣consistant␣with␣the␣address␣family␣passed␣into␣the␣function.

This␣function␣is␣not␣exported␣by␣default.

=item␣inet_ntop␣ADDRESS_FAMILY,␣IP_ADDRESS

Takes␣an␣address␣family,␣either␣AF_INET␣or␣AF_INET6,␣and␣a␣string␣
(an␣opaque␣string␣as␣returned␣by␣inet_aton()␣or␣inet_pton())␣and
translates␣it␣to␣an␣IPv4␣or␣IPv6␣address␣string.

This␣function␣is␣not␣exported␣by␣default.

=back

=cut
----------
Range: (565364,567270) (1906)
qw(
	inet_aton␣inet_ntoa
	sockaddr_family
	pack_sockaddr_in␣unpack_sockaddr_in
	pack_sockaddr_un␣unpack_sockaddr_un
	sockaddr_in␣sockaddr_un
	INADDR_ANY␣INADDR_BROADCAST␣INADDR_LOOPBACK␣INADDR_NONE
	AF_802
	AF_AAL
	AF_APPLETALK
	AF_CCITT
	AF_CHAOS
	AF_CTF
	AF_DATAKIT
	AF_DECnet
	AF_DLI
	AF_ECMA
	AF_GOSIP
	AF_HYLINK
	AF_IMPLINK
	AF_INET
	AF_INET6
	AF_ISO
	AF_KEY
	AF_LAST
	AF_LAT
	AF_LINK
	AF_MAX
	AF_NBS
	AF_NIT
	AF_NS
	AF_OSI
	AF_OSINET
	AF_PUP
	AF_ROUTE
	AF_SNA
	AF_UNIX
	AF_UNSPEC
	AF_USER
	AF_WAN
	AF_X25
	IOV_MAX
	IP_OPTIONS
	IP_HDRINCL
	IP_TOS
	IP_TTL
	IP_RECVOPTS
	IP_RECVRETOPTS
	IP_RETOPTS
	MSG_BCAST
	MSG_BTAG
	MSG_CTLFLAGS
	MSG_CTLIGNORE
	MSG_CTRUNC
	MSG_DONTROUTE
	MSG_DONTWAIT
	MSG_EOF
	MSG_EOR
	MSG_ERRQUEUE
	MSG_ETAG
	MSG_FIN
	MSG_MAXIOVLEN
	MSG_MCAST
	MSG_NOSIGNAL
	MSG_OOB
	MSG_PEEK
	MSG_PROXY
	MSG_RST
	MSG_SYN
	MSG_TRUNC
	MSG_URG
	MSG_WAITALL
	MSG_WIRE
	PF_802
	PF_AAL
	PF_APPLETALK
	PF_CCITT
	PF_CHAOS
	PF_CTF
	PF_DATAKIT
	PF_DECnet
	PF_DLI
	PF_ECMA
	PF_GOSIP
	PF_HYLINK
	PF_IMPLINK
	PF_INET
	PF_INET6
	PF_ISO
	PF_KEY
	PF_LAST
	PF_LAT
	PF_LINK
	PF_MAX
	PF_NBS
	PF_NIT
	PF_NS
	PF_OSI
	PF_OSINET
	PF_PUP
	PF_ROUTE
	PF_SNA
	PF_UNIX
	PF_UNSPEC
	PF_USER
	PF_WAN
	PF_X25
	SCM_CONNECT
	SCM_CREDENTIALS
	SCM_CREDS
	SCM_RIGHTS
	SCM_TIMESTAMP
	SHUT_RD
	SHUT_RDWR
	SHUT_WR
	SOCK_DGRAM
	SOCK_RAW
	SOCK_RDM
	SOCK_SEQPACKET
	SOCK_STREAM
	SOL_SOCKET
	SOMAXCONN
	SO_ACCEPTCONN
	SO_ATTACH_FILTER
	SO_BACKLOG
	SO_BROADCAST
	SO_CHAMELEON
	SO_DEBUG
	SO_DETACH_FILTER
	SO_DGRAM_ERRIND
	SO_DONTLINGER
	SO_DONTROUTE
	SO_ERROR
	SO_FAMILY
	SO_KEEPALIVE
	SO_LINGER
	SO_OOBINLINE
	SO_PASSCRED
	SO_PASSIFNAME
	SO_PEERCRED
	SO_PROTOCOL
	SO_PROTOTYPE
	SO_RCVBUF
	SO_RCVLOWAT
	SO_RCVTIMEO
	SO_REUSEADDR
	SO_REUSEPORT
	SO_SECURITY_AUTHENTICATION
	SO_SECURITY_ENCRYPTION_NETWORK
	SO_SECURITY_ENCRYPTION_TRANSPORT
	SO_SNDBUF
	SO_SNDLOWAT
	SO_SNDTIMEO
	SO_STATE
	SO_TYPE
	SO_USELOOPBACK
	SO_XOPEN
	SO_XSE
	UIO_MAXIOV
);
----------
Range: (573699,575585) (1886)
=head1␣NAME

Fcntl␣-␣load␣the␣C␣Fcntl.h␣defines

=head1␣SYNOPSIS

␣␣␣␣use␣Fcntl;
␣␣␣␣use␣Fcntl␣qw(:DEFAULT␣:flock);

=head1␣DESCRIPTION

This␣module␣is␣just␣a␣translation␣of␣the␣C␣F<fcntl.h>␣file.
Unlike␣the␣old␣mechanism␣of␣requiring␣a␣translated␣F<fcntl.ph>
file,␣this␣uses␣the␣B<h2xs>␣program␣(see␣the␣Perl␣source␣distribution)
and␣your␣native␣C␣compiler.␣␣This␣means␣that␣it␣has␣a␣
far␣more␣likely␣chance␣of␣getting␣the␣numbers␣right.

=head1␣NOTE

Only␣C<#define>␣symbols␣get␣translated;␣you␣must␣still␣correctly
pack␣up␣your␣own␣arguments␣to␣pass␣as␣args␣for␣locking␣functions,␣etc.

=head1␣EXPORTED␣SYMBOLS

By␣default␣your␣system's␣F_*␣and␣O_*␣constants␣(eg,␣F_DUPFD␣and
O_CREAT)␣and␣the␣FD_CLOEXEC␣constant␣are␣exported␣into␣your␣namespace.

You␣can␣request␣that␣the␣flock()␣constants␣(LOCK_SH,␣LOCK_EX,␣LOCK_NB
and␣LOCK_UN)␣be␣provided␣by␣using␣the␣tag␣C<:flock>.␣␣See␣L<Exporter>.

You␣can␣request␣that␣the␣old␣constants␣(FAPPEND,␣FASYNC,␣FCREAT,
FDEFER,␣FEXCL,␣FNDELAY,␣FNONBLOCK,␣FSYNC,␣FTRUNC)␣be␣provided␣for
compatibility␣reasons␣by␣using␣the␣tag␣C<:Fcompat>.␣␣For␣new
applications␣the␣newer␣versions␣of␣these␣constants␣are␣suggested
(O_APPEND,␣O_ASYNC,␣O_CREAT,␣O_DEFER,␣O_EXCL,␣O_NDELAY,␣O_NONBLOCK,
O_SYNC,␣O_TRUNC).

For␣ease␣of␣use␣also␣the␣SEEK_*␣constants␣(for␣seek()␣and␣sysseek(),
e.g.␣SEEK_END)␣and␣the␣S_I*␣constants␣(for␣chmod()␣and␣stat())␣are
available␣for␣import.␣␣They␣can␣be␣imported␣either␣separately␣or␣using
the␣tags␣C<:seek>␣and␣C<:mode>.

Please␣refer␣to␣your␣native␣fcntl(2),␣open(2),␣fseek(3),␣lseek(2)
(equal␣to␣Perl's␣seek()␣and␣sysseek(),␣respectively),␣and␣chmod(2)
documentation␣to␣see␣what␣constants␣are␣implemented␣in␣your␣system.

See␣L<perlopentut>␣to␣learn␣about␣the␣uses␣of␣the␣O_*␣constants
with␣sysopen().

See␣L<perlfunc/seek>␣and␣L<perlfunc/sysseek>␣about␣the␣SEEK_*␣constants.

See␣L<perlfunc/stat>␣about␣the␣S_I*␣constants.

=cut
----------
Range: (587236,590025) (2789)
}


=head1␣NAME

Hash::Util␣-␣A␣selection␣of␣general-utility␣hash␣subroutines

=head1␣SYNOPSIS

␣␣#␣Restricted␣hashes

␣␣use␣Hash::Util␣qw(
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣hash_seed␣all_keys
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣lock_keys␣unlock_keys
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣lock_value␣unlock_value
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣lock_hash␣unlock_hash
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣lock_keys_plus␣hash_locked
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣hidden_keys␣legal_keys
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣);

␣␣%hash␣=␣(foo␣=>␣42,␣bar␣=>␣23);
␣␣#␣Ways␣to␣restrict␣a␣hash
␣␣lock_keys(%hash);
␣␣lock_keys(%hash,␣@keyset);
␣␣lock_keys_plus(%hash,␣@additional_keys);

␣␣#␣Ways␣to␣inspect␣the␣properties␣of␣a␣restricted␣hash
␣␣my␣@legal␣=␣legal_keys(%hash);
␣␣my␣@hidden␣=␣hidden_keys(%hash);
␣␣my␣$ref␣=␣all_keys(%hash,@keys,@hidden);
␣␣my␣$is_locked␣=␣hash_locked(%hash);

␣␣#␣Remove␣restrictions␣on␣the␣hash
␣␣unlock_keys(%hash);

␣␣#␣Lock␣individual␣values␣in␣a␣hash
␣␣lock_value␣␣(%hash,␣'foo');
␣␣unlock_value(%hash,␣'foo');

␣␣#␣Ways␣to␣change␣the␣restrictions␣on␣both␣keys␣and␣values
␣␣lock_hash␣␣(%hash);
␣␣unlock_hash(%hash);

␣␣my␣$hashes_are_randomised␣=␣hash_seed()␣!=␣0;

=head1␣DESCRIPTION

C<Hash::Util>␣and␣C<Hash::Util::FieldHash>␣contain␣special␣functions
for␣manipulating␣hashes␣that␣don't␣really␣warrant␣a␣keyword.

C<Hash::Util>␣contains␣a␣set␣of␣functions␣that␣support
L<restricted␣hashes|/"Restricted␣hashes">.␣These␣are␣described␣in
this␣document.␣␣C<Hash::Util::FieldHash>␣contains␣an␣(unrelated)
set␣of␣functions␣that␣support␣the␣use␣of␣hashes␣in
I<inside-out␣classes>,␣described␣in␣L<Hash::Util::FieldHash>.

By␣default␣C<Hash::Util>␣does␣not␣export␣anything.

=head2␣Restricted␣hashes

5.8.0␣introduces␣the␣ability␣to␣restrict␣a␣hash␣to␣a␣certain␣set␣of
keys.␣␣No␣keys␣outside␣of␣this␣set␣can␣be␣added.␣␣It␣also␣introduces
the␣ability␣to␣lock␣an␣individual␣key␣so␣it␣cannot␣be␣deleted␣and␣the
ability␣to␣ensure␣that␣an␣individual␣value␣cannot␣be␣changed.

This␣is␣intended␣to␣largely␣replace␣the␣deprecated␣pseudo-hashes.

=over␣4

=item␣B<lock_keys>

=item␣B<unlock_keys>

␣␣lock_keys(%hash);
␣␣lock_keys(%hash,␣@keys);

Restricts␣the␣given␣%hash's␣set␣of␣keys␣to␣@keys.␣␣If␣@keys␣is␣not
given␣it␣restricts␣it␣to␣its␣current␣keyset.␣␣No␣more␣keys␣can␣be
added.␣delete()␣and␣exists()␣will␣still␣work,␣but␣will␣not␣alter
the␣set␣of␣allowed␣keys.␣B<Note>:␣the␣current␣implementation␣prevents
the␣hash␣from␣being␣bless()ed␣while␣it␣is␣in␣a␣locked␣state.␣Any␣attempt
to␣do␣so␣will␣raise␣an␣exception.␣Of␣course␣you␣can␣still␣bless()
the␣hash␣before␣you␣call␣lock_keys()␣so␣this␣shouldn't␣be␣a␣problem.

␣␣unlock_keys(%hash);

Removes␣the␣restriction␣on␣the␣%hash's␣keyset.

B<Note>␣that␣if␣any␣of␣the␣values␣of␣the␣hash␣have␣been␣locked␣they␣will␣not␣be␣unlocked
after␣this␣sub␣executes.

Both␣routines␣return␣a␣reference␣to␣the␣hash␣operated␣on.

=cut
----------
Range: (595377,597417) (2040)
@_)␣}

=item␣B<legal_keys>

␣␣my␣@keys␣=␣legal_keys(%hash);

Returns␣the␣list␣of␣the␣keys␣that␣are␣legal␣in␣a␣restricted␣hash.
In␣the␣case␣of␣an␣unrestricted␣hash␣this␣is␣identical␣to␣calling
keys(%hash).

=item␣B<hidden_keys>

␣␣my␣@keys␣=␣hidden_keys(%hash);

Returns␣the␣list␣of␣the␣keys␣that␣are␣legal␣in␣a␣restricted␣hash␣but
do␣not␣have␣a␣value␣associated␣to␣them.␣Thus␣if␣'foo'␣is␣a
"hidden"␣key␣of␣the␣%hash␣it␣will␣return␣false␣for␣both␣C<defined>
and␣C<exists>␣tests.

In␣the␣case␣of␣an␣unrestricted␣hash␣this␣will␣return␣an␣empty␣list.

B<NOTE>␣this␣is␣an␣experimental␣feature␣that␣is␣heavily␣dependent
on␣the␣current␣implementation␣of␣restricted␣hashes.␣Should␣the
implementation␣change,␣this␣routine␣may␣become␣meaningless,␣in␣which
case␣it␣will␣return␣an␣empty␣list.

=item␣B<all_keys>

␣␣all_keys(%hash,@keys,@hidden);

Populates␣the␣arrays␣@keys␣with␣the␣all␣the␣keys␣that␣would␣pass
an␣C<exists>␣tests,␣and␣populates␣@hidden␣with␣the␣remaining␣legal
keys␣that␣have␣not␣been␣utilized.

Returns␣a␣reference␣to␣the␣hash.

In␣the␣case␣of␣an␣unrestricted␣hash␣this␣will␣be␣equivalent␣to

␣␣$ref␣=␣do␣{
␣␣␣␣␣␣@keys␣=␣keys␣%hash;
␣␣␣␣␣␣@hidden␣=␣();
␣␣␣␣␣␣\%hash
␣␣};

B<NOTE>␣this␣is␣an␣experimental␣feature␣that␣is␣heavily␣dependent
on␣the␣current␣implementation␣of␣restricted␣hashes.␣Should␣the
implementation␣change␣this␣routine␣may␣become␣meaningless␣in␣which
case␣it␣will␣behave␣identically␣to␣how␣it␣would␣behave␣on␣an
unrestricted␣hash.

=item␣B<hash_seed>

␣␣␣␣my␣$hash_seed␣=␣hash_seed();

hash_seed()␣returns␣the␣seed␣number␣used␣to␣randomise␣hash␣ordering.
Zero␣means␣the␣"traditional"␣random␣hash␣ordering,␣non-zero␣means␣the
new␣even␣more␣random␣hash␣ordering␣introduced␣in␣Perl␣5.8.1.

B<Note␣that␣the␣hash␣seed␣is␣sensitive␣information>:␣by␣knowing␣it␣one
can␣craft␣a␣denial-of-service␣attack␣against␣Perl␣code,␣even␣remotely,
see␣L<perlsec/"Algorithmic␣Complexity␣Attacks">␣for␣more␣information.
B<Do␣not␣disclose␣the␣hash␣seed>␣to␣people␣who␣don't␣need␣to␣know␣it.
See␣also␣L<perlrun/PERL_HASH_SEED_DEBUG>.

=cut
----------
Range: (680033,684756) (4723)
<<'EOF!HEAD';
/*␣␣␣␣miniperlmain.c
␣*
␣*␣␣␣␣Copyright␣(C)␣1994,␣1995,␣1996,␣1997,␣1999,␣2000,␣2001,␣2002,␣2003,
␣*␣␣␣␣2004,␣2005,␣2006,␣2007,␣by␣Larry␣Wall␣and␣others
␣*
␣*␣␣␣␣You␣may␣distribute␣under␣the␣terms␣of␣either␣the␣GNU␣General␣Public
␣*␣␣␣␣License␣or␣the␣Artistic␣License,␣as␣specified␣in␣the␣README␣file.
␣*
␣*/

/*
␣*␣␣␣␣␣␣The␣Road␣goes␣ever␣on␣and␣on
␣*␣␣␣␣␣␣␣␣␣␣Down␣from␣the␣door␣where␣it␣began.
␣*
␣*␣␣␣␣␣[Bilbo␣on␣p.35␣of␣_The␣Lord␣of␣the␣Rings_,␣I/i:␣"A␣Long-Expected␣Party"]
␣*␣␣␣␣␣[Frodo␣on␣p.73␣of␣_The␣Lord␣of␣the␣Rings_,␣I/iii:␣"Three␣Is␣Company"]
␣*/

/*␣This␣file␣contains␣the␣main()␣function␣for␣the␣perl␣interpreter.
␣*␣Note␣that␣miniperlmain.c␣contains␣main()␣for␣the␣'miniperl'␣binary,
␣*␣while␣perlmain.c␣contains␣main()␣for␣the␣'perl'␣binary.
␣*
␣*␣Miniperl␣is␣like␣perl␣except␣that␣it␣does␣not␣support␣dynamic␣loading,
␣*␣and␣in␣fact␣is␣used␣to␣build␣the␣dynamic␣modules␣needed␣for␣the␣'real'
␣*␣perl␣executable.
␣*/

#ifdef␣OEMVS
#ifdef␣MYMALLOC
/*␣sbrk␣is␣limited␣to␣first␣heap␣segment␣so␣make␣it␣big␣*/
#pragma␣runopts(HEAP(8M,500K,ANYWHERE,KEEP,8K,4K)␣STACK(,,ANY,)␣ALL31(ON))
#else
#pragma␣runopts(HEAP(2M,500K,ANYWHERE,KEEP,8K,4K)␣STACK(,,ANY,)␣ALL31(ON))
#endif
#endif


#include␣"EXTERN.h"
#define␣PERL_IN_MINIPERLMAIN_C
#include␣"perl.h"
#include␣"XSUB.h"

static␣void␣xs_init␣(pTHX);
static␣PerlInterpreter␣*my_perl;

#if␣defined␣(atarist)
/*␣The␣Atari␣operating␣system␣doesn't␣have␣a␣dynamic␣stack.␣␣The
␣␣␣stack␣size␣is␣determined␣from␣this␣value.␣␣*/
long␣_stksize␣=␣64␣*␣1024;
#endif

#if␣defined(PERL_GLOBAL_STRUCT_PRIVATE)
/*␣The␣static␣struct␣perl_vars*␣may␣seem␣counterproductive␣since␣the
␣*␣whole␣idea␣PERL_GLOBAL_STRUCT_PRIVATE␣was␣to␣avoid␣statics,␣but␣note
␣*␣that␣this␣static␣is␣not␣in␣the␣shared␣perl␣library,␣the␣globals␣PL_Vars
␣*␣and␣PL_VarsPtr␣will␣stay␣away.␣*/
static␣struct␣perl_vars*␣my_plvarsp;
struct␣perl_vars*␣Perl_GetVarsPrivate(void)␣{␣return␣my_plvarsp;␣}
#endif

#ifdef␣NO_ENV_ARRAY_IN_MAIN
extern␣char␣**environ;
int
main(int␣argc,␣char␣**argv)
#else
int
main(int␣argc,␣char␣**argv,␣char␣**env)
#endif
{
␣␣␣␣dVAR;
␣␣␣␣int␣exitstatus,␣i;
#ifdef␣PERL_GLOBAL_STRUCT
␣␣␣␣struct␣perl_vars␣*plvarsp␣=␣init_global_struct();
#␣␣ifdef␣PERL_GLOBAL_STRUCT_PRIVATE
␣␣␣␣my_vars␣=␣my_plvarsp␣=␣plvarsp;
#␣␣endif
#endif␣/*␣PERL_GLOBAL_STRUCT␣*/
␣␣␣␣(void)env;
#ifndef␣PERL_USE_SAFE_PUTENV
␣␣␣␣PL_use_safe_putenv␣=␣0;
#endif␣/*␣PERL_USE_SAFE_PUTENV␣*/

␣␣␣␣/*␣if␣user␣wants␣control␣of␣gprof␣profiling␣off␣by␣default␣*/
␣␣␣␣/*␣noop␣unless␣Configure␣is␣given␣-Accflags=-DPERL_GPROF_CONTROL␣*/
␣␣␣␣PERL_GPROF_MONCONTROL(0);

#ifdef␣NO_ENV_ARRAY_IN_MAIN
␣␣␣␣PERL_SYS_INIT3(&argc,&argv,&environ);
#else
␣␣␣␣PERL_SYS_INIT3(&argc,&argv,&env);
#endif

#if␣defined(USE_ITHREADS)
␣␣␣␣/*␣XXX␣Ideally,␣this␣should␣really␣be␣happening␣in␣perl_alloc()␣or
␣␣␣␣␣*␣perl_construct()␣to␣keep␣libperl.a␣transparently␣fork()-safe.
␣␣␣␣␣*␣It␣is␣currently␣done␣here␣only␣because␣Apache/mod_perl␣have
␣␣␣␣␣*␣problems␣due␣to␣lack␣of␣a␣call␣to␣cancel␣pthread_atfork()
␣␣␣␣␣*␣handlers␣when␣shared␣objects␣that␣contain␣the␣handlers␣may
␣␣␣␣␣*␣be␣dlclose()d.␣␣This␣forces␣applications␣that␣embed␣perl␣to
␣␣␣␣␣*␣call␣PTHREAD_ATFORK()␣explicitly,␣but␣if␣and␣only␣if␣it␣hasn't
␣␣␣␣␣*␣been␣called␣at␣least␣once␣before␣in␣the␣current␣process.
␣␣␣␣␣*␣--GSAR␣2001-07-20␣*/
␣␣␣␣PTHREAD_ATFORK(Perl_atfork_lock,
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣Perl_atfork_unlock,
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣Perl_atfork_unlock);
#endif

␣␣␣␣if␣(!PL_do_undump)␣{
	my_perl␣=␣perl_alloc();
	if␣(!my_perl)
	␣␣␣␣exit(1);
	perl_construct(my_perl);
	PL_perl_destruct_level␣=␣0;
␣␣␣␣}
␣␣␣␣PL_exit_flags␣|=␣PERL_EXIT_DESTRUCT_END;
␣␣␣␣exitstatus␣=␣perl_parse(my_perl,␣xs_init,␣argc,␣argv,␣(char␣**)NULL);
␣␣␣␣if␣(!exitstatus)
␣␣␣␣␣␣␣␣perl_run(my_perl);

␣␣␣␣/*␣Unregister␣our␣signal␣handler␣before␣destroying␣my_perl␣*/
␣␣␣␣for␣(i␣=␣0;␣PL_sig_name[i];␣i++)␣{
	if␣(rsignal_state(PL_sig_num[i])␣==␣(Sighandler_t)␣PL_csighandlerp)␣{
	␣␣␣␣rsignal(PL_sig_num[i],␣(Sighandler_t)␣SIG_DFL);
	}
␣␣␣␣}

␣␣␣␣exitstatus␣=␣perl_destruct(my_perl);

␣␣␣␣perl_free(my_perl);

#if␣defined(USE_ENVIRON_ARRAY)␣&&␣defined(PERL_TRACK_MEMPOOL)␣&&␣!defined(NO_ENV_ARRAY_IN_MAIN)
␣␣␣␣/*
␣␣␣␣␣*␣The␣old␣environment␣may␣have␣been␣freed␣by␣perl_free()
␣␣␣␣␣*␣when␣PERL_TRACK_MEMPOOL␣is␣defined,␣but␣without␣having
␣␣␣␣␣*␣been␣restored␣by␣perl_destruct()␣before␣(this␣is␣only
␣␣␣␣␣*␣done␣if␣destruct_level␣>␣0).
␣␣␣␣␣*
␣␣␣␣␣*␣It␣is␣important␣to␣have␣a␣valid␣environment␣for␣atexit()
␣␣␣␣␣*␣routines␣that␣are␣eventually␣called.
␣␣␣␣␣*/
␣␣␣␣environ␣=␣env;
#endif

#ifdef␣PERL_GLOBAL_STRUCT
␣␣␣␣free_global_struct(plvarsp);
#endif␣/*␣PERL_GLOBAL_STRUCT␣*/

␣␣␣␣PERL_SYS_TERM();

␣␣␣␣exit(exitstatus);
␣␣␣␣return␣exitstatus;
}

/*␣Register␣any␣extra␣external␣extensions␣*/

EOF!HEAD
----------
Range: (804004,808875) (4871)
}

=pod

=end␣_private

=item␣B<install>

␣␣␣␣#␣deprecated␣forms
␣␣␣␣install(\%from_to);
␣␣␣␣install(\%from_to,␣$verbose,␣$dry_run,␣$uninstall_shadows,
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣$skip,␣$always_copy,␣\%result);

␣␣␣␣#␣recommended␣form␣as␣of␣1.47
␣␣␣␣install([
␣␣␣␣␣␣␣␣from_to␣=>␣\%from_to,
␣␣␣␣␣␣␣␣verbose␣=>␣1,
␣␣␣␣␣␣␣␣dry_run␣=>␣0,
␣␣␣␣␣␣␣␣uninstall_shadows␣=>␣1,
␣␣␣␣␣␣␣␣skip␣=>␣undef,
␣␣␣␣␣␣␣␣always_copy␣=>␣1,
␣␣␣␣␣␣␣␣result␣=>␣\%install_results,
␣␣␣␣]);


Copies␣each␣directory␣tree␣of␣%from_to␣to␣its␣corresponding␣value
preserving␣timestamps␣and␣permissions.

There␣are␣two␣keys␣with␣a␣special␣meaning␣in␣the␣hash:␣"read"␣and
"write".␣␣These␣contain␣packlist␣files.␣␣After␣the␣copying␣is␣done,
install()␣will␣write␣the␣list␣of␣target␣files␣to␣$from_to{write}.␣If
$from_to{read}␣is␣given␣the␣contents␣of␣this␣file␣will␣be␣merged␣into
the␣written␣file.␣The␣read␣and␣the␣written␣file␣may␣be␣identical,␣but
on␣AFS␣it␣is␣quite␣likely␣that␣people␣are␣installing␣to␣a␣different
directory␣than␣the␣one␣where␣the␣files␣later␣appear.

If␣$verbose␣is␣true,␣will␣print␣out␣each␣file␣removed.␣␣Default␣is
false.␣␣This␣is␣"make␣install␣VERBINST=1".␣$verbose␣values␣going
up␣to␣5␣show␣increasingly␣more␣diagnostics␣output.

If␣$dry_run␣is␣true␣it␣will␣only␣print␣what␣it␣was␣going␣to␣do
without␣actually␣doing␣it.␣␣Default␣is␣false.

If␣$uninstall_shadows␣is␣true␣any␣differing␣versions␣throughout␣@INC
will␣be␣uninstalled.␣␣This␣is␣"make␣install␣UNINST=1"

As␣of␣1.37_02␣install()␣supports␣the␣use␣of␣a␣list␣of␣patterns␣to␣filter␣out
files␣that␣shouldn't␣be␣installed.␣If␣$skip␣is␣omitted␣or␣undefined␣then
install␣will␣try␣to␣read␣the␣list␣from␣INSTALL.SKIP␣in␣the␣CWD.␣This␣file␣is
a␣list␣of␣regular␣expressions␣and␣is␣just␣like␣the␣MANIFEST.SKIP␣file␣used
by␣L<ExtUtils::Manifest>.

A␣default␣site␣INSTALL.SKIP␣may␣be␣provided␣by␣setting␣then␣environment
variable␣EU_INSTALL_SITE_SKIPFILE,␣this␣will␣only␣be␣used␣when␣there␣isn't␣a
distribution␣specific␣INSTALL.SKIP.␣If␣the␣environment␣variable
EU_INSTALL_IGNORE_SKIP␣is␣true␣then␣no␣install␣file␣filtering␣will␣be
performed.

If␣$skip␣is␣undefined␣then␣the␣skip␣file␣will␣be␣autodetected␣and␣used␣if␣it
is␣found.␣If␣$skip␣is␣a␣reference␣to␣an␣array␣then␣it␣is␣assumed␣the␣array
contains␣the␣list␣of␣patterns,␣if␣$skip␣is␣a␣true␣non␣reference␣it␣is
assumed␣to␣be␣the␣filename␣holding␣the␣list␣of␣patterns,␣any␣other␣value␣of
$skip␣is␣taken␣to␣mean␣that␣no␣install␣filtering␣should␣occur.

B<Changes␣As␣of␣Version␣1.47>

As␣of␣version␣1.47␣the␣following␣additions␣were␣made␣to␣the␣install␣interface.
Note␣that␣the␣new␣argument␣style␣and␣use␣of␣the␣%result␣hash␣is␣recommended.

The␣$always_copy␣parameter␣which␣when␣true␣causes␣files␣to␣be␣updated
regardles␣as␣to␣whether␣they␣have␣changed,␣if␣it␣is␣defined␣but␣false␣then
copies␣are␣made␣only␣if␣the␣files␣have␣changed,␣if␣it␣is␣undefined␣then␣the
value␣of␣the␣environment␣variable␣EU_INSTALL_ALWAYS_COPY␣is␣used␣as␣default.

The␣%result␣hash␣will␣be␣populated␣with␣the␣various␣keys/subhashes␣reflecting
the␣install.␣Currently␣these␣keys␣and␣their␣structure␣are:

␣␣␣␣install␣␣␣␣␣␣␣␣␣␣␣␣␣=>␣{␣$target␣␣␣␣=>␣$source␣},
␣␣␣␣install_fail␣␣␣␣␣␣␣␣=>␣{␣$target␣␣␣␣=>␣$source␣},
␣␣␣␣install_unchanged␣␣␣=>␣{␣$target␣␣␣␣=>␣$source␣},

␣␣␣␣install_filtered␣␣␣␣=>␣{␣$source␣␣␣␣=>␣$pattern␣},

␣␣␣␣uninstall␣␣␣␣␣␣␣␣␣␣␣=>␣{␣$uninstalled␣=>␣$source␣},
␣␣␣␣uninstall_fail␣␣␣␣␣␣=>␣{␣$uninstalled␣=>␣$source␣},

where␣C<$source>␣is␣the␣filespec␣of␣the␣file␣being␣installed.␣C<$target>␣is␣where
it␣is␣being␣installed␣to,␣and␣C<$uninstalled>␣is␣any␣shadow␣file␣that␣is␣in␣C<@INC>
or␣C<$ENV{PERL5LIB}>␣or␣other␣standard␣locations,␣and␣C<$pattern>␣is␣the␣pattern␣that
caused␣a␣source␣file␣to␣be␣skipped.␣In␣future␣more␣keys␣will␣be␣added,␣such␣as␣to
show␣created␣directories,␣however␣this␣requires␣changes␣in␣other␣modules␣and␣must
therefore␣wait.

These␣keys␣will␣be␣populated␣before␣any␣exceptions␣are␣thrown␣should␣there␣be␣an
error.

Note␣that␣all␣updates␣of␣the␣%result␣are␣additive,␣the␣hash␣will␣not␣be
cleared␣before␣use,␣thus␣allowing␣status␣results␣of␣many␣installs␣to␣be␣easily
aggregated.

B<NEW␣ARGUMENT␣STYLE>

If␣there␣is␣only␣one␣argument␣and␣it␣is␣a␣reference␣to␣an␣array␣then
the␣array␣is␣assumed␣to␣contain␣a␣list␣of␣key-value␣pairs␣specifying
the␣options.␣In␣this␣case␣the␣option␣"from_to"␣is␣mandatory.␣This␣style
means␣that␣you␣dont␣have␣to␣supply␣a␣cryptic␣list␣of␣arguments␣and␣can
use␣a␣self␣documenting␣argument␣list␣that␣is␣easier␣to␣understand.

This␣is␣now␣the␣recommended␣interface␣to␣install().

B<RETURN>

If␣all␣actions␣were␣successful␣install␣will␣return␣a␣hashref␣of␣the␣results
as␣described␣above␣for␣the␣$result␣parameter.␣If␣any␣action␣is␣a␣failure
then␣install␣will␣die,␣therefore␣it␣is␣recommended␣to␣pass␣in␣the␣$result
parameter␣instead␣of␣using␣the␣return␣value.␣If␣the␣result␣parameter␣is
provided␣then␣the␣returned␣hashref␣will␣be␣the␣passed␣in␣hashref.

=cut
----------
Range: (897464,899319) (1855)
=head1␣NAME

ExtUtils::MM_Any␣-␣Platform-agnostic␣MM␣methods

=head1␣SYNOPSIS

␣␣FOR␣INTERNAL␣USE␣ONLY!

␣␣package␣ExtUtils::MM_SomeOS;

␣␣#␣Temporarily,␣you␣have␣to␣subclass␣both.␣␣Put␣MM_Any␣first.
␣␣require␣ExtUtils::MM_Any;
␣␣require␣ExtUtils::MM_Unix;
␣␣@ISA␣=␣qw(ExtUtils::MM_Any␣ExtUtils::Unix);

=head1␣DESCRIPTION

B<FOR␣INTERNAL␣USE␣ONLY!>

ExtUtils::MM_Any␣is␣a␣superclass␣for␣the␣ExtUtils::MM_*␣set␣of
modules.␣␣It␣contains␣methods␣which␣are␣either␣inherently
cross-platform␣or␣are␣written␣in␣a␣cross-platform␣manner.

Subclass␣off␣of␣ExtUtils::MM_Any␣I<and>␣ExtUtils::MM_Unix.␣␣This␣is␣a
temporary␣solution.

B<THIS␣MAY␣BE␣TEMPORARY!>


=head1␣METHODS

Any␣methods␣marked␣I<Abstract>␣must␣be␣implemented␣by␣subclasses.


=head2␣Cross-platform␣helper␣methods

These␣are␣methods␣which␣help␣writing␣cross-platform␣code.



=head3␣os_flavor␣␣I<Abstract>

␣␣␣␣my␣@os_flavor␣=␣$mm->os_flavor;

@os_flavor␣is␣the␣style␣of␣operating␣system␣this␣is,␣usually
corresponding␣to␣the␣MM_*.pm␣file␣we're␣using.␣␣

The␣first␣element␣of␣@os_flavor␣is␣the␣major␣family␣(ie.␣Unix,
Windows,␣VMS,␣OS/2,␣etc...)␣and␣the␣rest␣are␣sub␣families.

Some␣examples:

␣␣␣␣Cygwin98␣␣␣␣␣␣␣('Unix',␣␣'Cygwin',␣'Cygwin9x')
␣␣␣␣Windows␣␣␣␣␣␣␣␣('Win32')
␣␣␣␣Win98␣␣␣␣␣␣␣␣␣␣('Win32',␣'Win9x')
␣␣␣␣Linux␣␣␣␣␣␣␣␣␣␣('Unix',␣␣'Linux')
␣␣␣␣MacOS␣X␣␣␣␣␣␣␣␣('Unix',␣␣'Darwin',␣'MacOS',␣'MacOS␣X')
␣␣␣␣OS/2␣␣␣␣␣␣␣␣␣␣␣('OS/2')

This␣is␣used␣to␣write␣code␣for␣styles␣of␣operating␣system.␣␣
See␣os_flavor_is()␣for␣use.


=head3␣os_flavor_is

␣␣␣␣my␣$is_this_flavor␣=␣$mm->os_flavor_is($this_flavor);
␣␣␣␣my␣$is_this_flavor␣=␣$mm->os_flavor_is(@one_of_these_flavors);

Checks␣to␣see␣if␣the␣current␣operating␣system␣is␣one␣of␣the␣given␣flavors.

This␣is␣useful␣for␣code␣like:

␣␣␣␣if(␣$mm->os_flavor_is('Unix')␣)␣{
␣␣␣␣␣␣␣␣$out␣=␣`foo␣2>&1`;
␣␣␣␣}
␣␣␣␣else␣{
␣␣␣␣␣␣␣␣$out␣=␣`foo`;
␣␣␣␣}

=cut
----------
Range: (903244,905917) (2673)
$_[1]␣}


=head3␣cd␣␣I<Abstract>

␣␣my␣$subdir_cmd␣=␣$MM->cd($subdir,␣@cmds);

This␣will␣generate␣a␣make␣fragment␣which␣runs␣the␣@cmds␣in␣the␣given
$dir.␣␣The␣rough␣equivalent␣to␣this,␣except␣cross␣platform.

␣␣cd␣$subdir␣&&␣$cmd

Currently␣$dir␣can␣only␣go␣down␣one␣level.␣␣"foo"␣is␣fine.␣␣"foo/bar"␣is
not.␣␣"../foo"␣is␣right␣out.

The␣resulting␣$subdir_cmd␣has␣no␣leading␣tab␣nor␣trailing␣newline.␣␣This
makes␣it␣easier␣to␣embed␣in␣a␣make␣string.␣␣For␣example.

␣␣␣␣␣␣my␣$make␣=␣sprintf␣<<'CODE',␣$subdir_cmd;
␣␣foo␣:
␣␣␣␣␣␣$(ECHO)␣what
␣␣␣␣␣␣%s
␣␣␣␣␣␣$(ECHO)␣mouche
␣␣CODE


=head3␣oneliner␣␣I<Abstract>

␣␣my␣$oneliner␣=␣$MM->oneliner($perl_code);
␣␣my␣$oneliner␣=␣$MM->oneliner($perl_code,␣\@switches);

This␣will␣generate␣a␣perl␣one-liner␣safe␣for␣the␣particular␣platform
you're␣on␣based␣on␣the␣given␣$perl_code␣and␣@switches␣(a␣-e␣is
assumed)␣suitable␣for␣using␣in␣a␣make␣target.␣␣It␣will␣use␣the␣proper
shell␣quoting␣and␣escapes.

$(PERLRUN)␣will␣be␣used␣as␣perl.

Any␣newlines␣in␣$perl_code␣will␣be␣escaped.␣␣Leading␣and␣trailing
newlines␣will␣be␣stripped.␣␣Makes␣this␣idiom␣much␣easier:

␣␣␣␣my␣$code␣=␣$MM->oneliner(<<'CODE',␣[...switches...]);
some␣code␣here
another␣line␣here
CODE

Usage␣might␣be␣something␣like:

␣␣␣␣#␣an␣echo␣emulation
␣␣␣␣$oneliner␣=␣$MM->oneliner('print␣"Foo\n"');
␣␣␣␣$make␣=␣'$oneliner␣>␣somefile';

All␣dollar␣signs␣must␣be␣doubled␣in␣the␣$perl_code␣if␣you␣expect␣them
to␣be␣interpreted␣normally,␣otherwise␣it␣will␣be␣considered␣a␣make
macro.␣␣Also␣remember␣to␣quote␣make␣macros␣else␣it␣might␣be␣used␣as␣a
bareword.␣␣For␣example:

␣␣␣␣#␣Assign␣the␣value␣of␣the␣$(VERSION_FROM)␣make␣macro␣to␣$vf.
␣␣␣␣$oneliner␣=␣$MM->oneliner('$$vf␣=␣"$(VERSION_FROM)"');

Its␣currently␣very␣simple␣and␣may␣be␣expanded␣sometime␣in␣the␣figure
to␣include␣more␣flexible␣code␣and␣switches.


=head3␣quote_literal␣␣I<Abstract>

␣␣␣␣my␣$safe_text␣=␣$MM->quote_literal($text);

This␣will␣quote␣$text␣so␣it␣is␣interpreted␣literally␣in␣the␣shell.

For␣example,␣on␣Unix␣this␣would␣escape␣any␣single-quotes␣in␣$text␣and
put␣single-quotes␣around␣the␣whole␣thing.


=head3␣escape_newlines␣␣I<Abstract>

␣␣␣␣my␣$escaped_text␣=␣$MM->escape_newlines($text);

Shell␣escapes␣newlines␣in␣$text.


=head3␣max_exec_len␣␣I<Abstract>

␣␣␣␣my␣$max_exec_len␣=␣$MM->max_exec_len;

Calculates␣the␣maximum␣command␣size␣the␣OS␣can␣exec.␣␣Effectively,
this␣is␣the␣max␣size␣of␣a␣shell␣command␣line.

=for␣_private
$self->{_MAX_EXEC_LEN}␣is␣set␣by␣this␣method,␣but␣only␣for␣testing␣purposes.


=head3␣make

␣␣␣␣my␣$make␣=␣$MM->make;

Returns␣the␣make␣variant␣we're␣generating␣the␣Makefile␣for.␣␣This␣attempts
to␣do␣some␣normalization␣on␣the␣information␣from␣%Config␣or␣the␣user.

=cut
----------
Range: (991667,993530) (1863)
=head1␣NAME

ExtUtils::Constant␣-␣generate␣XS␣code␣to␣import␣C␣header␣constants

=head1␣SYNOPSIS

␣␣␣␣use␣ExtUtils::Constant␣qw␣(WriteConstants);
␣␣␣␣WriteConstants(
␣␣␣␣␣␣␣␣NAME␣=>␣'Foo',
␣␣␣␣␣␣␣␣NAMES␣=>␣[qw(FOO␣BAR␣BAZ)],
␣␣␣␣);
␣␣␣␣#␣Generates␣wrapper␣code␣to␣make␣the␣values␣of␣the␣constants␣FOO␣BAR␣BAZ
␣␣␣␣#␣␣available␣to␣perl

=head1␣DESCRIPTION

ExtUtils::Constant␣facilitates␣generating␣C␣and␣XS␣wrapper␣code␣to␣allow
perl␣modules␣to␣AUTOLOAD␣constants␣defined␣in␣C␣library␣header␣files.
It␣is␣principally␣used␣by␣the␣C<h2xs>␣utility,␣on␣which␣this␣code␣is␣based.
It␣doesn't␣contain␣the␣routines␣to␣scan␣header␣files␣to␣extract␣these
constants.

=head1␣USAGE

Generally␣one␣only␣needs␣to␣call␣the␣C<WriteConstants>␣function,␣and␣then

␣␣␣␣#include␣"const-c.inc"

in␣the␣C␣section␣of␣C<Foo.xs>

␣␣␣␣INCLUDE:␣const-xs.inc

in␣the␣XS␣section␣of␣C<Foo.xs>.

For␣greater␣flexibility␣use␣C<constant_types()>,␣C<C_constant>␣and
C<XS_constant>,␣with␣which␣C<WriteConstants>␣is␣implemented.

Currently␣this␣module␣understands␣the␣following␣types.␣h2xs␣may␣only␣know
a␣subset.␣The␣sizes␣of␣the␣numeric␣types␣are␣chosen␣by␣the␣C<Configure>
script␣at␣compile␣time.

=over␣4

=item␣IV

signed␣integer,␣at␣least␣32␣bits.

=item␣UV

unsigned␣integer,␣the␣same␣size␣as␣I<IV>

=item␣NV

floating␣point␣type,␣probably␣C<double>,␣possibly␣C<long␣double>

=item␣PV

NUL␣terminated␣string,␣length␣will␣be␣determined␣with␣C<strlen>

=item␣PVN

A␣fixed␣length␣thing,␣given␣as␣a␣[pointer,␣length]␣pair.␣If␣you␣know␣the
length␣of␣a␣string␣at␣compile␣time␣you␣may␣use␣this␣instead␣of␣I<PV>

=item␣SV

A␣B<mortal>␣SV.

=item␣YES

Truth.␣␣(C<PL_sv_yes>)␣␣The␣value␣is␣not␣needed␣(and␣ignored).

=item␣NO

Defined␣Falsehood.␣␣(C<PL_sv_no>)␣␣The␣value␣is␣not␣needed␣(and␣ignored).

=item␣UNDEF

C<undef>.␣␣The␣value␣of␣the␣macro␣is␣not␣needed.

=back

=head1␣FUNCTIONS

=over␣4

=cut
----------
Range: (1002146,1004084) (1938)
}

=item␣WriteConstants␣ATTRIBUTE␣=E<gt>␣VALUE␣[,␣...]

Writes␣a␣file␣of␣C␣code␣and␣a␣file␣of␣XS␣code␣which␣you␣should␣C<#include>
and␣C<INCLUDE>␣in␣the␣C␣and␣XS␣sections␣respectively␣of␣your␣module's␣XS
code.␣␣You␣probably␣want␣to␣do␣this␣in␣your␣C<Makefile.PL>,␣so␣that␣you␣can
easily␣edit␣the␣list␣of␣constants␣without␣touching␣the␣rest␣of␣your␣module.
The␣attributes␣supported␣are

=over␣4

=item␣NAME

Name␣of␣the␣module.␣␣This␣must␣be␣specified

=item␣DEFAULT_TYPE

The␣default␣type␣for␣the␣constants.␣␣If␣not␣specified␣C<IV>␣is␣assumed.

=item␣BREAKOUT_AT

The␣names␣of␣the␣constants␣are␣grouped␣by␣length.␣␣Generate␣child␣subroutines
for␣each␣group␣with␣this␣number␣or␣more␣names␣in.

=item␣NAMES

An␣array␣of␣constants'␣names,␣either␣scalars␣containing␣names,␣or␣hashrefs
as␣detailed␣in␣L<"C_constant">.

=item␣PROXYSUBS

If␣true,␣uses␣proxy␣subs.␣See␣L<ExtUtils::Constant::ProxySubs>.

=item␣C_FH

A␣filehandle␣to␣write␣the␣C␣code␣to.␣␣If␣not␣given,␣then␣I<C_FILE>␣is␣opened
for␣writing.

=item␣C_FILE

The␣name␣of␣the␣file␣to␣write␣containing␣the␣C␣code.␣␣The␣default␣is
C<const-c.inc>.␣␣The␣C<->␣in␣the␣name␣ensures␣that␣the␣file␣can't␣be
mistaken␣for␣anything␣related␣to␣a␣legitimate␣perl␣package␣name,␣and
not␣naming␣the␣file␣C<.c>␣avoids␣having␣to␣override␣Makefile.PL's
C<.xs>␣to␣C<.c>␣rules.

=item␣XS_FH

A␣filehandle␣to␣write␣the␣XS␣code␣to.␣␣If␣not␣given,␣then␣I<XS_FILE>␣is␣opened
for␣writing.

=item␣XS_FILE

The␣name␣of␣the␣file␣to␣write␣containing␣the␣XS␣code.␣␣The␣default␣is
C<const-xs.inc>.

=item␣XS_SUBNAME

The␣perl␣visible␣name␣of␣the␣XS␣subroutine␣generated␣which␣will␣return␣the
constants.␣The␣default␣is␣C<constant>.

=item␣C_SUBNAME

The␣name␣of␣the␣C␣subroutine␣generated␣which␣will␣return␣the␣constants.
The␣default␣is␣I<XS_SUBNAME>.␣␣Child␣subroutines␣have␣C<_>␣and␣the␣name
length␣appended,␣so␣constants␣with␣10␣character␣names␣would␣be␣in
C<constant_10>␣with␣the␣default␣I<XS_SUBNAME>.

=back

=cut
----------
Range: (1033629,1037408) (3779)
}


=back

=head2␣MANIFEST

A␣list␣of␣files␣in␣the␣distribution,␣one␣file␣per␣line.␣␣The␣MANIFEST
always␣uses␣Unix␣filepath␣conventions␣even␣if␣you're␣not␣on␣Unix.␣␣This
means␣F<foo/bar>␣style␣not␣F<foo\bar>.

Anything␣between␣white␣space␣and␣an␣end␣of␣line␣within␣a␣C<MANIFEST>
file␣is␣considered␣to␣be␣a␣comment.␣␣Any␣line␣beginning␣with␣#␣is␣also
a␣comment.␣Beginning␣with␣ExtUtils::Manifest␣1.52,␣a␣filename␣may
contain␣whitespace␣characters␣if␣it␣is␣enclosed␣in␣single␣quotes;␣single
quotes␣or␣backslashes␣in␣that␣filename␣must␣be␣backslash-escaped.

␣␣␣␣#␣this␣a␣comment
␣␣␣␣some/file
␣␣␣␣some/other/file␣␣␣␣␣␣␣␣␣␣␣␣comment␣about␣some/file
␣␣␣␣'some/third␣file'␣␣␣␣␣␣␣␣␣␣comment


=head2␣MANIFEST.SKIP

The␣file␣MANIFEST.SKIP␣may␣contain␣regular␣expressions␣of␣files␣that
should␣be␣ignored␣by␣mkmanifest()␣and␣filecheck().␣The␣regular
expressions␣should␣appear␣one␣on␣each␣line.␣Blank␣lines␣and␣lines
which␣start␣with␣C<#>␣are␣skipped.␣␣Use␣C<\#>␣if␣you␣need␣a␣regular
expression␣to␣start␣with␣a␣C<#>.

For␣example:

␣␣␣␣#␣Version␣control␣files␣and␣dirs.
␣␣␣␣\bRCS\b
␣␣␣␣\bCVS\b
␣␣␣␣,v$
␣␣␣␣\B\.svn\b

␣␣␣␣#␣Makemaker␣generated␣files␣and␣dirs.
␣␣␣␣^MANIFEST\.
␣␣␣␣^Makefile$
␣␣␣␣^blib/
␣␣␣␣^MakeMaker-\d

␣␣␣␣#␣Temp,␣old␣and␣emacs␣backup␣files.
␣␣␣␣~$
␣␣␣␣\.old$
␣␣␣␣^#.*#$
␣␣␣␣^\.#

If␣no␣MANIFEST.SKIP␣file␣is␣found,␣a␣default␣set␣of␣skips␣will␣be
used,␣similar␣to␣the␣example␣above.␣␣If␣you␣want␣nothing␣skipped,
simply␣make␣an␣empty␣MANIFEST.SKIP␣file.

In␣one's␣own␣MANIFEST.SKIP␣file,␣certain␣directives
can␣be␣used␣to␣include␣the␣contents␣of␣other␣MANIFEST.SKIP
files.␣At␣present␣two␣such␣directives␣are␣recognized.

=over␣4

=item␣#!include_default

This␣inserts␣the␣contents␣of␣the␣default␣MANIFEST.SKIP␣file

=item␣#!include␣/Path/to/another/manifest.skip

This␣inserts␣the␣contents␣of␣the␣specified␣external␣file

=back

The␣included␣contents␣will␣be␣inserted␣into␣the␣MANIFEST.SKIP
file␣in␣between␣I<#!start␣included␣/path/to/manifest.skip>
and␣I<#!end␣included␣/path/to/manifest.skip>␣markers.
The␣original␣MANIFEST.SKIP␣is␣saved␣as␣MANIFEST.SKIP.bak.

=head2␣EXPORT_OK

C<&mkmanifest>,␣C<&manicheck>,␣C<&filecheck>,␣C<&fullcheck>,
C<&maniread>,␣and␣C<&manicopy>␣are␣exportable.

=head2␣GLOBAL␣VARIABLES

C<$ExtUtils::Manifest::MANIFEST>␣defaults␣to␣C<MANIFEST>.␣Changing␣it
results␣in␣both␣a␣different␣C<MANIFEST>␣and␣a␣different
C<MANIFEST.SKIP>␣file.␣This␣is␣useful␣if␣you␣want␣to␣maintain
different␣distributions␣for␣different␣audiences␣(say␣a␣user␣version
and␣a␣developer␣version␣including␣RCS).

C<$ExtUtils::Manifest::Quiet>␣defaults␣to␣0.␣If␣set␣to␣a␣true␣value,
all␣functions␣act␣silently.

C<$ExtUtils::Manifest::Debug>␣defaults␣to␣0.␣␣If␣set␣to␣a␣true␣value,
or␣if␣PERL_MM_MANIFEST_DEBUG␣is␣true,␣debugging␣output␣will␣be
produced.

=head1␣DIAGNOSTICS

All␣diagnostic␣output␣is␣sent␣to␣C<STDERR>.

=over␣4

=item␣C<Not␣in␣MANIFEST:>␣I<file>

is␣reported␣if␣a␣file␣is␣found␣which␣is␣not␣in␣C<MANIFEST>.

=item␣C<Skipping>␣I<file>

is␣reported␣if␣a␣file␣is␣skipped␣due␣to␣an␣entry␣in␣C<MANIFEST.SKIP>.

=item␣C<No␣such␣file:>␣I<file>

is␣reported␣if␣a␣file␣mentioned␣in␣a␣C<MANIFEST>␣file␣does␣not
exist.

=item␣C<MANIFEST:>␣I<$!>

is␣reported␣if␣C<MANIFEST>␣could␣not␣be␣opened.

=item␣C<Added␣to␣MANIFEST:>␣I<file>

is␣reported␣by␣mkmanifest()␣if␣$Verbose␣is␣set␣and␣a␣file␣is␣added
to␣MANIFEST.␣$Verbose␣is␣set␣to␣1␣by␣default.

=back

=head1␣ENVIRONMENT

=over␣4

=item␣B<PERL_MM_MANIFEST_DEBUG>

Turns␣on␣debugging

=back

=head1␣SEE␣ALSO

L<ExtUtils::MakeMaker>␣which␣has␣handy␣targets␣for␣most␣of␣the␣functionality.

=head1␣AUTHOR

Andreas␣Koenig␣C<andreas.koenig@anima.de>

Maintained␣by␣Michael␣G␣Schwern␣C<schwern@pobox.com>␣within␣the
ExtUtils-MakeMaker␣package␣and,␣as␣a␣separate␣CPAN␣package,␣by
Randy␣Kobes␣C<r.kobes@uwinnipeg.ca>.

=cut
----------
Range: (1038373,1040780) (2407)
}

=back

1;
package␣ExtUtils::Command;

use␣5.00503;
use␣strict;
use␣Carp;
use␣File::Copy;
use␣File::Compare;
use␣File::Basename;
use␣File::Path␣qw(rmtree);
require␣Exporter;
use␣vars␣qw(@ISA␣@EXPORT␣@EXPORT_OK␣$VERSION);
@ISA␣␣␣␣␣␣␣=␣qw(Exporter);
@EXPORT␣␣␣␣=␣qw(cp␣rm_f␣rm_rf␣mv␣cat␣eqtime␣mkpath␣touch␣test_f␣test_d␣chmod
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣dos2unix);
$VERSION␣=␣'1.16';

my␣$Is_VMS␣␣␣=␣$^O␣eq␣'VMS';
my␣$Is_VMS_mode␣=␣$Is_VMS;
my␣$Is_VMS_noefs␣=␣$Is_VMS;
my␣$Is_Win32␣=␣$^O␣eq␣'MSWin32';

if(␣$Is_VMS␣)␣{
␣␣␣␣my␣$vms_unix_rpt;
␣␣␣␣my␣$vms_efs;
␣␣␣␣my␣$vms_case;

␣␣␣␣if␣(eval␣{␣local␣$SIG{__DIE__};␣require␣VMS::Feature;␣})␣{
␣␣␣␣␣␣␣␣$vms_unix_rpt␣=␣VMS::Feature::current("filename_unix_report");
␣␣␣␣␣␣␣␣$vms_efs␣=␣VMS::Feature::current("efs_charset");
␣␣␣␣␣␣␣␣$vms_case␣=␣VMS::Feature::current("efs_case_preserve");
␣␣␣␣}␣else␣{
␣␣␣␣␣␣␣␣my␣$unix_rpt␣=␣$ENV{'DECC$FILENAME_UNIX_REPORT'}␣||␣'';
␣␣␣␣␣␣␣␣my␣$efs_charset␣=␣$ENV{'DECC$EFS_CHARSET'}␣||␣'';
␣␣␣␣␣␣␣␣my␣$efs_case␣=␣$ENV{'DECC$EFS_CASE_PRESERVE'}␣||␣'';
␣␣␣␣␣␣␣␣$vms_unix_rpt␣=␣$unix_rpt␣=~␣/^[ET1]/i;␣
␣␣␣␣␣␣␣␣$vms_efs␣=␣$efs_charset␣=~␣/^[ET1]/i;
␣␣␣␣␣␣␣␣$vms_case␣=␣$efs_case␣=~␣/^[ET1]/i;
␣␣␣␣}
␣␣␣␣$Is_VMS_mode␣=␣0␣if␣$vms_unix_rpt;
␣␣␣␣$Is_VMS_noefs␣=␣0␣if␣($vms_efs);
}


=head1␣NAME

ExtUtils::Command␣-␣utilities␣to␣replace␣common␣UNIX␣commands␣in␣Makefiles␣etc.

=head1␣SYNOPSIS

␣␣perl␣-MExtUtils::Command␣-e␣cat␣files...␣>␣destination
␣␣perl␣-MExtUtils::Command␣-e␣mv␣source...␣destination
␣␣perl␣-MExtUtils::Command␣-e␣cp␣source...␣destination
␣␣perl␣-MExtUtils::Command␣-e␣touch␣files...
␣␣perl␣-MExtUtils::Command␣-e␣rm_f␣files...
␣␣perl␣-MExtUtils::Command␣-e␣rm_rf␣directories...
␣␣perl␣-MExtUtils::Command␣-e␣mkpath␣directories...
␣␣perl␣-MExtUtils::Command␣-e␣eqtime␣source␣destination
␣␣perl␣-MExtUtils::Command␣-e␣test_f␣file
␣␣perl␣-MExtUtils::Command␣-e␣test_d␣directory
␣␣perl␣-MExtUtils::Command␣-e␣chmod␣mode␣files...
␣␣...

=head1␣DESCRIPTION

The␣module␣is␣used␣to␣replace␣common␣UNIX␣commands.␣␣In␣all␣cases␣the
functions␣work␣from␣@ARGV␣rather␣than␣taking␣arguments.␣␣This␣makes
them␣easier␣to␣deal␣with␣in␣Makefiles.␣␣Call␣them␣like␣this:

␣␣perl␣-MExtUtils::Command␣-e␣some_command␣some␣files␣to␣work␣on

and␣I<NOT>␣like␣this:

␣␣perl␣-MExtUtils::Command␣-e␣'some_command␣qw(some␣files␣to␣work␣on)'

For␣that␣use␣L<Shell::Command>.

Filenames␣with␣*␣and␣?␣will␣be␣glob␣expanded.


=head2␣FUNCTIONS

=over␣4

=cut
----------
Range: (1096944,1098915) (1971)
<<"EXPLODE"␣:␣<<␣"DONT";
	␣␣␣␣SV␣*tripwire␣=␣newSV(0);
	␣␣␣␣
	␣␣␣␣sv_magicext(tripwire,␣0,␣PERL_MAGIC_ext,␣&not_defined_vtbl,␣0,␣0);
	␣␣␣␣SvPV_set(tripwire,␣(char␣*)value_for_notfound->name);
	␣␣␣␣if(value_for_notfound->namelen␣>=␣0)␣{
		SvCUR_set(tripwire,␣value_for_notfound->namelen);
	␣␣␣␣}␣else␣{
		SvCUR_set(tripwire,␣-value_for_notfound->namelen);
		SvUTF8_on(tripwire);
	␣␣␣␣}
	␣␣␣␣SvPOKp_on(tripwire);
	␣␣␣␣SvREADONLY_on(tripwire);
	␣␣␣␣assert(SvLEN(tripwire)␣==␣0);

	␣␣␣␣$add_symbol_subname($athx␣symbol_table,␣value_for_notfound->name,
				value_for_notfound->namelen,␣tripwire);
EXPLODE

	␣␣␣␣/*␣Need␣to␣add␣prototypes,␣else␣parsing␣will␣vary␣by␣platform.␣␣*/
	␣␣␣␣SV␣**sv␣=␣hv_fetch(symbol_table,␣value_for_notfound->name,
			␣␣␣␣␣␣␣value_for_notfound->namelen,␣TRUE);
	␣␣␣␣if␣(!sv)␣{
		Perl_croak($athx
			␣␣␣"Couldn't␣add␣key␣'%s'␣to␣%%$package_sprintf_safe\::",
			␣␣␣value_for_notfound->name);
	␣␣␣␣}
	␣␣␣␣if␣(!SvOK(*sv)␣&&␣SvTYPE(*sv)␣!=␣SVt_PVGV)␣{
		/*␣Nothing␣was␣here␣before,␣so␣mark␣a␣prototype␣of␣""␣␣*/
		sv_setpvn(*sv,␣"",␣0);
	␣␣␣␣}␣else␣if␣(SvPOK(*sv)␣&&␣SvCUR(*sv)␣==␣0)␣{
		/*␣There␣is␣already␣a␣prototype␣of␣""␣-␣do␣nothing␣␣*/
	␣␣␣␣}␣else␣{
		/*␣Someone␣has␣been␣here␣before␣us␣-␣have␣to␣make␣a␣real
		␣␣␣typeglob.␣␣*/
		/*␣It␣turns␣out␣to␣be␣incredibly␣hard␣to␣deal␣with␣all␣the
		␣␣␣corner␣cases␣of␣sub␣foo␣();␣and␣reporting␣errors␣correctly,
		␣␣␣so␣lets␣cheat␣a␣bit.␣␣Start␣with␣a␣constant␣subroutine␣␣*/
		CV␣*cv␣=␣newCONSTSUB(symbol_table,
				␣␣␣␣␣${cast_CONSTSUB}value_for_notfound->name,
				␣␣␣␣␣&PL_sv_yes);
		/*␣and␣then␣turn␣it␣into␣a␣non␣constant␣declaration␣only.␣␣*/
		SvREFCNT_dec(CvXSUBANY(cv).any_ptr);
		CvCONST_off(cv);
		CvXSUB(cv)␣=␣NULL;
		CvXSUBANY(cv).any_ptr␣=␣NULL;
	␣␣␣␣}
#ifndef␣SYMBIAN
	␣␣␣␣if␣(!hv_store(${c_subname}_missing,␣value_for_notfound->name,
			␣␣value_for_notfound->namelen,␣&PL_sv_yes,␣0))
		Perl_croak($athx␣"Couldn't␣add␣key␣'%s'␣to␣missing_hash",
			␣␣␣value_for_notfound->name);
#endif
DONT
----------
Range: (1131830,1135683) (3853)
}

=item␣C_constant␣arg_hashref,␣ITEM...

A␣function␣that␣returns␣a␣B<list>␣of␣C␣subroutine␣definitions␣that␣return
the␣value␣and␣type␣of␣constants␣when␣passed␣the␣name␣by␣the␣XS␣wrapper.
I<ITEM...>␣gives␣a␣list␣of␣constant␣names.␣Each␣can␣either␣be␣a␣string,
which␣is␣taken␣as␣a␣C␣macro␣name,␣or␣a␣reference␣to␣a␣hash␣with␣the␣following
keys

=over␣8

=item␣name

The␣name␣of␣the␣constant,␣as␣seen␣by␣the␣perl␣code.

=item␣type

The␣type␣of␣the␣constant␣(I<IV>,␣I<NV>␣etc)

=item␣value

A␣C␣expression␣for␣the␣value␣of␣the␣constant,␣or␣a␣list␣of␣C␣expressions␣if
the␣type␣is␣aggregate.␣This␣defaults␣to␣the␣I<name>␣if␣not␣given.

=item␣macro

The␣C␣pre-processor␣macro␣to␣use␣in␣the␣C<#ifdef>.␣This␣defaults␣to␣the
I<name>,␣and␣is␣mainly␣used␣if␣I<value>␣is␣an␣C<enum>.␣If␣a␣reference␣an
array␣is␣passed␣then␣the␣first␣element␣is␣used␣in␣place␣of␣the␣C<#ifdef>
line,␣and␣the␣second␣element␣in␣place␣of␣the␣C<#endif>.␣This␣allows
pre-processor␣constructions␣such␣as

␣␣␣␣#if␣defined␣(foo)
␣␣␣␣#if␣!defined␣(bar)
␣␣␣␣...
␣␣␣␣#endif
␣␣␣␣#endif

to␣be␣used␣to␣determine␣if␣a␣constant␣is␣to␣be␣defined.

A␣"macro"␣1␣signals␣that␣the␣constant␣is␣always␣defined,␣so␣the␣C<#if>/C<#endif>
test␣is␣omitted.

=item␣default

Default␣value␣to␣use␣(instead␣of␣C<croak>ing␣with␣"your␣vendor␣has␣not
defined...")␣to␣return␣if␣the␣macro␣isn't␣defined.␣Specify␣a␣reference␣to
an␣array␣with␣type␣followed␣by␣value(s).

=item␣pre

C␣code␣to␣use␣before␣the␣assignment␣of␣the␣value␣of␣the␣constant.␣This␣allows
you␣to␣use␣temporary␣variables␣to␣extract␣a␣value␣from␣part␣of␣a␣C<struct>
and␣return␣this␣as␣I<value>.␣This␣C␣code␣is␣places␣at␣the␣start␣of␣a␣block,
so␣you␣can␣declare␣variables␣in␣it.

=item␣post

C␣code␣to␣place␣between␣the␣assignment␣of␣value␣(to␣a␣temporary)␣and␣the
return␣from␣the␣function.␣This␣allows␣you␣to␣clear␣up␣anything␣in␣I<pre>.
Rarely␣needed.

=item␣def_pre

=item␣def_post

Equivalents␣of␣I<pre>␣and␣I<post>␣for␣the␣default␣value.

=item␣utf8

Generated␣internally.␣Is␣zero␣or␣undefined␣if␣name␣is␣7␣bit␣ASCII,
"no"␣if␣the␣name␣is␣8␣bit␣(and␣so␣should␣only␣match␣if␣SvUTF8()␣is␣false),
"yes"␣if␣the␣name␣is␣utf8␣encoded.

The␣internals␣automatically␣clone␣any␣name␣with␣characters␣128-255␣but␣none
256+␣(ie␣one␣that␣could␣be␣either␣in␣bytes␣or␣utf8)␣into␣a␣second␣entry
which␣is␣utf8␣encoded.

=item␣weight

Optional␣sorting␣weight␣for␣names,␣to␣determine␣the␣order␣of
linear␣testing␣when␣multiple␣names␣fall␣in␣the␣same␣case␣of␣a␣switch␣clause.
Higher␣comes␣earlier,␣undefined␣defaults␣to␣zero.

=back

In␣the␣argument␣hashref,␣I<package>␣is␣the␣name␣of␣the␣package,␣and␣is␣only
used␣in␣comments␣inside␣the␣generated␣C␣code.␣I<subname>␣defaults␣to
C<constant>␣if␣undefined.

I<default_type>␣is␣the␣type␣returned␣by␣C<ITEM>s␣that␣don't␣specify␣their
type.␣It␣defaults␣to␣the␣value␣of␣C<default_type()>.␣I<types>␣should␣be␣given
either␣as␣a␣comma␣separated␣list␣of␣types␣that␣the␣C␣subroutine␣I<subname>
will␣generate␣or␣as␣a␣reference␣to␣a␣hash.␣I<default_type>␣will␣be␣added␣to
the␣list␣if␣not␣present,␣as␣will␣any␣types␣given␣in␣the␣list␣of␣I<ITEM>s.␣The
resultant␣list␣should␣be␣the␣same␣list␣of␣types␣that␣C<XS_constant>␣is
given.␣[Otherwise␣C<XS_constant>␣and␣C<C_constant>␣may␣differ␣in␣the␣number␣of
parameters␣to␣the␣constant␣function.␣I<indent>␣is␣currently␣unused␣and
ignored.␣In␣future␣it␣may␣be␣used␣to␣pass␣in␣information␣used␣to␣change␣the␣C
indentation␣style␣used.]␣␣The␣best␣way␣to␣maintain␣consistency␣is␣to␣pass␣in␣a
hash␣reference␣and␣let␣this␣function␣update␣it.

I<breakout>␣governs␣when␣child␣functions␣of␣I<subname>␣are␣generated.␣␣If␣there
are␣I<breakout>␣or␣more␣I<ITEM>s␣with␣the␣same␣length␣of␣name,␣then␣the␣code
to␣switch␣between␣them␣is␣placed␣into␣a␣function␣named␣I<subname>_I<len>,␣for
example␣C<constant_5>␣for␣names␣5␣characters␣long.␣␣The␣default␣I<breakout>␣is
3.␣␣A␣single␣C<ITEM>␣is␣always␣inlined.

=cut
----------
Range: (1231236,1239236) (8000)
=head1␣NAME␣

Memoize::Expire␣-␣Plug-in␣module␣for␣automatic␣expiration␣of␣memoized␣values

=head1␣SYNOPSIS

␣␣use␣Memoize;
␣␣use␣Memoize::Expire;
␣␣tie␣my␣%cache␣=>␣'Memoize::Expire',
	␣␣	␣␣␣␣␣LIFETIME␣=>␣$lifetime,␣␣␣␣#␣In␣seconds
		␣␣␣␣␣NUM_USES␣=>␣$n_uses;

␣␣memoize␣'function',␣SCALAR_CACHE␣=>␣[HASH␣=>␣\%cache␣];

=head1␣DESCRIPTION

Memoize::Expire␣is␣a␣plug-in␣module␣for␣Memoize.␣␣It␣allows␣the␣cached
values␣for␣memoized␣functions␣to␣expire␣automatically.␣␣This␣manual
assumes␣you␣are␣already␣familiar␣with␣the␣Memoize␣module.␣␣If␣not,␣you
should␣study␣that␣manual␣carefully␣first,␣paying␣particular␣attention
to␣the␣HASH␣feature.

Memoize::Expire␣is␣a␣layer␣of␣software␣that␣you␣can␣insert␣in␣between
Memoize␣itself␣and␣whatever␣underlying␣package␣implements␣the␣cache.
The␣layer␣presents␣a␣hash␣variable␣whose␣values␣expire␣whenever␣they
get␣too␣old,␣have␣been␣used␣too␣often,␣or␣both.␣You␣tell␣C<Memoize>␣to
use␣this␣forgetful␣hash␣as␣its␣cache␣instead␣of␣the␣default,␣which␣is
an␣ordinary␣hash.

To␣specify␣a␣real-time␣timeout,␣supply␣the␣C<LIFETIME>␣option␣with␣a
numeric␣value.␣␣Cached␣data␣will␣expire␣after␣this␣many␣seconds,␣and
will␣be␣looked␣up␣afresh␣when␣it␣expires.␣␣When␣a␣data␣item␣is␣looked
up␣afresh,␣its␣lifetime␣is␣reset.

If␣you␣specify␣C<NUM_USES>␣with␣an␣argument␣of␣I<n>,␣then␣each␣cached
data␣item␣will␣be␣discarded␣and␣looked␣up␣afresh␣after␣the␣I<n>th␣time
you␣access␣it.␣␣When␣a␣data␣item␣is␣looked␣up␣afresh,␣its␣number␣of
uses␣is␣reset.

If␣you␣specify␣both␣arguments,␣data␣will␣be␣discarded␣from␣the␣cache
when␣either␣expiration␣condition␣holds.

Memoize::Expire␣uses␣a␣real␣hash␣internally␣to␣store␣the␣cached␣data.
You␣can␣use␣the␣C<HASH>␣option␣to␣Memoize::Expire␣to␣supply␣a␣tied
hash␣in␣place␣of␣the␣ordinary␣hash␣that␣Memoize::Expire␣will␣normally
use.␣␣You␣can␣use␣this␣feature␣to␣add␣Memoize::Expire␣as␣a␣layer␣in
between␣a␣persistent␣disk␣hash␣and␣Memoize.␣␣If␣you␣do␣this,␣you␣get␣a
persistent␣disk␣cache␣whose␣entries␣expire␣automatically.␣␣For
example:

␣␣#␣␣␣Memoize
␣␣#␣␣␣␣␣␣|
␣␣#␣␣␣Memoize::Expire␣␣enforces␣data␣expiration␣policy
␣␣#␣␣␣␣␣␣|
␣␣#␣␣␣DB_File␣␣implements␣persistence␣of␣data␣in␣a␣disk␣file
␣␣#␣␣␣␣␣␣|
␣␣#␣␣␣Disk␣file

␣␣use␣Memoize;
␣␣use␣Memoize::Expire;
␣␣use␣DB_File;

␣␣#␣Set␣up␣persistence
␣␣tie␣my␣%disk_cache␣=>␣'DB_File',␣$filename,␣O_CREAT|O_RDWR,␣0666];

␣␣#␣Set␣up␣expiration␣policy,␣supplying␣persistent␣hash␣as␣a␣target
␣␣tie␣my␣%cache␣=>␣'Memoize::Expire',␣
	␣␣	␣␣␣␣␣LIFETIME␣=>␣$lifetime,␣␣␣␣#␣In␣seconds
		␣␣␣␣␣NUM_USES␣=>␣$n_uses,
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣HASH␣=>␣\%disk_cache;␣

␣␣#␣Set␣up␣memoization,␣supplying␣expiring␣persistent␣hash␣for␣cache
␣␣memoize␣'function',␣SCALAR_CACHE␣=>␣[␣HASH␣=>␣\%cache␣];

=head1␣INTERFACE

There␣is␣nothing␣special␣about␣Memoize::Expire.␣␣It␣is␣just␣an
example.␣␣If␣you␣don't␣like␣the␣policy␣that␣it␣implements,␣you␣are
free␣to␣write␣your␣own␣expiration␣policy␣module␣that␣implements
whatever␣policy␣you␣desire.␣␣Here␣is␣how␣to␣do␣that.␣␣Let␣us␣suppose
that␣your␣module␣will␣be␣named␣MyExpirePolicy.

Short␣summary:␣You␣need␣to␣create␣a␣package␣that␣defines␣four␣methods:

=over␣4

=item␣
TIEHASH

Construct␣and␣return␣cache␣object.

=item␣
EXISTS

Given␣a␣function␣argument,␣is␣the␣corresponding␣function␣value␣in␣the
cache,␣and␣if␣so,␣is␣it␣fresh␣enough␣to␣use?

=item
FETCH

Given␣a␣function␣argument,␣look␣up␣the␣corresponding␣function␣value␣in
the␣cache␣and␣return␣it.

=item␣
STORE

Given␣a␣function␣argument␣and␣the␣corresponding␣function␣value,␣store
them␣into␣the␣cache.

=item
CLEAR

(Optional.)␣␣Flush␣the␣cache␣completely.

=back

The␣user␣who␣wants␣the␣memoization␣cache␣to␣be␣expired␣according␣to
your␣policy␣will␣say␣so␣by␣writing

␣␣tie␣my␣%cache␣=>␣'MyExpirePolicy',␣args...;
␣␣memoize␣'function',␣SCALAR_CACHE␣=>␣[HASH␣=>␣\%cache];

This␣will␣invoke␣C<<␣MyExpirePolicy->TIEHASH(args)␣>>.
MyExpirePolicy::TIEHASH␣should␣do␣whatever␣is␣appropriate␣to␣set␣up
the␣cache,␣and␣it␣should␣return␣the␣cache␣object␣to␣the␣caller.

For␣example,␣MyExpirePolicy::TIEHASH␣might␣create␣an␣object␣that
contains␣a␣regular␣Perl␣hash␣(which␣it␣will␣to␣store␣the␣cached
values)␣and␣some␣extra␣information␣about␣the␣arguments␣and␣how␣old␣the
data␣is␣and␣things␣like␣that.␣␣Let␣us␣call␣this␣object␣`C'.

When␣Memoize␣needs␣to␣check␣to␣see␣if␣an␣entry␣is␣in␣the␣cache
already,␣it␣will␣invoke␣C<<␣C->EXISTS(key)␣>>.␣␣C<key>␣is␣the␣normalized
function␣argument.␣␣MyExpirePolicy::EXISTS␣should␣return␣0␣if␣the␣key
is␣not␣in␣the␣cache,␣or␣if␣it␣has␣expired,␣and␣1␣if␣an␣unexpired␣value
is␣in␣the␣cache.␣␣It␣should␣I<not>␣return␣C<undef>,␣because␣there␣is␣a
bug␣in␣some␣versions␣of␣Perl␣that␣will␣cause␣a␣spurious␣FETCH␣if␣the
EXISTS␣method␣returns␣C<undef>.

If␣your␣EXISTS␣function␣returns␣true,␣Memoize␣will␣try␣to␣fetch␣the
cached␣value␣by␣invoking␣C<<␣C->FETCH(key)␣>>.␣␣MyExpirePolicy::FETCH␣should
return␣the␣cached␣value.␣␣Otherwise,␣Memoize␣will␣call␣the␣memoized
function␣to␣compute␣the␣appropriate␣value,␣and␣will␣store␣it␣into␣the
cache␣by␣calling␣C<<␣C->STORE(key,␣value)␣>>.

Here␣is␣a␣very␣brief␣example␣of␣a␣policy␣module␣that␣expires␣each
cache␣item␣after␣ten␣seconds.

	package␣Memoize::TenSecondExpire;

	sub␣TIEHASH␣{
	␣␣my␣($package,␣%args)␣=␣@_;
␣␣␣␣␣␣␣␣␣␣my␣$cache␣=␣$args{HASH}␣||␣{};
	␣␣bless␣$cache␣=>␣$package;
	}

	sub␣EXISTS␣{
	␣␣my␣($cache,␣$key)␣=␣@_;
	␣␣if␣(exists␣$cache->{$key}␣&&␣
␣␣␣␣␣␣␣␣␣␣␣␣␣␣$cache->{$key}{EXPIRE_TIME}␣>␣time)␣{
	␣␣␣␣return␣1
	␣␣}␣else␣{
	␣␣␣␣return␣0;␣␣#␣Do␣NOT␣return␣`undef'␣here.
	␣␣}
	}

	sub␣FETCH␣{
	␣␣my␣($cache,␣$key)␣=␣@_;
	␣␣return␣$cache->{$key}{VALUE};
	}

	sub␣STORE␣{
	␣␣my␣($cache,␣$key,␣$newvalue)␣=␣@_;
	␣␣$cache->{$key}{VALUE}␣=␣$newvalue;
	␣␣$cache->{$key}{EXPIRE_TIME}␣=␣time␣+␣10;
	}

To␣use␣this␣expiration␣policy,␣the␣user␣would␣say

	use␣Memoize;
␣␣␣␣␣␣␣␣tie␣my␣%cache10sec␣=>␣'Memoize::TenSecondExpire';
	memoize␣'function',␣SCALAR_CACHE␣=>␣[HASH␣=>␣\%cache10sec];

Memoize␣would␣then␣call␣C<function>␣whenever␣a␣cached␣value␣was
entirely␣absent␣or␣was␣older␣than␣ten␣seconds.

You␣should␣always␣support␣a␣C<HASH>␣argument␣to␣C<TIEHASH>␣that␣ties
the␣underlying␣cache␣so␣that␣the␣user␣can␣specify␣that␣the␣cache␣is
also␣persistent␣or␣that␣it␣has␣some␣other␣interesting␣semantics.␣␣The
example␣above␣demonstrates␣how␣to␣do␣this,␣as␣does␣C<Memoize::Expire>.

=head1␣ALTERNATIVES

Brent␣Powers␣has␣a␣C<Memoize::ExpireLRU>␣module␣that␣was␣designed␣to
work␣with␣Memoize␣and␣provides␣expiration␣of␣least-recently-used␣data.
The␣cache␣is␣held␣at␣a␣fixed␣number␣of␣entries,␣and␣when␣new␣data
comes␣in,␣the␣least-recently␣used␣data␣is␣expired.␣␣See
L<http://search.cpan.org/search?mode=module&query=ExpireLRU>.

Joshua␣Chamas's␣Tie::Cache␣module␣may␣be␣useful␣as␣an␣expiration
manager.␣␣(If␣you␣try␣this,␣let␣me␣know␣how␣it␣works␣out.)

If␣you␣develop␣any␣useful␣expiration␣managers␣that␣you␣think␣should␣be
distributed␣with␣Memoize,␣please␣let␣me␣know.

=head1␣CAVEATS

This␣module␣is␣experimental,␣and␣may␣contain␣bugs.␣␣Please␣report␣bugs
to␣the␣address␣below.

Number-of-uses␣is␣stored␣as␣a␣16-bit␣unsigned␣integer,␣so␣can't␣exceed
65535.

Because␣of␣clock␣granularity,␣expiration␣times␣may␣occur␣up␣to␣one
second␣sooner␣than␣you␣expect.␣␣For␣example,␣suppose␣you␣store␣a␣value
with␣a␣lifetime␣of␣ten␣seconds,␣and␣you␣store␣it␣at␣12:00:00.998␣on␣a
certain␣day.␣␣Memoize␣will␣look␣at␣the␣clock␣and␣see␣12:00:00.␣␣Then
9.01␣seconds␣later,␣at␣12:00:10.008␣you␣try␣to␣read␣it␣back.␣␣Memoize
will␣look␣at␣the␣clock␣and␣see␣12:00:10␣and␣conclude␣that␣the␣value
has␣expired.␣␣This␣will␣probably␣not␣occur␣if␣you␣have
C<Time::HiRes>␣installed.

=head1␣AUTHOR

Mark-Jason␣Dominus␣(mjd-perl-memoize+@plover.com)

Mike␣Cariaso␣provided␣valuable␣insight␣into␣the␣best␣way␣to␣solve␣this
problem.

=head1␣SEE␣ALSO

perl(1)

The␣Memoize␣man␣page.

http://www.plover.com/~mjd/perl/Memoize/␣␣(for␣news␣and␣updates)

I␣maintain␣a␣mailing␣list␣on␣which␣I␣occasionally␣announce␣new
versions␣of␣Memoize.␣␣The␣list␣is␣for␣announcements␣only,␣not
discussion.␣␣To␣join,␣send␣an␣empty␣message␣to
mjd-perl-memoize-request@Plover.com.

=cut
----------
Range: (1407628,1410913) (3285)
=head1␣NAME

Locale::Maketext::Simple␣-␣Simple␣interface␣to␣Locale::Maketext::Lexicon

=head1␣VERSION

This␣document␣describes␣version␣0.18␣of␣Locale::Maketext::Simple,
released␣Septermber␣8,␣2006.

=head1␣SYNOPSIS

Minimal␣setup␣(looks␣for␣F<auto/Foo/*.po>␣and␣F<auto/Foo/*.mo>):

␣␣␣␣package␣Foo;
␣␣␣␣use␣Locale::Maketext::Simple;	#␣exports␣'loc'
␣␣␣␣loc_lang('fr');			#␣set␣language␣to␣French
␣␣␣␣sub␣hello␣{
	print␣loc("Hello,␣[_1]!",␣"World");
␣␣␣␣}

More␣sophisticated␣example:

␣␣␣␣package␣Foo::Bar;
␣␣␣␣use␣Locale::Maketext::Simple␣(
	Class	␣␣␣␣=>␣'Foo',	␣␣␣␣#␣search␣in␣auto/Foo/
	Style	␣␣␣␣=>␣'gettext',␣␣␣#␣%1␣instead␣of␣[_1]
	Export	␣␣␣␣=>␣'maketext',␣␣#␣maketext()␣instead␣of␣loc()
	Subclass␣␣␣␣=>␣'L10N',	␣␣␣␣#␣Foo::L10N␣instead␣of␣Foo::I18N
	Decode	␣␣␣␣=>␣1,	␣␣␣␣#␣decode␣entries␣to␣unicode-strings
	Encoding␣␣␣␣=>␣'locale',␣␣␣␣#␣but␣encode␣lexicons␣in␣current␣locale
				␣␣␣␣#␣(needs␣Locale::Maketext::Lexicon␣0.36)
␣␣␣␣);
␣␣␣␣sub␣japh␣{
	print␣maketext("Just␣another␣%1␣hacker",␣"Perl");
␣␣␣␣}

=head1␣DESCRIPTION

This␣module␣is␣a␣simple␣wrapper␣around␣B<Locale::Maketext::Lexicon>,
designed␣to␣alleviate␣the␣need␣of␣creating␣I<Language␣Classes>␣for
module␣authors.

The␣language␣used␣is␣chosen␣from␣the␣loc_lang␣call.␣If␣a␣lookup␣is␣not
possible,␣the␣i-default␣language␣will␣be␣used.␣If␣the␣lookup␣is␣not␣in␣the
i-default␣language,␣then␣the␣key␣will␣be␣returned.

If␣B<Locale::Maketext::Lexicon>␣is␣not␣present,␣it␣implements␣a
minimal␣localization␣function␣by␣simply␣interpolating␣C<[_1]>␣with
the␣first␣argument,␣C<[_2]>␣with␣the␣second,␣etc.␣␣Interpolated
function␣like␣C<[quant,_1]>␣are␣treated␣as␣C<[_1]>,␣with␣the␣sole
exception␣of␣C<[tense,_1,X]>,␣which␣will␣append␣C<ing>␣to␣C<_1>␣when
X␣is␣C<present>,␣or␣appending␣C<ed>␣to␣<_1>␣otherwise.

=head1␣OPTIONS

All␣options␣are␣passed␣either␣via␣the␣C<use>␣statement,␣or␣via␣an
explicit␣C<import>.

=head2␣Class

By␣default,␣B<Locale::Maketext::Simple>␣draws␣its␣source␣from␣the
calling␣package's␣F<auto/>␣directory;␣you␣can␣override␣this␣behaviour
by␣explicitly␣specifying␣another␣package␣as␣C<Class>.

=head2␣Path

If␣your␣PO␣and␣MO␣files␣are␣under␣a␣path␣elsewhere␣than␣C<auto/>,
you␣may␣specify␣it␣using␣the␣C<Path>␣option.

=head2␣Style

By␣default,␣this␣module␣uses␣the␣C<maketext>␣style␣of␣C<[_1]>␣and
C<[quant,_1]>␣for␣interpolation.␣␣Alternatively,␣you␣can␣specify␣the
C<gettext>␣style,␣which␣uses␣C<%1>␣and␣C<%quant(%1)>␣for␣interpolation.

This␣option␣is␣case-insensitive.

=head2␣Export

By␣default,␣this␣module␣exports␣a␣single␣function,␣C<loc>,␣into␣its
caller's␣namespace.␣␣You␣can␣set␣it␣to␣another␣name,␣or␣set␣it␣to
an␣empty␣string␣to␣disable␣exporting.

=head2␣Subclass

By␣default,␣this␣module␣creates␣an␣C<::I18N>␣subclass␣under␣the
caller's␣package␣(or␣the␣package␣specified␣by␣C<Class>),␣and␣stores
lexicon␣data␣in␣its␣subclasses.␣␣You␣can␣assign␣a␣name␣other␣than
C<I18N>␣via␣this␣option.

=head2␣Decode

If␣set␣to␣a␣true␣value,␣source␣entries␣will␣be␣converted␣into
utf8-strings␣(available␣in␣Perl␣5.6.1␣or␣later).␣␣This␣feature
needs␣the␣B<Encode>␣or␣B<Encode::compat>␣module.

=head2␣Encoding

Specifies␣an␣encoding␣to␣store␣lexicon␣entries,␣instead␣of
utf8-strings.␣␣If␣set␣to␣C<locale>,␣the␣encoding␣from␣the␣current
locale␣setting␣is␣used.␣␣Implies␣a␣true␣value␣for␣C<Decode>.

=cut
----------
Range: (1466319,1469926) (3607)
=head1␣NAME

Dumpvalue␣-␣provides␣screen␣dump␣of␣Perl␣data.

=head1␣SYNOPSIS

␣␣use␣Dumpvalue;
␣␣my␣$dumper␣=␣Dumpvalue->new;
␣␣$dumper->set(globPrint␣=>␣1);
␣␣$dumper->dumpValue(\*::);
␣␣$dumper->dumpvars('main');
␣␣my␣$dump␣=␣$dumper->stringify($some_value);

=head1␣DESCRIPTION

=head2␣Creation

A␣new␣dumper␣is␣created␣by␣a␣call

␣␣$d␣=␣Dumpvalue->new(option1␣=>␣value1,␣option2␣=>␣value2)

Recognized␣options:

=over␣4

=item␣C<arrayDepth>,␣C<hashDepth>

Print␣only␣first␣N␣elements␣of␣arrays␣and␣hashes.␣␣If␣false,␣prints␣all␣the
elements.

=item␣C<compactDump>,␣C<veryCompact>

Change␣style␣of␣array␣and␣hash␣dump.␣␣If␣true,␣short␣array
may␣be␣printed␣on␣one␣line.

=item␣C<globPrint>

Whether␣to␣print␣contents␣of␣globs.

=item␣C<dumpDBFiles>

Dump␣arrays␣holding␣contents␣of␣debugged␣files.

=item␣C<dumpPackages>

Dump␣symbol␣tables␣of␣packages.

=item␣C<dumpReused>

Dump␣contents␣of␣"reused"␣addresses.

=item␣C<tick>,␣C<quoteHighBit>,␣C<printUndef>

Change␣style␣of␣string␣dump.␣␣Default␣value␣of␣C<tick>␣is␣C<auto>,␣one
can␣enable␣either␣double-quotish␣dump,␣or␣single-quotish␣by␣setting␣it
to␣C<">␣or␣C<'>.␣␣By␣default,␣characters␣with␣high␣bit␣set␣are␣printed
I<as␣is>.␣␣If␣C<quoteHighBit>␣is␣set,␣they␣will␣be␣quoted.

=item␣C<usageOnly>

rudimentally␣per-package␣memory␣usage␣dump.␣␣If␣set,
C<dumpvars>␣calculates␣total␣size␣of␣strings␣in␣variables␣in␣the␣package.

=item␣unctrl

Changes␣the␣style␣of␣printout␣of␣strings.␣␣Possible␣values␣are
C<unctrl>␣and␣C<quote>.

=item␣subdump

Whether␣to␣try␣to␣find␣the␣subroutine␣name␣given␣the␣reference.

=item␣bareStringify

Whether␣to␣write␣the␣non-overloaded␣form␣of␣the␣stringify-overloaded␣objects.

=item␣quoteHighBit

Whether␣to␣print␣chars␣with␣high␣bit␣set␣in␣binary␣or␣"as␣is".

=item␣stopDbSignal

Whether␣to␣abort␣printing␣if␣debugger␣signal␣flag␣is␣raised.

=back

Later␣in␣the␣life␣of␣the␣object␣the␣methods␣may␣be␣queries␣with␣get()
method␣and␣set()␣method␣(which␣accept␣multiple␣arguments).

=head2␣Methods

=over␣4

=item␣dumpValue

␣␣$dumper->dumpValue($value);
␣␣$dumper->dumpValue([$value1,␣$value2]);

Prints␣a␣dump␣to␣the␣currently␣selected␣filehandle.

=item␣dumpValues

␣␣$dumper->dumpValues($value1,␣$value2);

Same␣as␣C<<␣$dumper->dumpValue([$value1,␣$value2]);␣>>.

=item␣stringify

␣␣my␣$dump␣=␣$dumper->stringify($value␣[,$noticks]␣);

Returns␣the␣dump␣of␣a␣single␣scalar␣without␣printing.␣If␣the␣second
argument␣is␣true,␣the␣return␣value␣does␣not␣contain␣enclosing␣ticks.
Does␣not␣handle␣data␣structures.

=item␣dumpvars

␣␣$dumper->dumpvars('my_package');
␣␣$dumper->dumpvars('my_package',␣'foo',␣'~bar$',␣'!......');

The␣optional␣arguments␣are␣considered␣as␣literal␣strings␣unless␣they
start␣with␣C<~>␣or␣C<!>,␣in␣which␣case␣they␣are␣interpreted␣as␣regular
expressions␣(possibly␣negated).

The␣second␣example␣prints␣entries␣with␣names␣C<foo>,␣and␣also␣entries
with␣names␣which␣ends␣on␣C<bar>,␣or␣are␣shorter␣than␣5␣chars.

=item␣set_quote

␣␣$d->set_quote('"');

Sets␣C<tick>␣and␣C<unctrl>␣options␣to␣suitable␣values␣for␣printout␣with␣the
given␣quote␣char.␣␣Possible␣values␣are␣C<auto>,␣C<'>␣and␣C<">.

=item␣set_unctrl

␣␣$d->set_unctrl('unctrl');

Sets␣C<unctrl>␣option␣with␣checking␣for␣an␣invalid␣argument.
Possible␣values␣are␣C<unctrl>␣and␣C<quote>.

=item␣compactDump

␣␣$d->compactDump(1);

Sets␣C<compactDump>␣option.␣␣If␣the␣value␣is␣1,␣sets␣to␣a␣reasonable
big␣number.

=item␣veryCompact

␣␣$d->veryCompact(1);

Sets␣C<compactDump>␣and␣C<veryCompact>␣options␣simultaneously.

=item␣set

␣␣$d->set(option1␣=>␣value1,␣option2␣=>␣value2);

=item␣get

␣␣@values␣=␣$d->get('option1',␣'option2');

=back

=cut
----------
Range: (1470280,1472143) (1863)
=head1␣NAME

Unicode::UCD␣-␣Unicode␣character␣database

=head1␣SYNOPSIS

␣␣␣␣use␣Unicode::UCD␣'charinfo';
␣␣␣␣my␣$charinfo␣␣␣=␣charinfo($codepoint);

␣␣␣␣use␣Unicode::UCD␣'casefold';
␣␣␣␣my␣$casefold␣=␣casefold(0xFB00);

␣␣␣␣use␣Unicode::UCD␣'casespec';
␣␣␣␣my␣$casespec␣=␣casespec(0xFB00);

␣␣␣␣use␣Unicode::UCD␣'charblock';
␣␣␣␣my␣$charblock␣␣=␣charblock($codepoint);

␣␣␣␣use␣Unicode::UCD␣'charscript';
␣␣␣␣my␣$charscript␣=␣charscript($codepoint);

␣␣␣␣use␣Unicode::UCD␣'charblocks';
␣␣␣␣my␣$charblocks␣=␣charblocks();

␣␣␣␣use␣Unicode::UCD␣'charscripts';
␣␣␣␣my␣$charscripts␣=␣charscripts();

␣␣␣␣use␣Unicode::UCD␣qw(charscript␣charinrange);
␣␣␣␣my␣$range␣=␣charscript($script);
␣␣␣␣print␣"looks␣like␣$script\n"␣if␣charinrange($range,␣$codepoint);

␣␣␣␣use␣Unicode::UCD␣qw(general_categories␣bidi_types);
␣␣␣␣my␣$categories␣=␣general_categories();
␣␣␣␣my␣$types␣=␣bidi_types();

␣␣␣␣use␣Unicode::UCD␣'compexcl';
␣␣␣␣my␣$compexcl␣=␣compexcl($codepoint);

␣␣␣␣use␣Unicode::UCD␣'namedseq';
␣␣␣␣my␣$namedseq␣=␣namedseq($named_sequence_name);

␣␣␣␣my␣$unicode_version␣=␣Unicode::UCD::UnicodeVersion();

=head1␣DESCRIPTION

The␣Unicode::UCD␣module␣offers␣a␣series␣of␣functions␣that
provide␣a␣simple␣interface␣to␣the␣Unicode
Character␣Database.

=head2␣code␣point␣argument

Some␣of␣the␣functions␣are␣called␣with␣a␣I<code␣point␣argument>,␣which␣is␣either
a␣decimal␣or␣a␣hexadecimal␣scalar␣designating␣a␣Unicode␣code␣point,␣or␣C<U+>
followed␣by␣hexadecimals␣designating␣a␣Unicode␣code␣point.␣␣In␣other␣words,␣if
you␣want␣a␣code␣point␣to␣be␣interpreted␣as␣a␣hexadecimal␣number,␣you␣must
prefix␣it␣with␣either␣C<0x>␣or␣C<U+>,␣because␣a␣string␣like␣e.g.␣C<123>␣will␣be
interpreted␣as␣a␣decimal␣code␣point.␣␣Also␣note␣that␣Unicode␣is␣B<not>␣limited
to␣16␣bits␣(the␣number␣of␣Unicode␣code␣points␣is␣open-ended,␣in␣theory
unlimited):␣you␣may␣have␣more␣than␣4␣hexdigits.
=cut
----------
Range: (1472635,1476663) (4028)
}

=head2␣B<charinfo()>

␣␣␣␣use␣Unicode::UCD␣'charinfo';

␣␣␣␣my␣$charinfo␣=␣charinfo(0x41);

This␣returns␣information␣about␣the␣input␣L</code␣point␣argument>
as␣a␣reference␣to␣a␣hash␣of␣fields␣as␣defined␣by␣the␣Unicode
standard.␣␣If␣the␣L</code␣point␣argument>␣is␣not␣assigned␣in␣the␣standard
(i.e.,␣has␣the␣general␣category␣C<Cn>␣meaning␣C<Unassigned>)
or␣is␣a␣non-character␣(meaning␣it␣is␣guaranteed␣to␣never␣be␣assigned␣in
the␣standard),
B<undef>␣is␣returned.

Fields␣that␣aren't␣applicable␣to␣the␣particular␣code␣point␣argument␣exist␣in␣the
returned␣hash,␣and␣are␣empty.␣

The␣keys␣in␣the␣hash␣with␣the␣meanings␣of␣their␣values␣are:

=over

=item␣B<code>

the␣input␣L</code␣point␣argument>␣expressed␣in␣hexadecimal,␣with␣leading␣zeros
added␣if␣necessary␣to␣make␣it␣contain␣at␣least␣four␣hexdigits

=item␣B<name>

name␣of␣I<code>,␣all␣IN␣UPPER␣CASE.
Some␣control-type␣code␣points␣do␣not␣have␣names.
This␣field␣will␣be␣empty␣for␣C<Surrogate>␣and␣C<Private␣Use>␣code␣points,
and␣for␣the␣others␣without␣a␣name,
it␣will␣contain␣a␣description␣enclosed␣in␣angle␣brackets,␣like
C<E<lt>controlE<gt>>.


=item␣B<category>

The␣short␣name␣of␣the␣general␣category␣of␣I<code>.
This␣will␣match␣one␣of␣the␣keys␣in␣the␣hash␣returned␣by␣L</general_categories()>.

=item␣B<combining>

the␣combining␣class␣number␣for␣I<code>␣used␣in␣the␣Canonical␣Ordering␣Algorithm.
For␣Unicode␣5.1,␣this␣is␣described␣in␣Section␣3.11␣C<Canonical␣Ordering␣Behavior>
available␣at
L<http://www.unicode.org/versions/Unicode5.1.0/>

=item␣B<bidi>

bidirectional␣type␣of␣I<code>.
This␣will␣match␣one␣of␣the␣keys␣in␣the␣hash␣returned␣by␣L</bidi_types()>.

=item␣B<decomposition>

is␣empty␣if␣I<code>␣has␣no␣decomposition;␣or␣is␣one␣or␣more␣codes
(separated␣by␣spaces)␣that␣taken␣in␣order␣represent␣a␣decomposition␣for
I<code>.␣␣Each␣has␣at␣least␣four␣hexdigits.
The␣codes␣may␣be␣preceded␣by␣a␣word␣enclosed␣in␣angle␣brackets␣then␣a␣space,
like␣C<E<lt>compatE<gt>␣>,␣giving␣the␣type␣of␣decomposition

=item␣B<decimal>

if␣I<code>␣is␣a␣decimal␣digit␣this␣is␣its␣integer␣numeric␣value

=item␣B<digit>

if␣I<code>␣represents␣a␣whole␣number,␣this␣is␣its␣integer␣numeric␣value

=item␣B<numeric>

if␣I<code>␣represents␣a␣whole␣or␣rational␣number,␣this␣is␣its␣numeric␣value.
Rational␣values␣are␣expressed␣as␣a␣string␣like␣C<1/4>.

=item␣B<mirrored>

C<Y>␣or␣C<N>␣designating␣if␣I<code>␣is␣mirrored␣in␣bidirectional␣text

=item␣B<unicode10>

name␣of␣I<code>␣in␣the␣Unicode␣1.0␣standard␣if␣one
existed␣for␣this␣code␣point␣and␣is␣different␣from␣the␣current␣name

=item␣B<comment>

ISO␣10646␣comment␣field.
It␣appears␣in␣parentheses␣in␣the␣ISO␣10646␣names␣list,
or␣contains␣an␣asterisk␣to␣indicate␣there␣is
a␣note␣for␣this␣code␣point␣in␣Annex␣P␣of␣that␣standard.

=item␣B<upper>

is␣empty␣if␣there␣is␣no␣single␣code␣point␣uppercase␣mapping␣for␣I<code>;
otherwise␣it␣is␣that␣mapping␣expressed␣as␣at␣least␣four␣hexdigits.
(L</casespec()>␣should␣be␣used␣in␣addition␣to␣B<charinfo()>
for␣case␣mappings␣when␣the␣calling␣program␣can␣cope␣with␣multiple␣code␣point
mappings.)

=item␣B<lower>

is␣empty␣if␣there␣is␣no␣single␣code␣point␣lowercase␣mapping␣for␣I<code>;
otherwise␣it␣is␣that␣mapping␣expressed␣as␣at␣least␣four␣hexdigits.
(L</casespec()>␣should␣be␣used␣in␣addition␣to␣B<charinfo()>
for␣case␣mappings␣when␣the␣calling␣program␣can␣cope␣with␣multiple␣code␣point
mappings.)

=item␣B<title>

is␣empty␣if␣there␣is␣no␣single␣code␣point␣titlecase␣mapping␣for␣I<code>;
otherwise␣it␣is␣that␣mapping␣expressed␣as␣at␣least␣four␣hexdigits.
(L</casespec()>␣should␣be␣used␣in␣addition␣to␣B<charinfo()>
for␣case␣mappings␣when␣the␣calling␣program␣can␣cope␣with␣multiple␣code␣point
mappings.)

=item␣B<BLOCK_>

block␣I<code>␣belongs␣to␣(used␣in␣\p{In...}).
See␣L</Blocks␣versus␣Scripts>.


=item␣B<script>

script␣I<code>␣belongs␣to.
See␣L</Blocks␣versus␣Scripts>.

=back

Note␣that␣you␣cannot␣do␣(de)composition␣and␣casing␣based␣solely␣on␣the
I<decomposition>,␣I<combining>,␣I<lower>,␣I<upper>,␣and␣I<title>␣fields;
you␣will␣need␣also␣the␣L</compexcl()>,␣and␣L</casespec()>␣functions.

=cut
----------
Range: (1490713,1495277) (4564)
}

=head2␣B<casefold()>

␣␣␣␣use␣Unicode::UCD␣'casefold';

␣␣␣␣my␣$casefold␣=␣casefold(0xDF);
␣␣␣␣if␣(defined␣$casefold)␣{
␣␣␣␣␣␣␣␣my␣@full_fold_hex␣=␣split␣/␣/,␣$casefold->{'full'};
␣␣␣␣␣␣␣␣my␣$full_fold_string␣=
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣join␣"",␣map␣{chr(hex($_))}␣@full_fold_hex;
␣␣␣␣␣␣␣␣my␣@turkic_fold_hex␣=
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣split␣/␣/,␣($casefold->{'turkic'}␣ne␣"")
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣?␣$casefold->{'turkic'}
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣:␣$casefold->{'full'};
␣␣␣␣␣␣␣␣my␣$turkic_fold_string␣=
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣join␣"",␣map␣{chr(hex($_))}␣@turkic_fold_hex;
␣␣␣␣}
␣␣␣␣if␣(defined␣$casefold␣&&␣$casefold->{'simple'}␣ne␣"")␣{
␣␣␣␣␣␣␣␣my␣$simple_fold_hex␣=␣$casefold->{'simple'};
␣␣␣␣␣␣␣␣my␣$simple_fold_string␣=␣chr(hex($simple_fold_hex));
␣␣␣␣}

This␣returns␣the␣(almost)␣locale-independent␣case␣folding␣of␣the
character␣specified␣by␣the␣L</code␣point␣argument>.

If␣there␣is␣no␣case␣folding␣for␣that␣code␣point,␣B<undef>␣is␣returned.

If␣there␣is␣a␣case␣folding␣for␣that␣code␣point,␣a␣reference␣to␣a␣hash
with␣the␣following␣fields␣is␣returned:

=over

=item␣B<code>

the␣input␣L</code␣point␣argument>␣expressed␣in␣hexadecimal,␣with␣leading␣zeros
added␣if␣necessary␣to␣make␣it␣contain␣at␣least␣four␣hexdigits

=item␣B<full>

one␣or␣more␣codes␣(separated␣by␣spaces)␣that␣taken␣in␣order␣give␣the
code␣points␣for␣the␣case␣folding␣for␣I<code>.
Each␣has␣at␣least␣four␣hexdigits.

=item␣B<simple>

is␣empty,␣or␣is␣exactly␣one␣code␣with␣at␣least␣four␣hexdigits␣which␣can␣be␣used
as␣an␣alternative␣case␣folding␣when␣the␣calling␣program␣cannot␣cope␣with␣the
fold␣being␣a␣sequence␣of␣multiple␣code␣points.␣␣If␣I<full>␣is␣just␣one␣code
point,␣then␣I<simple>␣equals␣I<full>.␣␣If␣there␣is␣no␣single␣code␣point␣folding
defined␣for␣I<code>,␣then␣I<simple>␣is␣the␣empty␣string.␣␣Otherwise,␣it␣is␣an
inferior,␣but␣still␣better-than-nothing␣alternative␣folding␣to␣I<full>.

=item␣B<mapping>

is␣the␣same␣as␣I<simple>␣if␣I<simple>␣is␣not␣empty,␣and␣it␣is␣the␣same␣as␣I<full>
otherwise.␣␣It␣can␣be␣considered␣to␣be␣the␣simplest␣possible␣folding␣for
I<code>.␣␣It␣is␣defined␣primarily␣for␣backwards␣compatibility.

=item␣B<status>

is␣C<C>␣(for␣C<common>)␣if␣the␣best␣possible␣fold␣is␣a␣single␣code␣point
(I<simple>␣equals␣I<full>␣equals␣I<mapping>).␣␣It␣is␣C<S>␣if␣there␣are␣distinct
folds,␣I<simple>␣and␣I<full>␣(I<mapping>␣equals␣I<simple>).␣␣And␣it␣is␣C<F>␣if
there␣only␣a␣I<full>␣fold␣(I<mapping>␣equals␣I<full>;␣I<simple>␣is␣empty).␣␣Note
that␣this
describes␣the␣contents␣of␣I<mapping>.␣␣It␣is␣defined␣primarily␣for␣backwards
compatibility.

On␣versions␣3.1␣and␣earlier␣of␣Unicode,␣I<status>␣can␣also␣be
C<I>␣which␣is␣the␣same␣as␣C<C>␣but␣is␣a␣special␣case␣for␣dotted␣uppercase␣I␣and
dotless␣lowercase␣i:

=over

=item␣B<*>

If␣you␣use␣this␣C<I>␣mapping,␣the␣result␣is␣case-insensitive,
but␣dotless␣and␣dotted␣I's␣are␣not␣distinguished

=item␣B<*>

If␣you␣exclude␣this␣C<I>␣mapping,␣the␣result␣is␣not␣fully␣case-insensitive,␣but
dotless␣and␣dotted␣I's␣are␣distinguished

=back

=item␣B<turkic>

contains␣any␣special␣folding␣for␣Turkic␣languages.␣␣For␣versions␣of␣Unicode
starting␣with␣3.2,␣this␣field␣is␣empty␣unless␣I<code>␣has␣a␣different␣folding
in␣Turkic␣languages,␣in␣which␣case␣it␣is␣one␣or␣more␣codes␣(separated␣by
spaces)␣that␣taken␣in␣order␣give␣the␣code␣points␣for␣the␣case␣folding␣for
I<code>␣in␣those␣languages.
Each␣code␣has␣at␣least␣four␣hexdigits.
Note␣that␣this␣folding␣does␣not␣maintain␣canonical␣equivalence␣without
additional␣processing.

For␣versions␣of␣Unicode␣3.1␣and␣earlier,␣this␣field␣is␣empty␣unless␣there␣is␣a
special␣folding␣for␣Turkic␣languages,␣in␣which␣case␣I<status>␣is␣C<I>,␣and
I<mapping>,␣I<full>,␣I<simple>,␣and␣I<turkic>␣are␣all␣equal.␣␣

=back

Programs␣that␣want␣complete␣generality␣and␣the␣best␣folding␣results␣should␣use
the␣folding␣contained␣in␣the␣I<full>␣field.␣␣But␣note␣that␣the␣fold␣for␣some
code␣points␣will␣be␣a␣sequence␣of␣multiple␣code␣points.

Programs␣that␣can't␣cope␣with␣the␣fold␣mapping␣being␣multiple␣code␣points␣can
use␣the␣folding␣contained␣in␣the␣I<simple>␣field,␣with␣the␣loss␣of␣some
generality.␣␣In␣Unicode␣5.1,␣about␣7%␣of␣the␣defined␣foldings␣have␣no␣single
code␣point␣folding.

The␣I<mapping>␣and␣I<status>␣fields␣are␣provided␣for␣backwards␣compatibility␣for
existing␣programs.␣␣They␣contain␣the␣same␣values␣as␣in␣previous␣versions␣of
this␣function.

Locale␣is␣not␣completely␣independent.␣␣The␣I<turkic>␣field␣contains␣results␣to
use␣when␣the␣locale␣is␣a␣Turkic␣language.

For␣more␣information␣about␣case␣mappings␣see
L<http://www.unicode.org/unicode/reports/tr21>

=cut
----------
Range: (1497004,1500755) (3751)
}

=head2␣B<casespec()>

␣␣␣␣use␣Unicode::UCD␣'casespec';

␣␣␣␣my␣$casespec␣=␣casespec(0xFB00);

This␣returns␣the␣potentially␣locale-dependent␣case␣mappings␣of␣the␣L</code␣point
argument>.␣␣The␣mappings␣may␣be␣longer␣than␣a␣single␣code␣point␣(which␣the␣basic
Unicode␣case␣mappings␣as␣returned␣by␣L</charinfo()>␣never␣are).

If␣there␣are␣no␣case␣mappings␣for␣the␣L</code␣point␣argument>,␣or␣if␣all␣three
possible␣mappings␣(I<lower>,␣I<title>␣and␣I<upper>)␣result␣in␣single␣code
points␣and␣are␣locale␣independent␣and␣unconditional,␣B<undef>␣is␣returned
(which␣means␣that␣the␣case␣mappings,␣if␣any,␣for␣the␣code␣point␣are␣those
returned␣by␣L</charinfo()>).

Otherwise,␣a␣reference␣to␣a␣hash␣giving␣the␣mappings␣(or␣a␣reference␣to␣a␣hash
of␣such␣hashes,␣explained␣below)␣is␣returned␣with␣the␣following␣keys␣and␣their
meanings:

The␣keys␣in␣the␣bottom␣layer␣hash␣with␣the␣meanings␣of␣their␣values␣are:

=over

=item␣B<code>

the␣input␣L</code␣point␣argument>␣expressed␣in␣hexadecimal,␣with␣leading␣zeros
added␣if␣necessary␣to␣make␣it␣contain␣at␣least␣four␣hexdigits

=item␣B<lower>

one␣or␣more␣codes␣(separated␣by␣spaces)␣that␣taken␣in␣order␣give␣the
code␣points␣for␣the␣lower␣case␣of␣I<code>.
Each␣has␣at␣least␣four␣hexdigits.

=item␣B<title>

one␣or␣more␣codes␣(separated␣by␣spaces)␣that␣taken␣in␣order␣give␣the
code␣points␣for␣the␣title␣case␣of␣I<code>.
Each␣has␣at␣least␣four␣hexdigits.

=item␣B<upper>

one␣or␣more␣codes␣(separated␣by␣spaces)␣that␣taken␣in␣order␣give␣the
code␣points␣for␣the␣upper␣case␣of␣I<code>.
Each␣has␣at␣least␣four␣hexdigits.

=item␣B<condition>

the␣conditions␣for␣the␣mappings␣to␣be␣valid.
If␣B<undef>,␣the␣mappings␣are␣always␣valid.
When␣defined,␣this␣field␣is␣a␣list␣of␣conditions,
all␣of␣which␣must␣be␣true␣for␣the␣mappings␣to␣be␣valid.
The␣list␣consists␣of␣one␣or␣more
I<locales>␣(see␣below)
and/or␣I<contexts>␣(explained␣in␣the␣next␣paragraph),
separated␣by␣spaces.
(Other␣than␣as␣used␣to␣separate␣elements,␣spaces␣are␣to␣be␣ignored.)
Case␣distinctions␣in␣the␣condition␣list␣are␣not␣significant.
Conditions␣preceded␣by␣"NON_"␣represent␣the␣negation␣of␣the␣condition.

A␣I<context>␣is␣one␣of␣those␣defined␣in␣the␣Unicode␣standard.
For␣Unicode␣5.1,␣they␣are␣defined␣in␣Section␣3.13␣C<Default␣Case␣Operations>
available␣at
L<http://www.unicode.org/versions/Unicode5.1.0/>.
These␣are␣for␣context-sensitive␣casing.

=back

The␣hash␣described␣above␣is␣returned␣for␣locale-independent␣casing,␣where
at␣least␣one␣of␣the␣mappings␣has␣length␣longer␣than␣one.␣␣If␣B<undef>␣is␣
returned,␣the␣code␣point␣may␣have␣mappings,␣but␣if␣so,␣all␣are␣length␣one,
and␣are␣returned␣by␣L</charinfo()>.
Note␣that␣when␣this␣function␣does␣return␣a␣value,␣it␣will␣be␣for␣the␣complete
set␣of␣mappings␣for␣a␣code␣point,␣even␣those␣whose␣length␣is␣one.

If␣there␣are␣additional␣casing␣rules␣that␣apply␣only␣in␣certain␣locales,
an␣additional␣key␣for␣each␣will␣be␣defined␣in␣the␣returned␣hash.␣␣Each␣such␣key
will␣be␣its␣locale␣name,␣defined␣as␣a␣2-letter␣ISO␣3166␣country␣code,␣possibly
followed␣by␣a␣"_"␣and␣a␣2-letter␣ISO␣language␣code␣(possibly␣followed␣by␣a␣"_"
and␣a␣variant␣code).␣␣You␣can␣find␣the␣lists␣of␣all␣possible␣locales,␣see
L<Locale::Country>␣and␣L<Locale::Language>.
(In␣Unicode␣5.1,␣the␣only␣locales␣returned␣by␣this␣function
are␣C<lt>,␣C<tr>,␣and␣C<az>.)

Each␣locale␣key␣is␣a␣reference␣to␣a␣hash␣that␣has␣the␣form␣above,␣and␣gives
the␣casing␣rules␣for␣that␣particular␣locale,␣which␣take␣precedence␣over␣the
locale-independent␣ones␣when␣in␣that␣locale.

If␣the␣only␣casing␣for␣a␣code␣point␣is␣locale-dependent,␣then␣the␣returned
hash␣will␣not␣have␣any␣of␣the␣base␣keys,␣like␣C<code>,␣C<upper>,␣etc.,␣but
will␣contain␣only␣locale␣keys.

For␣more␣information␣about␣case␣mappings␣see
L<http://www.unicode.org/unicode/reports/tr21/>

=cut
----------
Range: (1535495,1540842) (5347)
=pod

=head1␣NAME

Params::Check␣-␣A␣generic␣input␣parsing/checking␣mechanism.

=head1␣SYNOPSIS

␣␣␣␣use␣Params::Check␣qw[check␣allow␣last_error];

␣␣␣␣sub␣fill_personal_info␣{
␣␣␣␣␣␣␣␣my␣%hash␣=␣@_;
␣␣␣␣␣␣␣␣my␣$x;

␣␣␣␣␣␣␣␣my␣$tmpl␣=␣{
␣␣␣␣␣␣␣␣␣␣␣␣firstname␣␣␣=>␣{␣required␣␣␣=>␣1,␣defined␣=>␣1␣},
␣␣␣␣␣␣␣␣␣␣␣␣lastname␣␣␣␣=>␣{␣required␣␣␣=>␣1,␣store␣=>␣\$x␣},
␣␣␣␣␣␣␣␣␣␣␣␣gender␣␣␣␣␣␣=>␣{␣required␣␣␣=>␣1,
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣allow␣␣␣␣␣␣=>␣[qr/M/i,␣qr/F/i],
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣},
␣␣␣␣␣␣␣␣␣␣␣␣married␣␣␣␣␣=>␣{␣allow␣␣␣␣␣␣=>␣[0,1]␣},
␣␣␣␣␣␣␣␣␣␣␣␣age␣␣␣␣␣␣␣␣␣=>␣{␣default␣␣␣␣=>␣21,
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣allow␣␣␣␣␣␣=>␣qr/^\d+$/,
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣},

␣␣␣␣␣␣␣␣␣␣␣␣phone␣␣␣␣␣␣␣=>␣{␣allow␣=>␣[␣sub␣{␣return␣1␣if␣/$valid_re/␣},
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣'1-800-PERL'␣]
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣},
␣␣␣␣␣␣␣␣␣␣␣␣id_list␣␣␣␣␣=>␣{␣default␣␣␣␣␣␣␣␣=>␣[],
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣strict_type␣␣␣␣=>␣1
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣},
␣␣␣␣␣␣␣␣␣␣␣␣employer␣␣␣␣=>␣{␣default␣=>␣'NSA',␣no_override␣=>␣1␣},
␣␣␣␣␣␣␣␣};

␣␣␣␣␣␣␣␣###␣check()␣returns␣a␣hashref␣of␣parsed␣args␣on␣success␣###
␣␣␣␣␣␣␣␣my␣$parsed_args␣=␣check(␣$tmpl,␣\%hash,␣$VERBOSE␣)
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣or␣die␣qw[Could␣not␣parse␣arguments!];

␣␣␣␣␣␣␣␣...␣other␣code␣here␣...
␣␣␣␣}

␣␣␣␣my␣$ok␣=␣allow(␣$colour,␣[qw|blue␣green␣yellow|]␣);

␣␣␣␣my␣$error␣=␣Params::Check::last_error();


=head1␣DESCRIPTION

Params::Check␣is␣a␣generic␣input␣parsing/checking␣mechanism.

It␣allows␣you␣to␣validate␣input␣via␣a␣template.␣The␣only␣requirement
is␣that␣the␣arguments␣must␣be␣named.

Params::Check␣can␣do␣the␣following␣things␣for␣you:

=over␣4

=item␣*

Convert␣all␣keys␣to␣lowercase

=item␣*

Check␣if␣all␣required␣arguments␣have␣been␣provided

=item␣*

Set␣arguments␣that␣have␣not␣been␣provided␣to␣the␣default

=item␣*

Weed␣out␣arguments␣that␣are␣not␣supported␣and␣warn␣about␣them␣to␣the
user

=item␣*

Validate␣the␣arguments␣given␣by␣the␣user␣based␣on␣strings,␣regexes,
lists␣or␣even␣subroutines

=item␣*

Enforce␣type␣integrity␣if␣required

=back

Most␣of␣Params::Check's␣power␣comes␣from␣its␣template,␣which␣we'll
discuss␣below:

=head1␣Template

As␣you␣can␣see␣in␣the␣synopsis,␣based␣on␣your␣template,␣the␣arguments
provided␣will␣be␣validated.

The␣template␣can␣take␣a␣different␣set␣of␣rules␣per␣key␣that␣is␣used.

The␣following␣rules␣are␣available:

=over␣4

=item␣default

This␣is␣the␣default␣value␣if␣none␣was␣provided␣by␣the␣user.
This␣is␣also␣the␣type␣C<strict_type>␣will␣look␣at␣when␣checking␣type
integrity␣(see␣below).

=item␣required

A␣boolean␣flag␣that␣indicates␣if␣this␣argument␣was␣a␣required
argument.␣If␣marked␣as␣required␣and␣not␣provided,␣check()␣will␣fail.

=item␣strict_type

This␣does␣a␣C<ref()>␣check␣on␣the␣argument␣provided.␣The␣C<ref>␣of␣the
argument␣must␣be␣the␣same␣as␣the␣C<ref>␣of␣the␣default␣value␣for␣this
check␣to␣pass.

This␣is␣very␣useful␣if␣you␣insist␣on␣taking␣an␣array␣reference␣as
argument␣for␣example.

=item␣defined

If␣this␣template␣key␣is␣true,␣enforces␣that␣if␣this␣key␣is␣provided␣by
user␣input,␣its␣value␣is␣C<defined>.␣This␣just␣means␣that␣the␣user␣is
not␣allowed␣to␣pass␣C<undef>␣as␣a␣value␣for␣this␣key␣and␣is␣equivalent
to:
␣␣␣␣allow␣=>␣sub␣{␣defined␣$_[0]␣&&␣OTHER␣TESTS␣}

=item␣no_override

This␣allows␣you␣to␣specify␣C<constants>␣in␣your␣template.␣ie,␣they
keys␣that␣are␣not␣allowed␣to␣be␣altered␣by␣the␣user.␣It␣pretty␣much
allows␣you␣to␣keep␣all␣your␣C<configurable>␣data␣in␣one␣place;␣the
C<Params::Check>␣template.

=item␣store

This␣allows␣you␣to␣pass␣a␣reference␣to␣a␣scalar,␣in␣which␣the␣data
will␣be␣stored:

␣␣␣␣my␣$x;
␣␣␣␣my␣$args␣=␣check(foo␣=>␣{␣default␣=>␣1,␣store␣=>␣\$x␣},␣$input);

This␣is␣basically␣shorthand␣for␣saying:

␣␣␣␣my␣$args␣=␣check(␣{␣foo␣=>␣{␣default␣=>␣1␣},␣$input␣);
␣␣␣␣my␣$x␣␣␣␣=␣$args->{foo};

You␣can␣alter␣the␣global␣variable␣$Params::Check::NO_DUPLICATES␣to
control␣whether␣the␣C<store>'d␣key␣will␣still␣be␣present␣in␣your
result␣set.␣See␣the␣L<Global␣Variables>␣section␣below.

=item␣allow

A␣set␣of␣criteria␣used␣to␣validate␣a␣particular␣piece␣of␣data␣if␣it
has␣to␣adhere␣to␣particular␣rules.

See␣the␣C<allow()>␣function␣for␣details.

=back

=head1␣Functions

=head2␣check(␣\%tmpl,␣\%args,␣[$verbose]␣);

This␣function␣is␣not␣exported␣by␣default,␣so␣you'll␣have␣to␣ask␣for␣it
via:

␣␣␣␣use␣Params::Check␣qw[check];

or␣use␣its␣fully␣qualified␣name␣instead.

C<check>␣takes␣a␣list␣of␣arguments,␣as␣follows:

=over␣4

=item␣Template

This␣is␣a␣hashreference␣which␣contains␣a␣template␣as␣explained␣in␣the
C<SYNOPSIS>␣and␣C<Template>␣section.

=item␣Arguments

This␣is␣a␣reference␣to␣a␣hash␣of␣named␣arguments␣which␣need␣checking.

=item␣Verbose

A␣boolean␣to␣indicate␣whether␣C<check>␣should␣be␣verbose␣and␣warn
about␣what␣went␣wrong␣in␣a␣check␣or␣not.

You␣can␣enable␣this␣program␣wide␣by␣setting␣the␣package␣variable
C<$Params::Check::VERBOSE>␣to␣a␣true␣value.␣For␣details,␣see␣the
section␣on␣C<Global␣Variables>␣below.

=back

C<check>␣will␣return␣when␣it␣fails,␣or␣a␣hashref␣with␣lowercase
keys␣of␣parsed␣arguments␣when␣it␣succeeds.

So␣a␣typical␣call␣to␣check␣would␣look␣like␣this:

␣␣␣␣my␣$parsed␣=␣check(␣\%template,␣\%arguments,␣$VERBOSE␣)
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣or␣warn␣q[Arguments␣could␣not␣be␣parsed!];

A␣lot␣of␣the␣behaviour␣of␣C<check()>␣can␣be␣altered␣by␣setting
package␣variables.␣See␣the␣section␣on␣C<Global␣Variables>␣for␣details
on␣this.

=cut
----------
Range: (1550310,1553980) (3670)
=head1␣Global␣Variables

The␣behaviour␣of␣Params::Check␣can␣be␣altered␣by␣changing␣the
following␣global␣variables:

=head2␣$Params::Check::VERBOSE

This␣controls␣whether␣Params::Check␣will␣issue␣warnings␣and
explanations␣as␣to␣why␣certain␣things␣may␣have␣failed.
If␣you␣set␣it␣to␣0,␣Params::Check␣will␣not␣output␣any␣warnings.

The␣default␣is␣1␣when␣L<warnings>␣are␣enabled,␣0␣otherwise;

=head2␣$Params::Check::STRICT_TYPE

This␣works␣like␣the␣C<strict_type>␣option␣you␣can␣pass␣to␣C<check>,
which␣will␣turn␣on␣C<strict_type>␣globally␣for␣all␣calls␣to␣C<check>.

The␣default␣is␣0;

=head2␣$Params::Check::ALLOW_UNKNOWN

If␣you␣set␣this␣flag,␣unknown␣options␣will␣still␣be␣present␣in␣the
return␣value,␣rather␣than␣filtered␣out.␣This␣is␣useful␣if␣your
subroutine␣is␣only␣interested␣in␣a␣few␣arguments,␣and␣wants␣to␣pass
the␣rest␣on␣blindly␣to␣perhaps␣another␣subroutine.

The␣default␣is␣0;

=head2␣$Params::Check::STRIP_LEADING_DASHES

If␣you␣set␣this␣flag,␣all␣keys␣passed␣in␣the␣following␣manner:

␣␣␣␣function(␣-key␣=>␣'val'␣);

will␣have␣their␣leading␣dashes␣stripped.

=head2␣$Params::Check::NO_DUPLICATES

If␣set␣to␣true,␣all␣keys␣in␣the␣template␣that␣are␣marked␣as␣to␣be
stored␣in␣a␣scalar,␣will␣also␣be␣removed␣from␣the␣result␣set.

Default␣is␣false,␣meaning␣that␣when␣you␣use␣C<store>␣as␣a␣template
key,␣C<check>␣will␣put␣it␣both␣in␣the␣scalar␣you␣supplied,␣as␣well␣as
in␣the␣hashref␣it␣returns.

=head2␣$Params::Check::PRESERVE_CASE

If␣set␣to␣true,␣L<Params::Check>␣will␣no␣longer␣convert␣all␣keys␣from
the␣user␣input␣to␣lowercase,␣but␣instead␣expect␣them␣to␣be␣in␣the
case␣the␣template␣provided.␣This␣is␣useful␣when␣you␣want␣to␣use
similar␣keys␣with␣different␣casing␣in␣your␣templates.

Understand␣that␣this␣removes␣the␣case-insensitivy␣feature␣of␣this
module.

Default␣is␣0;

=head2␣$Params::Check::ONLY_ALLOW_DEFINED

If␣set␣to␣true,␣L<Params::Check>␣will␣require␣all␣values␣passed␣to␣be
C<defined>.␣If␣you␣wish␣to␣enable␣this␣on␣a␣'per␣key'␣basis,␣use␣the
template␣option␣C<defined>␣instead.

Default␣is␣0;

=head2␣$Params::Check::SANITY_CHECK_TEMPLATE

If␣set␣to␣true,␣L<Params::Check>␣will␣sanity␣check␣templates,␣validating
for␣errors␣and␣unknown␣keys.␣Although␣very␣useful␣for␣debugging,␣this
can␣be␣somewhat␣slow␣in␣hot-code␣and␣large␣loops.

To␣disable␣this␣check,␣set␣this␣variable␣to␣C<false>.

Default␣is␣1;

=head2␣$Params::Check::WARNINGS_FATAL

If␣set␣to␣true,␣L<Params::Check>␣will␣C<croak>␣when␣an␣error␣during␣
template␣validation␣occurs,␣rather␣than␣return␣C<false>.

Default␣is␣0;

=head2␣$Params::Check::CALLER_DEPTH

This␣global␣modifies␣the␣argument␣given␣to␣C<caller()>␣by
C<Params::Check::check()>␣and␣is␣useful␣if␣you␣have␣a␣custom␣wrapper
function␣around␣C<Params::Check::check()>.␣The␣value␣must␣be␣an
integer,␣indicating␣the␣number␣of␣wrapper␣functions␣inserted␣between
the␣real␣function␣call␣and␣C<Params::Check::check()>.

Example␣wrapper␣function,␣using␣a␣custom␣stacktrace:

␣␣␣␣sub␣check␣{
␣␣␣␣␣␣␣␣my␣($template,␣$args_in)␣=␣@_;

␣␣␣␣␣␣␣␣local␣$Params::Check::WARNINGS_FATAL␣=␣1;
␣␣␣␣␣␣␣␣local␣$Params::Check::CALLER_DEPTH␣=␣$Params::Check::CALLER_DEPTH␣+␣1;
␣␣␣␣␣␣␣␣my␣$args_out␣=␣Params::Check::check($template,␣$args_in);

␣␣␣␣␣␣␣␣my_stacktrace(Params::Check::last_error)␣unless␣$args_out;

␣␣␣␣␣␣␣␣return␣$args_out;
␣␣␣␣}

Default␣is␣0;

=head1␣AUTHOR

This␣module␣by
Jos␣Boumans␣E<lt>kane@cpan.orgE<gt>.

=head1␣Acknowledgements

Thanks␣to␣Richard␣Soderberg␣for␣his␣performance␣improvements.

=head1␣COPYRIGHT

This␣module␣is
copyright␣(c)␣2003,2004␣Jos␣Boumans␣E<lt>kane@cpan.orgE<gt>.
All␣rights␣reserved.

This␣library␣is␣free␣software;
you␣may␣redistribute␣and/or␣modify␣it␣under␣the␣same
terms␣as␣Perl␣itself.

=cut
----------
Range: (1569465,1579961) (10496)
=head1␣NAME

B<CGI::Carp>␣-␣CGI␣routines␣for␣writing␣to␣the␣HTTPD␣(or␣other)␣error␣log

=head1␣SYNOPSIS

␣␣␣␣use␣CGI::Carp;

␣␣␣␣croak␣"We're␣outta␣here!";
␣␣␣␣confess␣"It␣was␣my␣fault:␣$!";
␣␣␣␣carp␣"It␣was␣your␣fault!";␣␣␣
␣␣␣␣warn␣"I'm␣confused";
␣␣␣␣die␣␣"I'm␣dying.\n";

␣␣␣␣use␣CGI::Carp␣qw(cluck);
␣␣␣␣cluck␣"I␣wouldn't␣do␣that␣if␣I␣were␣you";

␣␣␣␣use␣CGI::Carp␣qw(fatalsToBrowser);
␣␣␣␣die␣"Fatal␣error␣messages␣are␣now␣sent␣to␣browser";

=head1␣DESCRIPTION

CGI␣scripts␣have␣a␣nasty␣habit␣of␣leaving␣warning␣messages␣in␣the␣error
logs␣that␣are␣neither␣time␣stamped␣nor␣fully␣identified.␣␣Tracking␣down
the␣script␣that␣caused␣the␣error␣is␣a␣pain.␣␣This␣fixes␣that.␣␣Replace
the␣usual

␣␣␣␣use␣Carp;

with

␣␣␣␣use␣CGI::Carp

And␣the␣standard␣warn(),␣die␣(),␣croak(),␣confess()␣and␣carp()␣calls
will␣automagically␣be␣replaced␣with␣functions␣that␣write␣out␣nicely
time-stamped␣messages␣to␣the␣HTTP␣server␣error␣log.

For␣example:

␣␣␣[Fri␣Nov␣17␣21:40:43␣1995]␣test.pl:␣I'm␣confused␣at␣test.pl␣line␣3.
␣␣␣[Fri␣Nov␣17␣21:40:43␣1995]␣test.pl:␣Got␣an␣error␣message:␣Permission␣denied.
␣␣␣[Fri␣Nov␣17␣21:40:43␣1995]␣test.pl:␣I'm␣dying.

=head1␣REDIRECTING␣ERROR␣MESSAGES

By␣default,␣error␣messages␣are␣sent␣to␣STDERR.␣␣Most␣HTTPD␣servers
direct␣STDERR␣to␣the␣server's␣error␣log.␣␣Some␣applications␣may␣wish
to␣keep␣private␣error␣logs,␣distinct␣from␣the␣server's␣error␣log,␣or
they␣may␣wish␣to␣direct␣error␣messages␣to␣STDOUT␣so␣that␣the␣browser
will␣receive␣them.

The␣C<carpout()>␣function␣is␣provided␣for␣this␣purpose.␣␣Since
carpout()␣is␣not␣exported␣by␣default,␣you␣must␣import␣it␣explicitly␣by
saying

␣␣␣use␣CGI::Carp␣qw(carpout);

The␣carpout()␣function␣requires␣one␣argument,␣which␣should␣be␣a
reference␣to␣an␣open␣filehandle␣for␣writing␣errors.␣␣It␣should␣be
called␣in␣a␣C<BEGIN>␣block␣at␣the␣top␣of␣the␣CGI␣application␣so␣that
compiler␣errors␣will␣be␣caught.␣␣Example:

␣␣␣BEGIN␣{
␣␣␣␣␣use␣CGI::Carp␣qw(carpout);
␣␣␣␣␣open(LOG,␣">>/usr/local/cgi-logs/mycgi-log")␣or
␣␣␣␣␣␣␣die("Unable␣to␣open␣mycgi-log:␣$!\n");
␣␣␣␣␣carpout(LOG);
␣␣␣}

carpout()␣does␣not␣handle␣file␣locking␣on␣the␣log␣for␣you␣at␣this␣point.
Also,␣note␣that␣carpout()␣does␣not␣work␣with␣in-memory␣file␣handles,␣although
a␣patch␣would␣be␣welcome␣to␣address␣that.

The␣real␣STDERR␣is␣not␣closed␣--␣it␣is␣moved␣to␣CGI::Carp::SAVEERR.␣␣Some
servers,␣when␣dealing␣with␣CGI␣scripts,␣close␣their␣connection␣to␣the
browser␣when␣the␣script␣closes␣STDOUT␣and␣STDERR.␣␣CGI::Carp::SAVEERR␣is␣there␣to
prevent␣this␣from␣happening␣prematurely.

You␣can␣pass␣filehandles␣to␣carpout()␣in␣a␣variety␣of␣ways.␣␣The␣"correct"
way␣according␣to␣Tom␣Christiansen␣is␣to␣pass␣a␣reference␣to␣a␣filehandle
GLOB:

␣␣␣␣carpout(\*LOG);

This␣looks␣weird␣to␣mere␣mortals␣however,␣so␣the␣following␣syntaxes␣are
accepted␣as␣well:

␣␣␣␣carpout(LOG);
␣␣␣␣carpout(main::LOG);
␣␣␣␣carpout(main'LOG);
␣␣␣␣carpout(\LOG);
␣␣␣␣carpout(\'main::LOG');

␣␣␣␣...␣and␣so␣on

FileHandle␣and␣other␣objects␣work␣as␣well.

Use␣of␣carpout()␣is␣not␣great␣for␣performance,␣so␣it␣is␣recommended
for␣debugging␣purposes␣or␣for␣moderate-use␣applications.␣␣A␣future
version␣of␣this␣module␣may␣delay␣redirecting␣STDERR␣until␣one␣of␣the
CGI::Carp␣methods␣is␣called␣to␣prevent␣the␣performance␣hit.

=head1␣MAKING␣PERL␣ERRORS␣APPEAR␣IN␣THE␣BROWSER␣WINDOW

If␣you␣want␣to␣send␣fatal␣(die,␣confess)␣errors␣to␣the␣browser,␣ask␣to
import␣the␣special␣"fatalsToBrowser"␣subroutine:

␣␣␣␣use␣CGI::Carp␣qw(fatalsToBrowser);
␣␣␣␣die␣"Bad␣error␣here";

Fatal␣errors␣will␣now␣be␣echoed␣to␣the␣browser␣as␣well␣as␣to␣the␣log.␣␣CGI::Carp
arranges␣to␣send␣a␣minimal␣HTTP␣header␣to␣the␣browser␣so␣that␣even␣errors␣that
occur␣in␣the␣early␣compile␣phase␣will␣be␣seen.
Nonfatal␣errors␣will␣still␣be␣directed␣to␣the␣log␣file␣only␣(unless␣redirected
with␣carpout).

Note␣that␣fatalsToBrowser␣does␣B<not>␣work␣with␣mod_perl␣version␣2.0
and␣higher.

=head2␣Changing␣the␣default␣message

By␣default,␣the␣software␣error␣message␣is␣followed␣by␣a␣note␣to
contact␣the␣Webmaster␣by␣e-mail␣with␣the␣time␣and␣date␣of␣the␣error.
If␣this␣message␣is␣not␣to␣your␣liking,␣you␣can␣change␣it␣using␣the
set_message()␣routine.␣␣This␣is␣not␣imported␣by␣default;␣you␣should
import␣it␣on␣the␣use()␣line:

␣␣␣␣use␣CGI::Carp␣qw(fatalsToBrowser␣set_message);
␣␣␣␣set_message("It's␣not␣a␣bug,␣it's␣a␣feature!");

You␣may␣also␣pass␣in␣a␣code␣reference␣in␣order␣to␣create␣a␣custom
error␣message.␣␣At␣run␣time,␣your␣code␣will␣be␣called␣with␣the␣text
of␣the␣error␣message␣that␣caused␣the␣script␣to␣die.␣␣Example:

␣␣␣␣use␣CGI::Carp␣qw(fatalsToBrowser␣set_message);
␣␣␣␣BEGIN␣{
␣␣␣␣␣␣␣sub␣handle_errors␣{
␣␣␣␣␣␣␣␣␣␣my␣$msg␣=␣shift;
␣␣␣␣␣␣␣␣␣␣print␣"<h1>Oh␣gosh</h1>";
␣␣␣␣␣␣␣␣␣␣print␣"<p>Got␣an␣error:␣$msg</p>";
␣␣␣␣␣␣}
␣␣␣␣␣␣set_message(\&handle_errors);
␣␣␣␣}

In␣order␣to␣correctly␣intercept␣compile-time␣errors,␣you␣should␣call
set_message()␣from␣within␣a␣BEGIN{}␣block.

=head1␣DOING␣MORE␣THAN␣PRINTING␣A␣MESSAGE␣IN␣THE␣EVENT␣OF␣PERL␣ERRORS

If␣fatalsToBrowser␣in␣conjunction␣with␣set_message␣does␣not␣provide␣
you␣with␣all␣of␣the␣functionality␣you␣need,␣you␣can␣go␣one␣step␣
further␣by␣specifying␣a␣function␣to␣be␣executed␣any␣time␣a␣script
calls␣"die",␣has␣a␣syntax␣error,␣or␣dies␣unexpectedly␣at␣runtime
with␣a␣line␣like␣"undef->explode();".␣

␣␣␣␣use␣CGI::Carp␣qw(set_die_handler);
␣␣␣␣BEGIN␣{
␣␣␣␣␣␣␣sub␣handle_errors␣{
␣␣␣␣␣␣␣␣␣␣my␣$msg␣=␣shift;
␣␣␣␣␣␣␣␣␣␣print␣"content-type:␣text/html\n\n";
␣␣␣␣␣␣␣␣␣␣print␣"<h1>Oh␣gosh</h1>";
␣␣␣␣␣␣␣␣␣␣print␣"<p>Got␣an␣error:␣$msg</p>";

␣␣␣␣␣␣␣␣␣␣#proceed␣to␣send␣an␣email␣to␣a␣system␣administrator,
␣␣␣␣␣␣␣␣␣␣#write␣a␣detailed␣message␣to␣the␣browser␣and/or␣a␣log,
␣␣␣␣␣␣␣␣␣␣#etc....
␣␣␣␣␣␣}
␣␣␣␣␣␣set_die_handler(\&handle_errors);
␣␣␣␣}

Notice␣that␣if␣you␣use␣set_die_handler(),␣you␣must␣handle␣sending
HTML␣headers␣to␣the␣browser␣yourself␣if␣you␣are␣printing␣a␣message.

If␣you␣use␣set_die_handler(),␣you␣will␣most␣likely␣interfere␣with␣
the␣behavior␣of␣fatalsToBrowser,␣so␣you␣must␣use␣this␣or␣that,␣not␣
both.␣

Using␣set_die_handler()␣sets␣SIG{__DIE__}␣(as␣does␣fatalsToBrowser),
and␣there␣is␣only␣one␣SIG{__DIE__}.␣This␣means␣that␣if␣you␣are␣
attempting␣to␣set␣SIG{__DIE__}␣yourself,␣you␣may␣interfere␣with␣
this␣module's␣functionality,␣or␣this␣module␣may␣interfere␣with␣
your␣module's␣functionality.

=head1␣MAKING␣WARNINGS␣APPEAR␣AS␣HTML␣COMMENTS

It␣is␣now␣also␣possible␣to␣make␣non-fatal␣errors␣appear␣as␣HTML
comments␣embedded␣in␣the␣output␣of␣your␣program.␣␣To␣enable␣this
feature,␣export␣the␣new␣"warningsToBrowser"␣subroutine.␣␣Since␣sending
warnings␣to␣the␣browser␣before␣the␣HTTP␣headers␣have␣been␣sent␣would
cause␣an␣error,␣any␣warnings␣are␣stored␣in␣an␣internal␣buffer␣until
you␣call␣the␣warningsToBrowser()␣subroutine␣with␣a␣true␣argument:

␣␣␣␣use␣CGI::Carp␣qw(fatalsToBrowser␣warningsToBrowser);
␣␣␣␣use␣CGI␣qw(:standard);
␣␣␣␣print␣header();
␣␣␣␣warningsToBrowser(1);

You␣may␣also␣give␣a␣false␣argument␣to␣warningsToBrowser()␣to␣prevent
warnings␣from␣being␣sent␣to␣the␣browser␣while␣you␣are␣printing␣some
content␣where␣HTML␣comments␣are␣not␣allowed:

␣␣␣␣warningsToBrowser(0);␣␣␣␣#␣disable␣warnings
␣␣␣␣print␣"<script␣type=\"text/javascript\"><!--\n";
␣␣␣␣print_some_javascript_code();
␣␣␣␣print␣"//--></script>\n";
␣␣␣␣warningsToBrowser(1);␣␣␣␣#␣re-enable␣warnings

Note:␣In␣this␣respect␣warningsToBrowser()␣differs␣fundamentally␣from
fatalsToBrowser(),␣which␣you␣should␣never␣call␣yourself!

=head1␣OVERRIDING␣THE␣NAME␣OF␣THE␣PROGRAM

CGI::Carp␣includes␣the␣name␣of␣the␣program␣that␣generated␣the␣error␣or
warning␣in␣the␣messages␣written␣to␣the␣log␣and␣the␣browser␣window.
Sometimes,␣Perl␣can␣get␣confused␣about␣what␣the␣actual␣name␣of␣the
executed␣program␣was.␣␣In␣these␣cases,␣you␣can␣override␣the␣program
name␣that␣CGI::Carp␣will␣use␣for␣all␣messages.

The␣quick␣way␣to␣do␣that␣is␣to␣tell␣CGI::Carp␣the␣name␣of␣the␣program
in␣its␣use␣statement.␣␣You␣can␣do␣that␣by␣adding
"name=cgi_carp_log_name"␣to␣your␣"use"␣statement.␣␣For␣example:

␣␣␣␣use␣CGI::Carp␣qw(name=cgi_carp_log_name);

.␣␣If␣you␣want␣to␣change␣the␣program␣name␣partway␣through␣the␣program,
you␣can␣use␣the␣C<set_progname()>␣function␣instead.␣␣It␣is␣not
exported␣by␣default,␣you␣must␣import␣it␣explicitly␣by␣saying

␣␣␣␣use␣CGI::Carp␣qw(set_progname);

Once␣you've␣done␣that,␣you␣can␣change␣the␣logged␣name␣of␣the␣program
at␣any␣time␣by␣calling

␣␣␣␣set_progname(new_program_name);

You␣can␣set␣the␣program␣back␣to␣the␣default␣by␣calling

␣␣␣␣set_progname(undef);

Note␣that␣this␣override␣doesn't␣happen␣until␣after␣the␣program␣has
compiled,␣so␣any␣compile-time␣errors␣will␣still␣show␣up␣with␣the
non-overridden␣program␣name
␣␣
=head1␣CHANGE␣LOG

1.29␣Patch␣from␣Peter␣Whaite␣to␣fix␣the␣unfixable␣problem␣of␣CGI::Carp
␣␣␣␣␣not␣behaving␣correctly␣in␣an␣eval()␣context.

1.05␣carpout()␣added␣and␣minor␣corrections␣by␣Marc␣Hedlund
␣␣␣␣␣<hedlund@best.com>␣on␣11/26/95.

1.06␣fatalsToBrowser()␣no␣longer␣aborts␣for␣fatal␣errors␣within
␣␣␣␣␣eval()␣statements.

1.08␣set_message()␣added␣and␣carpout()␣expanded␣to␣allow␣for␣FileHandle
␣␣␣␣␣objects.

1.09␣set_message()␣now␣allows␣users␣to␣pass␣a␣code␣REFERENCE␣for␣
␣␣␣␣␣really␣custom␣error␣messages.␣␣croak␣and␣carp␣are␣now
␣␣␣␣␣exported␣by␣default.␣␣Thanks␣to␣Gunther␣Birznieks␣for␣the
␣␣␣␣␣patches.

1.10␣Patch␣from␣Chris␣Dean␣(ctdean@cogit.com)␣to␣allow␣
␣␣␣␣␣module␣to␣run␣correctly␣under␣mod_perl.

1.11␣Changed␣order␣of␣&gt;␣and␣&lt;␣escapes.

1.12␣Changed␣die()␣on␣line␣217␣to␣CORE::die␣to␣avoid␣B<-w>␣warning.

1.13␣Added␣cluck()␣to␣make␣the␣module␣orthogonal␣with␣Carp.
␣␣␣␣␣More␣mod_perl␣related␣fixes.

1.20␣Patch␣from␣Ilmari␣Karonen␣(perl@itz.pp.sci.fi):␣␣Added
␣␣␣␣␣warningsToBrowser().␣␣Replaced␣<CODE>␣tags␣with␣<PRE>␣in
␣␣␣␣␣fatalsToBrowser()␣output.

1.23␣ineval()␣now␣checks␣both␣$^S␣and␣inspects␣the␣message␣for␣the␣"eval"␣pattern
␣␣␣␣␣(hack␣alert!)␣in␣order␣to␣accommodate␣various␣combinations␣of␣Perl␣and
␣␣␣␣␣mod_perl.

1.24␣Patch␣from␣Scott␣Gifford␣(sgifford@suspectclass.com):␣Add␣support
␣␣␣␣␣for␣overriding␣program␣name.

1.26␣Replaced␣CORE::GLOBAL::die␣with␣the␣evil␣$SIG{__DIE__}␣because␣the
␣␣␣␣␣former␣isn't␣working␣in␣some␣people's␣hands.␣␣There␣is␣no␣such␣thing
␣␣␣␣␣as␣reliable␣exception␣handling␣in␣Perl.

1.27␣Replaced␣tell␣STDOUT␣with␣bytes=tell␣STDOUT.

=head1␣AUTHORS

Copyright␣1995-2002,␣Lincoln␣D.␣Stein.␣␣All␣rights␣reserved.␣␣

This␣library␣is␣free␣software;␣you␣can␣redistribute␣it␣and/or␣modify
it␣under␣the␣same␣terms␣as␣Perl␣itself.

Address␣bug␣reports␣and␣comments␣to:␣lstein@cshl.org

=head1␣SEE␣ALSO

Carp,␣CGI::Base,␣CGI::BasePlus,␣CGI::Request,␣CGI::MiniSvr,␣CGI::Form,
CGI::Response

=cut
----------
Range: (1589851,1594180) (4329)
=head1␣NAME

CGI::Fast␣-␣CGI␣Interface␣for␣Fast␣CGI

=head1␣SYNOPSIS

␣␣␣␣use␣CGI::Fast␣qw(:standard);
␣␣␣␣$COUNTER␣=␣0;
␣␣␣␣while␣(new␣CGI::Fast)␣{
	print␣header;
	print␣start_html("Fast␣CGI␣Rocks");
	print
	␣␣␣␣h1("Fast␣CGI␣Rocks"),
	␣␣␣␣"Invocation␣number␣",b($COUNTER++),
␣␣␣␣␣␣␣␣␣␣␣␣"␣PID␣",b($$),".",
	␣␣␣␣hr;
␣␣␣␣␣␣␣␣print␣end_html;
␣␣␣␣}

=head1␣DESCRIPTION

CGI::Fast␣is␣a␣subclass␣of␣the␣CGI␣object␣created␣by␣CGI.pm.␣␣It␣is
specialized␣to␣work␣well␣FCGI␣module,␣which␣greatly␣speeds␣up␣CGI
scripts␣by␣turning␣them␣into␣persistently␣running␣server␣processes.
Scripts␣that␣perform␣time-consuming␣initialization␣processes,␣such␣as
loading␣large␣modules␣or␣opening␣persistent␣database␣connections,␣will
see␣large␣performance␣improvements.

=head1␣OTHER␣PIECES␣OF␣THE␣PUZZLE

In␣order␣to␣use␣CGI::Fast␣you'll␣need␣the␣FCGI␣module.␣␣See
http://www.cpan.org/␣for␣details.

=head1␣WRITING␣FASTCGI␣PERL␣SCRIPTS

FastCGI␣scripts␣are␣persistent:␣one␣or␣more␣copies␣of␣the␣script
are␣started␣up␣when␣the␣server␣initializes,␣and␣stay␣around␣until
the␣server␣exits␣or␣they␣die␣a␣natural␣death.␣␣After␣performing
whatever␣one-time␣initialization␣it␣needs,␣the␣script␣enters␣a
loop␣waiting␣for␣incoming␣connections,␣processing␣the␣request,␣and
waiting␣some␣more.

A␣typical␣FastCGI␣script␣will␣look␣like␣this:

␣␣␣␣#!/usr/bin/perl
␣␣␣␣use␣CGI::Fast;
␣␣␣␣&do_some_initialization();
␣␣␣␣while␣($q␣=␣new␣CGI::Fast)␣{
	&process_request($q);
␣␣␣␣}

Each␣time␣there's␣a␣new␣request,␣CGI::Fast␣returns␣a
CGI␣object␣to␣your␣loop.␣␣The␣rest␣of␣the␣time␣your␣script
waits␣in␣the␣call␣to␣new().␣␣When␣the␣server␣requests␣that
your␣script␣be␣terminated,␣new()␣will␣return␣undef.␣␣You␣can
of␣course␣exit␣earlier␣if␣you␣choose.␣␣A␣new␣version␣of␣the
script␣will␣be␣respawned␣to␣take␣its␣place␣(this␣may␣be
necessary␣in␣order␣to␣avoid␣Perl␣memory␣leaks␣in␣long-running
scripts).

CGI.pm's␣default␣CGI␣object␣mode␣also␣works.␣␣Just␣modify␣the␣loop
this␣way:

␣␣␣␣while␣(new␣CGI::Fast)␣{
	&process_request;
␣␣␣␣}

Calls␣to␣header(),␣start_form(),␣etc.␣will␣all␣operate␣on␣the
current␣request.

=head1␣INSTALLING␣FASTCGI␣SCRIPTS

See␣the␣FastCGI␣developer's␣kit␣documentation␣for␣full␣details.␣␣On
the␣Apache␣server,␣the␣following␣line␣must␣be␣added␣to␣srm.conf:

␣␣␣␣AddType␣application/x-httpd-fcgi␣.fcgi

FastCGI␣scripts␣must␣end␣in␣the␣extension␣.fcgi.␣␣For␣each␣script␣you
install,␣you␣must␣add␣something␣like␣the␣following␣to␣srm.conf:

␣␣␣␣FastCgiServer␣/usr/etc/httpd/fcgi-bin/file_upload.fcgi␣-processes␣2

This␣instructs␣Apache␣to␣launch␣two␣copies␣of␣file_upload.fcgi␣at
startup␣time.

=head1␣USING␣FASTCGI␣SCRIPTS␣AS␣CGI␣SCRIPTS

Any␣script␣that␣works␣correctly␣as␣a␣FastCGI␣script␣will␣also␣work
correctly␣when␣installed␣as␣a␣vanilla␣CGI␣script.␣␣However␣it␣will
not␣see␣any␣performance␣benefit.

=head1␣EXTERNAL␣FASTCGI␣SERVER␣INVOCATION

FastCGI␣supports␣a␣TCP/IP␣transport␣mechanism␣which␣allows␣FastCGI␣scripts␣to␣run
external␣to␣the␣webserver,␣perhaps␣on␣a␣remote␣machine.␣␣To␣configure␣the
webserver␣to␣connect␣to␣an␣external␣FastCGI␣server,␣you␣would␣add␣the␣following
to␣your␣srm.conf:

␣␣␣␣FastCgiExternalServer␣/usr/etc/httpd/fcgi-bin/file_upload.fcgi␣-host␣sputnik:8888

Two␣environment␣variables␣affect␣how␣the␣C<CGI::Fast>␣object␣is␣created,
allowing␣C<CGI::Fast>␣to␣be␣used␣as␣an␣external␣FastCGI␣server.␣␣(See␣C<FCGI>
documentation␣for␣C<FCGI::OpenSocket>␣for␣more␣information.)

=over

=item␣FCGI_SOCKET_PATH

The␣address␣(TCP/IP)␣or␣path␣(UNIX␣Domain)␣of␣the␣socket␣the␣external␣FastCGI
script␣to␣which␣bind␣an␣listen␣for␣incoming␣connections␣from␣the␣web␣server.

=item␣FCGI_LISTEN_QUEUE

Maximum␣length␣of␣the␣queue␣of␣pending␣connections.

=back

For␣example:

␣␣␣␣#!/usr/local/bin/perl␣␣␣␣#␣must␣be␣a␣FastCGI␣version␣of␣perl!
␣␣␣␣use␣CGI::Fast;
␣␣␣␣&do_some_initialization();
␣␣␣␣$ENV{FCGI_SOCKET_PATH}␣=␣"sputnik:8888";
␣␣␣␣$ENV{FCGI_LISTEN_QUEUE}␣=␣100;
␣␣␣␣while␣($q␣=␣new␣CGI::Fast)␣{
	&process_request($q);
␣␣␣␣}

=head1␣CAVEATS

I␣haven't␣tested␣this␣very␣much.

=head1␣AUTHOR␣INFORMATION

Copyright␣1996-1998,␣Lincoln␣D.␣Stein.␣␣All␣rights␣reserved.

This␣library␣is␣free␣software;␣you␣can␣redistribute␣it␣and/or␣modify
it␣under␣the␣same␣terms␣as␣Perl␣itself.

Address␣bug␣reports␣and␣comments␣to:␣lstein@cshl.org

=head1␣BUGS

This␣section␣intentionally␣left␣blank.

=head1␣SEE␣ALSO

L<CGI::Carp>,␣L<CGI>

=cut
----------
Range: (1600419,1603359) (2940)
=head1␣NAME

CGI::Pretty␣-␣module␣to␣produce␣nicely␣formatted␣HTML␣code

=head1␣SYNOPSIS

␣␣␣␣use␣CGI::Pretty␣qw(␣:html3␣);

␣␣␣␣#␣Print␣a␣table␣with␣a␣single␣data␣element
␣␣␣␣print␣table(␣TR(␣td(␣"foo"␣)␣)␣);

=head1␣DESCRIPTION

CGI::Pretty␣is␣a␣module␣that␣derives␣from␣CGI.␣␣It's␣sole␣function␣is␣to
allow␣users␣of␣CGI␣to␣output␣nicely␣formatted␣HTML␣code.

When␣using␣the␣CGI␣module,␣the␣following␣code:
␣␣␣␣print␣table(␣TR(␣td(␣"foo"␣)␣)␣);

produces␣the␣following␣output:
␣␣␣␣<TABLE><TR><TD>foo</TD></TR></TABLE>

If␣a␣user␣were␣to␣create␣a␣table␣consisting␣of␣many␣rows␣and␣many␣columns,
the␣resultant␣HTML␣code␣would␣be␣quite␣difficult␣to␣read␣since␣it␣has␣no
carriage␣returns␣or␣indentation.

CGI::Pretty␣fixes␣this␣problem.␣␣What␣it␣does␣is␣add␣a␣carriage
return␣and␣indentation␣to␣the␣HTML␣code␣so␣that␣one␣can␣easily␣read
it.

␣␣␣␣print␣table(␣TR(␣td(␣"foo"␣)␣)␣);

now␣produces␣the␣following␣output:
␣␣␣␣<TABLE>
␣␣␣␣␣␣␣<TR>
␣␣␣␣␣␣␣␣␣␣<TD>foo</TD>
␣␣␣␣␣␣␣</TR>
␣␣␣␣</TABLE>

=head2␣Recommendation␣for␣when␣to␣use␣CGI::Pretty

CGI::Pretty␣is␣far␣slower␣than␣using␣CGI.pm␣directly.␣A␣benchmark␣showed␣that
it␣could␣be␣about␣10␣times␣slower.␣Adding␣newslines␣and␣spaces␣may␣alter␣the
rendered␣appearance␣of␣HTML.␣Also,␣the␣extra␣newlines␣and␣spaces␣also␣make␣the
file␣size␣larger,␣making␣the␣files␣take␣longer␣to␣download.

With␣all␣those␣considerations,␣it␣is␣recommended␣that␣CGI::Pretty␣be␣used
primarily␣for␣debugging.

=head2␣Tags␣that␣won't␣be␣formatted

The␣following␣tags␣are␣not␣formatted:␣<a>,␣<pre>,␣<code>,␣<script>,␣<textarea>,␣and␣<td>.
If␣these␣tags␣were␣formatted,␣the
user␣would␣see␣the␣extra␣indentation␣on␣the␣web␣browser␣causing␣the␣page␣to
look␣different␣than␣what␣would␣be␣expected.␣␣If␣you␣wish␣to␣add␣more␣tags␣to
the␣list␣of␣tags␣that␣are␣not␣to␣be␣touched,␣push␣them␣onto␣the␣C<@AS_IS>␣array:

␣␣␣␣push␣@CGI::Pretty::AS_IS,qw(XMP);

=head2␣Customizing␣the␣Indenting

If␣you␣wish␣to␣have␣your␣own␣personal␣style␣of␣indenting,␣you␣can␣change␣the
C<$INDENT>␣variable:

␣␣␣␣$CGI::Pretty::INDENT␣=␣"\t\t";

would␣cause␣the␣indents␣to␣be␣two␣tabs.

Similarly,␣if␣you␣wish␣to␣have␣more␣space␣between␣lines,␣you␣may␣change␣the
C<$LINEBREAK>␣variable:

␣␣␣␣$CGI::Pretty::LINEBREAK␣=␣"\n\n";

would␣create␣two␣carriage␣returns␣between␣lines.

If␣you␣decide␣you␣want␣to␣use␣the␣regular␣CGI␣indenting,␣you␣can␣easily␣do␣
the␣following:

␣␣␣␣$CGI::Pretty::INDENT␣=␣$CGI::Pretty::LINEBREAK␣=␣"";

=head1␣AUTHOR

Brian␣Paulsen␣<Brian@ThePaulsens.com>,␣with␣minor␣modifications␣by
Lincoln␣Stein␣<lstein@cshl.org>␣for␣incorporation␣into␣the␣CGI.pm
distribution.

Copyright␣1999,␣Brian␣Paulsen.␣␣All␣rights␣reserved.

This␣library␣is␣free␣software;␣you␣can␣redistribute␣it␣and/or␣modify
it␣under␣the␣same␣terms␣as␣Perl␣itself.

Bug␣reports␣and␣comments␣to␣Brian@ThePaulsens.com.␣␣You␣can␣also␣write
to␣lstein@cshl.org,␣but␣this␣code␣looks␣pretty␣hairy␣to␣me␣and␣I'm␣not
sure␣I␣understand␣it!

=head1␣SEE␣ALSO

L<CGI>

=cut
----------
Range: (1607211,1614300) (7089)
=head1␣NAME

CGI::Push␣-␣Simple␣Interface␣to␣Server␣Push

=head1␣SYNOPSIS

␣␣␣␣use␣CGI::Push␣qw(:standard);

␣␣␣␣do_push(-next_page=>\&next_page,
␣␣␣␣␣␣␣␣␣␣␣␣-last_page=>\&last_page,
␣␣␣␣␣␣␣␣␣␣␣␣-delay=>0.5);

␣␣␣␣sub␣next_page␣{
␣␣␣␣␣␣␣␣my($q,$counter)␣=␣@_;
␣␣␣␣␣␣␣␣return␣undef␣if␣$counter␣>=␣10;
␣␣␣␣␣␣␣␣return␣start_html('Test'),
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣h1('Visible'),"\n",
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣"This␣page␣has␣been␣called␣",␣strong($counter),"␣times",
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣end_html();
␣␣␣␣}

␣␣␣␣sub␣last_page␣{
␣␣␣␣␣␣␣␣my($q,$counter)␣=␣@_;
␣␣␣␣␣␣␣␣return␣start_html('Done'),
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣h1('Finished'),
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣strong($counter␣-␣1),'␣iterations.',
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣end_html;
␣␣␣␣}

=head1␣DESCRIPTION

CGI::Push␣is␣a␣subclass␣of␣the␣CGI␣object␣created␣by␣CGI.pm.␣␣It␣is
specialized␣for␣server␣push␣operations,␣which␣allow␣you␣to␣create
animated␣pages␣whose␣content␣changes␣at␣regular␣intervals.

You␣provide␣CGI::Push␣with␣a␣pointer␣to␣a␣subroutine␣that␣will␣draw
one␣page.␣␣Every␣time␣your␣subroutine␣is␣called,␣it␣generates␣a␣new
page.␣␣The␣contents␣of␣the␣page␣will␣be␣transmitted␣to␣the␣browser
in␣such␣a␣way␣that␣it␣will␣replace␣what␣was␣there␣beforehand.␣␣The
technique␣will␣work␣with␣HTML␣pages␣as␣well␣as␣with␣graphics␣files,␣
allowing␣you␣to␣create␣animated␣GIFs.

Only␣Netscape␣Navigator␣supports␣server␣push.␣␣Internet␣Explorer
browsers␣do␣not.

=head1␣USING␣CGI::Push

CGI::Push␣adds␣one␣new␣method␣to␣the␣standard␣CGI␣suite,␣do_push().
When␣you␣call␣this␣method,␣you␣pass␣it␣a␣reference␣to␣a␣subroutine
that␣is␣responsible␣for␣drawing␣each␣new␣page,␣an␣interval␣delay,␣and
an␣optional␣subroutine␣for␣drawing␣the␣last␣page.␣␣Other␣optional
parameters␣include␣most␣of␣those␣recognized␣by␣the␣CGI␣header()
method.

You␣may␣call␣do_push()␣in␣the␣object␣oriented␣manner␣or␣not,␣as␣you
prefer:

␣␣␣␣use␣CGI::Push;
␣␣␣␣$q␣=␣new␣CGI::Push;
␣␣␣␣$q->do_push(-next_page=>\&draw_a_page);

␣␣␣␣␣␣␣␣-or-

␣␣␣␣use␣CGI::Push␣qw(:standard);
␣␣␣␣do_push(-next_page=>\&draw_a_page);

Parameters␣are␣as␣follows:

=over␣4

=item␣-next_page

␣␣␣␣do_push(-next_page=>\&my_draw_routine);

This␣required␣parameter␣points␣to␣a␣reference␣to␣a␣subroutine␣responsible␣for
drawing␣each␣new␣page.␣␣The␣subroutine␣should␣expect␣two␣parameters
consisting␣of␣the␣CGI␣object␣and␣a␣counter␣indicating␣the␣number
of␣times␣the␣subroutine␣has␣been␣called.␣␣It␣should␣return␣the
contents␣of␣the␣page␣as␣an␣B<array>␣of␣one␣or␣more␣items␣to␣print.␣␣
It␣can␣return␣a␣false␣value␣(or␣an␣empty␣array)␣in␣order␣to␣abort␣the
redrawing␣loop␣and␣print␣out␣the␣final␣page␣(if␣any)

␣␣␣␣sub␣my_draw_routine␣{
␣␣␣␣␣␣␣␣my($q,$counter)␣=␣@_;
␣␣␣␣␣␣␣␣return␣undef␣if␣$counter␣>␣100;
␣␣␣␣␣␣␣␣return␣start_html('testing'),
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣h1('testing'),
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣"This␣page␣called␣$counter␣times";
␣␣␣␣}

You␣are␣of␣course␣free␣to␣refer␣to␣create␣and␣use␣global␣variables
within␣your␣draw␣routine␣in␣order␣to␣achieve␣special␣effects.

=item␣-last_page

This␣optional␣parameter␣points␣to␣a␣reference␣to␣the␣subroutine
responsible␣for␣drawing␣the␣last␣page␣of␣the␣series.␣␣It␣is␣called
after␣the␣-next_page␣routine␣returns␣a␣false␣value.␣␣The␣subroutine
itself␣should␣have␣exactly␣the␣same␣calling␣conventions␣as␣the
-next_page␣routine.

=item␣-type

This␣optional␣parameter␣indicates␣the␣content␣type␣of␣each␣page.␣␣It
defaults␣to␣"text/html".␣␣Normally␣the␣module␣assumes␣that␣each␣page
is␣of␣a␣homogenous␣MIME␣type.␣␣However␣if␣you␣provide␣either␣of␣the
magic␣values␣"heterogeneous"␣or␣"dynamic"␣(the␣latter␣provided␣for␣the
convenience␣of␣those␣who␣hate␣long␣parameter␣names),␣you␣can␣specify
the␣MIME␣type␣--␣and␣other␣header␣fields␣--␣on␣a␣per-page␣basis.␣␣See␣
"heterogeneous␣pages"␣for␣more␣details.

=item␣-delay

This␣indicates␣the␣delay,␣in␣seconds,␣between␣frames.␣␣Smaller␣delays
refresh␣the␣page␣faster.␣␣Fractional␣values␣are␣allowed.

B<If␣not␣specified,␣-delay␣will␣default␣to␣1␣second>

=item␣-cookie,␣-target,␣-expires,␣-nph

These␣have␣the␣same␣meaning␣as␣the␣like-named␣parameters␣in
CGI::header().

If␣not␣specified,␣-nph␣will␣default␣to␣1␣(as␣needed␣for␣many␣servers,␣see␣below).

=back

=head2␣Heterogeneous␣Pages

Ordinarily␣all␣pages␣displayed␣by␣CGI::Push␣share␣a␣common␣MIME␣type.
However␣by␣providing␣a␣value␣of␣"heterogeneous"␣or␣"dynamic"␣in␣the
do_push()␣-type␣parameter,␣you␣can␣specify␣the␣MIME␣type␣of␣each␣page
on␣a␣case-by-case␣basis.␣␣

If␣you␣use␣this␣option,␣you␣will␣be␣responsible␣for␣producing␣the
HTTP␣header␣for␣each␣page.␣␣Simply␣modify␣your␣draw␣routine␣to
look␣like␣this:

␣␣␣␣sub␣my_draw_routine␣{
␣␣␣␣␣␣␣␣my($q,$counter)␣=␣@_;
␣␣␣␣␣␣␣␣return␣header('text/html'),␣␣␣#␣note␣we're␣producing␣the␣header␣here
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣start_html('testing'),
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣h1('testing'),
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣"This␣page␣called␣$counter␣times";
␣␣␣␣}

You␣can␣add␣any␣header␣fields␣that␣you␣like,␣but␣some␣(cookies␣and
status␣fields␣included)␣may␣not␣be␣interpreted␣by␣the␣browser.␣␣One
interesting␣effect␣is␣to␣display␣a␣series␣of␣pages,␣then,␣after␣the
last␣page,␣to␣redirect␣the␣browser␣to␣a␣new␣URL.␣␣Because␣redirect()␣
does␣b<not>␣work,␣the␣easiest␣way␣is␣with␣a␣-refresh␣header␣field,
as␣shown␣below:

␣␣␣␣sub␣my_draw_routine␣{
␣␣␣␣␣␣␣␣my($q,$counter)␣=␣@_;
␣␣␣␣␣␣␣␣return␣undef␣if␣$counter␣>␣10;
␣␣␣␣␣␣␣␣return␣header('text/html'),␣␣␣#␣note␣we're␣producing␣the␣header␣here
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣start_html('testing'),
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣h1('testing'),
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣"This␣page␣called␣$counter␣times";
␣␣␣␣}

␣␣␣␣sub␣my_last_page␣{
␣␣␣␣␣␣␣␣return␣header(-refresh=>'5;␣URL=http://somewhere.else/finished.html',
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣-type=>'text/html'),
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣start_html('Moved'),
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣h1('This␣is␣the␣last␣page'),
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣'Goodbye!'
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣hr,
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣end_html;␣
␣␣␣␣}

=head2␣Changing␣the␣Page␣Delay␣on␣the␣Fly

If␣you␣would␣like␣to␣control␣the␣delay␣between␣pages␣on␣a␣page-by-page
basis,␣call␣push_delay()␣from␣within␣your␣draw␣routine.␣␣push_delay()
takes␣a␣single␣numeric␣argument␣representing␣the␣number␣of␣seconds␣you
wish␣to␣delay␣after␣the␣current␣page␣is␣displayed␣and␣before
displaying␣the␣next␣one.␣␣The␣delay␣may␣be␣fractional.␣␣Without
parameters,␣push_delay()␣just␣returns␣the␣current␣delay.

=head1␣INSTALLING␣CGI::Push␣SCRIPTS

Server␣push␣scripts␣must␣be␣installed␣as␣no-parsed-header␣(NPH)
scripts␣in␣order␣to␣work␣correctly␣on␣many␣servers.␣␣On␣Unix␣systems,
this␣is␣most␣often␣accomplished␣by␣prefixing␣the␣script's␣name␣with␣"nph-".␣␣
Recognition␣of␣NPH␣scripts␣happens␣automatically␣with␣WebSTAR␣and␣
Microsoft␣IIS.␣␣Users␣of␣other␣servers␣should␣see␣their␣documentation
for␣help.

Apache␣web␣server␣from␣version␣1.3b2␣on␣does␣not␣need␣server
push␣scripts␣installed␣as␣NPH␣scripts:␣the␣-nph␣parameter␣to␣do_push()
may␣be␣set␣to␣a␣false␣value␣to␣disable␣the␣extra␣headers␣needed␣by␣an
NPH␣script.

=head1␣AUTHOR␣INFORMATION

Copyright␣1995-1998,␣Lincoln␣D.␣Stein.␣␣All␣rights␣reserved.␣␣

This␣library␣is␣free␣software;␣you␣can␣redistribute␣it␣and/or␣modify
it␣under␣the␣same␣terms␣as␣Perl␣itself.

Address␣bug␣reports␣and␣comments␣to:␣lstein@cshl.org

=head1␣BUGS

This␣section␣intentionally␣left␣blank.

=head1␣SEE␣ALSO

L<CGI::Carp>,␣L<CGI>

=cut
----------
Range: (1621734,1630743) (9009)
=head1␣NAME

CGI::Cookie␣-␣Interface␣to␣Netscape␣Cookies

=head1␣SYNOPSIS

␣␣␣␣use␣CGI␣qw/:standard/;
␣␣␣␣use␣CGI::Cookie;

␣␣␣␣#␣Create␣new␣cookies␣and␣send␣them
␣␣␣␣$cookie1␣=␣new␣CGI::Cookie(-name=>'ID',-value=>123456);
␣␣␣␣$cookie2␣=␣new␣CGI::Cookie(-name=>'preferences',
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣-value=>{␣font␣=>␣Helvetica,
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣size␣=>␣12␣}␣
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣);
␣␣␣␣print␣header(-cookie=>[$cookie1,$cookie2]);

␣␣␣␣#␣fetch␣existing␣cookies
␣␣␣␣%cookies␣=␣fetch␣CGI::Cookie;
␣␣␣␣$id␣=␣$cookies{'ID'}->value;

␣␣␣␣#␣create␣cookies␣returned␣from␣an␣external␣source
␣␣␣␣%cookies␣=␣parse␣CGI::Cookie($ENV{COOKIE});

=head1␣DESCRIPTION

CGI::Cookie␣is␣an␣interface␣to␣Netscape␣(HTTP/1.1)␣cookies,␣an
innovation␣that␣allows␣Web␣servers␣to␣store␣persistent␣information␣on
the␣browser's␣side␣of␣the␣connection.␣␣Although␣CGI::Cookie␣is
intended␣to␣be␣used␣in␣conjunction␣with␣CGI.pm␣(and␣is␣in␣fact␣used␣by
it␣internally),␣you␣can␣use␣this␣module␣independently.

For␣full␣information␣on␣cookies␣see␣

	http://www.ics.uci.edu/pub/ietf/http/rfc2109.txt

=head1␣USING␣CGI::Cookie

CGI::Cookie␣is␣object␣oriented.␣␣Each␣cookie␣object␣has␣a␣name␣and␣a
value.␣␣The␣name␣is␣any␣scalar␣value.␣␣The␣value␣is␣any␣scalar␣or
array␣value␣(associative␣arrays␣are␣also␣allowed).␣␣Cookies␣also␣have
several␣optional␣attributes,␣including:

=over␣4

=item␣B<1.␣expiration␣date>

The␣expiration␣date␣tells␣the␣browser␣how␣long␣to␣hang␣on␣to␣the
cookie.␣␣If␣the␣cookie␣specifies␣an␣expiration␣date␣in␣the␣future,␣the
browser␣will␣store␣the␣cookie␣information␣in␣a␣disk␣file␣and␣return␣it
to␣the␣server␣every␣time␣the␣user␣reconnects␣(until␣the␣expiration
date␣is␣reached).␣␣If␣the␣cookie␣species␣an␣expiration␣date␣in␣the
past,␣the␣browser␣will␣remove␣the␣cookie␣from␣the␣disk␣file.␣␣If␣the
expiration␣date␣is␣not␣specified,␣the␣cookie␣will␣persist␣only␣until
the␣user␣quits␣the␣browser.

=item␣B<2.␣domain>

This␣is␣a␣partial␣or␣complete␣domain␣name␣for␣which␣the␣cookie␣is␣
valid.␣␣The␣browser␣will␣return␣the␣cookie␣to␣any␣host␣that␣matches
the␣partial␣domain␣name.␣␣For␣example,␣if␣you␣specify␣a␣domain␣name
of␣".capricorn.com",␣then␣Netscape␣will␣return␣the␣cookie␣to
Web␣servers␣running␣on␣any␣of␣the␣machines␣"www.capricorn.com",␣
"ftp.capricorn.com",␣"feckless.capricorn.com",␣etc.␣␣Domain␣names
must␣contain␣at␣least␣two␣periods␣to␣prevent␣attempts␣to␣match
on␣top␣level␣domains␣like␣".edu".␣␣If␣no␣domain␣is␣specified,␣then
the␣browser␣will␣only␣return␣the␣cookie␣to␣servers␣on␣the␣host␣the
cookie␣originated␣from.

=item␣B<3.␣path>

If␣you␣provide␣a␣cookie␣path␣attribute,␣the␣browser␣will␣check␣it
against␣your␣script's␣URL␣before␣returning␣the␣cookie.␣␣For␣example,
if␣you␣specify␣the␣path␣"/cgi-bin",␣then␣the␣cookie␣will␣be␣returned
to␣each␣of␣the␣scripts␣"/cgi-bin/tally.pl",␣"/cgi-bin/order.pl",␣and
"/cgi-bin/customer_service/complain.pl",␣but␣not␣to␣the␣script
"/cgi-private/site_admin.pl".␣␣By␣default,␣the␣path␣is␣set␣to␣"/",␣so
that␣all␣scripts␣at␣your␣site␣will␣receive␣the␣cookie.

=item␣B<4.␣secure␣flag>

If␣the␣"secure"␣attribute␣is␣set,␣the␣cookie␣will␣only␣be␣sent␣to␣your
script␣if␣the␣CGI␣request␣is␣occurring␣on␣a␣secure␣channel,␣such␣as␣SSL.

=item␣B<4.␣httponly␣flag>

If␣the␣"httponly"␣attribute␣is␣set,␣the␣cookie␣will␣only␣be␣accessible
through␣HTTP␣Requests.␣This␣cookie␣will␣be␣inaccessible␣via␣JavaScript
(to␣prevent␣XSS␣attacks).

But,␣currently␣this␣feature␣only␣used␣and␣recognised␣by␣
MS␣Internet␣Explorer␣6␣Service␣Pack␣1␣and␣later.

See␣this␣URL␣for␣more␣information:

L<http://msdn.microsoft.com/en-us/library/ms533046%28VS.85%29.aspx>

=back

=head2␣Creating␣New␣Cookies

	my␣$c␣=␣new␣CGI::Cookie(-name␣␣␣␣=>␣␣'foo',
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣-value␣␣␣=>␣␣'bar',
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣-expires␣=>␣␣'+3M',
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣-domain␣␣=>␣␣'.capricorn.com',
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣-path␣␣␣␣=>␣␣'/cgi-bin/database',
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣-secure␣␣=>␣␣1
	␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣);

Create␣cookies␣from␣scratch␣with␣the␣B<new>␣method.␣␣The␣B<-name>␣and
B<-value>␣parameters␣are␣required.␣␣The␣name␣must␣be␣a␣scalar␣value.
The␣value␣can␣be␣a␣scalar,␣an␣array␣reference,␣or␣a␣hash␣reference.
(At␣some␣point␣in␣the␣future␣cookies␣will␣support␣one␣of␣the␣Perl
object␣serialization␣protocols␣for␣full␣generality).

B<-expires>␣accepts␣any␣of␣the␣relative␣or␣absolute␣date␣formats
recognized␣by␣CGI.pm,␣for␣example␣"+3M"␣for␣three␣months␣in␣the
future.␣␣See␣CGI.pm's␣documentation␣for␣details.

B<-domain>␣points␣to␣a␣domain␣name␣or␣to␣a␣fully␣qualified␣host␣name.
If␣not␣specified,␣the␣cookie␣will␣be␣returned␣only␣to␣the␣Web␣server
that␣created␣it.

B<-path>␣points␣to␣a␣partial␣URL␣on␣the␣current␣server.␣␣The␣cookie
will␣be␣returned␣to␣all␣URLs␣beginning␣with␣the␣specified␣path.␣␣If
not␣specified,␣it␣defaults␣to␣'/',␣which␣returns␣the␣cookie␣to␣all
pages␣at␣your␣site.

B<-secure>␣if␣set␣to␣a␣true␣value␣instructs␣the␣browser␣to␣return␣the
cookie␣only␣when␣a␣cryptographic␣protocol␣is␣in␣use.

B<-httponly>␣if␣set␣to␣a␣true␣value,␣the␣cookie␣will␣not␣be␣accessible
via␣JavaScript.

For␣compatibility␣with␣Apache::Cookie,␣you␣may␣optionally␣pass␣in
a␣mod_perl␣request␣object␣as␣the␣first␣argument␣to␣C<new()>.␣It␣will
simply␣be␣ignored:

␣␣my␣$c␣=␣new␣CGI::Cookie($r,
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣-name␣␣␣␣=>␣␣'foo',
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣-value␣␣␣=>␣␣['bar','baz']);

=head2␣Sending␣the␣Cookie␣to␣the␣Browser

The␣simplest␣way␣to␣send␣a␣cookie␣to␣the␣browser␣is␣by␣calling␣the␣bake()
method:

␣␣$c->bake;

Under␣mod_perl,␣pass␣in␣an␣Apache␣request␣object:

␣␣$c->bake($r);

If␣you␣want␣to␣set␣the␣cookie␣yourself,␣Within␣a␣CGI␣script␣you␣can␣send
a␣cookie␣to␣the␣browser␣by␣creating␣one␣or␣more␣Set-Cookie:␣fields␣in␣the
HTTP␣header.␣␣Here␣is␣a␣typical␣sequence:

␣␣my␣$c␣=␣new␣CGI::Cookie(-name␣␣␣␣=>␣␣'foo',
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣-value␣␣␣=>␣␣['bar','baz'],
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣-expires␣=>␣␣'+3M');

␣␣print␣"Set-Cookie:␣$c\n";
␣␣print␣"Content-Type:␣text/html\n\n";

To␣send␣more␣than␣one␣cookie,␣create␣several␣Set-Cookie:␣fields.

If␣you␣are␣using␣CGI.pm,␣you␣send␣cookies␣by␣providing␣a␣-cookie
argument␣to␣the␣header()␣method:

␣␣print␣header(-cookie=>$c);

Mod_perl␣users␣can␣set␣cookies␣using␣the␣request␣object's␣header_out()
method:

␣␣$r->headers_out->set('Set-Cookie'␣=>␣$c);

Internally,␣Cookie␣overloads␣the␣""␣operator␣to␣call␣its␣as_string()
method␣when␣incorporated␣into␣the␣HTTP␣header.␣␣as_string()␣turns␣the
Cookie's␣internal␣representation␣into␣an␣RFC-compliant␣text
representation.␣␣You␣may␣call␣as_string()␣yourself␣if␣you␣prefer:

␣␣print␣"Set-Cookie:␣",$c->as_string,"\n";

=head2␣Recovering␣Previous␣Cookies

	%cookies␣=␣fetch␣CGI::Cookie;

B<fetch>␣returns␣an␣associative␣array␣consisting␣of␣all␣cookies
returned␣by␣the␣browser.␣␣The␣keys␣of␣the␣array␣are␣the␣cookie␣names.␣␣You
can␣iterate␣through␣the␣cookies␣this␣way:

	%cookies␣=␣fetch␣CGI::Cookie;
	foreach␣(keys␣%cookies)␣{
	␣␣␣do_something($cookies{$_});
␣␣␣␣␣␣␣␣}

In␣a␣scalar␣context,␣fetch()␣returns␣a␣hash␣reference,␣which␣may␣be␣more
efficient␣if␣you␣are␣manipulating␣multiple␣cookies.

CGI.pm␣uses␣the␣URL␣escaping␣methods␣to␣save␣and␣restore␣reserved␣characters
in␣its␣cookies.␣␣If␣you␣are␣trying␣to␣retrieve␣a␣cookie␣set␣by␣a␣foreign␣server,
this␣escaping␣method␣may␣trip␣you␣up.␣␣Use␣raw_fetch()␣instead,␣which␣has␣the
same␣semantics␣as␣fetch(),␣but␣performs␣no␣unescaping.

You␣may␣also␣retrieve␣cookies␣that␣were␣stored␣in␣some␣external
form␣using␣the␣parse()␣class␣method:

␣␣␣␣␣␣␣$COOKIES␣=␣`cat␣/usr/tmp/Cookie_stash`;
␣␣␣␣␣␣␣%cookies␣=␣parse␣CGI::Cookie($COOKIES);

If␣you␣are␣in␣a␣mod_perl␣environment,␣you␣can␣save␣some␣overhead␣by
passing␣the␣request␣object␣to␣fetch()␣like␣this:

␣␣␣CGI::Cookie->fetch($r);

=head2␣Manipulating␣Cookies

Cookie␣objects␣have␣a␣series␣of␣accessor␣methods␣to␣get␣and␣set␣cookie
attributes.␣␣Each␣accessor␣has␣a␣similar␣syntax.␣␣Called␣without
arguments,␣the␣accessor␣returns␣the␣current␣value␣of␣the␣attribute.
Called␣with␣an␣argument,␣the␣accessor␣changes␣the␣attribute␣and
returns␣its␣new␣value.

=over␣4

=item␣B<name()>

Get␣or␣set␣the␣cookie's␣name.␣␣Example:

	$name␣=␣$c->name;
	$new_name␣=␣$c->name('fred');

=item␣B<value()>

Get␣or␣set␣the␣cookie's␣value.␣␣Example:

	$value␣=␣$c->value;
	@new_value␣=␣$c->value(['a','b','c','d']);

B<value()>␣is␣context␣sensitive.␣␣In␣a␣list␣context␣it␣will␣return
the␣current␣value␣of␣the␣cookie␣as␣an␣array.␣␣In␣a␣scalar␣context␣it
will␣return␣the␣B<first>␣value␣of␣a␣multivalued␣cookie.

=item␣B<domain()>

Get␣or␣set␣the␣cookie's␣domain.

=item␣B<path()>

Get␣or␣set␣the␣cookie's␣path.

=item␣B<expires()>

Get␣or␣set␣the␣cookie's␣expiration␣time.

=back


=head1␣AUTHOR␣INFORMATION

Copyright␣1997-1998,␣Lincoln␣D.␣Stein.␣␣All␣rights␣reserved.␣␣

This␣library␣is␣free␣software;␣you␣can␣redistribute␣it␣and/or␣modify
it␣under␣the␣same␣terms␣as␣Perl␣itself.

Address␣bug␣reports␣and␣comments␣to:␣lstein@cshl.org

=head1␣BUGS

This␣section␣intentionally␣left␣blank.

=head1␣SEE␣ALSO

L<CGI::Carp>,␣L<CGI>

=cut
----------
Range: (1666969,1670257) (3288)
=head1␣NAME

Thread::Semaphore␣-␣Thread-safe␣semaphores

=head1␣VERSION

This␣document␣describes␣Thread::Semaphore␣version␣2.09

=head1␣SYNOPSIS

␣␣␣␣use␣Thread::Semaphore;
␣␣␣␣my␣$s␣=␣Thread::Semaphore->new();
␣␣␣␣$s->down();␣␣␣#␣Also␣known␣as␣the␣semaphore␣P␣operation.
␣␣␣␣#␣The␣guarded␣section␣is␣here
␣␣␣␣$s->up();␣␣␣␣␣#␣Also␣known␣as␣the␣semaphore␣V␣operation.

␣␣␣␣#␣The␣default␣semaphore␣value␣is␣1
␣␣␣␣my␣$s␣=␣Thread::Semaphore-new($initial_value);
␣␣␣␣$s->down($down_value);
␣␣␣␣$s->up($up_value);

=head1␣DESCRIPTION

Semaphores␣provide␣a␣mechanism␣to␣regulate␣access␣to␣resources.␣␣Unlike
locks,␣semaphores␣aren't␣tied␣to␣particular␣scalars,␣and␣so␣may␣be␣used␣to
control␣access␣to␣anything␣you␣care␣to␣use␣them␣for.

Semaphores␣don't␣limit␣their␣values␣to␣zero␣and␣one,␣so␣they␣can␣be␣used␣to
control␣access␣to␣some␣resource␣that␣there␣may␣be␣more␣than␣one␣of␣(e.g.,
filehandles).␣␣Increment␣and␣decrement␣amounts␣aren't␣fixed␣at␣one␣either,
so␣threads␣can␣reserve␣or␣return␣multiple␣resources␣at␣once.

=head1␣METHODS

=over␣8

=item␣->new()

=item␣->new(NUMBER)

C<new>␣creates␣a␣new␣semaphore,␣and␣initializes␣its␣count␣to␣the␣specified
number␣(which␣must␣be␣an␣integer).␣␣If␣no␣number␣is␣specified,␣the
semaphore's␣count␣defaults␣to␣1.

=item␣->down()

=item␣->down(NUMBER)

The␣C<down>␣method␣decreases␣the␣semaphore's␣count␣by␣the␣specified␣number
(which␣must␣be␣an␣integer␣>=␣1),␣or␣by␣one␣if␣no␣number␣is␣specified.

If␣the␣semaphore's␣count␣would␣drop␣below␣zero,␣this␣method␣will␣block
until␣such␣time␣as␣the␣semaphore's␣count␣is␣greater␣than␣or␣equal␣to␣the
amount␣you're␣C<down>ing␣the␣semaphore's␣count␣by.

This␣is␣the␣semaphore␣"P␣operation"␣(the␣name␣derives␣from␣the␣Dutch
word␣"pak",␣which␣means␣"capture"␣--␣the␣semaphore␣operations␣were
named␣by␣the␣late␣Dijkstra,␣who␣was␣Dutch).

=item␣->up()

=item␣->up(NUMBER)

The␣C<up>␣method␣increases␣the␣semaphore's␣count␣by␣the␣number␣specified
(which␣must␣be␣an␣integer␣>=␣1),␣or␣by␣one␣if␣no␣number␣is␣specified.

This␣will␣unblock␣any␣thread␣that␣is␣blocked␣trying␣to␣C<down>␣the
semaphore␣if␣the␣C<up>␣raises␣the␣semaphore's␣count␣above␣the␣amount␣that
the␣C<down>␣is␣trying␣to␣decrement␣it␣by.␣␣For␣example,␣if␣three␣threads
are␣blocked␣trying␣to␣C<down>␣a␣semaphore␣by␣one,␣and␣another␣thread␣C<up>s
the␣semaphore␣by␣two,␣then␣two␣of␣the␣blocked␣threads␣(which␣two␣is
indeterminate)␣will␣become␣unblocked.

This␣is␣the␣semaphore␣"V␣operation"␣(the␣name␣derives␣from␣the␣Dutch
word␣"vrij",␣which␣means␣"release").

=back

=head1␣NOTES

Semaphores␣created␣by␣L<Thread::Semaphore>␣can␣be␣used␣in␣both␣threaded␣and
non-threaded␣applications.␣␣This␣allows␣you␣to␣write␣modules␣and␣packages
that␣potentially␣make␣use␣of␣semaphores,␣and␣that␣will␣function␣in␣either
environment.

=head1␣SEE␣ALSO

Thread::Semaphore␣Discussion␣Forum␣on␣CPAN:
L<http://www.cpanforum.com/dist/Thread-Semaphore>

Annotated␣POD␣for␣Thread::Semaphore:
L<http://annocpan.org/~JDHEDDEN/Thread-Semaphore-2.09/lib/Thread/Semaphore.pm>

Source␣repository:
L<http://code.google.com/p/thread-semaphore/>

L<threads>,␣L<threads::shared>

=head1␣MAINTAINER

Jerry␣D.␣Hedden,␣S<E<lt>jdhedden␣AT␣cpan␣DOT␣orgE<gt>>

=head1␣LICENSE

This␣program␣is␣free␣software;␣you␣can␣redistribute␣it␣and/or␣modify␣it␣under
the␣same␣terms␣as␣Perl␣itself.

=cut
----------
Range: (1674730,1682414) (7684)
=head1␣NAME

Thread::Queue␣-␣Thread-safe␣queues

=head1␣VERSION

This␣document␣describes␣Thread::Queue␣version␣2.11

=head1␣SYNOPSIS

␣␣␣␣use␣strict;
␣␣␣␣use␣warnings;

␣␣␣␣use␣threads;
␣␣␣␣use␣Thread::Queue;

␣␣␣␣my␣$q␣=␣Thread::Queue->new();␣␣␣␣#␣A␣new␣empty␣queue

␣␣␣␣#␣Worker␣thread
␣␣␣␣my␣$thr␣=␣threads->create(sub␣{
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣while␣(my␣$item␣=␣$q->dequeue())␣{
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣Do␣work␣on␣$item
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣}
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣})->detach();

␣␣␣␣#␣Send␣work␣to␣the␣thread
␣␣␣␣$q->enqueue($item1,␣...);


␣␣␣␣#␣Count␣of␣items␣in␣the␣queue
␣␣␣␣my␣$left␣=␣$q->pending();

␣␣␣␣#␣Non-blocking␣dequeue
␣␣␣␣if␣(defined(my␣$item␣=␣$q->dequeue_nb()))␣{
␣␣␣␣␣␣␣␣#␣Work␣on␣$item
␣␣␣␣}

␣␣␣␣#␣Get␣the␣second␣item␣in␣the␣queue␣without␣dequeuing␣anything
␣␣␣␣my␣$item␣=␣$q->peek(1);

␣␣␣␣#␣Insert␣two␣items␣into␣the␣queue␣just␣behind␣the␣head
␣␣␣␣$q->insert(1,␣$item1,␣$item2);

␣␣␣␣#␣Extract␣the␣last␣two␣items␣on␣the␣queue
␣␣␣␣my␣($item1,␣$item2)␣=␣$q->extract(-2,␣2);

=head1␣DESCRIPTION

This␣module␣provides␣thread-safe␣FIFO␣queues␣that␣can␣be␣accessed␣safely␣by
any␣number␣of␣threads.

Any␣data␣types␣supported␣by␣L<threads::shared>␣can␣be␣passed␣via␣queues:

=over

=item␣Ordinary␣scalars

=item␣Array␣refs

=item␣Hash␣refs

=item␣Scalar␣refs

=item␣Objects␣based␣on␣the␣above

=back

Ordinary␣scalars␣are␣added␣to␣queues␣as␣they␣are.

If␣not␣already␣thread-shared,␣the␣other␣complex␣data␣types␣will␣be␣cloned
(recursively,␣if␣needed,␣and␣including␣any␣C<bless>ings␣and␣read-only
settings)␣into␣thread-shared␣structures␣before␣being␣placed␣onto␣a␣queue.

For␣example,␣the␣following␣would␣cause␣L<Thread::Queue>␣to␣create␣a␣empty,
shared␣array␣reference␣via␣C<&shared([])>,␣copy␣the␣elements␣'foo',␣'bar'
and␣'baz'␣from␣C<@ary>␣into␣it,␣and␣then␣place␣that␣shared␣reference␣onto
the␣queue:

␣␣␣␣my␣@ary␣=␣qw/foo␣bar␣baz/;
␣␣␣␣$q->enqueue(\@ary);

However,␣for␣the␣following,␣the␣items␣are␣already␣shared,␣so␣their␣references
are␣added␣directly␣to␣the␣queue,␣and␣no␣cloning␣takes␣place:

␣␣␣␣my␣@ary␣:shared␣=␣qw/foo␣bar␣baz/;
␣␣␣␣$q->enqueue(\@ary);

␣␣␣␣my␣$obj␣=␣&shared({});
␣␣␣␣$$obj{'foo'}␣=␣'bar';
␣␣␣␣$$obj{'qux'}␣=␣99;
␣␣␣␣bless($obj,␣'My::Class');
␣␣␣␣$q->enqueue($obj);

See␣L</"LIMITATIONS">␣for␣caveats␣related␣to␣passing␣objects␣via␣queues.

=head1␣QUEUE␣CREATION

=over

=item␣->new()

Creates␣a␣new␣empty␣queue.

=item␣->new(LIST)

Creates␣a␣new␣queue␣pre-populated␣with␣the␣provided␣list␣of␣items.

=back

=head1␣BASIC␣METHODS

The␣following␣methods␣deal␣with␣queues␣on␣a␣FIFO␣basis.

=over

=item␣->enqueue(LIST)

Adds␣a␣list␣of␣items␣onto␣the␣end␣of␣the␣queue.

=item␣->dequeue()

=item␣->dequeue(COUNT)

Removes␣the␣requested␣number␣of␣items␣(default␣is␣1)␣from␣the␣head␣of␣the
queue,␣and␣returns␣them.␣␣If␣the␣queue␣contains␣fewer␣than␣the␣requested
number␣of␣items,␣then␣the␣thread␣will␣be␣blocked␣until␣the␣requisite␣number
of␣items␣are␣available␣(i.e.,␣until␣other␣threads␣<enqueue>␣more␣items).

=item␣->dequeue_nb()

=item␣->dequeue_nb(COUNT)

Removes␣the␣requested␣number␣of␣items␣(default␣is␣1)␣from␣the␣head␣of␣the
queue,␣and␣returns␣them.␣␣If␣the␣queue␣contains␣fewer␣than␣the␣requested
number␣of␣items,␣then␣it␣immediately␣(i.e.,␣non-blocking)␣returns␣whatever
items␣there␣are␣on␣the␣queue.␣␣If␣the␣queue␣is␣empty,␣then␣C<undef>␣is
returned.

=item␣->pending()

Returns␣the␣number␣of␣items␣still␣in␣the␣queue.

=back

=head1␣ADVANCED␣METHODS

The␣following␣methods␣can␣be␣used␣to␣manipulate␣items␣anywhere␣in␣a␣queue.

To␣prevent␣the␣contents␣of␣a␣queue␣from␣being␣modified␣by␣another␣thread
while␣it␣is␣being␣examined␣and/or␣changed,␣L<lock|threads::shared/"lock
VARIABLE">␣the␣queue␣inside␣a␣local␣block:

␣␣␣␣{
␣␣␣␣␣␣␣␣lock($q);␣␣␣#␣Keep␣other␣threads␣from␣changing␣the␣queue's␣contents
␣␣␣␣␣␣␣␣my␣$item␣=␣$q->peek();
␣␣␣␣␣␣␣␣if␣($item␣...)␣{
␣␣␣␣␣␣␣␣␣␣␣␣...
␣␣␣␣␣␣␣␣}
␣␣␣␣}
␣␣␣␣#␣Queue␣is␣now␣unlocked

=over

=item␣->peek()

=item␣->peek(INDEX)

Returns␣an␣item␣from␣the␣queue␣without␣dequeuing␣anything.␣␣Defaults␣to␣the
the␣head␣of␣queue␣(at␣index␣position␣0)␣if␣no␣index␣is␣specified.␣␣Negative
index␣values␣are␣supported␣as␣with␣L<arrays|perldata/"Subscripts">␣(i.e.,␣-1
is␣the␣end␣of␣the␣queue,␣-2␣is␣next␣to␣last,␣and␣so␣on).

If␣no␣items␣exists␣at␣the␣specified␣index␣(i.e.,␣the␣queue␣is␣empty,␣or␣the
index␣is␣beyond␣the␣number␣of␣items␣on␣the␣queue),␣then␣C<undef>␣is␣returned.

Remember,␣the␣returned␣item␣is␣not␣removed␣from␣the␣queue,␣so␣manipulating␣a
C<peek>ed␣at␣reference␣affects␣the␣item␣on␣the␣queue.

=item␣->insert(INDEX,␣LIST)

Adds␣the␣list␣of␣items␣to␣the␣queue␣at␣the␣specified␣index␣position␣(0
is␣the␣head␣of␣the␣list).␣␣Any␣existing␣items␣at␣and␣beyond␣that␣position␣are
pushed␣back␣past␣the␣newly␣added␣items:

␣␣␣␣$q->enqueue(1,␣2,␣3,␣4);
␣␣␣␣$q->insert(1,␣qw/foo␣bar/);
␣␣␣␣#␣Queue␣now␣contains:␣␣1,␣foo,␣bar,␣2,␣3,␣4

Specifying␣an␣index␣position␣greater␣than␣the␣number␣of␣items␣in␣the␣queue
just␣adds␣the␣list␣to␣the␣end.

Negative␣index␣positions␣are␣supported:

␣␣␣␣$q->enqueue(1,␣2,␣3,␣4);
␣␣␣␣$q->insert(-2,␣qw/foo␣bar/);
␣␣␣␣#␣Queue␣now␣contains:␣␣1,␣2,␣foo,␣bar,␣3,␣4

Specifying␣a␣negative␣index␣position␣greater␣than␣the␣number␣of␣items␣in␣the
queue␣adds␣the␣list␣to␣the␣head␣of␣the␣queue.

=item␣->extract()

=item␣->extract(INDEX)

=item␣->extract(INDEX,␣COUNT)

Removes␣and␣returns␣the␣specified␣number␣of␣items␣(defaults␣to␣1)␣from␣the
specified␣index␣position␣in␣the␣queue␣(0␣is␣the␣head␣of␣the␣queue).␣␣When
called␣with␣no␣arguments,␣C<extract>␣operates␣the␣same␣as␣C<dequeue_nb>.

This␣method␣is␣non-blocking,␣and␣will␣return␣only␣as␣many␣items␣as␣are
available␣to␣fulfill␣the␣request:

␣␣␣␣$q->enqueue(1,␣2,␣3,␣4);
␣␣␣␣my␣$item␣␣=␣$q->extract(2)␣␣␣␣␣#␣Returns␣3
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣Queue␣now␣contains:␣␣1,␣2,␣4
␣␣␣␣my␣@items␣=␣$q->extract(1,␣3)␣␣#␣Returns␣(2,␣4)
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣Queue␣now␣contains:␣␣1

Specifying␣an␣index␣position␣greater␣than␣the␣number␣of␣items␣in␣the
queue␣results␣in␣C<undef>␣or␣an␣empty␣list␣being␣returned.

␣␣␣␣$q->enqueue('foo');
␣␣␣␣my␣$nada␣=␣$q->extract(3)␣␣␣␣␣␣#␣Returns␣undef
␣␣␣␣my␣@nada␣=␣$q->extract(1,␣3)␣␣␣#␣Returns␣()

Negative␣index␣positions␣are␣supported.␣␣Specifying␣a␣negative␣index␣position
greater␣than␣the␣number␣of␣items␣in␣the␣queue␣may␣return␣items␣from␣the␣head
of␣the␣queue␣(similar␣to␣C<dequeue_nb>)␣if␣the␣count␣overlaps␣the␣head␣of␣the
queue␣from␣the␣specified␣position␣(i.e.␣if␣queue␣size␣+␣index␣+␣count␣is
greater␣than␣zero):

␣␣␣␣$q->enqueue(qw/foo␣bar␣baz/);
␣␣␣␣my␣@nada␣=␣$q->extract(-6,␣2);␣␣␣#␣Returns␣()␣␣␣␣␣␣␣␣␣-␣(3+(-6)+2)␣<=␣0
␣␣␣␣my␣@some␣=␣$q->extract(-6,␣4);␣␣␣#␣Returns␣(foo)␣␣␣␣␣␣-␣(3+(-6)+4)␣>␣0
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣Queue␣now␣contains:␣␣bar,␣baz
␣␣␣␣my␣@rest␣=␣$q->extract(-3,␣4);␣␣␣#␣Returns␣(bar,␣baz)␣-␣(2+(-3)+4)␣>␣0

=back

=head1␣NOTES

Queues␣created␣by␣L<Thread::Queue>␣can␣be␣used␣in␣both␣threaded␣and
non-threaded␣applications.

=head1␣LIMITATIONS

Passing␣objects␣on␣queues␣may␣not␣work␣if␣the␣objects'␣classes␣do␣not␣support
sharing.␣␣See␣L<threads::shared/"BUGS␣AND␣LIMITATIONS">␣for␣more.

Passing␣array/hash␣refs␣that␣contain␣objects␣may␣not␣work␣for␣Perl␣prior␣to
5.10.0.

=head1␣SEE␣ALSO

Thread::Queue␣Discussion␣Forum␣on␣CPAN:
L<http://www.cpanforum.com/dist/Thread-Queue>

Annotated␣POD␣for␣Thread::Queue:
L<http://annocpan.org/~JDHEDDEN/Thread-Queue-2.11/lib/Thread/Queue.pm>

Source␣repository:
L<http://code.google.com/p/thread-queue/>

L<threads>,␣L<threads::shared>

=head1␣MAINTAINER

Jerry␣D.␣Hedden,␣S<E<lt>jdhedden␣AT␣cpan␣DOT␣orgE<gt>>

=head1␣LICENSE

This␣program␣is␣free␣software;␣you␣can␣redistribute␣it␣and/or␣modify␣it␣under
the␣same␣terms␣as␣Perl␣itself.

=cut
----------
Range: (1682758,1685008) (2250)
=head1␣NAME

AnyDBM_File␣-␣provide␣framework␣for␣multiple␣DBMs

NDBM_File,␣DB_File,␣GDBM_File,␣SDBM_File,␣ODBM_File␣-␣various␣DBM␣implementations

=head1␣SYNOPSIS

␣␣␣␣use␣AnyDBM_File;

=head1␣DESCRIPTION

This␣module␣is␣a␣"pure␣virtual␣base␣class"--it␣has␣nothing␣of␣its␣own.
It's␣just␣there␣to␣inherit␣from␣one␣of␣the␣various␣DBM␣packages.␣␣It
prefers␣ndbm␣for␣compatibility␣reasons␣with␣Perl␣4,␣then␣Berkeley␣DB␣(See
L<DB_File>),␣GDBM,␣SDBM␣(which␣is␣always␣there--it␣comes␣with␣Perl),␣and
finally␣ODBM.␣␣␣This␣way␣old␣programs␣that␣used␣to␣use␣NDBM␣via␣dbmopen()
can␣still␣do␣so,␣but␣new␣ones␣can␣reorder␣@ISA:

␣␣␣␣BEGIN␣{␣@AnyDBM_File::ISA␣=␣qw(DB_File␣GDBM_File␣NDBM_File)␣}
␣␣␣␣use␣AnyDBM_File;

Having␣multiple␣DBM␣implementations␣makes␣it␣trivial␣to␣copy␣database␣formats:

␣␣␣␣use␣POSIX;␣use␣NDBM_File;␣use␣DB_File;
␣␣␣␣tie␣%newhash,␣␣'DB_File',␣$new_filename,␣O_CREAT|O_RDWR;
␣␣␣␣tie␣%oldhash,␣␣'NDBM_File',␣$old_filename,␣1,␣0;
␣␣␣␣%newhash␣=␣%oldhash;

=head2␣DBM␣Comparisons

Here's␣a␣partial␣table␣of␣features␣the␣different␣packages␣offer:

␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣odbm␣␣␣␣ndbm␣␣␣␣sdbm␣␣␣␣gdbm␣␣␣␣bsd-db
			␣----	␣----␣␣␣␣----␣␣␣␣----␣␣␣␣------
␣Linkage␣comes␣w/␣perl␣␣␣yes␣␣␣␣␣yes␣␣␣␣␣yes␣␣␣␣␣yes␣␣␣␣␣yes
␣Src␣comes␣w/␣perl␣␣␣␣␣␣␣no␣␣␣␣␣␣no␣␣␣␣␣␣yes␣␣␣␣␣no␣␣␣␣␣␣no
␣Comes␣w/␣many␣unix␣os␣␣␣yes␣␣␣␣␣yes[0]␣␣no␣␣␣␣␣␣no␣␣␣␣␣␣no
␣Builds␣ok␣on␣!unix␣␣␣␣␣␣?␣␣␣␣␣␣␣?␣␣␣␣␣␣␣yes␣␣␣␣␣yes␣␣␣␣␣?
␣Code␣Size␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣?␣␣␣␣␣␣␣?␣␣␣␣␣␣␣small␣␣␣big␣␣␣␣␣big
␣Database␣Size␣␣␣␣␣␣␣␣␣␣␣?␣␣␣␣␣␣␣?␣␣␣␣␣␣␣small␣␣␣big?␣␣␣␣ok[1]
␣Speed␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣?␣␣␣␣␣␣␣?␣␣␣␣␣␣␣slow␣␣␣␣ok␣␣␣␣␣␣fast
␣FTPable␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣no␣␣␣␣␣␣no␣␣␣␣␣␣yes␣␣␣␣␣yes␣␣␣␣␣yes
␣Easy␣to␣build␣␣␣␣␣␣␣␣␣␣N/A␣␣␣␣␣N/A␣␣␣␣␣␣yes␣␣␣␣␣yes␣␣␣␣␣ok[2]
␣Size␣limits␣␣␣␣␣␣␣␣␣␣␣␣␣1k␣␣␣␣␣␣4k␣␣␣␣␣␣1k[3]␣␣␣none␣␣␣␣none
␣Byte-order␣independent␣␣no␣␣␣␣␣␣no␣␣␣␣␣␣no␣␣␣␣␣␣no␣␣␣␣␣␣yes
␣Licensing␣restrictions␣␣?␣␣␣␣␣␣␣?␣␣␣␣␣␣␣no␣␣␣␣␣␣yes␣␣␣␣␣no


=over␣4

=item␣[0]␣

on␣mixed␣universe␣machines,␣may␣be␣in␣the␣bsd␣compat␣library,
which␣is␣often␣shunned.

=item␣[1]␣

Can␣be␣trimmed␣if␣you␣compile␣for␣one␣access␣method.

=item␣[2]␣

See␣L<DB_File>.␣
Requires␣symbolic␣links.␣␣

=item␣[3]␣

By␣default,␣but␣can␣be␣redefined.

=back

=head1␣SEE␣ALSO

dbm(3),␣ndbm(3),␣DB_File(3),␣L<perldbmfilter>

=cut
----------
Range: (1692517,1694416) (1899)
=head1␣NAME

I18N::Collate␣-␣compare␣8-bit␣scalar␣data␣according␣to␣the␣current␣locale

=head1␣SYNOPSIS

␣␣␣␣use␣I18N::Collate;
␣␣␣␣setlocale(LC_COLLATE,␣'locale-of-your-choice');␣
␣␣␣␣$s1␣=␣I18N::Collate->new("scalar_data_1");
␣␣␣␣$s2␣=␣I18N::Collate->new("scalar_data_2");

=head1␣DESCRIPTION

␣␣***

␣␣WARNING:␣starting␣from␣the␣Perl␣version␣5.003_06
␣␣the␣I18N::Collate␣interface␣for␣comparing␣8-bit␣scalar␣data
␣␣according␣to␣the␣current␣locale

	HAS␣BEEN␣DEPRECATED

␣␣That␣is,␣please␣do␣not␣use␣it␣anymore␣for␣any␣new␣applications
␣␣and␣please␣migrate␣the␣old␣applications␣away␣from␣it␣because␣its
␣␣functionality␣was␣integrated␣into␣the␣Perl␣core␣language␣in␣the
␣␣release␣5.003_06.

␣␣See␣the␣perllocale␣manual␣page␣for␣further␣information.

␣␣***

This␣module␣provides␣you␣with␣objects␣that␣will␣collate␣
according␣to␣your␣national␣character␣set,␣provided␣that␣the␣
POSIX␣setlocale()␣function␣is␣supported␣on␣your␣system.

You␣can␣compare␣$s1␣and␣$s2␣above␣with

␣␣␣␣$s1␣le␣$s2

to␣extract␣the␣data␣itself,␣you'll␣need␣a␣dereference:␣$$s1

This␣module␣uses␣POSIX::setlocale().␣The␣basic␣collation␣conversion␣is
done␣by␣strxfrm()␣which␣terminates␣at␣NUL␣characters␣being␣a␣decent␣C
routine.␣␣collate_xfrm()␣handles␣embedded␣NUL␣characters␣gracefully.

The␣available␣locales␣depend␣on␣your␣operating␣system;␣try␣whether
C<locale␣-a>␣shows␣them␣or␣man␣pages␣for␣"locale"␣or␣"nlsinfo"␣or␣the
direct␣approach␣C<ls␣/usr/lib/nls/loc>␣or␣C<ls␣/usr/lib/nls>␣or
C<ls␣/usr/lib/locale>.␣␣Not␣all␣the␣locales␣that␣your␣vendor␣supports
are␣necessarily␣installed:␣please␣consult␣your␣operating␣system's
documentation␣and␣possibly␣your␣local␣system␣administration.␣␣The
locale␣names␣are␣probably␣something␣like␣C<xx_XX.(ISO)?8859-N>␣or
C<xx_XX.(ISO)?8859N>,␣for␣example␣C<fr_CH.ISO8859-1>␣is␣the␣Swiss␣(CH)
variant␣of␣French␣(fr),␣ISO␣Latin␣(8859)␣1␣(-1)␣which␣is␣the␣Western
European␣character␣set.

=cut
----------
Range: (1717564,1721097) (3533)
=item␣*␣the␣function␣encode_language_tag($lang1)

This␣function,␣if␣given␣a␣language␣tag,␣returns␣an␣encoding␣of␣it␣such
that:

*␣tags␣representing␣different␣languages␣never␣get␣the␣same␣encoding.

*␣tags␣representing␣the␣same␣language␣always␣get␣the␣same␣encoding.

*␣an␣encoding␣of␣a␣formally␣valid␣language␣tag␣always␣is␣a␣string
value␣that␣is␣defined,␣has␣length,␣and␣is␣true␣if␣considered␣as␣a
boolean.

Note␣that␣the␣encoding␣itself␣is␣B<not>␣a␣formally␣valid␣language␣tag.
Note␣also␣that␣you␣cannot,␣currently,␣go␣from␣an␣encoding␣back␣to␣a
language␣tag␣that␣it's␣an␣encoding␣of.

Note␣also␣that␣you␣B<must>␣consider␣the␣encoded␣value␣as␣atomic;␣i.e.,
you␣should␣not␣consider␣it␣as␣anything␣but␣an␣opaque,␣unanalysable
string␣value.␣␣(The␣internals␣of␣the␣encoding␣method␣may␣change␣in
future␣versions,␣as␣the␣language␣tagging␣standard␣changes␣over␣time.)

C<encode_language_tag>␣returns␣undef␣if␣given␣anything␣other␣than␣a
formally␣valid␣language␣tag.

The␣reason␣C<encode_language_tag>␣exists␣is␣because␣different␣language
tags␣may␣represent␣the␣same␣language;␣this␣is␣normally␣treatable␣with
C<same_language_tag>,␣but␣consider␣this␣situation:

You␣have␣a␣data␣file␣that␣expresses␣greetings␣in␣different␣languages.
Its␣format␣is␣"[language␣tag]=[how␣to␣say␣'Hello']",␣like:

␣␣␣␣␣␣␣␣␣␣en-US=Hiho
␣␣␣␣␣␣␣␣␣␣fr=Bonjour
␣␣␣␣␣␣␣␣␣␣i-mingo=Hau'

And␣suppose␣you␣write␣a␣program␣that␣reads␣that␣file␣and␣then␣runs␣as
a␣daemon,␣answering␣client␣requests␣that␣specify␣a␣language␣tag␣and
then␣expect␣the␣string␣that␣says␣how␣to␣greet␣in␣that␣language.␣␣So␣an
interaction␣looks␣like:

␣␣␣␣␣␣␣␣␣␣greeting-client␣asks:␣␣␣␣fr
␣␣␣␣␣␣␣␣␣␣greeting-server␣answers:␣Bonjour

So␣far␣so␣good.␣␣But␣suppose␣the␣way␣you're␣implementing␣this␣is:

␣␣␣␣␣␣␣␣␣␣my␣%greetings;
␣␣␣␣␣␣␣␣␣␣die␣unless␣open(IN,␣"<in.dat");
␣␣␣␣␣␣␣␣␣␣while(<IN>)␣{
␣␣␣␣␣␣␣␣␣␣␣␣chomp;
␣␣␣␣␣␣␣␣␣␣␣␣next␣unless␣/^([^=]+)=(.+)/s;
␣␣␣␣␣␣␣␣␣␣␣␣my($lang,␣$expr)␣=␣($1,␣$2);
␣␣␣␣␣␣␣␣␣␣␣␣$greetings{$lang}␣=␣$expr;
␣␣␣␣␣␣␣␣␣␣}
␣␣␣␣␣␣␣␣␣␣close(IN);

at␣which␣point␣%greetings␣has␣the␣contents:

␣␣␣␣␣␣␣␣␣␣"en-US"␣␣␣=>␣"Hiho"
␣␣␣␣␣␣␣␣␣␣"fr"␣␣␣␣␣␣=>␣"Bonjour"
␣␣␣␣␣␣␣␣␣␣"i-mingo"␣=>␣"Hau'"

And␣suppose␣then␣that␣you␣answer␣client␣requests␣for␣language␣$wanted
by␣just␣looking␣up␣$greetings{$wanted}.

If␣the␣client␣asks␣for␣"fr",␣that␣will␣look␣up␣successfully␣in
%greetings,␣to␣the␣value␣"Bonjour".␣␣And␣if␣the␣client␣asks␣for
"i-mingo",␣that␣will␣look␣up␣successfully␣in␣%greetings,␣to␣the␣value
"Hau'".

But␣if␣the␣client␣asks␣for␣"i-Mingo"␣or␣"x-mingo",␣or␣"Fr",␣then␣the
lookup␣in␣%greetings␣fails.␣␣That's␣the␣Wrong␣Thing.

You␣could␣instead␣do␣lookups␣on␣$wanted␣with:

␣␣␣␣␣␣␣␣␣␣use␣I18N::LangTags␣qw(same_language_tag);
␣␣␣␣␣␣␣␣␣␣my␣$response␣=␣'';
␣␣␣␣␣␣␣␣␣␣foreach␣my␣$l2␣(keys␣%greetings)␣{
␣␣␣␣␣␣␣␣␣␣␣␣if(same_language_tag($wanted,␣$l2))␣{
␣␣␣␣␣␣␣␣␣␣␣␣␣␣$response␣=␣$greetings{$l2};
␣␣␣␣␣␣␣␣␣␣␣␣␣␣last;
␣␣␣␣␣␣␣␣␣␣␣␣}
␣␣␣␣␣␣␣␣␣␣}

But␣that's␣rather␣inefficient.␣␣A␣better␣way␣to␣do␣it␣is␣to␣start␣your
program␣with:

␣␣␣␣␣␣␣␣␣␣use␣I18N::LangTags␣qw(encode_language_tag);
␣␣␣␣␣␣␣␣␣␣my␣%greetings;
␣␣␣␣␣␣␣␣␣␣die␣unless␣open(IN,␣"<in.dat");
␣␣␣␣␣␣␣␣␣␣while(<IN>)␣{
␣␣␣␣␣␣␣␣␣␣␣␣chomp;
␣␣␣␣␣␣␣␣␣␣␣␣next␣unless␣/^([^=]+)=(.+)/s;
␣␣␣␣␣␣␣␣␣␣␣␣my($lang,␣$expr)␣=␣($1,␣$2);
␣␣␣␣␣␣␣␣␣␣␣␣$greetings{
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣encode_language_tag($lang)
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣}␣=␣$expr;
␣␣␣␣␣␣␣␣␣␣}
␣␣␣␣␣␣␣␣␣␣close(IN);

and␣then␣just␣answer␣client␣requests␣for␣language␣$wanted␣by␣just
looking␣up

␣␣␣␣␣␣␣␣␣␣$greetings{encode_language_tag($wanted)}

And␣that␣does␣the␣Right␣Thing.

=cut
----------
Range: (1747254,1753702) (6448)
=head1␣NAME

Pod::Select,␣podselect()␣-␣extract␣selected␣sections␣of␣POD␣from␣input

=head1␣SYNOPSIS

␣␣␣␣use␣Pod::Select;

␣␣␣␣##␣Select␣all␣the␣POD␣sections␣for␣each␣file␣in␣@filelist
␣␣␣␣##␣and␣print␣the␣result␣on␣standard␣output.
␣␣␣␣podselect(@filelist);

␣␣␣␣##␣Same␣as␣above,␣but␣write␣to␣tmp.out
␣␣␣␣podselect({-output␣=>␣"tmp.out"},␣@filelist):

␣␣␣␣##␣Select␣from␣the␣given␣filelist,␣only␣those␣POD␣sections␣that␣are
␣␣␣␣##␣within␣a␣1st␣level␣section␣named␣any␣of:␣NAME,␣SYNOPSIS,␣OPTIONS.
␣␣␣␣podselect({-sections␣=>␣["NAME|SYNOPSIS",␣"OPTIONS"]},␣@filelist):

␣␣␣␣##␣Select␣the␣"DESCRIPTION"␣section␣of␣the␣PODs␣from␣STDIN␣and␣write
␣␣␣␣##␣the␣result␣to␣STDERR.
␣␣␣␣podselect({-output␣=>␣">&STDERR",␣-sections␣=>␣["DESCRIPTION"]},␣\*STDIN);

or

␣␣␣␣use␣Pod::Select;

␣␣␣␣##␣Create␣a␣parser␣object␣for␣selecting␣POD␣sections␣from␣the␣input
␣␣␣␣$parser␣=␣new␣Pod::Select();

␣␣␣␣##␣Select␣all␣the␣POD␣sections␣for␣each␣file␣in␣@filelist
␣␣␣␣##␣and␣print␣the␣result␣to␣tmp.out.
␣␣␣␣$parser->parse_from_file("<&STDIN",␣"tmp.out");

␣␣␣␣##␣Select␣from␣the␣given␣filelist,␣only␣those␣POD␣sections␣that␣are
␣␣␣␣##␣within␣a␣1st␣level␣section␣named␣any␣of:␣NAME,␣SYNOPSIS,␣OPTIONS.
␣␣␣␣$parser->select("NAME|SYNOPSIS",␣"OPTIONS");
␣␣␣␣for␣(@filelist)␣{␣$parser->parse_from_file($_);␣}

␣␣␣␣##␣Select␣the␣"DESCRIPTION"␣and␣"SEE␣ALSO"␣sections␣of␣the␣PODs␣from
␣␣␣␣##␣STDIN␣and␣write␣the␣result␣to␣STDERR.
␣␣␣␣$parser->select("DESCRIPTION");
␣␣␣␣$parser->add_selection("SEE␣ALSO");
␣␣␣␣$parser->parse_from_filehandle(\*STDIN,␣\*STDERR);

=head1␣REQUIRES

perl5.005,␣Pod::Parser,␣Exporter,␣Carp

=head1␣EXPORTS

podselect()

=head1␣DESCRIPTION

B<podselect()>␣is␣a␣function␣which␣will␣extract␣specified␣sections␣of
pod␣documentation␣from␣an␣input␣stream.␣This␣ability␣is␣provided␣by␣the
B<Pod::Select>␣module␣which␣is␣a␣subclass␣of␣B<Pod::Parser>.
B<Pod::Select>␣provides␣a␣method␣named␣B<select()>␣to␣specify␣the␣set␣of
POD␣sections␣to␣select␣for␣processing/printing.␣B<podselect()>␣merely
creates␣a␣B<Pod::Select>␣object␣and␣then␣invokes␣the␣B<podselect()>
followed␣by␣B<parse_from_file()>.

=head1␣SECTION␣SPECIFICATIONS

B<podselect()>␣and␣B<Pod::Select::select()>␣may␣be␣given␣one␣or␣more
"section␣specifications"␣to␣restrict␣the␣text␣processed␣to␣only␣the
desired␣set␣of␣sections␣and␣their␣corresponding␣subsections.␣␣A␣section
specification␣is␣a␣string␣containing␣one␣or␣more␣Perl-style␣regular
expressions␣separated␣by␣forward␣slashes␣("/").␣␣If␣you␣need␣to␣use␣a
forward␣slash␣literally␣within␣a␣section␣title␣you␣can␣escape␣it␣with␣a
backslash␣("\/").

The␣formal␣syntax␣of␣a␣section␣specification␣is:

=over␣4

=item␣*

I<head1-title-regex>/I<head2-title-regex>/...

=back

Any␣omitted␣or␣empty␣regular␣expressions␣will␣default␣to␣".*".
Please␣note␣that␣each␣regular␣expression␣given␣is␣implicitly
anchored␣by␣adding␣"^"␣and␣"$"␣to␣the␣beginning␣and␣end.␣␣Also,␣if␣a
given␣regular␣expression␣starts␣with␣a␣"!"␣character,␣then␣the
expression␣is␣I<negated>␣(so␣C<!foo>␣would␣match␣anything␣I<except>
C<foo>).

Some␣example␣section␣specifications␣follow.

=over␣4

=item␣*

Match␣the␣C<NAME>␣and␣C<SYNOPSIS>␣sections␣and␣all␣of␣their␣subsections:

C<NAME|SYNOPSIS>

=item␣*

Match␣only␣the␣C<Question>␣and␣C<Answer>␣subsections␣of␣the␣C<DESCRIPTION>
section:

C<DESCRIPTION/Question|Answer>

=item␣*

Match␣the␣C<Comments>␣subsection␣of␣I<all>␣sections:

C</Comments>

=item␣*

Match␣all␣subsections␣of␣C<DESCRIPTION>␣I<except>␣for␣C<Comments>:

C<DESCRIPTION/!Comments>

=item␣*

Match␣the␣C<DESCRIPTION>␣section␣but␣do␣I<not>␣match␣any␣of␣its␣subsections:

C<DESCRIPTION/!.+>

=item␣*

Match␣all␣top␣level␣sections␣but␣none␣of␣their␣subsections:

C</!.+>

=back␣

=begin␣_NOT_IMPLEMENTED_

=head1␣RANGE␣SPECIFICATIONS

B<podselect()>␣and␣B<Pod::Select::select()>␣may␣be␣given␣one␣or␣more
"range␣specifications"␣to␣restrict␣the␣text␣processed␣to␣only␣the
desired␣ranges␣of␣paragraphs␣in␣the␣desired␣set␣of␣sections.␣A␣range
specification␣is␣a␣string␣containing␣a␣single␣Perl-style␣regular
expression␣(a␣regex),␣or␣else␣two␣Perl-style␣regular␣expressions
(regexs)␣separated␣by␣a␣".."␣(Perl's␣"range"␣operator␣is␣"..").
The␣regexs␣in␣a␣range␣specification␣are␣delimited␣by␣forward␣slashes
("/").␣␣If␣you␣need␣to␣use␣a␣forward␣slash␣literally␣within␣a␣regex␣you
can␣escape␣it␣with␣a␣backslash␣("\/").

The␣formal␣syntax␣of␣a␣range␣specification␣is:

=over␣4

=item␣*

/I<start-range-regex>/[../I<end-range-regex>/]

=back

Where␣each␣the␣item␣inside␣square␣brackets␣(the␣".."␣followed␣by␣the
end-range-regex)␣is␣optional.␣Each␣"range-regex"␣is␣of␣the␣form:

␣␣␣␣=cmd-expr␣text-expr

Where␣I<cmd-expr>␣is␣intended␣to␣match␣the␣name␣of␣one␣or␣more␣POD
commands,␣and␣I<text-expr>␣is␣intended␣to␣match␣the␣paragraph␣text␣for
the␣command.␣If␣a␣range-regex␣is␣supposed␣to␣match␣a␣POD␣command,␣then
the␣first␣character␣of␣the␣regex␣(the␣one␣after␣the␣initial␣'/')
absolutely␣I<must>␣be␣a␣single␣'='␣character;␣it␣may␣not␣be␣anything
else␣(not␣even␣a␣regex␣meta-character)␣if␣it␣is␣supposed␣to␣match
against␣the␣name␣of␣a␣POD␣command.

If␣no␣I<=cmd-expr>␣is␣given␣then␣the␣text-expr␣will␣be␣matched␣against
plain␣textblocks␣unless␣it␣is␣preceded␣by␣a␣space,␣in␣which␣case␣it␣is
matched␣against␣verbatim␣text-blocks.␣If␣no␣I<text-expr>␣is␣given␣then
only␣the␣command-portion␣of␣the␣paragraph␣is␣matched␣against.

Note␣that␣these␣two␣expressions␣are␣each␣implicitly␣anchored.␣This
means␣that␣when␣matching␣against␣the␣command-name,␣there␣will␣be␣an
implicit␣'^'␣and␣'$'␣around␣the␣given␣I<=cmd-expr>;␣and␣when␣matching
against␣the␣paragraph␣text␣there␣will␣be␣an␣implicit␣'\A'␣and␣'\Z'
around␣the␣given␣I<text-expr>.

Unlike␣with␣section-specs,␣the␣'!'␣character␣does␣I<not>␣have␣any␣special
meaning␣(negation␣or␣otherwise)␣at␣the␣beginning␣of␣a␣range-spec!

Some␣example␣range␣specifications␣follow.

=over␣4

=item
Match␣all␣C<=for␣html>␣paragraphs:

C</=for␣html/>

=item
Match␣all␣paragraphs␣between␣C<=begin␣html>␣and␣C<=end␣html>
(note␣that␣this␣will␣I<not>␣work␣correctly␣if␣such␣sections
are␣nested):

C</=begin␣html/../=end␣html/>

=item
Match␣all␣paragraphs␣between␣the␣given␣C<=item>␣name␣until␣the␣end␣of␣the
current␣section:

C</=item␣mine/../=head\d/>

=item
Match␣all␣paragraphs␣between␣the␣given␣C<=item>␣until␣the␣next␣item,␣or
until␣the␣end␣of␣the␣itemized␣list␣(note␣that␣this␣will␣I<not>␣work␣as
desired␣if␣the␣item␣contains␣an␣itemized␣list␣nested␣within␣it):

C</=item␣mine/../=(item|back)/>

=back␣

=end␣_NOT_IMPLEMENTED_

=cut
----------
Range: (1825149,1827040) (1891)
<<'----END␣OF␣PREAMBLE----'
.\"
.\"␣Accent␣mark␣definitions␣(@(#)ms.acc␣1.5␣88/02/08␣SMI;␣from␣UCB␣4.2).
.\"␣Fear.␣␣Run.␣␣Save␣yourself.␣␣No␣user-serviceable␣parts.
.␣␣␣␣\"␣fudge␣factors␣for␣nroff␣and␣troff
.if␣n␣\{\
.␣␣␣␣ds␣#H␣0
.␣␣␣␣ds␣#V␣.8m
.␣␣␣␣ds␣#F␣.3m
.␣␣␣␣ds␣#[␣\f1
.␣␣␣␣ds␣#]␣\fP
.\}
.if␣t␣\{\
.␣␣␣␣ds␣#H␣((1u-(\\\\n(.fu%2u))*.13m)
.␣␣␣␣ds␣#V␣.6m
.␣␣␣␣ds␣#F␣0
.␣␣␣␣ds␣#[␣\&
.␣␣␣␣ds␣#]␣\&
.\}
.␣␣␣␣\"␣simple␣accents␣for␣nroff␣and␣troff
.if␣n␣\{\
.␣␣␣␣ds␣'␣\&
.␣␣␣␣ds␣`␣\&
.␣␣␣␣ds␣^␣\&
.␣␣␣␣ds␣,␣\&
.␣␣␣␣ds␣~␣~
.␣␣␣␣ds␣/
.\}
.if␣t␣\{\
.␣␣␣␣ds␣'␣\\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.␣␣␣␣ds␣`␣\\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.␣␣␣␣ds␣^␣\\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.␣␣␣␣ds␣,␣\\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.␣␣␣␣ds␣~␣\\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.␣␣␣␣ds␣/␣\\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.␣␣␣␣\"␣troff␣and␣(daisy-wheel)␣nroff␣accents
.ds␣:␣\\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds␣8␣\h'\*(#H'\(*b\h'-\*(#H'
.ds␣o␣\\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds␣d-␣\h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds␣D-␣D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds␣th␣\*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds␣Th␣\*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds␣ae␣a\h'-(\w'a'u*4/10)'e
.ds␣Ae␣A\h'-(\w'A'u*4/10)'E
.␣␣␣␣\"␣corrections␣for␣vroff
.if␣v␣.ds␣~␣\\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if␣v␣.ds␣^␣\\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.␣␣␣␣\"␣for␣low␣resolution␣devices␣(crt␣and␣lpr)
.if␣\n(.H>23␣.if␣\n(.V>19␣\
\{\
.␣␣␣␣ds␣:␣e
.␣␣␣␣ds␣8␣ss
.␣␣␣␣ds␣o␣a
.␣␣␣␣ds␣d-␣d\h'-1'\(ga
.␣␣␣␣ds␣D-␣D\h'-1'\(hy
.␣␣␣␣ds␣th␣\o'bp'
.␣␣␣␣ds␣Th␣\o'LP'
.␣␣␣␣ds␣ae␣ae
.␣␣␣␣ds␣Ae␣AE
.\}
.rm␣#[␣#]␣#H␣#V␣#F␣C
----END␣OF␣PREAMBLE----
#`#␣for␣cperl-mode
␣␣␣␣}
␣␣␣␣return
----------
Range: (1843437,1850058) (6621)
=head1␣NAME

Pod::Parser␣-␣base␣class␣for␣creating␣POD␣filters␣and␣translators

=head1␣SYNOPSIS

␣␣␣␣use␣Pod::Parser;

␣␣␣␣package␣MyParser;
␣␣␣␣@ISA␣=␣qw(Pod::Parser);

␣␣␣␣sub␣command␣{␣
␣␣␣␣␣␣␣␣my␣($parser,␣$command,␣$paragraph,␣$line_num)␣=␣@_;
␣␣␣␣␣␣␣␣##␣Interpret␣the␣command␣and␣its␣text;␣sample␣actions␣might␣be:
␣␣␣␣␣␣␣␣if␣($command␣eq␣'head1')␣{␣...␣}
␣␣␣␣␣␣␣␣elsif␣($command␣eq␣'head2')␣{␣...␣}
␣␣␣␣␣␣␣␣##␣...␣other␣commands␣and␣their␣actions
␣␣␣␣␣␣␣␣my␣$out_fh␣=␣$parser->output_handle();
␣␣␣␣␣␣␣␣my␣$expansion␣=␣$parser->interpolate($paragraph,␣$line_num);
␣␣␣␣␣␣␣␣print␣$out_fh␣$expansion;
␣␣␣␣}

␣␣␣␣sub␣verbatim␣{␣
␣␣␣␣␣␣␣␣my␣($parser,␣$paragraph,␣$line_num)␣=␣@_;
␣␣␣␣␣␣␣␣##␣Format␣verbatim␣paragraph;␣sample␣actions␣might␣be:
␣␣␣␣␣␣␣␣my␣$out_fh␣=␣$parser->output_handle();
␣␣␣␣␣␣␣␣print␣$out_fh␣$paragraph;
␣␣␣␣}

␣␣␣␣sub␣textblock␣{␣
␣␣␣␣␣␣␣␣my␣($parser,␣$paragraph,␣$line_num)␣=␣@_;
␣␣␣␣␣␣␣␣##␣Translate/Format␣this␣block␣of␣text;␣sample␣actions␣might␣be:
␣␣␣␣␣␣␣␣my␣$out_fh␣=␣$parser->output_handle();
␣␣␣␣␣␣␣␣my␣$expansion␣=␣$parser->interpolate($paragraph,␣$line_num);
␣␣␣␣␣␣␣␣print␣$out_fh␣$expansion;
␣␣␣␣}

␣␣␣␣sub␣interior_sequence␣{␣
␣␣␣␣␣␣␣␣my␣($parser,␣$seq_command,␣$seq_argument)␣=␣@_;
␣␣␣␣␣␣␣␣##␣Expand␣an␣interior␣sequence;␣sample␣actions␣might␣be:
␣␣␣␣␣␣␣␣return␣"*$seq_argument*"␣␣␣␣␣if␣($seq_command␣eq␣'B');
␣␣␣␣␣␣␣␣return␣"`$seq_argument'"␣␣␣␣␣if␣($seq_command␣eq␣'C');
␣␣␣␣␣␣␣␣return␣"_${seq_argument}_'"␣␣if␣($seq_command␣eq␣'I');
␣␣␣␣␣␣␣␣##␣...␣other␣sequence␣commands␣and␣their␣resulting␣text
␣␣␣␣}

␣␣␣␣package␣main;

␣␣␣␣##␣Create␣a␣parser␣object␣and␣have␣it␣parse␣file␣whose␣name␣was
␣␣␣␣##␣given␣on␣the␣command-line␣(use␣STDIN␣if␣no␣files␣were␣given).
␣␣␣␣$parser␣=␣new␣MyParser();
␣␣␣␣$parser->parse_from_filehandle(\*STDIN)␣␣if␣(@ARGV␣==␣0);
␣␣␣␣for␣(@ARGV)␣{␣$parser->parse_from_file($_);␣}

=head1␣REQUIRES

perl5.005,␣Pod::InputObjects,␣Exporter,␣Symbol,␣Carp

=head1␣EXPORTS

Nothing.

=head1␣DESCRIPTION

B<Pod::Parser>␣is␣a␣base␣class␣for␣creating␣POD␣filters␣and␣translators.
It␣handles␣most␣of␣the␣effort␣involved␣with␣parsing␣the␣POD␣sections
from␣an␣input␣stream,␣leaving␣subclasses␣free␣to␣be␣concerned␣only␣with
performing␣the␣actual␣translation␣of␣text.

B<Pod::Parser>␣parses␣PODs,␣and␣makes␣method␣calls␣to␣handle␣the␣various
components␣of␣the␣POD.␣Subclasses␣of␣B<Pod::Parser>␣override␣these␣methods
to␣translate␣the␣POD␣into␣whatever␣output␣format␣they␣desire.

=head1␣QUICK␣OVERVIEW

To␣create␣a␣POD␣filter␣for␣translating␣POD␣documentation␣into␣some␣other
format,␣you␣create␣a␣subclass␣of␣B<Pod::Parser>␣which␣typically␣overrides
just␣the␣base␣class␣implementation␣for␣the␣following␣methods:

=over␣2

=item␣*

B<command()>

=item␣*

B<verbatim()>

=item␣*

B<textblock()>

=item␣*

B<interior_sequence()>

=back

You␣may␣also␣want␣to␣override␣the␣B<begin_input()>␣and␣B<end_input()>
methods␣for␣your␣subclass␣(to␣perform␣any␣needed␣per-file␣and/or
per-document␣initialization␣or␣cleanup).

If␣you␣need␣to␣perform␣any␣preprocessing␣of␣input␣before␣it␣is␣parsed
you␣may␣want␣to␣override␣one␣or␣more␣of␣B<preprocess_line()>␣and/or
B<preprocess_paragraph()>.

Sometimes␣it␣may␣be␣necessary␣to␣make␣more␣than␣one␣pass␣over␣the␣input
files.␣If␣this␣is␣the␣case␣you␣have␣several␣options.␣You␣can␣make␣the
first␣pass␣using␣B<Pod::Parser>␣and␣override␣your␣methods␣to␣store␣the
intermediate␣results␣in␣memory␣somewhere␣for␣the␣B<end_pod()>␣method␣to
process.␣You␣could␣use␣B<Pod::Parser>␣for␣several␣passes␣with␣an
appropriate␣state␣variable␣to␣control␣the␣operation␣for␣each␣pass.␣If
your␣input␣source␣can't␣be␣reset␣to␣start␣at␣the␣beginning,␣you␣can
store␣it␣in␣some␣other␣structure␣as␣a␣string␣or␣an␣array␣and␣have␣that
structure␣implement␣a␣B<getline()>␣method␣(which␣is␣all␣that
B<parse_from_filehandle()>␣uses␣to␣read␣input).

Feel␣free␣to␣add␣any␣member␣data␣fields␣you␣need␣to␣keep␣track␣of␣things
like␣current␣font,␣indentation,␣horizontal␣or␣vertical␣position,␣or
whatever␣else␣you␣like.␣Be␣sure␣to␣read␣L<"PRIVATE␣METHODS␣AND␣DATA">
to␣avoid␣name␣collisions.

For␣the␣most␣part,␣the␣B<Pod::Parser>␣base␣class␣should␣be␣able␣to
do␣most␣of␣the␣input␣parsing␣for␣you␣and␣leave␣you␣free␣to␣worry␣about
how␣to␣interpret␣the␣commands␣and␣translate␣the␣result.

Note␣that␣all␣we␣have␣described␣here␣in␣this␣quick␣overview␣is␣the
simplest␣most␣straightforward␣use␣of␣B<Pod::Parser>␣to␣do␣stream-based
parsing.␣It␣is␣also␣possible␣to␣use␣the␣B<Pod::Parser::parse_text>␣function
to␣do␣more␣sophisticated␣tree-based␣parsing.␣See␣L<"TREE-BASED␣PARSING">.

=head1␣PARSING␣OPTIONS

A␣I<parse-option>␣is␣simply␣a␣named␣option␣of␣B<Pod::Parser>␣with␣a
value␣that␣corresponds␣to␣a␣certain␣specified␣behavior.␣These␣various
behaviors␣of␣B<Pod::Parser>␣may␣be␣enabled/disabled␣by␣setting
or␣unsetting␣one␣or␣more␣I<parse-options>␣using␣the␣B<parseopts()>␣method.
The␣set␣of␣currently␣accepted␣parse-options␣is␣as␣follows:

=over␣3

=item␣B<-want_nonPODs>␣(default:␣unset)

Normally␣(by␣default)␣B<Pod::Parser>␣will␣only␣provide␣access␣to
the␣POD␣sections␣of␣the␣input.␣Input␣paragraphs␣that␣are␣not␣part
of␣the␣POD-format␣documentation␣are␣not␣made␣available␣to␣the␣caller
(not␣even␣using␣B<preprocess_paragraph()>).␣Setting␣this␣option␣to␣a
non-empty,␣non-zero␣value␣will␣allow␣B<preprocess_paragraph()>␣to␣see
non-POD␣sections␣of␣the␣input␣as␣well␣as␣POD␣sections.␣The␣B<cutting()>
method␣can␣be␣used␣to␣determine␣if␣the␣corresponding␣paragraph␣is␣a␣POD
paragraph,␣or␣some␣other␣input␣paragraph.

=item␣B<-process_cut_cmd>␣(default:␣unset)

Normally␣(by␣default)␣B<Pod::Parser>␣handles␣the␣C<=cut>␣POD␣directive
by␣itself␣and␣does␣not␣pass␣it␣on␣to␣the␣caller␣for␣processing.␣Setting
this␣option␣to␣a␣non-empty,␣non-zero␣value␣will␣cause␣B<Pod::Parser>␣to
pass␣the␣C<=cut>␣directive␣to␣the␣caller␣just␣like␣any␣other␣POD␣command
(and␣hence␣it␣may␣be␣processed␣by␣the␣B<command()>␣method).

B<Pod::Parser>␣will␣still␣interpret␣the␣C<=cut>␣directive␣to␣mean␣that
"cutting␣mode"␣has␣been␣(re)entered,␣but␣the␣caller␣will␣get␣a␣chance
to␣capture␣the␣actual␣C<=cut>␣paragraph␣itself␣for␣whatever␣purpose
it␣desires.

=item␣B<-warnings>␣(default:␣unset)

Normally␣(by␣default)␣B<Pod::Parser>␣recognizes␣a␣bare␣minimum␣of
pod␣syntax␣errors␣and␣warnings␣and␣issues␣diagnostic␣messages
for␣errors,␣but␣not␣for␣warnings.␣(Use␣B<Pod::Checker>␣to␣do␣more
thorough␣checking␣of␣POD␣syntax.)␣Setting␣this␣option␣to␣a␣non-empty,
non-zero␣value␣will␣cause␣B<Pod::Parser>␣to␣issue␣diagnostics␣for
the␣few␣warnings␣it␣recognizes␣as␣well␣as␣the␣errors.

=back

Please␣see␣L<"parseopts()">␣for␣a␣complete␣description␣of␣the␣interface
for␣the␣setting␣and␣unsetting␣of␣parse-options.

=cut
----------
Range: (1864045,1867726) (3681)
=head1␣B<parse_text()>

␣␣␣␣␣␣␣␣␣␣␣␣$ptree1␣=␣$parser->parse_text($text,␣$line_num);
␣␣␣␣␣␣␣␣␣␣␣␣$ptree2␣=␣$parser->parse_text({%opts},␣$text,␣$line_num);
␣␣␣␣␣␣␣␣␣␣␣␣$ptree3␣=␣$parser->parse_text(\%opts,␣$text,␣$line_num);

This␣method␣is␣useful␣if␣you␣need␣to␣perform␣your␣own␣interpolation␣
of␣interior␣sequences␣and␣can't␣rely␣upon␣B<interpolate>␣to␣expand
them␣in␣simple␣bottom-up␣order.

The␣parameter␣C<$text>␣is␣a␣string␣or␣block␣of␣text␣to␣be␣parsed
for␣interior␣sequences;␣and␣the␣parameter␣C<$line_num>␣is␣the
line␣number␣corresponding␣to␣the␣beginning␣of␣C<$text>.

B<parse_text()>␣will␣parse␣the␣given␣text␣into␣a␣parse-tree␣of␣"nodes."
and␣interior-sequences.␣␣Each␣"node"␣in␣the␣parse␣tree␣is␣either␣a
text-string,␣or␣a␣B<Pod::InteriorSequence>.␣␣The␣result␣returned␣is␣a
parse-tree␣of␣type␣B<Pod::ParseTree>.␣Please␣see␣L<Pod::InputObjects>
for␣more␣information␣about␣B<Pod::InteriorSequence>␣and␣B<Pod::ParseTree>.

If␣desired,␣an␣optional␣hash-ref␣may␣be␣specified␣as␣the␣first␣argument
to␣customize␣certain␣aspects␣of␣the␣parse-tree␣that␣is␣created␣and
returned.␣The␣set␣of␣recognized␣option␣keywords␣are:

=over␣3

=item␣B<-expand_seq>␣=E<gt>␣I<code-ref>|I<method-name>

Normally,␣the␣parse-tree␣returned␣by␣B<parse_text()>␣will␣contain␣an
unexpanded␣C<Pod::InteriorSequence>␣object␣for␣each␣interior-sequence
encountered.␣Specifying␣B<-expand_seq>␣tells␣B<parse_text()>␣to␣"expand"
every␣interior-sequence␣it␣sees␣by␣invoking␣the␣referenced␣function
(or␣named␣method␣of␣the␣parser␣object)␣and␣using␣the␣return␣value␣as␣the
expanded␣result.

If␣a␣subroutine␣reference␣was␣given,␣it␣is␣invoked␣as:

␣␣&$code_ref(␣$parser,␣$sequence␣)

and␣if␣a␣method-name␣was␣given,␣it␣is␣invoked␣as:

␣␣$parser->method_name(␣$sequence␣)

where␣C<$parser>␣is␣a␣reference␣to␣the␣parser␣object,␣and␣C<$sequence>
is␣a␣reference␣to␣the␣interior-sequence␣object.
[I<NOTE>:␣If␣the␣B<interior_sequence()>␣method␣is␣specified,␣then␣it␣is
invoked␣according␣to␣the␣interface␣specified␣in␣L<"interior_sequence()">].

=item␣B<-expand_text>␣=E<gt>␣I<code-ref>|I<method-name>

Normally,␣the␣parse-tree␣returned␣by␣B<parse_text()>␣will␣contain␣a
text-string␣for␣each␣contiguous␣sequence␣of␣characters␣outside␣of␣an
interior-sequence.␣Specifying␣B<-expand_text>␣tells␣B<parse_text()>␣to
"preprocess"␣every␣such␣text-string␣it␣sees␣by␣invoking␣the␣referenced
function␣(or␣named␣method␣of␣the␣parser␣object)␣and␣using␣the␣return␣value
as␣the␣preprocessed␣(or␣"expanded")␣result.␣[Note␣that␣if␣the␣result␣is
an␣interior-sequence,␣then␣it␣will␣I<not>␣be␣expanded␣as␣specified␣by␣the
B<-expand_seq>␣option;␣Any␣such␣recursive␣expansion␣needs␣to␣be␣handled␣by
the␣specified␣callback␣routine.]

If␣a␣subroutine␣reference␣was␣given,␣it␣is␣invoked␣as:

␣␣&$code_ref(␣$parser,␣$text,␣$ptree_node␣)

and␣if␣a␣method-name␣was␣given,␣it␣is␣invoked␣as:

␣␣$parser->method_name(␣$text,␣$ptree_node␣)

where␣C<$parser>␣is␣a␣reference␣to␣the␣parser␣object,␣C<$text>␣is␣the
text-string␣encountered,␣and␣C<$ptree_node>␣is␣a␣reference␣to␣the␣current
node␣in␣the␣parse-tree␣(usually␣an␣interior-sequence␣object␣or␣else␣the
top-level␣node␣of␣the␣parse-tree).

=item␣B<-expand_ptree>␣=E<gt>␣I<code-ref>|I<method-name>

Rather␣than␣returning␣a␣C<Pod::ParseTree>,␣pass␣the␣parse-tree␣as␣an
argument␣to␣the␣referenced␣subroutine␣(or␣named␣method␣of␣the␣parser
object)␣and␣return␣the␣result␣instead␣of␣the␣parse-tree␣object.

If␣a␣subroutine␣reference␣was␣given,␣it␣is␣invoked␣as:

␣␣&$code_ref(␣$parser,␣$ptree␣)

and␣if␣a␣method-name␣was␣given,␣it␣is␣invoked␣as:

␣␣$parser->method_name(␣$ptree␣)

where␣C<$parser>␣is␣a␣reference␣to␣the␣parser␣object,␣and␣C<$ptree>
is␣a␣reference␣to␣the␣parse-tree␣object.

=back

=cut
----------
Range: (1899784,1908036) (8252)
=head1␣TREE-BASED␣PARSING

If␣straightforward␣stream-based␣parsing␣wont␣meet␣your␣needs␣(as␣is
likely␣the␣case␣for␣tasks␣such␣as␣translating␣PODs␣into␣structured
markup␣languages␣like␣HTML␣and␣XML)␣then␣you␣may␣need␣to␣take␣the
tree-based␣approach.␣Rather␣than␣doing␣everything␣in␣one␣pass␣and
calling␣the␣B<interpolate()>␣method␣to␣expand␣sequences␣into␣text,␣it
may␣be␣desirable␣to␣instead␣create␣a␣parse-tree␣using␣the␣B<parse_text()>
method␣to␣return␣a␣tree-like␣structure␣which␣may␣contain␣an␣ordered
list␣of␣children␣(each␣of␣which␣may␣be␣a␣text-string,␣or␣a␣similar
tree-like␣structure).

Pay␣special␣attention␣to␣L<"METHODS␣FOR␣PARSING␣AND␣PROCESSING">␣and
to␣the␣objects␣described␣in␣L<Pod::InputObjects>.␣The␣former␣describes
the␣gory␣details␣and␣parameters␣for␣how␣to␣customize␣and␣extend␣the
parsing␣behavior␣of␣B<Pod::Parser>.␣B<Pod::InputObjects>␣provides
several␣objects␣that␣may␣all␣be␣used␣interchangeably␣as␣parse-trees.␣The
most␣obvious␣one␣is␣the␣B<Pod::ParseTree>␣object.␣It␣defines␣the␣basic
interface␣and␣functionality␣that␣all␣things␣trying␣to␣be␣a␣POD␣parse-tree
should␣do.␣A␣B<Pod::ParseTree>␣is␣defined␣such␣that␣each␣"node"␣may␣be␣a
text-string,␣or␣a␣reference␣to␣another␣parse-tree.␣␣Each␣B<Pod::Paragraph>
object␣and␣each␣B<Pod::InteriorSequence>␣object␣also␣supports␣the␣basic
parse-tree␣interface.

The␣B<parse_text()>␣method␣takes␣a␣given␣paragraph␣of␣text,␣and
returns␣a␣parse-tree␣that␣contains␣one␣or␣more␣children,␣each␣of␣which
may␣be␣a␣text-string,␣or␣an␣InteriorSequence␣object.␣There␣are␣also
callback-options␣that␣may␣be␣passed␣to␣B<parse_text()>␣to␣customize
the␣way␣it␣expands␣or␣transforms␣interior-sequences,␣as␣well␣as␣the
returned␣result.␣These␣callbacks␣can␣be␣used␣to␣create␣a␣parse-tree
with␣custom-made␣objects␣(which␣may␣or␣may␣not␣support␣the␣parse-tree
interface,␣depending␣on␣how␣you␣choose␣to␣do␣it).

If␣you␣wish␣to␣turn␣an␣entire␣POD␣document␣into␣a␣parse-tree,␣that␣process
is␣fairly␣straightforward.␣The␣B<parse_text()>␣method␣is␣the␣key␣to␣doing
this␣successfully.␣Every␣paragraph-callback␣(i.e.␣the␣polymorphic␣methods
for␣B<command()>,␣B<verbatim()>,␣and␣B<textblock()>␣paragraphs)␣takes
a␣B<Pod::Paragraph>␣object␣as␣an␣argument.␣Each␣paragraph␣object␣has␣a
B<parse_tree()>␣method␣that␣can␣be␣used␣to␣get␣or␣set␣a␣corresponding
parse-tree.␣So␣for␣each␣of␣those␣paragraph-callback␣methods,␣simply␣call
B<parse_text()>␣with␣the␣options␣you␣desire,␣and␣then␣use␣the␣returned
parse-tree␣to␣assign␣to␣the␣given␣paragraph␣object.

That␣gives␣you␣a␣parse-tree␣for␣each␣paragraph␣-␣so␣now␣all␣you␣need␣is
an␣ordered␣list␣of␣paragraphs.␣You␣can␣maintain␣that␣yourself␣as␣a␣data
element␣in␣the␣object/hash.␣The␣most␣straightforward␣way␣would␣be␣simply
to␣use␣an␣array-ref,␣with␣the␣desired␣set␣of␣custom␣"options"␣for␣each
invocation␣of␣B<parse_text>.␣Let's␣assume␣the␣desired␣option-set␣is
given␣by␣the␣hash␣C<%options>.␣Then␣we␣might␣do␣something␣like␣the
following:

␣␣␣␣package␣MyPodParserTree;

␣␣␣␣@ISA␣=␣qw(␣Pod::Parser␣);

␣␣␣␣...

␣␣␣␣sub␣begin_pod␣{
␣␣␣␣␣␣␣␣my␣$self␣=␣shift;
␣␣␣␣␣␣␣␣$self->{'-paragraphs'}␣=␣[];␣␣##␣initialize␣paragraph␣list
␣␣␣␣}

␣␣␣␣sub␣command␣{␣
␣␣␣␣␣␣␣␣my␣($parser,␣$command,␣$paragraph,␣$line_num,␣$pod_para)␣=␣@_;
␣␣␣␣␣␣␣␣my␣$ptree␣=␣$parser->parse_text({%options},␣$paragraph,␣...);
␣␣␣␣␣␣␣␣$pod_para->parse_tree(␣$ptree␣);
␣␣␣␣␣␣␣␣push␣@{␣$self->{'-paragraphs'}␣},␣$pod_para;
␣␣␣␣}

␣␣␣␣sub␣verbatim␣{␣
␣␣␣␣␣␣␣␣my␣($parser,␣$paragraph,␣$line_num,␣$pod_para)␣=␣@_;
␣␣␣␣␣␣␣␣push␣@{␣$self->{'-paragraphs'}␣},␣$pod_para;
␣␣␣␣}

␣␣␣␣sub␣textblock␣{␣
␣␣␣␣␣␣␣␣my␣($parser,␣$paragraph,␣$line_num,␣$pod_para)␣=␣@_;
␣␣␣␣␣␣␣␣my␣$ptree␣=␣$parser->parse_text({%options},␣$paragraph,␣...);
␣␣␣␣␣␣␣␣$pod_para->parse_tree(␣$ptree␣);
␣␣␣␣␣␣␣␣push␣@{␣$self->{'-paragraphs'}␣},␣$pod_para;
␣␣␣␣}

␣␣␣␣...

␣␣␣␣package␣main;
␣␣␣␣...
␣␣␣␣my␣$parser␣=␣new␣MyPodParserTree(...);
␣␣␣␣$parser->parse_from_file(...);
␣␣␣␣my␣$paragraphs_ref␣=␣$parser->{'-paragraphs'};

Of␣course,␣in␣this␣module-author's␣humble␣opinion,␣I'd␣be␣more␣inclined␣to
use␣the␣existing␣B<Pod::ParseTree>␣object␣than␣a␣simple␣array.␣That␣way
everything␣in␣it,␣paragraphs␣and␣sequences,␣all␣respond␣to␣the␣same␣core
interface␣for␣all␣parse-tree␣nodes.␣The␣result␣would␣look␣something␣like:

␣␣␣␣package␣MyPodParserTree2;

␣␣␣␣...

␣␣␣␣sub␣begin_pod␣{
␣␣␣␣␣␣␣␣my␣$self␣=␣shift;
␣␣␣␣␣␣␣␣$self->{'-ptree'}␣=␣new␣Pod::ParseTree;␣␣##␣initialize␣parse-tree
␣␣␣␣}

␣␣␣␣sub␣parse_tree␣{
␣␣␣␣␣␣␣␣##␣convenience␣method␣to␣get/set␣the␣parse-tree␣for␣the␣entire␣POD
␣␣␣␣␣␣␣␣(@_␣>␣1)␣␣and␣␣$_[0]->{'-ptree'}␣=␣$_[1];
␣␣␣␣␣␣␣␣return␣$_[0]->{'-ptree'};
␣␣␣␣}

␣␣␣␣sub␣command␣{␣
␣␣␣␣␣␣␣␣my␣($parser,␣$command,␣$paragraph,␣$line_num,␣$pod_para)␣=␣@_;
␣␣␣␣␣␣␣␣my␣$ptree␣=␣$parser->parse_text({<<options>>},␣$paragraph,␣...);
␣␣␣␣␣␣␣␣$pod_para->parse_tree(␣$ptree␣);
␣␣␣␣␣␣␣␣$parser->parse_tree()->append(␣$pod_para␣);
␣␣␣␣}

␣␣␣␣sub␣verbatim␣{␣
␣␣␣␣␣␣␣␣my␣($parser,␣$paragraph,␣$line_num,␣$pod_para)␣=␣@_;
␣␣␣␣␣␣␣␣$parser->parse_tree()->append(␣$pod_para␣);
␣␣␣␣}

␣␣␣␣sub␣textblock␣{␣
␣␣␣␣␣␣␣␣my␣($parser,␣$paragraph,␣$line_num,␣$pod_para)␣=␣@_;
␣␣␣␣␣␣␣␣my␣$ptree␣=␣$parser->parse_text({<<options>>},␣$paragraph,␣...);
␣␣␣␣␣␣␣␣$pod_para->parse_tree(␣$ptree␣);
␣␣␣␣␣␣␣␣$parser->parse_tree()->append(␣$pod_para␣);
␣␣␣␣}

␣␣␣␣...

␣␣␣␣package␣main;
␣␣␣␣...
␣␣␣␣my␣$parser␣=␣new␣MyPodParserTree2(...);
␣␣␣␣$parser->parse_from_file(...);
␣␣␣␣my␣$ptree␣=␣$parser->parse_tree;
␣␣␣␣...

Now␣you␣have␣the␣entire␣POD␣document␣as␣one␣great␣big␣parse-tree.␣You
can␣even␣use␣the␣B<-expand_seq>␣option␣to␣B<parse_text>␣to␣insert
whole␣different␣kinds␣of␣objects.␣Just␣don't␣expect␣B<Pod::Parser>
to␣know␣what␣to␣do␣with␣them␣after␣that.␣That␣will␣need␣to␣be␣in␣your
code.␣Or,␣alternatively,␣you␣can␣insert␣any␣object␣you␣like␣so␣long␣as
it␣conforms␣to␣the␣B<Pod::ParseTree>␣interface.

One␣could␣use␣this␣to␣create␣subclasses␣of␣B<Pod::Paragraphs>␣and
B<Pod::InteriorSequences>␣for␣specific␣commands␣(or␣to␣create␣your␣own
custom␣node-types␣in␣the␣parse-tree)␣and␣add␣some␣kind␣of␣B<emit()>
method␣to␣each␣custom␣node/subclass␣object␣in␣the␣tree.␣Then␣all␣you'd
need␣to␣do␣is␣recursively␣walk␣the␣tree␣in␣the␣desired␣order,␣processing
the␣children␣(most␣likely␣from␣left␣to␣right)␣by␣formatting␣them␣if
they␣are␣text-strings,␣or␣by␣calling␣their␣B<emit()>␣method␣if␣they
are␣objects/references.

=head1␣CAVEATS

Please␣note␣that␣POD␣has␣the␣notion␣of␣"paragraphs":␣this␣is␣something
starting␣I<after>␣a␣blank␣(read:␣empty)␣line,␣with␣the␣single␣exception
of␣the␣file␣start,␣which␣is␣also␣starting␣a␣paragraph.␣That␣means␣that
especially␣a␣command␣(e.g.␣C<=head1>)␣I<must>␣be␣preceded␣with␣a␣blank
line;␣C<__END__>␣is␣I<not>␣a␣blank␣line.

=head1␣SEE␣ALSO

L<Pod::InputObjects>,␣L<Pod::Select>

B<Pod::InputObjects>␣defines␣POD␣input␣objects␣corresponding␣to
command␣paragraphs,␣parse-trees,␣and␣interior-sequences.

B<Pod::Select>␣is␣a␣subclass␣of␣B<Pod::Parser>␣which␣provides␣the␣ability
to␣selectively␣include␣and/or␣exclude␣sections␣of␣a␣POD␣document␣from␣being
translated␣based␣upon␣the␣current␣heading,␣subheading,␣subsubheading,␣etc.

=for␣__PRIVATE__
B<Pod::Callbacks>␣is␣a␣subclass␣of␣B<Pod::Parser>␣which␣gives␣its␣users
the␣ability␣the␣employ␣I<callback␣functions>␣instead␣of,␣or␣in␣addition
to,␣overriding␣methods␣of␣the␣base␣class.

=for␣__PRIVATE__
B<Pod::Select>␣and␣B<Pod::Callbacks>␣do␣not␣override␣any
methods␣nor␣do␣they␣define␣any␣new␣methods␣with␣the␣same␣name.␣Because
of␣this,␣they␣may␣I<both>␣be␣used␣(in␣combination)␣as␣a␣base␣class␣of
the␣same␣subclass␣in␣order␣to␣combine␣their␣functionality␣without
causing␣any␣namespace␣clashes␣due␣to␣multiple␣inheritance.

=head1␣AUTHOR

Please␣report␣bugs␣using␣L<http://rt.cpan.org>.

Brad␣Appleton␣E<lt>bradapp@enteract.comE<gt>

Based␣on␣code␣for␣B<Pod::Text>␣written␣by
Tom␣Christiansen␣E<lt>tchrist@mox.perl.comE<gt>

=head1␣LICENSE

Pod-Parser␣is␣free␣software;␣you␣can␣redistribute␣it␣and/or␣modify␣it
under␣the␣terms␣of␣the␣Artistic␣License␣distributed␣with␣Perl␣version
5.000␣or␣(at␣your␣option)␣any␣later␣version.␣Please␣refer␣to␣the
Artistic␣License␣that␣came␣with␣your␣Perl␣distribution␣for␣more
details.␣If␣your␣version␣of␣Perl␣was␣not␣distributed␣under␣the
terms␣of␣the␣Artistic␣License,␣than␣you␣may␣distribute␣PodParser
under␣the␣same␣terms␣as␣Perl␣itself.

=cut
----------
Range: (1909959,1911818) (1859)
=head2␣C<pod_find(␣{␣%opts␣}␣,␣@directories␣)>

The␣function␣B<pod_find>␣searches␣for␣POD␣documents␣in␣a␣given␣set␣of
files␣and/or␣directories.␣It␣returns␣a␣hash␣with␣the␣file␣names␣as␣keys
and␣the␣POD␣name␣as␣value.␣The␣POD␣name␣is␣derived␣from␣the␣file␣name
and␣its␣position␣in␣the␣directory␣tree.

E.g.␣when␣searching␣in␣F<$HOME/perl5lib>,␣the␣file
F<$HOME/perl5lib/MyModule.pm>␣would␣get␣the␣POD␣name␣I<MyModule>,
whereas␣F<$HOME/perl5lib/Myclass/Subclass.pm>␣would␣be
I<Myclass::Subclass>.␣The␣name␣information␣can␣be␣used␣for␣POD
translators.

Only␣text␣files␣containing␣at␣least␣one␣valid␣POD␣command␣are␣found.

A␣warning␣is␣printed␣if␣more␣than␣one␣POD␣file␣with␣the␣same␣POD␣name
is␣found,␣e.g.␣F<CPAN.pm>␣in␣different␣directories.␣This␣usually
indicates␣duplicate␣occurrences␣of␣modules␣in␣the␣I<@INC>␣search␣path.

B<OPTIONS>␣The␣first␣argument␣for␣B<pod_find>␣may␣be␣a␣hash␣reference
with␣options.␣The␣rest␣are␣either␣directories␣that␣are␣searched
recursively␣or␣files.␣␣The␣POD␣names␣of␣files␣are␣the␣plain␣basenames
with␣any␣Perl-like␣extension␣(.pm,␣.pl,␣.pod)␣stripped.

=over␣4

=item␣C<-verbose␣=E<gt>␣1>

Print␣progress␣information␣while␣scanning.

=item␣C<-perl␣=E<gt>␣1>

Apply␣Perl-specific␣heuristics␣to␣find␣the␣correct␣PODs.␣This␣includes
stripping␣Perl-like␣extensions,␣omitting␣subdirectories␣that␣are␣numeric
but␣do␣I<not>␣match␣the␣current␣Perl␣interpreter's␣version␣id,␣suppressing
F<site_perl>␣as␣a␣module␣hierarchy␣name␣etc.

=item␣C<-script␣=E<gt>␣1>

Search␣for␣PODs␣in␣the␣current␣Perl␣interpreter's␣installation␣
B<scriptdir>.␣This␣is␣taken␣from␣the␣local␣L<Config|Config>␣module.

=item␣C<-inc␣=E<gt>␣1>

Search␣for␣PODs␣in␣the␣current␣Perl␣interpreter's␣I<@INC>␣paths.␣This
automatically␣considers␣paths␣specified␣in␣the␣C<PERL5LIB>␣environment
as␣this␣is␣included␣in␣I<@INC>␣by␣the␣Perl␣interpreter␣itself.

=back

=cut
----------
Range: (1923976,1933098) (9122)
=head1␣NAME

Pod::Checker,␣podchecker()␣-␣check␣pod␣documents␣for␣syntax␣errors

=head1␣SYNOPSIS

␣␣use␣Pod::Checker;

␣␣$syntax_okay␣=␣podchecker($filepath,␣$outputpath,␣%options);

␣␣my␣$checker␣=␣new␣Pod::Checker␣%options;
␣␣$checker->parse_from_file($filepath,␣\*STDERR);

=head1␣OPTIONS/ARGUMENTS

C<$filepath>␣is␣the␣input␣POD␣to␣read␣and␣C<$outputpath>␣is
where␣to␣write␣POD␣syntax␣error␣messages.␣Either␣argument␣may␣be␣a␣scalar
indicating␣a␣file-path,␣or␣else␣a␣reference␣to␣an␣open␣filehandle.
If␣unspecified,␣the␣input-file␣it␣defaults␣to␣C<\*STDIN>,␣and
the␣output-file␣defaults␣to␣C<\*STDERR>.

=head2␣podchecker()

This␣function␣can␣take␣a␣hash␣of␣options:

=over␣4

=item␣B<-warnings>␣=E<gt>␣I<val>

Turn␣warnings␣on/off.␣I<val>␣is␣usually␣1␣for␣on,␣but␣higher␣values
trigger␣additional␣warnings.␣See␣L<"Warnings">.

=back

=head1␣DESCRIPTION

B<podchecker>␣will␣perform␣syntax␣checking␣of␣Perl5␣POD␣format␣documentation.

Curious/ambitious␣users␣are␣welcome␣to␣propose␣additional␣features␣they␣wish
to␣see␣in␣B<Pod::Checker>␣and␣B<podchecker>␣and␣verify␣that␣the␣checks␣are
consistent␣with␣L<perlpod>.

The␣following␣checks␣are␣currently␣performed:

=over␣4

=item␣*

Unknown␣'=xxxx'␣commands,␣unknown␣'XE<lt>...E<gt>'␣interior-sequences,
and␣unterminated␣interior␣sequences.

=item␣*

Check␣for␣proper␣balancing␣of␣C<=begin>␣and␣C<=end>.␣The␣contents␣of␣such
a␣block␣are␣generally␣ignored,␣i.e.␣no␣syntax␣checks␣are␣performed.

=item␣*

Check␣for␣proper␣nesting␣and␣balancing␣of␣C<=over>,␣C<=item>␣and␣C<=back>.

=item␣*

Check␣for␣same␣nested␣interior-sequences␣(e.g.
C<LE<lt>...LE<lt>...E<gt>...E<gt>>).

=item␣*

Check␣for␣malformed␣or␣non-existing␣entities␣C<EE<lt>...E<gt>>.

=item␣*

Check␣for␣correct␣syntax␣of␣hyperlinks␣C<LE<lt>...E<gt>>.␣See␣L<perlpod>
for␣details.

=item␣*

Check␣for␣unresolved␣document-internal␣links.␣This␣check␣may␣also␣reveal
misspelled␣links␣that␣seem␣to␣be␣internal␣links␣but␣should␣be␣links
to␣something␣else.

=back

=head1␣DIAGNOSTICS

=head2␣Errors

=over␣4

=item␣*␣empty␣=headn

A␣heading␣(C<=head1>␣or␣C<=head2>)␣without␣any␣text?␣That␣ain't␣no
heading!

=item␣*␣=over␣on␣line␣I<N>␣without␣closing␣=back

The␣C<=over>␣command␣does␣not␣have␣a␣corresponding␣C<=back>␣before␣the
next␣heading␣(C<=head1>␣or␣C<=head2>)␣or␣the␣end␣of␣the␣file.

=item␣*␣=item␣without␣previous␣=over

=item␣*␣=back␣without␣previous␣=over

An␣C<=item>␣or␣C<=back>␣command␣has␣been␣found␣outside␣a
C<=over>/C<=back>␣block.

=item␣*␣No␣argument␣for␣=begin

A␣C<=begin>␣command␣was␣found␣that␣is␣not␣followed␣by␣the␣formatter
specification.

=item␣*␣=end␣without␣=begin

A␣standalone␣C<=end>␣command␣was␣found.

=item␣*␣Nested␣=begin's

There␣were␣at␣least␣two␣consecutive␣C<=begin>␣commands␣without
the␣corresponding␣C<=end>.␣Only␣one␣C<=begin>␣may␣be␣active␣at
a␣time.

=item␣*␣=for␣without␣formatter␣specification

There␣is␣no␣specification␣of␣the␣formatter␣after␣the␣C<=for>␣command.

=item␣*␣unresolved␣internal␣link␣I<NAME>

The␣given␣link␣to␣I<NAME>␣does␣not␣have␣a␣matching␣node␣in␣the␣current
POD.␣This␣also␣happened␣when␣a␣single␣word␣node␣name␣is␣not␣enclosed␣in
C<"">.

=item␣*␣Unknown␣command␣"I<CMD>"

An␣invalid␣POD␣command␣has␣been␣found.␣Valid␣are␣C<=head1>,␣C<=head2>,
C<=head3>,␣C<=head4>,␣C<=over>,␣C<=item>,␣C<=back>,␣C<=begin>,␣C<=end>,
C<=for>,␣C<=pod>,␣C<=cut>

=item␣*␣Unknown␣interior-sequence␣"I<SEQ>"

An␣invalid␣markup␣command␣has␣been␣encountered.␣Valid␣are:
C<BE<lt>E<gt>>,␣C<CE<lt>E<gt>>,␣C<EE<lt>E<gt>>,␣C<FE<lt>E<gt>>,
C<IE<lt>E<gt>>,␣C<LE<lt>E<gt>>,␣C<SE<lt>E<gt>>,␣C<XE<lt>E<gt>>,
C<ZE<lt>E<gt>>

=item␣*␣nested␣commands␣I<CMD>E<lt>...I<CMD>E<lt>...E<gt>...E<gt>

Two␣nested␣identical␣markup␣commands␣have␣been␣found.␣Generally␣this
does␣not␣make␣sense.

=item␣*␣garbled␣entity␣I<STRING>

The␣I<STRING>␣found␣cannot␣be␣interpreted␣as␣a␣character␣entity.

=item␣*␣Entity␣number␣out␣of␣range

An␣entity␣specified␣by␣number␣(dec,␣hex,␣oct)␣is␣out␣of␣range␣(1-255).

=item␣*␣malformed␣link␣LE<lt>E<gt>

The␣link␣found␣cannot␣be␣parsed␣because␣it␣does␣not␣conform␣to␣the
syntax␣described␣in␣L<perlpod>.

=item␣*␣nonempty␣ZE<lt>E<gt>

The␣C<ZE<lt>E<gt>>␣sequence␣is␣supposed␣to␣be␣empty.

=item␣*␣empty␣XE<lt>E<gt>

The␣index␣entry␣specified␣contains␣nothing␣but␣whitespace.

=item␣*␣Spurious␣text␣after␣=pod␣/␣=cut

The␣commands␣C<=pod>␣and␣C<=cut>␣do␣not␣take␣any␣arguments.

=item␣*␣Spurious␣character(s)␣after␣=back

The␣C<=back>␣command␣does␣not␣take␣any␣arguments.

=back

=head2␣Warnings

These␣may␣not␣necessarily␣cause␣trouble,␣but␣indicate␣mediocre␣style.

=over␣4

=item␣*␣multiple␣occurrence␣of␣link␣target␣I<name>

The␣POD␣file␣has␣some␣C<=item>␣and/or␣C<=head>␣commands␣that␣have
the␣same␣text.␣Potential␣hyperlinks␣to␣such␣a␣text␣cannot␣be␣unique␣then.
This␣warning␣is␣printed␣only␣with␣warning␣level␣greater␣than␣one.

=item␣*␣line␣containing␣nothing␣but␣whitespace␣in␣paragraph

There␣is␣some␣whitespace␣on␣a␣seemingly␣empty␣line.␣POD␣is␣very␣sensitive
to␣such␣things,␣so␣this␣is␣flagged.␣B<vi>␣users␣switch␣on␣the␣B<list>
option␣to␣avoid␣this␣problem.

=begin␣_disabled_

=item␣*␣file␣does␣not␣start␣with␣=head

The␣file␣starts␣with␣a␣different␣POD␣directive␣than␣head.
This␣is␣most␣probably␣something␣you␣do␣not␣want.

=end␣_disabled_

=item␣*␣previous␣=item␣has␣no␣contents

There␣is␣a␣list␣C<=item>␣right␣above␣the␣flagged␣line␣that␣has␣no
text␣contents.␣You␣probably␣want␣to␣delete␣empty␣items.

=item␣*␣preceding␣non-item␣paragraph(s)

A␣list␣introduced␣by␣C<=over>␣starts␣with␣a␣text␣or␣verbatim␣paragraph,
but␣continues␣with␣C<=item>s.␣Move␣the␣non-item␣paragraph␣out␣of␣the
C<=over>/C<=back>␣block.

=item␣*␣=item␣type␣mismatch␣(I<one>␣vs.␣I<two>)

A␣list␣started␣with␣e.g.␣a␣bullet-like␣C<=item>␣and␣continued␣with␣a
numbered␣one.␣This␣is␣obviously␣inconsistent.␣For␣most␣translators␣the
type␣of␣the␣I<first>␣C<=item>␣determines␣the␣type␣of␣the␣list.

=item␣*␣I<N>␣unescaped␣C<E<lt>E<gt>>␣in␣paragraph

Angle␣brackets␣not␣written␣as␣C<E<lt>ltE<gt>>␣and␣C<E<lt>gtE<gt>>
can␣potentially␣cause␣errors␣as␣they␣could␣be␣misinterpreted␣as
markup␣commands.␣This␣is␣only␣printed␣when␣the␣-warnings␣level␣is
greater␣than␣1.

=item␣*␣Unknown␣entity

A␣character␣entity␣was␣found␣that␣does␣not␣belong␣to␣the␣standard
ISO␣set␣or␣the␣POD␣specials␣C<verbar>␣and␣C<sol>.

=item␣*␣No␣items␣in␣=over

The␣list␣opened␣with␣C<=over>␣does␣not␣contain␣any␣items.

=item␣*␣No␣argument␣for␣=item

C<=item>␣without␣any␣parameters␣is␣deprecated.␣It␣should␣either␣be␣followed
by␣C<*>␣to␣indicate␣an␣unordered␣list,␣by␣a␣number␣(optionally␣followed
by␣a␣dot)␣to␣indicate␣an␣ordered␣(numbered)␣list␣or␣simple␣text␣for␣a
definition␣list.

=item␣*␣empty␣section␣in␣previous␣paragraph

The␣previous␣section␣(introduced␣by␣a␣C<=head>␣command)␣does␣not␣contain
any␣text.␣This␣usually␣indicates␣that␣something␣is␣missing.␣Note:␣A
C<=head1>␣followed␣immediately␣by␣C<=head2>␣does␣not␣trigger␣this␣warning.

=item␣*␣Verbatim␣paragraph␣in␣NAME␣section

The␣NAME␣section␣(C<=head1␣NAME>)␣should␣consist␣of␣a␣single␣paragraph
with␣the␣script/module␣name,␣followed␣by␣a␣dash␣`-'␣and␣a␣very␣short
description␣of␣what␣the␣thing␣is␣good␣for.

=item␣*␣=headI<n>␣without␣preceding␣higher␣level

For␣example␣if␣there␣is␣a␣C<=head2>␣in␣the␣POD␣file␣prior␣to␣a
C<=head1>.

=back

=head2␣Hyperlinks

There␣are␣some␣warnings␣with␣respect␣to␣malformed␣hyperlinks:

=over␣4

=item␣*␣ignoring␣leading/trailing␣whitespace␣in␣link

There␣is␣whitespace␣at␣the␣beginning␣or␣the␣end␣of␣the␣contents␣of
LE<lt>...E<gt>.

=item␣*␣(section)␣in␣'$page'␣deprecated

There␣is␣a␣section␣detected␣in␣the␣page␣name␣of␣LE<lt>...E<gt>,␣e.g.
C<LE<lt>passwd(2)E<gt>>.␣POD␣hyperlinks␣may␣point␣to␣POD␣documents␣only.
Please␣write␣C<CE<lt>passwd(2)E<gt>>␣instead.␣Some␣formatters␣are␣able
to␣expand␣this␣to␣appropriate␣code.␣For␣links␣to␣(builtin)␣functions,
please␣say␣C<LE<lt>perlfunc/mkdirE<gt>>,␣without␣().

=item␣*␣alternative␣text/node␣'%s'␣contains␣non-escaped␣|␣or␣/

The␣characters␣C<|>␣and␣C</>␣are␣special␣in␣the␣LE<lt>...E<gt>␣context.
Although␣the␣hyperlink␣parser␣does␣its␣best␣to␣determine␣which␣"/"␣is
text␣and␣which␣is␣a␣delimiter␣in␣case␣of␣doubt,␣one␣ought␣to␣escape
these␣literal␣characters␣like␣this:

␣␣/␣␣␣␣␣E<sol>
␣␣|␣␣␣␣␣E<verbar>

=back

=head1␣RETURN␣VALUE

B<podchecker>␣returns␣the␣number␣of␣POD␣syntax␣errors␣found␣or␣-1␣if
there␣were␣no␣POD␣commands␣at␣all␣found␣in␣the␣file.

=head1␣EXAMPLES

See␣L</SYNOPSIS>

=head1␣INTERFACE

While␣checking,␣this␣module␣collects␣document␣properties,␣e.g.␣the␣nodes
for␣hyperlinks␣(C<=headX>,␣C<=item>)␣and␣index␣entries␣(C<XE<lt>E<gt>>).
POD␣translators␣can␣use␣this␣feature␣to␣syntax-check␣and␣get␣the␣nodes␣in
a␣first␣pass␣before␣actually␣starting␣to␣convert.␣This␣is␣expensive␣in␣terms
of␣execution␣time,␣but␣allows␣for␣very␣robust␣conversions.

Since␣PodParser-1.24␣the␣B<Pod::Checker>␣module␣uses␣only␣the␣B<poderror>
method␣to␣print␣errors␣and␣warnings.␣The␣summary␣output␣(e.g.
"Pod␣syntax␣OK")␣has␣been␣dropped␣from␣the␣module␣and␣has␣been␣included␣in
B<podchecker>␣(the␣script).␣This␣allows␣users␣of␣B<Pod::Checker>␣to
control␣completely␣the␣output␣behavior.␣Users␣of␣B<podchecker>␣(the␣script)
get␣the␣well-known␣behavior.

=cut
----------
Range: (2018963,2022444) (3481)
<<'EOCSS';
/*␣For␣accessibility␣reasons,␣never␣specify␣text␣sizes␣in␣px/pt/pc/in/cm/mm␣*/

@media␣all␣{␣.hide␣{␣display:␣none;␣}␣}

@media␣print␣{
␣␣.noprint,␣div.indexgroup,␣.backlinktop,␣.backlinkbottom␣{␣display:␣none␣}

␣␣*␣{
␣␣␣␣border-color:␣black␣!important;
␣␣␣␣color:␣black␣!important;
␣␣␣␣background-color:␣transparent␣!important;
␣␣␣␣background-image:␣none␣!important;
␣␣}

␣␣dl.superindex␣>␣dd␣␣{
␣␣␣␣word-spacing:␣.6em;
␣␣}
}

@media␣aural,␣braille,␣embossed␣{
␣␣div.indexgroup␣␣{␣display:␣none;␣}␣␣/*␣Too␣noisy,␣don't␣you␣think?␣*/
␣␣dl.superindex␣>␣dt:before␣{␣content:␣"Group␣";␣␣}
␣␣dl.superindex␣>␣dt:after␣␣{␣content:␣"␣contains:";␣}
␣␣.backlinktop␣␣␣␣a:before␣␣{␣content:␣"Back␣to␣contents";␣}
␣␣.backlinkbottom␣a:before␣␣{␣content:␣"Back␣to␣contents";␣}
}

@media␣aural␣{
␣␣dl.superindex␣>␣dt␣␣{␣pause-before:␣600ms;␣}
}

@media␣screen,␣tty,␣tv,␣projection␣{
␣␣.noscreen␣{␣display:␣none;␣}

␣␣a:link␣␣␣␣{␣color:␣#7070ff;␣text-decoration:␣underline;␣}
␣␣a:visited␣{␣color:␣#e030ff;␣text-decoration:␣underline;␣}
␣␣a:active␣␣{␣color:␣#800000;␣text-decoration:␣underline;␣}
␣␣body.contentspage␣a␣␣␣␣␣␣␣␣␣␣␣␣{␣text-decoration:␣none;␣}
␣␣a.u␣{␣color:␣#fff␣!important;␣text-decoration:␣none;␣}

␣␣body.pod␣{
␣␣␣␣margin:␣0␣5px;
␣␣␣␣color:␣␣␣␣␣␣␣␣␣␣␣␣#fff;
␣␣␣␣background-color:␣#000;
␣␣}

␣␣body.pod␣h1,␣body.pod␣h2,␣body.pod␣h3,␣body.pod␣h4␣␣{
␣␣␣␣font-family:␣Tahoma,␣Verdana,␣Helvetica,␣Arial,␣sans-serif;
␣␣␣␣font-weight:␣normal;
␣␣␣␣margin-top:␣1.2em;
␣␣␣␣margin-bottom:␣.1em;
␣␣␣␣border-top:␣thin␣solid␣transparent;
␣␣␣␣/*␣margin-left:␣-5px;␣␣border-left:␣2px␣#7070ff␣solid;␣␣padding-left:␣3px;␣*/
␣␣}
␣␣
␣␣body.pod␣h1␣␣{␣border-top-color:␣#0a0;␣}
␣␣body.pod␣h2␣␣{␣border-top-color:␣#080;␣}
␣␣body.pod␣h3␣␣{␣border-top-color:␣#040;␣}
␣␣body.pod␣h4␣␣{␣border-top-color:␣#010;␣}

␣␣p.backlinktop␣+␣h1␣{␣border-top:␣none;␣margin-top:␣0em;␣␣}
␣␣p.backlinktop␣+␣h2␣{␣border-top:␣none;␣margin-top:␣0em;␣␣}
␣␣p.backlinktop␣+␣h3␣{␣border-top:␣none;␣margin-top:␣0em;␣␣}
␣␣p.backlinktop␣+␣h4␣{␣border-top:␣none;␣margin-top:␣0em;␣␣}

␣␣body.pod␣dt␣{
␣␣␣␣font-size:␣105%;␣/*␣just␣a␣wee␣bit␣more␣than␣normal␣*/
␣␣}

␣␣.indexgroup␣{␣font-size:␣80%;␣}

␣␣.backlinktop,␣␣␣.backlinkbottom␣␣␣␣{
␣␣␣␣margin-left:␣␣-5px;
␣␣␣␣margin-right:␣-5px;
␣␣␣␣background-color:␣␣␣␣␣␣␣␣␣#040;
␣␣␣␣border-top:␣␣␣␣thin␣solid␣#050;
␣␣␣␣border-bottom:␣thin␣solid␣#050;
␣␣}
␣␣
␣␣.backlinktop␣a,␣.backlinkbottom␣a␣␣{
␣␣␣␣text-decoration:␣none;
␣␣␣␣color:␣#080;
␣␣␣␣background-color:␣␣#000;
␣␣␣␣border:␣thin␣solid␣#0d0;
␣␣}
␣␣.backlinkbottom␣{␣margin-bottom:␣0;␣padding-bottom:␣0;␣}
␣␣.backlinktop␣␣␣␣{␣margin-top:␣␣␣␣0;␣padding-top:␣␣␣␣0;␣}

␣␣body.contentspage␣{
␣␣␣␣color:␣␣␣␣␣␣␣␣␣␣␣␣#fff;
␣␣␣␣background-color:␣#000;
␣␣}
␣␣
␣␣body.contentspage␣h1␣␣{
␣␣␣␣color:␣␣␣␣␣␣␣␣␣␣␣␣#0d0;
␣␣␣␣margin-left:␣1em;
␣␣␣␣margin-right:␣1em;
␣␣␣␣text-indent:␣-.9em;
␣␣␣␣font-family:␣Tahoma,␣Verdana,␣Helvetica,␣Arial,␣sans-serif;
␣␣␣␣font-weight:␣normal;
␣␣␣␣border-top:␣␣␣␣thin␣solid␣#fff;
␣␣␣␣border-bottom:␣thin␣solid␣#fff;
␣␣␣␣text-align:␣center;
␣␣}

␣␣dl.superindex␣>␣dt␣␣{
␣␣␣␣font-family:␣Tahoma,␣Verdana,␣Helvetica,␣Arial,␣sans-serif;
␣␣␣␣font-weight:␣normal;
␣␣␣␣font-size:␣90%;
␣␣␣␣margin-top:␣.45em;
␣␣␣␣/*␣margin-bottom:␣-.15em;␣*/
␣␣}
␣␣dl.superindex␣>␣dd␣␣{
␣␣␣␣word-spacing:␣.6em;␣␣␣␣/*␣most␣important␣rule␣here!␣*/
␣␣}
␣␣dl.superindex␣>␣a:link␣␣{
␣␣␣␣text-decoration:␣none;
␣␣␣␣color:␣#fff;
␣␣}

␣␣.contentsfooty␣{
␣␣␣␣border-top:␣thin␣solid␣#999;
␣␣␣␣font-size:␣90%;
␣␣}
␣␣
}

/*␣The␣End␣*/

EOCSS
----------
Range: (2022537,2024530) (1993)
<<'EOJAVASCRIPT';

//␣From␣http://www.alistapart.com/articles/alternate/

function␣setActiveStyleSheet(title)␣{
␣␣var␣i,␣a,␣main;
␣␣for(i=0␣␣;␣␣(a␣=␣document.getElementsByTagName("link")[i])␣␣;␣␣i++)␣{
␣␣␣␣if(a.getAttribute("rel").indexOf("style")␣!=␣-1␣&&␣a.getAttribute("title"))␣{
␣␣␣␣␣␣a.disabled␣=␣true;
␣␣␣␣␣␣if(a.getAttribute("title")␣==␣title)␣a.disabled␣=␣false;
␣␣␣␣}
␣␣}
}

function␣getActiveStyleSheet()␣{
␣␣var␣i,␣a;
␣␣for(i=0␣␣;␣␣(a␣=␣document.getElementsByTagName("link")[i])␣␣;␣␣i++)␣{
␣␣␣␣if(␣␣␣a.getAttribute("rel").indexOf("style")␣!=␣-1
␣␣␣␣␣␣␣&&␣a.getAttribute("title")
␣␣␣␣␣␣␣&&␣!a.disabled
␣␣␣␣␣␣␣)␣return␣a.getAttribute("title");
␣␣}
␣␣return␣null;
}

function␣getPreferredStyleSheet()␣{
␣␣var␣i,␣a;
␣␣for(i=0␣␣;␣␣(a␣=␣document.getElementsByTagName("link")[i])␣␣;␣␣i++)␣{
␣␣␣␣if(␣␣␣a.getAttribute("rel").indexOf("style")␣!=␣-1
␣␣␣␣␣␣␣&&␣a.getAttribute("rel").indexOf("alt")␣==␣-1
␣␣␣␣␣␣␣&&␣a.getAttribute("title")
␣␣␣␣␣␣␣)␣return␣a.getAttribute("title");
␣␣}
␣␣return␣null;
}

function␣createCookie(name,value,days)␣{
␣␣if␣(days)␣{
␣␣␣␣var␣date␣=␣new␣Date();
␣␣␣␣date.setTime(date.getTime()+(days*24*60*60*1000));
␣␣␣␣var␣expires␣=␣";␣expires="+date.toGMTString();
␣␣}
␣␣else␣expires␣=␣"";
␣␣document.cookie␣=␣name+"="+value+expires+";␣path=/";
}

function␣readCookie(name)␣{
␣␣var␣nameEQ␣=␣name␣+␣"=";
␣␣var␣ca␣=␣document.cookie.split(';');
␣␣for(var␣i=0␣␣;␣␣i␣<␣ca.length␣␣;␣␣i++)␣{
␣␣␣␣var␣c␣=␣ca[i];
␣␣␣␣while␣(c.charAt(0)=='␣')␣c␣=␣c.substring(1,c.length);
␣␣␣␣if␣(c.indexOf(nameEQ)␣==␣0)␣return␣c.substring(nameEQ.length,c.length);
␣␣}
␣␣return␣null;
}

window.onload␣=␣function(e)␣{
␣␣var␣cookie␣=␣readCookie("style");
␣␣var␣title␣=␣cookie␣?␣cookie␣:␣getPreferredStyleSheet();
␣␣setActiveStyleSheet(title);
}

window.onunload␣=␣function(e)␣{
␣␣var␣title␣=␣getActiveStyleSheet();
␣␣createCookie("style",␣title,␣365);
}

var␣cookie␣=␣readCookie("style");
var␣title␣=␣cookie␣?␣cookie␣:␣getPreferredStyleSheet();
setActiveStyleSheet(title);

//␣The␣End

EOJAVASCRIPT
----------
Range: (2122500,2125628) (3128)
=head1␣METHODS

Pod::Simple::XHTML␣offers␣a␣number␣of␣methods␣that␣modify␣the␣format␣of
the␣HTML␣output.␣Call␣these␣after␣creating␣the␣parser␣object,␣but␣before
the␣call␣to␣C<parse_file>:

␣␣my␣$parser␣=␣Pod::PseudoPod::HTML->new();
␣␣$parser->set_optional_param("value");
␣␣$parser->parse_file($file);

=head2␣perldoc_url_prefix

In␣turning␣L<Foo::Bar>␣into␣http://whatever/Foo%3a%3aBar,␣what
to␣put␣before␣the␣"Foo%3a%3aBar".␣The␣default␣value␣is
"http://search.cpan.org/perldoc?".

=head2␣perldoc_url_postfix

What␣to␣put␣after␣"Foo%3a%3aBar"␣in␣the␣URL.␣This␣option␣is␣not␣set␣by
default.

=head2␣man_url_prefix

In␣turning␣C<<␣L<crontab(5)>␣>>␣into␣http://whatever/man/1/crontab,␣what
to␣put␣before␣the␣"1/crontab".␣The␣default␣value␣is
"http://man.he.net/man".

=head2␣man_url_postfix

What␣to␣put␣after␣"1/crontab"␣in␣the␣URL.␣This␣option␣is␣not␣set␣by␣default.

=head2␣title_prefix,␣title_postfix

What␣to␣put␣before␣and␣after␣the␣title␣in␣the␣head.␣The␣values␣should
already␣be␣&-escaped.

=head2␣html_css

␣␣$parser->html_css('path/to/style.css');

The␣URL␣or␣relative␣path␣of␣a␣CSS␣file␣to␣include.␣This␣option␣is␣not
set␣by␣default.

=head2␣html_javascript

The␣URL␣or␣relative␣path␣of␣a␣JavaScript␣file␣to␣pull␣in.␣This␣option␣is
not␣set␣by␣default.

=head2␣html_doctype

A␣document␣type␣tag␣for␣the␣file.␣This␣option␣is␣not␣set␣by␣default.

=head2␣html_header_tags

Additional␣arbitrary␣HTML␣tags␣for␣the␣header␣of␣the␣document.␣The
default␣value␣is␣just␣a␣content␣type␣header␣tag:

␣␣<meta␣http-equiv="Content-Type"␣content="text/html;␣charset=ISO-8859-1">

Add␣additional␣meta␣tags␣here,␣or␣blocks␣of␣inline␣CSS␣or␣JavaScript
(wrapped␣in␣the␣appropriate␣tags).

=head2␣html_h_level

This␣is␣the␣level␣of␣HTML␣"Hn"␣element␣to␣which␣a␣Pod␣"head1"␣corresponds.␣␣For
example,␣if␣C<html_h_level>␣is␣set␣to␣2,␣a␣head1␣will␣produce␣an␣H2,␣a␣head2
will␣produce␣an␣H3,␣and␣so␣on.

=head2␣default_title

Set␣a␣default␣title␣for␣the␣page␣if␣no␣title␣can␣be␣determined␣from␣the
content.␣The␣value␣of␣this␣string␣should␣already␣be␣&-escaped.

=head2␣force_title

Force␣a␣title␣for␣the␣page␣(don't␣try␣to␣determine␣it␣from␣the␣content).
The␣value␣of␣this␣string␣should␣already␣be␣&-escaped.

=head2␣html_header,␣html_footer

Set␣the␣HTML␣output␣at␣the␣beginning␣and␣end␣of␣each␣file.␣The␣default
header␣includes␣a␣title,␣a␣doctype␣tag␣(if␣C<html_doctype>␣is␣set),␣a
content␣tag␣(customized␣by␣C<html_header_tags>),␣a␣tag␣for␣a␣CSS␣file
(if␣C<html_css>␣is␣set),␣and␣a␣tag␣for␣a␣Javascript␣file␣(if
C<html_javascript>␣is␣set).␣The␣default␣footer␣simply␣closes␣the␣C<html>
and␣C<body>␣tags.

The␣options␣listed␣above␣customize␣parts␣of␣the␣default␣header,␣but
setting␣C<html_header>␣or␣C<html_footer>␣completely␣overrides␣the
built-in␣header␣or␣footer.␣These␣may␣be␣useful␣if␣you␣want␣to␣use
template␣tags␣instead␣of␣literal␣HTML␣headers␣and␣footers␣or␣are
integrating␣converted␣POD␣pages␣in␣a␣larger␣website.

If␣you␣want␣no␣headers␣or␣footers␣output␣in␣the␣HTML,␣set␣these␣options
to␣the␣empty␣string.

=head2␣index

Whether␣to␣add␣a␣table-of-contents␣at␣the␣top␣of␣each␣page␣(called␣an
index␣for␣the␣sake␣of␣tradition).


=cut
----------
Range: (2209269,2213585) (4316)
=head1␣NAME

Pod::Html␣-␣module␣to␣convert␣pod␣files␣to␣HTML

=head1␣SYNOPSIS

␣␣␣␣use␣Pod::Html;
␣␣␣␣pod2html([options]);

=head1␣DESCRIPTION

Converts␣files␣from␣pod␣format␣(see␣L<perlpod>)␣to␣HTML␣format.␣␣It
can␣automatically␣generate␣indexes␣and␣cross-references,␣and␣it␣keeps
a␣cache␣of␣things␣it␣knows␣how␣to␣cross-reference.

=head1␣FUNCTIONS

=head2␣pod2html

␣␣␣␣pod2html("pod2html",
␣␣␣␣␣␣␣␣␣␣␣␣␣"--podpath=lib:ext:pod:vms",
␣␣␣␣␣␣␣␣␣␣␣␣␣"--podroot=/usr/src/perl",
␣␣␣␣␣␣␣␣␣␣␣␣␣"--htmlroot=/perl/nmanual",
␣␣␣␣␣␣␣␣␣␣␣␣␣"--libpods=perlfunc:perlguts:perlvar:perlrun:perlop",
␣␣␣␣␣␣␣␣␣␣␣␣␣"--recurse",
␣␣␣␣␣␣␣␣␣␣␣␣␣"--infile=foo.pod",
␣␣␣␣␣␣␣␣␣␣␣␣␣"--outfile=/perl/nmanual/foo.html");

pod2html␣takes␣the␣following␣arguments:

=over␣4

=item␣backlink

␣␣␣␣--backlink="Back␣to␣Top"

Adds␣"Back␣to␣Top"␣links␣in␣front␣of␣every␣C<head1>␣heading␣(except␣for
the␣first).␣␣By␣default,␣no␣backlinks␣are␣generated.

=item␣cachedir

␣␣␣␣--cachedir=name

Creates␣the␣item␣and␣directory␣caches␣in␣the␣given␣directory.

=item␣css

␣␣␣␣--css=stylesheet

Specify␣the␣URL␣of␣a␣cascading␣style␣sheet.␣␣Also␣disables␣all␣HTML/CSS
C<style>␣attributes␣that␣are␣output␣by␣default␣(to␣avoid␣conflicts).

=item␣flush

␣␣␣␣--flush

Flushes␣the␣item␣and␣directory␣caches.

=item␣header

␣␣␣␣--header
␣␣␣␣--noheader

Creates␣header␣and␣footer␣blocks␣containing␣the␣text␣of␣the␣C<NAME>
section.␣␣By␣default,␣no␣headers␣are␣generated.

=item␣help

␣␣␣␣--help

Displays␣the␣usage␣message.

=item␣hiddendirs

␣␣␣␣--hiddendirs
␣␣␣␣--nohiddendirs

Include␣hidden␣directories␣in␣the␣search␣for␣POD's␣in␣podpath␣if␣recurse
is␣set.
The␣default␣is␣not␣to␣traverse␣any␣directory␣whose␣name␣begins␣with␣C<.>.
See␣L</"podpath">␣and␣L</"recurse">.

[This␣option␣is␣for␣backward␣compatibility␣only.
It's␣hard␣to␣imagine␣that␣one␣would␣usefully␣create␣a␣module␣with␣a
name␣component␣beginning␣with␣C<.>.]

=item␣htmldir

␣␣␣␣--htmldir=name

Sets␣the␣directory␣in␣which␣the␣resulting␣HTML␣file␣is␣placed.␣␣This
is␣used␣to␣generate␣relative␣links␣to␣other␣files.␣Not␣passing␣this
causes␣all␣links␣to␣be␣absolute,␣since␣this␣is␣the␣value␣that␣tells
Pod::Html␣the␣root␣of␣the␣documentation␣tree.

=item␣htmlroot

␣␣␣␣--htmlroot=name

Sets␣the␣base␣URL␣for␣the␣HTML␣files.␣␣When␣cross-references␣are␣made,
the␣HTML␣root␣is␣prepended␣to␣the␣URL.

=item␣index

␣␣␣␣--index
␣␣␣␣--noindex

Generate␣an␣index␣at␣the␣top␣of␣the␣HTML␣file.␣␣This␣is␣the␣default
behaviour.

=item␣infile

␣␣␣␣--infile=name

Specify␣the␣pod␣file␣to␣convert.␣␣Input␣is␣taken␣from␣STDIN␣if␣no
infile␣is␣specified.

=item␣libpods

␣␣␣␣--libpods=name:...:name

List␣of␣page␣names␣(eg,␣"perlfunc")␣which␣contain␣linkable␣C<=item>s.

=item␣netscape

␣␣␣␣--netscape
␣␣␣␣--nonetscape

B<Deprecated>,␣has␣no␣effect.␣For␣backwards␣compatibility␣only.

=item␣outfile

␣␣␣␣--outfile=name

Specify␣the␣HTML␣file␣to␣create.␣␣Output␣goes␣to␣STDOUT␣if␣no␣outfile
is␣specified.

=item␣podpath

␣␣␣␣--podpath=name:...:name

Specify␣which␣subdirectories␣of␣the␣podroot␣contain␣pod␣files␣whose
HTML␣converted␣forms␣can␣be␣linked␣to␣in␣cross␣references.

=item␣podroot

␣␣␣␣--podroot=name

Specify␣the␣base␣directory␣for␣finding␣library␣pods.

=item␣quiet

␣␣␣␣--quiet
␣␣␣␣--noquiet

Don't␣display␣I<mostly␣harmless>␣warning␣messages.␣␣These␣messages
will␣be␣displayed␣by␣default.␣␣But␣this␣is␣not␣the␣same␣as␣C<verbose>
mode.

=item␣recurse

␣␣␣␣--recurse
␣␣␣␣--norecurse

Recurse␣into␣subdirectories␣specified␣in␣podpath␣(default␣behaviour).

=item␣title

␣␣␣␣--title=title

Specify␣the␣title␣of␣the␣resulting␣HTML␣file.

=item␣verbose

␣␣␣␣--verbose
␣␣␣␣--noverbose

Display␣progress␣messages.␣␣By␣default,␣they␣won't␣be␣displayed.

=back

=head2␣htmlify

␣␣␣␣htmlify($heading);

Converts␣a␣pod␣section␣specification␣to␣a␣suitable␣section␣specification
for␣HTML.␣Note␣that␣we␣keep␣spaces␣and␣special␣characters␣except␣
C<",␣?>␣(Netscape␣problem)␣and␣the␣hyphen␣(writer's␣problem...).

=head2␣anchorify

␣␣␣␣anchorify(@heading);

Similar␣to␣C<htmlify()>,␣but␣turns␣non-alphanumerics␣into␣underscores.␣␣Note
that␣C<anchorify()>␣is␣not␣exported␣by␣default.

=head1␣ENVIRONMENT

Uses␣C<$Config{pod2html}>␣to␣setup␣default␣options.

=head1␣AUTHOR

Tom␣Christiansen,␣E<lt>tchrist@perl.comE<gt>.

=head1␣SEE␣ALSO

L<perlpod>

=head1␣COPYRIGHT

This␣program␣is␣distributed␣under␣the␣Artistic␣License.

=cut
----------
Range: (2224575,2226687) (2112)
<<END_OF_USAGE;
Usage:␣␣$0␣--help␣--htmlroot=<name>␣--infile=<name>␣--outfile=<name>
␣␣␣␣␣␣␣␣␣␣␣--podpath=<name>:...:<name>␣--podroot=<name>
␣␣␣␣␣␣␣␣␣␣␣--libpods=<name>:...:<name>␣--recurse␣--verbose␣--index
␣␣␣␣␣␣␣␣␣␣␣--netscape␣--norecurse␣--noindex␣--cachedir=<name>

␣␣--backlink␣␣␣␣␣-␣set␣text␣for␣"back␣to␣top"␣links␣(default:␣none).
␣␣--cachedir␣␣␣␣␣-␣directory␣for␣the␣item␣and␣directory␣cache␣files.
␣␣--css␣␣␣␣␣␣␣␣␣␣-␣stylesheet␣URL
␣␣--flush␣␣␣␣␣␣␣␣-␣flushes␣the␣item␣and␣directory␣caches.
␣␣--[no]header␣␣␣-␣produce␣block␣header/footer␣(default␣is␣no␣headers).
␣␣--help␣␣␣␣␣␣␣␣␣-␣prints␣this␣message.
␣␣--hiddendirs␣␣␣-␣search␣hidden␣directories␣in␣podpath
␣␣--htmldir␣␣␣␣␣␣-␣directory␣for␣resulting␣HTML␣files.
␣␣--htmlroot␣␣␣␣␣-␣http-server␣base␣directory␣from␣which␣all␣relative␣paths
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣in␣podpath␣stem␣(default␣is␣/).
␣␣--[no]index␣␣␣␣-␣generate␣an␣index␣at␣the␣top␣of␣the␣resulting␣html
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣(default␣behaviour).
␣␣--infile␣␣␣␣␣␣␣-␣filename␣for␣the␣pod␣to␣convert␣(input␣taken␣from␣stdin
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣by␣default).
␣␣--libpods␣␣␣␣␣␣-␣colon-separated␣list␣of␣pages␣to␣search␣for␣=item␣pod
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣directives␣in␣as␣targets␣of␣C<>␣and␣implicit␣links␣(empty
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣by␣default).␣␣note,␣these␣are␣not␣filenames,␣but␣rather
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣page␣names␣like␣those␣that␣appear␣in␣L<>␣links.
␣␣--outfile␣␣␣␣␣␣-␣filename␣for␣the␣resulting␣html␣file␣(output␣sent␣to
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣stdout␣by␣default).
␣␣--podpath␣␣␣␣␣␣-␣colon-separated␣list␣of␣directories␣containing␣library
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣pods␣(empty␣by␣default).
␣␣--podroot␣␣␣␣␣␣-␣filesystem␣base␣directory␣from␣which␣all␣relative␣paths
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣in␣podpath␣stem␣(default␣is␣.).
␣␣--[no]quiet␣␣␣␣-␣suppress␣some␣benign␣warning␣messages␣(default␣is␣off).
␣␣--[no]recurse␣␣-␣recurse␣on␣those␣subdirectories␣listed␣in␣podpath
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣(default␣behaviour).
␣␣--title␣␣␣␣␣␣␣␣-␣title␣that␣will␣appear␣in␣resulting␣html␣file.
␣␣--[no]verbose␣␣-␣self-explanatory␣(off␣by␣default).
␣␣--[no]netscape␣-␣deprecated,␣has␣no␣effect.␣for␣backwards␣compatibility␣only.

END_OF_USAGE
----------
Range: (2485782,2498951) (13169)
=head1␣NAME

Pod::Usage,␣pod2usage()␣-␣print␣a␣usage␣message␣from␣embedded␣pod␣documentation

=head1␣SYNOPSIS

␣␣use␣Pod::Usage

␣␣my␣$message_text␣␣=␣"This␣text␣precedes␣the␣usage␣message.";
␣␣my␣$exit_status␣␣␣=␣2;␣␣␣␣␣␣␣␣␣␣##␣The␣exit␣status␣to␣use
␣␣my␣$verbose_level␣=␣0;␣␣␣␣␣␣␣␣␣␣##␣The␣verbose␣level␣to␣use
␣␣my␣$filehandle␣␣␣␣=␣\*STDERR;␣␣␣##␣The␣filehandle␣to␣write␣to

␣␣pod2usage($message_text);

␣␣pod2usage($exit_status);

␣␣pod2usage(␣{␣-message␣=>␣$message_text␣,
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣-exitval␣=>␣$exit_status␣␣,␣␣
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣-verbose␣=>␣$verbose_level,␣␣
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣-output␣␣=>␣$filehandle␣}␣);

␣␣pod2usage(␣␣␣-msg␣␣␣␣␣=>␣$message_text␣,
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣-exitval␣=>␣$exit_status␣␣,␣␣
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣-verbose␣=>␣$verbose_level,␣␣
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣-output␣␣=>␣$filehandle␣␣␣);

␣␣pod2usage(␣␣␣-verbose␣=>␣2,
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣-noperldoc␣=>␣1␣␣)

=head1␣ARGUMENTS

B<pod2usage>␣should␣be␣given␣either␣a␣single␣argument,␣or␣a␣list␣of
arguments␣corresponding␣to␣an␣associative␣array␣(a␣"hash").␣When␣a␣single
argument␣is␣given,␣it␣should␣correspond␣to␣exactly␣one␣of␣the␣following:

=over␣4

=item␣*

A␣string␣containing␣the␣text␣of␣a␣message␣to␣print␣I<before>␣printing
the␣usage␣message

=item␣*

A␣numeric␣value␣corresponding␣to␣the␣desired␣exit␣status

=item␣*

A␣reference␣to␣a␣hash

=back

If␣more␣than␣one␣argument␣is␣given␣then␣the␣entire␣argument␣list␣is
assumed␣to␣be␣a␣hash.␣␣If␣a␣hash␣is␣supplied␣(either␣as␣a␣reference␣or
as␣a␣list)␣it␣should␣contain␣one␣or␣more␣elements␣with␣the␣following
keys:

=over␣4

=item␣C<-message>

=item␣C<-msg>

The␣text␣of␣a␣message␣to␣print␣immediately␣prior␣to␣printing␣the
program's␣usage␣message.␣

=item␣C<-exitval>

The␣desired␣exit␣status␣to␣pass␣to␣the␣B<exit()>␣function.
This␣should␣be␣an␣integer,␣or␣else␣the␣string␣"NOEXIT"␣to
indicate␣that␣control␣should␣simply␣be␣returned␣without
terminating␣the␣invoking␣process.

=item␣C<-verbose>

The␣desired␣level␣of␣"verboseness"␣to␣use␣when␣printing␣the␣usage
message.␣If␣the␣corresponding␣value␣is␣0,␣then␣only␣the␣"SYNOPSIS"
section␣of␣the␣pod␣documentation␣is␣printed.␣If␣the␣corresponding␣value
is␣1,␣then␣the␣"SYNOPSIS"␣section,␣along␣with␣any␣section␣entitled
"OPTIONS",␣"ARGUMENTS",␣or␣"OPTIONS␣AND␣ARGUMENTS"␣is␣printed.␣␣If␣the
corresponding␣value␣is␣2␣or␣more␣then␣the␣entire␣manpage␣is␣printed.

The␣special␣verbosity␣level␣99␣requires␣to␣also␣specify␣the␣-sections
parameter;␣then␣these␣sections␣are␣extracted␣(see␣L<Pod::Select>)
and␣printed.

=item␣C<-sections>

A␣string␣representing␣a␣selection␣list␣for␣sections␣to␣be␣printed
when␣-verbose␣is␣set␣to␣99,␣e.g.␣C<"NAME|SYNOPSIS|DESCRIPTION|VERSION">.

Alternatively,␣an␣array␣reference␣of␣section␣specifications␣can␣be␣used:

␣␣pod2usage(-verbose␣=>␣99,␣
␣␣␣␣␣␣␣␣␣␣␣␣-sections␣=>␣[␣qw(fred␣fred/subsection)␣]␣);

=item␣C<-output>

A␣reference␣to␣a␣filehandle,␣or␣the␣pathname␣of␣a␣file␣to␣which␣the
usage␣message␣should␣be␣written.␣The␣default␣is␣C<\*STDERR>␣unless␣the
exit␣value␣is␣less␣than␣2␣(in␣which␣case␣the␣default␣is␣C<\*STDOUT>).

=item␣C<-input>

A␣reference␣to␣a␣filehandle,␣or␣the␣pathname␣of␣a␣file␣from␣which␣the
invoking␣script's␣pod␣documentation␣should␣be␣read.␣␣It␣defaults␣to␣the
file␣indicated␣by␣C<$0>␣(C<$PROGRAM_NAME>␣for␣users␣of␣F<English.pm>).

If␣you␣are␣calling␣B<pod2usage()>␣from␣a␣module␣and␣want␣to␣display
that␣module's␣POD,␣you␣can␣use␣this:

␣␣use␣Pod::Find␣qw(pod_where);
␣␣pod2usage(␣-input␣=>␣pod_where({-inc␣=>␣1},␣__PACKAGE__)␣);

=item␣C<-pathlist>

A␣list␣of␣directory␣paths.␣If␣the␣input␣file␣does␣not␣exist,␣then␣it
will␣be␣searched␣for␣in␣the␣given␣directory␣list␣(in␣the␣order␣the
directories␣appear␣in␣the␣list).␣It␣defaults␣to␣the␣list␣of␣directories
implied␣by␣C<$ENV{PATH}>.␣The␣list␣may␣be␣specified␣either␣by␣a␣reference
to␣an␣array,␣or␣by␣a␣string␣of␣directory␣paths␣which␣use␣the␣same␣path
separator␣as␣C<$ENV{PATH}>␣on␣your␣system␣(e.g.,␣C<:>␣for␣Unix,␣C<;>␣for
MSWin32␣and␣DOS).

=item␣C<-noperldoc>

By␣default,␣Pod::Usage␣will␣call␣L<perldoc>␣when␣-verbose␣>=␣2␣is
specified.␣This␣does␣not␣work␣well␣e.g.␣if␣the␣script␣was␣packed
with␣L<PAR>.␣The␣-noperldoc␣option␣suppresses␣the␣external␣call␣to
L<perldoc>␣and␣uses␣the␣simple␣text␣formatter␣(L<Pod::Text>)␣to␣
output␣the␣POD.

=back

=head1␣DESCRIPTION

B<pod2usage>␣will␣print␣a␣usage␣message␣for␣the␣invoking␣script␣(using
its␣embedded␣pod␣documentation)␣and␣then␣exit␣the␣script␣with␣the
desired␣exit␣status.␣The␣usage␣message␣printed␣may␣have␣any␣one␣of␣three
levels␣of␣"verboseness":␣If␣the␣verbose␣level␣is␣0,␣then␣only␣a␣synopsis
is␣printed.␣If␣the␣verbose␣level␣is␣1,␣then␣the␣synopsis␣is␣printed
along␣with␣a␣description␣(if␣present)␣of␣the␣command␣line␣options␣and
arguments.␣If␣the␣verbose␣level␣is␣2,␣then␣the␣entire␣manual␣page␣is
printed.

Unless␣they␣are␣explicitly␣specified,␣the␣default␣values␣for␣the␣exit
status,␣verbose␣level,␣and␣output␣stream␣to␣use␣are␣determined␣as
follows:

=over␣4

=item␣*

If␣neither␣the␣exit␣status␣nor␣the␣verbose␣level␣is␣specified,␣then␣the
default␣is␣to␣use␣an␣exit␣status␣of␣2␣with␣a␣verbose␣level␣of␣0.

=item␣*

If␣an␣exit␣status␣I<is>␣specified␣but␣the␣verbose␣level␣is␣I<not>,␣then␣the
verbose␣level␣will␣default␣to␣1␣if␣the␣exit␣status␣is␣less␣than␣2␣and
will␣default␣to␣0␣otherwise.

=item␣*

If␣an␣exit␣status␣is␣I<not>␣specified␣but␣verbose␣level␣I<is>␣given,␣then
the␣exit␣status␣will␣default␣to␣2␣if␣the␣verbose␣level␣is␣0␣and␣will
default␣to␣1␣otherwise.

=item␣*

If␣the␣exit␣status␣used␣is␣less␣than␣2,␣then␣output␣is␣printed␣on
C<STDOUT>.␣␣Otherwise␣output␣is␣printed␣on␣C<STDERR>.

=back

Although␣the␣above␣may␣seem␣a␣bit␣confusing␣at␣first,␣it␣generally␣does
"the␣right␣thing"␣in␣most␣situations.␣␣This␣determination␣of␣the␣default
values␣to␣use␣is␣based␣upon␣the␣following␣typical␣Unix␣conventions:

=over␣4

=item␣*

An␣exit␣status␣of␣0␣implies␣"success".␣For␣example,␣B<diff(1)>␣exits
with␣a␣status␣of␣0␣if␣the␣two␣files␣have␣the␣same␣contents.

=item␣*

An␣exit␣status␣of␣1␣implies␣possibly␣abnormal,␣but␣non-defective,␣program
termination.␣␣For␣example,␣B<grep(1)>␣exits␣with␣a␣status␣of␣1␣if
it␣did␣I<not>␣find␣a␣matching␣line␣for␣the␣given␣regular␣expression.

=item␣*

An␣exit␣status␣of␣2␣or␣more␣implies␣a␣fatal␣error.␣For␣example,␣B<ls(1)>
exits␣with␣a␣status␣of␣2␣if␣you␣specify␣an␣illegal␣(unknown)␣option␣on
the␣command␣line.

=item␣*

Usage␣messages␣issued␣as␣a␣result␣of␣bad␣command-line␣syntax␣should␣go
to␣C<STDERR>.␣␣However,␣usage␣messages␣issued␣due␣to␣an␣explicit␣request
to␣print␣usage␣(like␣specifying␣B<-help>␣on␣the␣command␣line)␣should␣go
to␣C<STDOUT>,␣just␣in␣case␣the␣user␣wants␣to␣pipe␣the␣output␣to␣a␣pager
(such␣as␣B<more(1)>).

=item␣*

If␣program␣usage␣has␣been␣explicitly␣requested␣by␣the␣user,␣it␣is␣often
desirable␣to␣exit␣with␣a␣status␣of␣1␣(as␣opposed␣to␣0)␣after␣issuing
the␣user-requested␣usage␣message.␣␣It␣is␣also␣desirable␣to␣give␣a
more␣verbose␣description␣of␣program␣usage␣in␣this␣case.

=back

B<pod2usage>␣doesn't␣force␣the␣above␣conventions␣upon␣you,␣but␣it␣will
use␣them␣by␣default␣if␣you␣don't␣expressly␣tell␣it␣to␣do␣otherwise.␣␣The
ability␣of␣B<pod2usage()>␣to␣accept␣a␣single␣number␣or␣a␣string␣makes␣it
convenient␣to␣use␣as␣an␣innocent␣looking␣error␣message␣handling␣function:

␣␣␣␣use␣Pod::Usage;
␣␣␣␣use␣Getopt::Long;

␣␣␣␣##␣Parse␣options
␣␣␣␣GetOptions("help",␣"man",␣"flag1")␣␣||␣␣pod2usage(2);
␣␣␣␣pod2usage(1)␣␣if␣($opt_help);
␣␣␣␣pod2usage(-verbose␣=>␣2)␣␣if␣($opt_man);

␣␣␣␣##␣Check␣for␣too␣many␣filenames
␣␣␣␣pod2usage("$0:␣Too␣many␣files␣given.\n")␣␣if␣(@ARGV␣>␣1);

Some␣user's␣however␣may␣feel␣that␣the␣above␣"economy␣of␣expression"␣is
not␣particularly␣readable␣nor␣consistent␣and␣may␣instead␣choose␣to␣do
something␣more␣like␣the␣following:

␣␣␣␣use␣Pod::Usage;
␣␣␣␣use␣Getopt::Long;

␣␣␣␣##␣Parse␣options
␣␣␣␣GetOptions("help",␣"man",␣"flag1")␣␣||␣␣pod2usage(-verbose␣=>␣0);
␣␣␣␣pod2usage(-verbose␣=>␣1)␣␣if␣($opt_help);
␣␣␣␣pod2usage(-verbose␣=>␣2)␣␣if␣($opt_man);

␣␣␣␣##␣Check␣for␣too␣many␣filenames
␣␣␣␣pod2usage(-verbose␣=>␣2,␣-message␣=>␣"$0:␣Too␣many␣files␣given.\n")
␣␣␣␣␣␣␣␣if␣(@ARGV␣>␣1);

As␣with␣all␣things␣in␣Perl,␣I<there's␣more␣than␣one␣way␣to␣do␣it>,␣and
B<pod2usage()>␣adheres␣to␣this␣philosophy.␣␣If␣you␣are␣interested␣in
seeing␣a␣number␣of␣different␣ways␣to␣invoke␣B<pod2usage>␣(although␣by␣no
means␣exhaustive),␣please␣refer␣to␣L<"EXAMPLES">.

=head1␣EXAMPLES

Each␣of␣the␣following␣invocations␣of␣C<pod2usage()>␣will␣print␣just␣the
"SYNOPSIS"␣section␣to␣C<STDERR>␣and␣will␣exit␣with␣a␣status␣of␣2:

␣␣␣␣pod2usage();

␣␣␣␣pod2usage(2);

␣␣␣␣pod2usage(-verbose␣=>␣0);

␣␣␣␣pod2usage(-exitval␣=>␣2);

␣␣␣␣pod2usage({-exitval␣=>␣2,␣-output␣=>␣\*STDERR});

␣␣␣␣pod2usage({-verbose␣=>␣0,␣-output␣␣=>␣\*STDERR});

␣␣␣␣pod2usage(-exitval␣=>␣2,␣-verbose␣=>␣0);

␣␣␣␣pod2usage(-exitval␣=>␣2,␣-verbose␣=>␣0,␣-output␣=>␣\*STDERR);

Each␣of␣the␣following␣invocations␣of␣C<pod2usage()>␣will␣print␣a␣message
of␣"Syntax␣error."␣(followed␣by␣a␣newline)␣to␣C<STDERR>,␣immediately
followed␣by␣just␣the␣"SYNOPSIS"␣section␣(also␣printed␣to␣C<STDERR>)␣and
will␣exit␣with␣a␣status␣of␣2:

␣␣␣␣pod2usage("Syntax␣error.");

␣␣␣␣pod2usage(-message␣=>␣"Syntax␣error.",␣-verbose␣=>␣0);

␣␣␣␣pod2usage(-msg␣␣=>␣"Syntax␣error.",␣-exitval␣=>␣2);

␣␣␣␣pod2usage({-msg␣=>␣"Syntax␣error.",␣-exitval␣=>␣2,␣-output␣=>␣\*STDERR});

␣␣␣␣pod2usage({-msg␣=>␣"Syntax␣error.",␣-verbose␣=>␣0,␣-output␣=>␣\*STDERR});

␣␣␣␣pod2usage(-msg␣␣=>␣"Syntax␣error.",␣-exitval␣=>␣2,␣-verbose␣=>␣0);

␣␣␣␣pod2usage(-message␣=>␣"Syntax␣error.",
␣␣␣␣␣␣␣␣␣␣␣␣␣␣-exitval␣=>␣2,
␣␣␣␣␣␣␣␣␣␣␣␣␣␣-verbose␣=>␣0,
␣␣␣␣␣␣␣␣␣␣␣␣␣␣-output␣␣=>␣\*STDERR);

Each␣of␣the␣following␣invocations␣of␣C<pod2usage()>␣will␣print␣the
"SYNOPSIS"␣section␣and␣any␣"OPTIONS"␣and/or␣"ARGUMENTS"␣sections␣to
C<STDOUT>␣and␣will␣exit␣with␣a␣status␣of␣1:

␣␣␣␣pod2usage(1);

␣␣␣␣pod2usage(-verbose␣=>␣1);

␣␣␣␣pod2usage(-exitval␣=>␣1);

␣␣␣␣pod2usage({-exitval␣=>␣1,␣-output␣=>␣\*STDOUT});

␣␣␣␣pod2usage({-verbose␣=>␣1,␣-output␣=>␣\*STDOUT});

␣␣␣␣pod2usage(-exitval␣=>␣1,␣-verbose␣=>␣1);

␣␣␣␣pod2usage(-exitval␣=>␣1,␣-verbose␣=>␣1,␣-output␣=>␣\*STDOUT});

Each␣of␣the␣following␣invocations␣of␣C<pod2usage()>␣will␣print␣the
entire␣manual␣page␣to␣C<STDOUT>␣and␣will␣exit␣with␣a␣status␣of␣1:

␣␣␣␣pod2usage(-verbose␣␣=>␣2);

␣␣␣␣pod2usage({-verbose␣=>␣2,␣-output␣=>␣\*STDOUT});

␣␣␣␣pod2usage(-exitval␣␣=>␣1,␣-verbose␣=>␣2);

␣␣␣␣pod2usage({-exitval␣=>␣1,␣-verbose␣=>␣2,␣-output␣=>␣\*STDOUT});

=head2␣Recommended␣Use

Most␣scripts␣should␣print␣some␣type␣of␣usage␣message␣to␣C<STDERR>␣when␣a
command␣line␣syntax␣error␣is␣detected.␣They␣should␣also␣provide␣an
option␣(usually␣C<-H>␣or␣C<-help>)␣to␣print␣a␣(possibly␣more␣verbose)
usage␣message␣to␣C<STDOUT>.␣Some␣scripts␣may␣even␣wish␣to␣go␣so␣far␣as␣to
provide␣a␣means␣of␣printing␣their␣complete␣documentation␣to␣C<STDOUT>
(perhaps␣by␣allowing␣a␣C<-man>␣option).␣The␣following␣complete␣example
uses␣B<Pod::Usage>␣in␣combination␣with␣B<Getopt::Long>␣to␣do␣all␣of␣these
things:

␣␣␣␣use␣Getopt::Long;
␣␣␣␣use␣Pod::Usage;

␣␣␣␣my␣$man␣=␣0;
␣␣␣␣my␣$help␣=␣0;
␣␣␣␣##␣Parse␣options␣and␣print␣usage␣if␣there␣is␣a␣syntax␣error,
␣␣␣␣##␣or␣if␣usage␣was␣explicitly␣requested.
␣␣␣␣GetOptions('help|?'␣=>␣\$help,␣man␣=>␣\$man)␣or␣pod2usage(2);
␣␣␣␣pod2usage(1)␣if␣$help;
␣␣␣␣pod2usage(-verbose␣=>␣2)␣if␣$man;

␣␣␣␣##␣If␣no␣arguments␣were␣given,␣then␣allow␣STDIN␣to␣be␣used␣only
␣␣␣␣##␣if␣it's␣not␣connected␣to␣a␣terminal␣(otherwise␣print␣usage)
␣␣␣␣pod2usage("$0:␣No␣files␣given.")␣␣if␣((@ARGV␣==␣0)␣&&␣(-t␣STDIN));
␣␣␣␣__END__

␣␣␣␣=head1␣NAME

␣␣␣␣sample␣-␣Using␣GetOpt::Long␣and␣Pod::Usage

␣␣␣␣=head1␣SYNOPSIS

␣␣␣␣sample␣[options]␣[file␣...]

␣␣␣␣␣Options:
␣␣␣␣␣␣␣-help␣␣␣␣␣␣␣␣␣␣␣␣brief␣help␣message
␣␣␣␣␣␣␣-man␣␣␣␣␣␣␣␣␣␣␣␣␣full␣documentation

␣␣␣␣=head1␣OPTIONS

␣␣␣␣=over␣8

␣␣␣␣=item␣B<-help>

␣␣␣␣Print␣a␣brief␣help␣message␣and␣exits.

␣␣␣␣=item␣B<-man>

␣␣␣␣Prints␣the␣manual␣page␣and␣exits.

␣␣␣␣=back

␣␣␣␣=head1␣DESCRIPTION

␣␣␣␣B<This␣program>␣will␣read␣the␣given␣input␣file(s)␣and␣do␣something
␣␣␣␣useful␣with␣the␣contents␣thereof.

␣␣␣␣=cut

=head1␣CAVEATS

By␣default,␣B<pod2usage()>␣will␣use␣C<$0>␣as␣the␣path␣to␣the␣pod␣input
file.␣␣Unfortunately,␣not␣all␣systems␣on␣which␣Perl␣runs␣will␣set␣C<$0>
properly␣(although␣if␣C<$0>␣isn't␣found,␣B<pod2usage()>␣will␣search
C<$ENV{PATH}>␣or␣else␣the␣list␣specified␣by␣the␣C<-pathlist>␣option).
If␣this␣is␣the␣case␣for␣your␣system,␣you␣may␣need␣to␣explicitly␣specify
the␣path␣to␣the␣pod␣docs␣for␣the␣invoking␣script␣using␣something
similar␣to␣the␣following:

␣␣␣␣pod2usage(-exitval␣=>␣2,␣-input␣=>␣"/path/to/your/pod/docs");

In␣the␣pathological␣case␣that␣a␣script␣is␣called␣via␣a␣relative␣path
I<and>␣the␣script␣itself␣changes␣the␣current␣working␣directory
(see␣L<perlfunc/chdir>)␣I<before>␣calling␣pod2usage,␣Pod::Usage␣will
fail␣even␣on␣robust␣platforms.␣Don't␣do␣that.

=head1␣AUTHOR

Please␣report␣bugs␣using␣L<http://rt.cpan.org>.

Marek␣Rouchal␣E<lt>marekr@cpan.orgE<gt>

Brad␣Appleton␣E<lt>bradapp@enteract.comE<gt>

Based␣on␣code␣for␣B<Pod::Text::pod2text()>␣written␣by
Tom␣Christiansen␣E<lt>tchrist@mox.perl.comE<gt>

=head1␣ACKNOWLEDGMENTS

Steven␣McDougall␣E<lt>swmcd@world.std.comE<gt>␣for␣his␣help␣and␣patience
with␣re-writing␣this␣manpage.

=head1␣SEE␣ALSO

L<Pod::Parser>,␣L<Getopt::Long>,␣L<Pod::Find>

=cut
----------
Range: (2515963,2517874) (1911)
<<EOF;
perldoc␣[options]␣PageName|ModuleName|ProgramName...
perldoc␣[options]␣-f␣BuiltinFunction
perldoc␣[options]␣-q␣FAQRegex
perldoc␣[options]␣-v␣PerlVariable

Options:
␣␣␣␣-h␣␣␣Display␣this␣help␣message
␣␣␣␣-V␣␣␣report␣version
␣␣␣␣-r␣␣␣Recursive␣search␣(slow)
␣␣␣␣-i␣␣␣Ignore␣case
␣␣␣␣-t␣␣␣Display␣pod␣using␣pod2text␣instead␣of␣pod2man␣and␣nroff
␣␣␣␣␣␣␣␣␣␣␣␣␣(-t␣is␣the␣default␣on␣win32␣unless␣-n␣is␣specified)
␣␣␣␣-u␣␣␣Display␣unformatted␣pod␣text
␣␣␣␣-m␣␣␣Display␣module's␣file␣in␣its␣entirety
␣␣␣␣-n␣␣␣Specify␣replacement␣for␣nroff
␣␣␣␣-l␣␣␣Display␣the␣module's␣file␣name
␣␣␣␣-F␣␣␣Arguments␣are␣file␣names,␣not␣modules
␣␣␣␣-D␣␣␣Verbosely␣describe␣what's␣going␣on
␣␣␣␣-T␣␣␣Send␣output␣to␣STDOUT␣without␣any␣pager
␣␣␣␣-d␣output_filename_to_send_to
␣␣␣␣-o␣output_format_name
␣␣␣␣-M␣FormatterModuleNameToUse
␣␣␣␣-w␣formatter_option:option_value
␣␣␣␣-L␣translation_code␣␣␣Choose␣doc␣translation␣(if␣any)
␣␣␣␣-X␣␣␣use␣index␣if␣present␣(looks␣for␣pod.idx␣at␣$Config{archlib})
␣␣␣␣-q␣␣␣Search␣the␣text␣of␣questions␣(not␣answers)␣in␣perlfaq[1-9]
␣␣␣␣-f␣␣␣Search␣Perl␣built-in␣functions
␣␣␣␣-v␣␣␣Search␣predefined␣Perl␣variables

PageName|ModuleName...
␣␣␣␣␣␣␣␣␣is␣the␣name␣of␣a␣piece␣of␣documentation␣that␣you␣want␣to␣look␣at.␣You
␣␣␣␣␣␣␣␣␣may␣either␣give␣a␣descriptive␣name␣of␣the␣page␣(as␣in␣the␣case␣of
␣␣␣␣␣␣␣␣␣`perlfunc')␣the␣name␣of␣a␣module,␣either␣like␣`Term::Info'␣or␣like
␣␣␣␣␣␣␣␣␣`Term/Info',␣or␣the␣name␣of␣a␣program,␣like␣`perldoc'.

BuiltinFunction
␣␣␣␣␣␣␣␣␣is␣the␣name␣of␣a␣perl␣function.␣␣Will␣extract␣documentation␣from
␣␣␣␣␣␣␣␣␣`perlfunc'.

FAQRegex
␣␣␣␣␣␣␣␣␣is␣a␣regex.␣Will␣search␣perlfaq[1-9]␣for␣and␣extract␣any
␣␣␣␣␣␣␣␣␣questions␣that␣match.

Any␣switches␣in␣the␣PERLDOC␣environment␣variable␣will␣be␣used␣before␣the
command␣line␣arguments.␣␣The␣optional␣pod␣index␣file␣contains␣a␣list␣of
filenames,␣one␣per␣line.
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣[Perldoc␣v$VERSION]
EOF
----------
Range: (2564878,2569064) (4186)
=head1␣NAME

encoding::warnings␣-␣Warn␣on␣implicit␣encoding␣conversions

=head1␣VERSION

This␣document␣describes␣version␣0.11␣of␣encoding::warnings,␣released
June␣5,␣2007.

=head1␣SYNOPSIS

␣␣␣␣use␣encoding::warnings;␣#␣or␣'FATAL'␣to␣raise␣fatal␣exceptions

␣␣␣␣utf8::encode($a␣=␣chr(20000));␣␣#␣a␣byte-string␣(raw␣bytes)
␣␣␣␣$b␣=␣chr(20000);		␣␣␣␣#␣a␣unicode-string␣(wide␣characters)

␣␣␣␣#␣"Bytes␣implicitly␣upgraded␣into␣wide␣characters␣as␣iso-8859-1"
␣␣␣␣$c␣=␣$a␣.␣$b;

=head1␣DESCRIPTION

=head2␣Overview␣of␣the␣problem

By␣default,␣there␣is␣a␣fundamental␣asymmetry␣in␣Perl's␣unicode␣model:
implicit␣upgrading␣from␣byte-strings␣to␣unicode-strings␣assumes␣that
they␣were␣encoded␣in␣I<ISO␣8859-1␣(Latin-1)>,␣but␣unicode-strings␣are
downgraded␣with␣UTF-8␣encoding.␣␣This␣happens␣because␣the␣first␣256
codepoints␣in␣Unicode␣happens␣to␣agree␣with␣Latin-1.␣␣

However,␣this␣silent␣upgrading␣can␣easily␣cause␣problems,␣if␣you␣happen
to␣mix␣unicode␣strings␣with␣non-Latin1␣data␣--␣i.e.␣byte-strings␣encoded
in␣UTF-8␣or␣other␣encodings.␣␣The␣error␣will␣not␣manifest␣until␣the
combined␣string␣is␣written␣to␣output,␣at␣which␣time␣it␣would␣be␣impossible
to␣see␣where␣did␣the␣silent␣upgrading␣occur.

=head2␣Detecting␣the␣problem

This␣module␣simplifies␣the␣process␣of␣diagnosing␣such␣problems.␣␣Just␣put
this␣line␣on␣top␣of␣your␣main␣program:

␣␣␣␣use␣encoding::warnings;

Afterwards,␣implicit␣upgrading␣of␣high-bit␣bytes␣will␣raise␣a␣warning.
Ex.:␣C<Bytes␣implicitly␣upgraded␣into␣wide␣characters␣as␣iso-8859-1␣at
-␣line␣7>.

However,␣strings␣composed␣purely␣of␣ASCII␣code␣points␣(C<0x00>..C<0x7F>)
will␣I<not>␣trigger␣this␣warning.

You␣can␣also␣make␣the␣warnings␣fatal␣by␣importing␣this␣module␣as:

␣␣␣␣use␣encoding::warnings␣'FATAL';

=head2␣Solving␣the␣problem

Most␣of␣the␣time,␣this␣warning␣occurs␣when␣a␣byte-string␣is␣concatenated
with␣a␣unicode-string.␣␣There␣are␣a␣number␣of␣ways␣to␣solve␣it:

=over␣4

=item␣*␣Upgrade␣both␣sides␣to␣unicode-strings

If␣your␣program␣does␣not␣need␣compatibility␣for␣Perl␣5.6␣and␣earlier,
the␣recommended␣approach␣is␣to␣apply␣appropriate␣IO␣disciplines,␣so␣all
data␣in␣your␣program␣become␣unicode-strings.␣␣See␣L<encoding>,␣L<open>␣and
L<perlfunc/binmode>␣for␣how.

=item␣*␣Downgrade␣both␣sides␣to␣byte-strings

The␣other␣way␣works␣too,␣especially␣if␣you␣are␣sure␣that␣all␣your␣data
are␣under␣the␣same␣encoding,␣or␣if␣compatibility␣with␣older␣versions
of␣Perl␣is␣desired.

You␣may␣downgrade␣strings␣with␣C<Encode::encode>␣and␣C<utf8::encode>.
See␣L<Encode>␣and␣L<utf8>␣for␣details.

=item␣*␣Specify␣the␣encoding␣for␣implicit␣byte-string␣upgrading

If␣you␣are␣confident␣that␣all␣byte-strings␣will␣be␣in␣a␣specific
encoding␣like␣UTF-8,␣I<and>␣need␣not␣support␣older␣versions␣of␣Perl,
use␣the␣C<encoding>␣pragma:

␣␣␣␣use␣encoding␣'utf8';

Similarly,␣this␣will␣silence␣warnings␣from␣this␣module,␣and␣preserve␣the
default␣behaviour:

␣␣␣␣use␣encoding␣'iso-8859-1';

However,␣note␣that␣C<use␣encoding>␣actually␣had␣three␣distinct␣effects:

=over␣4

=item␣*␣PerlIO␣layers␣for␣B<STDIN>␣and␣B<STDOUT>

This␣is␣similar␣to␣what␣L<open>␣pragma␣does.

=item␣*␣Literal␣conversions

This␣turns␣I<all>␣literal␣string␣in␣your␣program␣into␣unicode-strings
(equivalent␣to␣a␣C<use␣utf8>),␣by␣decoding␣them␣using␣the␣specified
encoding.

=item␣*␣Implicit␣upgrading␣for␣byte-strings

This␣will␣silence␣warnings␣from␣this␣module,␣as␣shown␣above.

=back

Because␣literal␣conversions␣also␣work␣on␣empty␣strings,␣it␣may␣surprise
some␣people:

␣␣␣␣use␣encoding␣'big5';

␣␣␣␣my␣$byte_string␣=␣pack("C*",␣0xA4,␣0x40);
␣␣␣␣print␣length␣$a;	#␣2␣here.
␣␣␣␣$a␣.=␣"";		#␣concatenating␣with␣a␣unicode␣string...
␣␣␣␣print␣length␣$a;	#␣1␣here!

In␣other␣words,␣do␣not␣C<use␣encoding>␣unless␣you␣are␣certain␣that␣the
program␣will␣not␣deal␣with␣any␣raw,␣8-bit␣binary␣data␣at␣all.

However,␣the␣C<Filter␣=E<gt>␣1>␣flavor␣of␣C<use␣encoding>␣will␣I<not>
affect␣implicit␣upgrading␣for␣byte-strings,␣and␣is␣thus␣incapable␣of
silencing␣warnings␣from␣this␣module.␣␣See␣L<encoding>␣for␣more␣details.

=back

=head1␣CAVEATS

For␣Perl␣5.9.4␣or␣later,␣this␣module's␣effect␣is␣lexical.

For␣Perl␣versions␣prior␣to␣5.9.4,␣this␣module␣affects␣the␣whole␣script,
instead␣of␣inside␣its␣lexical␣block.

=cut
----------
Range: (2618893,2620873) (1980)
=head1␣NAME

File::CheckTree␣-␣run␣many␣filetest␣checks␣on␣a␣tree

=head1␣SYNOPSIS

␣␣␣␣use␣File::CheckTree;

␣␣␣␣$num_warnings␣=␣validate(␣q{
␣␣␣␣␣␣␣␣/vmunix␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣-e␣||␣die
␣␣␣␣␣␣␣␣/boot␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣-e␣||␣die
␣␣␣␣␣␣␣␣/bin␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣cd
␣␣␣␣␣␣␣␣␣␣␣␣csh␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣-ex
␣␣␣␣␣␣␣␣␣␣␣␣csh␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣!-ug
␣␣␣␣␣␣␣␣␣␣␣␣sh␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣-ex
␣␣␣␣␣␣␣␣␣␣␣␣sh␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣!-ug
␣␣␣␣␣␣␣␣/usr␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣-d␣||␣warn␣"What␣happened␣to␣$file?\n"
␣␣␣␣});

=head1␣DESCRIPTION

The␣validate()␣routine␣takes␣a␣single␣multiline␣string␣consisting␣of
directives,␣each␣containing␣a␣filename␣plus␣a␣file␣test␣to␣try␣on␣it.
(The␣file␣test␣may␣also␣be␣a␣"cd",␣causing␣subsequent␣relative␣filenames
to␣be␣interpreted␣relative␣to␣that␣directory.)␣␣After␣the␣file␣test
you␣may␣put␣C<||␣die>␣to␣make␣it␣a␣fatal␣error␣if␣the␣file␣test␣fails.
The␣default␣is␣C<||␣warn>.␣␣The␣file␣test␣may␣optionally␣have␣a␣"!'␣prepended
to␣test␣for␣the␣opposite␣condition.␣␣If␣you␣do␣a␣cd␣and␣then␣list␣some
relative␣filenames,␣you␣may␣want␣to␣indent␣them␣slightly␣for␣readability.
If␣you␣supply␣your␣own␣die()␣or␣warn()␣message,␣you␣can␣use␣$file␣to
interpolate␣the␣filename.

Filetests␣may␣be␣bunched:␣␣"-rwx"␣tests␣for␣all␣of␣C<-r>,␣C<-w>,␣and␣C<-x>.
Only␣the␣first␣failed␣test␣of␣the␣bunch␣will␣produce␣a␣warning.

The␣routine␣returns␣the␣number␣of␣warnings␣issued.

=head1␣AUTHOR

File::CheckTree␣was␣derived␣from␣lib/validate.pl␣which␣was
written␣by␣Larry␣Wall.
Revised␣by␣Paul␣Grassie␣<F<grassie@perl.com>>␣in␣2002.

=head1␣HISTORY

File::CheckTree␣used␣to␣not␣display␣fatal␣error␣messages.
It␣used␣to␣count␣only␣those␣warnings␣produced␣by␣a␣generic␣C<||␣warn>
(and␣not␣those␣in␣which␣the␣user␣supplied␣the␣message).␣␣In␣addition,
the␣validate()␣routine␣would␣leave␣the␣user␣program␣in␣whatever
directory␣was␣last␣entered␣through␣the␣use␣of␣"cd"␣directives.
These␣bugs␣were␣fixed␣during␣the␣development␣of␣perl␣5.8.
The␣first␣fixed␣version␣of␣File::CheckTree␣was␣4.2.

=cut
----------
Range: (2626745,2640411) (13666)
=head1␣NAME

File::Find␣-␣Traverse␣a␣directory␣tree.

=head1␣SYNOPSIS

␣␣␣␣use␣File::Find;
␣␣␣␣find(\&wanted,␣@directories_to_search);
␣␣␣␣sub␣wanted␣{␣...␣}

␣␣␣␣use␣File::Find;
␣␣␣␣finddepth(\&wanted,␣@directories_to_search);
␣␣␣␣sub␣wanted␣{␣...␣}

␣␣␣␣use␣File::Find;
␣␣␣␣find({␣wanted␣=>␣\&process,␣follow␣=>␣1␣},␣'.');

=head1␣DESCRIPTION

These␣are␣functions␣for␣searching␣through␣directory␣trees␣doing␣work
on␣each␣file␣found␣similar␣to␣the␣Unix␣I<find>␣command.␣␣File::Find
exports␣two␣functions,␣C<find>␣and␣C<finddepth>.␣␣They␣work␣similarly
but␣have␣subtle␣differences.

=over␣4

=item␣B<find>

␣␣find(\&wanted,␣␣@directories);
␣␣find(\%options,␣@directories);

C<find()>␣does␣a␣depth-first␣search␣over␣the␣given␣C<@directories>␣in
the␣order␣they␣are␣given.␣␣For␣each␣file␣or␣directory␣found,␣it␣calls
the␣C<&wanted>␣subroutine.␣␣(See␣below␣for␣details␣on␣how␣to␣use␣the
C<&wanted>␣function).␣␣Additionally,␣for␣each␣directory␣found,␣it␣will
C<chdir()>␣into␣that␣directory␣and␣continue␣the␣search,␣invoking␣the
C<&wanted>␣function␣on␣each␣file␣or␣subdirectory␣in␣the␣directory.

=item␣B<finddepth>

␣␣finddepth(\&wanted,␣␣@directories);
␣␣finddepth(\%options,␣@directories);

C<finddepth()>␣works␣just␣like␣C<find()>␣except␣that␣it␣invokes␣the
C<&wanted>␣function␣for␣a␣directory␣I<after>␣invoking␣it␣for␣the
directory's␣contents.␣␣It␣does␣a␣postorder␣traversal␣instead␣of␣a
preorder␣traversal,␣working␣from␣the␣bottom␣of␣the␣directory␣tree␣up
where␣C<find()>␣works␣from␣the␣top␣of␣the␣tree␣down.

=back

=head2␣%options

The␣first␣argument␣to␣C<find()>␣is␣either␣a␣code␣reference␣to␣your
C<&wanted>␣function,␣or␣a␣hash␣reference␣describing␣the␣operations
to␣be␣performed␣for␣each␣file.␣␣The
code␣reference␣is␣described␣in␣L<The␣wanted␣function>␣below.

Here␣are␣the␣possible␣keys␣for␣the␣hash:

=over␣3

=item␣C<wanted>

The␣value␣should␣be␣a␣code␣reference.␣␣This␣code␣reference␣is
described␣in␣L<The␣wanted␣function>␣below.␣The␣C<&wanted>␣subroutine␣is
mandatory.

=item␣C<bydepth>

Reports␣the␣name␣of␣a␣directory␣only␣AFTER␣all␣its␣entries
have␣been␣reported.␣␣Entry␣point␣C<finddepth()>␣is␣a␣shortcut␣for
specifying␣C<<␣{␣bydepth␣=>␣1␣}␣>>␣in␣the␣first␣argument␣of␣C<find()>.

=item␣C<preprocess>

The␣value␣should␣be␣a␣code␣reference.␣This␣code␣reference␣is␣used␣to
preprocess␣the␣current␣directory.␣The␣name␣of␣the␣currently␣processed
directory␣is␣in␣C<$File::Find::dir>.␣Your␣preprocessing␣function␣is
called␣after␣C<readdir()>,␣but␣before␣the␣loop␣that␣calls␣the␣C<wanted()>
function.␣It␣is␣called␣with␣a␣list␣of␣strings␣(actually␣file/directory
names)␣and␣is␣expected␣to␣return␣a␣list␣of␣strings.␣The␣code␣can␣be
used␣to␣sort␣the␣file/directory␣names␣alphabetically,␣numerically,
or␣to␣filter␣out␣directory␣entries␣based␣on␣their␣name␣alone.␣When
I<follow>␣or␣I<follow_fast>␣are␣in␣effect,␣C<preprocess>␣is␣a␣no-op.

=item␣C<postprocess>

The␣value␣should␣be␣a␣code␣reference.␣It␣is␣invoked␣just␣before␣leaving
the␣currently␣processed␣directory.␣It␣is␣called␣in␣void␣context␣with␣no
arguments.␣The␣name␣of␣the␣current␣directory␣is␣in␣C<$File::Find::dir>.␣This
hook␣is␣handy␣for␣summarizing␣a␣directory,␣such␣as␣calculating␣its␣disk
usage.␣When␣I<follow>␣or␣I<follow_fast>␣are␣in␣effect,␣C<postprocess>␣is␣a
no-op.

=item␣C<follow>

Causes␣symbolic␣links␣to␣be␣followed.␣Since␣directory␣trees␣with␣symbolic
links␣(followed)␣may␣contain␣files␣more␣than␣once␣and␣may␣even␣have
cycles,␣a␣hash␣has␣to␣be␣built␣up␣with␣an␣entry␣for␣each␣file.
This␣might␣be␣expensive␣both␣in␣space␣and␣time␣for␣a␣large
directory␣tree.␣See␣I<follow_fast>␣and␣I<follow_skip>␣below.
If␣either␣I<follow>␣or␣I<follow_fast>␣is␣in␣effect:

=over␣6

=item␣*

It␣is␣guaranteed␣that␣an␣I<lstat>␣has␣been␣called␣before␣the␣user's
C<wanted()>␣function␣is␣called.␣This␣enables␣fast␣file␣checks␣involving␣S<_>.
Note␣that␣this␣guarantee␣no␣longer␣holds␣if␣I<follow>␣or␣I<follow_fast>
are␣not␣set.

=item␣*

There␣is␣a␣variable␣C<$File::Find::fullname>␣which␣holds␣the␣absolute
pathname␣of␣the␣file␣with␣all␣symbolic␣links␣resolved.␣␣If␣the␣link␣is
a␣dangling␣symbolic␣link,␣then␣fullname␣will␣be␣set␣to␣C<undef>.

=back

This␣is␣a␣no-op␣on␣Win32.

=item␣C<follow_fast>

This␣is␣similar␣to␣I<follow>␣except␣that␣it␣may␣report␣some␣files␣more
than␣once.␣␣It␣does␣detect␣cycles,␣however.␣␣Since␣only␣symbolic␣links
have␣to␣be␣hashed,␣this␣is␣much␣cheaper␣both␣in␣space␣and␣time.␣␣If
processing␣a␣file␣more␣than␣once␣(by␣the␣user's␣C<wanted()>␣function)
is␣worse␣than␣just␣taking␣time,␣the␣option␣I<follow>␣should␣be␣used.

This␣is␣also␣a␣no-op␣on␣Win32.

=item␣C<follow_skip>

C<follow_skip==1>,␣which␣is␣the␣default,␣causes␣all␣files␣which␣are
neither␣directories␣nor␣symbolic␣links␣to␣be␣ignored␣if␣they␣are␣about
to␣be␣processed␣a␣second␣time.␣If␣a␣directory␣or␣a␣symbolic␣link
are␣about␣to␣be␣processed␣a␣second␣time,␣File::Find␣dies.

C<follow_skip==0>␣causes␣File::Find␣to␣die␣if␣any␣file␣is␣about␣to␣be
processed␣a␣second␣time.

C<follow_skip==2>␣causes␣File::Find␣to␣ignore␣any␣duplicate␣files␣and
directories␣but␣to␣proceed␣normally␣otherwise.

=item␣C<dangling_symlinks>

If␣true␣and␣a␣code␣reference,␣will␣be␣called␣with␣the␣symbolic␣link
name␣and␣the␣directory␣it␣lives␣in␣as␣arguments.␣␣Otherwise,␣if␣true
and␣warnings␣are␣on,␣warning␣"symbolic_link_name␣is␣a␣dangling
symbolic␣link\n"␣will␣be␣issued.␣␣If␣false,␣the␣dangling␣symbolic␣link
will␣be␣silently␣ignored.

=item␣C<no_chdir>

Does␣not␣C<chdir()>␣to␣each␣directory␣as␣it␣recurses.␣The␣C<wanted()>
function␣will␣need␣to␣be␣aware␣of␣this,␣of␣course.␣In␣this␣case,
C<$_>␣will␣be␣the␣same␣as␣C<$File::Find::name>.

=item␣C<untaint>

If␣find␣is␣used␣in␣taint-mode␣(-T␣command␣line␣switch␣or␣if␣EUID␣!=␣UID
or␣if␣EGID␣!=␣GID)␣then␣internally␣directory␣names␣have␣to␣be␣untainted
before␣they␣can␣be␣chdir'ed␣to.␣Therefore␣they␣are␣checked␣against␣a␣regular
expression␣I<untaint_pattern>.␣␣Note␣that␣all␣names␣passed␣to␣the␣user's
I<wanted()>␣function␣are␣still␣tainted.␣If␣this␣option␣is␣used␣while
not␣in␣taint-mode,␣C<untaint>␣is␣a␣no-op.

=item␣C<untaint_pattern>

See␣above.␣This␣should␣be␣set␣using␣the␣C<qr>␣quoting␣operator.
The␣default␣is␣set␣to␣␣C<qr|^([-+@\w./]+)$|>.
Note␣that␣the␣parentheses␣are␣vital.

=item␣C<untaint_skip>

If␣set,␣a␣directory␣which␣fails␣the␣I<untaint_pattern>␣is␣skipped,
including␣all␣its␣sub-directories.␣The␣default␣is␣to␣'die'␣in␣such␣a␣case.

=back

=head2␣The␣wanted␣function

The␣C<wanted()>␣function␣does␣whatever␣verifications␣you␣want␣on
each␣file␣and␣directory.␣␣Note␣that␣despite␣its␣name,␣the␣C<wanted()>
function␣is␣a␣generic␣callback␣function,␣and␣does␣B<not>␣tell
File::Find␣if␣a␣file␣is␣"wanted"␣or␣not.␣␣In␣fact,␣its␣return␣value
is␣ignored.

The␣wanted␣function␣takes␣no␣arguments␣but␣rather␣does␣its␣work
through␣a␣collection␣of␣variables.

=over␣4

=item␣C<$File::Find::dir>␣is␣the␣current␣directory␣name,

=item␣C<$_>␣is␣the␣current␣filename␣within␣that␣directory

=item␣C<$File::Find::name>␣is␣the␣complete␣pathname␣to␣the␣file.

=back

The␣above␣variables␣have␣all␣been␣localized␣and␣may␣be␣changed␣without
affecting␣data␣outside␣of␣the␣wanted␣function.

For␣example,␣when␣examining␣the␣file␣F</some/path/foo.ext>␣you␣will␣have:

␣␣␣␣$File::Find::dir␣␣=␣/some/path/
␣␣␣␣$_␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣=␣foo.ext
␣␣␣␣$File::Find::name␣=␣/some/path/foo.ext

You␣are␣chdir()'d␣to␣C<$File::Find::dir>␣when␣the␣function␣is␣called,
unless␣C<no_chdir>␣was␣specified.␣Note␣that␣when␣changing␣to
directories␣is␣in␣effect␣the␣root␣directory␣(F</>)␣is␣a␣somewhat
special␣case␣inasmuch␣as␣the␣concatenation␣of␣C<$File::Find::dir>,
C<'/'>␣and␣C<$_>␣is␣not␣literally␣equal␣to␣C<$File::Find::name>.␣The
table␣below␣summarizes␣all␣variants:

␣␣␣␣␣␣␣␣␣␣␣␣␣␣$File::Find::name␣␣$File::Find::dir␣␣$_
␣default␣␣␣␣␣␣/␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣/␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣.
␣no_chdir=>0␣␣/etc␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣/␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣etc
␣␣␣␣␣␣␣␣␣␣␣␣␣␣/etc/x␣␣␣␣␣␣␣␣␣␣␣␣␣/etc␣␣␣␣␣␣␣␣␣␣␣␣␣␣x

␣no_chdir=>1␣␣/␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣/␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣/
␣␣␣␣␣␣␣␣␣␣␣␣␣␣/etc␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣/␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣/etc
␣␣␣␣␣␣␣␣␣␣␣␣␣␣/etc/x␣␣␣␣␣␣␣␣␣␣␣␣␣/etc␣␣␣␣␣␣␣␣␣␣␣␣␣␣/etc/x


When␣C<follow>␣or␣C<follow_fast>␣are␣in␣effect,␣there␣is
also␣a␣C<$File::Find::fullname>.␣␣The␣function␣may␣set
C<$File::Find::prune>␣to␣prune␣the␣tree␣unless␣C<bydepth>␣was
specified.␣␣Unless␣C<follow>␣or␣C<follow_fast>␣is␣specified,␣for
compatibility␣reasons␣(find.pl,␣find2perl)␣there␣are␣in␣addition␣the
following␣globals␣available:␣C<$File::Find::topdir>,
C<$File::Find::topdev>,␣C<$File::Find::topino>,
C<$File::Find::topmode>␣and␣C<$File::Find::topnlink>.

This␣library␣is␣useful␣for␣the␣C<find2perl>␣tool,␣which␣when␣fed,

␣␣␣␣find2perl␣/␣-name␣.nfs\*␣-mtime␣+7␣\
␣␣␣␣␣␣␣␣-exec␣rm␣-f␣{}␣\;␣-o␣-fstype␣nfs␣-prune

produces␣something␣like:

␣␣␣␣sub␣wanted␣{
␣␣␣␣␣␣␣␣/^\.nfs.*\z/s␣&&
␣␣␣␣␣␣␣␣(($dev,␣$ino,␣$mode,␣$nlink,␣$uid,␣$gid)␣=␣lstat($_))␣&&
␣␣␣␣␣␣␣␣int(-M␣_)␣>␣7␣&&
␣␣␣␣␣␣␣␣unlink($_)
␣␣␣␣␣␣␣␣||
␣␣␣␣␣␣␣␣($nlink␣||␣(($dev,␣$ino,␣$mode,␣$nlink,␣$uid,␣$gid)␣=␣lstat($_)))␣&&
␣␣␣␣␣␣␣␣$dev␣<␣0␣&&
␣␣␣␣␣␣␣␣($File::Find::prune␣=␣1);
␣␣␣␣}

Notice␣the␣C<_>␣in␣the␣above␣C<int(-M␣_)>:␣the␣C<_>␣is␣a␣magical
filehandle␣that␣caches␣the␣information␣from␣the␣preceding
C<stat()>,␣C<lstat()>,␣or␣filetest.

Here's␣another␣interesting␣wanted␣function.␣␣It␣will␣find␣all␣symbolic
links␣that␣don't␣resolve:

␣␣␣␣sub␣wanted␣{
␣␣␣␣␣␣␣␣␣-l␣&&␣!-e␣&&␣print␣"bogus␣link:␣$File::Find::name\n";
␣␣␣␣}

See␣also␣the␣script␣C<pfind>␣on␣CPAN␣for␣a␣nice␣application␣of␣this
module.

=head1␣WARNINGS

If␣you␣run␣your␣program␣with␣the␣C<-w>␣switch,␣or␣if␣you␣use␣the
C<warnings>␣pragma,␣File::Find␣will␣report␣warnings␣for␣several␣weird
situations.␣You␣can␣disable␣these␣warnings␣by␣putting␣the␣statement

␣␣␣␣no␣warnings␣'File::Find';

in␣the␣appropriate␣scope.␣See␣L<perllexwarn>␣for␣more␣info␣about␣lexical
warnings.

=head1␣CAVEAT

=over␣2

=item␣$dont_use_nlink

You␣can␣set␣the␣variable␣C<$File::Find::dont_use_nlink>␣to␣1,␣if␣you␣want␣to
force␣File::Find␣to␣always␣stat␣directories.␣This␣was␣used␣for␣file␣systems
that␣do␣not␣have␣an␣C<nlink>␣count␣matching␣the␣number␣of␣sub-directories.
Examples␣are␣ISO-9660␣(CD-ROM),␣AFS,␣HPFS␣(OS/2␣file␣system),␣FAT␣(DOS␣file
system)␣and␣a␣couple␣of␣others.

You␣shouldn't␣need␣to␣set␣this␣variable,␣since␣File::Find␣should␣now␣detect
such␣file␣systems␣on-the-fly␣and␣switch␣itself␣to␣using␣stat.␣This␣works␣even
for␣parts␣of␣your␣file␣system,␣like␣a␣mounted␣CD-ROM.

If␣you␣do␣set␣C<$File::Find::dont_use_nlink>␣to␣1,␣you␣will␣notice␣slow-downs.

=item␣symlinks

Be␣aware␣that␣the␣option␣to␣follow␣symbolic␣links␣can␣be␣dangerous.
Depending␣on␣the␣structure␣of␣the␣directory␣tree␣(including␣symbolic
links␣to␣directories)␣you␣might␣traverse␣a␣given␣(physical)␣directory
more␣than␣once␣(only␣if␣C<follow_fast>␣is␣in␣effect).
Furthermore,␣deleting␣or␣changing␣files␣in␣a␣symbolically␣linked␣directory
might␣cause␣very␣unpleasant␣surprises,␣since␣you␣delete␣or␣change␣files
in␣an␣unknown␣directory.

=back

=head1␣NOTES

=over␣4

=item␣*

Mac␣OS␣(Classic)␣users␣should␣note␣a␣few␣differences:

=over␣4

=item␣*

The␣path␣separator␣is␣':',␣not␣'/',␣and␣the␣current␣directory␣is␣denoted
as␣':',␣not␣'.'.␣You␣should␣be␣careful␣about␣specifying␣relative␣pathnames.
While␣a␣full␣path␣always␣begins␣with␣a␣volume␣name,␣a␣relative␣pathname
should␣always␣begin␣with␣a␣':'.␣␣If␣specifying␣a␣volume␣name␣only,␣a
trailing␣':'␣is␣required.

=item␣*

C<$File::Find::dir>␣is␣guaranteed␣to␣end␣with␣a␣':'.␣If␣C<$_>
contains␣the␣name␣of␣a␣directory,␣that␣name␣may␣or␣may␣not␣end␣with␣a
':'.␣Likewise,␣C<$File::Find::name>,␣which␣contains␣the␣complete
pathname␣to␣that␣directory,␣and␣C<$File::Find::fullname>,␣which␣holds
the␣absolute␣pathname␣of␣that␣directory␣with␣all␣symbolic␣links␣resolved,
may␣or␣may␣not␣end␣with␣a␣':'.

=item␣*

The␣default␣C<untaint_pattern>␣(see␣above)␣on␣Mac␣OS␣is␣set␣to
C<qr|^(.+)$|>.␣Note␣that␣the␣parentheses␣are␣vital.

=item␣*

The␣invisible␣system␣file␣"Icon\015"␣is␣ignored.␣While␣this␣file␣may
appear␣in␣every␣directory,␣there␣are␣some␣more␣invisible␣system␣files
on␣every␣volume,␣which␣are␣all␣located␣at␣the␣volume␣root␣level␣(i.e.
"MacintoshHD:").␣These␣system␣files␣are␣B<not>␣excluded␣automatically.
Your␣filter␣may␣use␣the␣following␣code␣to␣recognize␣invisible␣files␣or
directories␣(requires␣Mac::Files):

␣use␣Mac::Files;

␣#␣invisible()␣--␣␣returns␣1␣if␣file/directory␣is␣invisible,
␣#␣0␣if␣it's␣visible␣or␣undef␣if␣an␣error␣occurred

␣sub␣invisible($)␣{
␣␣␣my␣$file␣=␣shift;
␣␣␣my␣($fileCat,␣$fileInfo);
␣␣␣my␣$invisible_flag␣=␣␣1␣<<␣14;

␣␣␣if␣(␣$fileCat␣=␣FSpGetCatInfo($file)␣)␣{
␣␣␣␣␣if␣($fileInfo␣=␣$fileCat->ioFlFndrInfo()␣)␣{
␣␣␣␣␣␣␣return␣(($fileInfo->fdFlags␣&␣$invisible_flag)␣&&␣1);
␣␣␣␣␣}
␣␣␣}
␣␣␣return␣undef;
␣}

Generally,␣invisible␣files␣are␣system␣files,␣unless␣an␣odd␣application
decides␣to␣use␣invisible␣files␣for␣its␣own␣purposes.␣To␣distinguish
such␣files␣from␣system␣files,␣you␣have␣to␣look␣at␣the␣B<type>␣and␣B<creator>
file␣attributes.␣The␣MacPerl␣built-in␣functions␣C<GetFileInfo(FILE)>␣and
C<SetFileInfo(CREATOR,␣TYPE,␣FILES)>␣offer␣access␣to␣these␣attributes
(see␣MacPerl.pm␣for␣details).

Files␣that␣appear␣on␣the␣desktop␣actually␣reside␣in␣an␣(hidden)␣directory
named␣"Desktop␣Folder"␣on␣the␣particular␣disk␣volume.␣Note␣that,␣although
all␣desktop␣files␣appear␣to␣be␣on␣the␣same␣"virtual"␣desktop,␣each␣disk
volume␣actually␣maintains␣its␣own␣"Desktop␣Folder"␣directory.

=back

=back

=head1␣BUGS␣AND␣CAVEATS

Despite␣the␣name␣of␣the␣C<finddepth()>␣function,␣both␣C<find()>␣and
C<finddepth()>␣perform␣a␣depth-first␣search␣of␣the␣directory
hierarchy.

=head1␣HISTORY

File::Find␣used␣to␣produce␣incorrect␣results␣if␣called␣recursively.
During␣the␣development␣of␣perl␣5.8␣this␣bug␣was␣fixed.
The␣first␣fixed␣version␣of␣File::Find␣was␣1.01.

=head1␣SEE␣ALSO

find,␣find2perl.

=cut
----------
Range: (2676756,2680803) (4047)
=head1␣SEE␣ALSO

L<dirname(1)>,␣L<basename(1)>,␣L<File::Spec>
package␣File::Fetch;

use␣strict;
use␣FileHandle;
use␣File::Temp;
use␣File::Copy;
use␣File::Spec;
use␣File::Spec::Unix;
use␣File::Basename␣␣␣␣␣␣␣␣␣␣␣␣␣␣qw[dirname];

use␣Cwd␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣qw[cwd];
use␣Carp␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣qw[carp];
use␣IPC::Cmd␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣qw[can_run␣run␣QUOTE];
use␣File::Path␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣qw[mkpath];
use␣File::Temp␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣qw[tempdir];
use␣Params::Check␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣qw[check];
use␣Module::Load::Conditional␣␣␣qw[can_load];
use␣Locale::Maketext::Simple␣␣␣␣Style␣=>␣'gettext';

use␣vars␣␣␣␣qw[␣$VERBOSE␣$PREFER_BIN␣$FROM_EMAIL␣$USER_AGENT
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣$BLACKLIST␣$METHOD_FAIL␣$VERSION␣$METHODS
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣$FTP_PASSIVE␣$TIMEOUT␣$DEBUG␣$WARN
␣␣␣␣␣␣␣␣␣␣␣␣];

$VERSION␣␣␣␣␣␣␣␣=␣'0.24';
$VERSION␣␣␣␣␣␣␣␣=␣eval␣$VERSION;␣␣␣␣#␣avoid␣warnings␣with␣development␣releases
$PREFER_BIN␣␣␣␣␣=␣0;␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣XXX␣TODO␣implement
$FROM_EMAIL␣␣␣␣␣=␣'File-Fetch@example.com';
$USER_AGENT␣␣␣␣␣=␣"File::Fetch/$VERSION";
$BLACKLIST␣␣␣␣␣␣=␣[qw|ftp|];
$METHOD_FAIL␣␣␣␣=␣{␣};
$FTP_PASSIVE␣␣␣␣=␣1;
$TIMEOUT␣␣␣␣␣␣␣␣=␣0;
$DEBUG␣␣␣␣␣␣␣␣␣␣=␣0;
$WARN␣␣␣␣␣␣␣␣␣␣␣=␣1;

###␣methods␣available␣to␣fetch␣the␣file␣depending␣on␣the␣scheme
$METHODS␣=␣{
␣␣␣␣http␣␣␣␣=>␣[␣qw|lwp␣wget␣curl␣lftp␣lynx␣iosock|␣],
␣␣␣␣ftp␣␣␣␣␣=>␣[␣qw|lwp␣netftp␣wget␣curl␣lftp␣ncftp␣ftp|␣],
␣␣␣␣file␣␣␣␣=>␣[␣qw|lwp␣lftp␣file|␣],
␣␣␣␣rsync␣␣␣=>␣[␣qw|rsync|␣]
};

###␣silly␣warnings␣###
local␣$Params::Check::VERBOSE␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣=␣1;
local␣$Params::Check::VERBOSE␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣=␣1;
local␣$Module::Load::Conditional::VERBOSE␣␣␣=␣0;
local␣$Module::Load::Conditional::VERBOSE␣␣␣=␣0;

###␣see␣what␣OS␣we␣are␣on,␣important␣for␣file://␣uris␣###
use␣constant␣ON_WIN␣␣␣␣␣=>␣($^O␣eq␣'MSWin32');
use␣constant␣ON_VMS␣␣␣␣␣=>␣($^O␣eq␣'VMS');␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣
use␣constant␣ON_UNIX␣␣␣␣=>␣(!ON_WIN);
use␣constant␣HAS_VOL␣␣␣␣=>␣(ON_WIN);
use␣constant␣HAS_SHARE␣␣=>␣(ON_WIN);


=pod

=head1␣NAME

File::Fetch␣-␣A␣generic␣file␣fetching␣mechanism

=head1␣SYNOPSIS

␣␣␣␣use␣File::Fetch;

␣␣␣␣###␣build␣a␣File::Fetch␣object␣###
␣␣␣␣my␣$ff␣=␣File::Fetch->new(uri␣=>␣'http://some.where.com/dir/a.txt');

␣␣␣␣###␣fetch␣the␣uri␣to␣cwd()␣###
␣␣␣␣my␣$where␣=␣$ff->fetch()␣or␣die␣$ff->error;

␣␣␣␣###␣fetch␣the␣uri␣to␣/tmp␣###
␣␣␣␣my␣$where␣=␣$ff->fetch(␣to␣=>␣'/tmp'␣);

␣␣␣␣###␣parsed␣bits␣from␣the␣uri␣###
␣␣␣␣$ff->uri;
␣␣␣␣$ff->scheme;
␣␣␣␣$ff->host;
␣␣␣␣$ff->path;
␣␣␣␣$ff->file;

=head1␣DESCRIPTION

File::Fetch␣is␣a␣generic␣file␣fetching␣mechanism.

It␣allows␣you␣to␣fetch␣any␣file␣pointed␣to␣by␣a␣C<ftp>,␣C<http>,
C<file>,␣or␣C<rsync>␣uri␣by␣a␣number␣of␣different␣means.

See␣the␣C<HOW␣IT␣WORKS>␣section␣further␣down␣for␣details.

=head1␣ACCESSORS

A␣C<File::Fetch>␣object␣has␣the␣following␣accessors

=over␣4

=item␣$ff->uri

The␣uri␣you␣passed␣to␣the␣constructor

=item␣$ff->scheme

The␣scheme␣from␣the␣uri␣(like␣'file',␣'http',␣etc)

=item␣$ff->host

The␣hostname␣in␣the␣uri.␣␣Will␣be␣empty␣if␣host␣was␣originally␣
'localhost'␣for␣a␣'file://'␣url.

=item␣$ff->vol

On␣operating␣systems␣with␣the␣concept␣of␣a␣volume␣the␣second␣element
of␣a␣file://␣is␣considered␣to␣the␣be␣volume␣specification␣for␣the␣file.
Thus␣on␣Win32␣this␣routine␣returns␣the␣volume,␣on␣other␣operating
systems␣this␣returns␣nothing.

On␣Windows␣this␣value␣may␣be␣empty␣if␣the␣uri␣is␣to␣a␣network␣share,␣in␣
which␣case␣the␣'share'␣property␣will␣be␣defined.␣Additionally,␣volume␣
specifications␣that␣use␣'|'␣as␣':'␣will␣be␣converted␣on␣read␣to␣use␣':'.

On␣VMS,␣which␣has␣a␣volume␣concept,␣this␣field␣will␣be␣empty␣because␣VMS
file␣specifications␣are␣converted␣to␣absolute␣UNIX␣format␣and␣the␣volume
information␣is␣transparently␣included.

=item␣$ff->share

On␣systems␣with␣the␣concept␣of␣a␣network␣share␣(currently␣only␣Windows)␣returns␣
the␣sharename␣from␣a␣file:////␣url.␣␣On␣other␣operating␣systems␣returns␣empty.

=item␣$ff->path

The␣path␣from␣the␣uri,␣will␣be␣at␣least␣a␣single␣'/'.

=item␣$ff->file

The␣name␣of␣the␣remote␣file.␣For␣the␣local␣file␣name,␣the
result␣of␣$ff->output_file␣will␣be␣used.␣

=cut
----------
Range: (2712087,2717790) (5703)
=pod

=head1␣HOW␣IT␣WORKS

File::Fetch␣is␣able␣to␣fetch␣a␣variety␣of␣uris,␣by␣using␣several
external␣programs␣and␣modules.

Below␣is␣a␣mapping␣of␣what␣utilities␣will␣be␣used␣in␣what␣order
for␣what␣schemes,␣if␣available:

␣␣␣␣file␣␣␣␣=>␣LWP,␣lftp,␣file
␣␣␣␣http␣␣␣␣=>␣LWP,␣wget,␣curl,␣lftp,␣lynx,␣iosock
␣␣␣␣ftp␣␣␣␣␣=>␣LWP,␣Net::FTP,␣wget,␣curl,␣lftp,␣ncftp,␣ftp
␣␣␣␣rsync␣␣␣=>␣rsync

If␣you'd␣like␣to␣disable␣the␣use␣of␣one␣or␣more␣of␣these␣utilities
and/or␣modules,␣see␣the␣C<$BLACKLIST>␣variable␣further␣down.

If␣a␣utility␣or␣module␣isn't␣available,␣it␣will␣be␣marked␣in␣a␣cache
(see␣the␣C<$METHOD_FAIL>␣variable␣further␣down),␣so␣it␣will␣not␣be
tried␣again.␣The␣C<fetch>␣method␣will␣only␣fail␣when␣all␣options␣are
exhausted,␣and␣it␣was␣not␣able␣to␣retrieve␣the␣file.

C<iosock>␣is␣a␣very␣limited␣L<IO::Socket::INET>␣based␣mechanism␣for
retrieving␣C<http>␣schemed␣urls.␣It␣doesn't␣follow␣redirects␣for␣instance.

A␣special␣note␣about␣fetching␣files␣from␣an␣ftp␣uri:

By␣default,␣all␣ftp␣connections␣are␣done␣in␣passive␣mode.␣To␣change
that,␣see␣the␣C<$FTP_PASSIVE>␣variable␣further␣down.

Furthermore,␣ftp␣uris␣only␣support␣anonymous␣connections,␣so␣no
named␣user/password␣pair␣can␣be␣passed␣along.

C</bin/ftp>␣is␣blacklisted␣by␣default;␣see␣the␣C<$BLACKLIST>␣variable
further␣down.

=head1␣GLOBAL␣VARIABLES

The␣behaviour␣of␣File::Fetch␣can␣be␣altered␣by␣changing␣the␣following
global␣variables:

=head2␣$File::Fetch::FROM_EMAIL

This␣is␣the␣email␣address␣that␣will␣be␣sent␣as␣your␣anonymous␣ftp
password.

Default␣is␣C<File-Fetch@example.com>.

=head2␣$File::Fetch::USER_AGENT

This␣is␣the␣useragent␣as␣C<LWP>␣will␣report␣it.

Default␣is␣C<File::Fetch/$VERSION>.

=head2␣$File::Fetch::FTP_PASSIVE

This␣variable␣controls␣whether␣the␣environment␣variable␣C<FTP_PASSIVE>
and␣any␣passive␣switches␣to␣commandline␣tools␣will␣be␣set␣to␣true.

Default␣value␣is␣1.

Note:␣When␣$FTP_PASSIVE␣is␣true,␣C<ncftp>␣will␣not␣be␣used␣to␣fetch
files,␣since␣passive␣mode␣can␣only␣be␣set␣interactively␣for␣this␣binary

=head2␣$File::Fetch::TIMEOUT

When␣set,␣controls␣the␣network␣timeout␣(counted␣in␣seconds).

Default␣value␣is␣0.

=head2␣$File::Fetch::WARN

This␣variable␣controls␣whether␣errors␣encountered␣internally␣by
C<File::Fetch>␣should␣be␣C<carp>'d␣or␣not.

Set␣to␣false␣to␣silence␣warnings.␣Inspect␣the␣output␣of␣the␣C<error()>
method␣manually␣to␣see␣what␣went␣wrong.

Defaults␣to␣C<true>.

=head2␣$File::Fetch::DEBUG

This␣enables␣debugging␣output␣when␣calling␣commandline␣utilities␣to
fetch␣files.
This␣also␣enables␣C<Carp::longmess>␣errors,␣instead␣of␣the␣regular
C<carp>␣errors.

Good␣for␣tracking␣down␣why␣things␣don't␣work␣with␣your␣particular
setup.

Default␣is␣0.

=head2␣$File::Fetch::BLACKLIST

This␣is␣an␣array␣ref␣holding␣blacklisted␣modules/utilities␣for␣fetching
files␣with.

To␣disallow␣the␣use␣of,␣for␣example,␣C<LWP>␣and␣C<Net::FTP>,␣you␣could
set␣$File::Fetch::BLACKLIST␣to:

␣␣␣␣$File::Fetch::BLACKLIST␣=␣[qw|lwp␣netftp|]

The␣default␣blacklist␣is␣[qw|ftp|],␣as␣C</bin/ftp>␣is␣rather␣unreliable.

See␣the␣note␣on␣C<MAPPING>␣below.

=head2␣$File::Fetch::METHOD_FAIL

This␣is␣a␣hashref␣registering␣what␣modules/utilities␣were␣known␣to␣fail
for␣fetching␣files␣(mostly␣because␣they␣weren't␣installed).

You␣can␣reset␣this␣cache␣by␣assigning␣an␣empty␣hashref␣to␣it,␣or
individually␣remove␣keys.

See␣the␣note␣on␣C<MAPPING>␣below.

=head1␣MAPPING


Here's␣a␣quick␣mapping␣for␣the␣utilities/modules,␣and␣their␣names␣for
the␣$BLACKLIST,␣$METHOD_FAIL␣and␣other␣internal␣functions.

␣␣␣␣LWP␣␣␣␣␣␣␣␣␣=>␣lwp
␣␣␣␣Net::FTP␣␣␣␣=>␣netftp
␣␣␣␣wget␣␣␣␣␣␣␣␣=>␣wget
␣␣␣␣lynx␣␣␣␣␣␣␣␣=>␣lynx
␣␣␣␣ncftp␣␣␣␣␣␣␣=>␣ncftp
␣␣␣␣ftp␣␣␣␣␣␣␣␣␣=>␣ftp
␣␣␣␣curl␣␣␣␣␣␣␣␣=>␣curl
␣␣␣␣rsync␣␣␣␣␣␣␣=>␣rsync
␣␣␣␣lftp␣␣␣␣␣␣␣␣=>␣lftp
␣␣␣␣IO::Socket␣␣=>␣iosock

=head1␣FREQUENTLY␣ASKED␣QUESTIONS

=head2␣So␣how␣do␣I␣use␣a␣proxy␣with␣File::Fetch?

C<File::Fetch>␣currently␣only␣supports␣proxies␣with␣LWP::UserAgent.
You␣will␣need␣to␣set␣your␣environment␣variables␣accordingly.␣For
example,␣to␣use␣an␣ftp␣proxy:

␣␣␣␣$ENV{ftp_proxy}␣=␣'foo.com';

Refer␣to␣the␣LWP::UserAgent␣manpage␣for␣more␣details.

=head2␣I␣used␣'lynx'␣to␣fetch␣a␣file,␣but␣its␣contents␣is␣all␣wrong!

C<lynx>␣can␣only␣fetch␣remote␣files␣by␣dumping␣its␣contents␣to␣C<STDOUT>,
which␣we␣in␣turn␣capture.␣If␣that␣content␣is␣a␣'custom'␣error␣file
(like,␣say,␣a␣C<404␣handler>),␣you␣will␣get␣that␣contents␣instead.

Sadly,␣C<lynx>␣doesn't␣support␣any␣options␣to␣return␣a␣different␣exit
code␣on␣non-C<200␣OK>␣status,␣giving␣us␣no␣way␣to␣tell␣the␣difference
between␣a␣'successfull'␣fetch␣and␣a␣custom␣error␣page.

Therefor,␣we␣recommend␣to␣only␣use␣C<lynx>␣as␣a␣last␣resort.␣This␣is␣
why␣it␣is␣at␣the␣back␣of␣our␣list␣of␣methods␣to␣try␣as␣well.

=head2␣Files␣I'm␣trying␣to␣fetch␣have␣reserved␣characters␣or␣non-ASCII␣characters␣in␣them.␣What␣do␣I␣do?

C<File::Fetch>␣is␣relatively␣smart␣about␣things.␣When␣trying␣to␣write␣
a␣file␣to␣disk,␣it␣removes␣the␣C<query␣parameters>␣(see␣the␣
C<output_file>␣method␣for␣details)␣from␣the␣file␣name␣before␣creating
it.␣In␣most␣cases␣this␣suffices.

If␣you␣have␣any␣other␣characters␣you␣need␣to␣escape,␣please␣install␣
the␣C<URI::Escape>␣module␣from␣CPAN,␣and␣pre-encode␣your␣URI␣before
passing␣it␣to␣C<File::Fetch>.␣You␣can␣read␣about␣the␣details␣of␣URIs␣
and␣URI␣encoding␣here:

␣␣http://www.faqs.org/rfcs/rfc2396.html

=head1␣TODO

=over␣4

=item␣Implement␣$PREFER_BIN

To␣indicate␣to␣rather␣use␣commandline␣tools␣than␣modules

=back

=head1␣BUG␣REPORTS

Please␣report␣bugs␣or␣other␣issues␣to␣E<lt>bug-file-fetch@rt.cpan.org<gt>.

=head1␣AUTHOR

This␣module␣by␣Jos␣Boumans␣E<lt>kane@cpan.orgE<gt>.

=head1␣COPYRIGHT

This␣library␣is␣free␣software;␣you␣may␣redistribute␣and/or␣modify␣it␣
under␣the␣same␣terms␣as␣Perl␣itself.


=cut
----------
Range: (2730775,2734850) (4075)
=head1␣NAME

File::Temp␣-␣return␣name␣and␣handle␣of␣a␣temporary␣file␣safely

=begin␣__INTERNALS

=head1␣PORTABILITY

This␣section␣is␣at␣the␣top␣in␣order␣to␣provide␣easier␣access␣to
porters.␣␣It␣is␣not␣expected␣to␣be␣rendered␣by␣a␣standard␣pod
formatting␣tool.␣Please␣skip␣straight␣to␣the␣SYNOPSIS␣section␣if␣you
are␣not␣trying␣to␣port␣this␣module␣to␣a␣new␣platform.

This␣module␣is␣designed␣to␣be␣portable␣across␣operating␣systems␣and␣it
currently␣supports␣Unix,␣VMS,␣DOS,␣OS/2,␣Windows␣and␣Mac␣OS
(Classic).␣When␣porting␣to␣a␣new␣OS␣there␣are␣generally␣three␣main
issues␣that␣have␣to␣be␣solved:

=over␣4

=item␣*

Can␣the␣OS␣unlink␣an␣open␣file?␣If␣it␣can␣not␣then␣the
C<_can_unlink_opened_file>␣method␣should␣be␣modified.

=item␣*

Are␣the␣return␣values␣from␣C<stat>␣reliable?␣By␣default␣all␣the
return␣values␣from␣C<stat>␣are␣compared␣when␣unlinking␣a␣temporary
file␣using␣the␣filename␣and␣the␣handle.␣Operating␣systems␣other␣than
unix␣do␣not␣always␣have␣valid␣entries␣in␣all␣fields.␣If␣C<unlink0>␣fails
then␣the␣C<stat>␣comparison␣should␣be␣modified␣accordingly.

=item␣*

Security.␣Systems␣that␣can␣not␣support␣a␣test␣for␣the␣sticky␣bit
on␣a␣directory␣can␣not␣use␣the␣MEDIUM␣and␣HIGH␣security␣tests.
The␣C<_can_do_level>␣method␣should␣be␣modified␣accordingly.

=back

=end␣__INTERNALS

=head1␣SYNOPSIS

␣␣use␣File::Temp␣qw/␣tempfile␣tempdir␣/;

␣␣$fh␣=␣tempfile();
␣␣($fh,␣$filename)␣=␣tempfile();

␣␣($fh,␣$filename)␣=␣tempfile(␣$template,␣DIR␣=>␣$dir);
␣␣($fh,␣$filename)␣=␣tempfile(␣$template,␣SUFFIX␣=>␣'.dat');
␣␣($fh,␣$filename)␣=␣tempfile(␣$template,␣TMPDIR␣=>␣1␣);

␣␣binmode(␣$fh,␣":utf8"␣);

␣␣$dir␣=␣tempdir(␣CLEANUP␣=>␣1␣);
␣␣($fh,␣$filename)␣=␣tempfile(␣DIR␣=>␣$dir␣);

Object␣interface:

␣␣require␣File::Temp;
␣␣use␣File::Temp␣();
␣␣use␣File::Temp␣qw/␣:seekable␣/;

␣␣$fh␣=␣File::Temp->new();
␣␣$fname␣=␣$fh->filename;

␣␣$fh␣=␣File::Temp->new(TEMPLATE␣=>␣$template);
␣␣$fname␣=␣$fh->filename;

␣␣$tmp␣=␣File::Temp->new(␣UNLINK␣=>␣0,␣SUFFIX␣=>␣'.dat'␣);
␣␣print␣$tmp␣"Some␣data\n";
␣␣print␣"Filename␣is␣$tmp\n";
␣␣$tmp->seek(␣0,␣SEEK_END␣);

The␣following␣interfaces␣are␣provided␣for␣compatibility␣with
existing␣APIs.␣They␣should␣not␣be␣used␣in␣new␣code.

MkTemp␣family:

␣␣use␣File::Temp␣qw/␣:mktemp␣␣/;

␣␣($fh,␣$file)␣=␣mkstemp(␣"tmpfileXXXXX"␣);
␣␣($fh,␣$file)␣=␣mkstemps(␣"tmpfileXXXXXX",␣$suffix);

␣␣$tmpdir␣=␣mkdtemp(␣$template␣);

␣␣$unopened_file␣=␣mktemp(␣$template␣);

POSIX␣functions:

␣␣use␣File::Temp␣qw/␣:POSIX␣/;

␣␣$file␣=␣tmpnam();
␣␣$fh␣=␣tmpfile();

␣␣($fh,␣$file)␣=␣tmpnam();

Compatibility␣functions:

␣␣$unopened_file␣=␣File::Temp::tempnam(␣$dir,␣$pfx␣);

=head1␣DESCRIPTION

C<File::Temp>␣can␣be␣used␣to␣create␣and␣open␣temporary␣files␣in␣a␣safe
way.␣␣There␣is␣both␣a␣function␣interface␣and␣an␣object-oriented
interface.␣␣The␣File::Temp␣constructor␣or␣the␣tempfile()␣function␣can
be␣used␣to␣return␣the␣name␣and␣the␣open␣filehandle␣of␣a␣temporary
file.␣␣The␣tempdir()␣function␣can␣be␣used␣to␣create␣a␣temporary
directory.

The␣security␣aspect␣of␣temporary␣file␣creation␣is␣emphasized␣such␣that
a␣filehandle␣and␣filename␣are␣returned␣together.␣␣This␣helps␣guarantee
that␣a␣race␣condition␣can␣not␣occur␣where␣the␣temporary␣file␣is
created␣by␣another␣process␣between␣checking␣for␣the␣existence␣of␣the
file␣and␣its␣opening.␣␣Additional␣security␣levels␣are␣provided␣to
check,␣for␣example,␣that␣the␣sticky␣bit␣is␣set␣on␣world␣writable
directories.␣␣See␣L<"safe_level">␣for␣more␣information.

For␣compatibility␣with␣popular␣C␣library␣functions,␣Perl␣implementations␣of
the␣mkstemp()␣family␣of␣functions␣are␣provided.␣These␣are,␣mkstemp(),
mkstemps(),␣mkdtemp()␣and␣mktemp().

Additionally,␣implementations␣of␣the␣standard␣L<POSIX|POSIX>
tmpnam()␣and␣tmpfile()␣functions␣are␣provided␣if␣required.

Implementations␣of␣mktemp(),␣tmpnam(),␣and␣tempnam()␣are␣provided,
but␣should␣be␣used␣with␣caution␣since␣they␣return␣only␣a␣filename
that␣was␣valid␣when␣function␣was␣called,␣so␣cannot␣guarantee
that␣the␣file␣will␣not␣exist␣by␣the␣time␣the␣caller␣opens␣the␣filename.

Filehandles␣returned␣by␣these␣functions␣support␣the␣seekable␣methods.

=cut
----------
Range: (2766806,2770789) (3983)
}
}

=back

=head1␣FUNCTIONS

This␣section␣describes␣the␣recommended␣interface␣for␣generating
temporary␣files␣and␣directories.

=over␣4

=item␣B<tempfile>

This␣is␣the␣basic␣function␣to␣generate␣temporary␣files.
The␣behaviour␣of␣the␣file␣can␣be␣changed␣using␣various␣options:

␣␣$fh␣=␣tempfile();
␣␣($fh,␣$filename)␣=␣tempfile();

Create␣a␣temporary␣file␣in␣␣the␣directory␣specified␣for␣temporary
files,␣as␣specified␣by␣the␣tmpdir()␣function␣in␣L<File::Spec>.

␣␣($fh,␣$filename)␣=␣tempfile($template);

Create␣a␣temporary␣file␣in␣the␣current␣directory␣using␣the␣supplied
template.␣␣Trailing␣`X'␣characters␣are␣replaced␣with␣random␣letters␣to
generate␣the␣filename.␣␣At␣least␣four␣`X'␣characters␣must␣be␣present
at␣the␣end␣of␣the␣template.

␣␣($fh,␣$filename)␣=␣tempfile($template,␣SUFFIX␣=>␣$suffix)

Same␣as␣previously,␣except␣that␣a␣suffix␣is␣added␣to␣the␣template
after␣the␣`X'␣translation.␣␣Useful␣for␣ensuring␣that␣a␣temporary
filename␣has␣a␣particular␣extension␣when␣needed␣by␣other␣applications.
But␣see␣the␣WARNING␣at␣the␣end.

␣␣($fh,␣$filename)␣=␣tempfile($template,␣DIR␣=>␣$dir);

Translates␣the␣template␣as␣before␣except␣that␣a␣directory␣name
is␣specified.

␣␣($fh,␣$filename)␣=␣tempfile($template,␣TMPDIR␣=>␣1);

Equivalent␣to␣specifying␣a␣DIR␣of␣"File::Spec->tmpdir",␣writing␣the␣file
into␣the␣same␣temporary␣directory␣as␣would␣be␣used␣if␣no␣template␣was
specified␣at␣all.

␣␣($fh,␣$filename)␣=␣tempfile($template,␣UNLINK␣=>␣1);

Return␣the␣filename␣and␣filehandle␣as␣before␣except␣that␣the␣file␣is
automatically␣removed␣when␣the␣program␣exits␣(dependent␣on
$KEEP_ALL).␣Default␣is␣for␣the␣file␣to␣be␣removed␣if␣a␣file␣handle␣is
requested␣and␣to␣be␣kept␣if␣the␣filename␣is␣requested.␣In␣a␣scalar
context␣(where␣no␣filename␣is␣returned)␣the␣file␣is␣always␣deleted
either␣(depending␣on␣the␣operating␣system)␣on␣exit␣or␣when␣it␣is
closed␣(unless␣$KEEP_ALL␣is␣true␣when␣the␣temp␣file␣is␣created).

Use␣the␣object-oriented␣interface␣if␣fine-grained␣control␣of␣when
a␣file␣is␣removed␣is␣required.

If␣the␣template␣is␣not␣specified,␣a␣template␣is␣always
automatically␣generated.␣This␣temporary␣file␣is␣placed␣in␣tmpdir()
(L<File::Spec>)␣unless␣a␣directory␣is␣specified␣explicitly␣with␣the
DIR␣option.

␣␣$fh␣=␣tempfile(␣DIR␣=>␣$dir␣);

If␣called␣in␣scalar␣context,␣only␣the␣filehandle␣is␣returned␣and␣the
file␣will␣automatically␣be␣deleted␣when␣closed␣on␣operating␣systems
that␣support␣this␣(see␣the␣description␣of␣tmpfile()␣elsewhere␣in␣this
document).␣␣This␣is␣the␣preferred␣mode␣of␣operation,␣as␣if␣you␣only
have␣a␣filehandle,␣you␣can␣never␣create␣a␣race␣condition␣by␣fumbling
with␣the␣filename.␣On␣systems␣that␣can␣not␣unlink␣an␣open␣file␣or␣can
not␣mark␣a␣file␣as␣temporary␣when␣it␣is␣opened␣(for␣example,␣Windows
NT␣uses␣the␣C<O_TEMPORARY>␣flag)␣the␣file␣is␣marked␣for␣deletion␣when
the␣program␣ends␣(equivalent␣to␣setting␣UNLINK␣to␣1).␣The␣C<UNLINK>
flag␣is␣ignored␣if␣present.

␣␣(undef,␣$filename)␣=␣tempfile($template,␣OPEN␣=>␣0);

This␣will␣return␣the␣filename␣based␣on␣the␣template␣but
will␣not␣open␣this␣file.␣␣Cannot␣be␣used␣in␣conjunction␣with
UNLINK␣set␣to␣true.␣Default␣is␣to␣always␣open␣the␣file
to␣protect␣from␣possible␣race␣conditions.␣A␣warning␣is␣issued
if␣warnings␣are␣turned␣on.␣Consider␣using␣the␣tmpnam()
and␣mktemp()␣functions␣described␣elsewhere␣in␣this␣document
if␣opening␣the␣file␣is␣not␣required.

If␣the␣operating␣system␣supports␣it␣(for␣example␣BSD␣derived␣systems),␣the␣
filehandle␣will␣be␣opened␣with␣O_EXLOCK␣(open␣with␣exclusive␣file␣lock).␣
This␣can␣sometimes␣cause␣problems␣if␣the␣intention␣is␣to␣pass␣the␣filename␣
to␣another␣system␣that␣expects␣to␣take␣an␣exclusive␣lock␣itself␣(such␣as␣
DBD::SQLite)␣whilst␣ensuring␣that␣the␣tempfile␣is␣not␣reused.␣In␣this␣
situation␣the␣"EXLOCK"␣option␣can␣be␣passed␣to␣tempfile.␣By␣default␣EXLOCK␣
will␣be␣true␣(this␣retains␣compatibility␣with␣earlier␣releases).

␣␣($fh,␣$filename)␣=␣tempfile($template,␣EXLOCK␣=>␣0);

Options␣can␣be␣combined␣as␣required.

Will␣croak()␣if␣there␣is␣an␣error.

=cut
----------
Range: (2774906,2777402) (2496)
}


}

=item␣B<tempdir>

This␣is␣the␣recommended␣interface␣for␣creation␣of␣temporary
directories.␣␣By␣default␣the␣directory␣will␣not␣be␣removed␣on␣exit
(that␣is,␣it␣won't␣be␣temporary;␣this␣behaviour␣can␣not␣be␣changed
because␣of␣issues␣with␣backwards␣compatibility).␣To␣enable␣removal
either␣use␣the␣CLEANUP␣option␣which␣will␣trigger␣removal␣on␣program
exit,␣or␣consider␣using␣the␣"newdir"␣method␣in␣the␣object␣interface␣which
will␣allow␣the␣directory␣to␣be␣cleaned␣up␣when␣the␣object␣goes␣out␣of
scope.

The␣behaviour␣of␣the␣function␣depends␣on␣the␣arguments:

␣␣$tempdir␣=␣tempdir();

Create␣a␣directory␣in␣tmpdir()␣(see␣L<File::Spec|File::Spec>).

␣␣$tempdir␣=␣tempdir(␣$template␣);

Create␣a␣directory␣from␣the␣supplied␣template.␣This␣template␣is
similar␣to␣that␣described␣for␣tempfile().␣`X'␣characters␣at␣the␣end
of␣the␣template␣are␣replaced␣with␣random␣letters␣to␣construct␣the
directory␣name.␣At␣least␣four␣`X'␣characters␣must␣be␣in␣the␣template.

␣␣$tempdir␣=␣tempdir␣(␣DIR␣=>␣$dir␣);

Specifies␣the␣directory␣to␣use␣for␣the␣temporary␣directory.
The␣temporary␣directory␣name␣is␣derived␣from␣an␣internal␣template.

␣␣$tempdir␣=␣tempdir␣(␣$template,␣DIR␣=>␣$dir␣);

Prepend␣the␣supplied␣directory␣name␣to␣the␣template.␣The␣template
should␣not␣include␣parent␣directory␣specifications␣itself.␣Any␣parent
directory␣specifications␣are␣removed␣from␣the␣template␣before
prepending␣the␣supplied␣directory.

␣␣$tempdir␣=␣tempdir␣(␣$template,␣TMPDIR␣=>␣1␣);

Using␣the␣supplied␣template,␣create␣the␣temporary␣directory␣in
a␣standard␣location␣for␣temporary␣files.␣Equivalent␣to␣doing

␣␣$tempdir␣=␣tempdir␣(␣$template,␣DIR␣=>␣File::Spec->tmpdir);

but␣shorter.␣Parent␣directory␣specifications␣are␣stripped␣from␣the
template␣itself.␣The␣C<TMPDIR>␣option␣is␣ignored␣if␣C<DIR>␣is␣set
explicitly.␣␣Additionally,␣C<TMPDIR>␣is␣implied␣if␣neither␣a␣template
nor␣a␣directory␣are␣supplied.

␣␣$tempdir␣=␣tempdir(␣$template,␣CLEANUP␣=>␣1);

Create␣a␣temporary␣directory␣using␣the␣supplied␣template,␣but
attempt␣to␣remove␣it␣(and␣all␣files␣inside␣it)␣when␣the␣program
exits.␣Note␣that␣an␣attempt␣will␣be␣made␣to␣remove␣all␣files␣from
the␣directory␣even␣if␣they␣were␣not␣created␣by␣this␣module␣(otherwise
why␣ask␣to␣clean␣it␣up?).␣The␣directory␣removal␣is␣made␣with
the␣rmtree()␣function␣from␣the␣L<File::Path|File::Path>␣module.
Of␣course,␣if␣the␣template␣is␣not␣specified,␣the␣temporary␣directory
will␣be␣created␣in␣tmpdir()␣and␣will␣also␣be␣removed␣at␣program␣exit.

Will␣croak()␣if␣there␣is␣an␣error.

=cut
----------
Range: (2787490,2789806) (2316)
}

=back

=head1␣UTILITY␣FUNCTIONS

Useful␣functions␣for␣dealing␣with␣the␣filehandle␣and␣filename.

=over␣4

=item␣B<unlink0>

Given␣an␣open␣filehandle␣and␣the␣associated␣filename,␣make␣a␣safe
unlink.␣This␣is␣achieved␣by␣first␣checking␣that␣the␣filename␣and
filehandle␣initially␣point␣to␣the␣same␣file␣and␣that␣the␣number␣of
links␣to␣the␣file␣is␣1␣(all␣fields␣returned␣by␣stat()␣are␣compared).
Then␣the␣filename␣is␣unlinked␣and␣the␣filehandle␣checked␣once␣again␣to
verify␣that␣the␣number␣of␣links␣on␣that␣file␣is␣now␣0.␣␣This␣is␣the
closest␣you␣can␣come␣to␣making␣sure␣that␣the␣filename␣unlinked␣was␣the
same␣as␣the␣file␣whose␣descriptor␣you␣hold.

␣␣unlink0($fh,␣$path)
␣␣␣␣␣or␣die␣"Error␣unlinking␣file␣$path␣safely";

Returns␣false␣on␣error␣but␣croaks()␣if␣there␣is␣a␣security
anomaly.␣The␣filehandle␣is␣not␣closed␣since␣on␣some␣occasions␣this␣is
not␣required.

On␣some␣platforms,␣for␣example␣Windows␣NT,␣it␣is␣not␣possible␣to
unlink␣an␣open␣file␣(the␣file␣must␣be␣closed␣first).␣On␣those
platforms,␣the␣actual␣unlinking␣is␣deferred␣until␣the␣program␣ends␣and
good␣status␣is␣returned.␣A␣check␣is␣still␣performed␣to␣make␣sure␣that
the␣filehandle␣and␣filename␣are␣pointing␣to␣the␣same␣thing␣(but␣not␣at
the␣time␣the␣end␣block␣is␣executed␣since␣the␣deferred␣removal␣may␣not
have␣access␣to␣the␣filehandle).

Additionally,␣on␣Windows␣NT␣not␣all␣the␣fields␣returned␣by␣stat()␣can
be␣compared.␣For␣example,␣the␣C<dev>␣and␣C<rdev>␣fields␣seem␣to␣be
different.␣␣Also,␣it␣seems␣that␣the␣size␣of␣the␣file␣returned␣by␣stat()
does␣not␣always␣agree,␣with␣C<stat(FH)>␣being␣more␣accurate␣than
C<stat(filename)>,␣presumably␣because␣of␣caching␣issues␣even␣when
using␣autoflush␣(this␣is␣usually␣overcome␣by␣waiting␣a␣while␣after
writing␣to␣the␣tempfile␣before␣attempting␣to␣C<unlink0>␣it).

Finally,␣on␣NFS␣file␣systems␣the␣link␣count␣of␣the␣file␣handle␣does
not␣always␣go␣to␣zero␣immediately␣after␣unlinking.␣Currently,␣this
command␣is␣expected␣to␣fail␣on␣NFS␣disks.

This␣function␣is␣disabled␣if␣the␣global␣variable␣$KEEP_ALL␣is␣true
and␣an␣unlink␣on␣open␣file␣is␣supported.␣If␣the␣unlink␣is␣to␣be␣deferred
to␣the␣END␣block,␣the␣file␣is␣still␣registered␣for␣removal.

This␣function␣should␣not␣be␣called␣if␣you␣are␣using␣the␣object␣oriented
interface␣since␣the␣it␣will␣interfere␣with␣the␣object␣destructor␣deleting
the␣file.

=cut
----------
Range: (2794788,2797913) (3125)
}

=item␣B<cleanup>

Calling␣this␣function␣will␣cause␣any␣temp␣files␣or␣temp␣directories
that␣are␣registered␣for␣removal␣to␣be␣removed.␣This␣happens␣automatically
when␣the␣process␣exits␣but␣can␣be␣triggered␣manually␣if␣the␣caller␣is␣sure
that␣none␣of␣the␣temp␣files␣are␣required.␣This␣method␣can␣be␣registered␣as
an␣Apache␣callback.

On␣OSes␣where␣temp␣files␣are␣automatically␣removed␣when␣the␣temp␣file
is␣closed,␣calling␣this␣function␣will␣have␣no␣effect␣other␣than␣to␣remove
temporary␣directories␣(which␣may␣include␣temporary␣files).

␣␣File::Temp::cleanup();

Not␣exported␣by␣default.

=back

=head1␣PACKAGE␣VARIABLES

These␣functions␣control␣the␣global␣state␣of␣the␣package.

=over␣4

=item␣B<safe_level>

Controls␣the␣lengths␣to␣which␣the␣module␣will␣go␣to␣check␣the␣safety␣of␣the
temporary␣file␣or␣directory␣before␣proceeding.
Options␣are:

=over␣8

=item␣STANDARD

Do␣the␣basic␣security␣measures␣to␣ensure␣the␣directory␣exists␣and␣is
writable,␣that␣temporary␣files␣are␣opened␣only␣if␣they␣do␣not␣already
exist,␣and␣that␣possible␣race␣conditions␣are␣avoided.␣␣Finally␣the
L<unlink0|"unlink0">␣function␣is␣used␣to␣remove␣files␣safely.

=item␣MEDIUM

In␣addition␣to␣the␣STANDARD␣security,␣the␣output␣directory␣is␣checked
to␣make␣sure␣that␣it␣is␣owned␣either␣by␣root␣or␣the␣user␣running␣the
program.␣If␣the␣directory␣is␣writable␣by␣group␣or␣by␣other,␣it␣is␣then
checked␣to␣make␣sure␣that␣the␣sticky␣bit␣is␣set.

Will␣not␣work␣on␣platforms␣that␣do␣not␣support␣the␣C<-k>␣test
for␣sticky␣bit.

=item␣HIGH

In␣addition␣to␣the␣MEDIUM␣security␣checks,␣also␣check␣for␣the
possibility␣of␣``chown()␣giveaway''␣using␣the␣L<POSIX|POSIX>
sysconf()␣function.␣If␣this␣is␣a␣possibility,␣each␣directory␣in␣the
path␣is␣checked␣in␣turn␣for␣safeness,␣recursively␣walking␣back␣to␣the
root␣directory.

For␣platforms␣that␣do␣not␣support␣the␣L<POSIX|POSIX>
C<_PC_CHOWN_RESTRICTED>␣symbol␣(for␣example,␣Windows␣NT)␣it␣is
assumed␣that␣``chown()␣giveaway''␣is␣possible␣and␣the␣recursive␣test
is␣performed.

=back

The␣level␣can␣be␣changed␣as␣follows:

␣␣File::Temp->safe_level(␣File::Temp::HIGH␣);

The␣level␣constants␣are␣not␣exported␣by␣the␣module.

Currently,␣you␣must␣be␣running␣at␣least␣perl␣v5.6.0␣in␣order␣to
run␣with␣MEDIUM␣or␣HIGH␣security.␣This␣is␣simply␣because␣the
safety␣tests␣use␣functions␣from␣L<Fcntl|Fcntl>␣that␣are␣not
available␣in␣older␣versions␣of␣perl.␣The␣problem␣is␣that␣the␣version
number␣for␣Fcntl␣is␣the␣same␣in␣perl␣5.6.0␣and␣in␣5.005_03␣even␣though
they␣are␣different␣versions.

On␣systems␣that␣do␣not␣support␣the␣HIGH␣or␣MEDIUM␣safety␣levels
(for␣example␣Win␣NT␣or␣OS/2)␣any␣attempt␣to␣change␣the␣level␣will
be␣ignored.␣The␣decision␣to␣ignore␣rather␣than␣raise␣an␣exception
allows␣portable␣programs␣to␣be␣written␣with␣high␣security␣in␣mind
for␣the␣systems␣that␣can␣support␣this␣without␣those␣programs␣failing
on␣systems␣where␣the␣extra␣tests␣are␣irrelevant.

If␣you␣really␣need␣to␣see␣whether␣the␣change␣has␣been␣accepted
simply␣examine␣the␣return␣value␣of␣C<safe_level>.

␣␣$newlevel␣=␣File::Temp->safe_level(␣File::Temp::HIGH␣);
␣␣die␣"Could␣not␣change␣to␣high␣security"
␣␣␣␣␣␣if␣$newlevel␣!=␣File::Temp::HIGH;

=cut
----------
Range: (2799609,2804055) (4446)
}
}

=item␣B<$KEEP_ALL>

Controls␣whether␣temporary␣files␣and␣directories␣should␣be␣retained
regardless␣of␣any␣instructions␣in␣the␣program␣to␣remove␣them
automatically.␣␣This␣is␣useful␣for␣debugging␣but␣should␣not␣be␣used␣in
production␣code.

␣␣$File::Temp::KEEP_ALL␣=␣1;

Default␣is␣for␣files␣to␣be␣removed␣as␣requested␣by␣the␣caller.

In␣some␣cases,␣files␣will␣only␣be␣retained␣if␣this␣variable␣is␣true
when␣the␣file␣is␣created.␣This␣means␣that␣you␣can␣not␣create␣a␣temporary
file,␣set␣this␣variable␣and␣expect␣the␣temp␣file␣to␣still␣be␣around
when␣the␣program␣exits.

=item␣B<$DEBUG>

Controls␣whether␣debugging␣messages␣should␣be␣enabled.

␣␣$File::Temp::DEBUG␣=␣1;

Default␣is␣for␣debugging␣mode␣to␣be␣disabled.

=back

=head1␣WARNING

For␣maximum␣security,␣endeavour␣always␣to␣avoid␣ever␣looking␣at,
touching,␣or␣even␣imputing␣the␣existence␣of␣the␣filename.␣␣You␣do␣not
know␣that␣that␣filename␣is␣connected␣to␣the␣same␣file␣as␣the␣handle
you␣have,␣and␣attempts␣to␣check␣this␣can␣only␣trigger␣more␣race
conditions.␣␣It's␣far␣more␣secure␣to␣use␣the␣filehandle␣alone␣and
dispense␣with␣the␣filename␣altogether.

If␣you␣need␣to␣pass␣the␣handle␣to␣something␣that␣expects␣a␣filename
then,␣on␣a␣unix␣system,␣use␣C<"/dev/fd/"␣.␣fileno($fh)>␣for␣arbitrary
programs,␣or␣more␣generally␣C<<␣"+<=&"␣.␣fileno($fh)␣>>␣for␣Perl
programs.␣␣You␣will␣have␣to␣clear␣the␣close-on-exec␣bit␣on␣that␣file
descriptor␣before␣passing␣it␣to␣another␣process.

␣␣␣␣use␣Fcntl␣qw/F_SETFD␣F_GETFD/;
␣␣␣␣fcntl($tmpfh,␣F_SETFD,␣0)
␣␣␣␣␣␣␣␣or␣die␣"Can't␣clear␣close-on-exec␣flag␣on␣temp␣fh:␣$!\n";

=head2␣Temporary␣files␣and␣NFS

Some␣problems␣are␣associated␣with␣using␣temporary␣files␣that␣reside
on␣NFS␣file␣systems␣and␣it␣is␣recommended␣that␣a␣local␣filesystem
is␣used␣whenever␣possible.␣Some␣of␣the␣security␣tests␣will␣most␣probably
fail␣when␣the␣temp␣file␣is␣not␣local.␣Additionally,␣be␣aware␣that
the␣performance␣of␣I/O␣operations␣over␣NFS␣will␣not␣be␣as␣good␣as␣for
a␣local␣disk.

=head2␣Forking

In␣some␣cases␣files␣created␣by␣File::Temp␣are␣removed␣from␣within␣an
END␣block.␣Since␣END␣blocks␣are␣triggered␣when␣a␣child␣process␣exits
(unless␣C<POSIX::_exit()>␣is␣used␣by␣the␣child)␣File::Temp␣takes␣care
to␣only␣remove␣those␣temp␣files␣created␣by␣a␣particular␣process␣ID.␣This
means␣that␣a␣child␣will␣not␣attempt␣to␣remove␣temp␣files␣created␣by␣the
parent␣process.

If␣you␣are␣forking␣many␣processes␣in␣parallel␣that␣are␣all␣creating
temporary␣files,␣you␣may␣need␣to␣reset␣the␣random␣number␣seed␣using
srand(EXPR)␣in␣each␣child␣else␣all␣the␣children␣will␣attempt␣to␣walk
through␣the␣same␣set␣of␣random␣file␣names␣and␣may␣well␣cause
themselves␣to␣give␣up␣if␣they␣exceed␣the␣number␣of␣retry␣attempts.

=head2␣Directory␣removal

Note␣that␣if␣you␣have␣chdir'ed␣into␣the␣temporary␣directory␣and␣it␣is
subsequently␣cleaned␣up␣(either␣in␣the␣END␣block␣or␣as␣part␣of␣object
destruction),␣then␣you␣will␣get␣a␣warning␣from␣File::Path::rmtree().

=head2␣BINMODE

The␣file␣returned␣by␣File::Temp␣will␣have␣been␣opened␣in␣binary␣mode
if␣such␣a␣mode␣is␣available.␣If␣that␣is␣not␣correct,␣use␣the␣C<binmode()>
function␣to␣change␣the␣mode␣of␣the␣filehandle.

Note␣that␣you␣can␣modify␣the␣encoding␣of␣a␣file␣opened␣by␣File::Temp
also␣by␣using␣C<binmode()>.

=head1␣HISTORY

Originally␣began␣life␣in␣May␣1999␣as␣an␣XS␣interface␣to␣the␣system
mkstemp()␣function.␣In␣March␣2000,␣the␣OpenBSD␣mkstemp()␣code␣was
translated␣to␣Perl␣for␣total␣control␣of␣the␣code's
security␣checking,␣to␣ensure␣the␣presence␣of␣the␣function␣regardless␣of
operating␣system␣and␣to␣help␣with␣portability.␣The␣module␣was␣shipped
as␣a␣standard␣part␣of␣perl␣from␣v5.6.1.

=head1␣SEE␣ALSO

L<POSIX/tmpnam>,␣L<POSIX/tmpfile>,␣L<File::Spec>,␣L<File::Path>

See␣L<IO::File>␣and␣L<File::MkTemp>,␣L<Apache::TempFile>␣for
different␣implementations␣of␣temporary␣file␣handling.

See␣L<File::Tempdir>␣for␣an␣alternative␣object-oriented␣wrapper␣for
the␣C<tempdir>␣function.

=head1␣AUTHOR

Tim␣Jenness␣E<lt>tjenness@cpan.orgE<gt>

Copyright␣(C)␣2007-2009␣Tim␣Jenness.
Copyright␣(C)␣1999-2007␣Tim␣Jenness␣and␣the␣UK␣Particle␣Physics␣and
Astronomy␣Research␣Council.␣All␣Rights␣Reserved.␣␣This␣program␣is␣free
software;␣you␣can␣redistribute␣it␣and/or␣modify␣it␣under␣the␣same
terms␣as␣Perl␣itself.

Original␣Perl␣implementation␣loosely␣based␣on␣the␣OpenBSD␣C␣code␣for
mkstemp().␣Thanks␣to␣Tom␣Christiansen␣for␣suggesting␣that␣this␣module
should␣be␣written␣and␣providing␣ideas␣for␣code␣improvements␣and
security␣enhancements.

=cut
----------
Range: (2805706,2813019) (7313)
=head1␣NAME

AutoSplit␣-␣split␣a␣package␣for␣autoloading

=head1␣SYNOPSIS

␣autosplit($file,␣$dir,␣$keep,␣$check,␣$modtime);

␣autosplit_lib_modules(@modules);

=head1␣DESCRIPTION

This␣function␣will␣split␣up␣your␣program␣into␣files␣that␣the␣AutoLoader
module␣can␣handle.␣It␣is␣used␣by␣both␣the␣standard␣perl␣libraries␣and␣by
the␣MakeMaker␣utility,␣to␣automatically␣configure␣libraries␣for␣autoloading.

The␣C<autosplit>␣interface␣splits␣the␣specified␣file␣into␣a␣hierarchy␣
rooted␣at␣the␣directory␣C<$dir>.␣It␣creates␣directories␣as␣needed␣to␣reflect
class␣hierarchy,␣and␣creates␣the␣file␣F<autosplit.ix>.␣This␣file␣acts␣as
both␣forward␣declaration␣of␣all␣package␣routines,␣and␣as␣timestamp␣for␣the
last␣update␣of␣the␣hierarchy.

The␣remaining␣three␣arguments␣to␣C<autosplit>␣govern␣other␣options␣to
the␣autosplitter.

=over␣2

=item␣$keep

If␣the␣third␣argument,␣I<$keep>,␣is␣false,␣then␣any
pre-existing␣C<*.al>␣files␣in␣the␣autoload␣directory␣are␣removed␣if
they␣are␣no␣longer␣part␣of␣the␣module␣(obsoleted␣functions).
$keep␣defaults␣to␣0.

=item␣$check

The
fourth␣argument,␣I<$check>,␣instructs␣C<autosplit>␣to␣check␣the␣module
currently␣being␣split␣to␣ensure␣that␣it␣includes␣a␣C<use>
specification␣for␣the␣AutoLoader␣module,␣and␣skips␣the␣module␣if
AutoLoader␣is␣not␣detected.
$check␣defaults␣to␣1.

=item␣$modtime

Lastly,␣the␣I<$modtime>␣argument␣specifies
that␣C<autosplit>␣is␣to␣check␣the␣modification␣time␣of␣the␣module
against␣that␣of␣the␣C<autosplit.ix>␣file,␣and␣only␣split␣the␣module␣if
it␣is␣newer.
$modtime␣defaults␣to␣1.

=back

Typical␣use␣of␣AutoSplit␣in␣the␣perl␣MakeMaker␣utility␣is␣via␣the␣command-line
with:

␣perl␣-e␣'use␣AutoSplit;␣autosplit($ARGV[0],␣$ARGV[1],␣0,␣1,␣1)'

Defined␣as␣a␣Make␣macro,␣it␣is␣invoked␣with␣file␣and␣directory␣arguments;
C<autosplit>␣will␣split␣the␣specified␣file␣into␣the␣specified␣directory␣and
delete␣obsolete␣C<.al>␣files,␣after␣checking␣first␣that␣the␣module␣does␣use
the␣AutoLoader,␣and␣ensuring␣that␣the␣module␣is␣not␣already␣currently␣split
in␣its␣current␣form␣(the␣modtime␣test).

The␣C<autosplit_lib_modules>␣form␣is␣used␣in␣the␣building␣of␣perl.␣It␣takes
as␣input␣a␣list␣of␣files␣(modules)␣that␣are␣assumed␣to␣reside␣in␣a␣directory
B<lib>␣relative␣to␣the␣current␣directory.␣Each␣file␣is␣sent␣to␣the␣
autosplitter␣one␣at␣a␣time,␣to␣be␣split␣into␣the␣directory␣B<lib/auto>.

In␣both␣usages␣of␣the␣autosplitter,␣only␣subroutines␣defined␣following␣the
perl␣I<__END__>␣token␣are␣split␣out␣into␣separate␣files.␣Some
routines␣may␣be␣placed␣prior␣to␣this␣marker␣to␣force␣their␣immediate␣loading
and␣parsing.

=head2␣Multiple␣packages

As␣of␣version␣1.01␣of␣the␣AutoSplit␣module␣it␣is␣possible␣to␣have
multiple␣packages␣within␣a␣single␣file.␣Both␣of␣the␣following␣cases
are␣supported:

␣␣␣package␣NAME;
␣␣␣__END__
␣␣␣sub␣AAA␣{␣...␣}
␣␣␣package␣NAME::option1;
␣␣␣sub␣BBB␣{␣...␣}
␣␣␣package␣NAME::option2;
␣␣␣sub␣BBB␣{␣...␣}

␣␣␣package␣NAME;
␣␣␣__END__
␣␣␣sub␣AAA␣{␣...␣}
␣␣␣sub␣NAME::option1::BBB␣{␣...␣}
␣␣␣sub␣NAME::option2::BBB␣{␣...␣}

=head1␣DIAGNOSTICS

C<AutoSplit>␣will␣inform␣the␣user␣if␣it␣is␣necessary␣to␣create␣the
top-level␣directory␣specified␣in␣the␣invocation.␣It␣is␣preferred␣that
the␣script␣or␣installation␣process␣that␣invokes␣C<AutoSplit>␣have
created␣the␣full␣directory␣path␣ahead␣of␣time.␣This␣warning␣may
indicate␣that␣the␣module␣is␣being␣split␣into␣an␣incorrect␣path.

C<AutoSplit>␣will␣warn␣the␣user␣of␣all␣subroutines␣whose␣name␣causes
potential␣file␣naming␣conflicts␣on␣machines␣with␣drastically␣limited
(8␣characters␣or␣less)␣file␣name␣length.␣Since␣the␣subroutine␣name␣is
used␣as␣the␣file␣name,␣these␣warnings␣can␣aid␣in␣portability␣to␣such
systems.

Warnings␣are␣issued␣and␣the␣file␣skipped␣if␣C<AutoSplit>␣cannot␣locate
either␣the␣I<__END__>␣marker␣or␣a␣"package␣Name;"-style␣specification.

C<AutoSplit>␣will␣also␣emit␣general␣diagnostics␣for␣inability␣to
create␣directories␣or␣files.

=head1␣AUTHOR

C<AutoSplit>␣is␣maintained␣by␣the␣perl5-porters.␣Please␣direct
any␣questions␣to␣the␣canonical␣mailing␣list.␣Anything␣that
is␣applicable␣to␣the␣CPAN␣release␣can␣be␣sent␣to␣its␣maintainer,
though.

Author␣and␣Maintainer:␣The␣Perl5-Porters␣<perl5-porters@perl.org>

Maintainer␣of␣the␣CPAN␣release:␣Steffen␣Mueller␣<smueller@cpan.org>

=head1␣COPYRIGHT␣AND␣LICENSE

This␣package␣has␣been␣part␣of␣the␣perl␣core␣since␣the␣first␣release
of␣perl5.␣It␣has␣been␣released␣separately␣to␣CPAN␣so␣older␣installations
can␣benefit␣from␣bug␣fixes.

This␣package␣has␣the␣same␣copyright␣and␣license␣as␣the␣perl␣core:

␣␣␣␣␣␣␣␣␣␣␣␣␣Copyright␣(C)␣1993,␣1994,␣1995,␣1996,␣1997,␣1998,␣1999,
␣␣␣␣␣␣␣␣2000,␣2001,␣2002,␣2003,␣2004,␣2005,␣2006,␣2007,␣2008
␣␣␣␣␣␣␣␣by␣Larry␣Wall␣and␣others
␣␣␣␣
			␣␣␣␣All␣rights␣reserved.
␣␣␣␣
␣␣␣␣This␣program␣is␣free␣software;␣you␣can␣redistribute␣it␣and/or␣modify
␣␣␣␣it␣under␣the␣terms␣of␣either:
␣␣␣␣
	a)␣the␣GNU␣General␣Public␣License␣as␣published␣by␣the␣Free
	Software␣Foundation;␣either␣version␣1,␣or␣(at␣your␣option)␣any
	later␣version,␣or
␣␣␣␣
	b)␣the␣"Artistic␣License"␣which␣comes␣with␣this␣Kit.
␣␣␣␣
␣␣␣␣This␣program␣is␣distributed␣in␣the␣hope␣that␣it␣will␣be␣useful,
␣␣␣␣but␣WITHOUT␣ANY␣WARRANTY;␣without␣even␣the␣implied␣warranty␣of
␣␣␣␣MERCHANTABILITY␣or␣FITNESS␣FOR␣A␣PARTICULAR␣PURPOSE.␣␣See␣either
␣␣␣␣the␣GNU␣General␣Public␣License␣or␣the␣Artistic␣License␣for␣more␣details.
␣␣␣␣
␣␣␣␣You␣should␣have␣received␣a␣copy␣of␣the␣Artistic␣License␣with␣this
␣␣␣␣Kit,␣in␣the␣file␣named␣"Artistic".␣␣If␣not,␣I'll␣be␣glad␣to␣provide␣one.
␣␣␣␣
␣␣␣␣You␣should␣also␣have␣received␣a␣copy␣of␣the␣GNU␣General␣Public␣License
␣␣␣␣along␣with␣this␣program␣in␣the␣file␣named␣"Copying".␣If␣not,␣write␣to␣the␣
␣␣␣␣Free␣Software␣Foundation,␣Inc.,␣59␣Temple␣Place,␣Suite␣330,␣Boston,␣MA␣
␣␣␣␣02111-1307,␣USA␣or␣visit␣their␣web␣page␣on␣the␣internet␣at
␣␣␣␣http://www.gnu.org/copyleft/gpl.html.
␣␣␣␣
␣␣␣␣For␣those␣of␣you␣that␣choose␣to␣use␣the␣GNU␣General␣Public␣License,
␣␣␣␣my␣interpretation␣of␣the␣GNU␣General␣Public␣License␣is␣that␣no␣Perl
␣␣␣␣script␣falls␣under␣the␣terms␣of␣the␣GPL␣unless␣you␣explicitly␣put
␣␣␣␣said␣script␣under␣the␣terms␣of␣the␣GPL␣yourself.␣␣Furthermore,␣any
␣␣␣␣object␣code␣linked␣with␣perl␣does␣not␣automatically␣fall␣under␣the
␣␣␣␣terms␣of␣the␣GPL,␣provided␣such␣object␣code␣only␣adds␣definitions
␣␣␣␣of␣subroutines␣and␣variables,␣and␣does␣not␣otherwise␣impair␣the
␣␣␣␣resulting␣interpreter␣from␣executing␣any␣standard␣Perl␣script.␣␣I
␣␣␣␣consider␣linking␣in␣C␣subroutines␣in␣this␣manner␣to␣be␣the␣moral
␣␣␣␣equivalent␣of␣defining␣subroutines␣in␣the␣Perl␣language␣itself.␣␣You
␣␣␣␣may␣sell␣such␣an␣object␣file␣as␣proprietary␣provided␣that␣you␣provide
␣␣␣␣or␣offer␣to␣provide␣the␣Perl␣source,␣as␣specified␣by␣the␣GNU␣General
␣␣␣␣Public␣License.␣␣(This␣is␣merely␣an␣alternate␣way␣of␣specifying␣input
␣␣␣␣to␣the␣program.)␣␣You␣may␣also␣sell␣a␣binary␣produced␣by␣the␣dumping␣of
␣␣␣␣a␣running␣Perl␣script␣that␣belongs␣to␣you,␣provided␣that␣you␣provide␣or
␣␣␣␣offer␣to␣provide␣the␣Perl␣source␣as␣specified␣by␣the␣GPL.␣␣(The
␣␣␣␣fact␣that␣a␣Perl␣interpreter␣and␣your␣code␣are␣in␣the␣same␣binary␣file
␣␣␣␣is,␣in␣this␣case,␣a␣form␣of␣mere␣aggregation.)␣␣This␣is␣my␣interpretation
␣␣␣␣of␣the␣GPL.␣␣If␣you␣still␣have␣concerns␣or␣difficulties␣understanding
␣␣␣␣my␣intent,␣feel␣free␣to␣contact␣me.␣␣Of␣course,␣the␣Artistic␣License
␣␣␣␣spells␣all␣this␣out␣for␣your␣protection,␣so␣you␣may␣prefer␣to␣use␣that.

=cut
----------
Range: (2824699,2828088) (3389)
=head1␣NAME

vmsish␣-␣Perl␣pragma␣to␣control␣VMS-specific␣language␣features

=head1␣SYNOPSIS

␣␣␣␣use␣vmsish;

␣␣␣␣use␣vmsish␣'status';	#␣or␣'$?'
␣␣␣␣use␣vmsish␣'exit';
␣␣␣␣use␣vmsish␣'time';

␣␣␣␣use␣vmsish␣'hushed';
␣␣␣␣no␣vmsish␣'hushed';
␣␣␣␣vmsish::hushed($hush);

␣␣␣␣use␣vmsish;
␣␣␣␣no␣vmsish␣'time';

=head1␣DESCRIPTION

If␣no␣import␣list␣is␣supplied,␣all␣possible␣VMS-specific␣features␣are
assumed.␣␣Currently,␣there␣are␣four␣VMS-specific␣features␣available:
'status'␣(a.k.a␣'$?'),␣'exit',␣'time'␣and␣'hushed'.

If␣you're␣not␣running␣VMS,␣this␣module␣does␣nothing.

=over␣6

=item␣C<vmsish␣status>

This␣makes␣C<$?>␣and␣C<system>␣return␣the␣native␣VMS␣exit␣status
instead␣of␣emulating␣the␣POSIX␣exit␣status.

=item␣C<vmsish␣exit>

This␣makes␣C<exit␣1>␣produce␣a␣successful␣exit␣(with␣status␣SS$_NORMAL),
instead␣of␣emulating␣UNIX␣exit(),␣which␣considers␣C<exit␣1>␣to␣indicate
an␣error.␣␣As␣with␣the␣CRTL's␣exit()␣function,␣C<exit␣0>␣is␣also␣mapped
to␣an␣exit␣status␣of␣SS$_NORMAL,␣and␣any␣other␣argument␣to␣exit()␣is
used␣directly␣as␣Perl's␣exit␣status.

=item␣C<vmsish␣time>

This␣makes␣all␣times␣relative␣to␣the␣local␣time␣zone,␣instead␣of␣the
default␣of␣Universal␣Time␣(a.k.a␣Greenwich␣Mean␣Time,␣or␣GMT).

=item␣C<vmsish␣hushed>

This␣suppresses␣printing␣of␣VMS␣status␣messages␣to␣SYS$OUTPUT␣and
SYS$ERROR␣if␣Perl␣terminates␣with␣an␣error␣status.␣␣and␣allows
programs␣that␣are␣expecting␣"unix-style"␣Perl␣to␣avoid␣having␣to␣parse
VMS␣error␣messages.␣␣It␣does␣not␣suppress␣any␣messages␣from␣Perl
itself,␣just␣the␣messages␣generated␣by␣DCL␣after␣Perl␣exits.␣␣The␣DCL
symbol␣$STATUS␣will␣still␣have␣the␣termination␣status,␣but␣with␣a
high-order␣bit␣set:

EXAMPLE:
␣␣␣␣$␣perl␣-e"exit␣44;"␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣Non-hushed␣error␣exit
␣␣␣␣%SYSTEM-F-ABORT,␣abort␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣DCL␣message
␣␣␣␣$␣show␣sym␣$STATUS
␣␣␣␣␣␣$STATUS␣==␣"%X0000002C"

␣␣␣␣$␣perl␣-e"use␣vmsish␣qw(hushed);␣exit␣44;"␣␣␣␣␣␣Hushed␣error␣exit
␣␣␣␣$␣show␣sym␣$STATUS
␣␣␣␣␣␣$STATUS␣==␣"%X1000002C"

The␣'hushed'␣flag␣has␣a␣global␣scope␣during␣compilation:␣the␣exit()␣or
die()␣commands␣that␣are␣compiled␣after␣'vmsish␣hushed'␣will␣be␣hushed
when␣they␣are␣executed.␣␣Doing␣a␣"no␣vmsish␣'hushed'"␣turns␣off␣the
hushed␣flag.

The␣status␣of␣the␣hushed␣flag␣also␣affects␣output␣of␣VMS␣error
messages␣from␣compilation␣errors.␣␣␣Again,␣you␣still␣get␣the␣Perl
error␣message␣(and␣the␣code␣in␣$STATUS)

EXAMPLE:
␣␣␣␣use␣vmsish␣'hushed';␣␣␣␣#␣turn␣on␣hushed␣flag
␣␣␣␣use␣Carp;␣␣␣␣␣␣␣␣␣␣#␣Carp␣compiled␣hushed
␣␣␣␣exit␣44;␣␣␣␣␣␣␣␣␣␣␣#␣will␣be␣hushed
␣␣␣␣croak('I␣die');␣␣␣␣#␣will␣be␣hushed
␣␣␣␣no␣vmsish␣'hushed';␣␣␣␣␣#␣turn␣off␣hushed␣flag
␣␣␣␣exit␣44;␣␣␣␣␣␣␣␣␣␣␣#␣will␣not␣be␣hushed
␣␣␣␣croak('I␣die2'):␣␣␣#␣WILL␣be␣hushed,␣croak␣was␣compiled␣hushed

You␣can␣also␣control␣the␣'hushed'␣flag␣at␣run-time,␣using␣the␣built-in
routine␣vmsish::hushed().␣␣Without␣argument,␣it␣returns␣the␣hushed␣status.
Since␣vmsish::hushed␣is␣built-in,␣you␣do␣not␣need␣to␣"use␣vmsish"␣to␣call
it.

EXAMPLE:
␣␣␣␣if␣($quiet_exit)␣{
␣␣␣␣␣␣␣␣vmsish::hushed(1);
␣␣␣␣}␣
␣␣␣␣print␣"Sssshhhh...I'm␣hushed...\n"␣if␣vmsish::hushed();
␣␣␣␣exit␣44;

Note␣that␣an␣exit()␣or␣die()␣that␣is␣compiled␣'hushed'␣because␣of␣"use
vmsish"␣is␣not␣un-hushed␣by␣calling␣vmsish::hushed(0)␣at␣runtime.

The␣messages␣from␣error␣exits␣from␣inside␣the␣Perl␣core␣are␣generally
more␣serious,␣and␣are␣not␣suppressed.

=back

See␣L<perlmod/Pragmatic␣Modules>.

=cut
----------
Range: (2871064,2909467) (38403)
=head1␣NAME

Getopt::Long␣-␣Extended␣processing␣of␣command␣line␣options

=head1␣SYNOPSIS

␣␣use␣Getopt::Long;
␣␣my␣$data␣␣␣=␣"file.dat";
␣␣my␣$length␣=␣24;
␣␣my␣$verbose;
␣␣$result␣=␣GetOptions␣("length=i"␣=>␣\$length,␣␣␣␣#␣numeric
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣"file=s"␣␣␣=>␣\$data,␣␣␣␣␣␣#␣string
			"verbose"␣␣=>␣\$verbose);␣␣#␣flag

=head1␣DESCRIPTION

The␣Getopt::Long␣module␣implements␣an␣extended␣getopt␣function␣called
GetOptions().␣This␣function␣adheres␣to␣the␣POSIX␣syntax␣for␣command
line␣options,␣with␣GNU␣extensions.␣In␣general,␣this␣means␣that␣options
have␣long␣names␣instead␣of␣single␣letters,␣and␣are␣introduced␣with␣a
double␣dash␣"--".␣Support␣for␣bundling␣of␣command␣line␣options,␣as␣was
the␣case␣with␣the␣more␣traditional␣single-letter␣approach,␣is␣provided
but␣not␣enabled␣by␣default.

=head1␣Command␣Line␣Options,␣an␣Introduction

Command␣line␣operated␣programs␣traditionally␣take␣their␣arguments␣from
the␣command␣line,␣for␣example␣filenames␣or␣other␣information␣that␣the
program␣needs␣to␣know.␣Besides␣arguments,␣these␣programs␣often␣take
command␣line␣I<options>␣as␣well.␣Options␣are␣not␣necessary␣for␣the
program␣to␣work,␣hence␣the␣name␣'option',␣but␣are␣used␣to␣modify␣its
default␣behaviour.␣For␣example,␣a␣program␣could␣do␣its␣job␣quietly,
but␣with␣a␣suitable␣option␣it␣could␣provide␣verbose␣information␣about
what␣it␣did.

Command␣line␣options␣come␣in␣several␣flavours.␣Historically,␣they␣are
preceded␣by␣a␣single␣dash␣C<->,␣and␣consist␣of␣a␣single␣letter.

␣␣␣␣-l␣-a␣-c

Usually,␣these␣single-character␣options␣can␣be␣bundled:

␣␣␣␣-lac

Options␣can␣have␣values,␣the␣value␣is␣placed␣after␣the␣option
character.␣Sometimes␣with␣whitespace␣in␣between,␣sometimes␣not:

␣␣␣␣-s␣24␣-s24

Due␣to␣the␣very␣cryptic␣nature␣of␣these␣options,␣another␣style␣was
developed␣that␣used␣long␣names.␣So␣instead␣of␣a␣cryptic␣C<-l>␣one
could␣use␣the␣more␣descriptive␣C<--long>.␣To␣distinguish␣between␣a
bundle␣of␣single-character␣options␣and␣a␣long␣one,␣two␣dashes␣are␣used
to␣precede␣the␣option␣name.␣Early␣implementations␣of␣long␣options␣used
a␣plus␣C<+>␣instead.␣Also,␣option␣values␣could␣be␣specified␣either
like

␣␣␣␣--size=24

or

␣␣␣␣--size␣24

The␣C<+>␣form␣is␣now␣obsolete␣and␣strongly␣deprecated.

=head1␣Getting␣Started␣with␣Getopt::Long

Getopt::Long␣is␣the␣Perl5␣successor␣of␣C<newgetopt.pl>.␣This␣was␣the
first␣Perl␣module␣that␣provided␣support␣for␣handling␣the␣new␣style␣of
command␣line␣options,␣hence␣the␣name␣Getopt::Long.␣This␣module␣also
supports␣single-character␣options␣and␣bundling.␣Single␣character
options␣may␣be␣any␣alphabetic␣character,␣a␣question␣mark,␣and␣a␣dash.
Long␣options␣may␣consist␣of␣a␣series␣of␣letters,␣digits,␣and␣dashes.
Although␣this␣is␣currently␣not␣enforced␣by␣Getopt::Long,␣multiple
consecutive␣dashes␣are␣not␣allowed,␣and␣the␣option␣name␣must␣not␣end
with␣a␣dash.

To␣use␣Getopt::Long␣from␣a␣Perl␣program,␣you␣must␣include␣the
following␣line␣in␣your␣Perl␣program:

␣␣␣␣use␣Getopt::Long;

This␣will␣load␣the␣core␣of␣the␣Getopt::Long␣module␣and␣prepare␣your
program␣for␣using␣it.␣Most␣of␣the␣actual␣Getopt::Long␣code␣is␣not
loaded␣until␣you␣really␣call␣one␣of␣its␣functions.

In␣the␣default␣configuration,␣options␣names␣may␣be␣abbreviated␣to
uniqueness,␣case␣does␣not␣matter,␣and␣a␣single␣dash␣is␣sufficient,
even␣for␣long␣option␣names.␣Also,␣options␣may␣be␣placed␣between
non-option␣arguments.␣See␣L<Configuring␣Getopt::Long>␣for␣more
details␣on␣how␣to␣configure␣Getopt::Long.

=head2␣Simple␣options

The␣most␣simple␣options␣are␣the␣ones␣that␣take␣no␣values.␣Their␣mere
presence␣on␣the␣command␣line␣enables␣the␣option.␣Popular␣examples␣are:

␣␣␣␣--all␣--verbose␣--quiet␣--debug

Handling␣simple␣options␣is␣straightforward:

␣␣␣␣my␣$verbose␣=␣'';	#␣option␣variable␣with␣default␣value␣(false)
␣␣␣␣my␣$all␣=␣'';	#␣option␣variable␣with␣default␣value␣(false)
␣␣␣␣GetOptions␣('verbose'␣=>␣\$verbose,␣'all'␣=>␣\$all);

The␣call␣to␣GetOptions()␣parses␣the␣command␣line␣arguments␣that␣are
present␣in␣C<@ARGV>␣and␣sets␣the␣option␣variable␣to␣the␣value␣C<1>␣if
the␣option␣did␣occur␣on␣the␣command␣line.␣Otherwise,␣the␣option
variable␣is␣not␣touched.␣Setting␣the␣option␣value␣to␣true␣is␣often
called␣I<enabling>␣the␣option.

The␣option␣name␣as␣specified␣to␣the␣GetOptions()␣function␣is␣called
the␣option␣I<specification>.␣Later␣we'll␣see␣that␣this␣specification
can␣contain␣more␣than␣just␣the␣option␣name.␣The␣reference␣to␣the
variable␣is␣called␣the␣option␣I<destination>.

GetOptions()␣will␣return␣a␣true␣value␣if␣the␣command␣line␣could␣be
processed␣successfully.␣Otherwise,␣it␣will␣write␣error␣messages␣to
STDERR,␣and␣return␣a␣false␣result.

=head2␣A␣little␣bit␣less␣simple␣options

Getopt::Long␣supports␣two␣useful␣variants␣of␣simple␣options:
I<negatable>␣options␣and␣I<incremental>␣options.

A␣negatable␣option␣is␣specified␣with␣an␣exclamation␣mark␣C<!>␣after␣the
option␣name:

␣␣␣␣my␣$verbose␣=␣'';	#␣option␣variable␣with␣default␣value␣(false)
␣␣␣␣GetOptions␣('verbose!'␣=>␣\$verbose);

Now,␣using␣C<--verbose>␣on␣the␣command␣line␣will␣enable␣C<$verbose>,
as␣expected.␣But␣it␣is␣also␣allowed␣to␣use␣C<--noverbose>,␣which␣will
disable␣C<$verbose>␣by␣setting␣its␣value␣to␣C<0>.␣Using␣a␣suitable
default␣value,␣the␣program␣can␣find␣out␣whether␣C<$verbose>␣is␣false
by␣default,␣or␣disabled␣by␣using␣C<--noverbose>.

An␣incremental␣option␣is␣specified␣with␣a␣plus␣C<+>␣after␣the
option␣name:

␣␣␣␣my␣$verbose␣=␣'';	#␣option␣variable␣with␣default␣value␣(false)
␣␣␣␣GetOptions␣('verbose+'␣=>␣\$verbose);

Using␣C<--verbose>␣on␣the␣command␣line␣will␣increment␣the␣value␣of
C<$verbose>.␣This␣way␣the␣program␣can␣keep␣track␣of␣how␣many␣times␣the
option␣occurred␣on␣the␣command␣line.␣For␣example,␣each␣occurrence␣of
C<--verbose>␣could␣increase␣the␣verbosity␣level␣of␣the␣program.

=head2␣Mixing␣command␣line␣option␣with␣other␣arguments

Usually␣programs␣take␣command␣line␣options␣as␣well␣as␣other␣arguments,
for␣example,␣file␣names.␣It␣is␣good␣practice␣to␣always␣specify␣the
options␣first,␣and␣the␣other␣arguments␣last.␣Getopt::Long␣will,
however,␣allow␣the␣options␣and␣arguments␣to␣be␣mixed␣and␣'filter␣out'
all␣the␣options␣before␣passing␣the␣rest␣of␣the␣arguments␣to␣the
program.␣To␣stop␣Getopt::Long␣from␣processing␣further␣arguments,
insert␣a␣double␣dash␣C<-->␣on␣the␣command␣line:

␣␣␣␣--size␣24␣--␣--all

In␣this␣example,␣C<--all>␣will␣I<not>␣be␣treated␣as␣an␣option,␣but
passed␣to␣the␣program␣unharmed,␣in␣C<@ARGV>.

=head2␣Options␣with␣values

For␣options␣that␣take␣values␣it␣must␣be␣specified␣whether␣the␣option
value␣is␣required␣or␣not,␣and␣what␣kind␣of␣value␣the␣option␣expects.

Three␣kinds␣of␣values␣are␣supported:␣integer␣numbers,␣floating␣point
numbers,␣and␣strings.

If␣the␣option␣value␣is␣required,␣Getopt::Long␣will␣take␣the
command␣line␣argument␣that␣follows␣the␣option␣and␣assign␣this␣to␣the
option␣variable.␣If,␣however,␣the␣option␣value␣is␣specified␣as
optional,␣this␣will␣only␣be␣done␣if␣that␣value␣does␣not␣look␣like␣a
valid␣command␣line␣option␣itself.

␣␣␣␣my␣$tag␣=␣'';	#␣option␣variable␣with␣default␣value
␣␣␣␣GetOptions␣('tag=s'␣=>␣\$tag);

In␣the␣option␣specification,␣the␣option␣name␣is␣followed␣by␣an␣equals
sign␣C<=>␣and␣the␣letter␣C<s>.␣The␣equals␣sign␣indicates␣that␣this
option␣requires␣a␣value.␣The␣letter␣C<s>␣indicates␣that␣this␣value␣is
an␣arbitrary␣string.␣Other␣possible␣value␣types␣are␣C<i>␣for␣integer
values,␣and␣C<f>␣for␣floating␣point␣values.␣Using␣a␣colon␣C<:>␣instead
of␣the␣equals␣sign␣indicates␣that␣the␣option␣value␣is␣optional.␣In
this␣case,␣if␣no␣suitable␣value␣is␣supplied,␣string␣valued␣options␣get
an␣empty␣string␣C<''>␣assigned,␣while␣numeric␣options␣are␣set␣to␣C<0>.

=head2␣Options␣with␣multiple␣values

Options␣sometimes␣take␣several␣values.␣For␣example,␣a␣program␣could
use␣multiple␣directories␣to␣search␣for␣library␣files:

␣␣␣␣--library␣lib/stdlib␣--library␣lib/extlib

To␣accomplish␣this␣behaviour,␣simply␣specify␣an␣array␣reference␣as␣the
destination␣for␣the␣option:

␣␣␣␣GetOptions␣("library=s"␣=>␣\@libfiles);

Alternatively,␣you␣can␣specify␣that␣the␣option␣can␣have␣multiple
values␣by␣adding␣a␣"@",␣and␣pass␣a␣scalar␣reference␣as␣the
destination:

␣␣␣␣GetOptions␣("library=s@"␣=>␣\$libfiles);

Used␣with␣the␣example␣above,␣C<@libfiles>␣(or␣C<@$libfiles>)␣would
contain␣two␣strings␣upon␣completion:␣C<"lib/srdlib">␣and
C<"lib/extlib">,␣in␣that␣order.␣It␣is␣also␣possible␣to␣specify␣that
only␣integer␣or␣floating␣point␣numbers␣are␣acceptable␣values.

Often␣it␣is␣useful␣to␣allow␣comma-separated␣lists␣of␣values␣as␣well␣as
multiple␣occurrences␣of␣the␣options.␣This␣is␣easy␣using␣Perl's␣split()
and␣join()␣operators:

␣␣␣␣GetOptions␣("library=s"␣=>␣\@libfiles);
␣␣␣␣@libfiles␣=␣split(/,/,join(',',@libfiles));

Of␣course,␣it␣is␣important␣to␣choose␣the␣right␣separator␣string␣for
each␣purpose.

Warning:␣What␣follows␣is␣an␣experimental␣feature.

Options␣can␣take␣multiple␣values␣at␣once,␣for␣example

␣␣␣␣--coordinates␣52.2␣16.4␣--rgbcolor␣255␣255␣149

This␣can␣be␣accomplished␣by␣adding␣a␣repeat␣specifier␣to␣the␣option
specification.␣Repeat␣specifiers␣are␣very␣similar␣to␣the␣C<{...}>
repeat␣specifiers␣that␣can␣be␣used␣with␣regular␣expression␣patterns.
For␣example,␣the␣above␣command␣line␣would␣be␣handled␣as␣follows:

␣␣␣␣GetOptions('coordinates=f{2}'␣=>␣\@coor,␣'rgbcolor=i{3}'␣=>␣\@color);

The␣destination␣for␣the␣option␣must␣be␣an␣array␣or␣array␣reference.

It␣is␣also␣possible␣to␣specify␣the␣minimal␣and␣maximal␣number␣of
arguments␣an␣option␣takes.␣C<foo=s{2,4}>␣indicates␣an␣option␣that
takes␣at␣least␣two␣and␣at␣most␣4␣arguments.␣C<foo=s{,}>␣indicates␣one
or␣more␣values;␣C<foo:s{,}>␣indicates␣zero␣or␣more␣option␣values.

=head2␣Options␣with␣hash␣values

If␣the␣option␣destination␣is␣a␣reference␣to␣a␣hash,␣the␣option␣will
take,␣as␣value,␣strings␣of␣the␣form␣I<key>C<=>I<value>.␣The␣value␣will
be␣stored␣with␣the␣specified␣key␣in␣the␣hash.

␣␣␣␣GetOptions␣("define=s"␣=>␣\%defines);

Alternatively␣you␣can␣use:

␣␣␣␣GetOptions␣("define=s%"␣=>␣\$defines);

When␣used␣with␣command␣line␣options:

␣␣␣␣--define␣os=linux␣--define␣vendor=redhat

the␣hash␣C<%defines>␣(or␣C<%$defines>)␣will␣contain␣two␣keys,␣C<"os">
with␣value␣C<"linux">␣and␣C<"vendor">␣with␣value␣C<"redhat">.␣It␣is
also␣possible␣to␣specify␣that␣only␣integer␣or␣floating␣point␣numbers
are␣acceptable␣values.␣The␣keys␣are␣always␣taken␣to␣be␣strings.

=head2␣User-defined␣subroutines␣to␣handle␣options

Ultimate␣control␣over␣what␣should␣be␣done␣when␣(actually:␣each␣time)
an␣option␣is␣encountered␣on␣the␣command␣line␣can␣be␣achieved␣by
designating␣a␣reference␣to␣a␣subroutine␣(or␣an␣anonymous␣subroutine)
as␣the␣option␣destination.␣When␣GetOptions()␣encounters␣the␣option,␣it
will␣call␣the␣subroutine␣with␣two␣or␣three␣arguments.␣The␣first
argument␣is␣the␣name␣of␣the␣option.␣(Actually,␣it␣is␣an␣object␣that
stringifies␣to␣the␣name␣of␣the␣option.)␣For␣a␣scalar␣or␣array␣destination,
the␣second␣argument␣is␣the␣value␣to␣be␣stored.␣For␣a␣hash␣destination,
the␣second␣arguments␣is␣the␣key␣to␣the␣hash,␣and␣the␣third␣argument
the␣value␣to␣be␣stored.␣It␣is␣up␣to␣the␣subroutine␣to␣store␣the␣value,
or␣do␣whatever␣it␣thinks␣is␣appropriate.

A␣trivial␣application␣of␣this␣mechanism␣is␣to␣implement␣options␣that
are␣related␣to␣each␣other.␣For␣example:

␣␣␣␣my␣$verbose␣=␣'';	#␣option␣variable␣with␣default␣value␣(false)
␣␣␣␣GetOptions␣('verbose'␣=>␣\$verbose,
	␣␣␣␣␣␣␣␣'quiet'␣␣␣=>␣sub␣{␣$verbose␣=␣0␣});

Here␣C<--verbose>␣and␣C<--quiet>␣control␣the␣same␣variable
C<$verbose>,␣but␣with␣opposite␣values.

If␣the␣subroutine␣needs␣to␣signal␣an␣error,␣it␣should␣call␣die()␣with
the␣desired␣error␣message␣as␣its␣argument.␣GetOptions()␣will␣catch␣the
die(),␣issue␣the␣error␣message,␣and␣record␣that␣an␣error␣result␣must
be␣returned␣upon␣completion.

If␣the␣text␣of␣the␣error␣message␣starts␣with␣an␣exclamation␣mark␣C<!>
it␣is␣interpreted␣specially␣by␣GetOptions().␣There␣is␣currently␣one
special␣command␣implemented:␣C<die("!FINISH")>␣will␣cause␣GetOptions()
to␣stop␣processing␣options,␣as␣if␣it␣encountered␣a␣double␣dash␣C<-->.

In␣version␣2.37␣the␣first␣argument␣to␣the␣callback␣function␣was
changed␣from␣string␣to␣object.␣This␣was␣done␣to␣make␣room␣for
extensions␣and␣more␣detailed␣control.␣The␣object␣stringifies␣to␣the
option␣name␣so␣this␣change␣should␣not␣introduce␣compatibility
problems.

=head2␣Options␣with␣multiple␣names

Often␣it␣is␣user␣friendly␣to␣supply␣alternate␣mnemonic␣names␣for
options.␣For␣example␣C<--height>␣could␣be␣an␣alternate␣name␣for
C<--length>.␣Alternate␣names␣can␣be␣included␣in␣the␣option
specification,␣separated␣by␣vertical␣bar␣C<|>␣characters.␣To␣implement
the␣above␣example:

␣␣␣␣GetOptions␣('length|height=f'␣=>␣\$length);

The␣first␣name␣is␣called␣the␣I<primary>␣name,␣the␣other␣names␣are
called␣I<aliases>.␣When␣using␣a␣hash␣to␣store␣options,␣the␣key␣will
always␣be␣the␣primary␣name.

Multiple␣alternate␣names␣are␣possible.

=head2␣Case␣and␣abbreviations

Without␣additional␣configuration,␣GetOptions()␣will␣ignore␣the␣case␣of
option␣names,␣and␣allow␣the␣options␣to␣be␣abbreviated␣to␣uniqueness.

␣␣␣␣GetOptions␣('length|height=f'␣=>␣\$length,␣"head"␣=>␣\$head);

This␣call␣will␣allow␣C<--l>␣and␣C<--L>␣for␣the␣length␣option,␣but
requires␣a␣least␣C<--hea>␣and␣C<--hei>␣for␣the␣head␣and␣height␣options.

=head2␣Summary␣of␣Option␣Specifications

Each␣option␣specifier␣consists␣of␣two␣parts:␣the␣name␣specification
and␣the␣argument␣specification.

The␣name␣specification␣contains␣the␣name␣of␣the␣option,␣optionally
followed␣by␣a␣list␣of␣alternative␣names␣separated␣by␣vertical␣bar
characters.

␣␣␣␣length	␣␣␣␣␣␣option␣name␣is␣"length"
␣␣␣␣length|size|l␣␣␣␣␣name␣is␣"length",␣aliases␣are␣"size"␣and␣"l"

The␣argument␣specification␣is␣optional.␣If␣omitted,␣the␣option␣is
considered␣boolean,␣a␣value␣of␣1␣will␣be␣assigned␣when␣the␣option␣is
used␣on␣the␣command␣line.

The␣argument␣specification␣can␣be

=over␣4

=item␣!

The␣option␣does␣not␣take␣an␣argument␣and␣may␣be␣negated␣by␣prefixing
it␣with␣"no"␣or␣"no-".␣E.g.␣C<"foo!">␣will␣allow␣C<--foo>␣(a␣value␣of
1␣will␣be␣assigned)␣as␣well␣as␣C<--nofoo>␣and␣C<--no-foo>␣(a␣value␣of
0␣will␣be␣assigned).␣If␣the␣option␣has␣aliases,␣this␣applies␣to␣the
aliases␣as␣well.

Using␣negation␣on␣a␣single␣letter␣option␣when␣bundling␣is␣in␣effect␣is
pointless␣and␣will␣result␣in␣a␣warning.

=item␣+

The␣option␣does␣not␣take␣an␣argument␣and␣will␣be␣incremented␣by␣1
every␣time␣it␣appears␣on␣the␣command␣line.␣E.g.␣C<"more+">,␣when␣used
with␣C<--more␣--more␣--more>,␣will␣increment␣the␣value␣three␣times,
resulting␣in␣a␣value␣of␣3␣(provided␣it␣was␣0␣or␣undefined␣at␣first).

The␣C<+>␣specifier␣is␣ignored␣if␣the␣option␣destination␣is␣not␣a␣scalar.

=item␣=␣I<type>␣[␣I<desttype>␣]␣[␣I<repeat>␣]

The␣option␣requires␣an␣argument␣of␣the␣given␣type.␣Supported␣types
are:

=over␣4

=item␣s

String.␣An␣arbitrary␣sequence␣of␣characters.␣It␣is␣valid␣for␣the
argument␣to␣start␣with␣C<->␣or␣C<-->.

=item␣i

Integer.␣An␣optional␣leading␣plus␣or␣minus␣sign,␣followed␣by␣a
sequence␣of␣digits.

=item␣o

Extended␣integer,␣Perl␣style.␣This␣can␣be␣either␣an␣optional␣leading
plus␣or␣minus␣sign,␣followed␣by␣a␣sequence␣of␣digits,␣or␣an␣octal
string␣(a␣zero,␣optionally␣followed␣by␣'0',␣'1',␣..␣'7'),␣or␣a
hexadecimal␣string␣(C<0x>␣followed␣by␣'0'␣..␣'9',␣'a'␣..␣'f',␣case
insensitive),␣or␣a␣binary␣string␣(C<0b>␣followed␣by␣a␣series␣of␣'0'
and␣'1').

=item␣f

Real␣number.␣For␣example␣C<3.14>,␣C<-6.23E24>␣and␣so␣on.

=back

The␣I<desttype>␣can␣be␣C<@>␣or␣C<%>␣to␣specify␣that␣the␣option␣is
list␣or␣a␣hash␣valued.␣This␣is␣only␣needed␣when␣the␣destination␣for
the␣option␣value␣is␣not␣otherwise␣specified.␣It␣should␣be␣omitted␣when
not␣needed.

The␣I<repeat>␣specifies␣the␣number␣of␣values␣this␣option␣takes␣per
occurrence␣on␣the␣command␣line.␣It␣has␣the␣format␣C<{>␣[␣I<min>␣]␣[␣C<,>␣[␣I<max>␣]␣]␣C<}>.

I<min>␣denotes␣the␣minimal␣number␣of␣arguments.␣It␣defaults␣to␣1␣for
options␣with␣C<=>␣and␣to␣0␣for␣options␣with␣C<:>,␣see␣below.␣Note␣that
I<min>␣overrules␣the␣C<=>␣/␣C<:>␣semantics.

I<max>␣denotes␣the␣maximum␣number␣of␣arguments.␣It␣must␣be␣at␣least
I<min>.␣If␣I<max>␣is␣omitted,␣I<but␣the␣comma␣is␣not>,␣there␣is␣no
upper␣bound␣to␣the␣number␣of␣argument␣values␣taken.

=item␣:␣I<type>␣[␣I<desttype>␣]

Like␣C<=>,␣but␣designates␣the␣argument␣as␣optional.
If␣omitted,␣an␣empty␣string␣will␣be␣assigned␣to␣string␣values␣options,
and␣the␣value␣zero␣to␣numeric␣options.

Note␣that␣if␣a␣string␣argument␣starts␣with␣C<->␣or␣C<-->,␣it␣will␣be
considered␣an␣option␣on␣itself.

=item␣:␣I<number>␣[␣I<desttype>␣]

Like␣C<:i>,␣but␣if␣the␣value␣is␣omitted,␣the␣I<number>␣will␣be␣assigned.

=item␣:␣+␣[␣I<desttype>␣]

Like␣C<:i>,␣but␣if␣the␣value␣is␣omitted,␣the␣current␣value␣for␣the
option␣will␣be␣incremented.

=back

=head1␣Advanced␣Possibilities

=head2␣Object␣oriented␣interface

Getopt::Long␣can␣be␣used␣in␣an␣object␣oriented␣way␣as␣well:

␣␣␣␣use␣Getopt::Long;
␣␣␣␣$p␣=␣new␣Getopt::Long::Parser;
␣␣␣␣$p->configure(...configuration␣options...);
␣␣␣␣if␣($p->getoptions(...options␣descriptions...))␣...

Configuration␣options␣can␣be␣passed␣to␣the␣constructor:

␣␣␣␣$p␣=␣new␣Getopt::Long::Parser
␣␣␣␣␣␣␣␣␣␣␣␣␣config␣=>␣[...configuration␣options...];

=head2␣Thread␣Safety

Getopt::Long␣is␣thread␣safe␣when␣using␣ithreads␣as␣of␣Perl␣5.8.␣␣It␣is
I<not>␣thread␣safe␣when␣using␣the␣older␣(experimental␣and␣now
obsolete)␣threads␣implementation␣that␣was␣added␣to␣Perl␣5.005.

=head2␣Documentation␣and␣help␣texts

Getopt::Long␣encourages␣the␣use␣of␣Pod::Usage␣to␣produce␣help
messages.␣For␣example:

␣␣␣␣use␣Getopt::Long;
␣␣␣␣use␣Pod::Usage;

␣␣␣␣my␣$man␣=␣0;
␣␣␣␣my␣$help␣=␣0;

␣␣␣␣GetOptions('help|?'␣=>␣\$help,␣man␣=>␣\$man)␣or␣pod2usage(2);
␣␣␣␣pod2usage(1)␣if␣$help;
␣␣␣␣pod2usage(-exitstatus␣=>␣0,␣-verbose␣=>␣2)␣if␣$man;

␣␣␣␣__END__

␣␣␣␣=head1␣NAME

␣␣␣␣sample␣-␣Using␣Getopt::Long␣and␣Pod::Usage

␣␣␣␣=head1␣SYNOPSIS

␣␣␣␣sample␣[options]␣[file␣...]

␣␣␣␣␣Options:
␣␣␣␣␣␣␣-help␣␣␣␣␣␣␣␣␣␣␣␣brief␣help␣message
␣␣␣␣␣␣␣-man␣␣␣␣␣␣␣␣␣␣␣␣␣full␣documentation

␣␣␣␣=head1␣OPTIONS

␣␣␣␣=over␣8

␣␣␣␣=item␣B<-help>

␣␣␣␣Print␣a␣brief␣help␣message␣and␣exits.

␣␣␣␣=item␣B<-man>

␣␣␣␣Prints␣the␣manual␣page␣and␣exits.

␣␣␣␣=back

␣␣␣␣=head1␣DESCRIPTION

␣␣␣␣B<This␣program>␣will␣read␣the␣given␣input␣file(s)␣and␣do␣something
␣␣␣␣useful␣with␣the␣contents␣thereof.

␣␣␣␣=cut

See␣L<Pod::Usage>␣for␣details.

=head2␣Parsing␣options␣from␣an␣arbitrary␣array

By␣default,␣GetOptions␣parses␣the␣options␣that␣are␣present␣in␣the
global␣array␣C<@ARGV>.␣A␣special␣entry␣C<GetOptionsFromArray>␣can␣be
used␣to␣parse␣options␣from␣an␣arbitrary␣array.

␣␣␣␣use␣Getopt::Long␣qw(GetOptionsFromArray);
␣␣␣␣$ret␣=␣GetOptionsFromArray(\@myopts,␣...);

When␣used␣like␣this,␣the␣global␣C<@ARGV>␣is␣not␣touched␣at␣all.

The␣following␣two␣calls␣behave␣identically:

␣␣␣␣$ret␣=␣GetOptions(␣...␣);
␣␣␣␣$ret␣=␣GetOptionsFromArray(\@ARGV,␣...␣);

=head2␣Parsing␣options␣from␣an␣arbitrary␣string

A␣special␣entry␣C<GetOptionsFromString>␣can␣be␣used␣to␣parse␣options
from␣an␣arbitrary␣string.

␣␣␣␣use␣Getopt::Long␣qw(GetOptionsFromString);
␣␣␣␣$ret␣=␣GetOptionsFromString($string,␣...);

The␣contents␣of␣the␣string␣are␣split␣into␣arguments␣using␣a␣call␣to
C<Text::ParseWords::shellwords>.␣As␣with␣C<GetOptionsFromArray>,␣the
global␣C<@ARGV>␣is␣not␣touched.

It␣is␣possible␣that,␣upon␣completion,␣not␣all␣arguments␣in␣the␣string
have␣been␣processed.␣C<GetOptionsFromString>␣will,␣when␣called␣in␣list
context,␣return␣both␣the␣return␣status␣and␣an␣array␣reference␣to␣any
remaining␣arguments:

␣␣␣␣($ret,␣$args)␣=␣GetOptionsFromString($string,␣...␣);

If␣any␣arguments␣remain,␣and␣C<GetOptionsFromString>␣was␣not␣called␣in
list␣context,␣a␣message␣will␣be␣given␣and␣C<GetOptionsFromString>␣will
return␣failure.

=head2␣Storing␣options␣values␣in␣a␣hash

Sometimes,␣for␣example␣when␣there␣are␣a␣lot␣of␣options,␣having␣a
separate␣variable␣for␣each␣of␣them␣can␣be␣cumbersome.␣GetOptions()
supports,␣as␣an␣alternative␣mechanism,␣storing␣options␣values␣in␣a
hash.

To␣obtain␣this,␣a␣reference␣to␣a␣hash␣must␣be␣passed␣I<as␣the␣first
argument>␣to␣GetOptions().␣For␣each␣option␣that␣is␣specified␣on␣the
command␣line,␣the␣option␣value␣will␣be␣stored␣in␣the␣hash␣with␣the
option␣name␣as␣key.␣Options␣that␣are␣not␣actually␣used␣on␣the␣command
line␣will␣not␣be␣put␣in␣the␣hash,␣on␣other␣words,
C<exists($h{option})>␣(or␣defined())␣can␣be␣used␣to␣test␣if␣an␣option
was␣used.␣The␣drawback␣is␣that␣warnings␣will␣be␣issued␣if␣the␣program
runs␣under␣C<use␣strict>␣and␣uses␣C<$h{option}>␣without␣testing␣with
exists()␣or␣defined()␣first.

␣␣␣␣my␣%h␣=␣();
␣␣␣␣GetOptions␣(\%h,␣'length=i');	#␣will␣store␣in␣$h{length}

For␣options␣that␣take␣list␣or␣hash␣values,␣it␣is␣necessary␣to␣indicate
this␣by␣appending␣an␣C<@>␣or␣C<%>␣sign␣after␣the␣type:

␣␣␣␣GetOptions␣(\%h,␣'colours=s@');	#␣will␣push␣to␣@{$h{colours}}

To␣make␣things␣more␣complicated,␣the␣hash␣may␣contain␣references␣to
the␣actual␣destinations,␣for␣example:

␣␣␣␣my␣$len␣=␣0;
␣␣␣␣my␣%h␣=␣('length'␣=>␣\$len);
␣␣␣␣GetOptions␣(\%h,␣'length=i');	#␣will␣store␣in␣$len

This␣example␣is␣fully␣equivalent␣with:

␣␣␣␣my␣$len␣=␣0;
␣␣␣␣GetOptions␣('length=i'␣=>␣\$len);	#␣will␣store␣in␣$len

Any␣mixture␣is␣possible.␣For␣example,␣the␣most␣frequently␣used␣options
could␣be␣stored␣in␣variables␣while␣all␣other␣options␣get␣stored␣in␣the
hash:

␣␣␣␣my␣$verbose␣=␣0;			#␣frequently␣referred
␣␣␣␣my␣$debug␣=␣0;			#␣frequently␣referred
␣␣␣␣my␣%h␣=␣('verbose'␣=>␣\$verbose,␣'debug'␣=>␣\$debug);
␣␣␣␣GetOptions␣(\%h,␣'verbose',␣'debug',␣'filter',␣'size=i');
␣␣␣␣if␣(␣$verbose␣)␣{␣...␣}
␣␣␣␣if␣(␣exists␣$h{filter}␣)␣{␣...␣option␣'filter'␣was␣specified␣...␣}

=head2␣Bundling

With␣bundling␣it␣is␣possible␣to␣set␣several␣single-character␣options
at␣once.␣For␣example␣if␣C<a>,␣C<v>␣and␣C<x>␣are␣all␣valid␣options,

␣␣␣␣-vax

would␣set␣all␣three.

Getopt::Long␣supports␣two␣levels␣of␣bundling.␣To␣enable␣bundling,␣a
call␣to␣Getopt::Long::Configure␣is␣required.

The␣first␣level␣of␣bundling␣can␣be␣enabled␣with:

␣␣␣␣Getopt::Long::Configure␣("bundling");

Configured␣this␣way,␣single-character␣options␣can␣be␣bundled␣but␣long
options␣B<must>␣always␣start␣with␣a␣double␣dash␣C<-->␣to␣avoid
ambiguity.␣For␣example,␣when␣C<vax>,␣C<a>,␣C<v>␣and␣C<x>␣are␣all␣valid
options,

␣␣␣␣-vax

would␣set␣C<a>,␣C<v>␣and␣C<x>,␣but

␣␣␣␣--vax

would␣set␣C<vax>.

The␣second␣level␣of␣bundling␣lifts␣this␣restriction.␣It␣can␣be␣enabled
with:

␣␣␣␣Getopt::Long::Configure␣("bundling_override");

Now,␣C<-vax>␣would␣set␣the␣option␣C<vax>.

When␣any␣level␣of␣bundling␣is␣enabled,␣option␣values␣may␣be␣inserted
in␣the␣bundle.␣For␣example:

␣␣␣␣-h24w80

is␣equivalent␣to

␣␣␣␣-h␣24␣-w␣80

When␣configured␣for␣bundling,␣single-character␣options␣are␣matched
case␣sensitive␣while␣long␣options␣are␣matched␣case␣insensitive.␣To
have␣the␣single-character␣options␣matched␣case␣insensitive␣as␣well,
use:

␣␣␣␣Getopt::Long::Configure␣("bundling",␣"ignorecase_always");

It␣goes␣without␣saying␣that␣bundling␣can␣be␣quite␣confusing.

=head2␣The␣lonesome␣dash

Normally,␣a␣lone␣dash␣C<->␣on␣the␣command␣line␣will␣not␣be␣considered
an␣option.␣Option␣processing␣will␣terminate␣(unless␣"permute"␣is
configured)␣and␣the␣dash␣will␣be␣left␣in␣C<@ARGV>.

It␣is␣possible␣to␣get␣special␣treatment␣for␣a␣lone␣dash.␣This␣can␣be
achieved␣by␣adding␣an␣option␣specification␣with␣an␣empty␣name,␣for
example:

␣␣␣␣GetOptions␣(''␣=>␣\$stdio);

A␣lone␣dash␣on␣the␣command␣line␣will␣now␣be␣a␣legal␣option,␣and␣using
it␣will␣set␣variable␣C<$stdio>.

=head2␣Argument␣callback

A␣special␣option␣'name'␣C<<␣<>␣>>␣can␣be␣used␣to␣designate␣a␣subroutine
to␣handle␣non-option␣arguments.␣When␣GetOptions()␣encounters␣an
argument␣that␣does␣not␣look␣like␣an␣option,␣it␣will␣immediately␣call␣this
subroutine␣and␣passes␣it␣one␣parameter:␣the␣argument␣name.␣Well,␣actually
it␣is␣an␣object␣that␣stringifies␣to␣the␣argument␣name.

For␣example:

␣␣␣␣my␣$width␣=␣80;
␣␣␣␣sub␣process␣{␣...␣}
␣␣␣␣GetOptions␣('width=i'␣=>␣\$width,␣'<>'␣=>␣\&process);

When␣applied␣to␣the␣following␣command␣line:

␣␣␣␣arg1␣--width=72␣arg2␣--width=60␣arg3

This␣will␣call
C<process("arg1")>␣while␣C<$width>␣is␣C<80>,
C<process("arg2")>␣while␣C<$width>␣is␣C<72>,␣and
C<process("arg3")>␣while␣C<$width>␣is␣C<60>.

This␣feature␣requires␣configuration␣option␣B<permute>,␣see␣section
L<Configuring␣Getopt::Long>.

=head1␣Configuring␣Getopt::Long

Getopt::Long␣can␣be␣configured␣by␣calling␣subroutine
Getopt::Long::Configure().␣This␣subroutine␣takes␣a␣list␣of␣quoted
strings,␣each␣specifying␣a␣configuration␣option␣to␣be␣enabled,␣e.g.
C<ignore_case>,␣or␣disabled,␣e.g.␣C<no_ignore_case>.␣Case␣does␣not
matter.␣Multiple␣calls␣to␣Configure()␣are␣possible.

Alternatively,␣as␣of␣version␣2.24,␣the␣configuration␣options␣may␣be
passed␣together␣with␣the␣C<use>␣statement:

␣␣␣␣use␣Getopt::Long␣qw(:config␣no_ignore_case␣bundling);

The␣following␣options␣are␣available:

=over␣12

=item␣default

This␣option␣causes␣all␣configuration␣options␣to␣be␣reset␣to␣their
default␣values.

=item␣posix_default

This␣option␣causes␣all␣configuration␣options␣to␣be␣reset␣to␣their
default␣values␣as␣if␣the␣environment␣variable␣POSIXLY_CORRECT␣had
been␣set.

=item␣auto_abbrev

Allow␣option␣names␣to␣be␣abbreviated␣to␣uniqueness.
Default␣is␣enabled␣unless␣environment␣variable
POSIXLY_CORRECT␣has␣been␣set,␣in␣which␣case␣C<auto_abbrev>␣is␣disabled.

=item␣getopt_compat

Allow␣C<+>␣to␣start␣options.
Default␣is␣enabled␣unless␣environment␣variable
POSIXLY_CORRECT␣has␣been␣set,␣in␣which␣case␣C<getopt_compat>␣is␣disabled.

=item␣gnu_compat

C<gnu_compat>␣controls␣whether␣C<--opt=>␣is␣allowed,␣and␣what␣it␣should
do.␣Without␣C<gnu_compat>,␣C<--opt=>␣gives␣an␣error.␣With␣C<gnu_compat>,
C<--opt=>␣will␣give␣option␣C<opt>␣and␣empty␣value.
This␣is␣the␣way␣GNU␣getopt_long()␣does␣it.

=item␣gnu_getopt

This␣is␣a␣short␣way␣of␣setting␣C<gnu_compat>␣C<bundling>␣C<permute>
C<no_getopt_compat>.␣With␣C<gnu_getopt>,␣command␣line␣handling␣should␣be
fully␣compatible␣with␣GNU␣getopt_long().

=item␣require_order

Whether␣command␣line␣arguments␣are␣allowed␣to␣be␣mixed␣with␣options.
Default␣is␣disabled␣unless␣environment␣variable
POSIXLY_CORRECT␣has␣been␣set,␣in␣which␣case␣C<require_order>␣is␣enabled.

See␣also␣C<permute>,␣which␣is␣the␣opposite␣of␣C<require_order>.

=item␣permute

Whether␣command␣line␣arguments␣are␣allowed␣to␣be␣mixed␣with␣options.
Default␣is␣enabled␣unless␣environment␣variable
POSIXLY_CORRECT␣has␣been␣set,␣in␣which␣case␣C<permute>␣is␣disabled.
Note␣that␣C<permute>␣is␣the␣opposite␣of␣C<require_order>.

If␣C<permute>␣is␣enabled,␣this␣means␣that

␣␣␣␣--foo␣arg1␣--bar␣arg2␣arg3

is␣equivalent␣to

␣␣␣␣--foo␣--bar␣arg1␣arg2␣arg3

If␣an␣argument␣callback␣routine␣is␣specified,␣C<@ARGV>␣will␣always␣be
empty␣upon␣successful␣return␣of␣GetOptions()␣since␣all␣options␣have␣been
processed.␣The␣only␣exception␣is␣when␣C<-->␣is␣used:

␣␣␣␣--foo␣arg1␣--bar␣arg2␣--␣arg3

This␣will␣call␣the␣callback␣routine␣for␣arg1␣and␣arg2,␣and␣then
terminate␣GetOptions()␣leaving␣C<"arg3">␣in␣C<@ARGV>.

If␣C<require_order>␣is␣enabled,␣options␣processing
terminates␣when␣the␣first␣non-option␣is␣encountered.

␣␣␣␣--foo␣arg1␣--bar␣arg2␣arg3

is␣equivalent␣to

␣␣␣␣--foo␣--␣arg1␣--bar␣arg2␣arg3

If␣C<pass_through>␣is␣also␣enabled,␣options␣processing␣will␣terminate
at␣the␣first␣unrecognized␣option,␣or␣non-option,␣whichever␣comes
first.

=item␣bundling␣(default:␣disabled)

Enabling␣this␣option␣will␣allow␣single-character␣options␣to␣be
bundled.␣To␣distinguish␣bundles␣from␣long␣option␣names,␣long␣options
I<must>␣be␣introduced␣with␣C<-->␣and␣bundles␣with␣C<->.

Note␣that,␣if␣you␣have␣options␣C<a>,␣C<l>␣and␣C<all>,␣and
auto_abbrev␣enabled,␣possible␣arguments␣and␣option␣settings␣are:

␣␣␣␣using␣argument␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣sets␣option(s)
␣␣␣␣------------------------------------------
␣␣␣␣-a,␣--a␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣a
␣␣␣␣-l,␣--l␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣l
␣␣␣␣-al,␣-la,␣-ala,␣-all,...␣␣␣␣␣a,␣l
␣␣␣␣--al,␣--all␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣all

The␣surprising␣part␣is␣that␣C<--a>␣sets␣option␣C<a>␣(due␣to␣auto
completion),␣not␣C<all>.

Note:␣disabling␣C<bundling>␣also␣disables␣C<bundling_override>.

=item␣bundling_override␣(default:␣disabled)

If␣C<bundling_override>␣is␣enabled,␣bundling␣is␣enabled␣as␣with
C<bundling>␣but␣now␣long␣option␣names␣override␣option␣bundles.

Note:␣disabling␣C<bundling_override>␣also␣disables␣C<bundling>.

B<Note:>␣Using␣option␣bundling␣can␣easily␣lead␣to␣unexpected␣results,
especially␣when␣mixing␣long␣options␣and␣bundles.␣Caveat␣emptor.

=item␣ignore_case␣␣(default:␣enabled)

If␣enabled,␣case␣is␣ignored␣when␣matching␣long␣option␣names.␣If,
however,␣bundling␣is␣enabled␣as␣well,␣single␣character␣options␣will␣be
treated␣case-sensitive.

With␣C<ignore_case>,␣option␣specifications␣for␣options␣that␣only
differ␣in␣case,␣e.g.,␣C<"foo">␣and␣C<"Foo">,␣will␣be␣flagged␣as
duplicates.

Note:␣disabling␣C<ignore_case>␣also␣disables␣C<ignore_case_always>.

=item␣ignore_case_always␣(default:␣disabled)

When␣bundling␣is␣in␣effect,␣case␣is␣ignored␣on␣single-character
options␣also.

Note:␣disabling␣C<ignore_case_always>␣also␣disables␣C<ignore_case>.

=item␣auto_version␣(default:disabled)

Automatically␣provide␣support␣for␣the␣B<--version>␣option␣if
the␣application␣did␣not␣specify␣a␣handler␣for␣this␣option␣itself.

Getopt::Long␣will␣provide␣a␣standard␣version␣message␣that␣includes␣the
program␣name,␣its␣version␣(if␣$main::VERSION␣is␣defined),␣and␣the
versions␣of␣Getopt::Long␣and␣Perl.␣The␣message␣will␣be␣written␣to
standard␣output␣and␣processing␣will␣terminate.

C<auto_version>␣will␣be␣enabled␣if␣the␣calling␣program␣explicitly
specified␣a␣version␣number␣higher␣than␣2.32␣in␣the␣C<use>␣or
C<require>␣statement.

=item␣auto_help␣(default:disabled)

Automatically␣provide␣support␣for␣the␣B<--help>␣and␣B<-?>␣options␣if
the␣application␣did␣not␣specify␣a␣handler␣for␣this␣option␣itself.

Getopt::Long␣will␣provide␣a␣help␣message␣using␣module␣L<Pod::Usage>.␣The
message,␣derived␣from␣the␣SYNOPSIS␣POD␣section,␣will␣be␣written␣to
standard␣output␣and␣processing␣will␣terminate.

C<auto_help>␣will␣be␣enabled␣if␣the␣calling␣program␣explicitly
specified␣a␣version␣number␣higher␣than␣2.32␣in␣the␣C<use>␣or
C<require>␣statement.

=item␣pass_through␣(default:␣disabled)

Options␣that␣are␣unknown,␣ambiguous␣or␣supplied␣with␣an␣invalid␣option
value␣are␣passed␣through␣in␣C<@ARGV>␣instead␣of␣being␣flagged␣as
errors.␣This␣makes␣it␣possible␣to␣write␣wrapper␣scripts␣that␣process
only␣part␣of␣the␣user␣supplied␣command␣line␣arguments,␣and␣pass␣the
remaining␣options␣to␣some␣other␣program.

If␣C<require_order>␣is␣enabled,␣options␣processing␣will␣terminate␣at
the␣first␣unrecognized␣option,␣or␣non-option,␣whichever␣comes␣first.
However,␣if␣C<permute>␣is␣enabled␣instead,␣results␣can␣become␣confusing.

Note␣that␣the␣options␣terminator␣(default␣C<-->),␣if␣present,␣will
also␣be␣passed␣through␣in␣C<@ARGV>.

=item␣prefix

The␣string␣that␣starts␣options.␣If␣a␣constant␣string␣is␣not
sufficient,␣see␣C<prefix_pattern>.

=item␣prefix_pattern

A␣Perl␣pattern␣that␣identifies␣the␣strings␣that␣introduce␣options.
Default␣is␣C<--|-|\+>␣unless␣environment␣variable
POSIXLY_CORRECT␣has␣been␣set,␣in␣which␣case␣it␣is␣C<--|->.

=item␣long_prefix_pattern

A␣Perl␣pattern␣that␣allows␣the␣disambiguation␣of␣long␣and␣short
prefixes.␣Default␣is␣C<-->.

Typically␣you␣only␣need␣to␣set␣this␣if␣you␣are␣using␣nonstandard
prefixes␣and␣want␣some␣or␣all␣of␣them␣to␣have␣the␣same␣semantics␣as
'--'␣does␣under␣normal␣circumstances.

For␣example,␣setting␣prefix_pattern␣to␣C<--|-|\+|\/>␣and
long_prefix_pattern␣to␣C<--|\/>␣would␣add␣Win32␣style␣argument
handling.

=item␣debug␣(default:␣disabled)

Enable␣debugging␣output.

=back

=head1␣Exportable␣Methods

=over

=item␣VersionMessage

This␣subroutine␣provides␣a␣standard␣version␣message.␣Its␣argument␣can␣be:

=over␣4

=item␣*

A␣string␣containing␣the␣text␣of␣a␣message␣to␣print␣I<before>␣printing
the␣standard␣message.

=item␣*

A␣numeric␣value␣corresponding␣to␣the␣desired␣exit␣status.

=item␣*

A␣reference␣to␣a␣hash.

=back

If␣more␣than␣one␣argument␣is␣given␣then␣the␣entire␣argument␣list␣is
assumed␣to␣be␣a␣hash.␣␣If␣a␣hash␣is␣supplied␣(either␣as␣a␣reference␣or
as␣a␣list)␣it␣should␣contain␣one␣or␣more␣elements␣with␣the␣following
keys:

=over␣4

=item␣C<-message>

=item␣C<-msg>

The␣text␣of␣a␣message␣to␣print␣immediately␣prior␣to␣printing␣the
program's␣usage␣message.

=item␣C<-exitval>

The␣desired␣exit␣status␣to␣pass␣to␣the␣B<exit()>␣function.
This␣should␣be␣an␣integer,␣or␣else␣the␣string␣"NOEXIT"␣to
indicate␣that␣control␣should␣simply␣be␣returned␣without
terminating␣the␣invoking␣process.

=item␣C<-output>

A␣reference␣to␣a␣filehandle,␣or␣the␣pathname␣of␣a␣file␣to␣which␣the
usage␣message␣should␣be␣written.␣The␣default␣is␣C<\*STDERR>␣unless␣the
exit␣value␣is␣less␣than␣2␣(in␣which␣case␣the␣default␣is␣C<\*STDOUT>).

=back

You␣cannot␣tie␣this␣routine␣directly␣to␣an␣option,␣e.g.:

␣␣␣␣GetOptions("version"␣=>␣\&VersionMessage);

Use␣this␣instead:

␣␣␣␣GetOptions("version"␣=>␣sub␣{␣VersionMessage()␣});

=item␣HelpMessage

This␣subroutine␣produces␣a␣standard␣help␣message,␣derived␣from␣the
program's␣POD␣section␣SYNOPSIS␣using␣L<Pod::Usage>.␣It␣takes␣the␣same
arguments␣as␣VersionMessage().␣In␣particular,␣you␣cannot␣tie␣it
directly␣to␣an␣option,␣e.g.:

␣␣␣␣GetOptions("help"␣=>␣\&HelpMessage);

Use␣this␣instead:

␣␣␣␣GetOptions("help"␣=>␣sub␣{␣HelpMessage()␣});

=back

=head1␣Return␣values␣and␣Errors

Configuration␣errors␣and␣errors␣in␣the␣option␣definitions␣are
signalled␣using␣die()␣and␣will␣terminate␣the␣calling␣program␣unless
the␣call␣to␣Getopt::Long::GetOptions()␣was␣embedded␣in␣C<eval␣{␣...
}>,␣or␣die()␣was␣trapped␣using␣C<$SIG{__DIE__}>.

GetOptions␣returns␣true␣to␣indicate␣success.
It␣returns␣false␣when␣the␣function␣detected␣one␣or␣more␣errors␣during
option␣parsing.␣These␣errors␣are␣signalled␣using␣warn()␣and␣can␣be
trapped␣with␣C<$SIG{__WARN__}>.

=head1␣Legacy

The␣earliest␣development␣of␣C<newgetopt.pl>␣started␣in␣1990,␣with␣Perl
version␣4.␣As␣a␣result,␣its␣development,␣and␣the␣development␣of
Getopt::Long,␣has␣gone␣through␣several␣stages.␣Since␣backward
compatibility␣has␣always␣been␣extremely␣important,␣the␣current␣version
of␣Getopt::Long␣still␣supports␣a␣lot␣of␣constructs␣that␣nowadays␣are
no␣longer␣necessary␣or␣otherwise␣unwanted.␣This␣section␣describes
briefly␣some␣of␣these␣'features'.

=head2␣Default␣destinations

When␣no␣destination␣is␣specified␣for␣an␣option,␣GetOptions␣will␣store
the␣resultant␣value␣in␣a␣global␣variable␣named␣C<opt_>I<XXX>,␣where
I<XXX>␣is␣the␣primary␣name␣of␣this␣option.␣When␣a␣progam␣executes
under␣C<use␣strict>␣(recommended),␣these␣variables␣must␣be
pre-declared␣with␣our()␣or␣C<use␣vars>.

␣␣␣␣our␣$opt_length␣=␣0;
␣␣␣␣GetOptions␣('length=i');	#␣will␣store␣in␣$opt_length

To␣yield␣a␣usable␣Perl␣variable,␣characters␣that␣are␣not␣part␣of␣the
syntax␣for␣variables␣are␣translated␣to␣underscores.␣For␣example,
C<--fpp-struct-return>␣will␣set␣the␣variable
C<$opt_fpp_struct_return>.␣Note␣that␣this␣variable␣resides␣in␣the
namespace␣of␣the␣calling␣program,␣not␣necessarily␣C<main>.␣For
example:

␣␣␣␣GetOptions␣("size=i",␣"sizes=i@");

with␣command␣line␣"-size␣10␣-sizes␣24␣-sizes␣48"␣will␣perform␣the
equivalent␣of␣the␣assignments

␣␣␣␣$opt_size␣=␣10;
␣␣␣␣@opt_sizes␣=␣(24,␣48);

=head2␣Alternative␣option␣starters

A␣string␣of␣alternative␣option␣starter␣characters␣may␣be␣passed␣as␣the
first␣argument␣(or␣the␣first␣argument␣after␣a␣leading␣hash␣reference
argument).

␣␣␣␣my␣$len␣=␣0;
␣␣␣␣GetOptions␣('/',␣'length=i'␣=>␣$len);

Now␣the␣command␣line␣may␣look␣like:

␣␣␣␣/length␣24␣--␣arg

Note␣that␣to␣terminate␣options␣processing␣still␣requires␣a␣double␣dash
C<-->.

GetOptions()␣will␣not␣interpret␣a␣leading␣C<<␣"<>"␣>>␣as␣option␣starters
if␣the␣next␣argument␣is␣a␣reference.␣To␣force␣C<<␣"<"␣>>␣and␣C<<␣">"␣>>␣as
option␣starters,␣use␣C<<␣"><"␣>>.␣Confusing?␣Well,␣B<using␣a␣starter
argument␣is␣strongly␣deprecated>␣anyway.

=head2␣Configuration␣variables

Previous␣versions␣of␣Getopt::Long␣used␣variables␣for␣the␣purpose␣of
configuring.␣Although␣manipulating␣these␣variables␣still␣work,␣it␣is
strongly␣encouraged␣to␣use␣the␣C<Configure>␣routine␣that␣was␣introduced
in␣version␣2.17.␣Besides,␣it␣is␣much␣easier.

=head1␣Tips␣and␣Techniques

=head2␣Pushing␣multiple␣values␣in␣a␣hash␣option

Sometimes␣you␣want␣to␣combine␣the␣best␣of␣hashes␣and␣arrays.␣For
example,␣the␣command␣line:

␣␣--list␣add=first␣--list␣add=second␣--list␣add=third

where␣each␣successive␣'list␣add'␣option␣will␣push␣the␣value␣of␣add
into␣array␣ref␣$list->{'add'}.␣The␣result␣would␣be␣like

␣␣$list->{add}␣=␣[qw(first␣second␣third)];

This␣can␣be␣accomplished␣with␣a␣destination␣routine:

␣␣GetOptions('list=s%'␣=>
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣sub␣{␣push(@{$list{$_[1]}},␣$_[2])␣});

=head1␣Troubleshooting

=head2␣GetOptions␣does␣not␣return␣a␣false␣result␣when␣an␣option␣is␣not␣supplied

That's␣why␣they're␣called␣'options'.

=head2␣GetOptions␣does␣not␣split␣the␣command␣line␣correctly

The␣command␣line␣is␣not␣split␣by␣GetOptions,␣but␣by␣the␣command␣line
interpreter␣(CLI).␣On␣Unix,␣this␣is␣the␣shell.␣On␣Windows,␣it␣is
COMMAND.COM␣or␣CMD.EXE.␣Other␣operating␣systems␣have␣other␣CLIs.

It␣is␣important␣to␣know␣that␣these␣CLIs␣may␣behave␣different␣when␣the
command␣line␣contains␣special␣characters,␣in␣particular␣quotes␣or
backslashes.␣For␣example,␣with␣Unix␣shells␣you␣can␣use␣single␣quotes
(C<'>)␣and␣double␣quotes␣(C<">)␣to␣group␣words␣together.␣The␣following
alternatives␣are␣equivalent␣on␣Unix:

␣␣␣␣"two␣words"
␣␣␣␣'two␣words'
␣␣␣␣two\␣words

In␣case␣of␣doubt,␣insert␣the␣following␣statement␣in␣front␣of␣your␣Perl
program:

␣␣␣␣print␣STDERR␣(join("|",@ARGV),"\n");

to␣verify␣how␣your␣CLI␣passes␣the␣arguments␣to␣the␣program.

=head2␣Undefined␣subroutine␣&main::GetOptions␣called

Are␣you␣running␣Windows,␣and␣did␣you␣write

␣␣␣␣use␣GetOpt::Long;

(note␣the␣capital␣'O')?

=head2␣How␣do␣I␣put␣a␣"-?"␣option␣into␣a␣Getopt::Long?

You␣can␣only␣obtain␣this␣using␣an␣alias,␣and␣Getopt::Long␣of␣at␣least
version␣2.13.

␣␣␣␣use␣Getopt::Long;
␣␣␣␣GetOptions␣("help|?");␣␣␣␣#␣-help␣and␣-?␣will␣both␣set␣$opt_help

=head1␣AUTHOR

Johan␣Vromans␣<jvromans@squirrel.nl>

=head1␣COPYRIGHT␣AND␣DISCLAIMER

This␣program␣is␣Copyright␣1990,2009␣by␣Johan␣Vromans.
This␣program␣is␣free␣software;␣you␣can␣redistribute␣it␣and/or
modify␣it␣under␣the␣terms␣of␣the␣Perl␣Artistic␣License␣or␣the
GNU␣General␣Public␣License␣as␣published␣by␣the␣Free␣Software
Foundation;␣either␣version␣2␣of␣the␣License,␣or␣(at␣your␣option)␣any
later␣version.

This␣program␣is␣distributed␣in␣the␣hope␣that␣it␣will␣be␣useful,
but␣WITHOUT␣ANY␣WARRANTY;␣without␣even␣the␣implied␣warranty␣of
MERCHANTABILITY␣or␣FITNESS␣FOR␣A␣PARTICULAR␣PURPOSE.␣␣See␣the
GNU␣General␣Public␣License␣for␣more␣details.

If␣you␣do␣not␣have␣a␣copy␣of␣the␣GNU␣General␣Public␣License␣write␣to
the␣Free␣Software␣Foundation,␣Inc.,␣675␣Mass␣Ave,␣Cambridge,
MA␣02139,␣USA.

=cut
----------
Range: (2909524,2912624) (3100)
=head1␣NAME

getopt,␣getopts␣-␣Process␣single-character␣switches␣with␣switch␣clustering

=head1␣SYNOPSIS

␣␣␣␣use␣Getopt::Std;

␣␣␣␣getopt('oDI');␣␣␣␣#␣-o,␣-D␣&␣-I␣take␣arg.␣␣Sets␣$opt_*␣as␣a␣side␣effect.
␣␣␣␣getopt('oDI',␣\%opts);␣␣␣␣#␣-o,␣-D␣&␣-I␣take␣arg.␣␣Values␣in␣%opts
␣␣␣␣getopts('oif:');␣␣#␣-o␣&␣-i␣are␣boolean␣flags,␣-f␣takes␣an␣argument
		␣␣␣␣␣␣#␣Sets␣$opt_*␣as␣a␣side␣effect.
␣␣␣␣getopts('oif:',␣\%opts);␣␣#␣options␣as␣above.␣Values␣in␣%opts

=head1␣DESCRIPTION

The␣getopt()␣function␣processes␣single-character␣switches␣with␣switch
clustering.␣␣Pass␣one␣argument␣which␣is␣a␣string␣containing␣all␣switches
that␣take␣an␣argument.␣␣For␣each␣switch␣found,␣sets␣$opt_x␣(where␣x␣is␣the
switch␣name)␣to␣the␣value␣of␣the␣argument␣if␣an␣argument␣is␣expected,
or␣1␣otherwise.␣␣Switches␣which␣take␣an␣argument␣don't␣care␣whether
there␣is␣a␣space␣between␣the␣switch␣and␣the␣argument.

The␣getopts()␣function␣is␣similar,␣but␣you␣should␣pass␣to␣it␣the␣list␣of␣all
switches␣to␣be␣recognized.␣␣If␣unspecified␣switches␣are␣found␣on␣the
command-line,␣the␣user␣will␣be␣warned␣that␣an␣unknown␣option␣was␣given.
The␣getopts()␣function␣returns␣true␣unless␣an␣invalid␣option␣was␣found.

Note␣that,␣if␣your␣code␣is␣running␣under␣the␣recommended␣C<use␣strict
'vars'>␣pragma,␣you␣will␣need␣to␣declare␣these␣package␣variables
with␣"our":

␣␣␣␣our($opt_x,␣$opt_y);

For␣those␣of␣you␣who␣don't␣like␣additional␣global␣variables␣being␣created,␣getopt()
and␣getopts()␣will␣also␣accept␣a␣hash␣reference␣as␣an␣optional␣second␣argument.␣
Hash␣keys␣will␣be␣x␣(where␣x␣is␣the␣switch␣name)␣with␣key␣values␣the␣value␣of
the␣argument␣or␣1␣if␣no␣argument␣is␣specified.

To␣allow␣programs␣to␣process␣arguments␣that␣look␣like␣switches,␣but␣aren't,
both␣functions␣will␣stop␣processing␣switches␣when␣they␣see␣the␣argument
C<-->.␣␣The␣C<-->␣will␣be␣removed␣from␣@ARGV.

=head1␣C<--help>␣and␣C<--version>

If␣C<->␣is␣not␣a␣recognized␣switch␣letter,␣getopts()␣supports␣arguments
C<--help>␣and␣C<--version>.␣␣If␣C<main::HELP_MESSAGE()>␣and/or
C<main::VERSION_MESSAGE()>␣are␣defined,␣they␣are␣called;␣the␣arguments␣are
the␣output␣file␣handle,␣the␣name␣of␣option-processing␣package,␣its␣version,
and␣the␣switches␣string.␣␣If␣the␣subroutines␣are␣not␣defined,␣an␣attempt␣is
made␣to␣generate␣intelligent␣messages;␣for␣best␣results,␣define␣$main::VERSION.

If␣embedded␣documentation␣(in␣pod␣format,␣see␣L<perlpod>)␣is␣detected
in␣the␣script,␣C<--help>␣will␣also␣show␣how␣to␣access␣the␣documentation.

Note␣that␣due␣to␣excessive␣paranoia,␣if␣$Getopt::Std::STANDARD_HELP_VERSION
isn't␣true␣(the␣default␣is␣false),␣then␣the␣messages␣are␣printed␣on␣STDERR,
and␣the␣processing␣continues␣after␣the␣messages␣are␣printed.␣␣This␣being
the␣opposite␣of␣the␣standard-conforming␣behaviour,␣it␣is␣strongly␣recommended
to␣set␣$Getopt::Std::STANDARD_HELP_VERSION␣to␣true.

One␣can␣change␣the␣output␣file␣handle␣of␣the␣messages␣by␣setting
$Getopt::Std::OUTPUT_HELP_VERSION.␣␣One␣can␣print␣the␣messages␣of␣C<--help>
(without␣the␣C<Usage:>␣line)␣and␣C<--version>␣by␣calling␣functions␣help_mess()
and␣version_mess()␣with␣the␣switches␣string␣as␣an␣argument.

=cut
----------
Range: (2927215,2932209) (4994)
=head1␣NAME

B::Lint␣-␣Perl␣lint

=head1␣SYNOPSIS

perl␣-MO=Lint[,OPTIONS]␣foo.pl

=head1␣DESCRIPTION

The␣B::Lint␣module␣is␣equivalent␣to␣an␣extended␣version␣of␣the␣B<-w>
option␣of␣B<perl>.␣It␣is␣named␣after␣the␣program␣F<lint>␣which␣carries
out␣a␣similar␣process␣for␣C␣programs.

=head1␣OPTIONS␣AND␣LINT␣CHECKS

Option␣words␣are␣separated␣by␣commas␣(not␣whitespace)␣and␣follow␣the
usual␣conventions␣of␣compiler␣backend␣options.␣Following␣any␣options
(indicated␣by␣a␣leading␣B<->)␣come␣lint␣check␣arguments.␣Each␣such
argument␣(apart␣from␣the␣special␣B<all>␣and␣B<none>␣options)␣is␣a
word␣representing␣one␣possible␣lint␣check␣(turning␣on␣that␣check)␣or
is␣B<no-foo>␣(turning␣off␣that␣check).␣Before␣processing␣the␣check
arguments,␣a␣standard␣list␣of␣checks␣is␣turned␣on.␣Later␣options
override␣earlier␣ones.␣Available␣options␣are:

=over␣8

=item␣B<magic-diamond>

Produces␣a␣warning␣whenever␣the␣magic␣C<E<lt>E<gt>>␣readline␣is
used.␣Internally␣it␣uses␣perl's␣two-argument␣open␣which␣itself␣treats
filenames␣with␣special␣characters␣specially.␣This␣could␣allow
interestingly␣named␣files␣to␣have␣unexpected␣effects␣when␣reading.

␣␣%␣touch␣'rm␣*|'
␣␣%␣perl␣-pe␣1

The␣above␣creates␣a␣file␣named␣C<rm␣*|>.␣When␣perl␣opens␣it␣with
C<E<lt>E<gt>>␣it␣actually␣executes␣the␣shell␣program␣C<rm␣*>.␣This
makes␣C<E<lt>E<gt>>␣dangerous␣to␣use␣carelessly.

=item␣B<context>

Produces␣a␣warning␣whenever␣an␣array␣is␣used␣in␣an␣implicit␣scalar
context.␣For␣example,␣both␣of␣the␣lines

␣␣␣␣$foo␣=␣length(@bar);
␣␣␣␣$foo␣=␣@bar;

will␣elicit␣a␣warning.␣Using␣an␣explicit␣B<scalar()>␣silences␣the
warning.␣For␣example,

␣␣␣␣$foo␣=␣scalar(@bar);

=item␣B<implicit-read>␣and␣B<implicit-write>

These␣options␣produce␣a␣warning␣whenever␣an␣operation␣implicitly
reads␣or␣(respectively)␣writes␣to␣one␣of␣Perl's␣special␣variables.
For␣example,␣B<implicit-read>␣will␣warn␣about␣these:

␣␣␣␣/foo/;

and␣B<implicit-write>␣will␣warn␣about␣these:

␣␣␣␣s/foo/bar/;

Both␣B<implicit-read>␣and␣B<implicit-write>␣warn␣about␣this:

␣␣␣␣for␣(@a)␣{␣...␣}

=item␣B<bare-subs>

This␣option␣warns␣whenever␣a␣bareword␣is␣implicitly␣quoted,␣but␣is␣also
the␣name␣of␣a␣subroutine␣in␣the␣current␣package.␣Typical␣mistakes␣that␣it␣will
trap␣are:

␣␣␣␣use␣constant␣foo␣=>␣'bar';
␣␣␣␣@a␣=␣(␣foo␣=>␣1␣);
␣␣␣␣$b{foo}␣=␣2;

Neither␣of␣these␣will␣do␣what␣a␣naive␣user␣would␣expect.

=item␣B<dollar-underscore>

This␣option␣warns␣whenever␣C<$_>␣is␣used␣either␣explicitly␣anywhere␣or
as␣the␣implicit␣argument␣of␣a␣B<print>␣statement.

=item␣B<private-names>

This␣option␣warns␣on␣each␣use␣of␣any␣variable,␣subroutine␣or
method␣name␣that␣lives␣in␣a␣non-current␣package␣but␣begins␣with
an␣underscore␣("_").␣Warnings␣aren't␣issued␣for␣the␣special␣case
of␣the␣single␣character␣name␣"_"␣by␣itself␣(e.g.␣C<$_>␣and␣C<@_>).

=item␣B<undefined-subs>

This␣option␣warns␣whenever␣an␣undefined␣subroutine␣is␣invoked.
This␣option␣will␣only␣catch␣explicitly␣invoked␣subroutines␣such
as␣C<foo()>␣and␣not␣indirect␣invocations␣such␣as␣C<&$subref()>
or␣C<$obj-E<gt>meth()>.␣Note␣that␣some␣programs␣or␣modules␣delay
definition␣of␣subs␣until␣runtime␣by␣means␣of␣the␣AUTOLOAD
mechanism.

=item␣B<regexp-variables>

This␣option␣warns␣whenever␣one␣of␣the␣regexp␣variables␣C<$`>,␣C<$&>␣or␣C<$'>
is␣used.␣Any␣occurrence␣of␣any␣of␣these␣variables␣in␣your
program␣can␣slow␣your␣whole␣program␣down.␣See␣L<perlre>␣for
details.

=item␣B<all>

Turn␣all␣warnings␣on.

=item␣B<none>

Turn␣all␣warnings␣off.

=back

=head1␣NON␣LINT-CHECK␣OPTIONS

=over␣8

=item␣B<-u␣Package>

Normally,␣Lint␣only␣checks␣the␣main␣code␣of␣the␣program␣together
with␣all␣subs␣defined␣in␣package␣main.␣The␣B<-u>␣option␣lets␣you
include␣other␣package␣names␣whose␣subs␣are␣then␣checked␣by␣Lint.

=back

=head1␣EXTENDING␣LINT

Lint␣can␣be␣extended␣by␣with␣plugins.␣Lint␣uses␣L<Module::Pluggable>
to␣find␣available␣plugins.␣Plugins␣are␣expected␣but␣not␣required␣to
inform␣Lint␣of␣which␣checks␣they␣are␣adding.

The␣C<<␣B::Lint->register_plugin(␣MyPlugin␣=>␣\@new_checks␣)␣>>␣method
adds␣the␣list␣of␣C<@new_checks>␣to␣the␣list␣of␣valid␣checks.␣If␣your
module␣wasn't␣loaded␣by␣L<Module::Pluggable>␣then␣your␣class␣name␣is
added␣to␣the␣list␣of␣plugins.

You␣must␣create␣a␣C<match(␣\%checks␣)>␣method␣in␣your␣plugin␣class␣or␣one
of␣its␣parents.␣It␣will␣be␣called␣on␣every␣op␣as␣a␣regular␣method␣call
with␣a␣hash␣ref␣of␣checks␣as␣its␣parameter.

The␣class␣methods␣C<<␣B::Lint->file␣>>␣and␣C<<␣B::Lint->line␣>>␣contain
the␣current␣filename␣and␣line␣number.

␣␣package␣Sample;
␣␣use␣B::Lint;
␣␣B::Lint->register_plugin(␣Sample␣=>␣[␣'good_taste'␣]␣);
␣␣
␣␣sub␣match␣{
␣␣␣␣␣␣my␣(␣$op,␣$checks_href␣)␣=␣shift␣@_;
␣␣␣␣␣␣if␣(␣$checks_href->{good_taste}␣)␣{
␣␣␣␣␣␣␣␣␣␣...
␣␣␣␣␣␣}
␣␣}

=head1␣TODO

=over

=item␣while(<FH>)␣stomps␣$_

=item␣strict␣oo

=item␣unchecked␣system␣calls

=item␣more␣tests,␣validate␣against␣older␣perls

=back

=head1␣BUGS

This␣is␣only␣a␣very␣preliminary␣version.

=head1␣AUTHOR

Malcolm␣Beattie,␣mbeattie@sable.ox.ac.uk.

=head1␣ACKNOWLEDGEMENTS

Sebastien␣Aperghis-Tramoni␣-␣bug␣fixes

=cut
----------
Range: (3134322,3137414) (3092)
=head1␣NAME

integer␣-␣Perl␣pragma␣to␣use␣integer␣arithmetic␣instead␣of␣floating␣point

=head1␣SYNOPSIS

␣␣␣␣use␣integer;
␣␣␣␣$x␣=␣10/3;
␣␣␣␣#␣$x␣is␣now␣3,␣not␣3.33333333333333333

=head1␣DESCRIPTION

This␣tells␣the␣compiler␣to␣use␣integer␣operations␣from␣here␣to␣the␣end
of␣the␣enclosing␣BLOCK.␣␣On␣many␣machines,␣this␣doesn't␣matter␣a␣great
deal␣for␣most␣computations,␣but␣on␣those␣without␣floating␣point
hardware,␣it␣can␣make␣a␣big␣difference␣in␣performance.

Note␣that␣this␣only␣affects␣how␣most␣of␣the␣arithmetic␣and␣relational
B<operators>␣handle␣their␣operands␣and␣results,␣and␣B<not>␣how␣all
numbers␣everywhere␣are␣treated.␣␣Specifically,␣C<use␣integer;>␣has␣the
effect␣that␣before␣computing␣the␣results␣of␣the␣arithmetic␣operators
(+,␣-,␣*,␣/,␣%,␣+=,␣-=,␣*=,␣/=,␣%=,␣and␣unary␣minus),␣the␣comparison
operators␣(<,␣<=,␣>,␣>=,␣==,␣!=,␣<=>),␣and␣the␣bitwise␣operators␣(|,␣&,
^,␣<<,␣>>,␣|=,␣&=,␣^=,␣<<=,␣>>=),␣the␣operands␣have␣their␣fractional
portions␣truncated␣(or␣floored),␣and␣the␣result␣will␣have␣its
fractional␣portion␣truncated␣as␣well.␣␣In␣addition,␣the␣range␣of
operands␣and␣results␣is␣restricted␣to␣that␣of␣familiar␣two's␣complement
integers,␣i.e.,␣-(2**31)␣..␣(2**31-1)␣on␣32-bit␣architectures,␣and
-(2**63)␣..␣(2**63-1)␣on␣64-bit␣architectures.␣␣For␣example,␣this␣code

␣␣␣␣use␣integer;
␣␣␣␣$x␣=␣5.8;
␣␣␣␣$y␣=␣2.5;
␣␣␣␣$z␣=␣2.7;
␣␣␣␣$a␣=␣2**31␣-␣1;␣␣#␣Largest␣positive␣integer␣on␣32-bit␣machines
␣␣␣␣$,␣=␣",␣";
␣␣␣␣print␣$x,␣-$x,␣$x␣+␣$y,␣$x␣-␣$y,␣$x␣/␣$y,␣$x␣*␣$y,␣$y␣==␣$z,␣$a,␣$a␣+␣1;

will␣print:␣␣5.8,␣-5,␣7,␣3,␣2,␣10,␣1,␣2147483647,␣-2147483648

Note␣that␣$x␣is␣still␣printed␣as␣having␣its␣true␣non-integer␣value␣of
5.8␣since␣it␣wasn't␣operated␣on.␣␣And␣note␣too␣the␣wrap-around␣from␣the
largest␣positive␣integer␣to␣the␣largest␣negative␣one.␣␣␣Also,␣arguments
passed␣to␣functions␣and␣the␣values␣returned␣by␣them␣are␣B<not>␣affected
by␣C<use␣integer;>.␣␣E.g.,

␣␣␣␣srand(1.5);
␣␣␣␣$,␣=␣",␣";
␣␣␣␣print␣sin(.5),␣cos(.5),␣atan2(1,2),␣sqrt(2),␣rand(10);

will␣give␣the␣same␣result␣with␣or␣without␣C<use␣integer;>␣␣The␣power
operator␣C<**>␣is␣also␣not␣affected,␣so␣that␣2␣**␣.5␣is␣always␣the
square␣root␣of␣2.␣␣Now,␣it␣so␣happens␣that␣the␣pre-␣and␣post-␣increment
and␣decrement␣operators,␣++␣and␣--,␣are␣not␣affected␣by␣C<use␣integer;>
either.␣␣Some␣may␣rightly␣consider␣this␣to␣be␣a␣bug␣--␣but␣at␣least␣it's
a␣long-standing␣one.

Finally,␣C<use␣integer;>␣also␣has␣an␣additional␣affect␣on␣the␣bitwise
operators.␣␣Normally,␣the␣operands␣and␣results␣are␣treated␣as
B<unsigned>␣integers,␣but␣with␣C<use␣integer;>␣the␣operands␣and␣results
are␣B<signed>.␣␣This␣means,␣among␣other␣things,␣that␣~0␣is␣-1,␣and␣-2␣&
-5␣is␣-6.

Internally,␣native␣integer␣arithmetic␣(as␣provided␣by␣your␣C␣compiler)
is␣used.␣␣This␣means␣that␣Perl's␣own␣semantics␣for␣arithmetic
operations␣may␣not␣be␣preserved.␣␣One␣common␣source␣of␣trouble␣is␣the
modulus␣of␣negative␣numbers,␣which␣Perl␣does␣one␣way,␣but␣your␣hardware
may␣do␣another.

␣␣␣␣%␣perl␣-le␣'print␣(4␣%␣-3)'
␣␣␣␣-2
␣␣␣␣%␣perl␣-Minteger␣-le␣'print␣(4␣%␣-3)'
␣␣␣␣1

See␣L<perlmodlib/"Pragmatic␣Modules">,␣L<perlop/"Integer␣Arithmetic">

=cut
----------
Range: (3167164,3177275) (10111)
=head1␣NAME

autodie::hints␣-␣Provide␣hints␣about␣user␣subroutines␣to␣autodie

=head1␣SYNOPSIS

␣␣␣␣package␣Your::Module;

␣␣␣␣our␣%DOES␣=␣(␣'autodie::hints::provider'␣=>␣1␣);

␣␣␣␣sub␣AUTODIE_HINTS␣{
␣␣␣␣␣␣␣␣return␣{
␣␣␣␣␣␣␣␣␣␣␣␣foo␣=>␣{␣scalar␣=>␣HINTS,␣list␣=>␣SOME_HINTS␣},
␣␣␣␣␣␣␣␣␣␣␣␣bar␣=>␣{␣scalar␣=>␣HINTS,␣list␣=>␣MORE_HINTS␣},
␣␣␣␣␣␣␣␣}
␣␣␣␣}

␣␣␣␣#␣Later,␣in␣your␣main␣program...

␣␣␣␣use␣Your::Module␣qw(foo␣bar);
␣␣␣␣use␣autodie␣␣␣␣␣␣qw(:default␣foo␣bar);

␣␣␣␣foo();␣␣␣␣␣␣␣␣␣#␣succeeds␣or␣dies␣based␣on␣scalar␣hints

␣␣␣␣#␣Alternatively,␣hints␣can␣be␣set␣on␣subroutines␣we've
␣␣␣␣#␣imported.

␣␣␣␣use␣autodie::hints;
␣␣␣␣use␣Some::Module␣qw(think_positive);

␣␣␣␣BEGIN␣{
␣␣␣␣␣␣␣␣autodie::hints->set_hints_for(
␣␣␣␣␣␣␣␣␣␣␣␣\&think_positive,
␣␣␣␣␣␣␣␣␣␣␣␣{
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣fail␣=>␣sub␣{␣$_[0]␣<=␣0␣}
␣␣␣␣␣␣␣␣␣␣␣␣}
␣␣␣␣␣␣␣␣)
␣␣␣␣}
␣␣␣␣use␣autodie␣qw(think_positive);

␣␣␣␣think_positive(...);␣␣␣␣#␣Returns␣positive␣or␣dies.


=head1␣DESCRIPTION

=head2␣Introduction

The␣L<autodie>␣pragma␣is␣very␣smart␣when␣it␣comes␣to␣working␣with
Perl's␣built-in␣functions.␣␣The␣behaviour␣for␣these␣functions␣are
fixed,␣and␣C<autodie>␣knows␣exactly␣how␣they␣try␣to␣signal␣failure.

But␣what␣about␣user-defined␣subroutines␣from␣modules?␣␣If␣you␣use
C<autodie>␣on␣a␣user-defined␣subroutine␣then␣it␣assumes␣the␣following
behaviour␣to␣demonstrate␣failure:

=over

=item␣*

A␣false␣value,␣in␣scalar␣context

=item␣*␣

An␣empty␣list,␣in␣list␣context

=item␣*

A␣list␣containing␣a␣single␣undef,␣in␣list␣context

=back

All␣other␣return␣values␣(including␣the␣list␣of␣the␣single␣zero,␣and␣the
list␣containing␣a␣single␣empty␣string)␣are␣considered␣successful.␣␣However,
real-world␣code␣isn't␣always␣that␣easy.␣␣Perhaps␣the␣code␣you're␣working
with␣returns␣a␣string␣containing␣the␣word␣"FAIL"␣upon␣failure,␣or␣a
two␣element␣list␣containing␣C<(undef,␣"human␣error␣message")>.␣␣To␣make
autodie␣work␣with␣these␣sorts␣of␣subroutines,␣we␣have
the␣I<hinting␣interface>.

The␣hinting␣interface␣allows␣I<hints>␣to␣be␣provided␣to␣C<autodie>
on␣how␣it␣should␣detect␣failure␣from␣user-defined␣subroutines.␣␣While
these␣I<can>␣be␣provided␣by␣the␣end-user␣of␣C<autodie>,␣they␣are␣ideally
written␣into␣the␣module␣itself,␣or␣into␣a␣helper␣module␣or␣sub-class
of␣C<autodie>␣itself.

=head2␣What␣are␣hints?

A␣I<hint>␣is␣a␣subroutine␣or␣value␣that␣is␣checked␣against␣the
return␣value␣of␣an␣autodying␣subroutine.␣␣If␣the␣match␣returns␣true,
C<autodie>␣considers␣the␣subroutine␣to␣have␣failed.

If␣the␣hint␣provided␣is␣a␣subroutine,␣then␣C<autodie>␣will␣pass
the␣complete␣return␣value␣to␣that␣subroutine.␣␣If␣the␣hint␣is
any␣other␣value,␣then␣C<autodie>␣will␣smart-match␣against␣the
value␣provided.␣␣In␣Perl␣5.8.x␣there␣is␣no␣smart-match␣operator,␣and␣as␣such
only␣subroutine␣hints␣are␣supported␣in␣these␣versions.

Hints␣can␣be␣provided␣for␣both␣scalar␣and␣list␣contexts.␣␣Note
that␣an␣autodying␣subroutine␣will␣never␣see␣a␣void␣context,␣as
C<autodie>␣always␣needs␣to␣capture␣the␣return␣value␣for␣examination.
Autodying␣subroutines␣called␣in␣void␣context␣act␣as␣if␣they're␣called
in␣a␣scalar␣context,␣but␣their␣return␣value␣is␣discarded␣after␣it
has␣been␣checked.

=head2␣Example␣hints

Hints␣may␣consist␣of␣scalars,␣array␣references,␣regular␣expressions␣and
subroutine␣references.␣␣You␣can␣specify␣different␣hints␣for␣how
failure␣should␣be␣identified␣in␣scalar␣and␣list␣contexts.

These␣examples␣apply␣for␣use␣in␣the␣C<AUTODIE_HINTS>␣subroutine␣and␣when
calling␣C<autodie::hints->set_hints_for()>.

The␣most␣common␣context-specific␣hints␣are:

␣␣␣␣␣␣␣␣#␣Scalar␣failures␣always␣return␣undef:
␣␣␣␣␣␣␣␣␣␣␣␣{␣␣scalar␣=>␣undef␣␣}

␣␣␣␣␣␣␣␣#␣Scalar␣failures␣return␣any␣false␣value␣[default␣expectation]:
␣␣␣␣␣␣␣␣␣␣␣␣{␣␣scalar␣=>␣sub␣{␣!␣$_[0]␣}␣␣}

␣␣␣␣␣␣␣␣#␣Scalar␣failures␣always␣return␣zero␣explicitly:
␣␣␣␣␣␣␣␣␣␣␣␣{␣␣scalar␣=>␣'0'␣␣}

␣␣␣␣␣␣␣␣#␣List␣failures␣always␣return␣an␣empty␣list:
␣␣␣␣␣␣␣␣␣␣␣␣{␣␣list␣=>␣[]␣␣}

␣␣␣␣␣␣␣␣#␣List␣failures␣return␣()␣or␣(undef)␣[default␣expectation]:
␣␣␣␣␣␣␣␣␣␣␣␣{␣␣list␣=>␣sub␣{␣!␣@_␣||␣@_␣==␣1␣&&␣!defined␣$_[0]␣}␣␣}

␣␣␣␣␣␣␣␣#␣List␣failures␣return␣()␣or␣a␣single␣false␣value:
␣␣␣␣␣␣␣␣␣␣␣␣{␣␣list␣=>␣sub␣{␣!␣@_␣||␣@_␣==␣1␣&&␣!$_[0]␣}␣␣}

␣␣␣␣␣␣␣␣#␣List␣failures␣return␣(undef,␣"some␣string")
␣␣␣␣␣␣␣␣␣␣␣␣{␣␣list␣=>␣sub␣{␣@_␣==␣2␣&&␣!defined␣$_[0]␣}␣␣}

␣␣␣␣␣␣␣␣#␣Unsuccessful␣foo()␣returns␣'FAIL'␣or␣'_FAIL'␣in␣scalar␣context,
␣␣␣␣␣␣␣␣#␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣returns␣(-1)␣in␣list␣context...
␣␣␣␣␣␣␣␣autodie::hints->set_hints_for(
␣␣␣␣␣␣␣␣␣␣␣␣\&foo,
␣␣␣␣␣␣␣␣␣␣␣␣{
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣scalar␣=>␣qr/^␣_?␣FAIL␣$/xms,
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣list␣␣␣=>␣[-1],
␣␣␣␣␣␣␣␣␣␣␣␣}
␣␣␣␣␣␣␣␣);

␣␣␣␣␣␣␣␣#␣Unsuccessful␣foo()␣returns␣0␣in␣all␣contexts...
␣␣␣␣␣␣␣␣autodie::hints->set_hints_for(
␣␣␣␣␣␣␣␣␣␣␣␣\&foo,
␣␣␣␣␣␣␣␣␣␣␣␣{
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣scalar␣=>␣0,
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣list␣␣␣=>␣[0],
␣␣␣␣␣␣␣␣␣␣␣␣}
␣␣␣␣␣␣␣␣);

This␣"in␣all␣contexts"␣construction␣is␣very␣common,␣and␣can␣be
abbreviated,␣using␣the␣'fail'␣key.␣␣This␣sets␣both␣the␣C<scalar>
and␣C<list>␣hints␣to␣the␣same␣value:

␣␣␣␣␣␣␣␣#␣Unsuccessful␣foo()␣returns␣0␣in␣all␣contexts...
␣␣␣␣␣␣␣␣autodie::hints->set_hints_for(
␣␣␣␣␣␣␣␣␣␣␣␣\&foo,
␣␣␣␣␣␣␣␣␣␣␣␣{
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣fail␣=>␣sub␣{␣@_␣==␣1␣and␣defined␣$_[0]␣and␣$_[0]␣==␣0␣}
␣␣␣␣␣␣␣␣␣␣␣␣}
	);

␣␣␣␣␣␣␣␣#␣Unsuccessful␣think_positive()␣returns␣negative␣number␣on␣failure...
␣␣␣␣␣␣␣␣autodie::hints->set_hints_for(
␣␣␣␣␣␣␣␣␣␣␣␣\&think_positive,
␣␣␣␣␣␣␣␣␣␣␣␣{
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣fail␣=>␣sub␣{␣$_[0]␣<␣0␣}
␣␣␣␣␣␣␣␣␣␣␣␣}
	);

␣␣␣␣␣␣␣␣#␣Unsuccessful␣my_system()␣returns␣non-zero␣on␣failure...
␣␣␣␣␣␣␣␣autodie::hints->set_hints_for(
␣␣␣␣␣␣␣␣␣␣␣␣\&my_system,
␣␣␣␣␣␣␣␣␣␣␣␣{
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣fail␣=>␣sub␣{␣$_[0]␣!=␣0␣}
␣␣␣␣␣␣␣␣␣␣␣␣}
	);

=head1␣Manually␣setting␣hints␣from␣within␣your␣program

If␣you␣are␣using␣a␣module␣which␣returns␣something␣special␣on␣failure,␣then
you␣can␣manually␣create␣hints␣for␣each␣of␣the␣desired␣subroutines.␣␣Once
the␣hints␣are␣specified,␣they␣are␣available␣for␣all␣files␣and␣modules␣loaded
thereafter,␣thus␣you␣can␣move␣this␣work␣into␣a␣module␣and␣it␣will␣still
work.

	use␣Some::Module␣qw(foo␣bar);
	use␣autodie::hints;

	autodie::hints->set_hints_for(
		\&foo,
		{
			scalar␣=>␣SCALAR_HINT,
			list␣␣␣=>␣LIST_HINT,
		}
	);
	autodie::hints->set_hints_for(
		\&bar,
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣{␣fail␣=>␣SOME_HINT,␣}
	);

It␣is␣possible␣to␣pass␣either␣a␣subroutine␣reference␣(recommended)␣or␣a␣fully
qualified␣subroutine␣name␣as␣the␣first␣argument.␣␣This␣means␣you␣can␣set␣hints
on␣modules␣that␣I<might>␣get␣loaded:

	use␣autodie::hints;
	autodie::hints->set_hints_for(
		'Some::Module:bar',␣{␣fail␣=>␣SCALAR_HINT,␣}
	);

This␣technique␣is␣most␣useful␣when␣you␣have␣a␣project␣that␣uses␣a
lot␣of␣third-party␣modules.␣␣You␣can␣define␣all␣your␣possible␣hints
in␣one-place.␣␣This␣can␣even␣be␣in␣a␣sub-class␣of␣autodie.␣␣For
example:

␣␣␣␣␣␣␣␣package␣my::autodie;

␣␣␣␣␣␣␣␣use␣parent␣qw(autodie);
␣␣␣␣␣␣␣␣use␣autodie::hints;

␣␣␣␣␣␣␣␣autodie::hints->set_hints_for(...);

␣␣␣␣␣␣␣␣1;

You␣can␣now␣C<use␣my::autodie>,␣which␣will␣work␣just␣like␣the␣standard
C<autodie>,␣but␣is␣now␣aware␣of␣any␣hints␣that␣you've␣set.

=head1␣Adding␣hints␣to␣your␣module

C<autodie>␣provides␣a␣passive␣interface␣to␣allow␣you␣to␣declare␣hints␣for
your␣module.␣␣These␣hints␣will␣be␣found␣and␣used␣by␣C<autodie>␣if␣it
is␣loaded,␣but␣otherwise␣have␣no␣effect␣(or␣dependencies)␣without␣autodie.
To␣set␣these,␣your␣module␣needs␣to␣declare␣that␣it␣I<does>␣the
C<autodie::hints::provider>␣role.␣␣This␣can␣be␣done␣by␣writing␣your
own␣C<DOES>␣method,␣using␣a␣system␣such␣as␣C<Class::DOES>␣to␣handle
the␣heavy-lifting␣for␣you,␣or␣declaring␣a␣C<%DOES>␣package␣variable
with␣a␣C<autodie::hints::provider>␣key␣and␣a␣corresponding␣true␣value.

Note␣that␣checking␣for␣a␣C<%DOES>␣hash␣is␣an␣C<autodie>-only
short-cut.␣␣Other␣modules␣do␣not␣use␣this␣mechanism␣for␣checking
roles,␣although␣you␣can␣use␣the␣C<Class::DOES>␣module␣from␣the
CPAN␣to␣allow␣it.

In␣addition,␣you␣must␣define␣a␣C<AUTODIE_HINTS>␣subroutine␣that␣returns
a␣hash-reference␣containing␣the␣hints␣for␣your␣subroutines:

␣␣␣␣␣␣␣␣package␣Your::Module;

␣␣␣␣␣␣␣␣#␣We␣can␣use␣the␣Class::DOES␣from␣the␣CPAN␣to␣declare␣adherence
␣␣␣␣␣␣␣␣#␣to␣a␣role.

␣␣␣␣␣␣␣␣use␣Class::DOES␣'autodie::hints::provider'␣=>␣1;

␣␣␣␣␣␣␣␣#␣Alternatively,␣we␣can␣declare␣the␣role␣in␣%DOES.␣␣Note␣that
␣␣␣␣␣␣␣␣#␣this␣is␣an␣autodie␣specific␣optimisation,␣although␣Class::DOES
␣␣␣␣␣␣␣␣#␣can␣be␣used␣to␣promote␣this␣to␣a␣true␣role␣declaration.

␣␣␣␣␣␣␣␣our␣%DOES␣=␣(␣'autodie::hints::provider'␣=>␣1␣);

␣␣␣␣␣␣␣␣#␣Finally,␣we␣must␣define␣the␣hints␣themselves.

	sub␣AUTODIE_HINTS␣{
	␣␣␣␣return␣{
	␣␣␣␣␣␣␣␣foo␣=>␣{␣scalar␣=>␣HINTS,␣list␣=>␣SOME_HINTS␣},
	␣␣␣␣␣␣␣␣bar␣=>␣{␣scalar␣=>␣HINTS,␣list␣=>␣MORE_HINTS␣},
	␣␣␣␣␣␣␣␣baz␣=>␣{␣fail␣=>␣HINTS␣},
	␣␣␣␣}
	}

This␣allows␣your␣code␣to␣set␣hints␣without␣relying␣on␣C<autodie>␣and
C<autodie::hints>␣being␣loaded,␣or␣even␣installed.␣␣In␣this␣way␣your
code␣can␣do␣the␣right␣thing␣when␣C<autodie>␣is␣installed,␣but␣does␣not
need␣to␣depend␣upon␣it␣to␣function.

=head1␣Insisting␣on␣hints

When␣a␣user-defined␣subroutine␣is␣wrapped␣by␣C<autodie>,␣it␣will
use␣hints␣if␣they␣are␣available,␣and␣otherwise␣reverts␣to␣the
I<default␣behaviour>␣described␣in␣the␣introduction␣of␣this␣document.
This␣can␣be␣problematic␣if␣we␣expect␣a␣hint␣to␣exist,␣but␣(for
whatever␣reason)␣it␣has␣not␣been␣loaded.

We␣can␣ask␣autodie␣to␣I<insist>␣that␣a␣hint␣be␣used␣by␣prefixing
an␣exclamation␣mark␣to␣the␣start␣of␣the␣subroutine␣name.␣␣A␣lone
exclamation␣mark␣indicates␣that␣I<all>␣subroutines␣after␣it␣must
have␣hints␣declared.

	#␣foo()␣and␣bar()␣must␣have␣their␣hints␣defined
	use␣autodie␣qw(␣!foo␣!bar␣baz␣);

	#␣Everything␣must␣have␣hints␣(recommended).
	use␣autodie␣qw(␣!␣foo␣bar␣baz␣);

	#␣bar()␣and␣baz()␣must␣have␣their␣hints␣defined
	use␣autodie␣qw(␣foo␣!␣bar␣baz␣);

␣␣␣␣␣␣␣␣#␣Enable␣autodie␣for␣all␣of␣Perl's␣supported␣built-ins,
␣␣␣␣␣␣␣␣#␣as␣well␣as␣for␣foo(),␣bar()␣and␣baz().␣␣Everything␣must
␣␣␣␣␣␣␣␣#␣have␣hints.
␣␣␣␣␣␣␣␣use␣autodie␣qw(␣!␣:all␣foo␣bar␣baz␣);

If␣hints␣are␣not␣available␣for␣the␣specified␣subroutines,␣this␣will␣cause␣a
compile-time␣error.␣␣Insisting␣on␣hints␣for␣Perl's␣built-in␣functions
(eg,␣C<open>␣and␣C<close>)␣is␣always␣successful.

Insisting␣on␣hints␣is␣I<strongly>␣recommended.

=cut
----------
Range: (3255235,3257786) (2551)
=head1␣TAP␣GRAMMAR

B<NOTE:>␣␣This␣grammar␣is␣slightly␣out␣of␣date.␣␣There's␣still␣some␣discussion
about␣it␣and␣a␣new␣one␣will␣be␣provided␣when␣we␣have␣things␣better␣defined.

The␣L<TAP::Parser>␣does␣not␣use␣a␣formal␣grammar␣because␣TAP␣is␣essentially␣a
stream-based␣protocol.␣␣In␣fact,␣it's␣quite␣legal␣to␣have␣an␣infinite␣stream.
For␣the␣same␣reason␣that␣we␣don't␣apply␣regexes␣to␣streams,␣we're␣not␣using␣a
formal␣grammar␣here.␣␣Instead,␣we␣parse␣the␣TAP␣in␣lines.

For␣purposes␣for␣forward␣compatability,␣any␣result␣which␣does␣not␣match␣the
following␣grammar␣is␣currently␣referred␣to␣as
L<TAP::Parser::Result::Unknown>.␣␣It␣is␣I<not>␣a␣parse␣error.

A␣formal␣grammar␣would␣look␣similar␣to␣the␣following:

␣(*
␣␣␣␣␣For␣the␣time␣being,␣I'm␣cheating␣on␣the␣EBNF␣by␣allowing
␣␣␣␣␣certain␣terms␣to␣be␣defined␣by␣POSIX␣character␣classes␣by
␣␣␣␣␣using␣the␣following␣syntax:

␣␣␣␣␣␣␣digit␣::=␣[:digit:]

␣␣␣␣␣As␣far␣as␣I␣am␣aware,␣that's␣not␣valid␣EBNF.␣␣Sue␣me.␣␣I
␣␣␣␣␣didn't␣know␣how␣to␣write␣"char"␣otherwise␣(Unicode␣issues).
␣␣␣␣␣Suggestions␣welcome.
␣*)

␣tap␣␣␣␣␣␣␣␣␣␣␣␣::=␣version?␣{␣comment␣|␣unknown␣}␣leading_plan␣lines
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣|
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣lines␣trailing_plan␣{comment}

␣version␣␣␣␣␣␣␣␣::=␣'TAP␣version␣'␣positiveInteger␣{positiveInteger}␣"\n"

␣leading_plan␣␣␣::=␣plan␣skip_directive?␣"\n"

␣trailing_plan␣␣::=␣plan␣"\n"

␣plan␣␣␣␣␣␣␣␣␣␣␣::=␣'1..'␣nonNegativeInteger

␣lines␣␣␣␣␣␣␣␣␣␣::=␣line␣{line}

␣line␣␣␣␣␣␣␣␣␣␣␣::=␣(comment␣|␣test␣|␣unknown␣|␣bailout␣)␣"\n"

␣test␣␣␣␣␣␣␣␣␣␣␣::=␣status␣positiveInteger?␣description?␣directive?

␣status␣␣␣␣␣␣␣␣␣::=␣'not␣'?␣'ok␣'

␣description␣␣␣␣::=␣(character␣-␣(digit␣|␣'#'))␣{character␣-␣'#'}

␣directive␣␣␣␣␣␣::=␣todo_directive␣|␣skip_directive

␣todo_directive␣::=␣hash_mark␣'TODO'␣'␣'␣{character}

␣skip_directive␣::=␣hash_mark␣'SKIP'␣'␣'␣{character}

␣comment␣␣␣␣␣␣␣␣::=␣hash_mark␣{character}

␣hash_mark␣␣␣␣␣␣::=␣'#'␣{'␣'}

␣bailout␣␣␣␣␣␣␣␣::=␣'Bail␣out!'␣{character}

␣unknown␣␣␣␣␣␣␣␣::=␣{␣(character␣-␣"\n")␣}

␣(*␣POSIX␣character␣classes␣and␣other␣terminals␣*)

␣digit␣␣␣␣␣␣␣␣␣␣␣␣␣␣::=␣[:digit:]
␣character␣␣␣␣␣␣␣␣␣␣::=␣([:print:]␣-␣"\n")
␣positiveInteger␣␣␣␣::=␣(␣digit␣-␣'0'␣)␣{digit}
␣nonNegativeInteger␣::=␣digit␣{digit}

=head1␣SUBCLASSING

Please␣see␣L<TAP::Parser/SUBCLASSING>␣for␣a␣subclassing␣overview.

If␣you␣I<really>␣want␣to␣subclass␣L<TAP::Parser>'s␣grammar␣the␣best␣thing␣to
do␣is␣read␣through␣the␣code.␣␣There's␣no␣easy␣way␣of␣summarizing␣it␣here.

=head1␣SEE␣ALSO

L<TAP::Object>,
L<TAP::Parser>,
L<TAP::Parser::Iterator>,
L<TAP::Parser::Result>,

=cut
----------
Range: (3311945,3313948) (2003)
3␣}

=head1␣METHODS

=head2␣Class␣Methods

=head3␣C<new>

␣my␣%args␣=␣(
␣␣␣␣verbose␣=>␣1,
␣)
␣my␣$harness␣=␣TAP::Formatter::Console->new(␣\%args␣);

The␣constructor␣returns␣a␣new␣C<TAP::Formatter::Console>␣object.␣If
a␣L<TAP::Harness>␣is␣created␣with␣no␣C<formatter>␣a
C<TAP::Formatter::Console>␣is␣automatically␣created.␣If␣any␣of␣the
following␣options␣were␣given␣to␣TAP::Harness->new␣they␣well␣be␣passed␣to
this␣constructor␣which␣accepts␣an␣optional␣hashref␣whose␣allowed␣keys␣are:

=over␣4

=item␣*␣C<verbosity>

Set␣the␣verbosity␣level.

=item␣*␣C<verbose>

Printing␣individual␣test␣results␣to␣STDOUT.

=item␣*␣C<timer>

Append␣run␣time␣for␣each␣test␣to␣output.␣Uses␣L<Time::HiRes>␣if␣available.

=item␣*␣C<failures>

Show␣test␣failures␣(this␣is␣a␣no-op␣if␣C<verbose>␣is␣selected).

=item␣*␣C<comments>

Show␣test␣comments␣(this␣is␣a␣no-op␣if␣C<verbose>␣is␣selected).

=item␣*␣C<quiet>

Suppressing␣some␣test␣output␣(mostly␣failures␣while␣tests␣are␣running).

=item␣*␣C<really_quiet>

Suppressing␣everything␣but␣the␣tests␣summary.

=item␣*␣C<silent>

Suppressing␣all␣output.

=item␣*␣C<errors>

If␣parse␣errors␣are␣found␣in␣the␣TAP␣output,␣a␣note␣of␣this␣will␣be␣made
in␣the␣summary␣report.␣␣To␣see␣all␣of␣the␣parse␣errors,␣set␣this␣argument␣to
true:

␣␣errors␣=>␣1

=item␣*␣C<directives>

If␣set␣to␣a␣true␣value,␣only␣test␣results␣with␣directives␣will␣be␣displayed.
This␣overrides␣other␣settings␣such␣as␣C<verbose>,␣C<failures>,␣or␣C<comments>.

=item␣*␣C<stdout>

A␣filehandle␣for␣catching␣standard␣output.

=item␣*␣C<color>

If␣defined␣specifies␣whether␣color␣output␣is␣desired.␣If␣C<color>␣is␣not
defined␣it␣will␣default␣to␣color␣output␣if␣color␣support␣is␣available␣on
the␣current␣platform␣and␣output␣is␣not␣being␣redirected.

=item␣*␣C<jobs>

The␣number␣of␣concurrent␣jobs␣this␣formatter␣will␣handle.

=item␣*␣C<show_count>

Boolean␣value.␣␣If␣false,␣disables␣the␣C<X/Y>␣test␣count␣which␣shows␣up␣while
tests␣are␣running.

=back

Any␣keys␣for␣which␣the␣value␣is␣C<undef>␣will␣be␣ignored.

=cut
----------
Range: (3323912,3328974) (5062)
=head1␣METHODS

=head2␣Class␣Methods

=head3␣C<new>

␣my␣%args␣=␣(
␣␣␣␣verbosity␣=>␣1,
␣␣␣␣lib␣␣␣␣␣=>␣[␣'lib',␣'blib/lib',␣'blib/arch'␣],
␣)
␣my␣$harness␣=␣TAP::Harness->new(␣\%args␣);

The␣constructor␣returns␣a␣new␣C<TAP::Harness>␣object.␣It␣accepts␣an
optional␣hashref␣whose␣allowed␣keys␣are:

=over␣4

=item␣*␣C<verbosity>

Set␣the␣verbosity␣level:

␣␣␣␣␣1␣␣␣verbose␣␣␣␣␣␣␣␣Print␣individual␣test␣results␣to␣STDOUT.
␣␣␣␣␣0␣␣␣normal
␣␣␣␣-1␣␣␣quiet␣␣␣␣␣␣␣␣␣␣Suppress␣some␣test␣output␣(mostly␣failures␣
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣while␣tests␣are␣running).
␣␣␣␣-2␣␣␣really␣quiet␣␣␣Suppress␣everything␣but␣the␣tests␣summary.
␣␣␣␣-3␣␣␣silent␣␣␣␣␣␣␣␣␣Suppress␣everything.

=item␣*␣C<timer>

Append␣run␣time␣for␣each␣test␣to␣output.␣Uses␣L<Time::HiRes>␣if
available.

=item␣*␣C<failures>

Show␣test␣failures␣(this␣is␣a␣no-op␣if␣C<verbose>␣is␣selected).

=item␣*␣C<comments>

Show␣test␣comments␣(this␣is␣a␣no-op␣if␣C<verbose>␣is␣selected).

=item␣*␣C<show_count>

Update␣the␣running␣test␣count␣during␣testing.

=item␣*␣C<normalize>

Set␣to␣a␣true␣value␣to␣normalize␣the␣TAP␣that␣is␣emitted␣in␣verbose␣modes.

=item␣*␣C<lib>

Accepts␣a␣scalar␣value␣or␣array␣ref␣of␣scalar␣values␣indicating␣which
paths␣to␣allowed␣libraries␣should␣be␣included␣if␣Perl␣tests␣are
executed.␣Naturally,␣this␣only␣makes␣sense␣in␣the␣context␣of␣tests
written␣in␣Perl.

=item␣*␣C<switches>

Accepts␣a␣scalar␣value␣or␣array␣ref␣of␣scalar␣values␣indicating␣which
switches␣should␣be␣included␣if␣Perl␣tests␣are␣executed.␣Naturally,␣this
only␣makes␣sense␣in␣the␣context␣of␣tests␣written␣in␣Perl.

=item␣*␣C<test_args>

A␣reference␣to␣an␣C<@INC>␣style␣array␣of␣arguments␣to␣be␣passed␣to␣each
test␣program.

=item␣*␣C<color>

Attempt␣to␣produce␣color␣output.

=item␣*␣C<exec>

Typically,␣Perl␣tests␣are␣run␣through␣this.␣However,␣anything␣which
spits␣out␣TAP␣is␣fine.␣You␣can␣use␣this␣argument␣to␣specify␣the␣name␣of
the␣program␣(and␣optional␣switches)␣to␣run␣your␣tests␣with:

␣␣exec␣=>␣['/usr/bin/ruby',␣'-w']

You␣can␣also␣pass␣a␣subroutine␣reference␣in␣order␣to␣determine␣and
return␣the␣proper␣program␣to␣run␣based␣on␣a␣given␣test␣script.␣The
subroutine␣reference␣should␣expect␣the␣TAP::Harness␣object␣itself␣as␣the
first␣argument,␣and␣the␣file␣name␣as␣the␣second␣argument.␣It␣should
return␣an␣array␣reference␣containing␣the␣command␣to␣be␣run␣and␣including
the␣test␣file␣name.␣It␣can␣also␣simply␣return␣C<undef>,␣in␣which␣case
TAP::Harness␣will␣fall␣back␣on␣executing␣the␣test␣script␣in␣Perl:

␣␣␣␣exec␣=>␣sub␣{
␣␣␣␣␣␣␣␣my␣(␣$harness,␣$test_file␣)␣=␣@_;

␣␣␣␣␣␣␣␣#␣Let␣Perl␣tests␣run.
␣␣␣␣␣␣␣␣return␣undef␣if␣$test_file␣=~␣/[.]t$/;
␣␣␣␣␣␣␣␣return␣[␣qw(␣/usr/bin/ruby␣-w␣),␣$test_file␣]
␣␣␣␣␣␣␣␣␣␣if␣$test_file␣=~␣/[.]rb$/;
␣␣␣␣␣␣}

If␣the␣subroutine␣returns␣a␣scalar␣with␣a␣newline␣or␣a␣filehandle,␣it
will␣be␣interpreted␣as␣raw␣TAP␣or␣as␣a␣TAP␣stream,␣respectively.

=item␣*␣C<merge>

If␣C<merge>␣is␣true␣the␣harness␣will␣create␣parsers␣that␣merge␣STDOUT
and␣STDERR␣together␣for␣any␣processes␣they␣start.

=item␣*␣C<aggregator_class>

The␣name␣of␣the␣class␣to␣use␣to␣aggregate␣test␣results.␣The␣default␣is
L<TAP::Parser::Aggregator>.

=item␣*␣C<formatter_class>

The␣name␣of␣the␣class␣to␣use␣to␣format␣output.␣The␣default␣is
L<TAP::Formatter::Console>,␣or␣L<TAP::Formatter::File>␣if␣the␣output
isn't␣a␣TTY.

=item␣*␣C<multiplexer_class>

The␣name␣of␣the␣class␣to␣use␣to␣multiplex␣tests␣during␣parallel␣testing.
The␣default␣is␣L<TAP::Parser::Multiplexer>.

=item␣*␣C<parser_class>

The␣name␣of␣the␣class␣to␣use␣to␣parse␣TAP.␣The␣default␣is
L<TAP::Parser>.

=item␣*␣C<scheduler_class>

The␣name␣of␣the␣class␣to␣use␣to␣schedule␣test␣execution.␣The␣default␣is
L<TAP::Parser::Scheduler>.

=item␣*␣C<formatter>

If␣set␣C<formatter>␣must␣be␣an␣object␣that␣is␣capable␣of␣formatting␣the
TAP␣output.␣See␣L<TAP::Formatter::Console>␣for␣an␣example.

=item␣*␣C<errors>

If␣parse␣errors␣are␣found␣in␣the␣TAP␣output,␣a␣note␣of␣this␣will␣be
made␣in␣the␣summary␣report.␣To␣see␣all␣of␣the␣parse␣errors,␣set␣this
argument␣to␣true:

␣␣errors␣=>␣1

=item␣*␣C<directives>

If␣set␣to␣a␣true␣value,␣only␣test␣results␣with␣directives␣will␣be
displayed.␣This␣overrides␣other␣settings␣such␣as␣C<verbose>␣or
C<failures>.

=item␣*␣C<ignore_exit>

If␣set␣to␣a␣true␣value␣instruct␣C<TAP::Parser>␣to␣ignore␣exit␣and␣wait
status␣from␣test␣scripts.

=item␣*␣C<jobs>

The␣maximum␣number␣of␣parallel␣tests␣to␣run␣at␣any␣time.␣␣Which␣tests
can␣be␣run␣in␣parallel␣is␣controlled␣by␣C<rules>.␣␣The␣default␣is␣to
run␣only␣one␣test␣at␣a␣time.

=item␣*␣C<rules>

A␣reference␣to␣a␣hash␣of␣rules␣that␣control␣which␣tests␣may␣be
executed␣in␣parallel.␣This␣is␣an␣experimental␣feature␣and␣the
interface␣may␣change.

␣␣␣␣$harness->rules(
␣␣␣␣␣␣␣␣{␣␣␣par␣=>␣[
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣{␣seq␣=>␣'../ext/DB_File/t/*'␣},
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣{␣seq␣=>␣'../ext/IO_Compress_Zlib/t/*'␣},
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣{␣seq␣=>␣'../lib/CPANPLUS/*'␣},
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣{␣seq␣=>␣'../lib/ExtUtils/t/*'␣},
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣'*'
␣␣␣␣␣␣␣␣␣␣␣␣]
␣␣␣␣␣␣␣␣}
␣␣␣␣);

=item␣*␣C<stdout>

A␣filehandle␣for␣catching␣standard␣output.

=back

Any␣keys␣for␣which␣the␣value␣is␣C<undef>␣will␣be␣ignored.

=cut
----------
Range: (3344254,3348813) (4559)
=head1␣SYNOPSIS

␣␣␣␣use␣TAP::Parser;

␣␣␣␣my␣$parser␣=␣TAP::Parser->new(␣{␣source␣=>␣$source␣}␣);

␣␣␣␣while␣(␣my␣$result␣=␣$parser->next␣)␣{
␣␣␣␣␣␣␣␣print␣$result->as_string;
␣␣␣␣}

=head1␣DESCRIPTION

C<TAP::Parser>␣is␣designed␣to␣produce␣a␣proper␣parse␣of␣TAP␣output.␣For
an␣example␣of␣how␣to␣run␣tests␣through␣this␣module,␣see␣the␣simple
harnesses␣C<examples/>.

There's␣a␣wiki␣dedicated␣to␣the␣Test␣Anything␣Protocol:

L<http://testanything.org>

It␣includes␣the␣TAP::Parser␣Cookbook:

L<http://testanything.org/wiki/index.php/TAP::Parser_Cookbook>

=head1␣METHODS

=head2␣Class␣Methods

=head3␣C<new>

␣my␣$parser␣=␣TAP::Parser->new(\%args);

Returns␣a␣new␣C<TAP::Parser>␣object.

The␣arguments␣should␣be␣a␣hashref␣with␣I<one>␣of␣the␣following␣keys:

=over␣4

=item␣*␣C<source>

This␣is␣the␣preferred␣method␣of␣passing␣arguments␣to␣the␣constructor.␣␣To
determine␣how␣to␣handle␣the␣source,␣the␣following␣steps␣are␣taken.

If␣the␣source␣contains␣a␣newline,␣it's␣assumed␣to␣be␣a␣string␣of␣raw␣TAP
output.

If␣the␣source␣is␣a␣reference,␣it's␣assumed␣to␣be␣something␣to␣pass␣to
the␣L<TAP::Parser::Iterator::Stream>␣constructor.␣This␣is␣used
internally␣and␣you␣should␣not␣use␣it.

Otherwise,␣the␣parser␣does␣a␣C<-e>␣check␣to␣see␣if␣the␣source␣exists.␣␣If␣so,
it␣attempts␣to␣execute␣the␣source␣and␣read␣the␣output␣as␣a␣stream.␣␣This␣is␣by
far␣the␣preferred␣method␣of␣using␣the␣parser.

␣foreach␣my␣$file␣(␣@test_files␣)␣{
␣␣␣␣␣my␣$parser␣=␣TAP::Parser->new(␣{␣source␣=>␣$file␣}␣);
␣␣␣␣␣#␣do␣stuff␣with␣the␣parser
␣}

=item␣*␣C<tap>

The␣value␣should␣be␣the␣complete␣TAP␣output.

=item␣*␣C<exec>

If␣passed␣an␣array␣reference,␣will␣attempt␣to␣create␣the␣iterator␣by
passing␣a␣L<TAP::Parser::Source>␣object␣to
L<TAP::Parser::Iterator::Source>,␣using␣the␣array␣reference␣strings␣as
the␣command␣arguments␣to␣L<IPC::Open3::open3|IPC::Open3>:

␣exec␣=>␣[␣'/usr/bin/ruby',␣'t/my_test.rb'␣]

Note␣that␣C<source>␣and␣C<exec>␣are␣mutually␣exclusive.

=back

The␣following␣keys␣are␣optional.

=over␣4

=item␣*␣C<callback>

If␣present,␣each␣callback␣corresponding␣to␣a␣given␣result␣type␣will␣be␣called
with␣the␣result␣as␣the␣argument␣if␣the␣C<run>␣method␣is␣used:

␣my␣%callbacks␣=␣(
␣␣␣␣␣test␣␣␣␣=>␣\&test_callback,
␣␣␣␣␣plan␣␣␣␣=>␣\&plan_callback,
␣␣␣␣␣comment␣=>␣\&comment_callback,
␣␣␣␣␣bailout␣=>␣\&bailout_callback,
␣␣␣␣␣unknown␣=>␣\&unknown_callback,
␣);

␣my␣$aggregator␣=␣TAP::Parser::Aggregator->new;
␣foreach␣my␣$file␣(␣@test_files␣)␣{
␣␣␣␣␣my␣$parser␣=␣TAP::Parser->new(
␣␣␣␣␣␣␣␣␣{
␣␣␣␣␣␣␣␣␣␣␣␣␣source␣␣␣␣=>␣$file,
␣␣␣␣␣␣␣␣␣␣␣␣␣callbacks␣=>␣\%callbacks,
␣␣␣␣␣␣␣␣␣}
␣␣␣␣␣);
␣␣␣␣␣$parser->run;
␣␣␣␣␣$aggregator->add(␣$file,␣$parser␣);
␣}

=item␣*␣C<switches>

If␣using␣a␣Perl␣file␣as␣a␣source,␣optional␣switches␣may␣be␣passed␣which␣will
be␣used␣when␣invoking␣the␣perl␣executable.

␣my␣$parser␣=␣TAP::Parser->new(␣{
␣␣␣␣␣source␣␣␣=>␣$test_file,
␣␣␣␣␣switches␣=>␣'-Ilib',
␣}␣);

=item␣*␣C<test_args>

Used␣in␣conjunction␣with␣the␣C<source>␣option␣to␣supply␣a␣reference␣to
an␣C<@ARGV>␣style␣array␣of␣arguments␣to␣pass␣to␣the␣test␣program.

=item␣*␣C<spool>

If␣passed␣a␣filehandle␣will␣write␣a␣copy␣of␣all␣parsed␣TAP␣to␣that␣handle.

=item␣*␣C<merge>

If␣false,␣STDERR␣is␣not␣captured␣(though␣it␣is␣'relayed'␣to␣keep␣it
somewhat␣synchronized␣with␣STDOUT.)

If␣true,␣STDERR␣and␣STDOUT␣are␣the␣same␣filehandle.␣␣This␣may␣cause
breakage␣if␣STDERR␣contains␣anything␣resembling␣TAP␣format,␣but␣does
allow␣exact␣synchronization.

Subtleties␣of␣this␣behavior␣may␣be␣platform-dependent␣and␣may␣change␣in
the␣future.

=item␣*␣C<source_class>

This␣option␣was␣introduced␣to␣let␣you␣easily␣customize␣which␣I<source>␣class
the␣parser␣should␣use.␣␣It␣defaults␣to␣L<TAP::Parser::Source>.

See␣also␣L</make_source>.

=item␣*␣C<perl_source_class>

This␣option␣was␣introduced␣to␣let␣you␣easily␣customize␣which␣I<perl␣source>
class␣the␣parser␣should␣use.␣␣It␣defaults␣to␣L<TAP::Parser::Source::Perl>.

See␣also␣L</make_perl_source>.

=item␣*␣C<grammar_class>

This␣option␣was␣introduced␣to␣let␣you␣easily␣customize␣which␣I<grammar>␣class
the␣parser␣should␣use.␣␣It␣defaults␣to␣L<TAP::Parser::Grammar>.

See␣also␣L</make_grammar>.

=item␣*␣C<iterator_factory_class>

This␣option␣was␣introduced␣to␣let␣you␣easily␣customize␣which␣I<iterator>
factory␣class␣the␣parser␣should␣use.␣␣It␣defaults␣to
L<TAP::Parser::IteratorFactory>.

See␣also␣L</make_iterator>.

=item␣*␣C<result_factory_class>

This␣option␣was␣introduced␣to␣let␣you␣easily␣customize␣which␣I<result>
factory␣class␣the␣parser␣should␣use.␣␣It␣defaults␣to
L<TAP::Parser::ResultFactory>.

See␣also␣L</make_result>.

=back

=cut
----------
Range: (3356426,3363723) (7297)
}
}

=head1␣INDIVIDUAL␣RESULTS

If␣you've␣read␣this␣far␣in␣the␣docs,␣you've␣seen␣this:

␣␣␣␣while␣(␣my␣$result␣=␣$parser->next␣)␣{
␣␣␣␣␣␣␣␣print␣$result->as_string;
␣␣␣␣}

Each␣result␣returned␣is␣a␣L<TAP::Parser::Result>␣subclass,␣referred␣to␣as
I<result␣types>.

=head2␣Result␣types

Basically,␣you␣fetch␣individual␣results␣from␣the␣TAP.␣␣The␣six␣types,␣with
examples␣of␣each,␣are␣as␣follows:

=over␣4

=item␣*␣Version

␣TAP␣version␣12

=item␣*␣Plan

␣1..42

=item␣*␣Pragma

␣pragma␣+strict

=item␣*␣Test

␣ok␣3␣-␣We␣should␣start␣with␣some␣foobar!

=item␣*␣Comment

␣#␣Hope␣we␣don't␣use␣up␣the␣foobar.

=item␣*␣Bailout

␣Bail␣out!␣␣We␣ran␣out␣of␣foobar!

=item␣*␣Unknown

␣...␣yo,␣this␣ain't␣TAP!␣...

=back

Each␣result␣fetched␣is␣a␣result␣object␣of␣a␣different␣type.␣␣There␣are␣common
methods␣to␣each␣result␣object␣and␣different␣types␣may␣have␣methods␣unique␣to
their␣type.␣␣Sometimes␣a␣type␣method␣may␣be␣overridden␣in␣a␣subclass,␣but␣its
use␣is␣guaranteed␣to␣be␣identical.

=head2␣Common␣type␣methods

=head3␣C<type>

Returns␣the␣type␣of␣result,␣such␣as␣C<comment>␣or␣C<test>.

=head3␣C<as_string>

Prints␣a␣string␣representation␣of␣the␣token.␣␣This␣might␣not␣be␣the␣exact
output,␣however.␣␣Tests␣will␣have␣test␣numbers␣added␣if␣not␣present,␣TODO␣and
SKIP␣directives␣will␣be␣capitalized␣and,␣in␣general,␣things␣will␣be␣cleaned
up.␣␣If␣you␣need␣the␣original␣text␣for␣the␣token,␣see␣the␣C<raw>␣method.

=head3␣␣C<raw>

Returns␣the␣original␣line␣of␣text␣which␣was␣parsed.

=head3␣C<is_plan>

Indicates␣whether␣or␣not␣this␣is␣the␣test␣plan␣line.

=head3␣C<is_test>

Indicates␣whether␣or␣not␣this␣is␣a␣test␣line.

=head3␣C<is_comment>

Indicates␣whether␣or␣not␣this␣is␣a␣comment.␣Comments␣will␣generally␣only
appear␣in␣the␣TAP␣stream␣if␣STDERR␣is␣merged␣to␣STDOUT.␣See␣the
C<merge>␣option.

=head3␣C<is_bailout>

Indicates␣whether␣or␣not␣this␣is␣bailout␣line.

=head3␣C<is_yaml>

Indicates␣whether␣or␣not␣the␣current␣item␣is␣a␣YAML␣block.

=head3␣C<is_unknown>

Indicates␣whether␣or␣not␣the␣current␣line␣could␣be␣parsed.

=head3␣C<is_ok>

␣␣if␣(␣$result->is_ok␣)␣{␣...␣}

Reports␣whether␣or␣not␣a␣given␣result␣has␣passed.␣␣Anything␣which␣is␣B<not>␣a
test␣result␣returns␣true.␣␣This␣is␣merely␣provided␣as␣a␣convenient␣shortcut
which␣allows␣you␣to␣do␣this:

␣my␣$parser␣=␣TAP::Parser->new(␣{␣source␣=>␣$source␣}␣);
␣while␣(␣my␣$result␣=␣$parser->next␣)␣{
␣␣␣␣␣#␣only␣print␣failing␣results
␣␣␣␣␣print␣$result->as_string␣unless␣$result->is_ok;
␣}

=head2␣C<plan>␣methods

␣if␣(␣$result->is_plan␣)␣{␣...␣}

If␣the␣above␣evaluates␣as␣true,␣the␣following␣methods␣will␣be␣available␣on␣the
C<$result>␣object.

=head3␣C<plan>

␣␣if␣(␣$result->is_plan␣)␣{
␣␣␣␣␣print␣$result->plan;
␣␣}

This␣is␣merely␣a␣synonym␣for␣C<as_string>.

=head3␣C<directive>

␣my␣$directive␣=␣$result->directive;

If␣a␣SKIP␣directive␣is␣included␣with␣the␣plan,␣this␣method␣will␣return␣it.

␣1..0␣#␣SKIP:␣why␣bother?

=head3␣C<explanation>

␣my␣$explanation␣=␣$result->explanation;

If␣a␣SKIP␣directive␣was␣included␣with␣the␣plan,␣this␣method␣will␣return␣the
explanation,␣if␣any.

=head2␣C<pragma>␣methods

␣if␣(␣$result->is_pragma␣)␣{␣...␣}

If␣the␣above␣evaluates␣as␣true,␣the␣following␣methods␣will␣be␣available␣on␣the
C<$result>␣object.

=head3␣C<pragmas>

Returns␣a␣list␣of␣pragmas␣each␣of␣which␣is␣a␣+␣or␣-␣followed␣by␣the
pragma␣name.
␣
=head2␣C<commment>␣methods

␣if␣(␣$result->is_comment␣)␣{␣...␣}

If␣the␣above␣evaluates␣as␣true,␣the␣following␣methods␣will␣be␣available␣on␣the
C<$result>␣object.

=head3␣C<comment>

␣␣if␣(␣$result->is_comment␣)␣{
␣␣␣␣␣␣my␣$comment␣=␣$result->comment;
␣␣␣␣␣␣print␣"I␣have␣something␣to␣say:␣␣$comment";
␣␣}

=head2␣C<bailout>␣methods

␣if␣(␣$result->is_bailout␣)␣{␣...␣}

If␣the␣above␣evaluates␣as␣true,␣the␣following␣methods␣will␣be␣available␣on␣the
C<$result>␣object.

=head3␣C<explanation>

␣␣if␣(␣$result->is_bailout␣)␣{
␣␣␣␣␣␣my␣$explanation␣=␣$result->explanation;
␣␣␣␣␣␣print␣"We␣bailed␣out␣because␣($explanation)";
␣␣}

If,␣and␣only␣if,␣a␣token␣is␣a␣bailout␣token,␣you␣can␣get␣an␣"explanation"␣via
this␣method.␣␣The␣explanation␣is␣the␣text␣after␣the␣mystical␣"Bail␣out!"␣words
which␣appear␣in␣the␣tap␣output.

=head2␣C<unknown>␣methods

␣if␣(␣$result->is_unknown␣)␣{␣...␣}

There␣are␣no␣unique␣methods␣for␣unknown␣results.

=head2␣C<test>␣methods

␣if␣(␣$result->is_test␣)␣{␣...␣}

If␣the␣above␣evaluates␣as␣true,␣the␣following␣methods␣will␣be␣available␣on␣the
C<$result>␣object.

=head3␣C<ok>

␣␣my␣$ok␣=␣$result->ok;

Returns␣the␣literal␣text␣of␣the␣C<ok>␣or␣C<not␣ok>␣status.

=head3␣C<number>

␣␣my␣$test_number␣=␣$result->number;

Returns␣the␣number␣of␣the␣test,␣even␣if␣the␣original␣TAP␣output␣did␣not␣supply
that␣number.

=head3␣C<description>

␣␣my␣$description␣=␣$result->description;

Returns␣the␣description␣of␣the␣test,␣if␣any.␣␣This␣is␣the␣portion␣after␣the
test␣number␣but␣before␣the␣directive.

=head3␣C<directive>

␣␣my␣$directive␣=␣$result->directive;

Returns␣either␣C<TODO>␣or␣C<SKIP>␣if␣either␣directive␣was␣present␣for␣a␣test
line.

=head3␣C<explanation>

␣␣my␣$explanation␣=␣$result->explanation;

If␣a␣test␣had␣either␣a␣C<TODO>␣or␣C<SKIP>␣directive,␣this␣method␣will␣return
the␣accompanying␣explantion,␣if␣present.

␣␣not␣ok␣17␣-␣'Pigs␣can␣fly'␣#␣TODO␣not␣enough␣acid

For␣the␣above␣line,␣the␣explanation␣is␣I<not␣enough␣acid>.

=head3␣C<is_ok>

␣␣if␣(␣$result->is_ok␣)␣{␣...␣}

Returns␣a␣boolean␣value␣indicating␣whether␣or␣not␣the␣test␣passed.␣␣Remember
that␣for␣TODO␣tests,␣the␣test␣always␣passes.

B<Note:>␣␣this␣was␣formerly␣C<passed>.␣␣The␣latter␣method␣is␣deprecated␣and
will␣issue␣a␣warning.

=head3␣C<is_actual_ok>

␣␣if␣(␣$result->is_actual_ok␣)␣{␣...␣}

Returns␣a␣boolean␣value␣indicating␣whether␣or␣not␣the␣test␣passed,␣regardless
of␣its␣TODO␣status.

B<Note:>␣␣this␣was␣formerly␣C<actual_passed>.␣␣The␣latter␣method␣is␣deprecated
and␣will␣issue␣a␣warning.

=head3␣C<is_unplanned>

␣␣if␣(␣$test->is_unplanned␣)␣{␣...␣}

If␣a␣test␣number␣is␣greater␣than␣the␣number␣of␣planned␣tests,␣this␣method␣will
return␣true.␣␣Unplanned␣tests␣will␣I<always>␣return␣false␣for␣C<is_ok>,
regardless␣of␣whether␣or␣not␣the␣test␣C<has_todo>␣(see
L<TAP::Parser::Result::Test>␣for␣more␣information␣about␣this).

=head3␣C<has_skip>

␣␣if␣(␣$result->has_skip␣)␣{␣...␣}

Returns␣a␣boolean␣value␣indicating␣whether␣or␣not␣this␣test␣had␣a␣SKIP
directive.

=head3␣C<has_todo>

␣␣if␣(␣$result->has_todo␣)␣{␣...␣}

Returns␣a␣boolean␣value␣indicating␣whether␣or␣not␣this␣test␣had␣a␣TODO
directive.

Note␣that␣TODO␣tests␣I<always>␣pass.␣␣If␣you␣need␣to␣know␣whether␣or␣not
they␣really␣passed,␣check␣the␣C<is_actual_ok>␣method.

=head3␣C<in_todo>

␣␣if␣(␣$parser->in_todo␣)␣{␣...␣}

True␣while␣the␣most␣recent␣result␣was␣a␣TODO.␣Becomes␣true␣before␣the
TODO␣result␣is␣returned␣and␣stays␣true␣until␣just␣before␣the␣next␣non-
TODO␣test␣is␣returned.

=head1␣TOTAL␣RESULTS

After␣parsing␣the␣TAP,␣there␣are␣many␣methods␣available␣to␣let␣you␣dig␣through
the␣results␣and␣determine␣what␣is␣meaningful␣to␣you.

=head2␣Individual␣Results

These␣results␣refer␣to␣individual␣tests␣which␣are␣run.

=head3␣C<passed>

␣my␣@passed␣=␣$parser->passed;␣#␣the␣test␣numbers␣which␣passed
␣my␣$passed␣=␣$parser->passed;␣#␣the␣number␣of␣tests␣which␣passed

This␣method␣lets␣you␣know␣which␣(or␣how␣many)␣tests␣passed.␣␣If␣a␣test␣failed
but␣had␣a␣TODO␣directive,␣it␣will␣be␣counted␣as␣a␣passed␣test.

=cut
----------
Range: (3383589,3392964) (9375)
=head1␣CALLBACKS

As␣mentioned␣earlier,␣a␣"callback"␣key␣may␣be␣added␣to␣the
C<TAP::Parser>␣constructor.␣If␣present,␣each␣callback␣corresponding␣to␣a
given␣result␣type␣will␣be␣called␣with␣the␣result␣as␣the␣argument␣if␣the
C<run>␣method␣is␣used.␣The␣callback␣is␣expected␣to␣be␣a␣subroutine
reference␣(or␣anonymous␣subroutine)␣which␣is␣invoked␣with␣the␣parser
result␣as␣its␣argument.

␣my␣%callbacks␣=␣(
␣␣␣␣␣test␣␣␣␣=>␣\&test_callback,
␣␣␣␣␣plan␣␣␣␣=>␣\&plan_callback,
␣␣␣␣␣comment␣=>␣\&comment_callback,
␣␣␣␣␣bailout␣=>␣\&bailout_callback,
␣␣␣␣␣unknown␣=>␣\&unknown_callback,
␣);

␣my␣$aggregator␣=␣TAP::Parser::Aggregator->new;
␣foreach␣my␣$file␣(␣@test_files␣)␣{
␣␣␣␣␣my␣$parser␣=␣TAP::Parser->new(
␣␣␣␣␣␣␣␣␣{
␣␣␣␣␣␣␣␣␣␣␣␣␣source␣␣␣␣=>␣$file,
␣␣␣␣␣␣␣␣␣␣␣␣␣callbacks␣=>␣\%callbacks,
␣␣␣␣␣␣␣␣␣}
␣␣␣␣␣);
␣␣␣␣␣$parser->run;
␣␣␣␣␣$aggregator->add(␣$file,␣$parser␣);
␣}

Callbacks␣may␣also␣be␣added␣like␣this:

␣$parser->callback(␣test␣=>␣\&test_callback␣);
␣$parser->callback(␣plan␣=>␣\&plan_callback␣);

The␣following␣keys␣allowed␣for␣callbacks.␣These␣keys␣are␣case-sensitive.

=over␣4

=item␣*␣C<test>

Invoked␣if␣C<<␣$result->is_test␣>>␣returns␣true.

=item␣*␣C<version>

Invoked␣if␣C<<␣$result->is_version␣>>␣returns␣true.

=item␣*␣C<plan>

Invoked␣if␣C<<␣$result->is_plan␣>>␣returns␣true.

=item␣*␣C<comment>

Invoked␣if␣C<<␣$result->is_comment␣>>␣returns␣true.

=item␣*␣C<bailout>

Invoked␣if␣C<<␣$result->is_unknown␣>>␣returns␣true.

=item␣*␣C<yaml>

Invoked␣if␣C<<␣$result->is_yaml␣>>␣returns␣true.

=item␣*␣C<unknown>

Invoked␣if␣C<<␣$result->is_unknown␣>>␣returns␣true.

=item␣*␣C<ELSE>

If␣a␣result␣does␣not␣have␣a␣callback␣defined␣for␣it,␣this␣callback␣will
be␣invoked.␣Thus,␣if␣all␣of␣the␣previous␣result␣types␣are␣specified␣as
callbacks,␣this␣callback␣will␣I<never>␣be␣invoked.

=item␣*␣C<ALL>

This␣callback␣will␣always␣be␣invoked␣and␣this␣will␣happen␣for␣each
result␣after␣one␣of␣the␣above␣callbacks␣is␣invoked.␣␣For␣example,␣if
L<Term::ANSIColor>␣is␣loaded,␣you␣could␣use␣the␣following␣to␣color␣your
test␣output:

␣my␣%callbacks␣=␣(
␣␣␣␣␣test␣=>␣sub␣{
␣␣␣␣␣␣␣␣␣my␣$test␣=␣shift;
␣␣␣␣␣␣␣␣␣if␣(␣$test->is_ok␣&&␣not␣$test->directive␣)␣{
␣␣␣␣␣␣␣␣␣␣␣␣␣#␣normal␣passing␣test
␣␣␣␣␣␣␣␣␣␣␣␣␣print␣color␣'green';
␣␣␣␣␣␣␣␣␣}
␣␣␣␣␣␣␣␣␣elsif␣(␣!$test->is_ok␣)␣{␣␣␣␣#␣even␣if␣it's␣TODO
␣␣␣␣␣␣␣␣␣␣␣␣␣print␣color␣'white␣on_red';
␣␣␣␣␣␣␣␣␣}
␣␣␣␣␣␣␣␣␣elsif␣(␣$test->has_skip␣)␣{
␣␣␣␣␣␣␣␣␣␣␣␣␣print␣color␣'white␣on_blue';

␣␣␣␣␣␣␣␣␣}
␣␣␣␣␣␣␣␣␣elsif␣(␣$test->has_todo␣)␣{
␣␣␣␣␣␣␣␣␣␣␣␣␣print␣color␣'white';
␣␣␣␣␣␣␣␣␣}
␣␣␣␣␣},
␣␣␣␣␣ELSE␣=>␣sub␣{
␣␣␣␣␣␣␣␣␣#␣plan,␣comment,␣and␣so␣on␣(anything␣which␣isn't␣a␣test␣line)
␣␣␣␣␣␣␣␣␣print␣color␣'black␣on_white';
␣␣␣␣␣},
␣␣␣␣␣ALL␣=>␣sub␣{
␣␣␣␣␣␣␣␣␣#␣now␣print␣them
␣␣␣␣␣␣␣␣␣print␣shift->as_string;
␣␣␣␣␣␣␣␣␣print␣color␣'reset';
␣␣␣␣␣␣␣␣␣print␣"\n";
␣␣␣␣␣},
␣);

=item␣*␣C<EOF>

Invoked␣when␣there␣are␣no␣more␣lines␣to␣be␣parsed.␣Since␣there␣is␣no
accompanying␣L<TAP::Parser::Result>␣object␣the␣C<TAP::Parser>␣object␣is
passed␣instead.

=back

=head1␣TAP␣GRAMMAR

If␣you're␣looking␣for␣an␣EBNF␣grammar,␣see␣L<TAP::Parser::Grammar>.

=head1␣BACKWARDS␣COMPATABILITY

The␣Perl-QA␣list␣attempted␣to␣ensure␣backwards␣compatability␣with
L<Test::Harness>.␣␣However,␣there␣are␣some␣minor␣differences.

=head2␣Differences

=over␣4

=item␣*␣TODO␣plans

A␣little-known␣feature␣of␣L<Test::Harness>␣is␣that␣it␣supported␣TODO
lists␣in␣the␣plan:

␣1..2␣todo␣2
␣ok␣1␣-␣We␣have␣liftoff
␣not␣ok␣2␣-␣Anti-gravity␣device␣activated

Under␣L<Test::Harness>,␣test␣number␣2␣would␣I<pass>␣because␣it␣was
listed␣as␣a␣TODO␣test␣on␣the␣plan␣line.␣However,␣we␣are␣not␣aware␣of
anyone␣actually␣using␣this␣feature␣and␣hard-coding␣test␣numbers␣is
discouraged␣because␣it's␣very␣easy␣to␣add␣a␣test␣and␣break␣the␣test
number␣sequence.␣This␣makes␣test␣suites␣very␣fragile.␣Instead,␣the
following␣should␣be␣used:

␣1..2
␣ok␣1␣-␣We␣have␣liftoff
␣not␣ok␣2␣-␣Anti-gravity␣device␣activated␣#␣TODO

=item␣*␣'Missing'␣tests

It␣rarely␣happens,␣but␣sometimes␣a␣harness␣might␣encounter
'missing␣tests:

␣ok␣1
␣ok␣2
␣ok␣15
␣ok␣16
␣ok␣17

L<Test::Harness>␣would␣report␣tests␣3-14␣as␣having␣failed.␣For␣the
C<TAP::Parser>,␣these␣tests␣are␣not␣considered␣failed␣because␣they've
never␣run.␣They're␣reported␣as␣parse␣failures␣(tests␣out␣of␣sequence).

=back

=head1␣SUBCLASSING

If␣you␣find␣you␣need␣to␣provide␣custom␣functionality␣(as␣you␣would␣have␣using
L<Test::Harness::Straps>),␣you're␣in␣luck:␣C<TAP::Parser>␣and␣friends␣are
designed␣to␣be␣easily␣subclassed.

Before␣you␣start,␣it's␣important␣to␣know␣a␣few␣things:

=over␣2

=item␣1

All␣C<TAP::*>␣objects␣inherit␣from␣L<TAP::Object>.

=item␣2

Most␣C<TAP::*>␣classes␣have␣a␣I<SUBCLASSING>␣section␣to␣guide␣you.

=item␣3

Note␣that␣C<TAP::Parser>␣is␣designed␣to␣be␣the␣central␣'maker'␣-␣ie:␣it␣is
responsible␣for␣creating␣new␣objects␣in␣the␣C<TAP::Parser::*>␣namespace.

This␣makes␣it␣possible␣for␣you␣to␣have␣a␣single␣point␣of␣configuring␣what
subclasses␣should␣be␣used,␣which␣in␣turn␣means␣that␣in␣many␣cases␣you'll␣find
you␣only␣need␣to␣sub-class␣one␣of␣the␣parser's␣components.

=item␣4

By␣subclassing,␣you␣may␣end␣up␣overriding␣undocumented␣methods.␣␣That's␣not
a␣bad␣thing␣per␣se,␣but␣be␣forewarned␣that␣undocumented␣methods␣may␣change
without␣warning␣from␣one␣release␣to␣the␣next␣-␣we␣cannot␣guarantee␣backwards
compatability.␣␣If␣any␣I<documented>␣method␣needs␣changing,␣it␣will␣be
deprecated␣first,␣and␣changed␣in␣a␣later␣release.

=back

=head2␣Parser␣Components

=head3␣Sources

A␣TAP␣parser␣consumes␣input␣from␣a␣I<source>.␣␣There␣are␣currently␣two␣types
of␣sources:␣L<TAP::Parser::Source>␣for␣general␣non-perl␣commands,␣and
L<TAP::Parser::Source::Perl>.␣␣You␣can␣subclass␣both␣of␣them.␣␣You'll␣need␣to
customize␣your␣parser␣by␣setting␣the␣C<source_class>␣&␣C<perl_source_class>
parameters.␣␣See␣L</new>␣for␣more␣details.

If␣you␣need␣to␣customize␣the␣objects␣on␣creation,␣subclass␣L<TAP::Parser>␣and
override␣L</make_source>␣or␣L</make_perl_source>.

=head3␣Iterators

A␣TAP␣parser␣uses␣I<iterators>␣to␣loop␣through␣the␣I<stream>␣provided␣by␣the
parser's␣I<source>.␣␣There␣are␣quite␣a␣few␣types␣of␣Iterators␣available.
Choosing␣which␣class␣to␣use␣is␣the␣responsibility␣of␣the␣I<iterator␣factory>.

To␣create␣your␣own␣iterators␣you'll␣have␣to␣subclass
L<TAP::Parser::IteratorFactory>␣and␣L<TAP::Parser::Iterator>.␣␣Then␣you'll
need␣to␣customize␣the␣class␣used␣by␣your␣parser␣by␣setting␣the
C<iterator_factory_class>␣parameter.␣␣See␣L</new>␣for␣more␣details.

If␣you␣need␣to␣customize␣the␣objects␣on␣creation,␣subclass␣L<TAP::Parser>␣and
override␣L</make_iterator>.

=head3␣Results

A␣TAP␣parser␣creates␣L<TAP::Parser::Result>s␣as␣it␣iterates␣through␣the
input␣I<stream>.␣␣There␣are␣quite␣a␣few␣result␣types␣available;␣choosing
which␣class␣to␣use␣is␣the␣responsibility␣of␣the␣I<result␣factory>.

To␣create␣your␣own␣result␣types␣you␣have␣two␣options:

=over␣2

=item␣option␣1

Subclass␣L<TAP::Parser::Result>␣and␣register␣your␣new␣result␣type/class␣with
the␣default␣L<TAP::Parser::ResultFactory>.

=item␣option␣2

Subclass␣L<TAP::Parser::ResultFactory>␣itself␣and␣implement␣your␣own
L<TAP::Parser::Result>␣creation␣logic.␣␣Then␣you'll␣need␣to␣customize␣the
class␣used␣by␣your␣parser␣by␣setting␣the␣C<result_factory_class>␣parameter.
See␣L</new>␣for␣more␣details.

=back

If␣you␣need␣to␣customize␣the␣objects␣on␣creation,␣subclass␣L<TAP::Parser>␣and
override␣L</make_result>.

=head3␣Grammar

L<TAP::Parser::Grammar>␣is␣the␣heart␣of␣the␣parser␣-␣it␣tokenizes␣the␣TAP
input␣I<stream>␣and␣produces␣results.␣␣If␣you␣need␣to␣customize␣its␣behaviour
you␣should␣probably␣familiarize␣yourself␣with␣the␣source␣first.␣␣Enough
lecturing.

Subclass␣L<TAP::Parser::Grammar>␣and␣customize␣your␣parser␣by␣setting␣the
C<grammar_class>␣parameter.␣␣See␣L</new>␣for␣more␣details.

If␣you␣need␣to␣customize␣the␣objects␣on␣creation,␣subclass␣L<TAP::Parser>␣and
override␣L</make_grammar>

=head1␣ACKNOWLEDGEMENTS

All␣of␣the␣following␣have␣helped.␣Bug␣reports,␣patches,␣(im)moral
support,␣or␣just␣words␣of␣encouragement␣have␣all␣been␣forthcoming.

=over␣4

=item␣*␣Michael␣Schwern

=item␣*␣Andy␣Lester

=item␣*␣chromatic

=item␣*␣GEOFFR

=item␣*␣Shlomi␣Fish

=item␣*␣Torsten␣Schoenfeld

=item␣*␣Jerry␣Gay

=item␣*␣Aristotle

=item␣*␣Adam␣Kennedy

=item␣*␣Yves␣Orton

=item␣*␣Adrian␣Howard

=item␣*␣Sean␣&␣Lil

=item␣*␣Andreas␣J.␣Koenig

=item␣*␣Florian␣Ragwitz

=item␣*␣Corion

=item␣*␣Mark␣Stosberg

=item␣*␣Matt␣Kraai

=item␣*␣David␣Wheeler

=item␣*␣Alex␣Vandiver

=back

=head1␣AUTHORS

Curtis␣"Ovid"␣Poe␣<ovid@cpan.org>

Andy␣Armstong␣<andy@hexten.net>

Eric␣Wilhelm␣@␣<ewilhelm␣at␣cpan␣dot␣org>

Michael␣Peters␣<mpeters␣at␣plusthree␣dot␣com>

Leif␣Eriksen␣<leif␣dot␣eriksen␣at␣bigpond␣dot␣com>

Steve␣Purkis␣<spurkis@cpan.org>

Nicholas␣Clark␣<nick@ccl4.org>

=head1␣BUGS

Please␣report␣any␣bugs␣or␣feature␣requests␣to
C<bug-test-harness@rt.cpan.org>,␣or␣through␣the␣web␣interface␣at
L<http://rt.cpan.org/NoAuth/ReportBug.html?Queue=Test-Harness>.
We␣will␣be␣notified,␣and␣then␣you'll␣automatically␣be␣notified␣of
progress␣on␣your␣bug␣as␣we␣make␣changes.

Obviously,␣bugs␣which␣include␣patches␣are␣best.␣If␣you␣prefer,␣you␣can
patch␣against␣bleed␣by␣via␣anonymous␣checkout␣of␣the␣latest␣version:

␣svn␣checkout␣http://svn.hexten.net/tapx

=head1␣COPYRIGHT␣&␣LICENSE

Copyright␣2006-2008␣Curtis␣"Ovid"␣Poe,␣all␣rights␣reserved.

This␣program␣is␣free␣software;␣you␣can␣redistribute␣it␣and/or␣modify␣it
under␣the␣same␣terms␣as␣Perl␣itself.

=cut
----------
Range: (3424136,3427904) (3768)
=head1␣NAME

Object::Accessor␣-␣interface␣to␣create␣per␣object␣accessors

=head1␣SYNOPSIS

␣␣␣␣###␣using␣the␣object
␣␣␣␣$obj␣=␣Object::Accessor->new;␣␣␣␣␣␣␣␣#␣create␣object
␣␣␣␣$obj␣=␣Object::Accessor->new(@list);␣#␣create␣object␣with␣accessors
␣␣␣␣$obj␣=␣Object::Accessor->new(\%h);␣␣␣#␣create␣object␣with␣accessors
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣and␣their␣allow␣handlers

␣␣␣␣$bool␣␣␣=␣$obj->mk_accessors('foo');␣#␣create␣accessors
␣␣␣␣$bool␣␣␣=␣$obj->mk_accessors(␣␣␣␣␣␣␣␣#␣create␣accessors␣with␣input
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣{foo␣=>␣ALLOW_HANDLER}␣);␣#␣validation

␣␣␣␣$bool␣␣␣=␣$obj->mk_aliases(␣␣␣␣␣␣␣␣␣␣#␣create␣an␣alias␣to␣an␣existing
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣alias_name␣=>␣'method');␣#␣method␣name
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣
␣␣␣␣$clone␣␣=␣$obj->mk_clone;␣␣␣␣␣␣␣␣␣␣␣␣#␣create␣a␣clone␣of␣original
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣object␣without␣data
␣␣␣␣$bool␣␣␣=␣$obj->mk_flush;␣␣␣␣␣␣␣␣␣␣␣␣#␣clean␣out␣all␣data

␣␣␣␣@list␣␣␣=␣$obj->ls_accessors;␣␣␣␣␣␣␣␣#␣retrieves␣a␣list␣of␣all
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣accessors␣for␣this␣object

␣␣␣␣$bar␣␣␣␣=␣$obj->foo('bar');␣␣␣␣␣␣␣␣␣␣#␣set␣'foo'␣to␣'bar'
␣␣␣␣$bar␣␣␣␣=␣$obj->foo();␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣retrieve␣'bar'␣again

␣␣␣␣$sub␣␣␣␣=␣$obj->can('foo');␣␣␣␣␣␣␣␣␣␣#␣retrieve␣coderef␣for
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣'foo'␣accessor
␣␣␣␣$bar␣␣␣␣=␣$sub->('bar');␣␣␣␣␣␣␣␣␣␣␣␣␣#␣set␣'foo'␣via␣coderef
␣␣␣␣$bar␣␣␣␣=␣$sub->();␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣retrieve␣'bar'␣by␣coderef

␣␣␣␣###␣using␣the␣object␣as␣base␣class
␣␣␣␣package␣My::Class;
␣␣␣␣use␣base␣'Object::Accessor';

␣␣␣␣$obj␣␣␣␣=␣My::Class->new;␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣create␣base␣object
␣␣␣␣$bool␣␣␣=␣$obj->mk_accessors('foo');␣␣␣␣#␣create␣accessors,␣etc...

␣␣␣␣###␣make␣all␣attempted␣access␣to␣non-existant␣accessors␣fatal
␣␣␣␣###␣(defaults␣to␣false)
␣␣␣␣$Object::Accessor::FATAL␣=␣1;

␣␣␣␣###␣enable␣debugging
␣␣␣␣$Object::Accessor::DEBUG␣=␣1;

␣␣␣␣###␣advanced␣usage␣--␣callbacks
␣␣␣␣{␣␣␣my␣$obj␣=␣Object::Accessor->new('foo');
␣␣␣␣␣␣␣␣$obj->register_callback(␣sub␣{␣...␣}␣);
␣␣␣␣␣␣␣␣
␣␣␣␣␣␣␣␣$obj->foo(␣1␣);␣#␣these␣calls␣invoke␣the␣callback␣you␣registered
␣␣␣␣␣␣␣␣$obj->foo()␣␣␣␣␣#␣which␣allows␣you␣to␣change␣the␣get/set␣
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣behaviour␣and␣what␣is␣returned␣to␣the␣caller.
␣␣␣␣}␣␣␣␣␣␣␣␣

␣␣␣␣###␣advanced␣usage␣--␣lvalue␣attributes
␣␣␣␣{␣␣␣my␣$obj␣=␣Object::Accessor::Lvalue->new('foo');
␣␣␣␣␣␣␣␣print␣$obj->foo␣=␣1;␣␣␣␣␣␣␣␣␣␣␣␣#␣will␣print␣1
␣␣␣␣}

␣␣␣␣###␣advanced␣usage␣--␣scoped␣attribute␣values
␣␣␣␣{␣␣␣my␣$obj␣=␣Object::Accessor->new('foo');
␣␣␣␣␣␣␣␣
␣␣␣␣␣␣␣␣$obj->foo(␣1␣);
␣␣␣␣␣␣␣␣print␣$obj->foo;␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣will␣print␣1

␣␣␣␣␣␣␣␣###␣bind␣the␣scope␣of␣the␣value␣of␣attribute␣'foo'
␣␣␣␣␣␣␣␣###␣to␣the␣scope␣of␣'$x'␣--␣when␣$x␣goes␣out␣of␣
␣␣␣␣␣␣␣␣###␣scope,␣'foo's␣previous␣value␣will␣be␣restored
␣␣␣␣␣␣␣␣{␣␣␣$obj->foo(␣2␣=>␣\my␣$x␣);
␣␣␣␣␣␣␣␣␣␣␣␣print␣$obj->foo,␣'␣',␣$x;␣␣␣#␣will␣print␣'2␣2'
␣␣␣␣␣␣␣␣}
␣␣␣␣␣␣␣␣print␣$obj->foo;␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣will␣print␣1
␣␣␣␣}


=head1␣DESCRIPTION

C<Object::Accessor>␣provides␣an␣interface␣to␣create␣per␣object
accessors␣(as␣opposed␣to␣per␣C<Class>␣accessors,␣as,␣for␣example,
C<Class::Accessor>␣provides).

You␣can␣choose␣to␣either␣subclass␣this␣module,␣and␣thus␣using␣its
accessors␣on␣your␣own␣module,␣or␣to␣store␣an␣C<Object::Accessor>
object␣inside␣your␣own␣object,␣and␣access␣the␣accessors␣from␣there.
See␣the␣C<SYNOPSIS>␣for␣examples.

=head1␣METHODS

=head2␣$object␣=␣Object::Accessor->new(␣[ARGS]␣);

Creates␣a␣new␣(and␣empty)␣C<Object::Accessor>␣object.␣This␣method␣is
inheritable.

Any␣arguments␣given␣to␣C<new>␣are␣passed␣straight␣to␣C<mk_accessors>.

If␣you␣want␣to␣be␣able␣to␣assign␣to␣your␣accessors␣as␣if␣they
were␣C<lvalue>s,␣you␣should␣create␣your␣object␣in␣the␣
C<Object::Acccessor::Lvalue>␣namespace␣instead.␣See␣the␣section
on␣C<LVALUE␣ACCESSORS>␣below.

=cut
----------
Range: (3428040,3430055) (2015)
}

=head2␣$bool␣=␣$object->mk_accessors(␣@ACCESSORS␣|␣\%ACCESSOR_MAP␣);

Creates␣a␣list␣of␣accessors␣for␣this␣object␣(and␣C<NOT>␣for␣other␣ones
in␣the␣same␣class!).
Will␣not␣clobber␣existing␣data,␣so␣if␣an␣accessor␣already␣exists,
requesting␣to␣create␣again␣is␣effectively␣a␣C<no-op>.

When␣providing␣a␣C<hashref>␣as␣argument,␣rather␣than␣a␣normal␣list,
you␣can␣specify␣a␣list␣of␣key/value␣pairs␣of␣accessors␣and␣their
respective␣input␣validators.␣The␣validators␣can␣be␣anything␣that
C<Params::Check>'s␣C<allow>␣function␣accepts.␣Please␣see␣its␣manpage
for␣details.

For␣example:

␣␣␣␣$object->mk_accessors(␣{
␣␣␣␣␣␣␣␣foo␣␣␣␣␣=>␣qr/^\d+$/,␣␣␣␣␣␣␣#␣digits␣only
␣␣␣␣␣␣␣␣bar␣␣␣␣␣=>␣[0,1],␣␣␣␣␣␣␣␣␣␣␣#␣booleans
␣␣␣␣␣␣␣␣zot␣␣␣␣␣=>␣\&my_sub␣␣␣␣␣␣␣␣␣#␣a␣custom␣verification␣sub
␣␣␣␣}␣);␣␣␣␣␣␣␣␣

Returns␣true␣on␣success,␣false␣on␣failure.

Accessors␣that␣are␣called␣on␣an␣object,␣that␣do␣not␣exist␣return
C<undef>␣by␣default,␣but␣you␣can␣make␣this␣a␣fatal␣error␣by␣setting␣the
global␣variable␣C<$FATAL>␣to␣true.␣See␣the␣section␣on␣C<GLOBAL
VARIABLES>␣for␣details.

Note␣that␣you␣can␣bind␣the␣values␣of␣attributes␣to␣a␣scope.␣This␣allows
you␣to␣C<temporarily>␣change␣a␣value␣of␣an␣attribute,␣and␣have␣it's␣
original␣value␣restored␣up␣on␣the␣end␣of␣it's␣bound␣variable's␣scope;

For␣example,␣in␣this␣snippet␣of␣code,␣the␣attribute␣C<foo>␣will␣
temporarily␣be␣set␣to␣C<2>,␣until␣the␣end␣of␣the␣scope␣of␣C<$x>,␣at␣
which␣point␣the␣original␣value␣of␣C<1>␣will␣be␣restored.

␣␣␣␣my␣$obj␣=␣Object::Accessor->new;
␣␣␣␣
␣␣␣␣$obj->mk_accessors('foo');
␣␣␣␣$obj->foo(␣1␣);
␣␣␣␣print␣$obj->foo;␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣will␣print␣1

␣␣␣␣###␣bind␣the␣scope␣of␣the␣value␣of␣attribute␣'foo'
␣␣␣␣###␣to␣the␣scope␣of␣'$x'␣--␣when␣$x␣goes␣out␣of␣
␣␣␣␣###␣scope,␣'foo'␣previous␣value␣will␣be␣restored
␣␣␣␣{␣␣␣$obj->foo(␣2␣=>␣\my␣$x␣);
␣␣␣␣␣␣␣␣print␣$obj->foo,␣'␣',␣$x;␣␣␣#␣will␣print␣'2␣2'
␣␣␣␣}
␣␣␣␣print␣$obj->foo;␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣will␣print␣1
␣␣␣␣

Note␣that␣all␣accessors␣are␣read/write␣for␣everyone.␣See␣the␣C<TODO>
section␣for␣details.

=cut
----------
Range: (3534365,3538673) (4308)
=head1␣NAME

inc::latest␣-␣use␣modules␣bundled␣in␣inc/␣if␣they␣are␣newer␣than␣installed␣ones

=head1␣SYNOPSIS

␣␣#␣in␣Build.PL
␣␣use␣inc::latest␣'Module::Build';

=head1␣DESCRIPTION

The␣C<inc::latest>␣module␣helps␣bootstrap␣configure-time␣dependencies␣for␣CPAN
distributions.␣␣These␣dependencies␣get␣bundled␣into␣the␣C<inc>␣directory␣within
a␣distribution␣and␣are␣used␣by␣Build.PL␣(or␣Makefile.PL).

Arguments␣to␣C<inc::latest>␣are␣module␣names␣that␣are␣checked␣against␣both␣the
current␣C<@INC>␣array␣and␣against␣specially-named␣directories␣in␣C<inc>.␣␣If
the␣bundled␣verison␣is␣newer␣than␣the␣installed␣one␣(or␣the␣module␣isn't
installed,␣then,␣the␣bundled␣directory␣is␣added␣to␣the␣start␣of␣<@INC>␣and␣the
module␣is␣loaded␣from␣there.

There␣are␣actually␣two␣variations␣of␣C<inc::latest>␣--␣one␣for␣authors␣and␣one
for␣the␣C<inc>␣directory.␣␣For␣distribution␣authors,␣the␣C<inc::latest>
installed␣in␣the␣system␣will␣record␣modules␣loaded␣via␣C<inc::latest>␣and␣can
be␣used␣to␣create␣the␣bundled␣files␣in␣C<inc>,␣including␣writing␣the␣second
variation␣as␣C<inc/latest.pm>.

This␣second␣C<inc::latest>␣is␣the␣one␣that␣is␣loaded␣in␣a␣distribution␣being
installed␣(e.g.␣from␣Build.PL).␣␣This␣bundled␣C<inc::latest>␣is␣the␣one
that␣determines␣which␣module␣to␣load.

=head2␣Special␣notes␣on␣bundling

The␣C<inc::latest>␣module␣creates␣bundled␣directories␣based␣on␣the␣packlist
file␣of␣an␣installed␣distribution.␣␣Even␣though␣C<inc::latest>␣takes␣module
name␣arguments,␣it␣is␣better␣to␣think␣of␣it␣as␣bundling␣and␣making␣available
entire␣I<distributions>.␣␣When␣a␣module␣is␣loaded␣through␣C<inc::latest>,
it␣looks␣in␣all␣bundled␣distributions␣in␣C<inc/>␣for␣a␣newer␣module␣than
can␣be␣found␣in␣the␣existing␣C<@INC>␣array.

Thus,␣the␣module-name␣provided␣should␣usually␣be␣the␣"top-level"␣module␣name␣of
a␣distribution,␣though␣this␣is␣not␣strictly␣required.␣␣For␣example,
L<Module::Build>␣has␣a␣number␣of␣heuristics␣to␣map␣module␣names␣to␣packlists,
allowing␣users␣to␣do␣things␣like␣this:

␣␣use␣inc::latest␣'Devel::AssertOS::Unix';

even␣though␣Devel::AssertOS::Unix␣is␣contained␣within␣the␣Devel-CheckOS
distribution.

At␣the␣current␣time,␣packlists␣are␣required.␣␣Thus,␣bundling␣dual-core␣modules
may␣require␣a␣'forced␣install'␣over␣versions␣in␣the␣latest␣version␣of␣perl
in␣order␣to␣create␣the␣necessary␣packlist␣for␣bundling.

=head1␣USAGE

When␣calling␣C<use>,␣the␣bundled␣C<inc::latest>␣takes␣a␣single␣module␣name␣and
optional␣arguments␣to␣pass␣to␣that␣module's␣own␣import␣method.

␣␣use␣'inc::latest'␣'Foo::Bar'␣qw/foo␣bar␣baz/;

=head2␣Author-mode

You␣are␣in␣author-mode␣inc::latest␣if␣any␣of␣the␣Author-mode␣methods␣are
available.␣␣For␣example:

␣␣if␣(␣inc::latest->can('write')␣)␣{
␣␣␣␣inc::latest->write('inc');
␣␣}

=over␣4

=item␣loaded_modules()

␣␣my␣@list␣=␣inc::latest->loaded_modules;

This␣takes␣no␣arguments␣and␣always␣returns␣a␣list␣of␣module␣names␣requested␣for
loading␣via␣"use␣inc::latest␣'MODULE'",␣regardless␣of␣wether␣the␣load␣was
successful␣or␣not.

=item␣write()

␣␣inc::latest->write(␣'inc'␣);

This␣writes␣the␣bundled␣version␣of␣inc::latest␣to␣the␣directory␣name␣given␣as␣an
argument.␣␣It␣almost␣all␣cases,␣it␣should␣be␣'C<inc>'.

=item␣bundle_module()

␣␣for␣my␣$mod␣(␣inc::latest->loaded_modules␣)␣{
␣␣␣␣inc::latest->bundle_module($mod,␣$dir);
␣␣}

If␣$mod␣corresponds␣to␣a␣packlist,␣then␣this␣function␣creates␣a␣specially-named
directory␣in␣$dir␣and␣copies␣all␣.pm␣files␣from␣the␣modlist␣to␣the␣new
directory␣(which␣almost␣always␣should␣just␣be␣'inc').␣␣For␣example,␣if␣Foo::Bar
is␣the␣name␣of␣the␣module,␣and␣$dir␣is␣'inc',␣then␣the␣directory␣would␣be
'inc/inc_Foo-Bar'␣and␣contain␣files␣like␣this:

␣␣inc/inc_Foo-Bar/Foo/Bar.pm

Currently,␣$mod␣B<must>␣have␣a␣packlist.␣␣If␣this␣is␣not␣the␣case␣(e.g.␣for␣a
dual-core␣module),␣then␣the␣bundling␣will␣fail.␣␣You␣may␣be␣able␣to␣create␣a
packlist␣by␣forced␣installing␣the␣module␣on␣top␣of␣the␣version␣that␣came␣with
core␣Perl.

=back

=head2␣As␣bundled␣in␣inc/

All␣methods␣are␣private.␣␣Only␣the␣C<import>␣method␣is␣public.

=head1␣AUTHOR

Eric␣Wilhelm␣<ewilhelm@cpan.org>,␣David␣Golden␣<dagolden@cpan.org>

=head1␣COPYRIGHT

Copyright␣(c)␣2009␣by␣Eric␣Wilhelm␣and␣David␣Golden

This␣library␣is␣free␣software;␣you␣can␣redistribute␣it␣and/or
modify␣it␣under␣the␣same␣terms␣as␣Perl␣itself.

=head1␣SEE␣ALSO

L<Module::Build>

=cut
----------
Range: (3538719,3541379) (2660)
=head1␣NAME

FileCache␣-␣keep␣more␣files␣open␣than␣the␣system␣permits

=head1␣SYNOPSIS

␣␣␣␣no␣strict␣'refs';

␣␣␣␣use␣FileCache;
␣␣␣␣#␣or
␣␣␣␣use␣FileCache␣maxopen␣=>␣16;

␣␣␣␣cacheout␣$mode,␣$path;
␣␣␣␣#␣or
␣␣␣␣cacheout␣$path;
␣␣␣␣print␣$path␣@data;

␣␣␣␣$fh␣=␣cacheout␣$mode,␣$path;
␣␣␣␣#␣or
␣␣␣␣$fh␣=␣cacheout␣$path;
␣␣␣␣print␣$fh␣@data;

=head1␣DESCRIPTION

The␣C<cacheout>␣function␣will␣make␣sure␣that␣there's␣a␣filehandle␣open
for␣reading␣or␣writing␣available␣as␣the␣pathname␣you␣give␣it.␣It
automatically␣closes␣and␣re-opens␣files␣if␣you␣exceed␣your␣system's
maximum␣number␣of␣file␣descriptors,␣or␣the␣suggested␣maximum␣I<maxopen>.

=over

=item␣cacheout␣EXPR

The␣1-argument␣form␣of␣cacheout␣will␣open␣a␣file␣for␣writing␣(C<<␣'>'␣>>)
on␣it's␣first␣use,␣and␣appending␣(C<<<␣'>>'␣>>>)␣thereafter.

Returns␣EXPR␣on␣success␣for␣convenience.␣You␣may␣neglect␣the
return␣value␣and␣manipulate␣EXPR␣as␣the␣filehandle␣directly␣if␣you␣prefer.

=item␣cacheout␣MODE,␣EXPR

The␣2-argument␣form␣of␣cacheout␣will␣use␣the␣supplied␣mode␣for␣the␣initial
and␣subsequent␣openings.␣Most␣valid␣modes␣for␣3-argument␣C<open>␣are␣supported
namely;␣C<<␣'>'␣>>,␣C<<␣'+>'␣>>,␣C<<␣'<'␣>>,␣C<<␣'<+'␣>>,␣C<<<␣'>>'␣>>>,
C<␣'|-'␣>␣and␣C<␣'-|'␣>

To␣pass␣supplemental␣arguments␣to␣a␣program␣opened␣with␣C<␣'|-'␣>␣or␣C<␣'-|'␣>
append␣them␣to␣the␣command␣string␣as␣you␣would␣system␣EXPR.

Returns␣EXPR␣on␣success␣for␣convenience.␣You␣may␣neglect␣the
return␣value␣and␣manipulate␣EXPR␣as␣the␣filehandle␣directly␣if␣you␣prefer.

=back

=head1␣CAVEATS

While␣it␣is␣permissible␣to␣C<close>␣a␣FileCache␣managed␣file,
do␣not␣do␣so␣if␣you␣are␣calling␣C<FileCache::cacheout>␣from␣a␣package␣other
than␣which␣it␣was␣imported,␣or␣with␣another␣module␣which␣overrides␣C<close>.
If␣you␣must,␣use␣C<FileCache::cacheout_close>.

Although␣FileCache␣can␣be␣used␣with␣piped␣opens␣('-|'␣or␣'|-')␣doing␣so␣is
strongly␣discouraged.␣␣If␣FileCache␣finds␣it␣necessary␣to␣close␣and␣then␣reopen
a␣pipe,␣the␣command␣at␣the␣far␣end␣of␣the␣pipe␣will␣be␣reexecuted␣-␣the␣results
of␣performing␣IO␣on␣FileCache'd␣pipes␣is␣unlikely␣to␣be␣what␣you␣expect.␣␣The
ability␣to␣use␣FileCache␣on␣pipes␣may␣be␣removed␣in␣a␣future␣release.

FileCache␣does␣not␣store␣the␣current␣file␣offset␣if␣it␣finds␣it␣necessary␣to
close␣a␣file.␣␣When␣the␣file␣is␣reopened,␣the␣offset␣will␣be␣as␣specified␣by␣the
original␣C<open>␣file␣mode.␣␣This␣could␣be␣construed␣to␣be␣a␣bug.

The␣module␣functionality␣relies␣on␣symbolic␣references,␣so␣things␣will␣break
under␣'use␣strict'␣unless␣'no␣strict␣"refs"'␣is␣also␣specified.

=head1␣BUGS

F<sys/param.h>␣lies␣with␣its␣C<NOFILE>␣define␣on␣some␣systems,
so␣you␣may␣have␣to␣set␣I<maxopen>␣yourself.

=cut
----------
Range: (3544490,3551538) (7048)
=head1␣NAME

IO::Zlib␣-␣IO::␣style␣interface␣to␣L<Compress::Zlib>

=head1␣SYNOPSIS

With␣any␣version␣of␣Perl␣5␣you␣can␣use␣the␣basic␣OO␣interface:

␣␣␣␣use␣IO::Zlib;

␣␣␣␣$fh␣=␣new␣IO::Zlib;
␣␣␣␣if␣($fh->open("file.gz",␣"rb"))␣{
␣␣␣␣␣␣␣␣print␣<$fh>;
␣␣␣␣␣␣␣␣$fh->close;
␣␣␣␣}

␣␣␣␣$fh␣=␣IO::Zlib->new("file.gz",␣"wb9");
␣␣␣␣if␣(defined␣$fh)␣{
␣␣␣␣␣␣␣␣print␣$fh␣"bar\n";
␣␣␣␣␣␣␣␣$fh->close;
␣␣␣␣}

␣␣␣␣$fh␣=␣IO::Zlib->new("file.gz",␣"rb");
␣␣␣␣if␣(defined␣$fh)␣{
␣␣␣␣␣␣␣␣print␣<$fh>;
␣␣␣␣␣␣␣␣undef␣$fh;␣␣␣␣␣␣␣#␣automatically␣closes␣the␣file
␣␣␣␣}

With␣Perl␣5.004␣you␣can␣also␣use␣the␣TIEHANDLE␣interface␣to␣access
compressed␣files␣just␣like␣ordinary␣files:

␣␣␣␣use␣IO::Zlib;

␣␣␣␣tie␣*FILE,␣'IO::Zlib',␣"file.gz",␣"wb";
␣␣␣␣print␣FILE␣"line␣1\nline2\n";

␣␣␣␣tie␣*FILE,␣'IO::Zlib',␣"file.gz",␣"rb";
␣␣␣␣while␣(<FILE>)␣{␣print␣"LINE:␣",␣$_␣};

=head1␣DESCRIPTION

C<IO::Zlib>␣provides␣an␣IO::␣style␣interface␣to␣L<Compress::Zlib>␣and
hence␣to␣gzip/zlib␣compressed␣files.␣It␣provides␣many␣of␣the␣same␣methods
as␣the␣L<IO::Handle>␣interface.

Starting␣from␣IO::Zlib␣version␣1.02,␣IO::Zlib␣can␣also␣use␣an
external␣F<gzip>␣command.␣␣The␣default␣behaviour␣is␣to␣try␣to␣use
an␣external␣F<gzip>␣if␣no␣C<Compress::Zlib>␣can␣be␣loaded,␣unless
explicitly␣disabled␣by

␣␣␣␣use␣IO::Zlib␣qw(:gzip_external␣0);

If␣explicitly␣enabled␣by

␣␣␣␣use␣IO::Zlib␣qw(:gzip_external␣1);

then␣the␣external␣F<gzip>␣is␣used␣B<instead>␣of␣C<Compress::Zlib>.

=head1␣CONSTRUCTOR

=over␣4

=item␣new␣(␣[ARGS]␣)

Creates␣an␣C<IO::Zlib>␣object.␣If␣it␣receives␣any␣parameters,␣they␣are
passed␣to␣the␣method␣C<open>;␣if␣the␣open␣fails,␣the␣object␣is␣destroyed.
Otherwise,␣it␣is␣returned␣to␣the␣caller.

=back

=head1␣OBJECT␣METHODS

=over␣4

=item␣open␣(␣FILENAME,␣MODE␣)

C<open>␣takes␣two␣arguments.␣The␣first␣is␣the␣name␣of␣the␣file␣to␣open
and␣the␣second␣is␣the␣open␣mode.␣The␣mode␣can␣be␣anything␣acceptable␣to
L<Compress::Zlib>␣and␣by␣extension␣anything␣acceptable␣to␣I<zlib>␣(that
basically␣means␣POSIX␣fopen()␣style␣mode␣strings␣plus␣an␣optional␣number
to␣indicate␣the␣compression␣level).

=item␣opened

Returns␣true␣if␣the␣object␣currently␣refers␣to␣a␣opened␣file.

=item␣close

Close␣the␣file␣associated␣with␣the␣object␣and␣disassociate
the␣file␣from␣the␣handle.
Done␣automatically␣on␣destroy.

=item␣getc

Return␣the␣next␣character␣from␣the␣file,␣or␣undef␣if␣none␣remain.

=item␣getline

Return␣the␣next␣line␣from␣the␣file,␣or␣undef␣on␣end␣of␣string.
Can␣safely␣be␣called␣in␣an␣array␣context.
Currently␣ignores␣$/␣($INPUT_RECORD_SEPARATOR␣or␣$RS␣when␣L<English>
is␣in␣use)␣and␣treats␣lines␣as␣delimited␣by␣"\n".

=item␣getlines

Get␣all␣remaining␣lines␣from␣the␣file.
It␣will␣croak()␣if␣accidentally␣called␣in␣a␣scalar␣context.

=item␣print␣(␣ARGS...␣)

Print␣ARGS␣to␣the␣␣file.

=item␣read␣(␣BUF,␣NBYTES,␣[OFFSET]␣)

Read␣some␣bytes␣from␣the␣file.
Returns␣the␣number␣of␣bytes␣actually␣read,␣0␣on␣end-of-file,␣undef␣on␣error.

=item␣eof

Returns␣true␣if␣the␣handle␣is␣currently␣positioned␣at␣end␣of␣file?

=item␣seek␣(␣OFFSET,␣WHENCE␣)

Seek␣to␣a␣given␣position␣in␣the␣stream.
Not␣yet␣supported.

=item␣tell

Return␣the␣current␣position␣in␣the␣stream,␣as␣a␣numeric␣offset.
Not␣yet␣supported.

=item␣setpos␣(␣POS␣)

Set␣the␣current␣position,␣using␣the␣opaque␣value␣returned␣by␣C<getpos()>.
Not␣yet␣supported.

=item␣getpos␣(␣POS␣)

Return␣the␣current␣position␣in␣the␣string,␣as␣an␣opaque␣object.
Not␣yet␣supported.

=back

=head1␣USING␣THE␣EXTERNAL␣GZIP

If␣the␣external␣F<gzip>␣is␣used,␣the␣following␣C<open>s␣are␣used:

␣␣␣␣open(FH,␣"gzip␣-dc␣$filename␣|")␣␣#␣for␣read␣opens
␣␣␣␣open(FH,␣"␣|␣gzip␣>␣$filename")␣␣␣#␣for␣write␣opens

You␣can␣modify␣the␣'commands'␣for␣example␣to␣hardwire
an␣absolute␣path␣by␣e.g.

␣␣␣␣use␣IO::Zlib␣':gzip_read_open'␣␣=>␣'/some/where/gunzip␣-c␣%s␣|';
␣␣␣␣use␣IO::Zlib␣':gzip_write_open'␣=>␣'|␣/some/where/gzip.exe␣>␣%s';

The␣C<%s>␣is␣expanded␣to␣be␣the␣filename␣(C<sprintf>␣is␣used,␣so␣be
careful␣to␣escape␣any␣other␣C<%>␣signs).␣␣The␣'commands'␣are␣checked
for␣sanity␣-␣they␣must␣contain␣the␣C<%s>,␣and␣the␣read␣open␣must␣end
with␣the␣pipe␣sign,␣and␣the␣write␣open␣must␣begin␣with␣the␣pipe␣sign.

=head1␣CLASS␣METHODS

=over␣4

=item␣has_Compress_Zlib

Returns␣true␣if␣C<Compress::Zlib>␣is␣available.␣␣Note␣that␣this␣does
not␣mean␣that␣C<Compress::Zlib>␣is␣being␣used:␣see␣L</gzip_external>
and␣L<gzip_used>.

=item␣gzip_external

Undef␣if␣an␣external␣F<gzip>␣B<can>␣be␣used␣if␣C<Compress::Zlib>␣is
not␣available␣(see␣L</has_Compress_Zlib>),␣true␣if␣an␣external␣F<gzip>
is␣explicitly␣used,␣false␣if␣an␣external␣F<gzip>␣must␣not␣be␣used.
See␣L</gzip_used>.

=item␣gzip_used

True␣if␣an␣external␣F<gzip>␣is␣being␣used,␣false␣if␣not.

=item␣gzip_read_open

Return␣the␣'command'␣being␣used␣for␣opening␣a␣file␣for␣reading␣using␣an
external␣F<gzip>.

=item␣gzip_write_open

Return␣the␣'command'␣being␣used␣for␣opening␣a␣file␣for␣writing␣using␣an
external␣F<gzip>.

=back

=head1␣DIAGNOSTICS

=over␣4

=item␣IO::Zlib::getlines:␣must␣be␣called␣in␣list␣context

If␣you␣want␣read␣lines,␣you␣must␣read␣in␣list␣context.

=item␣IO::Zlib::gzopen_external:␣mode␣'...'␣is␣illegal

Use␣only␣modes␣'rb'␣or␣'wb'␣or␣/wb[1-9]/.

=item␣IO::Zlib::import:␣'...'␣is␣illegal

The␣known␣import␣symbols␣are␣the␣C<:gzip_external>,␣C<:gzip_read_open>,
and␣C<:gzip_write_open>.␣␣Anything␣else␣is␣not␣recognized.

=item␣IO::Zlib::import:␣':gzip_external'␣requires␣an␣argument

The␣C<:gzip_external>␣requires␣one␣boolean␣argument.

=item␣IO::Zlib::import:␣'gzip_read_open'␣requires␣an␣argument

The␣C<:gzip_external>␣requires␣one␣string␣argument.

=item␣IO::Zlib::import:␣'gzip_read'␣'...'␣is␣illegal

The␣C<:gzip_read_open>␣argument␣must␣end␣with␣the␣pipe␣sign␣(|)
and␣have␣the␣C<%s>␣for␣the␣filename.␣␣See␣L</"USING␣THE␣EXTERNAL␣GZIP">.

=item␣IO::Zlib::import:␣'gzip_write_open'␣requires␣an␣argument

The␣C<:gzip_external>␣requires␣one␣string␣argument.

=item␣IO::Zlib::import:␣'gzip_write_open'␣'...'␣is␣illegal

The␣C<:gzip_write_open>␣argument␣must␣begin␣with␣the␣pipe␣sign␣(|)
and␣have␣the␣C<%s>␣for␣the␣filename.␣␣An␣output␣redirect␣(>)␣is␣also
often␣a␣good␣idea,␣depending␣on␣your␣operating␣system␣shell␣syntax.
See␣L</"USING␣THE␣EXTERNAL␣GZIP">.

=item␣IO::Zlib::import:␣no␣Compress::Zlib␣and␣no␣external␣gzip

Given␣that␣we␣failed␣to␣load␣C<Compress::Zlib>␣and␣that␣the␣use␣of
␣an␣external␣F<gzip>␣was␣disabled,␣IO::Zlib␣has␣not␣much␣chance␣of␣working.

=item␣IO::Zlib::open:␣needs␣a␣filename

No␣filename,␣no␣open.

=item␣IO::Zlib::READ:␣NBYTES␣must␣be␣specified

We␣must␣know␣how␣much␣to␣read.

=item␣IO::Zlib::WRITE:␣too␣long␣LENGTH

The␣LENGTH␣must␣be␣less␣than␣or␣equal␣to␣the␣buffer␣size.

=back

=head1␣SEE␣ALSO

L<perlfunc>,
L<perlop/"I/O␣Operators">,
L<IO::Handle>,
L<Compress::Zlib>

=head1␣HISTORY

Created␣by␣Tom␣Hughes␣E<lt>F<tom@compton.nu>E<gt>.

Support␣for␣external␣gzip␣added␣by␣Jarkko␣Hietaniemi␣E<lt>F<jhi@iki.fi>E<gt>.

=head1␣COPYRIGHT

Copyright␣(c)␣1998-2004␣Tom␣Hughes␣E<lt>F<tom@compton.nu>E<gt>.
All␣rights␣reserved.␣This␣program␣is␣free␣software;␣you␣can␣redistribute
it␣and/or␣modify␣it␣under␣the␣same␣terms␣as␣Perl␣itself.

=cut
----------
Range: (3758470,3760420) (1950)
=pod

=head1␣NAME

IPC::Cmd␣-␣finding␣and␣running␣system␣commands␣made␣easy

=head1␣SYNOPSIS

␣␣␣␣use␣IPC::Cmd␣qw[can_run␣run␣run_forked];

␣␣␣␣my␣$full_path␣=␣can_run('wget')␣or␣warn␣'wget␣is␣not␣installed!';

␣␣␣␣###␣commands␣can␣be␣arrayrefs␣or␣strings␣###
␣␣␣␣my␣$cmd␣=␣"$full_path␣-b␣theregister.co.uk";
␣␣␣␣my␣$cmd␣=␣[$full_path,␣'-b',␣'theregister.co.uk'];

␣␣␣␣###␣in␣scalar␣context␣###
␣␣␣␣my␣$buffer;
␣␣␣␣if(␣scalar␣run(␣command␣=>␣$cmd,
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣verbose␣=>␣0,
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣buffer␣␣=>␣\$buffer,
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣timeout␣=>␣20␣)
␣␣␣␣)␣{
␣␣␣␣␣␣␣␣print␣"fetched␣webpage␣successfully:␣$buffer\n";
␣␣␣␣}


␣␣␣␣###␣in␣list␣context␣###
␣␣␣␣my(␣$success,␣$error_code,␣$full_buf,␣$stdout_buf,␣$stderr_buf␣)␣=
␣␣␣␣␣␣␣␣␣␣␣␣run(␣command␣=>␣$cmd,␣verbose␣=>␣0␣);

␣␣␣␣if(␣$success␣)␣{
␣␣␣␣␣␣␣␣print␣"this␣is␣what␣the␣command␣printed:\n";
␣␣␣␣␣␣␣␣print␣join␣"",␣@$full_buf;
␣␣␣␣}

␣␣␣␣###␣check␣for␣features
␣␣␣␣print␣"IPC::Open3␣available:␣"␣␣.␣IPC::Cmd->can_use_ipc_open3;␣␣␣␣␣␣
␣␣␣␣print␣"IPC::Run␣available:␣"␣␣␣␣.␣IPC::Cmd->can_use_ipc_run;␣␣␣␣␣␣
␣␣␣␣print␣"Can␣capture␣buffer:␣"␣␣␣␣.␣IPC::Cmd->can_capture_buffer;␣␣␣␣␣

␣␣␣␣###␣don't␣have␣IPC::Cmd␣be␣verbose,␣ie␣don't␣print␣to␣stdout␣or
␣␣␣␣###␣stderr␣when␣running␣commands␣--␣default␣is␣'0'
␣␣␣␣$IPC::Cmd::VERBOSE␣=␣0;
␣␣␣␣␣␣␣␣␣

=head1␣DESCRIPTION

IPC::Cmd␣allows␣you␣to␣run␣commands,␣interactively␣if␣desired,
platform␣independent␣but␣have␣them␣still␣work.

The␣C<can_run>␣function␣can␣tell␣you␣if␣a␣certain␣binary␣is␣installed
and␣if␣so␣where,␣whereas␣the␣C<run>␣function␣can␣actually␣execute␣any
of␣the␣commands␣you␣give␣it␣and␣give␣you␣a␣clear␣return␣value,␣as␣well
as␣adhere␣to␣your␣verbosity␣settings.

=head1␣CLASS␣METHODS␣

=head2␣$ipc_run_version␣=␣IPC::Cmd->can_use_ipc_run(␣[VERBOSE]␣)

Utility␣function␣that␣tells␣you␣if␣C<IPC::Run>␣is␣available.␣
If␣the␣verbose␣flag␣is␣passed,␣it␣will␣print␣diagnostic␣messages
if␣C<IPC::Run>␣can␣not␣be␣found␣or␣loaded.

=cut
----------
Range: (3763491,3766729) (3238)
}
␣␣␣␣}
}

=head2␣$ok␣|␣($ok,␣$err,␣$full_buf,␣$stdout_buff,␣$stderr_buff)␣=␣run(␣command␣=>␣COMMAND,␣[verbose␣=>␣BOOL,␣buffer␣=>␣\$SCALAR,␣timeout␣=>␣DIGIT]␣);

C<run>␣takes␣4␣arguments:

=over␣4

=item␣command

This␣is␣the␣command␣to␣execute.␣It␣may␣be␣either␣a␣string␣or␣an␣array
reference.
This␣is␣a␣required␣argument.

See␣L<CAVEATS>␣for␣remarks␣on␣how␣commands␣are␣parsed␣and␣their
limitations.

=item␣verbose

This␣controls␣whether␣all␣output␣of␣a␣command␣should␣also␣be␣printed
to␣STDOUT/STDERR␣or␣should␣only␣be␣trapped␣in␣buffers␣(NOTE:␣buffers
require␣C<IPC::Run>␣to␣be␣installed␣or␣your␣system␣able␣to␣work␣with
C<IPC::Open3>).

It␣will␣default␣to␣the␣global␣setting␣of␣C<$IPC::Cmd::VERBOSE>,
which␣by␣default␣is␣0.

=item␣buffer

This␣will␣hold␣all␣the␣output␣of␣a␣command.␣It␣needs␣to␣be␣a␣reference
to␣a␣scalar.
Note␣that␣this␣will␣hold␣both␣the␣STDOUT␣and␣STDERR␣messages,␣and␣you
have␣no␣way␣of␣telling␣which␣is␣which.
If␣you␣require␣this␣distinction,␣run␣the␣C<run>␣command␣in␣list␣context
and␣inspect␣the␣individual␣buffers.

Of␣course,␣this␣requires␣that␣the␣underlying␣call␣supports␣buffers.␣See
the␣note␣on␣buffers␣right␣above.

=item␣timeout

Sets␣the␣maximum␣time␣the␣command␣is␣allowed␣to␣run␣before␣aborting,
using␣the␣built-in␣C<alarm()>␣call.␣If␣the␣timeout␣is␣triggered,␣the
C<errorcode>␣in␣the␣return␣value␣will␣be␣set␣to␣an␣object␣of␣the␣
C<IPC::Cmd::TimeOut>␣class.␣See␣the␣C<errorcode>␣section␣below␣for
details.

Defaults␣to␣C<0>,␣meaning␣no␣timeout␣is␣set.

=back

C<run>␣will␣return␣a␣simple␣C<true>␣or␣C<false>␣when␣called␣in␣scalar
context.
In␣list␣context,␣you␣will␣be␣returned␣a␣list␣of␣the␣following␣items:

=over␣4

=item␣success

A␣simple␣boolean␣indicating␣if␣the␣command␣executed␣without␣errors␣or
not.

=item␣error␣message

If␣the␣first␣element␣of␣the␣return␣value␣(success)␣was␣0,␣then␣some
error␣occurred.␣This␣second␣element␣is␣the␣error␣message␣the␣command
you␣requested␣exited␣with,␣if␣available.␣This␣is␣generally␣a␣pretty␣
printed␣value␣of␣C<$?>␣or␣C<$@>.␣See␣C<perldoc␣perlvar>␣for␣details␣on␣
what␣they␣can␣contain.
If␣the␣error␣was␣a␣timeout,␣the␣C<error␣message>␣will␣be␣prefixed␣with
the␣string␣C<IPC::Cmd::TimeOut>,␣the␣timeout␣class.

=item␣full_buffer

This␣is␣an␣arrayreference␣containing␣all␣the␣output␣the␣command
generated.
Note␣that␣buffers␣are␣only␣available␣if␣you␣have␣C<IPC::Run>␣installed,
or␣if␣your␣system␣is␣able␣to␣work␣with␣C<IPC::Open3>␣--␣See␣below).
This␣element␣will␣be␣C<undef>␣if␣this␣is␣not␣the␣case.

=item␣out_buffer

This␣is␣an␣arrayreference␣containing␣all␣the␣output␣sent␣to␣STDOUT␣the
command␣generated.
Note␣that␣buffers␣are␣only␣available␣if␣you␣have␣C<IPC::Run>␣installed,
or␣if␣your␣system␣is␣able␣to␣work␣with␣C<IPC::Open3>␣--␣See␣below).
This␣element␣will␣be␣C<undef>␣if␣this␣is␣not␣the␣case.

=item␣error_buffer

This␣is␣an␣arrayreference␣containing␣all␣the␣output␣sent␣to␣STDERR␣the
command␣generated.
Note␣that␣buffers␣are␣only␣available␣if␣you␣have␣C<IPC::Run>␣installed,
or␣if␣your␣system␣is␣able␣to␣work␣with␣C<IPC::Open3>␣--␣See␣below).
This␣element␣will␣be␣C<undef>␣if␣this␣is␣not␣the␣case.

=back

See␣the␣C<HOW␣IT␣WORKS>␣Section␣below␣to␣see␣how␣C<IPC::Cmd>␣decides
what␣modules␣or␣function␣calls␣to␣use␣when␣issuing␣a␣command.

=cut
----------
Range: (3771359,3773984) (2625)
}
}

=head2␣$hashref␣=␣run_forked(␣command␣=>␣COMMAND,␣{␣child_stdin␣=>␣SCALAR,␣timeout␣=>␣DIGIT,␣stdout_handler␣=>␣CODEREF,␣stderr_handler␣=>␣CODEREF}␣);

C<run_forked>␣is␣used␣to␣execute␣some␣program,
optionally␣feed␣it␣with␣some␣input,␣get␣its␣return␣code
and␣output␣(both␣stdout␣and␣stderr␣into␣seperate␣buffers).
In␣addition␣it␣allows␣to␣terminate␣the␣program
which␣take␣too␣long␣to␣finish.

The␣important␣and␣distinguishing␣feature␣of␣run_forked
is␣execution␣timeout␣which␣at␣first␣seems␣to␣be
quite␣a␣simple␣task␣but␣if␣you␣think
that␣the␣program␣which␣you're␣spawning
might␣spawn␣some␣children␣itself␣(which
in␣their␣turn␣could␣do␣the␣same␣and␣so␣on)
it␣turns␣out␣to␣be␣not␣a␣simple␣issue.

C<run_forked>␣is␣designed␣to␣survive␣and
successfully␣terminate␣almost␣any␣long␣running␣task,
even␣a␣fork␣bomb␣in␣case␣your␣system␣has␣the␣resources
to␣survive␣during␣given␣timeout.

This␣is␣achieved␣by␣creating␣separate␣watchdog␣process
which␣spawns␣the␣specified␣program␣in␣a␣separate
process␣session␣and␣supervises␣it:␣optionally
feeds␣it␣with␣input,␣stores␣its␣exit␣code,
stdout␣and␣stderr,␣terminates␣it␣in␣case
it␣runs␣longer␣than␣specified.

Invocation␣requires␣the␣command␣to␣be␣executed␣and␣optionally␣a␣hashref␣of␣options:

=over

=item␣C<timeout>

Specify␣in␣seconds␣how␣long␣the␣command␣may␣run␣for␣before␣it␣is␣killed␣with␣with␣SIG_KILL␣(9)␣
which␣effectively␣terminates␣it␣and␣all␣of␣its␣children␣(direct␣or␣indirect).

=item␣C<child_stdin>

Specify␣some␣text␣that␣will␣be␣passed␣into␣C<STDIN>␣of␣the␣executed␣program.

=item␣C<stdout_handler>

You␣may␣provide␣a␣coderef␣of␣a␣subroutine␣that␣will␣be␣called␣a␣portion␣of␣data␣is␣received␣on␣
stdout␣from␣the␣executing␣program.

=item␣C<stderr_handler>

You␣may␣provide␣a␣coderef␣of␣a␣subroutine␣that␣will␣be␣called␣a␣portion␣of␣data␣is␣received␣on␣
stderr␣from␣the␣executing␣program.

=back

C<run_forked>␣will␣return␣a␣HASHREF␣with␣the␣following␣keys:

=over

=item␣C<exit_code>

The␣exit␣code␣of␣the␣executed␣program.

=item␣C<timeout>

The␣number␣of␣seconds␣the␣program␣ran␣for␣before␣being␣terminated,␣or␣0␣if␣no␣timeout␣occurred.

=item␣C<stdout>

Holds␣the␣standard␣output␣of␣the␣executed␣command
(or␣empty␣string␣if␣there␣were␣no␣stdout␣output;␣it's␣always␣defined!)

=item␣C<stderr>

Holds␣the␣standard␣error␣of␣the␣executed␣command
(or␣empty␣string␣if␣there␣were␣no␣stderr␣output;␣it's␣always␣defined!)

=item␣C<merged>

Holds␣the␣standard␣output␣and␣error␣of␣the␣executed␣command␣merged␣into␣one␣stream
(or␣empty␣string␣if␣there␣were␣no␣output␣at␣all;␣it's␣always␣defined!)

=item␣C<err_msg>

Holds␣some␣explanation␣in␣the␣case␣of␣an␣error.

=back

=cut
----------
Range: (3801648,3805450) (3802)
=head2␣$q␣=␣QUOTE

Returns␣the␣character␣used␣for␣quoting␣strings␣on␣this␣platform.␣This␣is
usually␣a␣C<'>␣(single␣quote)␣on␣most␣systems,␣but␣some␣systems␣use␣different
quotes.␣For␣example,␣C<Win32>␣uses␣C<">␣(double␣quote).␣

You␣can␣use␣it␣as␣follows:

␣␣use␣IPC::Cmd␣qw[run␣QUOTE];
␣␣my␣$cmd␣=␣q[echo␣]␣.␣QUOTE␣.␣q[foo␣bar]␣.␣QUOTE;

This␣makes␣sure␣that␣C<foo␣bar>␣is␣treated␣as␣a␣string,␣rather␣than␣two
seperate␣arguments␣to␣the␣C<echo>␣function.

package␣IPC::Open2;

use␣strict;
our␣($VERSION,␣@ISA,␣@EXPORT);

require␣5.000;
require␣Exporter;

$VERSION	=␣1.03;
@ISA		=␣qw(Exporter);
@EXPORT		=␣qw(open2);

=head1␣NAME

IPC::Open2␣-␣open␣a␣process␣for␣both␣reading␣and␣writing␣using␣open2()

=head1␣SYNOPSIS

␣␣␣␣use␣IPC::Open2;

␣␣␣␣$pid␣=␣open2(\*CHLD_OUT,␣\*CHLD_IN,␣'some␣cmd␣and␣args');
␣␣␣␣␣␣#␣or␣without␣using␣the␣shell
␣␣␣␣$pid␣=␣open2(\*CHLD_OUT,␣\*CHLD_IN,␣'some',␣'cmd',␣'and',␣'args');

␣␣␣␣#␣or␣with␣handle␣autovivification
␣␣␣␣my($chld_out,␣$chld_in);
␣␣␣␣$pid␣=␣open2($chld_out,␣$chld_in,␣'some␣cmd␣and␣args');
␣␣␣␣␣␣#␣or␣without␣using␣the␣shell
␣␣␣␣$pid␣=␣open2($chld_out,␣$chld_in,␣'some',␣'cmd',␣'and',␣'args');

␣␣␣␣waitpid(␣$pid,␣0␣);
␣␣␣␣my␣$child_exit_status␣=␣$?␣>>␣8;

=head1␣DESCRIPTION

The␣open2()␣function␣runs␣the␣given␣$cmd␣and␣connects␣$chld_out␣for
reading␣and␣$chld_in␣for␣writing.␣␣It's␣what␣you␣think␣should␣work␣
when␣you␣try

␣␣␣␣$pid␣=␣open(HANDLE,␣"|cmd␣args|");

The␣write␣filehandle␣will␣have␣autoflush␣turned␣on.

If␣$chld_out␣is␣a␣string␣(that␣is,␣a␣bareword␣filehandle␣rather␣than␣a␣glob
or␣a␣reference)␣and␣it␣begins␣with␣C<<␣>&␣>>,␣then␣the␣child␣will␣send␣output
directly␣to␣that␣file␣handle.␣␣If␣$chld_in␣is␣a␣string␣that␣begins␣with
C<<␣<&␣>>,␣then␣$chld_in␣will␣be␣closed␣in␣the␣parent,␣and␣the␣child␣will
read␣from␣it␣directly.␣␣In␣both␣cases,␣there␣will␣be␣a␣dup(2)␣instead␣of␣a
pipe(2)␣made.

If␣either␣reader␣or␣writer␣is␣the␣null␣string,␣this␣will␣be␣replaced
by␣an␣autogenerated␣filehandle.␣␣If␣so,␣you␣must␣pass␣a␣valid␣lvalue
in␣the␣parameter␣slot␣so␣it␣can␣be␣overwritten␣in␣the␣caller,␣or
an␣exception␣will␣be␣raised.

open2()␣returns␣the␣process␣ID␣of␣the␣child␣process.␣␣It␣doesn't␣return␣on
failure:␣it␣just␣raises␣an␣exception␣matching␣C</^open2:/>.␣␣However,
C<exec>␣failures␣in␣the␣child␣are␣not␣detected.␣␣You'll␣have␣to
trap␣SIGPIPE␣yourself.

open2()␣does␣not␣wait␣for␣and␣reap␣the␣child␣process␣after␣it␣exits.
Except␣for␣short␣programs␣where␣it's␣acceptable␣to␣let␣the␣operating␣system
take␣care␣of␣this,␣you␣need␣to␣do␣this␣yourself.␣␣This␣is␣normally␣as
simple␣as␣calling␣C<waitpid␣$pid,␣0>␣when␣you're␣done␣with␣the␣process.
Failing␣to␣do␣this␣can␣result␣in␣an␣accumulation␣of␣defunct␣or␣"zombie"
processes.␣␣See␣L<perlfunc/waitpid>␣for␣more␣information.

This␣whole␣affair␣is␣quite␣dangerous,␣as␣you␣may␣block␣forever.␣␣It
assumes␣it's␣going␣to␣talk␣to␣something␣like␣B<bc>,␣both␣writing
to␣it␣and␣reading␣from␣it.␣␣This␣is␣presumably␣safe␣because␣you
"know"␣that␣commands␣like␣B<bc>␣will␣read␣a␣line␣at␣a␣time␣and
output␣a␣line␣at␣a␣time.␣␣Programs␣like␣B<sort>␣that␣read␣their
entire␣input␣stream␣first,␣however,␣are␣quite␣apt␣to␣cause␣deadlock.

The␣big␣problem␣with␣this␣approach␣is␣that␣if␣you␣don't␣have␣control␣
over␣source␣code␣being␣run␣in␣the␣child␣process,␣you␣can't␣control
what␣it␣does␣with␣pipe␣buffering.␣␣Thus␣you␣can't␣just␣open␣a␣pipe␣to
C<cat␣-v>␣and␣continually␣read␣and␣write␣a␣line␣from␣it.

The␣IO::Pty␣and␣Expect␣modules␣from␣CPAN␣can␣help␣with␣this,␣as␣they
provide␣a␣real␣tty␣(well,␣a␣pseudo-tty,␣actually),␣which␣gets␣you
back␣to␣line␣buffering␣in␣the␣invoked␣command␣again.

=head1␣WARNING␣

The␣order␣of␣arguments␣differs␣from␣that␣of␣open3().

=head1␣SEE␣ALSO

See␣L<IPC::Open3>␣for␣an␣alternative␣that␣handles␣STDERR␣as␣well.␣␣This
function␣is␣really␣just␣a␣wrapper␣around␣open3().

=cut
----------
Range: (3806378,3810162) (3784)
=head1␣NAME

IPC::Open3␣-␣open␣a␣process␣for␣reading,␣writing,␣and␣error␣handling␣using␣open3()

=head1␣SYNOPSIS

␣␣␣␣$pid␣=␣open3(\*CHLD_IN,␣\*CHLD_OUT,␣\*CHLD_ERR,
		␣␣␣␣'some␣cmd␣and␣args',␣'optarg',␣...);

␣␣␣␣my($wtr,␣$rdr,␣$err);
␣␣␣␣use␣Symbol␣'gensym';␣$err␣=␣gensym;
␣␣␣␣$pid␣=␣open3($wtr,␣$rdr,␣$err,
		␣␣␣␣'some␣cmd␣and␣args',␣'optarg',␣...);

␣␣␣␣waitpid(␣$pid,␣0␣);
␣␣␣␣my␣$child_exit_status␣=␣$?␣>>␣8;

=head1␣DESCRIPTION

Extremely␣similar␣to␣open2(),␣open3()␣spawns␣the␣given␣$cmd␣and
connects␣CHLD_OUT␣for␣reading␣from␣the␣child,␣CHLD_IN␣for␣writing␣to
the␣child,␣and␣CHLD_ERR␣for␣errors.␣␣If␣CHLD_ERR␣is␣false,␣or␣the
same␣file␣descriptor␣as␣CHLD_OUT,␣then␣STDOUT␣and␣STDERR␣of␣the␣child
are␣on␣the␣same␣filehandle␣(this␣means␣that␣an␣autovivified␣lexical
cannot␣be␣used␣for␣the␣STDERR␣filehandle,␣see␣SYNOPSIS).␣␣The␣CHLD_IN
will␣have␣autoflush␣turned␣on.

If␣CHLD_IN␣begins␣with␣C<<␣<&␣>>,␣then␣CHLD_IN␣will␣be␣closed␣in␣the
parent,␣and␣the␣child␣will␣read␣from␣it␣directly.␣␣If␣CHLD_OUT␣or
CHLD_ERR␣begins␣with␣C<<␣>&␣>>,␣then␣the␣child␣will␣send␣output
directly␣to␣that␣filehandle.␣␣In␣both␣cases,␣there␣will␣be␣a␣dup(2)
instead␣of␣a␣pipe(2)␣made.

If␣either␣reader␣or␣writer␣is␣the␣null␣string,␣this␣will␣be␣replaced
by␣an␣autogenerated␣filehandle.␣␣If␣so,␣you␣must␣pass␣a␣valid␣lvalue
in␣the␣parameter␣slot␣so␣it␣can␣be␣overwritten␣in␣the␣caller,␣or␣
an␣exception␣will␣be␣raised.

The␣filehandles␣may␣also␣be␣integers,␣in␣which␣case␣they␣are␣understood
as␣file␣descriptors.

open3()␣returns␣the␣process␣ID␣of␣the␣child␣process.␣␣It␣doesn't␣return␣on
failure:␣it␣just␣raises␣an␣exception␣matching␣C</^open3:/>.␣␣However,
C<exec>␣failures␣in␣the␣child␣(such␣as␣no␣such␣file␣or␣permission␣denied),
are␣just␣reported␣to␣CHLD_ERR,␣as␣it␣is␣not␣possible␣to␣trap␣them.

If␣the␣child␣process␣dies␣for␣any␣reason,␣the␣next␣write␣to␣CHLD_IN␣is
likely␣to␣generate␣a␣SIGPIPE␣in␣the␣parent,␣which␣is␣fatal␣by␣default.
So␣you␣may␣wish␣to␣handle␣this␣signal.

Note␣if␣you␣specify␣C<->␣as␣the␣command,␣in␣an␣analogous␣fashion␣to
C<open(FOO,␣"-|")>␣the␣child␣process␣will␣just␣be␣the␣forked␣Perl
process␣rather␣than␣an␣external␣command.␣␣This␣feature␣isn't␣yet
supported␣on␣Win32␣platforms.

open3()␣does␣not␣wait␣for␣and␣reap␣the␣child␣process␣after␣it␣exits.␣␣
Except␣for␣short␣programs␣where␣it's␣acceptable␣to␣let␣the␣operating␣system
take␣care␣of␣this,␣you␣need␣to␣do␣this␣yourself.␣␣This␣is␣normally␣as␣
simple␣as␣calling␣C<waitpid␣$pid,␣0>␣when␣you're␣done␣with␣the␣process.
Failing␣to␣do␣this␣can␣result␣in␣an␣accumulation␣of␣defunct␣or␣"zombie"
processes.␣␣See␣L<perlfunc/waitpid>␣for␣more␣information.

If␣you␣try␣to␣read␣from␣the␣child's␣stdout␣writer␣and␣their␣stderr
writer,␣you'll␣have␣problems␣with␣blocking,␣which␣means␣you'll␣want
to␣use␣select()␣or␣the␣IO::Select,␣which␣means␣you'd␣best␣use
sysread()␣instead␣of␣readline()␣for␣normal␣stuff.

This␣is␣very␣dangerous,␣as␣you␣may␣block␣forever.␣␣It␣assumes␣it's
going␣to␣talk␣to␣something␣like␣B<bc>,␣both␣writing␣to␣it␣and␣reading
from␣it.␣␣This␣is␣presumably␣safe␣because␣you␣"know"␣that␣commands
like␣B<bc>␣will␣read␣a␣line␣at␣a␣time␣and␣output␣a␣line␣at␣a␣time.
Programs␣like␣B<sort>␣that␣read␣their␣entire␣input␣stream␣first,
however,␣are␣quite␣apt␣to␣cause␣deadlock.

The␣big␣problem␣with␣this␣approach␣is␣that␣if␣you␣don't␣have␣control
over␣source␣code␣being␣run␣in␣the␣child␣process,␣you␣can't␣control
what␣it␣does␣with␣pipe␣buffering.␣␣Thus␣you␣can't␣just␣open␣a␣pipe␣to
C<cat␣-v>␣and␣continually␣read␣and␣write␣a␣line␣from␣it.

=head1␣See␣Also

=over␣4

=item␣L<IPC::Open2>

Like␣Open3␣but␣without␣STDERR␣catpure.

=item␣L<IPC::Run>

This␣is␣a␣CPAN␣module␣that␣has␣better␣error␣handling␣and␣more␣facilities
than␣Open3.

=back

=head1␣WARNING

The␣order␣of␣arguments␣differs␣from␣that␣of␣open2().

=cut
----------
Range: (3849893,3937956) (88063)
<<'END_OF_AUTOLOAD';

%SUBS␣=␣(

'URL_ENCODED'=>␣<<'END_OF_FUNC',
sub␣URL_ENCODED␣{␣'application/x-www-form-urlencoded';␣}
END_OF_FUNC

'MULTIPART'␣=>␣<<'END_OF_FUNC',
sub␣MULTIPART␣{␣␣'multipart/form-data';␣}
END_OF_FUNC

'SERVER_PUSH'␣=>␣<<'END_OF_FUNC',
sub␣SERVER_PUSH␣{␣'multipart/x-mixed-replace;boundary="'␣.␣shift()␣.␣'"';␣}
END_OF_FUNC

'new_MultipartBuffer'␣=>␣<<'END_OF_FUNC',
#␣Create␣a␣new␣multipart␣buffer
sub␣new_MultipartBuffer␣{
␣␣␣␣my($self,$boundary,$length)␣=␣@_;
␣␣␣␣return␣MultipartBuffer->new($self,$boundary,$length);
}
END_OF_FUNC

'read_from_client'␣=>␣<<'END_OF_FUNC',
#␣Read␣data␣from␣a␣file␣handle
sub␣read_from_client␣{
␣␣␣␣my($self,␣$buff,␣$len,␣$offset)␣=␣@_;
␣␣␣␣local␣$^W=0;␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣prevent␣a␣warning
␣␣␣␣return␣$MOD_PERL
␣␣␣␣␣␣␣␣?␣$self->r->read($$buff,␣$len,␣$offset)
␣␣␣␣␣␣␣␣:␣read(\*STDIN,␣$$buff,␣$len,␣$offset);
}
END_OF_FUNC

'read_from_stdin'␣=>␣<<'END_OF_FUNC',
#␣Read␣data␣from␣stdin␣until␣all␣is␣read
sub␣read_from_stdin␣{
␣␣␣␣my($self,␣$buff)␣=␣@_;
␣␣␣␣local␣$^W=0;␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣prevent␣a␣warning

␣␣␣␣#
␣␣␣␣#␣TODO:␣loop␣over␣STDIN␣until␣all␣is␣read
␣␣␣␣#

␣␣␣␣my($eoffound)␣=␣0;
␣␣␣␣my($localbuf)␣=␣'';
␣␣␣␣my($tempbuf)␣=␣'';
␣␣␣␣my($bufsiz)␣=␣1024;
␣␣␣␣my($res);
␣␣␣␣while␣($eoffound␣==␣0)␣{
	if␣(␣$MOD_PERL␣)␣{
	␣␣␣␣$res␣=␣$self->r->read($tempbuf,␣$bufsiz,␣0)
	}
	else␣{
	␣␣␣␣$res␣=␣read(\*STDIN,␣$tempbuf,␣$bufsiz);
	}

	if␣(␣!defined($res)␣)␣{
	␣␣␣␣#␣TODO:␣how␣to␣do␣error␣reporting␣?
	␣␣␣␣$eoffound␣=␣1;
	␣␣␣␣last;
	}
	if␣(␣$res␣==␣0␣)␣{
	␣␣␣␣$eoffound␣=␣1;
	␣␣␣␣last;
	}
	$localbuf␣.=␣$tempbuf;
␣␣␣␣}

␣␣␣␣$$buff␣=␣$localbuf;

␣␣␣␣return␣$res;
}
END_OF_FUNC

'delete'␣=>␣<<'END_OF_FUNC',
####␣Method:␣delete
#␣Deletes␣the␣named␣parameter␣entirely.
####
sub␣delete␣{
␣␣␣␣my($self,@p)␣=␣self_or_default(@_);
␣␣␣␣my(@names)␣=␣rearrange([NAME],@p);
␣␣␣␣my␣@to_delete␣=␣ref($names[0])␣eq␣'ARRAY'␣?␣@$names[0]␣:␣@names;
␣␣␣␣my␣%to_delete;
␣␣␣␣for␣my␣$name␣(@to_delete)
␣␣␣␣{
␣␣␣␣␣␣␣␣CORE::delete␣$self->{param}{$name};
␣␣␣␣␣␣␣␣CORE::delete␣$self->{'.fieldnames'}->{$name};
␣␣␣␣␣␣␣␣$to_delete{$name}++;
␣␣␣␣}
␣␣␣␣@{$self->{'.parameters'}}=grep␣{␣!exists($to_delete{$_})␣}␣$self->param();
␣␣␣␣return;
}
END_OF_FUNC

####␣Method:␣import_names
#␣Import␣all␣parameters␣into␣the␣given␣namespace.
#␣Assumes␣namespace␣'Q'␣if␣not␣specified
####
'import_names'␣=>␣<<'END_OF_FUNC',
sub␣import_names␣{
␣␣␣␣my($self,$namespace,$delete)␣=␣self_or_default(@_);
␣␣␣␣$namespace␣=␣'Q'␣unless␣defined($namespace);
␣␣␣␣die␣"Can't␣import␣names␣into␣\"main\"\n"␣if␣\%{"${namespace}::"}␣==␣\%::;
␣␣␣␣if␣($delete␣||␣$MOD_PERL␣||␣exists␣$ENV{'FCGI_ROLE'})␣{
	#␣can␣anyone␣find␣an␣easier␣way␣to␣do␣this?
	for␣(keys␣%{"${namespace}::"})␣{
	␣␣␣␣local␣*symbol␣=␣"${namespace}::${_}";
	␣␣␣␣undef␣$symbol;
	␣␣␣␣undef␣@symbol;
	␣␣␣␣undef␣%symbol;
	}
␣␣␣␣}
␣␣␣␣my($param,@value,$var);
␣␣␣␣for␣$param␣($self->param)␣{
	#␣protect␣against␣silly␣names
	($var␣=␣$param)=~tr/a-zA-Z0-9_/_/c;
	$var␣=~␣s/^(?=\d)/_/;
	local␣*symbol␣=␣"${namespace}::$var";
	@value␣=␣$self->param($param);
	@symbol␣=␣@value;
	$symbol␣=␣$value[0];
␣␣␣␣}
}
END_OF_FUNC

####␣Method:␣keywords
#␣Keywords␣acts␣a␣bit␣differently.␣␣Calling␣it␣in␣a␣list␣context
#␣returns␣the␣list␣of␣keywords.␣␣
#␣Calling␣it␣in␣a␣scalar␣context␣gives␣you␣the␣size␣of␣the␣list.
####
'keywords'␣=>␣<<'END_OF_FUNC',
sub␣keywords␣{
␣␣␣␣my($self,@values)␣=␣self_or_default(@_);
␣␣␣␣#␣If␣values␣is␣provided,␣then␣we␣set␣it.
␣␣␣␣$self->{param}{'keywords'}=[@values]␣if␣@values;
␣␣␣␣my(@result)␣=␣defined($self->{param}{'keywords'})␣?␣@{$self->{param}{'keywords'}}␣:␣();
␣␣␣␣@result;
}
END_OF_FUNC

#␣These␣are␣some␣tie()␣interfaces␣for␣compatibility
#␣with␣Steve␣Brenner's␣cgi-lib.pl␣routines
'Vars'␣=>␣<<'END_OF_FUNC',
sub␣Vars␣{
␣␣␣␣my␣$q␣=␣shift;
␣␣␣␣my␣%in;
␣␣␣␣tie(%in,CGI,$q);
␣␣␣␣return␣%in␣if␣wantarray;
␣␣␣␣return␣\%in;
}
END_OF_FUNC

#␣These␣are␣some␣tie()␣interfaces␣for␣compatibility
#␣with␣Steve␣Brenner's␣cgi-lib.pl␣routines
'ReadParse'␣=>␣<<'END_OF_FUNC',
sub␣ReadParse␣{
␣␣␣␣local(*in);
␣␣␣␣if␣(@_)␣{
	*in␣=␣$_[0];
␣␣␣␣}␣else␣{
	my␣$pkg␣=␣caller();
	*in=*{"${pkg}::in"};
␣␣␣␣}
␣␣␣␣tie(%in,CGI);
␣␣␣␣return␣scalar(keys␣%in);
}
END_OF_FUNC

'PrintHeader'␣=>␣<<'END_OF_FUNC',
sub␣PrintHeader␣{
␣␣␣␣my($self)␣=␣self_or_default(@_);
␣␣␣␣return␣$self->header();
}
END_OF_FUNC

'HtmlTop'␣=>␣<<'END_OF_FUNC',
sub␣HtmlTop␣{
␣␣␣␣my($self,@p)␣=␣self_or_default(@_);
␣␣␣␣return␣$self->start_html(@p);
}
END_OF_FUNC

'HtmlBot'␣=>␣<<'END_OF_FUNC',
sub␣HtmlBot␣{
␣␣␣␣my($self,@p)␣=␣self_or_default(@_);
␣␣␣␣return␣$self->end_html(@p);
}
END_OF_FUNC

'SplitParam'␣=>␣<<'END_OF_FUNC',
sub␣SplitParam␣{
␣␣␣␣my␣($param)␣=␣@_;
␣␣␣␣my␣(@params)␣=␣split␣("\0",␣$param);
␣␣␣␣return␣(wantarray␣?␣@params␣:␣$params[0]);
}
END_OF_FUNC

'MethGet'␣=>␣<<'END_OF_FUNC',
sub␣MethGet␣{
␣␣␣␣return␣request_method()␣eq␣'GET';
}
END_OF_FUNC

'MethPost'␣=>␣<<'END_OF_FUNC',
sub␣MethPost␣{
␣␣␣␣return␣request_method()␣eq␣'POST';
}
END_OF_FUNC

'MethPut'␣=>␣<<'END_OF_FUNC',
sub␣MethPut␣{
␣␣␣␣return␣request_method()␣eq␣'PUT';
}
END_OF_FUNC

'TIEHASH'␣=>␣<<'END_OF_FUNC',
sub␣TIEHASH␣{
␣␣␣␣my␣$class␣=␣shift;
␣␣␣␣my␣$arg␣␣␣=␣$_[0];
␣␣␣␣if␣(ref($arg)␣&&␣UNIVERSAL::isa($arg,'CGI'))␣{
␣␣␣␣␣␣␣return␣$arg;
␣␣␣␣}
␣␣␣␣return␣$Q␣||=␣$class->new(@_);
}
END_OF_FUNC

'STORE'␣=>␣<<'END_OF_FUNC',
sub␣STORE␣{
␣␣␣␣my␣$self␣=␣shift;
␣␣␣␣my␣$tag␣␣=␣shift;
␣␣␣␣my␣$vals␣=␣shift;
␣␣␣␣my␣@vals␣=␣index($vals,"\0")!=-1␣?␣split("\0",$vals)␣:␣$vals;
␣␣␣␣$self->param(-name=>$tag,-value=>\@vals);
}
END_OF_FUNC

'FETCH'␣=>␣<<'END_OF_FUNC',
sub␣FETCH␣{
␣␣␣␣return␣$_[0]␣if␣$_[1]␣eq␣'CGI';
␣␣␣␣return␣undef␣unless␣defined␣$_[0]->param($_[1]);
␣␣␣␣return␣join("\0",$_[0]->param($_[1]));
}
END_OF_FUNC

'FIRSTKEY'␣=>␣<<'END_OF_FUNC',
sub␣FIRSTKEY␣{
␣␣␣␣$_[0]->{'.iterator'}=0;
␣␣␣␣$_[0]->{'.parameters'}->[$_[0]->{'.iterator'}++];
}
END_OF_FUNC

'NEXTKEY'␣=>␣<<'END_OF_FUNC',
sub␣NEXTKEY␣{
␣␣␣␣$_[0]->{'.parameters'}->[$_[0]->{'.iterator'}++];
}
END_OF_FUNC

'EXISTS'␣=>␣<<'END_OF_FUNC',
sub␣EXISTS␣{
␣␣␣␣exists␣$_[0]->{param}{$_[1]};
}
END_OF_FUNC

'DELETE'␣=>␣<<'END_OF_FUNC',
sub␣DELETE␣{
␣␣␣␣$_[0]->delete($_[1]);
}
END_OF_FUNC

'CLEAR'␣=>␣<<'END_OF_FUNC',
sub␣CLEAR␣{
␣␣␣␣%{$_[0]}=();
}
####
END_OF_FUNC

####
#␣Append␣a␣new␣value␣to␣an␣existing␣query
####
'append'␣=>␣<<'EOF',
sub␣append␣{
␣␣␣␣my($self,@p)␣=␣self_or_default(@_);
␣␣␣␣my($name,$value)␣=␣rearrange([NAME,[VALUE,VALUES]],@p);
␣␣␣␣my(@values)␣=␣defined($value)␣?␣(ref($value)␣?␣@{$value}␣:␣$value)␣:␣();
␣␣␣␣if␣(@values)␣{
	$self->add_parameter($name);
	push(@{$self->{param}{$name}},@values);
␣␣␣␣}
␣␣␣␣return␣$self->param($name);
}
EOF

####␣Method:␣delete_all
#␣Delete␣all␣parameters
####
'delete_all'␣=>␣<<'EOF',
sub␣delete_all␣{
␣␣␣␣my($self)␣=␣self_or_default(@_);
␣␣␣␣my␣@param␣=␣$self->param();
␣␣␣␣$self->delete(@param);
}
EOF

'Delete'␣=>␣<<'EOF',
sub␣Delete␣{
␣␣␣␣my($self,@p)␣=␣self_or_default(@_);
␣␣␣␣$self->delete(@p);
}
EOF

'Delete_all'␣=>␣<<'EOF',
sub␣Delete_all␣{
␣␣␣␣my($self,@p)␣=␣self_or_default(@_);
␣␣␣␣$self->delete_all(@p);
}
EOF

####␣Method:␣autoescape
#␣If␣you␣want␣to␣turn␣off␣the␣autoescaping␣features,
#␣call␣this␣method␣with␣undef␣as␣the␣argument
'autoEscape'␣=>␣<<'END_OF_FUNC',
sub␣autoEscape␣{
␣␣␣␣my($self,$escape)␣=␣self_or_default(@_);
␣␣␣␣my␣$d␣=␣$self->{'escape'};
␣␣␣␣$self->{'escape'}␣=␣$escape;
␣␣␣␣$d;
}
END_OF_FUNC


####␣Method:␣version
#␣Return␣the␣current␣version
####
'version'␣=>␣<<'END_OF_FUNC',
sub␣version␣{
␣␣␣␣return␣$VERSION;
}
END_OF_FUNC

####␣Method:␣url_param
#␣Return␣a␣parameter␣in␣the␣QUERY_STRING,␣regardless␣of
#␣whether␣this␣was␣a␣POST␣or␣a␣GET
####
'url_param'␣=>␣<<'END_OF_FUNC',
sub␣url_param␣{
␣␣␣␣my␣($self,@p)␣=␣self_or_default(@_);
␣␣␣␣my␣$name␣=␣shift(@p);
␣␣␣␣return␣undef␣unless␣exists($ENV{QUERY_STRING});
␣␣␣␣unless␣(exists($self->{'.url_param'}))␣{
	$self->{'.url_param'}={};␣#␣empty␣hash
	if␣($ENV{QUERY_STRING}␣=~␣/=/)␣{
	␣␣␣␣my(@pairs)␣=␣split(/[&;]/,$ENV{QUERY_STRING});
	␣␣␣␣my($param,$value);
	␣␣␣␣for␣(@pairs)␣{
		($param,$value)␣=␣split('=',$_,2);
		$param␣=␣unescape($param);
		$value␣=␣unescape($value);
		push(@{$self->{'.url_param'}->{$param}},$value);
	␣␣␣␣}
	}␣else␣{
␣␣␣␣␣␣␣␣my␣@keywords␣=␣$self->parse_keywordlist($ENV{QUERY_STRING});
	␣␣␣␣$self->{'.url_param'}{'keywords'}␣=␣\@keywords␣if␣@keywords;
	}
␣␣␣␣}
␣␣␣␣return␣keys␣%{$self->{'.url_param'}}␣unless␣defined($name);
␣␣␣␣return␣()␣unless␣$self->{'.url_param'}->{$name};
␣␣␣␣return␣wantarray␣?␣@{$self->{'.url_param'}->{$name}}
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣:␣$self->{'.url_param'}->{$name}->[0];
}
END_OF_FUNC

####␣Method:␣Dump
#␣Returns␣a␣string␣in␣which␣all␣the␣known␣parameter/value␣
#␣pairs␣are␣represented␣as␣nested␣lists,␣mainly␣for␣the␣purposes␣
#␣of␣debugging.
####
'Dump'␣=>␣<<'END_OF_FUNC',
sub␣Dump␣{
␣␣␣␣my($self)␣=␣self_or_default(@_);
␣␣␣␣my($param,$value,@result);
␣␣␣␣return␣'<ul></ul>'␣unless␣$self->param;
␣␣␣␣push(@result,"<ul>");
␣␣␣␣for␣$param␣($self->param)␣{
	my($name)=$self->_maybe_escapeHTML($param);
	push(@result,"<li><strong>$name</strong></li>");
	push(@result,"<ul>");
	for␣$value␣($self->param($param))␣{
	␣␣␣␣$value␣=␣$self->_maybe_escapeHTML($value);
␣␣␣␣␣␣␣␣␣␣␣␣$value␣=~␣s/\n/<br␣\/>\n/g;
	␣␣␣␣push(@result,"<li>$value</li>");
	}
	push(@result,"</ul>");
␣␣␣␣}
␣␣␣␣push(@result,"</ul>");
␣␣␣␣return␣join("\n",@result);
}
END_OF_FUNC

####␣Method␣as_string
#
#␣synonym␣for␣"dump"
####
'as_string'␣=>␣<<'END_OF_FUNC',
sub␣as_string␣{
␣␣␣␣&Dump(@_);
}
END_OF_FUNC

####␣Method:␣save
#␣Write␣values␣out␣to␣a␣filehandle␣in␣such␣a␣way␣that␣they␣can
#␣be␣reinitialized␣by␣the␣filehandle␣form␣of␣the␣new()␣method
####
'save'␣=>␣<<'END_OF_FUNC',
sub␣save␣{
␣␣␣␣my($self,$filehandle)␣=␣self_or_default(@_);
␣␣␣␣$filehandle␣=␣to_filehandle($filehandle);
␣␣␣␣my($param);
␣␣␣␣local($,)␣=␣'';␣␣#␣set␣print␣field␣separator␣back␣to␣a␣sane␣value
␣␣␣␣local($\)␣=␣'';␣␣#␣set␣output␣line␣separator␣to␣a␣sane␣value
␣␣␣␣for␣$param␣($self->param)␣{
	my($escaped_param)␣=␣escape($param);
	my($value);
	for␣$value␣($self->param($param))␣{
	␣␣␣␣print␣$filehandle␣"$escaped_param=",escape("$value"),"\n"
	␣␣␣␣␣␣␣␣if␣length($escaped_param)␣or␣length($value);
	}
␣␣␣␣}
␣␣␣␣for␣(keys␣%{$self->{'.fieldnames'}})␣{
␣␣␣␣␣␣␣␣␣␣print␣$filehandle␣".cgifields=",escape("$_"),"\n";
␣␣␣␣}
␣␣␣␣print␣$filehandle␣"=\n";␣␣␣␣#␣end␣of␣record
}
END_OF_FUNC


####␣Method:␣save_parameters
#␣An␣alias␣for␣save()␣that␣is␣a␣better␣name␣for␣exportation.
#␣Only␣intended␣to␣be␣used␣with␣the␣function␣(non-OO)␣interface.
####
'save_parameters'␣=>␣<<'END_OF_FUNC',
sub␣save_parameters␣{
␣␣␣␣my␣$fh␣=␣shift;
␣␣␣␣return␣save(to_filehandle($fh));
}
END_OF_FUNC

####␣Method:␣restore_parameters
#␣A␣way␣to␣restore␣CGI␣parameters␣from␣an␣initializer.
#␣Only␣intended␣to␣be␣used␣with␣the␣function␣(non-OO)␣interface.
####
'restore_parameters'␣=>␣<<'END_OF_FUNC',
sub␣restore_parameters␣{
␣␣␣␣$Q␣=␣$CGI::DefaultClass->new(@_);
}
END_OF_FUNC

####␣Method:␣multipart_init
#␣Return␣a␣Content-Type:␣style␣header␣for␣server-push
#␣This␣has␣to␣be␣NPH␣on␣most␣web␣servers,␣and␣it␣is␣advisable␣to␣set␣$|␣=␣1
#
#␣Many␣thanks␣to␣Ed␣Jordan␣<ed@fidalgo.net>␣for␣this
#␣contribution,␣updated␣by␣Andrew␣Benham␣(adsb@bigfoot.com)
####
'multipart_init'␣=>␣<<'END_OF_FUNC',
sub␣multipart_init␣{
␣␣␣␣my($self,@p)␣=␣self_or_default(@_);
␣␣␣␣my($boundary,@other)␣=␣rearrange_header([BOUNDARY],@p);
␣␣␣␣if␣(!$boundary)␣{
␣␣␣␣␣␣␣␣$boundary␣=␣'-------␣=_';
␣␣␣␣␣␣␣␣my␣@chrs␣=␣('0'..'9',␣'A'..'Z',␣'a'..'z');
␣␣␣␣␣␣␣␣for␣(1..17)␣{
␣␣␣␣␣␣␣␣␣␣␣␣$boundary␣.=␣$chrs[rand(scalar␣@chrs)];
␣␣␣␣␣␣␣␣}
␣␣␣␣}

␣␣␣␣$self->{'separator'}␣=␣"$CRLF--$boundary$CRLF";
␣␣␣␣$self->{'final_separator'}␣=␣"$CRLF--$boundary--$CRLF";
␣␣␣␣$type␣=␣SERVER_PUSH($boundary);
␣␣␣␣return␣$self->header(
	-nph␣=>␣0,
	-type␣=>␣$type,
	(map␣{␣split␣"=",␣$_,␣2␣}␣@other),
␣␣␣␣)␣.␣"WARNING:␣YOUR␣BROWSER␣DOESN'T␣SUPPORT␣THIS␣SERVER-PUSH␣TECHNOLOGY."␣.␣$self->multipart_end;
}
END_OF_FUNC


####␣Method:␣multipart_start
#␣Return␣a␣Content-Type:␣style␣header␣for␣server-push,␣start␣of␣section
#
#␣Many␣thanks␣to␣Ed␣Jordan␣<ed@fidalgo.net>␣for␣this
#␣contribution,␣updated␣by␣Andrew␣Benham␣(adsb@bigfoot.com)
####
'multipart_start'␣=>␣<<'END_OF_FUNC',
sub␣multipart_start␣{
␣␣␣␣my(@header);
␣␣␣␣my($self,@p)␣=␣self_or_default(@_);
␣␣␣␣my($type,@other)␣=␣rearrange([TYPE],@p);
␣␣␣␣$type␣=␣$type␣||␣'text/html';
␣␣␣␣push(@header,"Content-Type:␣$type");

␣␣␣␣#␣rearrange()␣was␣designed␣for␣the␣HTML␣portion,␣so␣we
␣␣␣␣#␣need␣to␣fix␣it␣up␣a␣little.
␣␣␣␣for␣(@other)␣{
␣␣␣␣␣␣␣␣#␣Don't␣use␣\s␣because␣of␣perl␣bug␣21951
␣␣␣␣␣␣␣␣next␣unless␣my($header,$value)␣=␣/([^␣\r\n\t=]+)=\"?(.+?)\"?$/;
	($_␣=␣$header)␣=~␣s/^(\w)(.*)/$1␣.␣lc␣($2)␣.␣':␣'.$self->unescapeHTML($value)/e;
␣␣␣␣}
␣␣␣␣push(@header,@other);
␣␣␣␣my␣$header␣=␣join($CRLF,@header)."${CRLF}${CRLF}";
␣␣␣␣return␣$header;
}
END_OF_FUNC


####␣Method:␣multipart_end
#␣Return␣a␣MIME␣boundary␣separator␣for␣server-push,␣end␣of␣section
#
#␣Many␣thanks␣to␣Ed␣Jordan␣<ed@fidalgo.net>␣for␣this
#␣contribution
####
'multipart_end'␣=>␣<<'END_OF_FUNC',
sub␣multipart_end␣{
␣␣␣␣my($self,@p)␣=␣self_or_default(@_);
␣␣␣␣return␣$self->{'separator'};
}
END_OF_FUNC


####␣Method:␣multipart_final
#␣Return␣a␣MIME␣boundary␣separator␣for␣server-push,␣end␣of␣all␣sections
#
#␣Contributed␣by␣Andrew␣Benham␣(adsb@bigfoot.com)
####
'multipart_final'␣=>␣<<'END_OF_FUNC',
sub␣multipart_final␣{
␣␣␣␣my($self,@p)␣=␣self_or_default(@_);
␣␣␣␣return␣$self->{'final_separator'}␣.␣"WARNING:␣YOUR␣BROWSER␣DOESN'T␣SUPPORT␣THIS␣SERVER-PUSH␣TECHNOLOGY."␣.␣$CRLF;
}
END_OF_FUNC


####␣Method:␣header
#␣Return␣a␣Content-Type:␣style␣header
#
####
'header'␣=>␣<<'END_OF_FUNC',
sub␣header␣{
␣␣␣␣my($self,@p)␣=␣self_or_default(@_);
␣␣␣␣my(@header);

␣␣␣␣return␣""␣if␣$self->{'.header_printed'}++␣and␣$HEADERS_ONCE;

␣␣␣␣my($type,$status,$cookie,$target,$expires,$nph,$charset,$attachment,$p3p,@other)␣=␣
	rearrange([['TYPE','CONTENT_TYPE','CONTENT-TYPE'],
			␣␣␣␣'STATUS',['COOKIE','COOKIES'],'TARGET',
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣'EXPIRES','NPH','CHARSET',
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣'ATTACHMENT','P3P'],@p);

␣␣␣␣#␣CR␣escaping␣for␣values,␣per␣RFC␣822
␣␣␣␣for␣my␣$header␣($type,$status,$cookie,$target,$expires,$nph,$charset,$attachment,$p3p,@other)␣{
␣␣␣␣␣␣␣␣if␣(defined␣$header)␣{
␣␣␣␣␣␣␣␣␣␣␣␣#␣From␣RFC␣822:
␣␣␣␣␣␣␣␣␣␣␣␣#␣Unfolding␣␣is␣␣accomplished␣␣by␣regarding␣␣␣CRLF␣␣␣immediately
␣␣␣␣␣␣␣␣␣␣␣␣#␣followed␣␣by␣␣a␣␣LWSP-char␣␣as␣equivalent␣to␣the␣LWSP-char.
␣␣␣␣␣␣␣␣␣␣␣␣$header␣=~␣s/$CRLF(\s)/$1/g;

␣␣␣␣␣␣␣␣␣␣␣␣#␣All␣other␣uses␣of␣newlines␣are␣invalid␣input.␣
␣␣␣␣␣␣␣␣␣␣␣␣if␣($header␣=~␣m/$CRLF|\015|\012/)␣{
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣shorten␣very␣long␣values␣in␣the␣diagnostic
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣$header␣=␣substr($header,0,72).'...'␣if␣(length␣$header␣>␣72);
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣die␣"Invalid␣header␣value␣contains␣a␣newline␣not␣followed␣by␣whitespace:␣$header";
␣␣␣␣␣␣␣␣␣␣␣␣}
␣␣␣␣␣␣␣␣}␣
␣␣␣}

␣␣␣␣$nph␣␣␣␣␣||=␣$NPH;

␣␣␣␣$type␣||=␣'text/html'␣unless␣defined($type);

␣␣␣␣if␣(defined␣$charset)␣{
␣␣␣␣␣␣$self->charset($charset);
␣␣␣␣}␣else␣{
␣␣␣␣␣␣$charset␣=␣$self->charset␣if␣$type␣=~␣/^text\//;
␣␣␣␣}
␣␣␣$charset␣||=␣'';

␣␣␣␣#␣rearrange()␣was␣designed␣for␣the␣HTML␣portion,␣so␣we
␣␣␣␣#␣need␣to␣fix␣it␣up␣a␣little.
␣␣␣␣for␣(@other)␣{
␣␣␣␣␣␣␣␣#␣Don't␣use␣\s␣because␣of␣perl␣bug␣21951
␣␣␣␣␣␣␣␣next␣unless␣my($header,$value)␣=␣/([^␣\r\n\t=]+)=\"?(.+?)\"?$/s;
␣␣␣␣␣␣␣␣($_␣=␣$header)␣=~␣s/^(\w)(.*)/"\u$1\L$2"␣.␣':␣'.$self->unescapeHTML($value)/e;
␣␣␣␣}

␣␣␣␣$type␣.=␣";␣charset=$charset"
␣␣␣␣␣␣if␣␣␣␣␣$type␣ne␣''
␣␣␣␣␣␣␣␣␣and␣$type␣!~␣/\bcharset\b/
␣␣␣␣␣␣␣␣␣and␣defined␣$charset
␣␣␣␣␣␣␣␣␣and␣$charset␣ne␣'';

␣␣␣␣#␣Maybe␣future␣compatibility.␣␣Maybe␣not.
␣␣␣␣my␣$protocol␣=␣$ENV{SERVER_PROTOCOL}␣||␣'HTTP/1.0';
␣␣␣␣push(@header,$protocol␣.␣'␣'␣.␣($status␣||␣'200␣OK'))␣if␣$nph;
␣␣␣␣push(@header,"Server:␣"␣.␣&server_software())␣if␣$nph;

␣␣␣␣push(@header,"Status:␣$status")␣if␣$status;
␣␣␣␣push(@header,"Window-Target:␣$target")␣if␣$target;
␣␣␣␣if␣($p3p)␣{
␣␣␣␣␣␣␣$p3p␣=␣join␣'␣',@$p3p␣if␣ref($p3p)␣eq␣'ARRAY';
␣␣␣␣␣␣␣push(@header,qq(P3P:␣policyref="/w3c/p3p.xml",␣CP="$p3p"));
␣␣␣␣}
␣␣␣␣#␣push␣all␣the␣cookies␣--␣there␣may␣be␣several
␣␣␣␣if␣($cookie)␣{
	my(@cookie)␣=␣ref($cookie)␣&&␣ref($cookie)␣eq␣'ARRAY'␣?␣@{$cookie}␣:␣$cookie;
	for␣(@cookie)␣{
␣␣␣␣␣␣␣␣␣␣␣␣my␣$cs␣=␣UNIVERSAL::isa($_,'CGI::Cookie')␣?␣$_->as_string␣:␣$_;
	␣␣␣␣push(@header,"Set-Cookie:␣$cs")␣if␣$cs␣ne␣'';
	}
␣␣␣␣}
␣␣␣␣#␣if␣the␣user␣indicates␣an␣expiration␣time,␣then␣we␣need
␣␣␣␣#␣both␣an␣Expires␣and␣a␣Date␣header␣(so␣that␣the␣browser␣is
␣␣␣␣#␣uses␣OUR␣clock)
␣␣␣␣push(@header,"Expires:␣"␣.␣expires($expires,'http'))
	if␣$expires;
␣␣␣␣push(@header,"Date:␣"␣.␣expires(0,'http'))␣if␣$expires␣||␣$cookie␣||␣$nph;
␣␣␣␣push(@header,"Pragma:␣no-cache")␣if␣$self->cache();
␣␣␣␣push(@header,"Content-Disposition:␣attachment;␣filename=\"$attachment\"")␣if␣$attachment;
␣␣␣␣push(@header,map␣{ucfirst␣$_}␣@other);
␣␣␣␣push(@header,"Content-Type:␣$type")␣if␣$type␣ne␣'';
␣␣␣␣my␣$header␣=␣join($CRLF,@header)."${CRLF}${CRLF}";
␣␣␣␣if␣(($MOD_PERL␣>=␣1)␣&&␣!$nph)␣{
␣␣␣␣␣␣␣␣$self->r->send_cgi_header($header);
␣␣␣␣␣␣␣␣return␣'';
␣␣␣␣}
␣␣␣␣return␣$header;
}
END_OF_FUNC


####␣Method:␣cache
#␣Control␣whether␣header()␣will␣produce␣the␣no-cache
#␣Pragma␣directive.
####
'cache'␣=>␣<<'END_OF_FUNC',
sub␣cache␣{
␣␣␣␣my($self,$new_value)␣=␣self_or_default(@_);
␣␣␣␣$new_value␣=␣''␣unless␣$new_value;
␣␣␣␣if␣($new_value␣ne␣'')␣{
	$self->{'cache'}␣=␣$new_value;
␣␣␣␣}
␣␣␣␣return␣$self->{'cache'};
}
END_OF_FUNC


####␣Method:␣redirect
#␣Return␣a␣Location:␣style␣header
#
####
'redirect'␣=>␣<<'END_OF_FUNC',
sub␣redirect␣{
␣␣␣␣my($self,@p)␣=␣self_or_default(@_);
␣␣␣␣my($url,$target,$status,$cookie,$nph,@other)␣=␣
␣␣␣␣␣␣␣␣␣rearrange([[LOCATION,URI,URL],TARGET,STATUS,['COOKIE','COOKIES'],NPH],@p);
␣␣␣␣$status␣=␣'302␣Found'␣unless␣defined␣$status;
␣␣␣␣$url␣||=␣$self->self_url;
␣␣␣␣my(@o);
␣␣␣␣for␣(@other)␣{␣tr/\"//d;␣push(@o,split("=",$_,2));␣}
␣␣␣␣unshift(@o,
	␣'-Status'␣␣=>␣$status,
	␣'-Location'=>␣$url,
	␣'-nph'␣␣␣␣␣=>␣$nph);
␣␣␣␣unshift(@o,'-Target'=>$target)␣if␣$target;
␣␣␣␣unshift(@o,'-Type'=>'');
␣␣␣␣my␣@unescaped;
␣␣␣␣unshift(@unescaped,'-Cookie'=>$cookie)␣if␣$cookie;
␣␣␣␣return␣$self->header((map␣{$self->unescapeHTML($_)}␣@o),@unescaped);
}
END_OF_FUNC


####␣Method:␣start_html
#␣Canned␣HTML␣header
#
#␣Parameters:
#␣$title␣->␣(optional)␣The␣title␣for␣this␣HTML␣document␣(-title)
#␣$author␣->␣(optional)␣e-mail␣address␣of␣the␣author␣(-author)
#␣$base␣->␣(optional)␣if␣set␣to␣true,␣will␣enter␣the␣BASE␣address␣of␣this␣document
#␣␣␣␣␣␣␣␣␣␣for␣resolving␣relative␣references␣(-base)␣
#␣$xbase␣->␣(optional)␣alternative␣base␣at␣some␣remote␣location␣(-xbase)
#␣$target␣->␣(optional)␣target␣window␣to␣load␣all␣links␣into␣(-target)
#␣$script␣->␣(option)␣Javascript␣code␣(-script)
#␣$no_script␣->␣(option)␣Javascript␣<noscript>␣tag␣(-noscript)
#␣$meta␣->␣(optional)␣Meta␣information␣tags
#␣$head␣->␣(optional)␣any␣other␣elements␣you'd␣like␣to␣incorporate␣into␣the␣<head>␣tag
#␣␣␣␣␣␣␣␣␣␣␣(a␣scalar␣or␣array␣ref)
#␣$style␣->␣(optional)␣reference␣to␣an␣external␣style␣sheet
#␣@other␣->␣(optional)␣any␣other␣named␣parameters␣you'd␣like␣to␣incorporate␣into
#␣␣␣␣␣␣␣␣␣␣␣the␣<body>␣tag.
####
'start_html'␣=>␣<<'END_OF_FUNC',
sub␣start_html␣{
␣␣␣␣my($self,@p)␣=␣&self_or_default(@_);
␣␣␣␣my($title,$author,$base,$xbase,$script,$noscript,
␣␣␣␣␣␣␣␣$target,$meta,$head,$style,$dtd,$lang,$encoding,$declare_xml,@other)␣=␣
	rearrange([TITLE,AUTHOR,BASE,XBASE,SCRIPT,NOSCRIPT,TARGET,
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣META,HEAD,STYLE,DTD,LANG,ENCODING,DECLARE_XML],@p);

␣␣␣␣$self->element_id(0);
␣␣␣␣$self->element_tab(0);

␣␣␣␣$encoding␣=␣lc($self->charset)␣unless␣defined␣$encoding;

␣␣␣␣#␣Need␣to␣sort␣out␣the␣DTD␣before␣it's␣okay␣to␣call␣escapeHTML().
␣␣␣␣my(@result,$xml_dtd);
␣␣␣␣if␣($dtd)␣{
␣␣␣␣␣␣␣␣if␣(defined(ref($dtd))␣and␣(ref($dtd)␣eq␣'ARRAY'))␣{
␣␣␣␣␣␣␣␣␣␣␣␣$dtd␣=␣$DEFAULT_DTD␣unless␣$dtd->[0]␣=~␣m|^-//|;
␣␣␣␣␣␣␣␣}␣else␣{
␣␣␣␣␣␣␣␣␣␣␣␣$dtd␣=␣$DEFAULT_DTD␣unless␣$dtd␣=~␣m|^-//|;
␣␣␣␣␣␣␣␣}
␣␣␣␣}␣else␣{
␣␣␣␣␣␣␣␣$dtd␣=␣$XHTML␣?␣XHTML_DTD␣:␣$DEFAULT_DTD;
␣␣␣␣}

␣␣␣␣$xml_dtd++␣if␣ref($dtd)␣eq␣'ARRAY'␣&&␣$dtd->[0]␣=~␣/\bXHTML\b/i;
␣␣␣␣$xml_dtd++␣if␣ref($dtd)␣eq␣''␣&&␣$dtd␣=~␣/\bXHTML\b/i;
␣␣␣␣push␣@result,qq(<?xml␣version="1.0"␣encoding="$encoding"?>)␣if␣$xml_dtd␣&&␣$declare_xml;

␣␣␣␣if␣(ref($dtd)␣&&␣ref($dtd)␣eq␣'ARRAY')␣{
␣␣␣␣␣␣␣␣push(@result,qq(<!DOCTYPE␣html\n\tPUBLIC␣"$dtd->[0]"\n\t␣"$dtd->[1]">));
	$DTD_PUBLIC_IDENTIFIER␣=␣$dtd->[0];
␣␣␣␣}␣else␣{
␣␣␣␣␣␣␣␣push(@result,qq(<!DOCTYPE␣html\n\tPUBLIC␣"$dtd">));
	$DTD_PUBLIC_IDENTIFIER␣=␣$dtd;
␣␣␣␣}

␣␣␣␣#␣Now␣that␣we␣know␣whether␣we're␣using␣the␣HTML␣3.2␣DTD␣or␣not,␣it's␣okay␣to
␣␣␣␣#␣call␣escapeHTML().␣␣Strangely␣enough,␣the␣title␣needs␣to␣be␣escaped␣as
␣␣␣␣#␣HTML␣while␣the␣author␣needs␣to␣be␣escaped␣as␣a␣URL.
␣␣␣␣$title␣=␣$self->_maybe_escapeHTML($title␣||␣'Untitled␣Document');
␣␣␣␣$author␣=␣$self->escape($author);

␣␣␣␣if␣($DTD_PUBLIC_IDENTIFIER␣=~␣/[^X]HTML␣(2\.0|3\.2|4\.01?)/i)␣{
	$lang␣=␣""␣unless␣defined␣$lang;
	$XHTML␣=␣0;
␣␣␣␣}
␣␣␣␣else␣{
	$lang␣=␣'en-US'␣unless␣defined␣$lang;
␣␣␣␣}

␣␣␣␣my␣$lang_bits␣=␣$lang␣ne␣''␣?␣qq(␣lang="$lang"␣xml:lang="$lang")␣:␣'';
␣␣␣␣my␣$meta_bits␣=␣qq(<meta␣http-equiv="Content-Type"␣content="text/html;␣charset=$encoding"␣/>)␣
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣if␣$XHTML␣&&␣$encoding␣&&␣!$declare_xml;

␣␣␣␣push(@result,$XHTML␣?␣qq(<html␣xmlns="http://www.w3.org/1999/xhtml"$lang_bits>\n<head>\n<title>$title</title>)
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣:␣($lang␣?␣qq(<html␣lang="$lang">)␣:␣"<html>")
	␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣.␣"<head><title>$title</title>");
	if␣(defined␣$author)␣{
␣␣␣␣push(@result,$XHTML␣?␣"<link␣rev=\"made\"␣href=\"mailto:$author\"␣/>"
			:␣"<link␣rev=\"made\"␣href=\"mailto:$author\">");
	}

␣␣␣␣if␣($base␣||␣$xbase␣||␣$target)␣{
	my␣$href␣=␣$xbase␣||␣$self->url('-path'=>1);
	my␣$t␣=␣$target␣?␣qq/␣target="$target"/␣:␣'';
	push(@result,$XHTML␣?␣qq(<base␣href="$href"$t␣/>)␣:␣qq(<base␣href="$href"$t>));
␣␣␣␣}

␣␣␣␣if␣($meta␣&&␣ref($meta)␣&&␣(ref($meta)␣eq␣'HASH'))␣{
	for␣(keys␣%$meta)␣{␣push(@result,$XHTML␣?␣qq(<meta␣name="$_"␣content="$meta->{$_}"␣/>)␣
			:␣qq(<meta␣name="$_"␣content="$meta->{$_}">));␣}
␣␣␣␣}

␣␣␣␣my␣$meta_bits_set␣=␣0;
␣␣␣␣if(␣$head␣)␣{
␣␣␣␣␣␣␣␣if(␣ref␣$head␣)␣{
␣␣␣␣␣␣␣␣␣␣␣␣push␣@result,␣@$head;
␣␣␣␣␣␣␣␣␣␣␣␣$meta_bits_set␣=␣1␣if␣grep␣{␣/http-equiv=["']Content-Type/i␣}@$head;
␣␣␣␣␣␣␣␣}
␣␣␣␣␣␣␣␣else␣{
␣␣␣␣␣␣␣␣␣␣␣␣push␣@result,␣$head;
␣␣␣␣␣␣␣␣␣␣␣␣$meta_bits_set␣=␣1␣if␣$head␣=~␣/http-equiv=["']Content-Type/i;
␣␣␣␣␣␣␣␣}
␣␣␣␣}

␣␣␣␣#␣handle␣the␣infrequently-used␣-style␣and␣-script␣parameters
␣␣␣␣push(@result,$self->_style($style))␣␣␣if␣defined␣$style;
␣␣␣␣push(@result,$self->_script($script))␣if␣defined␣$script;
␣␣␣␣push(@result,$meta_bits)␣␣␣␣␣␣␣␣␣␣␣␣␣␣if␣defined␣$meta_bits␣and␣!$meta_bits_set;

␣␣␣␣#␣handle␣-noscript␣parameter
␣␣␣␣push(@result,<<END)␣if␣$noscript;
<noscript>
$noscript
</noscript>
END
␣␣␣␣;
␣␣␣␣my($other)␣=␣@other␣?␣"␣@other"␣:␣'';
␣␣␣␣push(@result,"</head>\n<body$other>\n");
␣␣␣␣return␣join("\n",@result);
}
END_OF_FUNC

###␣Method:␣_style
#␣internal␣method␣for␣generating␣a␣CSS␣style␣section
####
'_style'␣=>␣<<'END_OF_FUNC',
sub␣_style␣{
␣␣␣␣my␣($self,$style)␣=␣@_;
␣␣␣␣my␣(@result);

␣␣␣␣my␣$type␣=␣'text/css';
␣␣␣␣my␣$rel␣␣=␣'stylesheet';


␣␣␣␣my␣$cdata_start␣=␣$XHTML␣?␣"\n<!--/*␣<![CDATA[␣*/"␣:␣"\n<!--␣";
␣␣␣␣my␣$cdata_end␣␣␣=␣$XHTML␣?␣"\n/*␣]]>␣*/-->\n"␣:␣"␣-->\n";

␣␣␣␣my␣@s␣=␣ref($style)␣eq␣'ARRAY'␣?␣@$style␣:␣$style;
␣␣␣␣my␣$other␣=␣'';

␣␣␣␣for␣my␣$s␣(@s)␣{
␣␣␣␣␣␣if␣(ref($s))␣{
␣␣␣␣␣␣␣my($src,$code,$verbatim,$stype,$alternate,$foo,@other)␣=
␣␣␣␣␣␣␣␣␣␣␣rearrange([qw(SRC␣CODE␣VERBATIM␣TYPE␣ALTERNATE␣FOO)],
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣('-foo'=>'bar',
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣ref($s)␣eq␣'ARRAY'␣?␣@$s␣:␣%$s));
␣␣␣␣␣␣␣my␣$type␣=␣defined␣$stype␣?␣$stype␣:␣'text/css';
␣␣␣␣␣␣␣my␣$rel␣␣=␣$alternate␣?␣'alternate␣stylesheet'␣:␣'stylesheet';
␣␣␣␣␣␣␣$other␣=␣"@other"␣if␣@other;

␣␣␣␣␣␣␣if␣(ref($src)␣eq␣"ARRAY")␣#␣Check␣to␣see␣if␣the␣$src␣variable␣is␣an␣array␣reference
␣␣␣␣␣␣␣{␣#␣If␣it␣is,␣push␣a␣LINK␣tag␣for␣each␣one
␣␣␣␣␣␣␣␣␣␣␣for␣$src␣(@$src)
␣␣␣␣␣␣␣␣␣{
␣␣␣␣␣␣␣␣␣␣␣push(@result,$XHTML␣?␣qq(<link␣rel="$rel"␣type="$type"␣href="$src"␣$other/>)
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣:␣qq(<link␣rel="$rel"␣type="$type"␣href="$src"$other>))␣if␣$src;
␣␣␣␣␣␣␣␣␣}
␣␣␣␣␣␣␣}
␣␣␣␣␣␣␣else
␣␣␣␣␣␣␣{␣#␣Otherwise,␣push␣the␣single␣-src,␣if␣it␣exists.
␣␣␣␣␣␣␣␣␣push(@result,$XHTML␣?␣qq(<link␣rel="$rel"␣type="$type"␣href="$src"␣$other/>)
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣:␣qq(<link␣rel="$rel"␣type="$type"␣href="$src"$other>)
␣␣␣␣␣␣␣␣␣␣␣␣␣␣)␣if␣$src;
␣␣␣␣␣␣␣␣}
␣␣␣␣␣if␣($verbatim)␣{
␣␣␣␣␣␣␣␣␣␣␣my␣@v␣=␣ref($verbatim)␣eq␣'ARRAY'␣?␣@$verbatim␣:␣$verbatim;
␣␣␣␣␣␣␣␣␣␣␣push(@result,␣"<style␣type=\"text/css\">\n$_\n</style>")␣for␣@v;
␣␣␣␣␣␣}
␣␣␣␣␣␣my␣@c␣=␣ref($code)␣eq␣'ARRAY'␣?␣@$code␣:␣$code␣if␣$code;
␣␣␣␣␣␣push(@result,style({'type'=>$type},"$cdata_start\n$_\n$cdata_end"))␣for␣@c;

␣␣␣␣␣␣}␣else␣{
␣␣␣␣␣␣␣␣␣␣␣my␣$src␣=␣$s;
␣␣␣␣␣␣␣␣␣␣␣push(@result,$XHTML␣?␣qq(<link␣rel="$rel"␣type="$type"␣href="$src"␣$other/>)
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣:␣qq(<link␣rel="$rel"␣type="$type"␣href="$src"$other>));
␣␣␣␣␣␣}
␣␣␣␣}
␣␣␣␣@result;
}
END_OF_FUNC

'_script'␣=>␣<<'END_OF_FUNC',
sub␣_script␣{
␣␣␣␣my␣($self,$script)␣=␣@_;
␣␣␣␣my␣(@result);

␣␣␣␣my␣(@scripts)␣=␣ref($script)␣eq␣'ARRAY'␣?␣@$script␣:␣($script);
␣␣␣␣for␣$script␣(@scripts)␣{
	my($src,$code,$language);
	if␣(ref($script))␣{␣#␣script␣is␣a␣hash
	␣␣␣␣($src,$code,$type)␣=
		rearrange(['SRC','CODE',['LANGUAGE','TYPE']],
				␣'-foo'=>'bar',	#␣a␣trick␣to␣allow␣the␣'-'␣to␣be␣omitted
				␣ref($script)␣eq␣'ARRAY'␣?␣@$script␣:␣%$script);
␣␣␣␣␣␣␣␣␣␣␣␣$type␣||=␣'text/javascript';
␣␣␣␣␣␣␣␣␣␣␣␣unless␣($type␣=~␣m!\w+/\w+!)␣{
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣$type␣=~␣s/[\d.]+$//;
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣$type␣=␣"text/$type";
␣␣␣␣␣␣␣␣␣␣␣␣}
	}␣else␣{
	␣␣␣␣($src,$code,$type)␣=␣('',$script,␣'text/javascript');
	}

␣␣␣␣my␣$comment␣=␣'//';␣␣#␣javascript␣by␣default
␣␣␣␣$comment␣=␣'#'␣if␣$type=~/perl|tcl/i;
␣␣␣␣$comment␣=␣"'"␣if␣$type=~/vbscript/i;

␣␣␣␣my␣($cdata_start,$cdata_end);
␣␣␣␣if␣($XHTML)␣{
␣␣␣␣␣␣␣$cdata_start␣␣␣␣=␣"$comment<![CDATA[\n";
␣␣␣␣␣␣␣$cdata_end␣␣␣␣␣.=␣"\n$comment]]>";
␣␣␣␣}␣else␣{
␣␣␣␣␣␣␣$cdata_start␣␣=␣␣"\n<!--␣Hide␣script\n";
␣␣␣␣␣␣␣$cdata_end␣␣␣␣=␣$comment;
␣␣␣␣␣␣␣$cdata_end␣␣␣.=␣"␣End␣script␣hiding␣-->\n";
␣␣␣}
␣␣␣␣␣my(@satts);
␣␣␣␣␣push(@satts,'src'=>$src)␣if␣$src;
␣␣␣␣␣push(@satts,'type'=>$type);
␣␣␣␣␣$code␣=␣$cdata_start␣.␣$code␣.␣$cdata_end␣if␣defined␣$code;
␣␣␣␣␣push(@result,$self->script({@satts},$code␣||␣''));
␣␣␣␣}
␣␣␣␣@result;
}
END_OF_FUNC

####␣Method:␣end_html
#␣End␣an␣HTML␣document.
#␣Trivial␣method␣for␣completeness.␣␣Just␣returns␣"</body>"
####
'end_html'␣=>␣<<'END_OF_FUNC',
sub␣end_html␣{
␣␣␣␣return␣"\n</body>\n</html>";
}
END_OF_FUNC


################################
#␣METHODS␣USED␣IN␣BUILDING␣FORMS
################################

####␣Method:␣isindex
#␣Just␣prints␣out␣the␣isindex␣tag.
#␣Parameters:
#␣␣$action␣->␣optional␣URL␣of␣script␣to␣run
#␣Returns:
#␣␣␣A␣string␣containing␣a␣<isindex>␣tag
'isindex'␣=>␣<<'END_OF_FUNC',
sub␣isindex␣{
␣␣␣␣my($self,@p)␣=␣self_or_default(@_);
␣␣␣␣my($action,@other)␣=␣rearrange([ACTION],@p);
␣␣␣␣$action␣=␣qq/␣action="$action"/␣if␣$action;
␣␣␣␣my($other)␣=␣@other␣?␣"␣@other"␣:␣'';
␣␣␣␣return␣$XHTML␣?␣"<isindex$action$other␣/>"␣:␣"<isindex$action$other>";
}
END_OF_FUNC


####␣Method:␣startform
#␣This␣method␣is␣DEPRECATED
#␣Start␣a␣form
#␣Parameters:
#␣␣␣$method␣->␣optional␣submission␣method␣to␣use␣(GET␣or␣POST)
#␣␣␣$action␣->␣optional␣URL␣of␣script␣to␣run
#␣␣␣$enctype␣->encoding␣to␣use␣(URL_ENCODED␣or␣MULTIPART)
'startform'␣=>␣<<'END_OF_FUNC',
sub␣startform␣{
␣␣␣␣my($self,@p)␣=␣self_or_default(@_);

␣␣␣␣my($method,$action,$enctype,@other)␣=␣
	rearrange([METHOD,ACTION,ENCTYPE],@p);

␣␣␣␣$method␣␣=␣$self->_maybe_escapeHTML(lc($method␣||␣'post'));
␣␣␣␣$enctype␣=␣$self->_maybe_escapeHTML($enctype␣||␣&URL_ENCODED);
␣␣␣␣if␣(defined␣$action)␣{
␣␣␣␣␣␣␣$action␣=␣$self->_maybe_escapeHTML($action);
␣␣␣␣}
␣␣␣␣else␣{
␣␣␣␣␣␣␣$action␣=␣$self->_maybe_escapeHTML($self->request_uri␣||␣$self->self_url);
␣␣␣␣}
␣␣␣␣$action␣=␣qq(action="$action");
␣␣␣␣my($other)␣=␣@other␣?␣"␣@other"␣:␣'';
␣␣␣␣$self->{'.parametersToAdd'}={};
␣␣␣␣return␣qq/<form␣method="$method"␣$action␣enctype="$enctype"$other>\n/;
}
END_OF_FUNC

####␣Method:␣start_form
#␣Start␣a␣form
#␣Parameters:
#␣␣␣$method␣->␣optional␣submission␣method␣to␣use␣(GET␣or␣POST)
#␣␣␣$action␣->␣optional␣URL␣of␣script␣to␣run
#␣␣␣$enctype␣->encoding␣to␣use␣(URL_ENCODED␣or␣MULTIPART)
'start_form'␣=>␣<<'END_OF_FUNC',
sub␣start_form␣{
␣␣␣␣my($self,@p)␣=␣self_or_default(@_);

␣␣␣␣my($method,$action,$enctype,@other)␣=␣
	rearrange([METHOD,ACTION,ENCTYPE],@p);

␣␣␣␣$method␣␣=␣$self->_maybe_escapeHTML(lc($method␣||␣'post'));

␣␣␣␣if(␣$XHTML␣){
␣␣␣␣␣␣␣␣$enctype␣=␣$self->_maybe_escapeHTML($enctype␣||␣&MULTIPART);
␣␣␣␣}else{
␣␣␣␣␣␣␣␣$enctype␣=␣$self->_maybe_escapeHTML($enctype␣||␣&URL_ENCODED);
␣␣␣␣}

␣␣␣␣if␣(defined␣$action)␣{
␣␣␣␣␣␣␣$action␣=␣$self->_maybe_escapeHTML($action);
␣␣␣␣}
␣␣␣␣else␣{
␣␣␣␣␣␣␣$action␣=␣$self->_maybe_escapeHTML($self->request_uri␣||␣$self->self_url);
␣␣␣␣}
␣␣␣␣$action␣=␣qq(action="$action");
␣␣␣␣my($other)␣=␣@other␣?␣"␣@other"␣:␣'';
␣␣␣␣$self->{'.parametersToAdd'}={};
␣␣␣␣return␣qq/<form␣method="$method"␣$action␣enctype="$enctype"$other>\n/;
}
END_OF_FUNC

####␣Method:␣start_multipart_form
'start_multipart_form'␣=>␣<<'END_OF_FUNC',
sub␣start_multipart_form␣{
␣␣␣␣my($self,@p)␣=␣self_or_default(@_);
␣␣␣␣if␣(defined($p[0])␣&&␣substr($p[0],0,1)␣eq␣'-')␣{
␣␣␣␣␣␣return␣$self->start_form(-enctype=>&MULTIPART,@p);
␣␣␣␣}␣else␣{
	my($method,$action,@other)␣=␣
	␣␣␣␣rearrange([METHOD,ACTION],@p);
	return␣$self->start_form($method,$action,&MULTIPART,@other);
␣␣␣␣}
}
END_OF_FUNC



####␣Method:␣end_form
#␣End␣a␣form
'end_form'␣=>␣<<'END_OF_FUNC',
sub␣end_form␣{
␣␣␣␣my($self,@p)␣=␣self_or_default(@_);
␣␣␣␣if␣(␣$NOSTICKY␣)␣{
␣␣␣␣␣␣␣␣return␣wantarray␣?␣("</form>")␣:␣"\n</form>";
␣␣␣␣}␣else␣{
␣␣␣␣␣␣␣␣if␣(my␣@fields␣=␣$self->get_fields)␣{
␣␣␣␣␣␣␣␣␣␣␣␣return␣wantarray␣?␣("<div>",@fields,"</div>","</form>")
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣:␣"<div>".(join␣'',@fields)."</div>\n</form>";
␣␣␣␣␣␣␣␣}␣else␣{
␣␣␣␣␣␣␣␣␣␣␣␣return␣"</form>";
␣␣␣␣␣␣␣␣}
␣␣␣␣}
}
END_OF_FUNC

####␣Method:␣end_multipart_form
#␣end␣a␣multipart␣form
'end_multipart_form'␣=>␣<<'END_OF_FUNC',
sub␣end_multipart_form␣{
␣␣␣␣&end_form;
}
END_OF_FUNC


'_textfield'␣=>␣<<'END_OF_FUNC',
sub␣_textfield␣{
␣␣␣␣my($self,$tag,@p)␣=␣self_or_default(@_);
␣␣␣␣my($name,$default,$size,$maxlength,$override,$tabindex,@other)␣=␣
	rearrange([NAME,[DEFAULT,VALUE,VALUES],SIZE,MAXLENGTH,[OVERRIDE,FORCE],TABINDEX],@p);

␣␣␣␣my␣$current␣=␣$override␣?␣$default␣:␣
	(defined($self->param($name))␣?␣$self->param($name)␣:␣$default);

␣␣␣␣$current␣=␣defined($current)␣?␣$self->_maybe_escapeHTML($current,1)␣:␣'';
␣␣␣␣$name␣=␣defined($name)␣?␣$self->_maybe_escapeHTML($name)␣:␣'';
␣␣␣␣my($s)␣=␣defined($size)␣?␣qq/␣size="$size"/␣:␣'';
␣␣␣␣my($m)␣=␣defined($maxlength)␣?␣qq/␣maxlength="$maxlength"/␣:␣'';
␣␣␣␣my($other)␣=␣@other␣?␣"␣@other"␣:␣'';
␣␣␣␣#␣this␣entered␣at␣cristy's␣request␣to␣fix␣problems␣with␣file␣upload␣fields
␣␣␣␣#␣and␣WebTV␣--␣not␣sure␣it␣won't␣break␣stuff
␣␣␣␣my($value)␣=␣$current␣ne␣''␣?␣qq(value="$current")␣:␣'';
␣␣␣␣$tabindex␣=␣$self->element_tab($tabindex);
␣␣␣␣return␣$XHTML␣?␣qq(<input␣type="$tag"␣name="$name"␣$tabindex$value$s$m$other␣/>)␣
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣:␣qq(<input␣type="$tag"␣name="$name"␣$value$s$m$other>);
}
END_OF_FUNC

####␣Method:␣textfield
#␣Parameters:
#␣␣␣$name␣->␣Name␣of␣the␣text␣field
#␣␣␣$default␣->␣Optional␣default␣value␣of␣the␣field␣if␣not
#␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣already␣defined.
#␣␣␣$size␣->␣␣Optional␣width␣of␣field␣in␣characaters.
#␣␣␣$maxlength␣->␣Optional␣maximum␣number␣of␣characters.
#␣Returns:
#␣␣␣A␣string␣containing␣a␣<input␣type="text">␣field
#
'textfield'␣=>␣<<'END_OF_FUNC',
sub␣textfield␣{
␣␣␣␣my($self,@p)␣=␣self_or_default(@_);
␣␣␣␣$self->_textfield('text',@p);
}
END_OF_FUNC


####␣Method:␣filefield
#␣Parameters:
#␣␣␣$name␣->␣Name␣of␣the␣file␣upload␣field
#␣␣␣$size␣->␣␣Optional␣width␣of␣field␣in␣characaters.
#␣␣␣$maxlength␣->␣Optional␣maximum␣number␣of␣characters.
#␣Returns:
#␣␣␣A␣string␣containing␣a␣<input␣type="file">␣field
#
'filefield'␣=>␣<<'END_OF_FUNC',
sub␣filefield␣{
␣␣␣␣my($self,@p)␣=␣self_or_default(@_);
␣␣␣␣$self->_textfield('file',@p);
}
END_OF_FUNC


####␣Method:␣password
#␣Create␣a␣"secret␣password"␣entry␣field
#␣Parameters:
#␣␣␣$name␣->␣Name␣of␣the␣field
#␣␣␣$default␣->␣Optional␣default␣value␣of␣the␣field␣if␣not
#␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣already␣defined.
#␣␣␣$size␣->␣␣Optional␣width␣of␣field␣in␣characters.
#␣␣␣$maxlength␣->␣Optional␣maximum␣characters␣that␣can␣be␣entered.
#␣Returns:
#␣␣␣A␣string␣containing␣a␣<input␣type="password">␣field
#
'password_field'␣=>␣<<'END_OF_FUNC',
sub␣password_field␣{
␣␣␣␣my␣($self,@p)␣=␣self_or_default(@_);
␣␣␣␣$self->_textfield('password',@p);
}
END_OF_FUNC

####␣Method:␣textarea
#␣Parameters:
#␣␣␣$name␣->␣Name␣of␣the␣text␣field
#␣␣␣$default␣->␣Optional␣default␣value␣of␣the␣field␣if␣not
#␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣already␣defined.
#␣␣␣$rows␣->␣␣Optional␣number␣of␣rows␣in␣text␣area
#␣␣␣$columns␣->␣Optional␣number␣of␣columns␣in␣text␣area
#␣Returns:
#␣␣␣A␣string␣containing␣a␣<textarea></textarea>␣tag
#
'textarea'␣=>␣<<'END_OF_FUNC',
sub␣textarea␣{
␣␣␣␣my($self,@p)␣=␣self_or_default(@_);
␣␣␣␣my($name,$default,$rows,$cols,$override,$tabindex,@other)␣=
	rearrange([NAME,[DEFAULT,VALUE],ROWS,[COLS,COLUMNS],[OVERRIDE,FORCE],TABINDEX],@p);

␣␣␣␣my($current)=␣$override␣?␣$default␣:
	(defined($self->param($name))␣?␣$self->param($name)␣:␣$default);

␣␣␣␣$name␣=␣defined($name)␣?␣$self->_maybe_escapeHTML($name)␣:␣'';
␣␣␣␣$current␣=␣defined($current)␣?␣$self->_maybe_escapeHTML($current)␣:␣'';
␣␣␣␣my($r)␣=␣$rows␣?␣qq/␣rows="$rows"/␣:␣'';
␣␣␣␣my($c)␣=␣$cols␣?␣qq/␣cols="$cols"/␣:␣'';
␣␣␣␣my($other)␣=␣@other␣?␣"␣@other"␣:␣'';
␣␣␣␣$tabindex␣=␣$self->element_tab($tabindex);
␣␣␣␣return␣qq{<textarea␣name="$name"␣$tabindex$r$c$other>$current</textarea>};
}
END_OF_FUNC


####␣Method:␣button
#␣Create␣a␣javascript␣button.
#␣Parameters:
#␣␣␣$name␣->␣␣(optional)␣Name␣for␣the␣button.␣(-name)
#␣␣␣$value␣->␣(optional)␣Value␣of␣the␣button␣when␣selected␣(and␣visible␣name)␣(-value)
#␣␣␣$onclick␣->␣(optional)␣Text␣of␣the␣JavaScript␣to␣run␣when␣the␣button␣is
#␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣clicked.
#␣Returns:
#␣␣␣A␣string␣containing␣a␣<input␣type="button">␣tag
####
'button'␣=>␣<<'END_OF_FUNC',
sub␣button␣{
␣␣␣␣my($self,@p)␣=␣self_or_default(@_);

␣␣␣␣my($label,$value,$script,$tabindex,@other)␣=␣rearrange([NAME,[VALUE,LABEL],
						␣␣␣␣␣␣␣␣␣␣␣␣[ONCLICK,SCRIPT],TABINDEX],@p);

␣␣␣␣$label=$self->_maybe_escapeHTML($label);
␣␣␣␣$value=$self->_maybe_escapeHTML($value,1);
␣␣␣␣$script=$self->_maybe_escapeHTML($script);

␣␣␣␣$script␣||=␣'';

␣␣␣␣my($name)␣=␣'';
␣␣␣␣$name␣=␣qq/␣name="$label"/␣if␣$label;
␣␣␣␣$value␣=␣$value␣||␣$label;
␣␣␣␣my($val)␣=␣'';
␣␣␣␣$val␣=␣qq/␣value="$value"/␣if␣$value;
␣␣␣␣$script␣=␣qq/␣onclick="$script"/␣if␣$script;
␣␣␣␣my($other)␣=␣@other␣?␣"␣@other"␣:␣'';
␣␣␣␣$tabindex␣=␣$self->element_tab($tabindex);
␣␣␣␣return␣$XHTML␣?␣qq(<input␣type="button"␣$tabindex$name$val$script$other␣/>)
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣:␣qq(<input␣type="button"$name$val$script$other>);
}
END_OF_FUNC


####␣Method:␣submit
#␣Create␣a␣"submit␣query"␣button.
#␣Parameters:
#␣␣␣$name␣->␣␣(optional)␣Name␣for␣the␣button.
#␣␣␣$value␣->␣(optional)␣Value␣of␣the␣button␣when␣selected␣(also␣doubles␣as␣label).
#␣␣␣$label␣->␣(optional)␣Label␣printed␣on␣the␣button(also␣doubles␣as␣the␣value).
#␣Returns:
#␣␣␣A␣string␣containing␣a␣<input␣type="submit">␣tag
####
'submit'␣=>␣<<'END_OF_FUNC',
sub␣submit␣{
␣␣␣␣my($self,@p)␣=␣self_or_default(@_);

␣␣␣␣my($label,$value,$tabindex,@other)␣=␣rearrange([NAME,[VALUE,LABEL],TABINDEX],@p);

␣␣␣␣$label=$self->_maybe_escapeHTML($label);
␣␣␣␣$value=$self->_maybe_escapeHTML($value,1);

␣␣␣␣my␣$name␣=␣$NOSTICKY␣?␣''␣:␣'name=".submit"␣';
␣␣␣␣$name␣=␣qq/name="$label"␣/␣if␣defined($label);
␣␣␣␣$value␣=␣defined($value)␣?␣$value␣:␣$label;
␣␣␣␣my␣$val␣=␣'';
␣␣␣␣$val␣=␣qq/value="$value"␣/␣if␣defined($value);
␣␣␣␣$tabindex␣=␣$self->element_tab($tabindex);
␣␣␣␣my($other)␣=␣@other␣?␣"@other␣"␣:␣'';
␣␣␣␣return␣$XHTML␣?␣qq(<input␣type="submit"␣$tabindex$name$val$other/>)
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣:␣qq(<input␣type="submit"␣$name$val$other>);
}
END_OF_FUNC


####␣Method:␣reset
#␣Create␣a␣"reset"␣button.
#␣Parameters:
#␣␣␣$name␣->␣(optional)␣Name␣for␣the␣button.
#␣Returns:
#␣␣␣A␣string␣containing␣a␣<input␣type="reset">␣tag
####
'reset'␣=>␣<<'END_OF_FUNC',
sub␣reset␣{
␣␣␣␣my($self,@p)␣=␣self_or_default(@_);
␣␣␣␣my($label,$value,$tabindex,@other)␣=␣rearrange(['NAME',['VALUE','LABEL'],TABINDEX],@p);
␣␣␣␣$label=$self->_maybe_escapeHTML($label);
␣␣␣␣$value=$self->_maybe_escapeHTML($value,1);
␣␣␣␣my␣($name)␣=␣'␣name=".reset"';
␣␣␣␣$name␣=␣qq/␣name="$label"/␣if␣defined($label);
␣␣␣␣$value␣=␣defined($value)␣?␣$value␣:␣$label;
␣␣␣␣my($val)␣=␣'';
␣␣␣␣$val␣=␣qq/␣value="$value"/␣if␣defined($value);
␣␣␣␣my($other)␣=␣@other␣?␣"␣@other"␣:␣'';
␣␣␣␣$tabindex␣=␣$self->element_tab($tabindex);
␣␣␣␣return␣$XHTML␣?␣qq(<input␣type="reset"␣$tabindex$name$val$other␣/>)
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣:␣qq(<input␣type="reset"$name$val$other>);
}
END_OF_FUNC


####␣Method:␣defaults
#␣Create␣a␣"defaults"␣button.
#␣Parameters:
#␣␣␣$name␣->␣(optional)␣Name␣for␣the␣button.
#␣Returns:
#␣␣␣A␣string␣containing␣a␣<input␣type="submit"␣name=".defaults">␣tag
#
#␣Note:␣this␣button␣has␣a␣special␣meaning␣to␣the␣initialization␣script,
#␣and␣tells␣it␣to␣ERASE␣the␣current␣query␣string␣so␣that␣your␣defaults
#␣are␣used␣again!
####
'defaults'␣=>␣<<'END_OF_FUNC',
sub␣defaults␣{
␣␣␣␣my($self,@p)␣=␣self_or_default(@_);

␣␣␣␣my($label,$tabindex,@other)␣=␣rearrange([[NAME,VALUE],TABINDEX],@p);

␣␣␣␣$label=$self->_maybe_escapeHTML($label,1);
␣␣␣␣$label␣=␣$label␣||␣"Defaults";
␣␣␣␣my($value)␣=␣qq/␣value="$label"/;
␣␣␣␣my($other)␣=␣@other␣?␣"␣@other"␣:␣'';
␣␣␣␣$tabindex␣=␣$self->element_tab($tabindex);
␣␣␣␣return␣$XHTML␣?␣qq(<input␣type="submit"␣name=".defaults"␣$tabindex$value$other␣/>)
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣:␣qq/<input␣type="submit"␣NAME=".defaults"$value$other>/;
}
END_OF_FUNC


####␣Method:␣comment
#␣Create␣an␣HTML␣<!--␣comment␣-->
#␣Parameters:␣a␣string
'comment'␣=>␣<<'END_OF_FUNC',
sub␣comment␣{
␣␣␣␣my($self,@p)␣=␣self_or_CGI(@_);
␣␣␣␣return␣"<!--␣@p␣-->";
}
END_OF_FUNC

####␣Method:␣checkbox
#␣Create␣a␣checkbox␣that␣is␣not␣logically␣linked␣to␣any␣others.
#␣The␣field␣value␣is␣"on"␣when␣the␣button␣is␣checked.
#␣Parameters:
#␣␣␣$name␣->␣Name␣of␣the␣checkbox
#␣␣␣$checked␣->␣(optional)␣turned␣on␣by␣default␣if␣true
#␣␣␣$value␣->␣(optional)␣value␣of␣the␣checkbox,␣'on'␣by␣default
#␣␣␣$label␣->␣(optional)␣a␣user-readable␣label␣printed␣next␣to␣the␣box.
#␣␣␣␣␣␣␣␣␣␣␣␣␣Otherwise␣the␣checkbox␣name␣is␣used.
#␣Returns:
#␣␣␣A␣string␣containing␣a␣<input␣type="checkbox">␣field
####
'checkbox'␣=>␣<<'END_OF_FUNC',
sub␣checkbox␣{
␣␣␣␣my($self,@p)␣=␣self_or_default(@_);

␣␣␣␣my($name,$checked,$value,$label,$labelattributes,$override,$tabindex,@other)␣=
␣␣␣␣␣␣␣rearrange([NAME,[CHECKED,SELECTED,ON],VALUE,LABEL,LABELATTRIBUTES,
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣[OVERRIDE,FORCE],TABINDEX],@p);

␣␣␣␣$value␣=␣defined␣$value␣?␣$value␣:␣'on';

␣␣␣␣if␣(!$override␣&&␣($self->{'.fieldnames'}->{$name}␣||␣
		␣␣␣␣␣␣␣defined␣$self->param($name)))␣{
	$checked␣=␣grep($_␣eq␣$value,$self->param($name))␣?␣$self->_checked(1)␣:␣'';
␣␣␣␣}␣else␣{
	$checked␣=␣$self->_checked($checked);
␣␣␣␣}
␣␣␣␣my($the_label)␣=␣defined␣$label␣?␣$label␣:␣$name;
␣␣␣␣$name␣=␣$self->_maybe_escapeHTML($name);
␣␣␣␣$value␣=␣$self->_maybe_escapeHTML($value,1);
␣␣␣␣$the_label␣=␣$self->_maybe_escapeHTML($the_label);
␣␣␣␣my($other)␣=␣@other␣?␣"@other␣"␣:␣'';
␣␣␣␣$tabindex␣=␣$self->element_tab($tabindex);
␣␣␣␣$self->register_parameter($name);
␣␣␣␣return␣$XHTML␣?␣CGI::label($labelattributes,
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣qq{<input␣type="checkbox"␣name="$name"␣value="$value"␣$tabindex$checked$other/>$the_label})
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣:␣qq{<input␣type="checkbox"␣name="$name"␣value="$value"$checked$other>$the_label};
}
END_OF_FUNC



#␣Escape␣HTML
'escapeHTML'␣=>␣<<'END_OF_FUNC',
sub␣escapeHTML␣{
␣␣␣␣␣#␣hack␣to␣work␣around␣␣earlier␣hacks
␣␣␣␣␣push␣@_,$_[0]␣if␣@_==1␣&&␣$_[0]␣eq␣'CGI';
␣␣␣␣␣my␣($self,$toencode,$newlinestoo)␣=␣CGI::self_or_default(@_);
␣␣␣␣␣return␣undef␣unless␣defined($toencode);
␣␣␣␣␣$toencode␣=~␣s{&}{&amp;}gso;
␣␣␣␣␣$toencode␣=~␣s{<}{&lt;}gso;
␣␣␣␣␣$toencode␣=~␣s{>}{&gt;}gso;
␣␣␣␣␣if␣($DTD_PUBLIC_IDENTIFIER␣=~␣/[^X]HTML␣3\.2/i)␣{
␣␣␣␣␣#␣$quot;␣was␣accidentally␣omitted␣from␣the␣HTML␣3.2␣DTD␣--␣see
␣␣␣␣␣#␣<http://validator.w3.org/docs/errors.html#bad-entity>␣/
␣␣␣␣␣#␣<http://lists.w3.org/Archives/Public/www-html/1997Mar/0003.html>.
␣␣␣␣␣␣␣␣$toencode␣=~␣s{"}{&#34;}gso;
␣␣␣␣␣}
␣␣␣␣␣else␣{
␣␣␣␣␣␣␣␣$toencode␣=~␣s{"}{&quot;}gso;
␣␣␣␣␣}

␣␣␣␣#␣Handle␣bug␣in␣some␣browsers␣with␣Latin␣charsets
␣␣␣␣if␣($self->{'.charset'}␣
␣␣␣␣␣␣␣␣␣␣␣␣&&␣(uc($self->{'.charset'})␣eq␣'ISO-8859-1'␣
␣␣␣␣␣␣␣␣␣␣␣␣||␣uc($self->{'.charset'})␣eq␣'WINDOWS-1252'))␣{
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣$toencode␣=~␣s{'}{&#39;}gso;
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣$toencode␣=~␣s{\x8b}{&#8249;}gso;
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣$toencode␣=~␣s{\x9b}{&#8250;}gso;
␣␣␣␣␣␣␣␣if␣(defined␣$newlinestoo␣&&␣$newlinestoo)␣{
␣␣␣␣␣␣␣␣␣␣␣␣$toencode␣=~␣s{\012}{&#10;}gso;
␣␣␣␣␣␣␣␣␣␣␣␣$toencode␣=~␣s{\015}{&#13;}gso;
␣␣␣␣␣␣␣␣}
␣␣␣␣}
␣␣␣␣return␣$toencode;
}
END_OF_FUNC

#␣unescape␣HTML␣--␣used␣internally
'unescapeHTML'␣=>␣<<'END_OF_FUNC',
sub␣unescapeHTML␣{
␣␣␣␣#␣hack␣to␣work␣around␣␣earlier␣hacks
␣␣␣␣push␣@_,$_[0]␣if␣@_==1␣&&␣$_[0]␣eq␣'CGI';
␣␣␣␣my␣($self,$string)␣=␣CGI::self_or_default(@_);
␣␣␣␣return␣undef␣unless␣defined($string);
␣␣␣␣my␣$latin␣=␣defined␣$self->{'.charset'}␣?␣$self->{'.charset'}␣=~␣/^(ISO-8859-1|WINDOWS-1252)$/i
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣:␣1;
␣␣␣␣#␣thanks␣to␣Randal␣Schwartz␣for␣the␣correct␣solution␣to␣this␣one
␣␣␣␣$string=~␣s[&(\S*?);]{
	local␣$_␣=␣$1;
	/^amp$/i	?␣"&"␣:
	/^quot$/i	?␣'"'␣:
␣␣␣␣␣␣␣␣/^gt$/i		?␣">"␣:
	/^lt$/i		?␣"<"␣:
	/^#(\d+)$/␣&&␣$latin	␣␣␣␣␣?␣chr($1)␣:
	/^#x([0-9a-f]+)$/i␣&&␣$latin␣?␣chr(hex($1))␣:
	$_
	}gex;
␣␣␣␣return␣$string;
}
END_OF_FUNC

#␣Internal␣procedure␣-␣don't␣use
'_tableize'␣=>␣<<'END_OF_FUNC',
sub␣_tableize␣{
␣␣␣␣my($rows,$columns,$rowheaders,$colheaders,@elements)␣=␣@_;
␣␣␣␣my␣@rowheaders␣=␣$rowheaders␣?␣@$rowheaders␣:␣();
␣␣␣␣my␣@colheaders␣=␣$colheaders␣?␣@$colheaders␣:␣();
␣␣␣␣my($result);

␣␣␣␣if␣(defined($columns))␣{
	$rows␣=␣int(0.99␣+␣@elements/$columns)␣unless␣defined($rows);
␣␣␣␣}
␣␣␣␣if␣(defined($rows))␣{
	$columns␣=␣int(0.99␣+␣@elements/$rows)␣unless␣defined($columns);
␣␣␣␣}

␣␣␣␣#␣rearrange␣into␣a␣pretty␣table
␣␣␣␣$result␣=␣"<table>";
␣␣␣␣my($row,$column);
␣␣␣␣unshift(@colheaders,'')␣if␣@colheaders␣&&␣@rowheaders;
␣␣␣␣$result␣.=␣"<tr>"␣if␣@colheaders;
␣␣␣␣for␣(@colheaders)␣{
	$result␣.=␣"<th>$_</th>";
␣␣␣␣}
␣␣␣␣for␣($row=0;$row<$rows;$row++)␣{
	$result␣.=␣"<tr>";
	$result␣.=␣"<th>$rowheaders[$row]</th>"␣if␣@rowheaders;
	for␣($column=0;$column<$columns;$column++)␣{
	␣␣␣␣$result␣.=␣"<td>"␣.␣$elements[$column*$rows␣+␣$row]␣.␣"</td>"
		if␣defined($elements[$column*$rows␣+␣$row]);
	}
	$result␣.=␣"</tr>";
␣␣␣␣}
␣␣␣␣$result␣.=␣"</table>";
␣␣␣␣return␣$result;
}
END_OF_FUNC


####␣Method:␣radio_group
#␣Create␣a␣list␣of␣logically-linked␣radio␣buttons.
#␣Parameters:
#␣␣␣$name␣->␣Common␣name␣for␣all␣the␣buttons.
#␣␣␣$values␣->␣A␣pointer␣to␣a␣regular␣array␣containing␣the
#␣␣␣␣␣␣␣␣␣␣␣␣␣values␣for␣each␣button␣in␣the␣group.
#␣␣␣$default␣->␣(optional)␣Value␣of␣the␣button␣to␣turn␣on␣by␣default.␣␣Pass␣'-'
#␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣to␣turn␣_nothing_␣on.
#␣␣␣$linebreak␣->␣(optional)␣Set␣to␣true␣to␣place␣linebreaks
#␣␣␣␣␣␣␣␣␣␣␣␣␣between␣the␣buttons.
#␣␣␣$labels␣->␣(optional)
#␣␣␣␣␣␣␣␣␣␣␣␣␣A␣pointer␣to␣a␣hash␣of␣labels␣to␣print␣next␣to␣each␣checkbox
#␣␣␣␣␣␣␣␣␣␣␣␣␣in␣the␣form␣$label{'value'}="Long␣explanatory␣label".
#␣␣␣␣␣␣␣␣␣␣␣␣␣Otherwise␣the␣provided␣values␣are␣used␣as␣the␣labels.
#␣Returns:
#␣␣␣An␣ARRAY␣containing␣a␣series␣of␣<input␣type="radio">␣fields
####
'radio_group'␣=>␣<<'END_OF_FUNC',
sub␣radio_group␣{
␣␣␣␣my($self,@p)␣=␣self_or_default(@_);
␣␣␣$self->_box_group('radio',@p);
}
END_OF_FUNC

####␣Method:␣checkbox_group
#␣Create␣a␣list␣of␣logically-linked␣checkboxes.
#␣Parameters:
#␣␣␣$name␣->␣Common␣name␣for␣all␣the␣check␣boxes
#␣␣␣$values␣->␣A␣pointer␣to␣a␣regular␣array␣containing␣the
#␣␣␣␣␣␣␣␣␣␣␣␣␣values␣for␣each␣checkbox␣in␣the␣group.
#␣␣␣$defaults␣->␣(optional)
#␣␣␣␣␣␣␣␣␣␣␣␣␣1.␣If␣a␣pointer␣to␣a␣regular␣array␣of␣checkbox␣values,
#␣␣␣␣␣␣␣␣␣␣␣␣␣then␣this␣will␣be␣used␣to␣decide␣which
#␣␣␣␣␣␣␣␣␣␣␣␣␣checkboxes␣to␣turn␣on␣by␣default.
#␣␣␣␣␣␣␣␣␣␣␣␣␣2.␣If␣a␣scalar,␣will␣be␣assumed␣to␣hold␣the
#␣␣␣␣␣␣␣␣␣␣␣␣␣value␣of␣a␣single␣checkbox␣in␣the␣group␣to␣turn␣on.␣
#␣␣␣$linebreak␣->␣(optional)␣Set␣to␣true␣to␣place␣linebreaks
#␣␣␣␣␣␣␣␣␣␣␣␣␣between␣the␣buttons.
#␣␣␣$labels␣->␣(optional)
#␣␣␣␣␣␣␣␣␣␣␣␣␣A␣pointer␣to␣a␣hash␣of␣labels␣to␣print␣next␣to␣each␣checkbox
#␣␣␣␣␣␣␣␣␣␣␣␣␣in␣the␣form␣$label{'value'}="Long␣explanatory␣label".
#␣␣␣␣␣␣␣␣␣␣␣␣␣Otherwise␣the␣provided␣values␣are␣used␣as␣the␣labels.
#␣Returns:
#␣␣␣An␣ARRAY␣containing␣a␣series␣of␣<input␣type="checkbox">␣fields
####

'checkbox_group'␣=>␣<<'END_OF_FUNC',
sub␣checkbox_group␣{
␣␣␣␣my($self,@p)␣=␣self_or_default(@_);
␣␣␣$self->_box_group('checkbox',@p);
}
END_OF_FUNC

'_box_group'␣=>␣<<'END_OF_FUNC',
sub␣_box_group␣{
␣␣␣␣my␣$self␣␣␣␣␣=␣shift;
␣␣␣␣my␣$box_type␣=␣shift;

␣␣␣␣my($name,$values,$defaults,$linebreak,$labels,$labelattributes,
␣␣␣␣␣␣␣$attributes,$rows,$columns,$rowheaders,$colheaders,
␣␣␣␣␣␣␣$override,$nolabels,$tabindex,$disabled,@other)␣=
␣␣␣␣␣␣␣␣rearrange([NAME,[VALUES,VALUE],[DEFAULT,DEFAULTS],LINEBREAK,LABELS,LABELATTRIBUTES,
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣ATTRIBUTES,ROWS,[COLUMNS,COLS],[ROWHEADERS,ROWHEADER],[COLHEADERS,COLHEADER],
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣[OVERRIDE,FORCE],NOLABELS,TABINDEX,DISABLED
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣],@_);


␣␣␣␣my($result,$checked,@elements,@values);

␣␣␣␣@values␣=␣$self->_set_values_and_labels($values,\$labels,$name);
␣␣␣␣my␣%checked␣=␣$self->previous_or_default($name,$defaults,$override);

␣␣␣␣#␣If␣no␣check␣array␣is␣specified,␣check␣the␣first␣by␣default
␣␣␣␣$checked{$values[0]}++␣if␣$box_type␣eq␣'radio'␣&&␣!%checked;

␣␣␣␣$name=$self->_maybe_escapeHTML($name);

␣␣␣␣my␣%tabs␣=␣();
␣␣␣␣if␣($TABINDEX␣&&␣$tabindex)␣{
␣␣␣␣␣␣if␣(!ref␣$tabindex)␣{
␣␣␣␣␣␣␣␣␣␣$self->element_tab($tabindex);
␣␣␣␣␣␣}␣elsif␣(ref␣$tabindex␣eq␣'ARRAY')␣{
␣␣␣␣␣␣␣␣␣␣%tabs␣=␣map␣{$_=>$self->element_tab}␣@$tabindex;
␣␣␣␣␣␣}␣elsif␣(ref␣$tabindex␣eq␣'HASH')␣{
␣␣␣␣␣␣␣␣␣␣%tabs␣=␣%$tabindex;
␣␣␣␣␣␣}
␣␣␣␣}
␣␣␣␣%tabs␣=␣map␣{$_=>$self->element_tab}␣@values␣unless␣%tabs;
␣␣␣␣my␣$other␣=␣@other␣?␣"@other␣"␣:␣'';
␣␣␣␣my␣$radio_checked;

␣␣␣␣#␣for␣disabling␣groups␣of␣radio/checkbox␣buttons
␣␣␣␣my␣%disabled;
␣␣␣␣for␣(@{$disabled})␣{
␣␣␣	$disabled{$_}=1;
␣␣␣␣}

␣␣␣␣for␣(@values)␣{
␣␣␣␣	␣my␣$disable="";
	␣if␣($disabled{$_})␣{
		$disable="disabled='1'";
	␣}

␣␣␣␣␣␣␣␣my␣$checkit␣=␣$self->_checked($box_type␣eq␣'radio'␣?␣($checked{$_}␣&&␣!$radio_checked++)
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣:␣$checked{$_});
	my($break);
	if␣($linebreak)␣{
␣␣␣␣␣␣␣␣␣␣$break␣=␣$XHTML␣?␣"<br␣/>"␣:␣"<br>";
	}
	else␣{
	␣␣$break␣=␣'';
	}
	my($label)='';
	unless␣(defined($nolabels)␣&&␣$nolabels)␣{
	␣␣␣␣$label␣=␣$_;
	␣␣␣␣$label␣=␣$labels->{$_}␣if␣defined($labels)␣&&␣defined($labels->{$_});
	␣␣␣␣$label␣=␣$self->_maybe_escapeHTML($label,1);
␣␣␣␣␣␣␣␣␣␣␣␣$label␣=␣"<span␣style=\"color:gray\">$label</span>"␣if␣$disabled{$_};
	}
␣␣␣␣␣␣␣␣my␣$attribs␣=␣$self->_set_attributes($_,␣$attributes);
␣␣␣␣␣␣␣␣my␣$tab␣␣␣␣␣=␣$tabs{$_};
	$_=$self->_maybe_escapeHTML($_);

␣␣␣␣␣␣␣␣if␣($XHTML)␣{
␣␣␣␣␣␣␣␣␣␣␣push␣@elements,
␣␣␣␣␣␣␣␣␣␣␣␣␣␣CGI::label($labelattributes,
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣qq(<input␣type="$box_type"␣name="$name"␣value="$_"␣$checkit$other$tab$attribs$disable/>$label)).${break};
␣␣␣␣␣␣␣␣}␣else␣{
␣␣␣␣␣␣␣␣␣␣␣␣push(@elements,qq/<input␣type="$box_type"␣name="$name"␣value="$_"␣$checkit$other$tab$attribs$disable>${label}${break}/);
␣␣␣␣␣␣␣␣}
␣␣␣␣}
␣␣␣␣$self->register_parameter($name);
␣␣␣␣return␣wantarray␣?␣@elements␣:␣"@elements"
␣␣␣␣␣␣␣␣␣␣␣unless␣defined($columns)␣||␣defined($rows);
␣␣␣␣return␣_tableize($rows,$columns,$rowheaders,$colheaders,@elements);
}
END_OF_FUNC


####␣Method:␣popup_menu
#␣Create␣a␣popup␣menu.
#␣Parameters:
#␣␣␣$name␣->␣Name␣for␣all␣the␣menu
#␣␣␣$values␣->␣A␣pointer␣to␣a␣regular␣array␣containing␣the
#␣␣␣␣␣␣␣␣␣␣␣␣␣text␣of␣each␣menu␣item.
#␣␣␣$default␣->␣(optional)␣Default␣item␣to␣display
#␣␣␣$labels␣->␣(optional)
#␣␣␣␣␣␣␣␣␣␣␣␣␣A␣pointer␣to␣a␣hash␣of␣labels␣to␣print␣next␣to␣each␣checkbox
#␣␣␣␣␣␣␣␣␣␣␣␣␣in␣the␣form␣$label{'value'}="Long␣explanatory␣label".
#␣␣␣␣␣␣␣␣␣␣␣␣␣Otherwise␣the␣provided␣values␣are␣used␣as␣the␣labels.
#␣Returns:
#␣␣␣A␣string␣containing␣the␣definition␣of␣a␣popup␣menu.
####
'popup_menu'␣=>␣<<'END_OF_FUNC',
sub␣popup_menu␣{
␣␣␣␣my($self,@p)␣=␣self_or_default(@_);

␣␣␣␣my($name,$values,$default,$labels,$attributes,$override,$tabindex,@other)␣=
␣␣␣␣␣␣␣rearrange([NAME,[VALUES,VALUE],[DEFAULT,DEFAULTS],LABELS,
␣␣␣␣␣␣␣ATTRIBUTES,[OVERRIDE,FORCE],TABINDEX],@p);
␣␣␣␣my($result,%selected);

␣␣␣␣if␣(!$override␣&&␣defined($self->param($name)))␣{
	$selected{$self->param($name)}++;
␣␣␣␣}␣elsif␣(defined␣$default)␣{
	%selected␣=␣map␣{$_=>1}␣ref($default)␣eq␣'ARRAY'␣
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣?␣@$default␣
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣:␣$default;
␣␣␣␣}
␣␣␣␣$name=$self->_maybe_escapeHTML($name);
␣␣␣␣my($other)␣=␣@other␣?␣"␣@other"␣:␣'';

␣␣␣␣my(@values);
␣␣␣␣@values␣=␣$self->_set_values_and_labels($values,\$labels,$name);
␣␣␣␣$tabindex␣=␣$self->element_tab($tabindex);
␣␣␣␣$name␣=␣q{}␣if␣!␣defined␣$name;
␣␣␣␣$result␣=␣qq/<select␣name="$name"␣$tabindex$other>\n/;
␣␣␣␣for␣(@values)␣{
␣␣␣␣␣␣␣␣if␣(/<optgroup/)␣{
␣␣␣␣␣␣␣␣␣␣␣␣for␣my␣$v␣(split(/\n/))␣{
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣my␣$selectit␣=␣$XHTML␣?␣'selected="selected"'␣:␣'selected';
		for␣my␣$selected␣(keys␣%selected)␣{
		␣␣␣␣$v␣=~␣s/(value="\Q$selected\E")/$selectit␣$1/;
		}
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣$result␣.=␣"$v\n";
␣␣␣␣␣␣␣␣␣␣␣␣}
␣␣␣␣␣␣␣␣}
␣␣␣␣␣␣␣␣else␣{
␣␣␣␣␣␣␣␣␣␣my␣$attribs␣␣␣=␣$self->_set_attributes($_,␣$attributes);
	␣␣my($selectit)␣=␣$self->_selected($selected{$_});
	␣␣my($label)␣␣␣␣=␣$_;
	␣␣$label␣␣␣␣␣␣␣␣=␣$labels->{$_}␣if␣defined($labels)␣&&␣defined($labels->{$_});
	␣␣my($value)␣␣␣␣=␣$self->_maybe_escapeHTML($_);
	␣␣$label␣␣␣␣␣␣␣␣=␣$self->_maybe_escapeHTML($label,1);
␣␣␣␣␣␣␣␣␣␣$result␣␣␣␣␣␣.=␣"<option${attribs}␣${selectit}value=\"$value\">$label</option>\n";
␣␣␣␣␣␣␣␣}
␣␣␣␣}

␣␣␣␣$result␣.=␣"</select>";
␣␣␣␣return␣$result;
}
END_OF_FUNC


####␣Method:␣optgroup
#␣Create␣a␣optgroup.
#␣Parameters:
#␣␣␣$name␣->␣Label␣for␣the␣group
#␣␣␣$values␣->␣A␣pointer␣to␣a␣regular␣array␣containing␣the
#␣␣␣␣␣␣␣␣␣␣␣␣␣␣values␣for␣each␣option␣line␣in␣the␣group.
#␣␣␣$labels␣->␣(optional)
#␣␣␣␣␣␣␣␣␣␣␣␣␣␣A␣pointer␣to␣a␣hash␣of␣labels␣to␣print␣next␣to␣each␣item
#␣␣␣␣␣␣␣␣␣␣␣␣␣␣in␣the␣form␣$label{'value'}="Long␣explanatory␣label".
#␣␣␣␣␣␣␣␣␣␣␣␣␣␣Otherwise␣the␣provided␣values␣are␣used␣as␣the␣labels.
#␣␣␣$labeled␣->␣(optional)
#␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣A␣true␣value␣indicates␣the␣value␣should␣be␣used␣as␣the␣label␣attribute
#␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣in␣the␣option␣elements.
#␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣The␣label␣attribute␣specifies␣the␣option␣label␣presented␣to␣the␣user.
#␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣This␣defaults␣to␣the␣content␣of␣the␣<option>␣element,␣but␣the␣label
#␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣attribute␣allows␣authors␣to␣more␣easily␣use␣optgroup␣without␣sacrificing
#␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣compatibility␣with␣browsers␣that␣do␣not␣support␣option␣groups.
#␣␣␣$novals␣->␣(optional)
#␣␣␣␣␣␣␣␣␣␣␣␣␣␣A␣true␣value␣indicates␣to␣suppress␣the␣val␣attribute␣in␣the␣option␣elements
#␣Returns:
#␣␣␣A␣string␣containing␣the␣definition␣of␣an␣option␣group.
####
'optgroup'␣=>␣<<'END_OF_FUNC',
sub␣optgroup␣{
␣␣␣␣my($self,@p)␣=␣self_or_default(@_);
␣␣␣␣my($name,$values,$attributes,$labeled,$noval,$labels,@other)
␣␣␣␣␣␣␣␣=␣rearrange([NAME,[VALUES,VALUE],ATTRIBUTES,LABELED,NOVALS,LABELS],@p);

␣␣␣␣my($result,@values);
␣␣␣␣@values␣=␣$self->_set_values_and_labels($values,\$labels,$name,$labeled,$novals);
␣␣␣␣my($other)␣=␣@other␣?␣"␣@other"␣:␣'';

␣␣␣␣$name␣=␣$self->_maybe_escapeHTML($name)␣||␣q{};
␣␣␣␣$result␣=␣qq/<optgroup␣label="$name"$other>\n/;
␣␣␣␣for␣(@values)␣{
␣␣␣␣␣␣␣␣if␣(/<optgroup/)␣{
␣␣␣␣␣␣␣␣␣␣␣␣for␣(split(/\n/))␣{
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣my␣$selectit␣=␣$XHTML␣?␣'selected="selected"'␣:␣'selected';
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣s/(value="$selected")/$selectit␣$1/␣if␣defined␣$selected;
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣$result␣.=␣"$_\n";
␣␣␣␣␣␣␣␣␣␣␣␣}
␣␣␣␣␣␣␣␣}
␣␣␣␣␣␣␣␣else␣{
␣␣␣␣␣␣␣␣␣␣␣␣my␣$attribs␣=␣$self->_set_attributes($_,␣$attributes);
␣␣␣␣␣␣␣␣␣␣␣␣my($label)␣=␣$_;
␣␣␣␣␣␣␣␣␣␣␣␣$label␣=␣$labels->{$_}␣if␣defined($labels)␣&&␣defined($labels->{$_});
␣␣␣␣␣␣␣␣␣␣␣␣$label=$self->_maybe_escapeHTML($label);
␣␣␣␣␣␣␣␣␣␣␣␣my($value)=$self->_maybe_escapeHTML($_,1);
␣␣␣␣␣␣␣␣␣␣␣␣$result␣.=␣$labeled␣?␣$novals␣?␣"<option$attribs␣label=\"$value\">$label</option>\n"
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣:␣"<option$attribs␣label=\"$value\"␣value=\"$value\">$label</option>\n"
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣:␣$novals␣?␣"<option$attribs>$label</option>\n"
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣:␣"<option$attribs␣value=\"$value\">$label</option>\n";
␣␣␣␣␣␣␣␣}
␣␣␣␣}
␣␣␣␣$result␣.=␣"</optgroup>";
␣␣␣␣return␣$result;
}
END_OF_FUNC


####␣Method:␣scrolling_list
#␣Create␣a␣scrolling␣list.
#␣Parameters:
#␣␣␣$name␣->␣name␣for␣the␣list
#␣␣␣$values␣->␣A␣pointer␣to␣a␣regular␣array␣containing␣the
#␣␣␣␣␣␣␣␣␣␣␣␣␣values␣for␣each␣option␣line␣in␣the␣list.
#␣␣␣$defaults␣->␣(optional)
#␣␣␣␣␣␣␣␣␣␣␣␣␣1.␣If␣a␣pointer␣to␣a␣regular␣array␣of␣options,
#␣␣␣␣␣␣␣␣␣␣␣␣␣then␣this␣will␣be␣used␣to␣decide␣which
#␣␣␣␣␣␣␣␣␣␣␣␣␣lines␣to␣turn␣on␣by␣default.
#␣␣␣␣␣␣␣␣␣␣␣␣␣2.␣Otherwise␣holds␣the␣value␣of␣the␣single␣line␣to␣turn␣on.
#␣␣␣$size␣->␣(optional)␣Size␣of␣the␣list.
#␣␣␣$multiple␣->␣(optional)␣If␣set,␣allow␣multiple␣selections.
#␣␣␣$labels␣->␣(optional)
#␣␣␣␣␣␣␣␣␣␣␣␣␣A␣pointer␣to␣a␣hash␣of␣labels␣to␣print␣next␣to␣each␣checkbox
#␣␣␣␣␣␣␣␣␣␣␣␣␣in␣the␣form␣$label{'value'}="Long␣explanatory␣label".
#␣␣␣␣␣␣␣␣␣␣␣␣␣Otherwise␣the␣provided␣values␣are␣used␣as␣the␣labels.
#␣Returns:
#␣␣␣A␣string␣containing␣the␣definition␣of␣a␣scrolling␣list.
####
'scrolling_list'␣=>␣<<'END_OF_FUNC',
sub␣scrolling_list␣{
␣␣␣␣my($self,@p)␣=␣self_or_default(@_);
␣␣␣␣my($name,$values,$defaults,$size,$multiple,$labels,$attributes,$override,$tabindex,@other)
	=␣rearrange([NAME,[VALUES,VALUE],[DEFAULTS,DEFAULT],
␣␣␣␣␣␣␣␣␣␣SIZE,MULTIPLE,LABELS,ATTRIBUTES,[OVERRIDE,FORCE],TABINDEX],@p);

␣␣␣␣my($result,@values);
␣␣␣␣@values␣=␣$self->_set_values_and_labels($values,\$labels,$name);

␣␣␣␣$size␣=␣$size␣||␣scalar(@values);

␣␣␣␣my(%selected)␣=␣$self->previous_or_default($name,$defaults,$override);

␣␣␣␣my($is_multiple)␣=␣$multiple␣?␣qq/␣multiple="multiple"/␣:␣'';
␣␣␣␣my($has_size)␣=␣$size␣?␣qq/␣size="$size"/:␣'';
␣␣␣␣my($other)␣=␣@other␣?␣"␣@other"␣:␣'';

␣␣␣␣$name=$self->_maybe_escapeHTML($name);
␣␣␣␣$tabindex␣=␣$self->element_tab($tabindex);
␣␣␣␣$result␣=␣qq/<select␣name="$name"␣$tabindex$has_size$is_multiple$other>\n/;
␣␣␣␣for␣(@values)␣{
␣␣␣␣␣␣␣␣if␣(/<optgroup/)␣{
␣␣␣␣␣␣␣␣␣␣␣␣for␣my␣$v␣(split(/\n/))␣{
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣my␣$selectit␣=␣$XHTML␣?␣'selected="selected"'␣:␣'selected';
		for␣my␣$selected␣(keys␣%selected)␣{
		␣␣␣␣$v␣=~␣s/(value="$selected")/$selectit␣$1/;
		}
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣$result␣.=␣"$v\n";
␣␣␣␣␣␣␣␣␣␣␣␣}
␣␣␣␣␣␣␣␣}
␣␣␣␣␣␣␣␣else␣{
␣␣␣␣␣␣␣␣␣␣my␣$attribs␣␣␣=␣$self->_set_attributes($_,␣$attributes);
	␣␣my($selectit)␣=␣$self->_selected($selected{$_});
	␣␣my($label)␣␣␣␣=␣$_;
	␣␣$label␣␣␣␣␣␣␣␣=␣$labels->{$_}␣if␣defined($labels)␣&&␣defined($labels->{$_});
	␣␣my($value)␣␣␣␣=␣$self->_maybe_escapeHTML($_);
	␣␣$label␣␣␣␣␣␣␣␣=␣$self->_maybe_escapeHTML($label,1);
␣␣␣␣␣␣␣␣␣␣$result␣␣␣␣␣␣.=␣"<option${attribs}␣${selectit}value=\"$value\">$label</option>\n";
␣␣␣␣␣␣␣␣}
␣␣␣␣}

␣␣␣␣$result␣.=␣"</select>";
␣␣␣␣$self->register_parameter($name);
␣␣␣␣return␣$result;
}
END_OF_FUNC


####␣Method:␣hidden
#␣Parameters:
#␣␣␣$name␣->␣Name␣of␣the␣hidden␣field
#␣␣␣@default␣->␣(optional)␣Initial␣values␣of␣field␣(may␣be␣an␣array)
#␣␣␣␣␣␣or
#␣␣␣$default->[initial␣values␣of␣field]
#␣Returns:
#␣␣␣A␣string␣containing␣a␣<input␣type="hidden"␣name="name"␣value="value">
####
'hidden'␣=>␣<<'END_OF_FUNC',
sub␣hidden␣{
␣␣␣␣my($self,@p)␣=␣self_or_default(@_);

␣␣␣␣#␣this␣is␣the␣one␣place␣where␣we␣departed␣from␣our␣standard
␣␣␣␣#␣calling␣scheme,␣so␣we␣have␣to␣special-case␣(darn)
␣␣␣␣my(@result,@value);
␣␣␣␣my($name,$default,$override,@other)␣=␣
	rearrange([NAME,[DEFAULT,VALUE,VALUES],[OVERRIDE,FORCE]],@p);

␣␣␣␣my␣$do_override␣=␣0;
␣␣␣␣if␣(␣ref($p[0])␣||␣substr($p[0],0,1)␣eq␣'-')␣{
	@value␣=␣ref($default)␣?␣@{$default}␣:␣$default;
	$do_override␣=␣$override;
␣␣␣␣}␣else␣{
	for␣($default,$override,@other)␣{
	␣␣␣␣push(@value,$_)␣if␣defined($_);
	}
␣␣␣␣␣␣␣␣undef␣@other;
␣␣␣␣}

␣␣␣␣#␣use␣previous␣values␣if␣override␣is␣not␣set
␣␣␣␣my␣@prev␣=␣$self->param($name);
␣␣␣␣@value␣=␣@prev␣if␣!$do_override␣&&␣@prev;

␣␣␣␣$name=$self->_maybe_escapeHTML($name);
␣␣␣␣for␣(@value)␣{
	$_␣=␣defined($_)␣?␣$self->_maybe_escapeHTML($_,1)␣:␣'';
	push␣@result,$XHTML␣?␣qq(<input␣type="hidden"␣name="$name"␣value="$_"␣@other␣/>)
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣:␣qq(<input␣type="hidden"␣name="$name"␣value="$_"␣@other>);
␣␣␣␣}
␣␣␣␣return␣wantarray␣?␣@result␣:␣join('',@result);
}
END_OF_FUNC


####␣Method:␣image_button
#␣Parameters:
#␣␣␣$name␣->␣Name␣of␣the␣button
#␣␣␣$src␣->␣␣URL␣of␣the␣image␣source
#␣␣␣$align␣->␣Alignment␣style␣(TOP,␣BOTTOM␣or␣MIDDLE)
#␣Returns:
#␣␣␣A␣string␣containing␣a␣<input␣type="image"␣name="name"␣src="url"␣align="alignment">
####
'image_button'␣=>␣<<'END_OF_FUNC',
sub␣image_button␣{
␣␣␣␣my($self,@p)␣=␣self_or_default(@_);

␣␣␣␣my($name,$src,$alignment,@other)␣=
	rearrange([NAME,SRC,ALIGN],@p);

␣␣␣␣my($align)␣=␣$alignment␣?␣"␣align=\L\"$alignment\""␣:␣'';
␣␣␣␣my($other)␣=␣@other␣?␣"␣@other"␣:␣'';
␣␣␣␣$name=$self->_maybe_escapeHTML($name);
␣␣␣␣return␣$XHTML␣?␣qq(<input␣type="image"␣name="$name"␣src="$src"$align$other␣/>)
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣:␣qq/<input␣type="image"␣name="$name"␣src="$src"$align$other>/;
}
END_OF_FUNC


####␣Method:␣self_url
#␣Returns␣a␣URL␣containing␣the␣current␣script␣and␣all␣its
#␣param/value␣pairs␣arranged␣as␣a␣query.␣␣You␣can␣use␣this
#␣to␣create␣a␣link␣that,␣when␣selected,␣will␣reinvoke␣the
#␣script␣with␣all␣its␣state␣information␣preserved.
####
'self_url'␣=>␣<<'END_OF_FUNC',
sub␣self_url␣{
␣␣␣␣my($self,@p)␣=␣self_or_default(@_);
␣␣␣␣return␣$self->url('-path_info'=>1,'-query'=>1,'-full'=>1,@p);
}
END_OF_FUNC


#␣This␣is␣provided␣as␣a␣synonym␣to␣self_url()␣for␣people␣unfortunate
#␣enough␣to␣have␣incorporated␣it␣into␣their␣programs␣already!
'state'␣=>␣<<'END_OF_FUNC',
sub␣state␣{
␣␣␣␣&self_url;
}
END_OF_FUNC


####␣Method:␣url
#␣Like␣self_url,␣but␣doesn't␣return␣the␣query␣string␣part␣of
#␣the␣URL.
####
'url'␣=>␣<<'END_OF_FUNC',
sub␣url␣{
␣␣␣␣my($self,@p)␣=␣self_or_default(@_);
␣␣␣␣my␣($relative,$absolute,$full,$path_info,$query,$base,$rewrite)␣=␣
	rearrange(['RELATIVE','ABSOLUTE','FULL',['PATH','PATH_INFO'],['QUERY','QUERY_STRING'],'BASE','REWRITE'],@p);
␣␣␣␣my␣$url␣␣=␣'';
␣␣␣␣$full++␣␣␣␣␣␣if␣$base␣||␣!($relative␣||␣$absolute);
␣␣␣␣$rewrite++␣␣␣unless␣defined␣$rewrite;

␣␣␣␣my␣$path␣␣␣␣␣␣␣␣=␣␣$self->path_info;
␣␣␣␣my␣$script_name␣=␣␣$self->script_name;
␣␣␣␣my␣$request_uri␣=␣␣unescape($self->request_uri)␣||␣'';
␣␣␣␣my␣$query_str␣␣␣=␣␣$self->query_string;

␣␣␣␣my␣$rewrite_in_use␣=␣$request_uri␣&&␣$request_uri␣!~␣/^\Q$script_name/;
␣␣␣␣undef␣$path␣if␣$rewrite_in_use␣&&␣$rewrite;␣␣#␣path␣not␣valid␣when␣rewriting␣active

␣␣␣␣my␣$uri␣␣␣␣␣␣␣␣␣=␣␣$rewrite␣&&␣$request_uri␣?␣$request_uri␣:␣$script_name;
␣␣␣␣$uri␣␣␣␣␣␣␣␣␣␣␣␣=~␣s/\?.*$//s;␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣remove␣query␣string
␣␣␣␣$uri␣␣␣␣␣␣␣␣␣␣␣␣=~␣s/\Q$ENV{PATH_INFO}\E$//␣if␣defined␣$ENV{PATH_INFO};
#␣␣␣␣$uri␣␣␣␣␣␣␣␣␣␣␣␣=~␣s/\Q$path\E$//␣␣␣␣␣␣if␣defined␣$path;␣␣␣␣␣␣#␣remove␣path

␣␣␣␣if␣($full)␣{
␣␣␣␣␣␣␣␣my␣$protocol␣=␣$self->protocol();
␣␣␣␣␣␣␣␣$url␣=␣"$protocol://";
␣␣␣␣␣␣␣␣my␣$vh␣=␣http('x_forwarded_host')␣||␣http('host')␣||␣'';
␣␣␣␣␣␣␣␣␣␣␣␣$vh␣=~␣s/\:\d+$//;␣␣#␣some␣clients␣add␣the␣port␣number␣(incorrectly).␣Get␣rid␣of␣it.

␣␣␣␣␣␣␣␣$url␣.=␣$vh␣||␣server_name();

␣␣␣␣␣␣␣␣my␣$port␣=␣$self->virtual_port;

␣␣␣␣␣␣␣␣#␣add␣the␣port␣to␣the␣url␣unless␣it's␣the␣protocol's␣default␣port
␣␣␣␣␣␣␣␣$url␣.=␣':'␣.␣$port␣unless␣(lc($protocol)␣eq␣'http'␣␣&&␣$port␣==␣80)
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣or␣(lc($protocol)␣eq␣'https'␣&&␣$port␣==␣443);

␣␣␣␣␣␣␣␣return␣$url␣if␣$base;

␣␣␣␣␣␣␣␣$url␣.=␣$uri;
␣␣␣␣}␣elsif␣($relative)␣{
	($url)␣=␣$uri␣=~␣m!([^/]+)$!;
␣␣␣␣}␣elsif␣($absolute)␣{
	$url␣=␣$uri;
␣␣␣␣}

␣␣␣␣$url␣.=␣$path␣␣␣␣␣␣␣␣␣if␣$path_info␣and␣defined␣$path;
␣␣␣␣$url␣.=␣"?$query_str"␣if␣$query␣␣␣␣␣and␣$query_str␣ne␣'';
␣␣␣␣$url␣||=␣'';
␣␣␣␣$url␣=~␣s/([^a-zA-Z0-9_.%;&?\/\\:+=~-])/sprintf("%%%02X",ord($1))/eg;
␣␣␣␣return␣$url;
}

END_OF_FUNC

####␣Method:␣cookie
#␣Set␣or␣read␣a␣cookie␣from␣the␣specified␣name.
#␣Cookie␣can␣then␣be␣passed␣to␣header().
#␣Usual␣rules␣apply␣to␣the␣stickiness␣of␣-value.
#␣␣Parameters:
#␣␣␣-name␣->␣name␣for␣this␣cookie␣(optional)
#␣␣␣-value␣->␣value␣of␣this␣cookie␣(scalar,␣array␣or␣hash)␣
#␣␣␣-path␣->␣paths␣for␣which␣this␣cookie␣is␣valid␣(optional)
#␣␣␣-domain␣->␣internet␣domain␣in␣which␣this␣cookie␣is␣valid␣(optional)
#␣␣␣-secure␣->␣if␣true,␣cookie␣only␣passed␣through␣secure␣channel␣(optional)
#␣␣␣-expires␣->␣expiry␣date␣in␣format␣Wdy,␣DD-Mon-YYYY␣HH:MM:SS␣GMT␣(optional)
####
'cookie'␣=>␣<<'END_OF_FUNC',
sub␣cookie␣{
␣␣␣␣my($self,@p)␣=␣self_or_default(@_);
␣␣␣␣my($name,$value,$path,$domain,$secure,$expires,$httponly)␣=
	rearrange([NAME,[VALUE,VALUES],PATH,DOMAIN,SECURE,EXPIRES,HTTPONLY],@p);

␣␣␣␣require␣CGI::Cookie;

␣␣␣␣#␣if␣no␣value␣is␣supplied,␣then␣we␣retrieve␣the
␣␣␣␣#␣value␣of␣the␣cookie,␣if␣any.␣␣For␣efficiency,␣we␣cache␣the␣parsed
␣␣␣␣#␣cookies␣in␣our␣state␣variables.
␣␣␣␣unless␣(␣defined($value)␣)␣{
	$self->{'.cookies'}␣=␣CGI::Cookie->fetch;
	
	#␣If␣no␣name␣is␣supplied,␣then␣retrieve␣the␣names␣of␣all␣our␣cookies.
	return␣()␣unless␣$self->{'.cookies'};
	return␣keys␣%{$self->{'.cookies'}}␣unless␣$name;
	return␣()␣unless␣$self->{'.cookies'}->{$name};
	return␣$self->{'.cookies'}->{$name}->value␣if␣defined($name)␣&&␣$name␣ne␣'';
␣␣␣␣}

␣␣␣␣#␣If␣we␣get␣here,␣we're␣creating␣a␣new␣cookie
␣␣␣␣return␣undef␣unless␣defined($name)␣&&␣$name␣ne␣'';	#␣this␣is␣an␣error

␣␣␣␣my␣@param;
␣␣␣␣push(@param,'-name'=>$name);
␣␣␣␣push(@param,'-value'=>$value);
␣␣␣␣push(@param,'-domain'=>$domain)␣if␣$domain;
␣␣␣␣push(@param,'-path'=>$path)␣if␣$path;
␣␣␣␣push(@param,'-expires'=>$expires)␣if␣$expires;
␣␣␣␣push(@param,'-secure'=>$secure)␣if␣$secure;
␣␣␣␣push(@param,'-httponly'=>$httponly)␣if␣$httponly;

␣␣␣␣return␣CGI::Cookie->new(@param);
}
END_OF_FUNC

'parse_keywordlist'␣=>␣<<'END_OF_FUNC',
sub␣parse_keywordlist␣{
␣␣␣␣my($self,$tosplit)␣=␣@_;
␣␣␣␣$tosplit␣=␣unescape($tosplit);␣#␣unescape␣the␣keywords
␣␣␣␣$tosplit=~tr/+/␣/;␣␣␣␣␣␣␣␣␣␣#␣pluses␣to␣spaces
␣␣␣␣my(@keywords)␣=␣split(/\s+/,$tosplit);
␣␣␣␣return␣@keywords;
}
END_OF_FUNC

'param_fetch'␣=>␣<<'END_OF_FUNC',
sub␣param_fetch␣{
␣␣␣␣my($self,@p)␣=␣self_or_default(@_);
␣␣␣␣my($name)␣=␣rearrange([NAME],@p);
␣␣␣␣unless␣(exists($self->{param}{$name}))␣{
	$self->add_parameter($name);
	$self->{param}{$name}␣=␣[];
␣␣␣␣}
␣␣␣␣
␣␣␣␣return␣$self->{param}{$name};
}
END_OF_FUNC

###############################################
#␣OTHER␣INFORMATION␣PROVIDED␣BY␣THE␣ENVIRONMENT
###############################################

####␣Method:␣path_info
#␣Return␣the␣extra␣virtual␣path␣information␣provided
#␣after␣the␣URL␣(if␣any)
####
'path_info'␣=>␣<<'END_OF_FUNC',
sub␣path_info␣{
␣␣␣␣my␣($self,$info)␣=␣self_or_default(@_);
␣␣␣␣if␣(defined($info))␣{
	$info␣=␣"/$info"␣if␣$info␣ne␣''␣&&␣␣substr($info,0,1)␣ne␣'/';
	$self->{'.path_info'}␣=␣$info;
␣␣␣␣}␣elsif␣(!␣defined($self->{'.path_info'})␣)␣{
␣␣␣␣␣␣␣␣my␣(undef,$path_info)␣=␣$self->_name_and_path_from_env;
	$self->{'.path_info'}␣=␣$path_info␣||␣'';
␣␣␣␣}
␣␣␣␣return␣$self->{'.path_info'};
}
END_OF_FUNC

#␣This␣function␣returns␣a␣potentially␣modified␣version␣of␣SCRIPT_NAME
#␣and␣PATH_INFO.␣Some␣HTTP␣servers␣do␣sanitise␣the␣paths␣in␣those
#␣variables.␣It␣is␣the␣case␣of␣at␣least␣Apache␣2.␣If␣for␣instance␣the
#␣user␣requests:␣/path/./to/script.cgi/x//y/z/../x?y,␣Apache␣will␣set:
#␣REQUEST_URI=/path/./to/script.cgi/x//y/z/../x?y
#␣SCRIPT_NAME=/path/to/env.cgi
#␣PATH_INFO=/x/y/x
#
#␣This␣is␣all␣fine␣except␣that␣some␣bogus␣CGI␣scripts␣expect
#␣PATH_INFO=/http://foo␣when␣the␣user␣requests
#␣http://xxx/script.cgi/http://foo
#
#␣Old␣versions␣of␣this␣module␣used␣to␣accomodate␣with␣those␣scripts,␣so
#␣this␣is␣why␣we␣do␣this␣here␣to␣keep␣those␣scripts␣backward␣compatible.
#␣Basically,␣we␣accomodate␣with␣those␣scripts␣but␣within␣limits,␣that␣is
#␣we␣only␣try␣to␣preserve␣the␣number␣of␣/␣that␣were␣provided␣by␣the␣user
#␣if␣$REQUEST_URI␣and␣"$SCRIPT_NAME$PATH_INFO"␣only␣differ␣by␣the␣number
#␣of␣consecutive␣/.
#
#␣So␣for␣instance,␣in:␣http://foo/x//y/script.cgi/a//b,␣we'll␣return␣a
#␣script_name␣of␣/x//y/script.cgi␣and␣a␣path_info␣of␣/a//b,␣but␣in:
#␣http://foo/./x//z/script.cgi/a/../b//c,␣we'll␣return␣the␣versions
#␣possibly␣sanitised␣by␣the␣HTTP␣server,␣so␣in␣the␣case␣of␣Apache␣2:
#␣script_name␣==␣/foo/x/z/script.cgi␣and␣path_info␣==␣/b/c.
#
#␣Future␣versions␣of␣this␣module␣may␣no␣longer␣do␣that,␣so␣one␣should
#␣avoid␣relying␣on␣the␣browser,␣proxy,␣server,␣and␣CGI.pm␣preserving␣the
#␣number␣of␣consecutive␣slashes␣as␣no␣guarantee␣can␣be␣made␣there.
'_name_and_path_from_env'␣=>␣<<'END_OF_FUNC',
sub␣_name_and_path_from_env␣{
␣␣␣␣my␣$self␣=␣shift;
␣␣␣␣my␣$script_name␣=␣$ENV{SCRIPT_NAME}␣␣||␣'';
␣␣␣␣my␣$path_info␣␣␣=␣$ENV{PATH_INFO}␣␣␣␣||␣'';
␣␣␣␣my␣$uri␣␣␣␣␣␣␣␣␣=␣$self->request_uri␣||␣'';

␣␣␣␣$uri␣=~␣s/\?.*//s;
␣␣␣␣$uri␣=␣unescape($uri);

␣␣␣␣if␣($uri␣ne␣"$script_name$path_info")␣{
␣␣␣␣␣␣␣␣my␣$script_name_pattern␣=␣quotemeta($script_name);
␣␣␣␣␣␣␣␣my␣$path_info_pattern␣=␣quotemeta($path_info);
␣␣␣␣␣␣␣␣$script_name_pattern␣=~␣s{(?:\\/)+}{/+}g;
␣␣␣␣␣␣␣␣$path_info_pattern␣=~␣s{(?:\\/)+}{/+}g;

␣␣␣␣␣␣␣␣if␣($uri␣=~␣/^($script_name_pattern)($path_info_pattern)$/s)␣{
␣␣␣␣␣␣␣␣␣␣␣␣#␣REQUEST_URI␣and␣SCRIPT_NAME␣.␣PATH_INFO␣only␣differ␣by␣the
␣␣␣␣␣␣␣␣␣␣␣␣#␣numer␣of␣consecutive␣slashes,␣so␣we␣can␣extract␣the␣info␣from
␣␣␣␣␣␣␣␣␣␣␣␣#␣REQUEST_URI:
␣␣␣␣␣␣␣␣␣␣␣␣($script_name,␣$path_info)␣=␣($1,␣$2);
␣␣␣␣␣␣␣␣}
␣␣␣␣}
␣␣␣␣return␣($script_name,$path_info);
}
END_OF_FUNC


####␣Method:␣request_method
#␣Returns␣'POST',␣'GET',␣'PUT'␣or␣'HEAD'
####
'request_method'␣=>␣<<'END_OF_FUNC',
sub␣request_method␣{
␣␣␣␣return␣(defined␣$ENV{'REQUEST_METHOD'})␣?␣$ENV{'REQUEST_METHOD'}␣:␣undef;
}
END_OF_FUNC

####␣Method:␣content_type
#␣Returns␣the␣content_type␣string
####
'content_type'␣=>␣<<'END_OF_FUNC',
sub␣content_type␣{
␣␣␣␣return␣(defined␣$ENV{'CONTENT_TYPE'})␣?␣$ENV{'CONTENT_TYPE'}␣:␣undef;
}
END_OF_FUNC

####␣Method:␣path_translated
#␣Return␣the␣physical␣path␣information␣provided
#␣by␣the␣URL␣(if␣any)
####
'path_translated'␣=>␣<<'END_OF_FUNC',
sub␣path_translated␣{
␣␣␣␣return␣(defined␣$ENV{'PATH_TRANSLATED'})␣?␣$ENV{'PATH_TRANSLATED'}␣:␣undef;
}
END_OF_FUNC


####␣Method:␣request_uri
#␣Return␣the␣literal␣request␣URI
####
'request_uri'␣=>␣<<'END_OF_FUNC',
sub␣request_uri␣{
␣␣␣␣return␣(defined␣$ENV{'REQUEST_URI'})␣?␣$ENV{'REQUEST_URI'}␣:␣undef;
}
END_OF_FUNC


####␣Method:␣query_string
#␣Synthesize␣a␣query␣string␣from␣our␣current
#␣parameters
####
'query_string'␣=>␣<<'END_OF_FUNC',
sub␣query_string␣{
␣␣␣␣my($self)␣=␣self_or_default(@_);
␣␣␣␣my($param,$value,@pairs);
␣␣␣␣for␣$param␣($self->param)␣{
␣␣␣␣␣␣␣my($eparam)␣=␣escape($param);
␣␣␣␣␣␣␣for␣$value␣($self->param($param))␣{
␣␣␣␣␣␣␣␣␣␣␣$value␣=␣escape($value);
␣␣␣␣␣␣␣␣␣␣␣␣next␣unless␣defined␣$value;
␣␣␣␣␣␣␣␣␣␣␣push(@pairs,"$eparam=$value");
␣␣␣␣␣␣␣}
␣␣␣␣}
␣␣␣␣for␣(keys␣%{$self->{'.fieldnames'}})␣{
␣␣␣␣␣␣push(@pairs,".cgifields=".escape("$_"));
␣␣␣␣}
␣␣␣␣return␣join($USE_PARAM_SEMICOLONS␣?␣';'␣:␣'&',@pairs);
}
END_OF_FUNC


####␣Method:␣accept
#␣Without␣parameters,␣returns␣an␣array␣of␣the
#␣MIME␣types␣the␣browser␣accepts.
#␣With␣a␣single␣parameter␣equal␣to␣a␣MIME
#␣type,␣will␣return␣undef␣if␣the␣browser␣won't
#␣accept␣it,␣1␣if␣the␣browser␣accepts␣it␣but
#␣doesn't␣give␣a␣preference,␣or␣a␣floating␣point
#␣value␣between␣0.0␣and␣1.0␣if␣the␣browser
#␣declares␣a␣quantitative␣score␣for␣it.
#␣This␣handles␣MIME␣type␣globs␣correctly.
####
'Accept'␣=>␣<<'END_OF_FUNC',
sub␣Accept␣{
␣␣␣␣my($self,$search)␣=␣self_or_CGI(@_);
␣␣␣␣my(%prefs,$type,$pref,$pat);
␣␣␣␣
␣␣␣␣my(@accept)␣=␣defined␣$self->http('accept')␣
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣?␣split(',',$self->http('accept'))
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣:␣();

␣␣␣␣for␣(@accept)␣{
	($pref)␣=␣/q=(\d\.\d+|\d+)/;
	($type)␣=␣m#(\S+/[^;]+)#;
	next␣unless␣$type;
	$prefs{$type}=$pref␣||␣1;
␣␣␣␣}

␣␣␣␣return␣keys␣%prefs␣unless␣$search;
␣␣␣␣
␣␣␣␣#␣if␣a␣search␣type␣is␣provided,␣we␣may␣need␣to
␣␣␣␣#␣perform␣a␣pattern␣matching␣operation.
␣␣␣␣#␣The␣MIME␣types␣use␣a␣glob␣mechanism,␣which
␣␣␣␣#␣is␣easily␣translated␣into␣a␣perl␣pattern␣match

␣␣␣␣#␣First␣return␣the␣preference␣for␣directly␣supported
␣␣␣␣#␣types:
␣␣␣␣return␣$prefs{$search}␣if␣$prefs{$search};

␣␣␣␣#␣Didn't␣get␣it,␣so␣try␣pattern␣matching.
␣␣␣␣for␣(keys␣%prefs)␣{
	next␣unless␣/\*/;␣␣␣␣␣␣␣#␣not␣a␣pattern␣match
	($pat␣=␣$_)␣=~␣s/([^\w*])/\\$1/g;␣#␣escape␣meta␣characters
	$pat␣=~␣s/\*/.*/g;␣#␣turn␣it␣into␣a␣pattern
	return␣$prefs{$_}␣if␣$search=~/$pat/;
␣␣␣␣}
}
END_OF_FUNC


####␣Method:␣user_agent
#␣If␣called␣with␣no␣parameters,␣returns␣the␣user␣agent.
#␣If␣called␣with␣one␣parameter,␣does␣a␣pattern␣match␣(case
#␣insensitive)␣on␣the␣user␣agent.
####
'user_agent'␣=>␣<<'END_OF_FUNC',
sub␣user_agent␣{
␣␣␣␣my($self,$match)=self_or_CGI(@_);
␣␣␣␣my␣$user_agent␣=␣$self->http('user_agent');
␣␣␣␣return␣$user_agent␣unless␣$match␣&&␣$user_agent;
␣␣␣␣return␣$user_agent␣=~␣/$match/i;
}
END_OF_FUNC


####␣Method:␣raw_cookie
#␣Returns␣the␣magic␣cookies␣for␣the␣session.
#␣The␣cookies␣are␣not␣parsed␣or␣altered␣in␣any␣way,␣i.e.
#␣cookies␣are␣returned␣exactly␣as␣given␣in␣the␣HTTP
#␣headers.␣␣If␣a␣cookie␣name␣is␣given,␣only␣that␣cookie's
#␣value␣is␣returned,␣otherwise␣the␣entire␣raw␣cookie
#␣is␣returned.
####
'raw_cookie'␣=>␣<<'END_OF_FUNC',
sub␣raw_cookie␣{
␣␣␣␣my($self,$key)␣=␣self_or_CGI(@_);

␣␣␣␣require␣CGI::Cookie;

␣␣␣␣if␣(defined($key))␣{
	$self->{'.raw_cookies'}␣=␣CGI::Cookie->raw_fetch
	␣␣␣␣unless␣$self->{'.raw_cookies'};

	return␣()␣unless␣$self->{'.raw_cookies'};
	return␣()␣unless␣$self->{'.raw_cookies'}->{$key};
	return␣$self->{'.raw_cookies'}->{$key};
␣␣␣␣}
␣␣␣␣return␣$self->http('cookie')␣||␣$ENV{'COOKIE'}␣||␣'';
}
END_OF_FUNC

####␣Method:␣virtual_host
#␣Return␣the␣name␣of␣the␣virtual_host,␣which
#␣is␣not␣always␣the␣same␣as␣the␣server
######
'virtual_host'␣=>␣<<'END_OF_FUNC',
sub␣virtual_host␣{
␣␣␣␣my␣$vh␣=␣http('x_forwarded_host')␣||␣http('host')␣||␣server_name();
␣␣␣␣$vh␣=~␣s/:\d+$//;		#␣get␣rid␣of␣port␣number
␣␣␣␣return␣$vh;
}
END_OF_FUNC

####␣Method:␣remote_host
#␣Return␣the␣name␣of␣the␣remote␣host,␣or␣its␣IP
#␣address␣if␣unavailable.␣␣If␣this␣variable␣isn't
#␣defined,␣it␣returns␣"localhost"␣for␣debugging
#␣purposes.
####
'remote_host'␣=>␣<<'END_OF_FUNC',
sub␣remote_host␣{
␣␣␣␣return␣$ENV{'REMOTE_HOST'}␣||␣$ENV{'REMOTE_ADDR'}␣
␣␣␣␣||␣'localhost';
}
END_OF_FUNC


####␣Method:␣remote_addr
#␣Return␣the␣IP␣addr␣of␣the␣remote␣host.
####
'remote_addr'␣=>␣<<'END_OF_FUNC',
sub␣remote_addr␣{
␣␣␣␣return␣$ENV{'REMOTE_ADDR'}␣||␣'127.0.0.1';
}
END_OF_FUNC


####␣Method:␣script_name
#␣Return␣the␣partial␣URL␣to␣this␣script␣for
#␣self-referencing␣scripts.␣␣Also␣see
#␣self_url(),␣which␣returns␣a␣URL␣with␣all␣state␣information
#␣preserved.
####
'script_name'␣=>␣<<'END_OF_FUNC',
sub␣script_name␣{
␣␣␣␣my␣($self,@p)␣=␣self_or_default(@_);
␣␣␣␣if␣(@p)␣{
␣␣␣␣␣␣␣␣$self->{'.script_name'}␣=␣shift␣@p;
␣␣␣␣}␣elsif␣(!exists␣$self->{'.script_name'})␣{
␣␣␣␣␣␣␣␣my␣($script_name,$path_info)␣=␣$self->_name_and_path_from_env();
␣␣␣␣␣␣␣␣$self->{'.script_name'}␣=␣$script_name;
␣␣␣␣}
␣␣␣␣return␣$self->{'.script_name'};
}
END_OF_FUNC


####␣Method:␣referer
#␣Return␣the␣HTTP_REFERER:␣useful␣for␣generating
#␣a␣GO␣BACK␣button.
####
'referer'␣=>␣<<'END_OF_FUNC',
sub␣referer␣{
␣␣␣␣my($self)␣=␣self_or_CGI(@_);
␣␣␣␣return␣$self->http('referer');
}
END_OF_FUNC


####␣Method:␣server_name
#␣Return␣the␣name␣of␣the␣server
####
'server_name'␣=>␣<<'END_OF_FUNC',
sub␣server_name␣{
␣␣␣␣return␣$ENV{'SERVER_NAME'}␣||␣'localhost';
}
END_OF_FUNC

####␣Method:␣server_software
#␣Return␣the␣name␣of␣the␣server␣software
####
'server_software'␣=>␣<<'END_OF_FUNC',
sub␣server_software␣{
␣␣␣␣return␣$ENV{'SERVER_SOFTWARE'}␣||␣'cmdline';
}
END_OF_FUNC

####␣Method:␣virtual_port
#␣Return␣the␣server␣port,␣taking␣virtual␣hosts␣into␣account
####
'virtual_port'␣=>␣<<'END_OF_FUNC',
sub␣virtual_port␣{
␣␣␣␣my($self)␣=␣self_or_default(@_);
␣␣␣␣my␣$vh␣=␣$self->http('x_forwarded_host')␣||␣$self->http('host');
␣␣␣␣my␣$protocol␣=␣$self->protocol;
␣␣␣␣if␣($vh)␣{
␣␣␣␣␣␣␣␣return␣($vh␣=~␣/:(\d+)$/)[0]␣||␣($protocol␣eq␣'https'␣?␣443␣:␣80);
␣␣␣␣}␣else␣{
␣␣␣␣␣␣␣␣return␣$self->server_port();
␣␣␣␣}
}
END_OF_FUNC

####␣Method:␣server_port
#␣Return␣the␣tcp/ip␣port␣the␣server␣is␣running␣on
####
'server_port'␣=>␣<<'END_OF_FUNC',
sub␣server_port␣{
␣␣␣␣return␣$ENV{'SERVER_PORT'}␣||␣80;␣#␣for␣debugging
}
END_OF_FUNC

####␣Method:␣server_protocol
#␣Return␣the␣protocol␣(usually␣HTTP/1.0)
####
'server_protocol'␣=>␣<<'END_OF_FUNC',
sub␣server_protocol␣{
␣␣␣␣return␣$ENV{'SERVER_PROTOCOL'}␣||␣'HTTP/1.0';␣#␣for␣debugging
}
END_OF_FUNC

####␣Method:␣http
#␣Return␣the␣value␣of␣an␣HTTP␣variable,␣or
#␣the␣list␣of␣variables␣if␣none␣provided
####
'http'␣=>␣<<'END_OF_FUNC',
sub␣http␣{
␣␣␣␣my␣($self,$parameter)␣=␣self_or_CGI(@_);
␣␣␣␣if␣(␣defined($parameter)␣)␣{
␣␣␣␣␣␣␣␣$parameter␣=~␣tr/-a-z/_A-Z/;
␣␣␣␣␣␣␣␣if␣(␣$parameter␣=~␣/^HTTP(?:_|$)/␣)␣{
␣␣␣␣␣␣␣␣␣␣␣␣return␣$ENV{$parameter};
␣␣␣␣␣␣␣␣}
␣␣␣␣␣␣␣␣return␣$ENV{"HTTP_$parameter"};
␣␣␣␣}
␣␣␣␣return␣grep␣{␣/^HTTP(?:_|$)/␣}␣keys␣%ENV;
}
END_OF_FUNC

####␣Method:␣https
#␣Return␣the␣value␣of␣HTTPS,␣or
#␣the␣value␣of␣an␣HTTPS␣variable,␣or
#␣the␣list␣of␣variables
####
'https'␣=>␣<<'END_OF_FUNC',
sub␣https␣{
␣␣␣␣my␣($self,$parameter)␣=␣self_or_CGI(@_);
␣␣␣␣if␣(␣defined($parameter)␣)␣{
␣␣␣␣␣␣␣␣$parameter␣=~␣tr/-a-z/_A-Z/;
␣␣␣␣␣␣␣␣if␣(␣$parameter␣=~␣/^HTTPS(?:_|$)/␣)␣{
␣␣␣␣␣␣␣␣␣␣␣␣return␣$ENV{$parameter};
␣␣␣␣␣␣␣␣}
␣␣␣␣␣␣␣␣return␣$ENV{"HTTPS_$parameter"};
␣␣␣␣}
␣␣␣␣return␣wantarray
␣␣␣␣␣␣␣␣?␣grep␣{␣/^HTTPS(?:_|$)/␣}␣keys␣%ENV
␣␣␣␣␣␣␣␣:␣$ENV{'HTTPS'};
}
END_OF_FUNC

####␣Method:␣protocol
#␣Return␣the␣protocol␣(http␣or␣https␣currently)
####
'protocol'␣=>␣<<'END_OF_FUNC',
sub␣protocol␣{
␣␣␣␣local($^W)=0;
␣␣␣␣my␣$self␣=␣shift;
␣␣␣␣return␣'https'␣if␣uc($self->https())␣eq␣'ON';␣
␣␣␣␣return␣'https'␣if␣$self->server_port␣==␣443;
␣␣␣␣my␣$prot␣=␣$self->server_protocol;
␣␣␣␣my($protocol,$version)␣=␣split('/',$prot);
␣␣␣␣return␣"\L$protocol\E";
}
END_OF_FUNC

####␣Method:␣remote_ident
#␣Return␣the␣identity␣of␣the␣remote␣user
#␣(but␣only␣if␣his␣host␣is␣running␣identd)
####
'remote_ident'␣=>␣<<'END_OF_FUNC',
sub␣remote_ident␣{
␣␣␣␣return␣(defined␣$ENV{'REMOTE_IDENT'})␣?␣$ENV{'REMOTE_IDENT'}␣:␣undef;
}
END_OF_FUNC


####␣Method:␣auth_type
#␣Return␣the␣type␣of␣use␣verification/authorization␣in␣use,␣if␣any.
####
'auth_type'␣=>␣<<'END_OF_FUNC',
sub␣auth_type␣{
␣␣␣␣return␣(defined␣$ENV{'AUTH_TYPE'})␣?␣$ENV{'AUTH_TYPE'}␣:␣undef;
}
END_OF_FUNC


####␣Method:␣remote_user
#␣Return␣the␣authorization␣name␣used␣for␣user
#␣verification.
####
'remote_user'␣=>␣<<'END_OF_FUNC',
sub␣remote_user␣{
␣␣␣␣return␣(defined␣$ENV{'REMOTE_USER'})␣?␣$ENV{'REMOTE_USER'}␣:␣undef;
}
END_OF_FUNC


####␣Method:␣user_name
#␣Try␣to␣return␣the␣remote␣user's␣name␣by␣hook␣or␣by
#␣crook
####
'user_name'␣=>␣<<'END_OF_FUNC',
sub␣user_name␣{
␣␣␣␣my␣($self)␣=␣self_or_CGI(@_);
␣␣␣␣return␣$self->http('from')␣||␣$ENV{'REMOTE_IDENT'}␣||␣$ENV{'REMOTE_USER'};
}
END_OF_FUNC

####␣Method:␣nosticky
#␣Set␣or␣return␣the␣NOSTICKY␣global␣flag
####
'nosticky'␣=>␣<<'END_OF_FUNC',
sub␣nosticky␣{
␣␣␣␣my␣($self,$param)␣=␣self_or_CGI(@_);
␣␣␣␣$CGI::NOSTICKY␣=␣$param␣if␣defined($param);
␣␣␣␣return␣$CGI::NOSTICKY;
}
END_OF_FUNC

####␣Method:␣nph
#␣Set␣or␣return␣the␣NPH␣global␣flag
####
'nph'␣=>␣<<'END_OF_FUNC',
sub␣nph␣{
␣␣␣␣my␣($self,$param)␣=␣self_or_CGI(@_);
␣␣␣␣$CGI::NPH␣=␣$param␣if␣defined($param);
␣␣␣␣return␣$CGI::NPH;
}
END_OF_FUNC

####␣Method:␣private_tempfiles
#␣Set␣or␣return␣the␣private_tempfiles␣global␣flag
####
'private_tempfiles'␣=>␣<<'END_OF_FUNC',
sub␣private_tempfiles␣{
␣␣␣␣my␣($self,$param)␣=␣self_or_CGI(@_);
␣␣␣␣$CGI::PRIVATE_TEMPFILES␣=␣$param␣if␣defined($param);
␣␣␣␣return␣$CGI::PRIVATE_TEMPFILES;
}
END_OF_FUNC
####␣Method:␣close_upload_files
#␣Set␣or␣return␣the␣close_upload_files␣global␣flag
####
'close_upload_files'␣=>␣<<'END_OF_FUNC',
sub␣close_upload_files␣{
␣␣␣␣my␣($self,$param)␣=␣self_or_CGI(@_);
␣␣␣␣$CGI::CLOSE_UPLOAD_FILES␣=␣$param␣if␣defined($param);
␣␣␣␣return␣$CGI::CLOSE_UPLOAD_FILES;
}
END_OF_FUNC


####␣Method:␣default_dtd
#␣Set␣or␣return␣the␣default_dtd␣global
####
'default_dtd'␣=>␣<<'END_OF_FUNC',
sub␣default_dtd␣{
␣␣␣␣my␣($self,$param,$param2)␣=␣self_or_CGI(@_);
␣␣␣␣if␣(defined␣$param2␣&&␣defined␣$param)␣{
␣␣␣␣␣␣␣␣$CGI::DEFAULT_DTD␣=␣[␣$param,␣$param2␣];
␣␣␣␣}␣elsif␣(defined␣$param)␣{
␣␣␣␣␣␣␣␣$CGI::DEFAULT_DTD␣=␣$param;
␣␣␣␣}
␣␣␣␣return␣$CGI::DEFAULT_DTD;
}
END_OF_FUNC

#␣--------------␣really␣private␣subroutines␣-----------------
'_maybe_escapeHTML'␣=>␣<<'END_OF_FUNC',
sub␣_maybe_escapeHTML␣{
␣␣␣␣#␣hack␣to␣work␣around␣␣earlier␣hacks
␣␣␣␣push␣@_,$_[0]␣if␣@_==1␣&&␣$_[0]␣eq␣'CGI';
␣␣␣␣my␣($self,$toencode,$newlinestoo)␣=␣CGI::self_or_default(@_);
␣␣␣␣return␣undef␣unless␣defined($toencode);
␣␣␣␣return␣$toencode␣if␣ref($self)␣&&␣!$self->{'escape'};
␣␣␣␣return␣$self->escapeHTML($toencode,␣$newlinestoo);
}
END_OF_FUNC

'previous_or_default'␣=>␣<<'END_OF_FUNC',
sub␣previous_or_default␣{
␣␣␣␣my($self,$name,$defaults,$override)␣=␣@_;
␣␣␣␣my(%selected);

␣␣␣␣if␣(!$override␣&&␣($self->{'.fieldnames'}->{$name}␣||␣
		␣␣␣␣␣␣␣defined($self->param($name))␣)␣)␣{
	$selected{$_}++␣for␣$self->param($name);
␣␣␣␣}␣elsif␣(defined($defaults)␣&&␣ref($defaults)␣&&␣
	␣␣␣␣␣(ref($defaults)␣eq␣'ARRAY'))␣{
	$selected{$_}++␣for␣@{$defaults};
␣␣␣␣}␣else␣{
	$selected{$defaults}++␣if␣defined($defaults);
␣␣␣␣}

␣␣␣␣return␣%selected;
}
END_OF_FUNC

'register_parameter'␣=>␣<<'END_OF_FUNC',
sub␣register_parameter␣{
␣␣␣␣my($self,$param)␣=␣@_;
␣␣␣␣$self->{'.parametersToAdd'}->{$param}++;
}
END_OF_FUNC

'get_fields'␣=>␣<<'END_OF_FUNC',
sub␣get_fields␣{
␣␣␣␣my($self)␣=␣@_;
␣␣␣␣return␣$self->CGI::hidden('-name'=>'.cgifields',
			␣␣␣␣␣␣'-values'=>[keys␣%{$self->{'.parametersToAdd'}}],
			␣␣␣␣␣␣'-override'=>1);
}
END_OF_FUNC

'read_from_cmdline'␣=>␣<<'END_OF_FUNC',
sub␣read_from_cmdline␣{
␣␣␣␣my($input,@words);
␣␣␣␣my($query_string);
␣␣␣␣my($subpath);
␣␣␣␣if␣($DEBUG␣&&␣@ARGV)␣{
	@words␣=␣@ARGV;
␣␣␣␣}␣elsif␣($DEBUG␣>␣1)␣{
	require␣"shellwords.pl";
	print␣STDERR␣"(offline␣mode:␣enter␣name=value␣pairs␣on␣standard␣input;␣press␣^D␣or␣^Z␣when␣done)\n";
	chomp(@lines␣=␣<STDIN>);␣#␣remove␣newlines
	$input␣=␣join("␣",@lines);
	@words␣=␣&shellwords($input);␣␣␣␣
␣␣␣␣}
␣␣␣␣for␣(@words)␣{
	s/\\=/%3D/g;
	s/\\&/%26/g;	␣␣␣␣
␣␣␣␣}

␣␣␣␣if␣("@words"=~/=/)␣{
	$query_string␣=␣join('&',@words);
␣␣␣␣}␣else␣{
	$query_string␣=␣join('+',@words);
␣␣␣␣}
␣␣␣␣if␣($query_string␣=~␣/^(.*?)\?(.*)$/)
␣␣␣␣{
␣␣␣␣␣␣␣␣$query_string␣=␣$2;
␣␣␣␣␣␣␣␣$subpath␣=␣$1;
␣␣␣␣}
␣␣␣␣return␣{␣'query_string'␣=>␣$query_string,␣'subpath'␣=>␣$subpath␣};
}
END_OF_FUNC

#####
#␣subroutine:␣read_multipart
#
#␣Read␣multipart␣data␣and␣store␣it␣into␣our␣parameters.
#␣An␣interesting␣feature␣is␣that␣if␣any␣of␣the␣parts␣is␣a␣file,␣we
#␣create␣a␣temporary␣file␣and␣open␣up␣a␣filehandle␣on␣it␣so␣that␣the
#␣caller␣can␣read␣from␣it␣if␣necessary.
#####
'read_multipart'␣=>␣<<'END_OF_FUNC',
sub␣read_multipart␣{
␣␣␣␣my($self,$boundary,$length)␣=␣@_;
␣␣␣␣my($buffer)␣=␣$self->new_MultipartBuffer($boundary,$length);
␣␣␣␣return␣unless␣$buffer;
␣␣␣␣my(%header,$body);
␣␣␣␣my␣$filenumber␣=␣0;
␣␣␣␣while␣(!$buffer->eof)␣{
	%header␣=␣$buffer->readHeader;

	unless␣(%header)␣{
	␣␣␣␣$self->cgi_error("400␣Bad␣request␣(malformed␣multipart␣POST)");
	␣␣␣␣return;
	}

	$header{'Content-Disposition'}␣||=␣'';␣#␣quench␣uninit␣variable␣warning

	my($param)=␣$header{'Content-Disposition'}=~/[\s;]name="([^"]*)"/;
␣␣␣␣␣␣␣␣$param␣.=␣$TAINTED;

␣␣␣␣␣␣␣␣#␣See␣RFC␣1867,␣2183,␣2045
␣␣␣␣␣␣␣␣#␣NB:␣File␣content␣will␣be␣loaded␣into␣memory␣should
␣␣␣␣␣␣␣␣#␣content-disposition␣parsing␣fail.
␣␣␣␣␣␣␣␣my␣($filename)␣=␣$header{'Content-Disposition'}
	␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣=~/␣filename=(("[^"]*")|([a-z\d!\#'\*\+,\.^_\`\{\}\|\~]*))/i;

	$filename␣||=␣'';␣#␣quench␣uninit␣variable␣warning

␣␣␣␣␣␣␣␣$filename␣=~␣s/^"([^"]*)"$/$1/;
	#␣Test␣for␣Opera's␣multiple␣upload␣feature
	my($multipart)␣=␣(␣defined(␣$header{'Content-Type'}␣)␣&&
		$header{'Content-Type'}␣=~␣/multipart\/mixed/␣)␣?
		1␣:␣0;

	#␣add␣this␣parameter␣to␣our␣list
	$self->add_parameter($param);

	#␣If␣no␣filename␣specified,␣then␣just␣read␣the␣data␣and␣assign␣it
	#␣to␣our␣parameter␣list.
	if␣(␣(␣!defined($filename)␣||␣$filename␣eq␣''␣)␣&&␣!$multipart␣)␣{
	␣␣␣␣my($value)␣=␣$buffer->readBody;
␣␣␣␣␣␣␣␣␣␣␣␣$value␣.=␣$TAINTED;
	␣␣␣␣push(@{$self->{param}{$param}},$value);
	␣␣␣␣next;
	}

	my␣($tmpfile,$tmp,$filehandle);
␣␣␣␣␣␣UPLOADS:␣{
	␣␣#␣If␣we␣get␣here,␣then␣we␣are␣dealing␣with␣a␣potentially␣large
	␣␣#␣uploaded␣form.␣␣Save␣the␣data␣to␣a␣temporary␣file,␣then␣open
	␣␣#␣the␣file␣for␣reading.

	␣␣#␣skip␣the␣file␣if␣uploads␣disabled
	␣␣if␣($DISABLE_UPLOADS)␣{
	␣␣␣␣␣␣while␣(defined($data␣=␣$buffer->read))␣{␣}
	␣␣␣␣␣␣last␣UPLOADS;
	␣␣}

	␣␣#␣set␣the␣filename␣to␣some␣recognizable␣value
␣␣␣␣␣␣␣␣␣␣if␣(␣(␣!defined($filename)␣||␣$filename␣eq␣''␣)␣&&␣$multipart␣)␣{
␣␣␣␣␣␣␣␣␣␣␣␣␣␣$filename␣=␣"multipart/mixed";
␣␣␣␣␣␣␣␣␣␣}

	␣␣#␣choose␣a␣relatively␣unpredictable␣tmpfile␣sequence␣number
␣␣␣␣␣␣␣␣␣␣my␣$seqno␣=␣unpack("%16C*",join('',localtime,grep␣{defined␣$_}␣values␣%ENV));
␣␣␣␣␣␣␣␣␣␣for␣(my␣$cnt=10;$cnt>0;$cnt--)␣{
	␣␣␣␣next␣unless␣$tmpfile␣=␣CGITempFile->new($seqno);
	␣␣␣␣$tmp␣=␣$tmpfile->as_string;
	␣␣␣␣last␣if␣defined($filehandle␣=␣Fh->new($filename,$tmp,$PRIVATE_TEMPFILES));
␣␣␣␣␣␣␣␣␣␣␣␣$seqno␣+=␣int␣rand(100);
␣␣␣␣␣␣␣␣␣␣}
␣␣␣␣␣␣␣␣␣␣die␣"CGI␣open␣of␣tmpfile:␣$!\n"␣unless␣defined␣$filehandle;
	␣␣$CGI::DefaultClass->binmode($filehandle)␣if␣$CGI::needs_binmode␣
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣&&␣defined␣fileno($filehandle);

	␣␣#␣if␣this␣is␣an␣multipart/mixed␣attachment,␣save␣the␣header
	␣␣#␣together␣with␣the␣body␣for␣later␣parsing␣with␣an␣external
	␣␣#␣MIME␣parser␣module
	␣␣if␣(␣$multipart␣)␣{
	␣␣␣␣␣␣for␣(␣keys␣%header␣)␣{
		␣␣print␣$filehandle␣"$_:␣$header{$_}${CRLF}";
	␣␣␣␣␣␣}
	␣␣␣␣␣␣print␣$filehandle␣"${CRLF}";
	␣␣}

	␣␣my␣($data);
	␣␣local($\)␣=␣'';
␣␣␣␣␣␣␣␣␣␣my␣$totalbytes␣=␣0;
␣␣␣␣␣␣␣␣␣␣while␣(defined($data␣=␣$buffer->read))␣{
␣␣␣␣␣␣␣␣␣␣␣␣␣␣if␣(defined␣$self->{'.upload_hook'})
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣{
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣$totalbytes␣+=␣length($data);
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣&{$self->{'.upload_hook'}}($filename␣,$data,␣$totalbytes,␣$self->{'.upload_data'});
␣␣␣␣␣␣␣␣␣␣␣␣␣␣}
␣␣␣␣␣␣␣␣␣␣␣␣␣␣print␣$filehandle␣$data␣if␣($self->{'use_tempfile'});
␣␣␣␣␣␣␣␣␣␣}

	␣␣#␣back␣up␣to␣beginning␣of␣file
	␣␣seek($filehandle,0,0);

␣␣␣␣␣␣##␣Close␣the␣filehandle␣if␣requested␣this␣allows␣a␣multipart␣MIME
␣␣␣␣␣␣##␣upload␣to␣contain␣many␣files,␣and␣we␣won't␣die␣due␣to␣too␣many
␣␣␣␣␣␣##␣open␣file␣handles.␣The␣user␣can␣access␣the␣files␣using␣the␣hash
␣␣␣␣␣␣##␣below.
␣␣␣␣␣␣close␣$filehandle␣if␣$CLOSE_UPLOAD_FILES;
	␣␣$CGI::DefaultClass->binmode($filehandle)␣if␣$CGI::needs_binmode;

	␣␣#␣Save␣some␣information␣about␣the␣uploaded␣file␣where␣we␣can␣get
	␣␣#␣at␣it␣later.
	␣␣#␣Use␣the␣typeglob␣as␣the␣key,␣as␣this␣is␣guaranteed␣to␣be
	␣␣#␣unique␣for␣each␣filehandle.␣␣Don't␣use␣the␣file␣descriptor␣as
	␣␣#␣this␣will␣be␣re-used␣for␣each␣filehandle␣if␣the
	␣␣#␣close_upload_files␣feature␣is␣used.
	␣␣$self->{'.tmpfiles'}->{$$filehandle}=␣{
␣␣␣␣␣␣␣␣␣␣␣␣␣␣hndl␣=>␣$filehandle,
	␣␣␣␣␣␣name␣=>␣$tmpfile,
	␣␣␣␣␣␣info␣=>␣{%header},
	␣␣};
	␣␣push(@{$self->{param}{$param}},$filehandle);
␣␣␣␣␣␣}
␣␣␣␣}
}
END_OF_FUNC

#####
#␣subroutine:␣read_multipart_related
#
#␣Read␣multipart/related␣data␣and␣store␣it␣into␣our␣parameters.␣␣The
#␣first␣parameter␣sets␣the␣start␣of␣the␣data.␣The␣part␣identified␣by
#␣this␣Content-ID␣will␣not␣be␣stored␣as␣a␣file␣upload,␣but␣will␣be
#␣returned␣by␣this␣method.␣␣All␣other␣parts␣will␣be␣available␣as␣file
#␣uploads␣accessible␣by␣their␣Content-ID
#####
'read_multipart_related'␣=>␣<<'END_OF_FUNC',
sub␣read_multipart_related␣{
␣␣␣␣my($self,$start,$boundary,$length)␣=␣@_;
␣␣␣␣my($buffer)␣=␣$self->new_MultipartBuffer($boundary,$length);
␣␣␣␣return␣unless␣$buffer;
␣␣␣␣my(%header,$body);
␣␣␣␣my␣$filenumber␣=␣0;
␣␣␣␣my␣$returnvalue;
␣␣␣␣while␣(!$buffer->eof)␣{
	%header␣=␣$buffer->readHeader;

	unless␣(%header)␣{
	␣␣␣␣$self->cgi_error("400␣Bad␣request␣(malformed␣multipart␣POST)");
	␣␣␣␣return;
	}

	my($param)␣=␣$header{'Content-ID'}=~/\<([^\>]*)\>/;
␣␣␣␣␣␣␣␣$param␣.=␣$TAINTED;

	#␣If␣this␣is␣the␣start␣part,␣then␣just␣read␣the␣data␣and␣assign␣it
	#␣to␣our␣return␣variable.
	if␣(␣$param␣eq␣$start␣)␣{
	␣␣␣␣$returnvalue␣=␣$buffer->readBody;
␣␣␣␣␣␣␣␣␣␣␣␣$returnvalue␣.=␣$TAINTED;
	␣␣␣␣next;
	}

	#␣add␣this␣parameter␣to␣our␣list
	$self->add_parameter($param);

	my␣($tmpfile,$tmp,$filehandle);
␣␣␣␣␣␣UPLOADS:␣{
	␣␣#␣If␣we␣get␣here,␣then␣we␣are␣dealing␣with␣a␣potentially␣large
	␣␣#␣uploaded␣form.␣␣Save␣the␣data␣to␣a␣temporary␣file,␣then␣open
	␣␣#␣the␣file␣for␣reading.

	␣␣#␣skip␣the␣file␣if␣uploads␣disabled
	␣␣if␣($DISABLE_UPLOADS)␣{
	␣␣␣␣␣␣while␣(defined($data␣=␣$buffer->read))␣{␣}
	␣␣␣␣␣␣last␣UPLOADS;
	␣␣}

	␣␣#␣choose␣a␣relatively␣unpredictable␣tmpfile␣sequence␣number
␣␣␣␣␣␣␣␣␣␣my␣$seqno␣=␣unpack("%16C*",join('',localtime,grep␣{defined␣$_}␣values␣%ENV));
␣␣␣␣␣␣␣␣␣␣for␣(my␣$cnt=10;$cnt>0;$cnt--)␣{
	␣␣␣␣next␣unless␣$tmpfile␣=␣CGITempFile->new($seqno);
	␣␣␣␣$tmp␣=␣$tmpfile->as_string;
	␣␣␣␣last␣if␣defined($filehandle␣=␣Fh->new($param,$tmp,$PRIVATE_TEMPFILES));
␣␣␣␣␣␣␣␣␣␣␣␣$seqno␣+=␣int␣rand(100);
␣␣␣␣␣␣␣␣␣␣}
␣␣␣␣␣␣␣␣␣␣die␣"CGI␣open␣of␣tmpfile:␣$!\n"␣unless␣defined␣$filehandle;
	␣␣$CGI::DefaultClass->binmode($filehandle)␣if␣$CGI::needs_binmode␣
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣&&␣defined␣fileno($filehandle);

	␣␣my␣($data);
	␣␣local($\)␣=␣'';
␣␣␣␣␣␣␣␣␣␣my␣$totalbytes;
␣␣␣␣␣␣␣␣␣␣while␣(defined($data␣=␣$buffer->read))␣{
␣␣␣␣␣␣␣␣␣␣␣␣␣␣if␣(defined␣$self->{'.upload_hook'})
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣{
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣$totalbytes␣+=␣length($data);
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣&{$self->{'.upload_hook'}}($param␣,$data,␣$totalbytes,␣$self->{'.upload_data'});
␣␣␣␣␣␣␣␣␣␣␣␣␣␣}
␣␣␣␣␣␣␣␣␣␣␣␣␣␣print␣$filehandle␣$data␣if␣($self->{'use_tempfile'});
␣␣␣␣␣␣␣␣␣␣}

	␣␣#␣back␣up␣to␣beginning␣of␣file
	␣␣seek($filehandle,0,0);

␣␣␣␣␣␣##␣Close␣the␣filehandle␣if␣requested␣this␣allows␣a␣multipart␣MIME
␣␣␣␣␣␣##␣upload␣to␣contain␣many␣files,␣and␣we␣won't␣die␣due␣to␣too␣many
␣␣␣␣␣␣##␣open␣file␣handles.␣The␣user␣can␣access␣the␣files␣using␣the␣hash
␣␣␣␣␣␣##␣below.
␣␣␣␣␣␣close␣$filehandle␣if␣$CLOSE_UPLOAD_FILES;
	␣␣$CGI::DefaultClass->binmode($filehandle)␣if␣$CGI::needs_binmode;

	␣␣#␣Save␣some␣information␣about␣the␣uploaded␣file␣where␣we␣can␣get
	␣␣#␣at␣it␣later.
	␣␣#␣Use␣the␣typeglob␣as␣the␣key,␣as␣this␣is␣guaranteed␣to␣be
	␣␣#␣unique␣for␣each␣filehandle.␣␣Don't␣use␣the␣file␣descriptor␣as
	␣␣#␣this␣will␣be␣re-used␣for␣each␣filehandle␣if␣the
	␣␣#␣close_upload_files␣feature␣is␣used.
	␣␣$self->{'.tmpfiles'}->{$$filehandle}=␣{
␣␣␣␣␣␣␣␣␣␣␣␣␣␣hndl␣=>␣$filehandle,
	␣␣␣␣␣␣name␣=>␣$tmpfile,
	␣␣␣␣␣␣info␣=>␣{%header},
	␣␣};
	␣␣push(@{$self->{param}{$param}},$filehandle);
␣␣␣␣␣␣}
␣␣␣␣}
␣␣␣␣return␣$returnvalue;
}
END_OF_FUNC


'upload'␣=><<'END_OF_FUNC',
sub␣upload␣{
␣␣␣␣my($self,$param_name)␣=␣self_or_default(@_);
␣␣␣␣my␣@param␣=␣grep␣{ref($_)␣&&␣defined(fileno($_))}␣$self->param($param_name);
␣␣␣␣return␣unless␣@param;
␣␣␣␣return␣wantarray␣?␣@param␣:␣$param[0];
}
END_OF_FUNC

'tmpFileName'␣=>␣<<'END_OF_FUNC',
sub␣tmpFileName␣{
␣␣␣␣my($self,$filename)␣=␣self_or_default(@_);
␣␣␣␣return␣$self->{'.tmpfiles'}->{$$filename}->{name}␣?
	$self->{'.tmpfiles'}->{$$filename}->{name}->as_string
	␣␣␣␣:␣'';
}
END_OF_FUNC

'uploadInfo'␣=>␣<<'END_OF_FUNC',
sub␣uploadInfo␣{
␣␣␣␣my($self,$filename)␣=␣self_or_default(@_);
␣␣␣␣return␣$self->{'.tmpfiles'}->{$$filename}->{info};
}
END_OF_FUNC

#␣internal␣routine,␣don't␣use
'_set_values_and_labels'␣=>␣<<'END_OF_FUNC',
sub␣_set_values_and_labels␣{
␣␣␣␣my␣$self␣=␣shift;
␣␣␣␣my␣($v,$l,$n)␣=␣@_;
␣␣␣␣$$l␣=␣$v␣if␣ref($v)␣eq␣'HASH'␣&&␣!ref($$l);
␣␣␣␣return␣$self->param($n)␣if␣!defined($v);
␣␣␣␣return␣$v␣if␣!ref($v);
␣␣␣␣return␣ref($v)␣eq␣'HASH'␣?␣keys␣%$v␣:␣@$v;
}
END_OF_FUNC

#␣internal␣routine,␣don't␣use
'_set_attributes'␣=>␣<<'END_OF_FUNC',
sub␣_set_attributes␣{
␣␣␣␣my␣$self␣=␣shift;
␣␣␣␣my($element,␣$attributes)␣=␣@_;
␣␣␣␣return␣''␣unless␣defined($attributes->{$element});
␣␣␣␣$attribs␣=␣'␣';
␣␣␣␣for␣my␣$attrib␣(keys␣%{$attributes->{$element}})␣{
␣␣␣␣␣␣␣␣(my␣$clean_attrib␣=␣$attrib)␣=~␣s/^-//;
␣␣␣␣␣␣␣␣$attribs␣.=␣"@{[lc($clean_attrib)]}=\"$attributes->{$element}{$attrib}\"␣";
␣␣␣␣}
␣␣␣␣$attribs␣=~␣s/␣$//;
␣␣␣␣return␣$attribs;
}
END_OF_FUNC

'_compile_all'␣=>␣<<'END_OF_FUNC',
sub␣_compile_all␣{
␣␣␣␣for␣(@_)␣{
	next␣if␣defined(&$_);
	$AUTOLOAD␣=␣"CGI::$_";
	_compile();
␣␣␣␣}
}
END_OF_FUNC

);
END_OF_AUTOLOAD
----------
Range: (3940884,3948514) (7630)
<<'END_OF_AUTOLOAD';
%SUBS␣=␣␣(

'new'␣=>␣<<'END_OF_FUNC',
sub␣new␣{
␣␣␣␣my($package,$interface,$boundary,$length)␣=␣@_;
␣␣␣␣$FILLUNIT␣=␣$INITIAL_FILLUNIT;
␣␣␣␣$CGI::DefaultClass->binmode($IN);␣#␣if␣$CGI::needs_binmode;␣␣#␣just␣do␣it␣always

␣␣␣␣#␣If␣the␣user␣types␣garbage␣into␣the␣file␣upload␣field,
␣␣␣␣#␣then␣Netscape␣passes␣NOTHING␣to␣the␣server␣(not␣good).
␣␣␣␣#␣We␣may␣hang␣on␣this␣read␣in␣that␣case.␣So␣we␣implement
␣␣␣␣#␣a␣read␣timeout.␣␣If␣nothing␣is␣ready␣to␣read
␣␣␣␣#␣by␣then,␣we␣return.

␣␣␣␣#␣Netscape␣seems␣to␣be␣a␣little␣bit␣unreliable
␣␣␣␣#␣about␣providing␣boundary␣strings.
␣␣␣␣my␣$boundary_read␣=␣0;
␣␣␣␣if␣($boundary)␣{

	#␣Under␣the␣MIME␣spec,␣the␣boundary␣consists␣of␣the␣
	#␣characters␣"--"␣PLUS␣the␣Boundary␣string

	#␣BUG:␣IE␣3.01␣on␣the␣Macintosh␣uses␣just␣the␣boundary␣--␣not
	#␣the␣two␣extra␣hyphens.␣␣We␣do␣a␣special␣case␣here␣on␣the␣user-agent!!!!
	$boundary␣=␣"--$boundary"␣unless␣CGI::user_agent('MSIE\s+3\.0[12];\s*Mac|DreamPassport');

␣␣␣␣}␣else␣{␣#␣otherwise␣we␣find␣it␣ourselves
	my($old);
	($old,$/)␣=␣($/,$CRLF);␣#␣read␣a␣CRLF-delimited␣line
	$boundary␣=␣<STDIN>;␣␣␣␣␣␣#␣BUG:␣This␣won't␣work␣correctly␣under␣mod_perl
	$length␣-=␣length($boundary);
	chomp($boundary);␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣remove␣the␣CRLF
	$/␣=␣$old;␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣restore␣old␣line␣separator
␣␣␣␣␣␣␣␣$boundary_read++;
␣␣␣␣}

␣␣␣␣my␣$self␣=␣{LENGTH=>$length,
		CHUNKED=>!$length,
		BOUNDARY=>$boundary,
		INTERFACE=>$interface,
		BUFFER=>'',
	␣␣␣␣};

␣␣␣␣$FILLUNIT␣=␣length($boundary)
	if␣length($boundary)␣>␣$FILLUNIT;

␣␣␣␣my␣$retval␣=␣bless␣$self,ref␣$package␣||␣$package;

␣␣␣␣#␣Read␣the␣preamble␣and␣the␣topmost␣(boundary)␣line␣plus␣the␣CRLF.
␣␣␣␣unless␣($boundary_read)␣{
␣␣␣␣␣␣while␣($self->read(0))␣{␣}
␣␣␣␣}
␣␣␣␣die␣"Malformed␣multipart␣POST:␣data␣truncated\n"␣if␣$self->eof;

␣␣␣␣return␣$retval;
}
END_OF_FUNC

'readHeader'␣=>␣<<'END_OF_FUNC',
sub␣readHeader␣{
␣␣␣␣my($self)␣=␣@_;
␣␣␣␣my($end);
␣␣␣␣my($ok)␣=␣0;
␣␣␣␣my($bad)␣=␣0;

␣␣␣␣local($CRLF)␣=␣"\015\012"␣if␣$CGI::OS␣eq␣'VMS'␣||␣$CGI::EBCDIC;

␣␣␣␣do␣{
	$self->fillBuffer($FILLUNIT);
	$ok++␣if␣($end␣=␣index($self->{BUFFER},"${CRLF}${CRLF}"))␣>=␣0;
	$ok++␣if␣$self->{BUFFER}␣eq␣'';
	$bad++␣if␣!$ok␣&&␣$self->{LENGTH}␣<=␣0;
	#␣this␣was␣a␣bad␣idea
	#␣$FILLUNIT␣*=␣2␣if␣length($self->{BUFFER})␣>=␣$FILLUNIT;␣
␣␣␣␣}␣until␣$ok␣||␣$bad;
␣␣␣␣return␣()␣if␣$bad;

␣␣␣␣#EBCDIC␣NOTE:␣translate␣header␣into␣EBCDIC,␣but␣watch␣out␣for␣continuation␣lines!

␣␣␣␣my($header)␣=␣substr($self->{BUFFER},0,$end+2);
␣␣␣␣substr($self->{BUFFER},0,$end+4)␣=␣'';
␣␣␣␣my␣%return;

␣␣␣␣if␣($CGI::EBCDIC)␣{
␣␣␣␣␣␣warn␣"untranslated␣header=$header\n"␣if␣DEBUG;
␣␣␣␣␣␣$header␣=␣CGI::Util::ascii2ebcdic($header);
␣␣␣␣␣␣warn␣"translated␣header=$header\n"␣if␣DEBUG;
␣␣␣␣}

␣␣␣␣#␣See␣RFC␣2045␣Appendix␣A␣and␣RFC␣822␣sections␣3.4.8
␣␣␣␣#␣␣␣(Folding␣Long␣Header␣Fields),␣3.4.3␣(Comments)
␣␣␣␣#␣␣␣and␣3.4.5␣(Quoted-Strings).

␣␣␣␣my␣$token␣=␣'[-\w!\#$%&\'*+.^_\`|{}~]';
␣␣␣␣$header=~s/$CRLF\s+/␣/og;		#␣merge␣continuation␣lines

␣␣␣␣while␣($header=~/($token+):\s+([^$CRLF]*)/mgox)␣{
␣␣␣␣␣␣␣␣my␣($field_name,$field_value)␣=␣($1,$2);
	$field_name␣=~␣s/\b(\w)/uc($1)/eg;␣#canonicalize
	$return{$field_name}=$field_value;
␣␣␣␣}
␣␣␣␣return␣%return;
}
END_OF_FUNC

#␣This␣reads␣and␣returns␣the␣body␣as␣a␣single␣scalar␣value.
'readBody'␣=>␣<<'END_OF_FUNC',
sub␣readBody␣{
␣␣␣␣my($self)␣=␣@_;
␣␣␣␣my($data);
␣␣␣␣my($returnval)='';

␣␣␣␣#EBCDIC␣NOTE:␣want␣to␣translate␣returnval␣into␣EBCDIC␣HERE

␣␣␣␣while␣(defined($data␣=␣$self->read))␣{
	$returnval␣.=␣$data;
␣␣␣␣}

␣␣␣␣if␣($CGI::EBCDIC)␣{
␣␣␣␣␣␣warn␣"untranslated␣body=$returnval\n"␣if␣DEBUG;
␣␣␣␣␣␣$returnval␣=␣CGI::Util::ascii2ebcdic($returnval);
␣␣␣␣␣␣warn␣"translated␣body=$returnval\n"␣␣␣if␣DEBUG;
␣␣␣␣}
␣␣␣␣return␣$returnval;
}
END_OF_FUNC

#␣This␣will␣read␣$bytes␣or␣until␣the␣boundary␣is␣hit,␣whichever␣happens
#␣first.␣␣After␣the␣boundary␣is␣hit,␣we␣return␣undef.␣␣The␣next␣read␣will
#␣skip␣over␣the␣boundary␣and␣begin␣reading␣again;
'read'␣=>␣<<'END_OF_FUNC',
sub␣read␣{
␣␣␣␣my($self,$bytes)␣=␣@_;

␣␣␣␣#␣default␣number␣of␣bytes␣to␣read
␣␣␣␣$bytes␣=␣$bytes␣||␣$FILLUNIT;

␣␣␣␣#␣Fill␣up␣our␣internal␣buffer␣in␣such␣a␣way␣that␣the␣boundary
␣␣␣␣#␣is␣never␣split␣between␣reads.
␣␣␣␣$self->fillBuffer($bytes);

␣␣␣␣my␣$boundary_start␣=␣$CGI::EBCDIC␣?␣CGI::Util::ebcdic2ascii($self->{BOUNDARY})␣␣␣␣␣␣:␣$self->{BOUNDARY};
␣␣␣␣my␣$boundary_end␣␣␣=␣$CGI::EBCDIC␣?␣CGI::Util::ebcdic2ascii($self->{BOUNDARY}.'--')␣:␣$self->{BOUNDARY}.'--';

␣␣␣␣#␣Find␣the␣boundary␣in␣the␣buffer␣(it␣may␣not␣be␣there).
␣␣␣␣my␣$start␣=␣index($self->{BUFFER},$boundary_start);

␣␣␣␣warn␣"boundary=$self->{BOUNDARY}␣length=$self->{LENGTH}␣start=$start\n"␣if␣DEBUG;

␣␣␣␣#␣protect␣against␣malformed␣multipart␣POST␣operations
␣␣␣␣die␣"Malformed␣multipart␣POST\n"␣unless␣$self->{CHUNKED}␣||␣($start␣>=␣0␣||␣$self->{LENGTH}␣>␣0);

␣␣␣␣#EBCDIC␣NOTE:␣want␣to␣translate␣boundary␣search␣into␣ASCII␣here.

␣␣␣␣#␣If␣the␣boundary␣begins␣the␣data,␣then␣skip␣past␣it
␣␣␣␣#␣and␣return␣undef.
␣␣␣␣if␣($start␣==␣0)␣{

	#␣clear␣us␣out␣completely␣if␣we've␣hit␣the␣last␣boundary.
	if␣(index($self->{BUFFER},$boundary_end)==0)␣{
	␣␣␣␣$self->{BUFFER}='';
	␣␣␣␣$self->{LENGTH}=0;
	␣␣␣␣return␣undef;
	}

	#␣just␣remove␣the␣boundary.
	substr($self->{BUFFER},0,length($boundary_start))='';
␣␣␣␣␣␣␣␣$self->{BUFFER}␣=~␣s/^\012\015?//;
	return␣undef;
␣␣␣␣}

␣␣␣␣my␣$bytesToReturn;
␣␣␣␣if␣($start␣>␣0)␣{␣␣␣␣␣␣␣␣␣␣␣#␣read␣up␣to␣the␣boundary
␣␣␣␣␣␣␣␣$bytesToReturn␣=␣$start-2␣>␣$bytes␣?␣$bytes␣:␣$start;
␣␣␣␣}␣else␣{␣␣␣␣#␣read␣the␣requested␣number␣of␣bytes
	#␣leave␣enough␣bytes␣in␣the␣buffer␣to␣allow␣us␣to␣read
	#␣the␣boundary.␣␣Thanks␣to␣Kevin␣Hendrick␣for␣finding
	#␣this␣one.
	$bytesToReturn␣=␣$bytes␣-␣(length($boundary_start)+1);
␣␣␣␣}

␣␣␣␣my␣$returnval=substr($self->{BUFFER},0,$bytesToReturn);
␣␣␣␣substr($self->{BUFFER},0,$bytesToReturn)='';
␣␣␣␣
␣␣␣␣#␣If␣we␣hit␣the␣boundary,␣remove␣the␣CRLF␣from␣the␣end.
␣␣␣␣return␣($bytesToReturn==$start)
␣␣␣␣␣␣␣␣␣␣␣?␣substr($returnval,0,-2)␣:␣$returnval;
}
END_OF_FUNC


#␣This␣fills␣up␣our␣internal␣buffer␣in␣such␣a␣way␣that␣the
#␣boundary␣is␣never␣split␣between␣reads
'fillBuffer'␣=>␣<<'END_OF_FUNC',
sub␣fillBuffer␣{
␣␣␣␣my($self,$bytes)␣=␣@_;
␣␣␣␣return␣unless␣$self->{CHUNKED}␣||␣$self->{LENGTH};

␣␣␣␣my($boundaryLength)␣=␣length($self->{BOUNDARY});
␣␣␣␣my($bufferLength)␣=␣length($self->{BUFFER});
␣␣␣␣my($bytesToRead)␣=␣$bytes␣-␣$bufferLength␣+␣$boundaryLength␣+␣2;
␣␣␣␣$bytesToRead␣=␣$self->{LENGTH}␣if␣!$self->{CHUNKED}␣&&␣$self->{LENGTH}␣<␣$bytesToRead;

␣␣␣␣#␣Try␣to␣read␣some␣data.␣␣We␣may␣hang␣here␣if␣the␣browser␣is␣screwed␣up.
␣␣␣␣my␣$bytesRead␣=␣$self->{INTERFACE}->read_from_client(\$self->{BUFFER},
							␣$bytesToRead,
							␣$bufferLength);
␣␣␣␣warn␣"bytesToRead=$bytesToRead,␣bufferLength=$bufferLength,␣buffer=$self->{BUFFER}\n"␣if␣DEBUG;
␣␣␣␣$self->{BUFFER}␣=␣''␣unless␣defined␣$self->{BUFFER};

␣␣␣␣#␣An␣apparent␣bug␣in␣the␣Apache␣server␣causes␣the␣read()
␣␣␣␣#␣to␣return␣zero␣bytes␣repeatedly␣without␣blocking␣if␣the
␣␣␣␣#␣remote␣user␣aborts␣during␣a␣file␣transfer.␣␣I␣don't␣know␣how
␣␣␣␣#␣they␣manage␣this,␣but␣the␣workaround␣is␣to␣abort␣if␣we␣get
␣␣␣␣#␣more␣than␣SPIN_LOOP_MAX␣consecutive␣zero␣reads.
␣␣␣␣if␣($bytesRead␣<=␣0)␣{
	die␣␣"CGI.pm:␣Server␣closed␣socket␣during␣multipart␣read␣(client␣aborted?).\n"
	␣␣␣␣if␣($self->{ZERO_LOOP_COUNTER}++␣>=␣$SPIN_LOOP_MAX);
␣␣␣␣}␣else␣{
	$self->{ZERO_LOOP_COUNTER}=0;
␣␣␣␣}

␣␣␣␣$self->{LENGTH}␣-=␣$bytesRead␣if␣!$self->{CHUNKED}␣&&␣$bytesRead;
}
END_OF_FUNC


#␣Return␣true␣when␣we've␣finished␣reading
'eof'␣=>␣<<'END_OF_FUNC'
sub␣eof␣{
␣␣␣␣my($self)␣=␣@_;
␣␣␣␣return␣1␣if␣(length($self->{BUFFER})␣==␣0)
		␣&&␣($self->{LENGTH}␣<=␣0);
␣␣␣␣undef;
}
END_OF_FUNC

);
END_OF_AUTOLOAD
----------
Range: (3999574,4016823) (17249)
=head1␣NAME

Module::Build::Cookbook␣-␣Examples␣of␣Module::Build␣Usage

=head1␣DESCRIPTION

C<Module::Build>␣isn't␣conceptually␣very␣complicated,␣but␣examples␣are
always␣helpful.␣␣The␣following␣recipes␣should␣help␣developers␣and/or
installers␣put␣together␣the␣pieces␣from␣the␣other␣parts␣of␣the
documentation.


=head1␣BASIC␣RECIPES


=head2␣Installing␣modules␣that␣use␣Module::Build

In␣most␣cases,␣you␣can␣just␣issue␣the␣following␣commands:

␣␣perl␣Build.PL
␣␣./Build
␣␣./Build␣test
␣␣./Build␣install

There's␣nothing␣complicated␣here␣-␣first␣you're␣running␣a␣script
called␣F<Build.PL>,␣then␣you're␣running␣a␣(newly-generated)␣script
called␣F<Build>␣and␣passing␣it␣various␣arguments.

The␣exact␣commands␣may␣vary␣a␣bit␣depending␣on␣how␣you␣invoke␣perl
scripts␣on␣your␣system.␣␣For␣instance,␣if␣you␣have␣multiple␣versions
of␣perl␣installed,␣you␣can␣install␣to␣one␣particular␣perl's␣library
directories␣like␣so:

␣␣/usr/bin/perl5.8.1␣Build.PL
␣␣./Build
␣␣./Build␣test
␣␣./Build␣install

If␣you're␣on␣Windows␣where␣the␣current␣directory␣is␣always␣searched
first␣for␣scripts,␣you'll␣probably␣do␣something␣like␣this:

␣␣perl␣Build.PL
␣␣Build
␣␣Build␣test
␣␣Build␣install

On␣the␣old␣Mac␣OS␣(version␣9␣or␣lower)␣using␣MacPerl,␣you␣can
double-click␣on␣the␣F<Build.PL>␣script␣to␣create␣the␣F<Build>␣script,
then␣double-click␣on␣the␣F<Build>␣script␣to␣run␣its␣C<build>,␣C<test>,
and␣C<install>␣actions.

The␣F<Build>␣script␣knows␣what␣perl␣was␣used␣to␣run␣F<Build.PL>,␣so
you␣don't␣need␣to␣re-invoke␣the␣F<Build>␣script␣with␣the␣complete␣perl
path␣each␣time.␣␣If␣you␣invoke␣it␣with␣the␣I<wrong>␣perl␣path,␣you'll
get␣a␣warning␣or␣a␣fatal␣error.

=head2␣Modifying␣Config.pm␣values

C<Module::Build>␣relies␣heavily␣on␣various␣values␣from␣perl's
C<Config.pm>␣to␣do␣its␣work.␣␣For␣example,␣default␣installation␣paths
are␣given␣by␣C<installsitelib>␣and␣C<installvendorman3dir>␣and
friends,␣C␣linker␣&␣compiler␣settings␣are␣given␣by␣C<ld>,
C<lddlflags>,␣C<cc>,␣C<ccflags>,␣and␣so␣on.␣␣I<If␣you're␣pretty␣sure
you␣know␣what␣you're␣doing>,␣you␣can␣tell␣C<Module::Build>␣to␣pretend
there␣are␣different␣values␣in␣F<Config.pm>␣than␣what's␣really␣there,
by␣passing␣arguments␣for␣the␣C<--config>␣parameter␣on␣the␣command
line:

␣␣perl␣Build.PL␣--config␣cc=gcc␣--config␣ld=gcc

Inside␣the␣C<Build.PL>␣script␣the␣same␣thing␣can␣be␣accomplished␣by
passing␣values␣for␣the␣C<config>␣parameter␣to␣C<new()>:

␣my␣$build␣=␣Module::Build->new
␣␣␣(
␣␣␣␣...
␣␣␣␣config␣=>␣{␣cc␣=>␣'gcc',␣ld␣=>␣'gcc'␣},
␣␣␣␣...
␣␣␣);

In␣custom␣build␣code,␣the␣same␣thing␣can␣be␣accomplished␣by␣calling
the␣L<Module::Build/config>␣method:

␣$build->config(␣cc␣=>␣'gcc'␣);␣␣␣␣␣#␣Set
␣$build->config(␣ld␣=>␣'gcc'␣);␣␣␣␣␣#␣Set
␣...
␣my␣$linker␣=␣$build->config('ld');␣#␣Get


=head2␣Installing␣modules␣using␣the␣programmatic␣interface

If␣you␣need␣to␣build,␣test,␣and/or␣install␣modules␣from␣within␣some
other␣perl␣code␣(as␣opposed␣to␣having␣the␣user␣type␣installation
commands␣at␣the␣shell),␣you␣can␣use␣the␣programmatic␣interface.
Create␣a␣Module::Build␣object␣(or␣an␣object␣of␣a␣custom␣Module::Build
subclass)␣and␣then␣invoke␣its␣C<dispatch()>␣method␣to␣run␣various
actions.

␣␣my␣$build␣=␣Module::Build->new
␣␣␣␣(
␣␣␣␣␣module_name␣=>␣'Foo::Bar',
␣␣␣␣␣license␣␣␣␣␣=>␣'perl',
␣␣␣␣␣requires␣␣␣␣=>␣{␣'Some::Module'␣␣␣=>␣'1.23'␣},
␣␣␣␣);
␣␣$build->dispatch('build');
␣␣$build->dispatch('test',␣verbose␣=>␣1);
␣␣$build->dispatch('install');

The␣first␣argument␣to␣C<dispatch()>␣is␣the␣name␣of␣the␣action,␣and␣any
following␣arguments␣are␣named␣parameters.

This␣is␣the␣interface␣we␣use␣to␣test␣Module::Build␣itself␣in␣the
regression␣tests.


=head2␣Installing␣to␣a␣temporary␣directory

To␣create␣packages␣for␣package␣managers␣like␣RedHat's␣C<rpm>␣or
Debian's␣C<deb>,␣you␣may␣need␣to␣install␣to␣a␣temporary␣directory
first␣and␣then␣create␣the␣package␣from␣that␣temporary␣installation.
To␣do␣this,␣specify␣the␣C<destdir>␣parameter␣to␣the␣C<install>␣action:

␣␣./Build␣install␣--destdir␣/tmp/my-package-1.003

This␣essentially␣just␣prepends␣all␣the␣installation␣paths␣with␣the
F</tmp/my-package-1.003>␣directory.


=head2␣Installing␣to␣a␣non-standard␣directory

To␣install␣to␣a␣non-standard␣directory␣(for␣example,␣if␣you␣don't␣have
permission␣to␣install␣in␣the␣system-wide␣directories),␣you␣can␣use␣the
C<install_base>␣or␣C<prefix>␣parameters:

␣␣./Build␣install␣--install_base␣/foo/bar

See␣L<Module::Build/"INSTALL␣PATHS">␣for␣a␣much␣more␣complete
discussion␣of␣how␣installation␣paths␣are␣determined.


=head2␣Installing␣in␣the␣same␣location␣as␣ExtUtils::MakeMaker

With␣the␣introduction␣of␣C<--prefix>␣in␣Module::Build␣0.28␣and
C<INSTALL_BASE>␣in␣C<ExtUtils::MakeMaker>␣6.31␣its␣easy␣to␣get␣them␣both
to␣install␣to␣the␣same␣locations.

First,␣ensure␣you␣have␣at␣least␣version␣0.28␣of␣Module::Build
installed␣and␣6.31␣of␣C<ExtUtils::MakeMaker>.␣␣Prior␣versions␣have
differing␣(and␣in␣some␣cases␣quite␣strange)␣installation␣behaviors.

The␣following␣installation␣flags␣are␣equivalent␣between
C<ExtUtils::MakeMaker>␣and␣C<Module::Build>.

␣␣␣␣MakeMaker␣␣␣␣␣␣␣␣␣␣␣␣␣Module::Build
␣␣␣␣PREFIX=...␣␣␣␣␣␣␣␣␣␣␣␣--prefix␣...
␣␣␣␣INSTALL_BASE=...␣␣␣␣␣␣--install_base␣...
␣␣␣␣DESTDIR=...␣␣␣␣␣␣␣␣␣␣␣--destdir␣...
␣␣␣␣LIB=...␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣--install_path␣lib=...
␣␣␣␣INSTALLDIRS=...␣␣␣␣␣␣␣--installdirs␣...
␣␣␣␣INSTALLDIRS=perl␣␣␣␣␣␣--installdirs␣core
␣␣␣␣UNINST=...␣␣␣␣␣␣␣␣␣␣␣␣--uninst␣...
␣␣␣␣INC=...␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣--extra_compiler_flags␣...
␣␣␣␣POLLUTE=1␣␣␣␣␣␣␣␣␣␣␣␣␣--extra_compiler_flags␣-DPERL_POLLUTE

For␣example,␣if␣you␣are␣currently␣installing␣C<MakeMaker>␣modules␣with
this␣command:

␣␣␣␣perl␣Makefile.PL␣PREFIX=~
␣␣␣␣make␣test
␣␣␣␣make␣install␣UNINST=1

You␣can␣install␣into␣the␣same␣location␣with␣Module::Build␣using␣this:

␣␣␣␣perl␣Build.PL␣--prefix␣~
␣␣␣␣./Build␣test
␣␣␣␣./Build␣install␣--uninst␣1

=head3␣C<prefix>␣vs␣C<install_base>

The␣behavior␣of␣C<prefix>␣is␣complicated␣and␣depends␣on
how␣your␣Perl␣is␣configured.␣␣The␣resulting␣installation␣locations
will␣vary␣from␣machine␣to␣machine␣and␣even␣different␣installations␣of
Perl␣on␣the␣same␣machine.␣␣Because␣of␣this,␣it's␣difficult␣to␣document
where␣C<prefix>␣will␣place␣your␣modules.

In␣contrast,␣C<install_base>␣has␣predictable,␣easy␣to␣explain
installation␣locations.␣␣Now␣that␣C<Module::Build>␣and␣C<MakeMaker>␣both
have␣C<install_base>␣there␣is␣little␣reason␣to␣use␣C<prefix>␣other
than␣to␣preserve␣your␣existing␣installation␣locations.␣␣If␣you␣are
starting␣a␣fresh␣Perl␣installation␣we␣encourage␣you␣to␣use
C<install_base>.␣␣If␣you␣have␣an␣existing␣installation␣installed␣via
C<prefix>,␣consider␣moving␣it␣to␣an␣installation␣structure␣matching
C<install_base>␣and␣using␣that␣instead.


=head2␣Running␣a␣single␣test␣file

C<Module::Build>␣supports␣running␣a␣single␣test,␣which␣enables␣you␣to
track␣down␣errors␣more␣quickly.␣␣Use␣the␣following␣format:

␣␣./Build␣test␣--test_files␣t/mytest.t

In␣addition,␣you␣may␣want␣to␣run␣the␣test␣in␣verbose␣mode␣to␣get␣more
informative␣output:

␣␣./Build␣test␣--test_files␣t/mytest.t␣--verbose␣1

I␣run␣this␣so␣frequently␣that␣I␣define␣the␣following␣shell␣alias:

␣␣alias␣t␣'./Build␣test␣--verbose␣1␣--test_files'

So␣then␣I␣can␣just␣execute␣C<t␣t/mytest.t>␣to␣run␣a␣single␣test.


=head1␣ADVANCED␣RECIPES


=head2␣Making␣a␣CPAN.pm-compatible␣distribution

New␣versions␣of␣CPAN.pm␣understand␣how␣to␣use␣a␣F<Build.PL>␣script,
but␣old␣versions␣don't.␣␣If␣authors␣want␣to␣help␣users␣who␣have␣old
versions,␣some␣form␣of␣F<Makefile.PL>␣should␣be␣supplied.␣␣The␣easiest
way␣to␣accomplish␣this␣is␣to␣use␣the␣C<create_makefile_pl>␣parameter␣to
C<<␣Module::Build->new()␣>>␣in␣the␣C<Build.PL>␣script,␣which␣can
create␣various␣flavors␣of␣F<Makefile.PL>␣during␣the␣C<dist>␣action.

As␣a␣best␣practice,␣we␣recommend␣using␣the␣"traditional"␣style␣of
F<Makefile.PL>␣unless␣your␣distribution␣has␣needs␣that␣can't␣be
accomplished␣that␣way.

The␣C<Module::Build::Compat>␣module,␣which␣is␣part␣of
C<Module::Build>'s␣distribution,␣is␣responsible␣for␣creating␣these
F<Makefile.PL>s.␣␣Please␣see␣L<Module::Build::Compat>␣for␣the␣details.


=head2␣Changing␣the␣order␣of␣the␣build␣process

The␣C<build_elements>␣property␣specifies␣the␣steps␣C<Module::Build>
will␣take␣when␣building␣a␣distribution.␣␣To␣change␣the␣build␣order,
change␣the␣order␣of␣the␣entries␣in␣that␣property:

␣␣#␣Process␣pod␣files␣first
␣␣my␣@e␣=␣@{$build->build_elements};
␣␣my␣($i)␣=␣grep␣{$e[$_]␣eq␣'pod'}␣0..$#e;
␣␣unshift␣@e,␣splice␣@e,␣$i,␣1;

Currently,␣C<build_elements>␣has␣the␣following␣default␣value:

␣␣[qw(␣PL␣support␣pm␣xs␣pod␣script␣)]

Do␣take␣care␣when␣altering␣this␣property,␣since␣there␣may␣be
non-obvious␣(and␣non-documented!)␣ordering␣dependencies␣in␣the
C<Module::Build>␣code.


=head2␣Adding␣new␣file␣types␣to␣the␣build␣process

Sometimes␣you␣might␣have␣extra␣types␣of␣files␣that␣you␣want␣to␣install
alongside␣the␣standard␣types␣like␣F<.pm>␣and␣F<.pod>␣files.␣␣For
instance,␣you␣might␣have␣a␣F<Bar.dat>␣file␣containing␣some␣data
related␣to␣the␣C<Foo::Bar>␣module␣and␣you'd␣like␣for␣it␣to␣end␣up␣as
F<Foo/Bar.dat>␣somewhere␣in␣perl's␣C<@INC>␣path␣so␣C<Foo::Bar>␣can
access␣it␣easily␣at␣runtime.␣␣The␣following␣code␣from␣a␣sample
C<Build.PL>␣file␣demonstrates␣how␣to␣accomplish␣this:

␣␣use␣Module::Build;
␣␣my␣$build␣=␣Module::Build->new
␣␣␣␣(
␣␣␣␣␣module_name␣=>␣'Foo::Bar',
␣␣␣␣␣...other␣stuff␣here...
␣␣␣␣);
␣␣$build->add_build_element('dat');
␣␣$build->create_build_script;

This␣will␣find␣all␣F<.dat>␣files␣in␣the␣F<lib/>␣directory,␣copy␣them
to␣the␣F<blib/lib/>␣directory␣during␣the␣C<build>␣action,␣and␣install
them␣during␣the␣C<install>␣action.

If␣your␣extra␣files␣aren't␣located␣in␣the␣C<lib/>␣directory␣in␣your
distribution,␣you␣can␣explicitly␣say␣where␣they␣are,␣just␣as␣you'd␣do
with␣F<.pm>␣or␣F<.pod>␣files:

␣␣use␣Module::Build;
␣␣my␣$build␣=␣new␣Module::Build
␣␣␣␣(
␣␣␣␣␣module_name␣=>␣'Foo::Bar',
␣␣␣␣␣dat_files␣=>␣{'some/dir/Bar.dat'␣=>␣'lib/Foo/Bar.dat'},
␣␣␣␣␣...other␣stuff␣here...
␣␣␣␣);
␣␣$build->add_build_element('dat');
␣␣$build->create_build_script;

If␣your␣extra␣files␣actually␣need␣to␣be␣created␣on␣the␣user's␣machine,
or␣if␣they␣need␣some␣other␣kind␣of␣special␣processing,␣you'll␣probably
want␣to␣subclass␣C<Module::Build>␣and␣create␣a␣special␣method␣to
process␣them,␣named␣C<process_${kind}_files()>:

␣␣use␣Module::Build;
␣␣my␣$class␣=␣Module::Build->subclass(code␣=>␣<<'EOF');
␣␣␣␣sub␣process_dat_files␣{
␣␣␣␣␣␣my␣$self␣=␣shift;
␣␣␣␣␣␣...␣locate␣and␣process␣*.dat␣files,
␣␣␣␣␣␣...␣and␣create␣something␣in␣blib/lib/
␣␣␣␣}
␣␣EOF
␣␣my␣$build␣=␣$class->new
␣␣␣␣(
␣␣␣␣␣module_name␣=>␣'Foo::Bar',
␣␣␣␣␣...other␣stuff␣here...
␣␣␣␣);
␣␣$build->add_build_element('dat');
␣␣$build->create_build_script;

If␣your␣extra␣files␣don't␣go␣in␣F<lib/>␣but␣in␣some␣other␣place,␣see
L<"Adding␣new␣elements␣to␣the␣install␣process">␣for␣how␣to␣actually
get␣them␣installed.

Please␣note␣that␣these␣examples␣use␣some␣capabilities␣of␣Module::Build
that␣first␣appeared␣in␣version␣0.26.␣␣Before␣that␣it␣could
still␣be␣done,␣but␣the␣simple␣cases␣took␣a␣bit␣more␣work.


=head2␣Adding␣new␣elements␣to␣the␣install␣process

By␣default,␣Module::Build␣creates␣seven␣subdirectories␣of␣the␣F<blib>
directory␣during␣the␣build␣process:␣F<lib>,␣F<arch>,␣F<bin>,
F<script>,␣F<bindoc>,␣F<libdoc>,␣and␣F<html>␣(some␣of␣these␣may␣be
missing␣or␣empty␣if␣there's␣nothing␣to␣go␣in␣them).␣␣Anything␣copied
to␣these␣directories␣during␣the␣build␣will␣eventually␣be␣installed
during␣the␣C<install>␣action␣(see␣L<Module::Build/"INSTALL␣PATHS">.

If␣you␣need␣to␣create␣a␣new␣custom␣type␣of␣installable␣element,␣e.g.␣C<conf>,
then␣you␣need␣to␣tell␣Module::Build␣where␣things␣in␣F<blib/conf/>
should␣be␣installed.␣␣To␣do␣this,␣use␣the␣C<install_path>␣parameter␣to
the␣C<new()>␣method:

␣␣my␣$build␣=␣Module::Build->new
␣␣␣␣(
␣␣␣␣␣...other␣stuff␣here...
␣␣␣␣␣install_path␣=>␣{␣conf␣=>␣$installation_path␣}
␣␣␣␣);

Or␣you␣can␣call␣the␣C<install_path()>␣method␣later:

␣␣$build->install_path(conf␣=>␣$installation_path);

The␣user␣may␣also␣specify␣the␣path␣on␣the␣command␣line:

␣␣perl␣Build.PL␣--install_path␣conf=/foo/path/etc

The␣important␣part,␣though,␣is␣that␣I<somehow>␣the␣install␣path␣needs
to␣be␣set,␣or␣else␣nothing␣in␣the␣F<blib/conf/>␣directory␣will␣get
installed,␣and␣a␣runtime␣error␣during␣the␣C<install>␣action␣will
result.

See␣also␣L<"Adding␣new␣file␣types␣to␣the␣build␣process">␣for␣how␣to
create␣the␣stuff␣in␣F<blib/conf/>␣in␣the␣first␣place.


=head1␣EXAMPLES␣ON␣CPAN

Several␣distributions␣on␣CPAN␣are␣making␣good␣use␣of␣various␣features
of␣Module::Build.␣␣They␣can␣serve␣as␣real-world␣examples␣for␣others.


=head2␣SVN-Notify-Mirror

L<http://search.cpan.org/~jpeacock/SVN-Notify-Mirror/>

John␣Peacock,␣author␣of␣the␣C<SVN-Notify-Mirror>␣distribution,␣says:

=over␣4

=item␣1.␣Using␣C<auto_features>,␣I␣check␣to␣see␣whether␣two␣optional
modules␣are␣available␣-␣SVN::Notify::Config␣and␣Net::SSH;

=item␣2.␣If␣the␣S::N::Config␣module␣is␣loaded,␣I␣automatically
generate␣test␣files␣for␣it␣during␣Build␣(using␣the␣C<PL_files>
property).

=item␣3.␣If␣the␣C<ssh_feature>␣is␣available,␣I␣ask␣if␣the␣user␣wishes
to␣perform␣the␣ssh␣tests␣(since␣it␣requires␣a␣little␣preliminary
setup);

=item␣4.␣Only␣if␣the␣user␣has␣C<ssh_feature>␣and␣answers␣yes␣to␣the
testing,␣do␣I␣generate␣a␣test␣file.

I'm␣sure␣I␣could␣not␣have␣handled␣this␣complexity␣with␣EU::MM,␣but␣it
was␣very␣easy␣to␣do␣with␣M::B.

=back


=head2␣Modifying␣an␣action

Sometimes␣you␣might␣need␣an␣to␣have␣an␣action,␣say␣C<./Build␣install>,
do␣something␣unusual.␣␣For␣instance,␣you␣might␣need␣to␣change␣the
ownership␣of␣a␣file␣or␣do␣something␣else␣peculiar␣to␣your␣application.

You␣can␣subclass␣C<Module::Build>␣on␣the␣fly␣using␣the␣C<subclass()>
method␣and␣override␣the␣methods␣that␣perform␣the␣actions.␣␣You␣may
need␣to␣read␣through␣C<Module::Build::Authoring>␣and
C<Module::Build::API>␣to␣find␣the␣methods␣you␣want␣to␣override.␣␣All
"action"␣methods␣are␣implemented␣by␣a␣method␣called␣"ACTION_"␣followed
by␣the␣action's␣name,␣so␣here's␣an␣example␣of␣how␣it␣would␣work␣for
the␣C<install>␣action:

␣␣#␣Build.PL
␣␣use␣Module::Build;
␣␣my␣$class␣=␣Module::Build->subclass(
␣␣␣␣␣␣class␣=>␣"Module::Build::Custom",
␣␣␣␣␣␣code␣=>␣<<'SUBCLASS'␣);

␣␣sub␣ACTION_install␣{
␣␣␣␣␣␣my␣$self␣=␣shift;
␣␣␣␣␣␣#␣YOUR␣CODE␣HERE
␣␣␣␣␣␣$self->SUPER::ACTION_install;
␣␣}
␣␣SUBCLASS

␣␣$class->new(
␣␣␣␣␣␣module_name␣=>␣'Your::Module',
␣␣␣␣␣␣#␣rest␣of␣the␣usual␣Module::Build␣parameters
␣␣)->create_build_script;


=head2␣Adding␣an␣action

You␣can␣add␣a␣new␣C<./Build>␣action␣simply␣by␣writing␣the␣method␣for
it␣in␣your␣subclass.␣␣Use␣C<depends_on>␣to␣declare␣that␣another␣action
must␣have␣been␣run␣before␣your␣action.

For␣example,␣let's␣say␣you␣wanted␣to␣be␣able␣to␣write␣C<./Build
commit>␣to␣test␣your␣code␣and␣commit␣it␣to␣Subversion.

␣␣#␣Build.PL
␣␣use␣Module::Build;
␣␣my␣$class␣=␣Module::Build->subclass(
␣␣␣␣␣␣class␣=>␣"Module::Build::Custom",
␣␣␣␣␣␣code␣=>␣<<'SUBCLASS'␣);

␣␣sub␣ACTION_commit␣{
␣␣␣␣␣␣my␣$self␣=␣shift;

␣␣␣␣␣␣$self->depends_on("test");
␣␣␣␣␣␣$self->do_system(qw(svn␣commit));
␣␣}
␣␣SUBCLASS


=head2␣Bundling␣Module::Build

Note:␣This␣section␣probably␣needs␣an␣update␣as␣the␣technology␣improves
(see␣contrib/bundle.pl␣in␣the␣distribution).

Suppose␣you␣want␣to␣use␣some␣new-ish␣features␣of␣Module::Build,
e.g.␣newer␣than␣the␣version␣of␣Module::Build␣your␣users␣are␣likely␣to
already␣have␣installed␣on␣their␣systems.␣␣The␣first␣thing␣you␣should
do␣is␣set␣C<configure_requires>␣to␣your␣minimum␣version␣of
Module::Build.␣␣See␣L<Module::Build::Authoring>.

But␣not␣every␣build␣system␣honors␣C<configure_requires>␣yet.␣␣Here's
how␣you␣can␣ship␣a␣copy␣of␣Module::Build,␣but␣still␣use␣a␣newer
installed␣version␣to␣take␣advantage␣of␣any␣bug␣fixes␣and␣upgrades.

First,␣install␣Module::Build␣into␣F<Your-Project/inc/Module-Build>.
CPAN␣will␣not␣index␣anything␣in␣the␣F<inc>␣directory␣so␣this␣copy␣will
not␣show␣up␣in␣CPAN␣searches.

␣␣␣␣cd␣Module-Build
␣␣␣␣perl␣Build.PL␣--install_base␣/path/to/Your-Project/inc/Module-Build
␣␣␣␣./Build␣test
␣␣␣␣./Build␣install

You␣should␣now␣have␣all␣the␣Module::Build␣.pm␣files␣in
F<Your-Project/inc/Module-Build/lib/perl5>.

Next,␣add␣this␣to␣the␣top␣of␣your␣F<Build.PL>.

␣␣␣␣my␣$Bundled_MB␣=␣0.30;␣␣#␣or␣whatever␣version␣it␣was.

␣␣␣␣#␣Find␣out␣what␣version␣of␣Module::Build␣is␣installed␣or␣fail␣quietly.
␣␣␣␣#␣This␣should␣be␣cross-platform.
␣␣␣␣my␣$Installed_MB␣=
␣␣␣␣␣␣␣␣`$^X␣-e␣"eval␣q{require␣Module::Build;␣print␣Module::Build->VERSION}␣or␣exit␣1";

␣␣␣␣#␣some␣operating␣systems␣put␣a␣newline␣at␣the␣end␣of␣every␣print.
␣␣␣␣chomp␣$Installed_MB;

␣␣␣␣$Installed_MB␣=␣0␣if␣$?;

␣␣␣␣#␣Use␣our␣bundled␣copy␣of␣Module::Build␣if␣it's␣newer␣than␣the␣installed.
␣␣␣␣unshift␣@INC,␣"inc/Module-Build/lib/perl5"␣if␣$Bundled_MB␣>␣$Installed_MB;

␣␣␣␣require␣Module::Build;

And␣write␣the␣rest␣of␣your␣F<Build.PL>␣normally.␣␣Module::Build␣will
remember␣your␣change␣to␣C<@INC>␣and␣use␣it␣when␣you␣run␣F<./Build>.

In␣the␣future,␣we␣hope␣to␣provide␣a␣more␣automated␣solution␣for␣this
scenario;␣see␣C<inc/latest.pm>␣in␣the␣Module::Build␣distribution␣for
one␣indication␣of␣the␣direction␣we're␣moving.


=head1␣AUTHOR

Ken␣Williams␣<kwilliams@cpan.org>


=head1␣COPYRIGHT

Copyright␣(c)␣2001-2008␣Ken␣Williams.␣␣All␣rights␣reserved.

This␣library␣is␣free␣software;␣you␣can␣redistribute␣it␣and/or
modify␣it␣under␣the␣same␣terms␣as␣Perl␣itself.


=head1␣SEE␣ALSO

perl(1),␣L<Module::Build>(3),␣L<Module::Build::Authoring>(3),
L<Module::Build::API>(3)

=cut
----------
Range: (4020432,4023103) (2671)
}


=head1␣NAME

Module::Build::ConfigData␣-␣Configuration␣for␣Module::Build

=head1␣SYNOPSIS

␣␣use␣Module::Build::ConfigData;
␣␣$value␣=␣Module::Build::ConfigData->config('foo');
␣␣$value␣=␣Module::Build::ConfigData->feature('bar');

␣␣@names␣=␣Module::Build::ConfigData->config_names;
␣␣@names␣=␣Module::Build::ConfigData->feature_names;

␣␣Module::Build::ConfigData->set_config(foo␣=>␣$new_value);
␣␣Module::Build::ConfigData->set_feature(bar␣=>␣$new_value);
␣␣Module::Build::ConfigData->write;␣␣#␣Save␣changes


=head1␣DESCRIPTION

This␣module␣holds␣the␣configuration␣data␣for␣the␣C<Module::Build>
module.␣␣It␣also␣provides␣a␣programmatic␣interface␣for␣getting␣or
setting␣that␣configuration␣data.␣␣Note␣that␣in␣order␣to␣actually␣make
changes,␣you'll␣have␣to␣have␣write␣access␣to␣the␣C<Module::Build::ConfigData>
module,␣and␣you␣should␣attempt␣to␣understand␣the␣repercussions␣of␣your
actions.


=head1␣METHODS

=over␣4

=item␣config($name)

Given␣a␣string␣argument,␣returns␣the␣value␣of␣the␣configuration␣item
by␣that␣name,␣or␣C<undef>␣if␣no␣such␣item␣exists.

=item␣feature($name)

Given␣a␣string␣argument,␣returns␣the␣value␣of␣the␣feature␣by␣that
name,␣or␣C<undef>␣if␣no␣such␣feature␣exists.

=item␣set_config($name,␣$value)

Sets␣the␣configuration␣item␣with␣the␣given␣name␣to␣the␣given␣value.
The␣value␣may␣be␣any␣Perl␣scalar␣that␣will␣serialize␣correctly␣using
C<Data::Dumper>.␣␣This␣includes␣references,␣objects␣(usually),␣and
complex␣data␣structures.␣␣It␣probably␣does␣not␣include␣transient
things␣like␣filehandles␣or␣sockets.

=item␣set_feature($name,␣$value)

Sets␣the␣feature␣with␣the␣given␣name␣to␣the␣given␣boolean␣value.␣␣The
value␣will␣be␣converted␣to␣0␣or␣1␣automatically.

=item␣config_names()

Returns␣a␣list␣of␣all␣the␣names␣of␣config␣items␣currently␣defined␣in
C<Module::Build::ConfigData>,␣or␣in␣scalar␣context␣the␣number␣of␣items.

=item␣feature_names()

Returns␣a␣list␣of␣all␣the␣names␣of␣features␣currently␣defined␣in
C<Module::Build::ConfigData>,␣or␣in␣scalar␣context␣the␣number␣of␣features.

=item␣auto_feature_names()

Returns␣a␣list␣of␣all␣the␣names␣of␣features␣whose␣availability␣is
dynamically␣determined,␣or␣in␣scalar␣context␣the␣number␣of␣such
features.␣␣Does␣not␣include␣such␣features␣that␣have␣later␣been␣set␣to
a␣fixed␣value.

=item␣write()

Commits␣any␣changes␣from␣C<set_config()>␣and␣C<set_feature()>␣to␣disk.
Requires␣write␣access␣to␣the␣C<Module::Build::ConfigData>␣module.

=back


=head1␣AUTHOR

C<Module::Build::ConfigData>␣was␣automatically␣created␣using␣C<Module::Build>.
C<Module::Build>␣was␣written␣by␣Ken␣Williams,␣but␣he␣holds␣no
authorship␣claim␣or␣copyright␣claim␣to␣the␣contents␣of␣C<Module::Build::ConfigData>.

=cut
----------
Range: (4202724,4205908) (3184)
}

=pod

=head1␣NAME

Module::Load::Conditional␣-␣Looking␣up␣module␣information␣/␣loading␣at␣runtime

=head1␣SYNOPSIS

␣␣␣␣use␣Module::Load::Conditional␣qw[can_load␣check_install␣requires];


␣␣␣␣my␣$use_list␣=␣{
␣␣␣␣␣␣␣␣␣␣␣␣CPANPLUS␣␣␣␣␣␣␣␣=>␣0.05,
␣␣␣␣␣␣␣␣␣␣␣␣LWP␣␣␣␣␣␣␣␣␣␣␣␣␣=>␣5.60,
␣␣␣␣␣␣␣␣␣␣␣␣'Test::More'␣␣␣␣=>␣undef,
␣␣␣␣};

␣␣␣␣print␣can_load(␣modules␣=>␣$use_list␣)
␣␣␣␣␣␣␣␣␣␣␣␣?␣'all␣modules␣loaded␣successfully'
␣␣␣␣␣␣␣␣␣␣␣␣:␣'failed␣to␣load␣required␣modules';


␣␣␣␣my␣$rv␣=␣check_install(␣module␣=>␣'LWP',␣version␣=>␣5.60␣)
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣or␣print␣'LWP␣is␣not␣installed!';

␣␣␣␣print␣'LWP␣up␣to␣date'␣if␣$rv->{uptodate};
␣␣␣␣print␣"LWP␣version␣is␣$rv->{version}\n";
␣␣␣␣print␣"LWP␣is␣installed␣as␣file␣$rv->{file}\n";


␣␣␣␣print␣"LWP␣requires␣the␣following␣modules␣to␣be␣installed:\n";
␣␣␣␣print␣join␣"\n",␣requires('LWP');

␣␣␣␣###␣allow␣M::L::C␣to␣peek␣in␣your␣%INC␣rather␣than␣just
␣␣␣␣###␣scanning␣@INC
␣␣␣␣$Module::Load::Conditional::CHECK_INC_HASH␣=␣1;

␣␣␣␣###␣reset␣the␣'can_load'␣cache
␣␣␣␣undef␣$Module::Load::Conditional::CACHE;

␣␣␣␣###␣don't␣have␣Module::Load::Conditional␣issue␣warnings␣--
␣␣␣␣###␣default␣is␣'1'
␣␣␣␣$Module::Load::Conditional::VERBOSE␣=␣0;

␣␣␣␣###␣The␣last␣error␣that␣happened␣during␣a␣call␣to␣'can_load'
␣␣␣␣my␣$err␣=␣$Module::Load::Conditional::ERROR;


=head1␣DESCRIPTION

Module::Load::Conditional␣provides␣simple␣ways␣to␣query␣and␣possibly␣load␣any␣of
the␣modules␣you␣have␣installed␣on␣your␣system␣during␣runtime.

It␣is␣able␣to␣load␣multiple␣modules␣at␣once␣or␣none␣at␣all␣if␣one␣of
them␣was␣not␣able␣to␣load.␣It␣also␣takes␣care␣of␣any␣error␣checking
and␣so␣forth.

=head1␣Methods

=head1␣$href␣=␣check_install(␣module␣=>␣NAME␣[,␣version␣=>␣VERSION,␣verbose␣=>␣BOOL␣]␣);

C<check_install>␣allows␣you␣to␣verify␣if␣a␣certain␣module␣is␣installed
or␣not.␣You␣may␣call␣it␣with␣the␣following␣arguments:

=over␣4

=item␣module

The␣name␣of␣the␣module␣you␣wish␣to␣verify␣--␣this␣is␣a␣required␣key

=item␣version

The␣version␣this␣module␣needs␣to␣be␣--␣this␣is␣optional

=item␣verbose

Whether␣or␣not␣to␣be␣verbose␣about␣what␣it␣is␣doing␣--␣it␣will␣default
to␣$Module::Load::Conditional::VERBOSE

=back

It␣will␣return␣undef␣if␣it␣was␣not␣able␣to␣find␣where␣the␣module␣was
installed,␣or␣a␣hash␣reference␣with␣the␣following␣keys␣if␣it␣was␣able
to␣find␣the␣file:

=over␣4

=item␣file

Full␣path␣to␣the␣file␣that␣contains␣the␣module

=item␣dir

Directory,␣or␣more␣exact␣the␣C<@INC>␣entry,␣where␣the␣module␣was
loaded␣from.

=item␣version

The␣version␣number␣of␣the␣installed␣module␣-␣this␣will␣be␣C<undef>␣if
the␣module␣had␣no␣(or␣unparsable)␣version␣number,␣or␣if␣the␣variable
C<$Module::Load::Conditional::FIND_VERSION>␣was␣set␣to␣true.
(See␣the␣C<GLOBAL␣VARIABLES>␣section␣below␣for␣details)

=item␣uptodate

A␣boolean␣value␣indicating␣whether␣or␣not␣the␣module␣was␣found␣to␣be
at␣least␣the␣version␣you␣specified.␣If␣you␣did␣not␣specify␣a␣version,
uptodate␣will␣always␣be␣true␣if␣the␣module␣was␣found.
If␣no␣parsable␣version␣was␣found␣in␣the␣module,␣uptodate␣will␣also␣be
true,␣since␣C<check_install>␣had␣no␣way␣to␣verify␣clearly.

See␣also␣C<$Module::Load::Conditional::DEPRECATED>,␣which␣affects␣
the␣outcome␣of␣this␣value.

=back

=cut
----------
Range: (4219876,4226088) (6212)
=head1␣NAME

Module::CoreList␣-␣what␣modules␣shipped␣with␣versions␣of␣perl

=head1␣SYNOPSIS

␣use␣Module::CoreList;

␣print␣$Module::CoreList::version{5.00503}{CPAN};␣#␣prints␣1.48

␣print␣Module::CoreList->first_release('File::Spec');␣␣␣␣␣␣␣␣␣#␣prints␣5.00405
␣print␣Module::CoreList->first_release_by_date('File::Spec');␣#␣prints␣5.005
␣print␣Module::CoreList->first_release('File::Spec',␣0.82);␣␣␣#␣prints␣5.006001

␣print␣join␣',␣',␣Module::CoreList->find_modules(qr/Data/);
␣␣␣␣#␣prints␣'Data::Dumper'
␣print␣join␣',␣',␣Module::CoreList->find_modules(qr/test::h.*::.*s/i,␣5.008008);
␣␣␣␣#␣prints␣'Test::Harness::Assert,␣Test::Harness::Straps'

␣print␣join␣",␣",␣@{␣$Module::CoreList::families{5.005}␣};
␣␣␣␣#␣prints␣"5.005,␣5.00503,␣5.00504"

=head1␣DESCRIPTION

Module::CoreList␣provides␣information␣on␣which␣core␣and␣dual-life␣modules␣shipped
with␣each␣version␣of␣L<perl>.

It␣provides␣a␣number␣of␣mechanisms␣for␣querying␣this␣information.

There␣is␣a␣utility␣called␣L<corelist>␣provided␣with␣this␣module
which␣is␣a␣convenient␣way␣of␣querying␣from␣the␣command-line.

There␣is␣a␣functional␣programming␣API␣available␣for␣programmers␣to␣query
information.

Programmers␣may␣also␣query␣the␣contained␣hash␣structures␣to␣find␣relevant
information.

=head1␣FUNCTIONS␣API

These␣are␣the␣functions␣that␣are␣available,␣they␣may␣either␣be␣called␣as␣functions␣or␣class␣methods:

␣␣Module::CoreList::first_release('File::Spec');␣#␣as␣a␣function

␣␣Module::CoreList->first_release('File::Spec');␣#␣class␣method

=over

=item␣C<first_release(␣MODULE␣)>

Behaviour␣since␣version␣2.11

Requires␣a␣MODULE␣name␣as␣an␣argument,␣returns␣the␣perl␣version␣when␣that␣module␣first
appeared␣in␣core␣as␣ordered␣by␣perl␣version␣number␣or␣undef␣(␣in␣scalar␣context␣)
or␣an␣empty␣list␣(␣in␣list␣context␣)␣if␣that␣module␣is␣not␣in␣core.

=item␣C<first_release_by_date(␣MODULE␣)>

Requires␣a␣MODULE␣name␣as␣an␣argument,␣returns␣the␣perl␣version␣when␣that␣module␣first
appeared␣in␣core␣as␣ordered␣by␣release␣date␣or␣undef␣(␣in␣scalar␣context␣)
or␣an␣empty␣list␣(␣in␣list␣context␣)␣if␣that␣module␣is␣not␣in␣core.

=item␣C<find_modules(␣REGEX,␣[␣LIST␣OF␣PERLS␣]␣)>

Takes␣a␣regex␣as␣an␣argument,␣returns␣a␣list␣of␣modules␣that␣match␣the␣regex␣given.
If␣only␣a␣regex␣is␣provided␣applies␣to␣all␣modules␣in␣all␣perl␣versions.␣Optionally
you␣may␣provide␣a␣list␣of␣perl␣versions␣to␣limit␣the␣regex␣search.

=item␣C<find_version(␣PERL_VERSION␣)>

Takes␣a␣perl␣version␣as␣an␣argument.␣Returns␣that␣perl␣version␣if␣it␣exists␣or␣C<undef>
otherwise.

=item␣C<is_deprecated(␣MODULE,␣PERL_VERSION␣)>

Available␣in␣version␣2.22␣and␣above.

Returns␣true␣if␣MODULE␣is␣marked␣as␣deprecated␣in␣PERL_VERSION.␣␣If␣PERL_VERSION␣is
omitted,␣it␣defaults␣to␣the␣current␣version␣of␣Perl.

=item␣C<removed_from(␣MODULE␣)>

Available␣in␣version␣2.32␣and␣above

Takes␣a␣module␣name␣as␣an␣argument,␣returns␣the␣first␣perl␣version␣where␣that␣module
was␣removed␣from␣core.␣Returns␣undef␣if␣the␣given␣module␣was␣never␣in␣core␣or␣remains
in␣core.

=item␣C<removed_from_by_date(␣MODULE␣)>

Available␣in␣version␣2.32␣and␣above

Takes␣a␣module␣name␣as␣an␣argument,␣returns␣the␣first␣perl␣version␣by␣release␣date␣where␣that␣module
was␣removed␣from␣core.␣Returns␣undef␣if␣the␣given␣module␣was␣never␣in␣core␣or␣remains
in␣core.

=back

=head1␣DATA␣STRUCTURES

These␣are␣the␣hash␣data␣structures␣that␣are␣available:

=over

=item␣C<%Module::CoreList::version>

A␣hash␣of␣hashes␣that␣is␣keyed␣on␣perl␣version␣as␣indicated
in␣$].␣␣The␣second␣level␣hash␣is␣module␣=>␣version␣pairs.

Note,␣it␣is␣possible␣for␣the␣version␣of␣a␣module␣to␣be␣unspecified,
whereby␣the␣value␣is␣C<undef>,␣so␣use␣C<exists␣$version{$foo}{$bar}>␣if
that's␣what␣you're␣testing␣for.

Starting␣with␣2.10,␣the␣special␣module␣name␣C<Unicode>␣refers␣to␣the␣version␣of
the␣Unicode␣Character␣Database␣bundled␣with␣Perl.

=item␣C<%Module::CoreList::released>

Keyed␣on␣perl␣version␣this␣contains␣ISO
formatted␣versions␣of␣the␣release␣dates,␣as␣gleaned␣from␣L<perlhist>.

=item␣C<%Module::CoreList::families>

New,␣in␣1.96,␣a␣hash␣that
clusters␣known␣perl␣releases␣by␣their␣major␣versions.

=item␣C<%Module::CoreList::deprecated>

A␣hash␣of␣hashes␣keyed␣on␣perl␣version␣and␣on␣module␣name.
If␣a␣module␣is␣defined␣it␣indicates␣that␣that␣module␣is
deprecated␣in␣that␣perl␣version␣and␣is␣scheduled␣for␣removal
from␣core␣at␣some␣future␣point.

=item␣C<%Module::CoreList::upstream>

A␣hash␣that␣contains␣information␣on␣where␣patches␣should␣be␣directed
for␣each␣core␣module.

UPSTREAM␣indicates␣where␣patches␣should␣go.␣C<undef>␣implies
that␣this␣hasn't␣been␣discussed␣for␣the␣module␣at␣hand.
C<blead>␣indicates␣that␣the␣copy␣of␣the␣module␣in␣the␣blead
sources␣is␣to␣be␣considered␣canonical,␣C<cpan>␣means␣that␣the
module␣on␣CPAN␣is␣to␣be␣patched␣first.␣C<first-come>␣means
that␣blead␣can␣be␣patched␣freely␣if␣it␣is␣in␣sync␣with␣the
latest␣release␣on␣CPAN.

=item␣C<%Module::CoreList::bug_tracker>

A␣hash␣that␣contains␣information␣on␣the␣appropriate␣bug␣tracker
for␣each␣core␣module.

BUGS␣is␣an␣email␣or␣url␣to␣post␣bug␣reports.␣␣For␣modules␣with
UPSTREAM␣=>␣'blead',␣use␣perl5-porters@perl.org.␣␣rt.cpan.org
appears␣to␣automatically␣provide␣a␣URL␣for␣CPAN␣modules;␣any␣value
given␣here␣overrides␣the␣default:
http://rt.cpan.org/Public/Dist/Display.html?Name=$ModuleName

=back

=head1␣CAVEATS

Module::CoreList␣currently␣covers␣the␣5.000,␣5.001,␣5.002,␣5.003_07,
5.004,␣5.004_05,␣5.005,␣5.005_03,␣5.005_04,␣5.6.0,␣5.6.1,␣5.6.2,␣5.7.3,
5.8.0,␣5.8.1,␣5.8.2,␣5.8.3,␣5.8.4,␣5.8.5,␣5.8.6,␣5.8.7,␣5.8.8,␣5.8.9,
5.9.0,␣5.9.1,␣5.9.2,␣5.9.3,␣5.9.4,␣5.9.5,␣5.10.0,␣5.10.1,␣5.11.0,␣5.11.1,
5.11.2,␣5.11.3,␣5.11.4,␣5.11.5,␣5.12.0,␣5.12.1,␣5.12.2,␣5.12.3,␣5.12.4,
5.12.5,␣5.13.0,␣5.13.1,␣5.13.2,␣5.13.3,␣5.13.4,␣5.13.5,␣5.13.6,␣5.13.7,
5.13.8,␣5.13.9,␣5.13.10,␣5.13.11,␣5.14.0␣and␣5.14.1␣releases␣of␣perl.

=head1␣HISTORY

Moved␣to␣Changes␣file.

=head1␣AUTHOR

Richard␣Clamp␣E<lt>richardc@unixbeard.netE<gt>

Currently␣maintained␣by␣the␣perl␣5␣porters␣E<lt>perl5-porters@perl.orgE<gt>.

=head1␣LICENSE

Copyright␣(C)␣2002-2009␣Richard␣Clamp.␣␣All␣Rights␣Reserved.

This␣module␣is␣free␣software;␣you␣can␣redistribute␣it␣and/or␣modify␣it
under␣the␣same␣terms␣as␣Perl␣itself.

=head1␣SEE␣ALSO

L<corelist>,␣L<Module::Info>,␣L<perl>

=cut
----------
Range: (5384557,5391583) (7026)
=pod

=head1␣NAME

Module::Pluggable␣-␣automatically␣give␣your␣module␣the␣ability␣to␣have␣plugins

=head1␣SYNOPSIS


Simple␣use␣Module::Pluggable␣-

␣␣␣␣package␣MyClass;
␣␣␣␣use␣Module::Pluggable;
␣␣␣␣

and␣then␣later␣...

␣␣␣␣use␣MyClass;
␣␣␣␣my␣$mc␣=␣MyClass->new();
␣␣␣␣#␣returns␣the␣names␣of␣all␣plugins␣installed␣under␣MyClass::Plugin::*
␣␣␣␣my␣@plugins␣=␣$mc->plugins();␣

=head1␣EXAMPLE

Why␣would␣you␣want␣to␣do␣this?␣Say␣you␣have␣something␣that␣wants␣to␣pass␣an
object␣to␣a␣number␣of␣different␣plugins␣in␣turn.␣For␣example␣you␣may␣
want␣to␣extract␣meta-data␣from␣every␣email␣you␣get␣sent␣and␣do␣something
with␣it.␣Plugins␣make␣sense␣here␣because␣then␣you␣can␣keep␣adding␣new␣
meta␣data␣parsers␣and␣all␣the␣logic␣and␣docs␣for␣each␣one␣will␣be␣
self␣contained␣and␣new␣handlers␣are␣easy␣to␣add␣without␣changing␣the␣
core␣code.␣For␣that,␣you␣might␣do␣something␣like␣...

␣␣␣␣package␣Email::Examiner;

␣␣␣␣use␣strict;
␣␣␣␣use␣Email::Simple;
␣␣␣␣use␣Module::Pluggable␣require␣=>␣1;

␣␣␣␣sub␣handle_email␣{
␣␣␣␣␣␣␣␣my␣$self␣␣=␣shift;
␣␣␣␣␣␣␣␣my␣$email␣=␣shift;

␣␣␣␣␣␣␣␣foreach␣my␣$plugin␣($self->plugins)␣{
␣␣␣␣␣␣␣␣␣␣␣␣$plugin->examine($email);
␣␣␣␣␣␣␣␣}

␣␣␣␣␣␣␣␣return␣1;
␣␣␣␣}



..␣and␣all␣the␣plugins␣will␣get␣a␣chance␣in␣turn␣to␣look␣at␣it.

This␣can␣be␣trivally␣extended␣so␣that␣plugins␣could␣save␣the␣email
somewhere␣and␣then␣no␣other␣plugin␣should␣try␣and␣do␣that.␣
Simply␣have␣it␣so␣that␣the␣C<examine>␣method␣returns␣C<1>␣if␣
it␣has␣saved␣the␣email␣somewhere.␣You␣might␣also␣wnat␣to␣be␣paranoid
and␣check␣to␣see␣if␣the␣plugin␣has␣an␣C<examine>␣method.

␣␣␣␣␣␣␣␣foreach␣my␣$plugin␣($self->plugins)␣{
␣␣␣␣␣␣␣␣␣␣␣␣next␣unless␣$plugin->can('examine');
␣␣␣␣␣␣␣␣␣␣␣␣last␣if␣␣␣␣␣$plugin->examine($email);
␣␣␣␣␣␣␣␣}


And␣so␣on.␣The␣sky's␣the␣limit.


=head1␣DESCRIPTION

Provides␣a␣simple␣but,␣hopefully,␣extensible␣way␣of␣having␣'plugins'␣for␣
your␣module.␣Obviously␣this␣isn't␣going␣to␣be␣the␣be␣all␣and␣end␣all␣of
solutions␣but␣it␣works␣for␣me.

Essentially␣all␣it␣does␣is␣export␣a␣method␣into␣your␣namespace␣that␣
looks␣through␣a␣search␣path␣for␣.pm␣files␣and␣turn␣those␣into␣class␣names.␣

Optionally␣it␣instantiates␣those␣classes␣for␣you.

=head1␣ADVANCED␣USAGE

␣␣␣␣
Alternatively,␣if␣you␣don't␣want␣to␣use␣'plugins'␣as␣the␣method␣...
␣␣␣␣
␣␣␣␣package␣MyClass;
␣␣␣␣use␣Module::Pluggable␣sub_name␣=>␣'foo';


and␣then␣later␣...

␣␣␣␣my␣@plugins␣=␣$mc->foo();


Or␣if␣you␣want␣to␣look␣in␣another␣namespace

␣␣␣␣package␣MyClass;
␣␣␣␣use␣Module::Pluggable␣search_path␣=>␣['Acme::MyClass::Plugin',␣'MyClass::Extend'];

or␣directory␣

␣␣␣␣use␣Module::Pluggable␣search_dirs␣=>␣['mylibs/Foo'];


Or␣if␣you␣want␣to␣instantiate␣each␣plugin␣rather␣than␣just␣return␣the␣name

␣␣␣␣package␣MyClass;
␣␣␣␣use␣Module::Pluggable␣instantiate␣=>␣'new';

and␣then

␣␣␣␣#␣whatever␣is␣passed␣to␣'plugins'␣will␣be␣passed␣
␣␣␣␣#␣to␣'new'␣for␣each␣plugin␣
␣␣␣␣my␣@plugins␣=␣$mc->plugins(@options);␣


alternatively␣you␣can␣just␣require␣the␣module␣without␣instantiating␣it

␣␣␣␣package␣MyClass;
␣␣␣␣use␣Module::Pluggable␣require␣=>␣1;

since␣requiring␣automatically␣searches␣inner␣packages,␣which␣may␣not␣be␣desirable,␣you␣can␣turn␣this␣off


␣␣␣␣package␣MyClass;
␣␣␣␣use␣Module::Pluggable␣require␣=>␣1,␣inner␣=>␣0;


You␣can␣limit␣the␣plugins␣loaded␣using␣the␣except␣option,␣either␣as␣a␣string,
array␣ref␣or␣regex

␣␣␣␣package␣MyClass;
␣␣␣␣use␣Module::Pluggable␣except␣=>␣'MyClass::Plugin::Foo';

or

␣␣␣␣package␣MyClass;
␣␣␣␣use␣Module::Pluggable␣except␣=>␣['MyClass::Plugin::Foo',␣'MyClass::Plugin::Bar'];

or

␣␣␣␣package␣MyClass;
␣␣␣␣use␣Module::Pluggable␣except␣=>␣qr/^MyClass::Plugin::(Foo|Bar)$/;


and␣similarly␣for␣only␣which␣will␣only␣load␣plugins␣which␣match.

Remember␣you␣can␣use␣the␣module␣more␣than␣once

␣␣␣␣package␣MyClass;
␣␣␣␣use␣Module::Pluggable␣search_path␣=>␣'MyClass::Filters'␣sub_name␣=>␣'filters';
␣␣␣␣use␣Module::Pluggable␣search_path␣=>␣'MyClass::Plugins'␣sub_name␣=>␣'plugins';

and␣then␣later␣...

␣␣␣␣my␣@filters␣=␣$self->filters;
␣␣␣␣my␣@plugins␣=␣$self->plugins;

=head1␣INNER␣PACKAGES

If␣you␣have,␣for␣example,␣a␣file␣B<lib/Something/Plugin/Foo.pm>␣that
contains␣package␣definitions␣for␣both␣C<Something::Plugin::Foo>␣and␣
C<Something::Plugin::Bar>␣then␣as␣long␣as␣you␣either␣have␣either␣
the␣B<require>␣or␣B<instantiate>␣option␣set␣then␣we'll␣also␣find␣
C<Something::Plugin::Bar>.␣Nifty!

=head1␣OPTIONS

You␣can␣pass␣a␣hash␣of␣options␣when␣importing␣this␣module.

The␣options␣can␣be␣...

=head2␣sub_name

The␣name␣of␣the␣subroutine␣to␣create␣in␣your␣namespace.␣

By␣default␣this␣is␣'plugins'

=head2␣search_path

An␣array␣ref␣of␣namespaces␣to␣look␣in.␣

=head2␣search_dirs␣

An␣array␣ref␣of␣directorys␣to␣look␣in␣before␣@INC.

=head2␣instantiate

Call␣this␣method␣on␣the␣class.␣In␣general␣this␣will␣probably␣be␣'new'
but␣it␣can␣be␣whatever␣you␣want.␣Whatever␣arguments␣are␣passed␣to␣'plugins'␣
will␣be␣passed␣to␣the␣method.

The␣default␣is␣'undef'␣i.e␣just␣return␣the␣class␣name.

=head2␣require

Just␣require␣the␣class,␣don't␣instantiate␣(overrides␣'instantiate');

=head2␣inner

If␣set␣to␣0␣will␣B<not>␣search␣inner␣packages.␣
If␣set␣to␣1␣will␣override␣C<require>.

=head2␣only

Takes␣a␣string,␣array␣ref␣or␣regex␣describing␣the␣names␣of␣the␣only␣plugins␣to␣
return.␣Whilst␣this␣may␣seem␣perverse␣...␣well,␣it␣is.␣But␣it␣also␣
makes␣sense.␣Trust␣me.

=head2␣except

Similar␣to␣C<only>␣it␣takes␣a␣description␣of␣plugins␣to␣exclude␣
from␣returning.␣This␣is␣slightly␣less␣perverse.

=head2␣package

This␣is␣for␣use␣by␣extension␣modules␣which␣build␣on␣C<Module::Pluggable>:
passing␣a␣C<package>␣option␣allows␣you␣to␣place␣the␣plugin␣method␣in␣a
different␣package␣other␣than␣your␣own.

=head2␣file_regex

By␣default␣C<Module::Pluggable>␣only␣looks␣for␣I<.pm>␣files.

By␣supplying␣a␣new␣C<file_regex>␣then␣you␣can␣change␣this␣behaviour␣e.g

␣␣␣␣file_regex␣=>␣qr/\.plugin$/

=head2␣include_editor_junk

By␣default␣C<Module::Pluggable>␣ignores␣files␣that␣look␣like␣they␣were
left␣behind␣by␣editors.␣Currently␣this␣means␣files␣ending␣in␣F<~>␣(~),
the␣extensions␣F<.swp>␣or␣F<.swo>,␣or␣files␣beginning␣with␣F<.#>.

Setting␣C<include_editor_junk>␣changes␣C<Module::Pluggable>␣so␣it␣does
not␣ignore␣any␣files␣it␣finds.


=head1␣METHODs

=head2␣search_path

The␣method␣C<search_path>␣is␣exported␣into␣you␣namespace␣as␣well.␣
You␣can␣call␣that␣at␣any␣time␣to␣change␣or␣replace␣the␣
search_path.

␣␣␣␣$self->search_path(␣add␣=>␣"New::Path"␣);␣#␣add
␣␣␣␣$self->search_path(␣new␣=>␣"New::Path"␣);␣#␣replace



=head1␣FUTURE␣PLANS

This␣does␣everything␣I␣need␣and␣I␣can't␣really␣think␣of␣any␣other␣
features␣I␣want␣to␣add.␣Famous␣last␣words␣of␣course

Recently␣tried␣fixed␣to␣find␣inner␣packages␣and␣to␣make␣it␣
'just␣work'␣with␣PAR␣but␣there␣are␣still␣some␣issues.


However␣suggestions␣(and␣patches)␣are␣welcome.

=head1␣AUTHOR

Simon␣Wistow␣<simon@thegestalt.org>

=head1␣COPYING

Copyright,␣2006␣Simon␣Wistow

Distributed␣under␣the␣same␣terms␣as␣Perl␣itself.

=head1␣BUGS

None␣known.

=head1␣SEE␣ALSO

L<File::Spec>,␣L<File::Find>,␣L<File::Basename>,␣L<Class::Factory::Util>,␣L<Module::Pluggable::Ordered>

=cut␣
----------
Range: (5455972,5457881) (1909)
=pod

=head1␣NAME

CPANPLUS::Dist::MM

=head1␣SYNOPSIS

␣␣␣␣$mm␣=␣CPANPLUS::Dist::MM->new(␣module␣=>␣$modobj␣);
␣␣␣␣
␣␣␣␣$mm->create;␣␣␣␣␣␣␣␣#␣runs␣make␣&&␣make␣test
␣␣␣␣$mm->install;␣␣␣␣␣␣␣#␣runs␣make␣install

␣␣␣␣
=head1␣DESCRIPTION

C<CPANPLUS::Dist::MM>␣is␣a␣distribution␣class␣for␣MakeMaker␣related
modules.
Using␣this␣package,␣you␣can␣create,␣install␣and␣uninstall␣perl␣
modules.␣It␣inherits␣from␣C<CPANPLUS::Dist>.

=head1␣ACCESSORS

=over␣4

=item␣parent()

Returns␣the␣C<CPANPLUS::Module>␣object␣that␣parented␣this␣object.

=item␣status()

Returns␣the␣C<Object::Accessor>␣object␣that␣keeps␣the␣status␣for
this␣module.

=back

=head1␣STATUS␣ACCESSORS␣

All␣accessors␣can␣be␣accessed␣as␣follows:
␣␣␣␣$mm->status->ACCESSOR

=over␣4

=item␣makefile␣()

Location␣of␣the␣Makefile␣(or␣Build␣file).␣
Set␣to␣0␣explicitly␣if␣something␣went␣wrong.

=item␣make␣()

BOOL␣indicating␣if␣the␣C<make>␣(or␣C<Build>)␣command␣was␣successful.

=item␣test␣()

BOOL␣indicating␣if␣the␣C<make␣test>␣(or␣C<Build␣test>)␣command␣was␣
successful.

=item␣prepared␣()

BOOL␣indicating␣if␣the␣C<prepare>␣call␣exited␣succesfully
This␣gets␣set␣after␣C<perl␣Makefile.PL>

=item␣distdir␣()

Full␣path␣to␣the␣directory␣in␣which␣the␣C<prepare>␣call␣took␣place,
set␣after␣a␣call␣to␣C<prepare>.␣

=item␣created␣()

BOOL␣indicating␣if␣the␣C<create>␣call␣exited␣succesfully.␣This␣gets
set␣after␣C<make>␣and␣C<make␣test>.

=item␣installed␣()

BOOL␣indicating␣if␣the␣module␣was␣installed.␣This␣gets␣set␣after
C<make␣install>␣(or␣C<Build␣install>)␣exits␣successfully.

=item␣uninstalled␣()

BOOL␣indicating␣if␣the␣module␣was␣uninstalled␣properly.

=item␣_create_args␣()

Storage␣of␣the␣arguments␣passed␣to␣C<create>␣for␣this␣object.␣Used
for␣recursive␣calls␣when␣satisfying␣prerequisites.

=item␣_install_args␣()

Storage␣of␣the␣arguments␣passed␣to␣C<install>␣for␣this␣object.␣Used
for␣recursive␣calls␣when␣satisfying␣prerequisites.

=back

=cut
----------
Range: (5494903,5497253) (2350)
=pod

=head1␣NAME

CPANPLUS::Dist::Build␣-␣CPANPLUS␣plugin␣to␣install␣packages␣that␣use␣Build.PL

=head1␣SYNOPSIS

␣␣␣␣my␣$build␣=␣CPANPLUS::Dist->new(
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣format␣␣=>␣'CPANPLUS::Dist::Build',
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣module␣␣=>␣$modobj,
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣);
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣
␣␣␣␣$build->prepare;␣␣␣␣#␣runs␣Build.PL␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣
␣␣␣␣$build->create;␣␣␣␣␣#␣runs␣build␣&&␣build␣test
␣␣␣␣$build->install;␣␣␣␣#␣runs␣build␣install


=head1␣DESCRIPTION

C<CPANPLUS::Dist::Build>␣is␣a␣distribution␣class␣for␣C<Module::Build>
related␣modules.
Using␣this␣package,␣you␣can␣create,␣install␣and␣uninstall␣perl
modules.␣It␣inherits␣from␣C<CPANPLUS::Dist>.

Normal␣users␣won't␣have␣to␣worry␣about␣the␣interface␣to␣this␣module,
as␣it␣functions␣transparently␣as␣a␣plug-in␣to␣C<CPANPLUS>␣and␣will␣
just␣C<Do␣The␣Right␣Thing>␣when␣it's␣loaded.

=head1␣ACCESSORS

=over␣4

=item␣C<parent()>

Returns␣the␣C<CPANPLUS::Module>␣object␣that␣parented␣this␣object.

=item␣C<status()>

Returns␣the␣C<Object::Accessor>␣object␣that␣keeps␣the␣status␣for
this␣module.

=back

=head1␣STATUS␣ACCESSORS

All␣accessors␣can␣be␣accessed␣as␣follows:
␣␣␣␣$build->status->ACCESSOR

=over␣4

=item␣C<build_pl␣()>

Location␣of␣the␣Build␣file.
Set␣to␣0␣explicitly␣if␣something␣went␣wrong.

=item␣C<build␣()>

BOOL␣indicating␣if␣the␣C<Build>␣command␣was␣successful.

=item␣C<test␣()>

BOOL␣indicating␣if␣the␣C<Build␣test>␣command␣was␣successful.

=item␣C<prepared␣()>

BOOL␣indicating␣if␣the␣C<prepare>␣call␣exited␣succesfully
This␣gets␣set␣after␣C<perl␣Build.PL>

=item␣C<distdir␣()>

Full␣path␣to␣the␣directory␣in␣which␣the␣C<prepare>␣call␣took␣place,
set␣after␣a␣call␣to␣C<prepare>.␣

=item␣C<created␣()>

BOOL␣indicating␣if␣the␣C<create>␣call␣exited␣succesfully.␣This␣gets
set␣after␣C<Build>␣and␣C<Build␣test>.

=item␣C<installed␣()>

BOOL␣indicating␣if␣the␣module␣was␣installed.␣This␣gets␣set␣after
C<Build␣install>␣exits␣successfully.

=item␣uninstalled␣()

BOOL␣indicating␣if␣the␣module␣was␣uninstalled␣properly.

=item␣C<_create_args␣()>

Storage␣of␣the␣arguments␣passed␣to␣C<create>␣for␣this␣object.␣Used
for␣recursive␣calls␣when␣satisfying␣prerequisites.

=item␣C<_install_args␣()>

Storage␣of␣the␣arguments␣passed␣to␣C<install>␣for␣this␣object.␣Used
for␣recursive␣calls␣when␣satisfying␣prerequisites.

=back

=cut
----------
Range: (5636912,5640662) (3750)
=pod

=head1␣NAME

CPANPLUS::Shell::Default

=head1␣SYNOPSIS

␣␣␣␣###␣loading␣the␣shell:
␣␣␣␣$␣cpanp␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣run␣'cpanp'␣from␣the␣command␣line
␣␣␣␣$␣perl␣-MCPANPLUS␣-eshell␣␣␣#␣load␣the␣shell␣from␣the␣command␣line


␣␣␣␣use␣CPANPLUS::Shell␣qw[Default];␣␣␣␣␣␣␣␣#␣load␣this␣shell␣via␣the␣API
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣always␣done␣via␣CPANPLUS::Shell

␣␣␣␣my␣$ui␣=␣CPANPLUS::Shell->new;
␣␣␣␣$ui->shell;␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣run␣the␣shell
␣␣␣␣$ui->dispatch_on_input(␣input␣=>␣'x');␣␣#␣update␣the␣source␣using␣the
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣dispatch␣method

␣␣␣␣###␣when␣in␣the␣shell:
␣␣␣␣###␣Note␣that␣all␣commands␣can␣also␣take␣options.
␣␣␣␣###␣Look␣at␣their␣underlying␣CPANPLUS::Backend␣methods␣to␣see
␣␣␣␣###␣what␣options␣those␣are.
␣␣␣␣cpanp>␣h␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣show␣help␣messages
␣␣␣␣cpanp>␣?␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣show␣help␣messages

␣␣␣␣cpanp>␣m␣Acme␣␣␣␣␣␣␣␣␣␣␣␣#␣find␣acme␣modules,␣allows␣regexes
␣␣␣␣cpanp>␣a␣KANE␣␣␣␣␣␣␣␣␣␣␣␣#␣find␣modules␣by␣kane,␣allows␣regexes
␣␣␣␣cpanp>␣f␣Acme::Foo␣␣␣␣␣␣␣#␣get␣a␣list␣of␣all␣releases␣of␣Acme::Foo

␣␣␣␣cpanp>␣i␣Acme::Foo␣␣␣␣␣␣␣#␣install␣Acme::Foo
␣␣␣␣cpanp>␣i␣Acme-Foo-1.3␣␣␣␣#␣install␣version␣1.3␣of␣Acme::Foo
␣␣␣␣cpanp>␣i␣<URI>␣␣␣␣␣␣␣␣␣␣␣#␣install␣from␣URI,␣like␣ftp://foo.com/X.tgz
␣␣␣␣cpanp>␣i␣<DIR>␣␣␣␣␣␣␣␣␣␣␣#␣install␣from␣an␣absolute␣or␣relative␣directory
␣␣␣␣cpanp>␣i␣1␣3..5␣␣␣␣␣␣␣␣␣␣#␣install␣search␣results␣1,␣3,␣4␣and␣5
␣␣␣␣cpanp>␣i␣*␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣install␣all␣search␣results
␣␣␣␣cpanp>␣a␣KANE;␣i␣*;␣␣␣␣␣␣#␣find␣modules␣by␣kane,␣install␣all␣results
␣␣␣␣cpanp>␣t␣Acme::Foo␣␣␣␣␣␣␣#␣test␣Acme::Foo,␣without␣installing␣it
␣␣␣␣cpanp>␣u␣Acme::Foo␣␣␣␣␣␣␣#␣uninstall␣Acme::Foo
␣␣␣␣cpanp>␣d␣Acme::Foo␣␣␣␣␣␣␣#␣download␣Acme::Foo
␣␣␣␣cpanp>␣z␣Acme::Foo␣␣␣␣␣␣␣#␣download␣&␣extract␣Acme::Foo,␣then␣open␣a
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣shell␣in␣the␣extraction␣directory

␣␣␣␣cpanp>␣c␣Acme::Foo␣␣␣␣␣␣␣#␣get␣a␣list␣of␣test␣results␣for␣Acme::Foo
␣␣␣␣cpanp>␣l␣Acme::Foo␣␣␣␣␣␣␣#␣view␣details␣about␣the␣Acme::Foo␣package
␣␣␣␣cpanp>␣r␣Acme::Foo␣␣␣␣␣␣␣#␣view␣Acme::Foo's␣README␣file
␣␣␣␣cpanp>␣o␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣get␣a␣list␣of␣all␣installed␣modules␣that
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣are␣out␣of␣date
␣␣␣␣cpanp>␣o␣1..3␣␣␣␣␣␣␣␣␣␣␣␣#␣list␣uptodateness␣from␣a␣previous␣search␣
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣
␣␣␣␣cpanp>␣s␣conf␣␣␣␣␣␣␣␣␣␣␣␣#␣show␣config␣settings
␣␣␣␣cpanp>␣s␣conf␣md5␣1␣␣␣␣␣␣#␣enable␣md5␣checks
␣␣␣␣cpanp>␣s␣program␣␣␣␣␣␣␣␣␣#␣show␣program␣settings
␣␣␣␣cpanp>␣s␣edit␣␣␣␣␣␣␣␣␣␣␣␣#␣edit␣config␣file
␣␣␣␣cpanp>␣s␣reconfigure␣␣␣␣␣#␣go␣through␣initial␣configuration␣again
␣␣␣␣cpanp>␣s␣selfupdate␣␣␣␣␣␣#␣update␣your␣CPANPLUS␣install
␣␣␣␣cpanp>␣s␣save␣␣␣␣␣␣␣␣␣␣␣␣#␣save␣config␣to␣disk
␣␣␣␣cpanp>␣s␣mirrors␣␣␣␣␣␣␣␣␣#␣show␣currently␣selected␣mirrors

␣␣␣␣cpanp>␣!␣[PERL␣CODE]␣␣␣␣␣#␣execute␣the␣following␣perl␣code

␣␣␣␣cpanp>␣b␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣create␣an␣autobundle␣for␣this␣computers
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣perl␣installation
␣␣␣␣cpanp>␣x␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣reload␣index␣files␣(purges␣cache)
␣␣␣␣cpanp>␣x␣--update_source␣#␣reload␣index␣files,␣get␣fresh␣source␣files
␣␣␣␣cpanp>␣p␣[FILE]␣␣␣␣␣␣␣␣␣␣#␣print␣error␣stack␣(to␣a␣file)
␣␣␣␣cpanp>␣v␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣show␣the␣banner
␣␣␣␣cpanp>␣w␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣show␣last␣search␣results␣again

␣␣␣␣cpanp>␣q␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣quit␣the␣shell

␣␣␣␣cpanp>␣/plugins␣␣␣␣␣␣␣␣␣␣#␣list␣avialable␣plugins
␣␣␣␣cpanp>␣/?␣PLUGIN␣␣␣␣␣␣␣␣␣#␣list␣help␣test␣of␣<PLUGIN>␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣

␣␣␣␣###␣common␣options:
␣␣␣␣cpanp>␣i␣...␣--skiptest␣#␣skip␣tests
␣␣␣␣cpanp>␣i␣...␣--force␣␣␣␣#␣force␣all␣operations
␣␣␣␣cpanp>␣i␣...␣--verbose␣␣#␣run␣in␣verbose␣mode

=head1␣DESCRIPTION

This␣module␣provides␣the␣default␣user␣interface␣to␣C<CPANPLUS>.␣You
can␣start␣it␣via␣the␣C<cpanp>␣binary,␣or␣as␣detailed␣in␣the␣L<SYNOPSIS>.

=cut
----------
Range: (5739469,5741503) (2034)
=pod

=head1␣NAME

CPANPLUS::Backend::RV

=head1␣SYNOPSIS

␣␣␣␣###␣create␣a␣CPANPLUS::Backend::RV␣object
␣␣␣␣$backend_rv␣␣␣␣␣=␣CPANPLUS::Backend::RV->new(
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣ok␣␣␣␣␣␣␣␣␣␣=>␣$boolean,
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣args␣␣␣␣␣␣␣␣=>␣$args,
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣rv␣␣␣␣␣␣␣␣␣␣=>␣$return_value
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣function␣␣␣␣=>␣$calling_function␣);

␣␣␣␣###␣if␣you␣have␣a␣CPANPLUS::Backend::RV␣object
␣␣␣␣$passed_args␣␣␣␣=␣$backend_rv->args;␣␣␣␣#␣args␣passed␣to␣function
␣␣␣␣$ok␣␣␣␣␣␣␣␣␣␣␣␣␣=␣$backend_rv->ok;␣␣␣␣␣␣#␣boolean␣indication␣overall
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣result␣of␣the␣call
␣␣␣␣$function␣␣␣␣␣␣␣=␣$backend_rv->fucntion␣#␣name␣of␣the␣calling
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣function
␣␣␣␣$rv␣␣␣␣␣␣␣␣␣␣␣␣␣=␣$backend_rv->rv␣␣␣␣␣␣␣#␣the␣actual␣return␣value
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣of␣the␣calling␣function

=head1␣DESCRIPTION

This␣module␣provides␣return␣value␣objects␣for␣multi-module
calls␣to␣CPANPLUS::Backend.␣In␣boolean␣context,␣it␣returns␣the␣status
of␣the␣overall␣result␣(ie,␣the␣same␣as␣the␣C<ok>␣method␣would).

=head1␣METHODS

=head2␣new(␣ok␣=>␣BOOL,␣args␣=>␣DATA,␣rv␣=>␣DATA,␣[function␣=>␣$method_name]␣)

Creates␣a␣new␣CPANPLUS::Backend::RV␣object␣from␣the␣data␣provided.
This␣method␣should␣only␣be␣called␣by␣CPANPLUS::Backend␣functions.
The␣accessors␣may␣be␣used␣by␣users␣inspecting␣an␣RV␣object.

All␣the␣argument␣names␣can␣be␣used␣as␣accessors␣later␣to␣retrieve␣the
data.

Arguments:

=over␣4

=item␣ok

Boolean␣indicating␣overall␣success

=item␣args

The␣arguments␣provided␣to␣the␣function␣that␣returned␣this␣rv␣object.
Useful␣to␣inspect␣later␣to␣see␣what␣was␣actually␣passed␣to␣the␣function
in␣case␣of␣an␣error.

=item␣rv

An␣arbitrary␣data␣structure␣that␣has␣the␣detailed␣return␣values␣of␣each
of␣your␣multi-module␣calls.

=item␣function

The␣name␣of␣the␣function␣that␣created␣this␣rv␣object.
Can␣be␣explicitly␣passed.␣If␣not,␣C<new()>␣will␣try␣to␣deduce␣the␣name
from␣C<caller()>␣information.

=back

=cut
----------
Range: (5755491,5758654) (3163)
}

=pod

=head2␣$backend_rv␣=␣$cb->fetch(␣modules␣=>␣\@mods␣)

Fetches␣a␣list␣of␣modules.␣C<@mods>␣can␣be␣a␣list␣of␣distribution
names,␣module␣names␣or␣module␣objects--basically␣anything␣that
L<parse_module>␣can␣understand.

See␣the␣equivalent␣method␣in␣C<CPANPLUS::Module>␣for␣details␣on
other␣options␣you␣can␣pass.

Since␣this␣is␣a␣multi-module␣method␣call,␣the␣return␣value␣is
implemented␣as␣a␣C<CPANPLUS::Backend::RV>␣object.␣Please␣consult
that␣module's␣documentation␣on␣how␣to␣interpret␣the␣return␣value.

=head2␣$backend_rv␣=␣$cb->extract(␣modules␣=>␣\@mods␣)

Extracts␣a␣list␣of␣modules.␣C<@mods>␣can␣be␣a␣list␣of␣distribution
names,␣module␣names␣or␣module␣objects--basically␣anything␣that
L<parse_module>␣can␣understand.

See␣the␣equivalent␣method␣in␣C<CPANPLUS::Module>␣for␣details␣on
other␣options␣you␣can␣pass.

Since␣this␣is␣a␣multi-module␣method␣call,␣the␣return␣value␣is
implemented␣as␣a␣C<CPANPLUS::Backend::RV>␣object.␣Please␣consult
that␣module's␣documentation␣on␣how␣to␣interpret␣the␣return␣value.

=head2␣$backend_rv␣=␣$cb->install(␣modules␣=>␣\@mods␣)

Installs␣a␣list␣of␣modules.␣C<@mods>␣can␣be␣a␣list␣of␣distribution
names,␣module␣names␣or␣module␣objects--basically␣anything␣that
L<parse_module>␣can␣understand.

See␣the␣equivalent␣method␣in␣C<CPANPLUS::Module>␣for␣details␣on
other␣options␣you␣can␣pass.

Since␣this␣is␣a␣multi-module␣method␣call,␣the␣return␣value␣is
implemented␣as␣a␣C<CPANPLUS::Backend::RV>␣object.␣Please␣consult
that␣module's␣documentation␣on␣how␣to␣interpret␣the␣return␣value.

=head2␣$backend_rv␣=␣$cb->readme(␣modules␣=>␣\@mods␣)

Fetches␣the␣readme␣for␣a␣list␣of␣modules.␣C<@mods>␣can␣be␣a␣list␣of
distribution␣names,␣module␣names␣or␣module␣objects--basically
anything␣that␣L<parse_module>␣can␣understand.

See␣the␣equivalent␣method␣in␣C<CPANPLUS::Module>␣for␣details␣on
other␣options␣you␣can␣pass.

Since␣this␣is␣a␣multi-module␣method␣call,␣the␣return␣value␣is
implemented␣as␣a␣C<CPANPLUS::Backend::RV>␣object.␣Please␣consult
that␣module's␣documentation␣on␣how␣to␣interpret␣the␣return␣value.

=head2␣$backend_rv␣=␣$cb->files(␣modules␣=>␣\@mods␣)

Returns␣a␣list␣of␣files␣used␣by␣these␣modules␣if␣they␣are␣installed.
C<@mods>␣can␣be␣a␣list␣of␣distribution␣names,␣module␣names␣or␣module
objects--basically␣anything␣that␣L<parse_module>␣can␣understand.

See␣the␣equivalent␣method␣in␣C<CPANPLUS::Module>␣for␣details␣on
other␣options␣you␣can␣pass.

Since␣this␣is␣a␣multi-module␣method␣call,␣the␣return␣value␣is
implemented␣as␣a␣C<CPANPLUS::Backend::RV>␣object.␣Please␣consult
that␣module's␣documentation␣on␣how␣to␣interpret␣the␣return␣value.

=head2␣$backend_rv␣=␣$cb->distributions(␣modules␣=>␣\@mods␣)

Returns␣a␣list␣of␣module␣objects␣representing␣all␣releases␣for␣this
module␣on␣success.
C<@mods>␣can␣be␣a␣list␣of␣distribution␣names,␣module␣names␣or␣module
objects,␣basically␣anything␣that␣L<parse_module>␣can␣understand.

See␣the␣equivalent␣method␣in␣C<CPANPLUS::Module>␣for␣details␣on
other␣options␣you␣can␣pass.

Since␣this␣is␣a␣multi-module␣method␣call,␣the␣return␣value␣is
implemented␣as␣a␣C<CPANPLUS::Backend::RV>␣object.␣Please␣consult
that␣module's␣documentation␣on␣how␣to␣interpret␣the␣return␣value.

=cut
----------
Range: (5860385,5862594) (2209)
=pod

=head1␣NAME

CPANPLUS::Internals::Extract

=head1␣SYNOPSIS

␣␣␣␣###␣for␣source␣files␣###
␣␣␣␣$self->_gunzip(␣file␣=>␣'foo.gz',␣output␣=>␣'blah.txt'␣);
␣␣␣␣
␣␣␣␣###␣for␣modules/packages␣###
␣␣␣␣$dir␣=␣$self->_extract(␣module␣␣␣␣␣␣=>␣$modobj,␣
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣extractdir␣␣=>␣'/some/where'␣);

=head1␣DESCRIPTION

CPANPLUS::Internals::Extract␣extracts␣compressed␣files␣for␣CPANPLUS.
It␣can␣do␣this␣by␣either␣a␣pure␣perl␣solution␣(preferred)␣with␣the␣
use␣of␣C<Archive::Tar>␣and␣C<Compress::Zlib>,␣or␣with␣binaries,␣like
C<gzip>␣and␣C<tar>.
␣
The␣flow␣looks␣like␣this:

␣␣␣␣$cb->_extract
␣␣␣␣␣␣␣␣Delegate␣to␣Archive::Extract
␣
=head1␣METHODS

=head2␣$dir␣=␣_extract(␣module␣=>␣$modobj,␣[perl␣=>␣'/path/to/perl',␣extractdir␣=>␣'/path/to/extract/to',␣prefer_bin␣=>␣BOOL,␣verbose␣=>␣BOOL,␣force␣=>␣BOOL]␣)

C<_extract>␣will␣take␣a␣module␣object␣and␣extract␣it␣to␣C<extractdir>
if␣provided,␣or␣the␣default␣location␣which␣is␣obtained␣from␣your␣
config.

The␣file␣name␣is␣obtained␣by␣looking␣at␣C<<␣$modobj->status->fetch␣>>
and␣will␣be␣parsed␣to␣see␣if␣it's␣a␣tar␣or␣zip␣archive.

If␣it's␣a␣zip␣archive,␣C<__unzip>␣will␣be␣called,␣otherwise␣C<__untar>
will␣be␣called.␣In␣the␣unlikely␣event␣the␣file␣is␣of␣neither␣format,
an␣error␣will␣be␣thrown.

C<_extract>␣takes␣the␣following␣options:

=over␣4

=item␣module

A␣C<CPANPLUS::Module>␣object.␣This␣is␣required.

=item␣extractdir

The␣directory␣to␣extract␣the␣archive␣to.␣By␣default␣this␣looks␣
something␣like:
␣␣␣␣/CPANPLUS_BASE/PERL_VERSION/BUILD/MODULE_NAME

=item␣prefer_bin

A␣flag␣indicating␣whether␣you␣prefer␣a␣pure␣perl␣solution,␣ie
C<Archive::Tar>␣or␣C<Archive::Zip>␣respectively,␣or␣a␣binary␣solution
like␣C<unzip>␣and␣C<tar>.

=item␣perl

The␣path␣to␣the␣perl␣executable␣to␣use␣for␣any␣perl␣calls.␣Also␣used
to␣determine␣the␣build␣version␣directory␣for␣extraction.

=item␣verbose

Specifies␣whether␣to␣be␣verbose␣or␣not.␣Defaults␣to␣your␣corresponding
config␣entry.

=item␣force

Specifies␣whether␣to␣force␣the␣extraction␣or␣not.␣Defaults␣to␣your
corresponding␣config␣entry.

=back

All␣other␣options␣are␣passed␣on␣verbatim␣to␣C<__unzip>␣or␣C<__untar>.

Returns␣the␣directory␣the␣file␣was␣extracted␣to␣on␣success␣and␣false
on␣failure.

=cut
----------
Range: (5981903,5984723) (2820)
}

=head1␣STATUS␣ACCESSORS

C<CPANPLUS>␣caches␣a␣lot␣of␣results␣from␣method␣calls␣and␣saves␣data
it␣collected␣along␣the␣road␣for␣later␣reuse.

C<CPANPLUS>␣uses␣this␣internally,␣but␣it␣is␣also␣available␣for␣the␣end
user.␣You␣can␣get␣a␣status␣object␣by␣calling:

␣␣␣␣$modobj->status

You␣can␣then␣query␣the␣object␣as␣follows:

=over␣4

=item␣installer_type

The␣installer␣type␣used␣for␣this␣distribution.␣Will␣be␣one␣of
'makemaker'␣or␣'build'.␣This␣determines␣whether␣C<CPANPLUS::Dist::MM>
or␣C<CPANPLUS::Dist::Build>␣will␣be␣used␣to␣build␣this␣distribution.

=item␣dist_cpan

The␣dist␣object␣used␣to␣do␣the␣CPAN-side␣of␣the␣installation.␣Either
a␣C<CPANPLUS::Dist::MM>␣or␣C<CPANPLUS::Dist::Build>␣object.

=item␣dist

The␣custom␣dist␣object␣used␣to␣do␣the␣operating␣specific␣side␣of␣the
installation,␣if␣you've␣chosen␣to␣use␣this.␣For␣example,␣if␣you've
chosen␣to␣install␣using␣the␣C<ports>␣format,␣this␣may␣be␣a
C<CPANPLUS::Dist::Ports>␣object.

Undefined␣if␣you␣didn't␣specify␣a␣separate␣format␣to␣install␣through.

=item␣prereqs␣|␣requires

A␣hashref␣of␣prereqs␣this␣distribution␣was␣found␣to␣have.␣Will␣look
something␣like␣this:

␣␣␣␣{␣Carp␣␣=>␣0.01,␣strict␣=>␣0␣}

Might␣be␣undefined␣if␣the␣distribution␣didn't␣have␣any␣prerequisites.

=item␣configure_requires

Like␣prereqs,␣but␣these␣are␣necessary␣to␣be␣installed␣before␣the
build␣process␣can␣even␣begin.

=item␣signature

Flag␣indicating,␣if␣a␣signature␣check␣was␣done,␣whether␣it␣was␣OK␣or
not.

=item␣extract

The␣directory␣this␣distribution␣was␣extracted␣to.

=item␣fetch

The␣location␣this␣distribution␣was␣fetched␣to.

=item␣readme

The␣text␣of␣this␣distributions␣README␣file.

=item␣uninstall

Flag␣indicating␣if␣an␣uninstall␣call␣was␣done␣successfully.

=item␣created

Flag␣indicating␣if␣the␣C<create>␣call␣to␣your␣dist␣object␣was␣done
successfully.

=item␣installed

Flag␣indicating␣if␣the␣C<install>␣call␣to␣your␣dist␣object␣was␣done
successfully.

=item␣checksums

The␣location␣of␣this␣distributions␣CHECKSUMS␣file.

=item␣checksum_ok

Flag␣indicating␣if␣the␣checksums␣check␣was␣done␣successfully.

=item␣checksum_value

The␣checksum␣value␣this␣distribution␣is␣expected␣to␣have

=back

=head1␣METHODS

=head2␣$self␣=␣CPANPLUS::Module->new(␣OPTIONS␣)

This␣method␣returns␣a␣C<CPANPLUS::Module>␣object.␣Normal␣users
should␣never␣call␣this␣method␣directly,␣but␣instead␣use␣the
C<CPANPLUS::Backend>␣to␣obtain␣module␣objects.

This␣example␣illustrates␣a␣C<new()>␣call␣with␣all␣required␣arguments:

␣␣␣␣␣␣␣␣CPANPLUS::Module->new(
␣␣␣␣␣␣␣␣␣␣␣␣module␣␣=>␣'Foo',
␣␣␣␣␣␣␣␣␣␣␣␣path␣␣␣␣=>␣'authors/id/A/AA/AAA',
␣␣␣␣␣␣␣␣␣␣␣␣package␣=>␣'Foo-1.0.tgz',
␣␣␣␣␣␣␣␣␣␣␣␣author␣␣=>␣$author_object,
␣␣␣␣␣␣␣␣␣␣␣␣_id␣␣␣␣␣=>␣INTERNALS_OBJECT_ID,
␣␣␣␣␣␣␣␣);

Every␣accessor␣is␣also␣a␣valid␣option␣to␣pass␣to␣C<new>.

Returns␣a␣module␣object␣on␣success␣and␣false␣on␣failure.

=cut
----------
Range: (6042168,6066889) (24721)
=head1␣NAME

Memoize␣-␣Make␣functions␣faster␣by␣trading␣space␣for␣time

=head1␣SYNOPSIS

␣␣␣␣␣␣␣␣#␣This␣is␣the␣documentation␣for␣Memoize␣1.01
	use␣Memoize;
	memoize('slow_function');
	slow_function(arguments);␣␣␣␣#␣Is␣faster␣than␣it␣was␣before


This␣is␣normally␣all␣you␣need␣to␣know.␣␣However,␣many␣options␣are␣available:

	memoize(function,␣options...);

Options␣include:

	NORMALIZER␣=>␣function
	INSTALL␣=>␣new_name

	SCALAR_CACHE␣=>␣'MEMORY'
␣␣␣␣␣␣␣␣SCALAR_CACHE␣=>␣['HASH',␣\%cache_hash␣]
	SCALAR_CACHE␣=>␣'FAULT'
	SCALAR_CACHE␣=>␣'MERGE'

	LIST_CACHE␣=>␣'MEMORY'
␣␣␣␣␣␣␣␣LIST_CACHE␣=>␣['HASH',␣\%cache_hash␣]
	LIST_CACHE␣=>␣'FAULT'
	LIST_CACHE␣=>␣'MERGE'

=head1␣DESCRIPTION

`Memoizing'␣a␣function␣makes␣it␣faster␣by␣trading␣space␣for␣time.␣␣It
does␣this␣by␣caching␣the␣return␣values␣of␣the␣function␣in␣a␣table.
If␣you␣call␣the␣function␣again␣with␣the␣same␣arguments,␣C<memoize>
jumps␣in␣and␣gives␣you␣the␣value␣out␣of␣the␣table,␣instead␣of␣letting
the␣function␣compute␣the␣value␣all␣over␣again.

Here␣is␣an␣extreme␣example.␣␣Consider␣the␣Fibonacci␣sequence,␣defined
by␣the␣following␣function:

	#␣Compute␣Fibonacci␣numbers
	sub␣fib␣{
	␣␣my␣$n␣=␣shift;
	␣␣return␣$n␣if␣$n␣<␣2;
	␣␣fib($n-1)␣+␣fib($n-2);
	}

This␣function␣is␣very␣slow.␣␣Why?␣␣To␣compute␣fib(14),␣it␣first␣wants
to␣compute␣fib(13)␣and␣fib(12),␣and␣add␣the␣results.␣␣But␣to␣compute
fib(13),␣it␣first␣has␣to␣compute␣fib(12)␣and␣fib(11),␣and␣then␣it
comes␣back␣and␣computes␣fib(12)␣all␣over␣again␣even␣though␣the␣answer
is␣the␣same.␣␣And␣both␣of␣the␣times␣that␣it␣wants␣to␣compute␣fib(12),
it␣has␣to␣compute␣fib(11)␣from␣scratch,␣and␣then␣it␣has␣to␣do␣it
again␣each␣time␣it␣wants␣to␣compute␣fib(13).␣␣This␣function␣does␣so
much␣recomputing␣of␣old␣results␣that␣it␣takes␣a␣really␣long␣time␣to
run---fib(14)␣makes␣1,200␣extra␣recursive␣calls␣to␣itself,␣to␣compute
and␣recompute␣things␣that␣it␣already␣computed.

This␣function␣is␣a␣good␣candidate␣for␣memoization.␣␣If␣you␣memoize␣the
`fib'␣function␣above,␣it␣will␣compute␣fib(14)␣exactly␣once,␣the␣first
time␣it␣needs␣to,␣and␣then␣save␣the␣result␣in␣a␣table.␣␣Then␣if␣you
ask␣for␣fib(14)␣again,␣it␣gives␣you␣the␣result␣out␣of␣the␣table.
While␣computing␣fib(14),␣instead␣of␣computing␣fib(12)␣twice,␣it␣does
it␣once;␣the␣second␣time␣it␣needs␣the␣value␣it␣gets␣it␣from␣the␣table.
It␣doesn't␣compute␣fib(11)␣four␣times;␣it␣computes␣it␣once,␣getting␣it
from␣the␣table␣the␣next␣three␣times.␣␣Instead␣of␣making␣1,200
recursive␣calls␣to␣`fib',␣it␣makes␣15.␣␣This␣makes␣the␣function␣about
150␣times␣faster.

You␣could␣do␣the␣memoization␣yourself,␣by␣rewriting␣the␣function,␣like
this:

	#␣Compute␣Fibonacci␣numbers,␣memoized␣version
	{␣my␣@fib;
␣␣	␣␣sub␣fib␣{
	␣␣␣␣my␣$n␣=␣shift;
	␣␣␣␣return␣$fib[$n]␣if␣defined␣$fib[$n];
	␣␣␣␣return␣$fib[$n]␣=␣$n␣if␣$n␣<␣2;
	␣␣␣␣$fib[$n]␣=␣fib($n-1)␣+␣fib($n-2);
	␣␣}
␣␣␣␣␣␣␣␣}

Or␣you␣could␣use␣this␣module,␣like␣this:

	use␣Memoize;
	memoize('fib');

	#␣Rest␣of␣the␣fib␣function␣just␣like␣the␣original␣version.

This␣makes␣it␣easy␣to␣turn␣memoizing␣on␣and␣off.

Here's␣an␣even␣simpler␣example:␣I␣wrote␣a␣simple␣ray␣tracer;␣the
program␣would␣look␣in␣a␣certain␣direction,␣figure␣out␣what␣it␣was
looking␣at,␣and␣then␣convert␣the␣`color'␣value␣(typically␣a␣string
like␣`red')␣of␣that␣object␣to␣a␣red,␣green,␣and␣blue␣pixel␣value,␣like
this:

␣␣␣␣for␣($direction␣=␣0;␣$direction␣<␣300;␣$direction++)␣{
␣␣␣␣␣␣#␣Figure␣out␣which␣object␣is␣in␣direction␣$direction
␣␣␣␣␣␣$color␣=␣$object->{color};
␣␣␣␣␣␣($r,␣$g,␣$b)␣=␣@{&ColorToRGB($color)};
␣␣␣␣␣␣...
␣␣␣␣}

Since␣there␣are␣relatively␣few␣objects␣in␣a␣picture,␣there␣are␣only␣a
few␣colors,␣which␣get␣looked␣up␣over␣and␣over␣again.␣␣Memoizing
C<ColorToRGB>␣sped␣up␣the␣program␣by␣several␣percent.

=head1␣DETAILS

This␣module␣exports␣exactly␣one␣function,␣C<memoize>.␣␣The␣rest␣of␣the
functions␣in␣this␣package␣are␣None␣of␣Your␣Business.

You␣should␣say

	memoize(function)

where␣C<function>␣is␣the␣name␣of␣the␣function␣you␣want␣to␣memoize,␣or
a␣reference␣to␣it.␣␣C<memoize>␣returns␣a␣reference␣to␣the␣new,
memoized␣version␣of␣the␣function,␣or␣C<undef>␣on␣a␣non-fatal␣error.
At␣present,␣there␣are␣no␣non-fatal␣errors,␣but␣there␣might␣be␣some␣in
the␣future.

If␣C<function>␣was␣the␣name␣of␣a␣function,␣then␣C<memoize>␣hides␣the
old␣version␣and␣installs␣the␣new␣memoized␣version␣under␣the␣old␣name,
so␣that␣C<&function(...)>␣actually␣invokes␣the␣memoized␣version.

=head1␣OPTIONS

There␣are␣some␣optional␣options␣you␣can␣pass␣to␣C<memoize>␣to␣change
the␣way␣it␣behaves␣a␣little.␣␣To␣supply␣options,␣invoke␣C<memoize>
like␣this:

	memoize(function,␣NORMALIZER␣=>␣function,
			␣␣INSTALL␣=>␣newname,
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣SCALAR_CACHE␣=>␣option,
	␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣LIST_CACHE␣=>␣option
			␣);

Each␣of␣these␣options␣is␣optional;␣you␣can␣include␣some,␣all,␣or␣none
of␣them.

=head2␣INSTALL

If␣you␣supply␣a␣function␣name␣with␣C<INSTALL>,␣memoize␣will␣install
the␣new,␣memoized␣version␣of␣the␣function␣under␣the␣name␣you␣give.
For␣example,␣

	memoize('fib',␣INSTALL␣=>␣'fastfib')

installs␣the␣memoized␣version␣of␣C<fib>␣as␣C<fastfib>;␣without␣the
C<INSTALL>␣option␣it␣would␣have␣replaced␣the␣old␣C<fib>␣with␣the
memoized␣version.␣␣

To␣prevent␣C<memoize>␣from␣installing␣the␣memoized␣version␣anywhere,␣use
C<INSTALL␣=E<gt>␣undef>.

=head2␣NORMALIZER

Suppose␣your␣function␣looks␣like␣this:

	#␣Typical␣call:␣f('aha!',␣A␣=>␣11,␣B␣=>␣12);
	sub␣f␣{
	␣␣my␣$a␣=␣shift;
	␣␣my␣%hash␣=␣@_;
	␣␣$hash{B}␣||=␣2;␣␣#␣B␣defaults␣to␣2
	␣␣$hash{C}␣||=␣7;␣␣#␣C␣defaults␣to␣7

	␣␣#␣Do␣something␣with␣$a,␣%hash
	}

Now,␣the␣following␣calls␣to␣your␣function␣are␣all␣completely␣equivalent:

	f(OUCH);
	f(OUCH,␣B␣=>␣2);
	f(OUCH,␣C␣=>␣7);
	f(OUCH,␣B␣=>␣2,␣C␣=>␣7);
	f(OUCH,␣C␣=>␣7,␣B␣=>␣2);
	(etc.)

However,␣unless␣you␣tell␣C<Memoize>␣that␣these␣calls␣are␣equivalent,
it␣will␣not␣know␣that,␣and␣it␣will␣compute␣the␣values␣for␣these
invocations␣of␣your␣function␣separately,␣and␣store␣them␣separately.

To␣prevent␣this,␣supply␣a␣C<NORMALIZER>␣function␣that␣turns␣the
program␣arguments␣into␣a␣string␣in␣a␣way␣that␣equivalent␣arguments
turn␣into␣the␣same␣string.␣␣A␣C<NORMALIZER>␣function␣for␣C<f>␣above
might␣look␣like␣this:

	sub␣normalize_f␣{
	␣␣my␣$a␣=␣shift;
	␣␣my␣%hash␣=␣@_;
	␣␣$hash{B}␣||=␣2;
	␣␣$hash{C}␣||=␣7;

	␣␣join(',',␣$a,␣map␣($_␣=>␣$hash{$_})␣sort␣keys␣%hash);
	}

Each␣of␣the␣argument␣lists␣above␣comes␣out␣of␣the␣C<normalize_f>
function␣looking␣exactly␣the␣same,␣like␣this:

	OUCH,B,2,C,7

You␣would␣tell␣C<Memoize>␣to␣use␣this␣normalizer␣this␣way:

	memoize('f',␣NORMALIZER␣=>␣'normalize_f');

C<memoize>␣knows␣that␣if␣the␣normalized␣version␣of␣the␣arguments␣is
the␣same␣for␣two␣argument␣lists,␣then␣it␣can␣safely␣look␣up␣the␣value
that␣it␣computed␣for␣one␣argument␣list␣and␣return␣it␣as␣the␣result␣of
calling␣the␣function␣with␣the␣other␣argument␣list,␣even␣if␣the
argument␣lists␣look␣different.

The␣default␣normalizer␣just␣concatenates␣the␣arguments␣with␣character
28␣in␣between.␣␣(In␣ASCII,␣this␣is␣called␣FS␣or␣control-\.)␣␣This
always␣works␣correctly␣for␣functions␣with␣only␣one␣string␣argument,
and␣also␣when␣the␣arguments␣never␣contain␣character␣28.␣␣However,␣it
can␣confuse␣certain␣argument␣lists:

	normalizer("a\034",␣"b")
	normalizer("a",␣"\034b")
	normalizer("a\034\034b")

for␣example.

Since␣hash␣keys␣are␣strings,␣the␣default␣normalizer␣will␣not
distinguish␣between␣C<undef>␣and␣the␣empty␣string.␣␣It␣also␣won't␣work
when␣the␣function's␣arguments␣are␣references.␣␣For␣example,␣consider␣a
function␣C<g>␣which␣gets␣two␣arguments:␣A␣number,␣and␣a␣reference␣to
an␣array␣of␣numbers:

	g(13,␣[1,2,3,4,5,6,7]);

The␣default␣normalizer␣will␣turn␣this␣into␣something␣like
C<"13\034ARRAY(0x436c1f)">.␣␣That␣would␣be␣all␣right,␣except␣that␣a
subsequent␣array␣of␣numbers␣might␣be␣stored␣at␣a␣different␣location
even␣though␣it␣contains␣the␣same␣data.␣␣If␣this␣happens,␣C<Memoize>
will␣think␣that␣the␣arguments␣are␣different,␣even␣though␣they␣are
equivalent.␣␣In␣this␣case,␣a␣normalizer␣like␣this␣is␣appropriate:

	sub␣normalize␣{␣join␣'␣',␣$_[0],␣@{$_[1]}␣}

For␣the␣example␣above,␣this␣produces␣the␣key␣"13␣1␣2␣3␣4␣5␣6␣7".

Another␣use␣for␣normalizers␣is␣when␣the␣function␣depends␣on␣data␣other
than␣those␣in␣its␣arguments.␣␣Suppose␣you␣have␣a␣function␣which
returns␣a␣value␣which␣depends␣on␣the␣current␣hour␣of␣the␣day:

	sub␣on_duty␣{
␣␣␣␣␣␣␣␣␣␣my␣($problem_type)␣=␣@_;
	␣␣my␣$hour␣=␣(localtime)[2];
␣␣␣␣␣␣␣␣␣␣open␣my␣$fh,␣"$DIR/$problem_type"␣or␣die...;
␣␣␣␣␣␣␣␣␣␣my␣$line;
␣␣␣␣␣␣␣␣␣␣while␣($hour--␣>␣0)
␣␣␣␣␣␣␣␣␣␣␣␣$line␣=␣<$fh>;
␣␣␣␣␣␣␣␣␣␣}␣
	␣␣return␣$line;
	}

At␣10:23,␣this␣function␣generates␣the␣10th␣line␣of␣a␣data␣file;␣at
3:45␣PM␣it␣generates␣the␣15th␣line␣instead.␣␣By␣default,␣C<Memoize>
will␣only␣see␣the␣$problem_type␣argument.␣␣To␣fix␣this,␣include␣the
current␣hour␣in␣the␣normalizer:

␣␣␣␣␣␣␣␣sub␣normalize␣{␣join␣'␣',␣(localtime)[2],␣@_␣}

The␣calling␣context␣of␣the␣function␣(scalar␣or␣list␣context)␣is
propagated␣to␣the␣normalizer.␣␣This␣means␣that␣if␣the␣memoized
function␣will␣treat␣its␣arguments␣differently␣in␣list␣context␣than␣it
would␣in␣scalar␣context,␣you␣can␣have␣the␣normalizer␣function␣select
its␣behavior␣based␣on␣the␣results␣of␣C<wantarray>.␣␣Even␣if␣called␣in
a␣list␣context,␣a␣normalizer␣should␣still␣return␣a␣single␣string.

=head2␣C<SCALAR_CACHE>,␣C<LIST_CACHE>

Normally,␣C<Memoize>␣caches␣your␣function's␣return␣values␣into␣an
ordinary␣Perl␣hash␣variable.␣␣However,␣you␣might␣like␣to␣have␣the
values␣cached␣on␣the␣disk,␣so␣that␣they␣persist␣from␣one␣run␣of␣your
program␣to␣the␣next,␣or␣you␣might␣like␣to␣associate␣some␣other
interesting␣semantics␣with␣the␣cached␣values.

There's␣a␣slight␣complication␣under␣the␣hood␣of␣C<Memoize>:␣There␣are
actually␣I<two>␣caches,␣one␣for␣scalar␣values␣and␣one␣for␣list␣values.
When␣your␣function␣is␣called␣in␣scalar␣context,␣its␣return␣value␣is
cached␣in␣one␣hash,␣and␣when␣your␣function␣is␣called␣in␣list␣context,
its␣value␣is␣cached␣in␣the␣other␣hash.␣␣You␣can␣control␣the␣caching
behavior␣of␣both␣contexts␣independently␣with␣these␣options.

The␣argument␣to␣C<LIST_CACHE>␣or␣C<SCALAR_CACHE>␣must␣either␣be␣one␣of
the␣following␣four␣strings:

	MEMORY
	FAULT
	MERGE
␣␣␣␣␣␣␣␣HASH

or␣else␣it␣must␣be␣a␣reference␣to␣a␣list␣whose␣first␣element␣is␣one␣of
these␣four␣strings,␣such␣as␣C<[HASH,␣arguments...]>.

=over␣4

=item␣C<MEMORY>

C<MEMORY>␣means␣that␣return␣values␣from␣the␣function␣will␣be␣cached␣in
an␣ordinary␣Perl␣hash␣variable.␣␣The␣hash␣variable␣will␣not␣persist
after␣the␣program␣exits.␣␣This␣is␣the␣default.

=item␣C<HASH>

C<HASH>␣allows␣you␣to␣specify␣that␣a␣particular␣hash␣that␣you␣supply
will␣be␣used␣as␣the␣cache.␣␣You␣can␣tie␣this␣hash␣beforehand␣to␣give
it␣any␣behavior␣you␣want.

A␣tied␣hash␣can␣have␣any␣semantics␣at␣all.␣␣It␣is␣typically␣tied␣to␣an
on-disk␣database,␣so␣that␣cached␣values␣are␣stored␣in␣the␣database␣and
retrieved␣from␣it␣again␣when␣needed,␣and␣the␣disk␣file␣typically
persists␣after␣your␣program␣has␣exited.␣␣See␣C<perltie>␣for␣more
complete␣details␣about␣C<tie>.

A␣typical␣example␣is:

␣␣␣␣␣␣␣␣use␣DB_File;
␣␣␣␣␣␣␣␣tie␣my␣%cache␣=>␣'DB_File',␣$filename,␣O_RDWR|O_CREAT,␣0666;
␣␣␣␣␣␣␣␣memoize␣'function',␣SCALAR_CACHE␣=>␣[HASH␣=>␣\%cache];

This␣has␣the␣effect␣of␣storing␣the␣cache␣in␣a␣C<DB_File>␣database
whose␣name␣is␣in␣C<$filename>.␣␣The␣cache␣will␣persist␣after␣the
program␣has␣exited.␣␣Next␣time␣the␣program␣runs,␣it␣will␣find␣the
cache␣already␣populated␣from␣the␣previous␣run␣of␣the␣program.␣␣Or␣you
can␣forcibly␣populate␣the␣cache␣by␣constructing␣a␣batch␣program␣that
runs␣in␣the␣background␣and␣populates␣the␣cache␣file.␣␣Then␣when␣you
come␣to␣run␣your␣real␣program␣the␣memoized␣function␣will␣be␣fast
because␣all␣its␣results␣have␣been␣precomputed.

=item␣C<TIE>

This␣option␣is␣no␣longer␣supported.␣␣It␣is␣still␣documented␣only␣to
aid␣in␣the␣debugging␣of␣old␣programs␣that␣use␣it.␣␣Old␣programs␣should
be␣converted␣to␣use␣the␣C<HASH>␣option␣instead.

␣␣␣␣␣␣␣␣memoize␣...␣[TIE,␣PACKAGE,␣ARGS...]

is␣merely␣a␣shortcut␣for

␣␣␣␣␣␣␣␣require␣PACKAGE;
	{␣my␣%cache;
␣␣␣␣␣␣␣␣␣␣tie␣%cache,␣PACKAGE,␣ARGS...;
	}
␣␣␣␣␣␣␣␣memoize␣...␣[HASH␣=>␣\%cache];

=item␣C<FAULT>

C<FAULT>␣means␣that␣you␣never␣expect␣to␣call␣the␣function␣in␣scalar
(or␣list)␣context,␣and␣that␣if␣C<Memoize>␣detects␣such␣a␣call,␣it
should␣abort␣the␣program.␣␣The␣error␣message␣is␣one␣of

	`foo'␣function␣called␣in␣forbidden␣list␣context␣at␣line␣...
	`foo'␣function␣called␣in␣forbidden␣scalar␣context␣at␣line␣...

=item␣C<MERGE>

C<MERGE>␣normally␣means␣the␣function␣does␣not␣distinguish␣between␣list
and␣sclar␣context,␣and␣that␣return␣values␣in␣both␣contexts␣should␣be
stored␣together.␣␣C<LIST_CACHE␣=E<gt>␣MERGE>␣means␣that␣list␣context
return␣values␣should␣be␣stored␣in␣the␣same␣hash␣that␣is␣used␣for
scalar␣context␣returns,␣and␣C<SCALAR_CACHE␣=E<gt>␣MERGE>␣means␣the
same,␣mutatis␣mutandis.␣␣It␣is␣an␣error␣to␣specify␣C<MERGE>␣for␣both,
but␣it␣probably␣does␣something␣useful.

Consider␣this␣function:

	sub␣pi␣{␣3;␣}

Normally,␣the␣following␣code␣will␣result␣in␣two␣calls␣to␣C<pi>:

␣␣␣␣$x␣=␣pi();
␣␣␣␣($y)␣=␣pi();
␣␣␣␣$z␣=␣pi();

The␣first␣call␣caches␣the␣value␣C<3>␣in␣the␣scalar␣cache;␣the␣second
caches␣the␣list␣C<(3)>␣in␣the␣list␣cache.␣␣The␣third␣call␣doesn't␣call
the␣real␣C<pi>␣function;␣it␣gets␣the␣value␣from␣the␣scalar␣cache.

Obviously,␣the␣second␣call␣to␣C<pi>␣is␣a␣waste␣of␣time,␣and␣storing
its␣return␣value␣is␣a␣waste␣of␣space.␣␣Specifying␣C<LIST_CACHE␣=E<gt>
MERGE>␣will␣make␣C<memoize>␣use␣the␣same␣cache␣for␣scalar␣and␣list
context␣return␣values,␣so␣that␣the␣second␣call␣uses␣the␣scalar␣cache
that␣was␣populated␣by␣the␣first␣call.␣␣C<pi>␣ends␣up␣being␣called␣only
once,␣and␣both␣subsequent␣calls␣return␣C<3>␣from␣the␣cache,␣regardless
of␣the␣calling␣context.

Another␣use␣for␣C<MERGE>␣is␣when␣you␣want␣both␣kinds␣of␣return␣values
stored␣in␣the␣same␣disk␣file;␣this␣saves␣you␣from␣having␣to␣deal␣with
two␣disk␣files␣instead␣of␣one.␣␣You␣can␣use␣a␣normalizer␣function␣to
keep␣the␣two␣sets␣of␣return␣values␣separate.␣␣For␣example:

␣␣␣␣␣␣␣␣tie␣my␣%cache␣=>␣'MLDBM',␣'DB_File',␣$filename,␣...;

	memoize␣'myfunc',
	␣␣NORMALIZER␣=>␣'n',
	␣␣SCALAR_CACHE␣=>␣[HASH␣=>␣\%cache],
	␣␣LIST_CACHE␣=>␣MERGE,
	;

	sub␣n␣{
	␣␣my␣$context␣=␣wantarray()␣?␣'L'␣:␣'S';
	␣␣#␣...␣now␣compute␣the␣hash␣key␣from␣the␣arguments␣...
	␣␣$hashkey␣=␣"$context:$hashkey";
	}

This␣normalizer␣function␣will␣store␣scalar␣context␣return␣values␣in
the␣disk␣file␣under␣keys␣that␣begin␣with␣C<S:>,␣and␣list␣context
return␣values␣under␣keys␣that␣begin␣with␣C<L:>.

=back

=head1␣OTHER␣FACILITIES

=head2␣C<unmemoize>

There's␣an␣C<unmemoize>␣function␣that␣you␣can␣import␣if␣you␣want␣to.
Why␣would␣you␣want␣to?␣␣Here's␣an␣example:␣Suppose␣you␣have␣your␣cache
tied␣to␣a␣DBM␣file,␣and␣you␣want␣to␣make␣sure␣that␣the␣cache␣is
written␣out␣to␣disk␣if␣someone␣interrupts␣the␣program.␣␣If␣the␣program
exits␣normally,␣this␣will␣happen␣anyway,␣but␣if␣someone␣types
control-C␣or␣something␣then␣the␣program␣will␣terminate␣immediately
without␣synchronizing␣the␣database.␣␣So␣what␣you␣can␣do␣instead␣is

␣␣␣␣$SIG{INT}␣=␣sub␣{␣unmemoize␣'function'␣};

C<unmemoize>␣accepts␣a␣reference␣to,␣or␣the␣name␣of␣a␣previously
memoized␣function,␣and␣undoes␣whatever␣it␣did␣to␣provide␣the␣memoized
version␣in␣the␣first␣place,␣including␣making␣the␣name␣refer␣to␣the
unmemoized␣version␣if␣appropriate.␣␣It␣returns␣a␣reference␣to␣the
unmemoized␣version␣of␣the␣function.

If␣you␣ask␣it␣to␣unmemoize␣a␣function␣that␣was␣never␣memoized,␣it
croaks.

=head2␣C<flush_cache>

C<flush_cache(function)>␣will␣flush␣out␣the␣caches,␣discarding␣I<all>
the␣cached␣data.␣␣The␣argument␣may␣be␣a␣function␣name␣or␣a␣reference
to␣a␣function.␣␣For␣finer␣control␣over␣when␣data␣is␣discarded␣or
expired,␣see␣the␣documentation␣for␣C<Memoize::Expire>,␣included␣in
this␣package.

Note␣that␣if␣the␣cache␣is␣a␣tied␣hash,␣C<flush_cache>␣will␣attempt␣to
invoke␣the␣C<CLEAR>␣method␣on␣the␣hash.␣␣If␣there␣is␣no␣C<CLEAR>
method,␣this␣will␣cause␣a␣run-time␣error.

An␣alternative␣approach␣to␣cache␣flushing␣is␣to␣use␣the␣C<HASH>␣option
(see␣above)␣to␣request␣that␣C<Memoize>␣use␣a␣particular␣hash␣variable
as␣its␣cache.␣␣Then␣you␣can␣examine␣or␣modify␣the␣hash␣at␣any␣time␣in
any␣way␣you␣desire.␣␣You␣may␣flush␣the␣cache␣by␣using␣C<%hash␣=␣()>.␣

=head1␣CAVEATS

Memoization␣is␣not␣a␣cure-all:

=over␣4

=item␣*

Do␣not␣memoize␣a␣function␣whose␣behavior␣depends␣on␣program
state␣other␣than␣its␣own␣arguments,␣such␣as␣global␣variables,␣the␣time
of␣day,␣or␣file␣input.␣␣These␣functions␣will␣not␣produce␣correct
results␣when␣memoized.␣␣For␣a␣particularly␣easy␣example:

	sub␣f␣{
	␣␣time;
	}

This␣function␣takes␣no␣arguments,␣and␣as␣far␣as␣C<Memoize>␣is
concerned,␣it␣always␣returns␣the␣same␣result.␣␣C<Memoize>␣is␣wrong,␣of
course,␣and␣the␣memoized␣version␣of␣this␣function␣will␣call␣C<time>␣once
to␣get␣the␣current␣time,␣and␣it␣will␣return␣that␣same␣time
every␣time␣you␣call␣it␣after␣that.

=item␣*

Do␣not␣memoize␣a␣function␣with␣side␣effects.

	sub␣f␣{
	␣␣my␣($a,␣$b)␣=␣@_;
␣␣␣␣␣␣␣␣␣␣my␣$s␣=␣$a␣+␣$b;
	␣␣print␣"$a␣+␣$b␣=␣$s.\n";
	}

This␣function␣accepts␣two␣arguments,␣adds␣them,␣and␣prints␣their␣sum.
Its␣return␣value␣is␣the␣numuber␣of␣characters␣it␣printed,␣but␣you
probably␣didn't␣care␣about␣that.␣␣But␣C<Memoize>␣doesn't␣understand
that.␣␣If␣you␣memoize␣this␣function,␣you␣will␣get␣the␣result␣you
expect␣the␣first␣time␣you␣ask␣it␣to␣print␣the␣sum␣of␣2␣and␣3,␣but
subsequent␣calls␣will␣return␣1␣(the␣return␣value␣of
C<print>)␣without␣actually␣printing␣anything.

=item␣*

Do␣not␣memoize␣a␣function␣that␣returns␣a␣data␣structure␣that␣is
modified␣by␣its␣caller.

Consider␣these␣functions:␣␣C<getusers>␣returns␣a␣list␣of␣users␣somehow,
and␣then␣C<main>␣throws␣away␣the␣first␣user␣on␣the␣list␣and␣prints␣the
rest:

	sub␣main␣{
	␣␣my␣$userlist␣=␣getusers();
	␣␣shift␣@$userlist;
	␣␣foreach␣$u␣(@$userlist)␣{
	␣␣␣␣print␣"User␣$u\n";
	␣␣}
	}

	sub␣getusers␣{
	␣␣my␣@users;
	␣␣#␣Do␣something␣to␣get␣a␣list␣of␣users;
	␣␣\@users;␣␣#␣Return␣reference␣to␣list.
	}

If␣you␣memoize␣C<getusers>␣here,␣it␣will␣work␣right␣exactly␣once.␣␣The
reference␣to␣the␣users␣list␣will␣be␣stored␣in␣the␣memo␣table.␣␣C<main>
will␣discard␣the␣first␣element␣from␣the␣referenced␣list.␣␣The␣next
time␣you␣invoke␣C<main>,␣C<Memoize>␣will␣not␣call␣C<getusers>;␣it␣will
just␣return␣the␣same␣reference␣to␣the␣same␣list␣it␣got␣last␣time.␣␣But
this␣time␣the␣list␣has␣already␣had␣its␣head␣removed;␣C<main>␣will
erroneously␣remove␣another␣element␣from␣it.␣␣The␣list␣will␣get␣shorter
and␣shorter␣every␣time␣you␣call␣C<main>.

Similarly,␣this:

	$u1␣=␣getusers();␣␣␣␣
	$u2␣=␣getusers();␣␣␣␣
	pop␣@$u1;

will␣modify␣$u2␣as␣well␣as␣$u1,␣because␣both␣variables␣are␣references
to␣the␣same␣array.␣␣Had␣C<getusers>␣not␣been␣memoized,␣$u1␣and␣$u2
would␣have␣referred␣to␣different␣arrays.

=item␣*␣

Do␣not␣memoize␣a␣very␣simple␣function.

Recently␣someone␣mentioned␣to␣me␣that␣the␣Memoize␣module␣made␣his
program␣run␣slower␣instead␣of␣faster.␣␣It␣turned␣out␣that␣he␣was
memoizing␣the␣following␣function:

␣␣␣␣sub␣square␣{
␣␣␣␣␣␣$_[0]␣*␣$_[0];
␣␣␣␣}

I␣pointed␣out␣that␣C<Memoize>␣uses␣a␣hash,␣and␣that␣looking␣up␣a
number␣in␣the␣hash␣is␣necessarily␣going␣to␣take␣a␣lot␣longer␣than␣a
single␣multiplication.␣␣There␣really␣is␣no␣way␣to␣speed␣up␣the
C<square>␣function.

Memoization␣is␣not␣magical.

=back

=head1␣PERSISTENT␣CACHE␣SUPPORT

You␣can␣tie␣the␣cache␣tables␣to␣any␣sort␣of␣tied␣hash␣that␣you␣want
to,␣as␣long␣as␣it␣supports␣C<TIEHASH>,␣C<FETCH>,␣C<STORE>,␣and
C<EXISTS>.␣␣For␣example,

␣␣␣␣␣␣␣␣tie␣my␣%cache␣=>␣'GDBM_File',␣$filename,␣O_RDWR|O_CREAT,␣0666;
␣␣␣␣␣␣␣␣memoize␣'function',␣SCALAR_CACHE␣=>␣[HASH␣=>␣\%cache];

works␣just␣fine.␣␣For␣some␣storage␣methods,␣you␣need␣a␣little␣glue.

C<SDBM_File>␣doesn't␣supply␣an␣C<EXISTS>␣method,␣so␣included␣in␣this
package␣is␣a␣glue␣module␣called␣C<Memoize::SDBM_File>␣which␣does
provide␣one.␣␣Use␣this␣instead␣of␣plain␣C<SDBM_File>␣to␣store␣your
cache␣table␣on␣disk␣in␣an␣C<SDBM_File>␣database:

␣␣␣␣␣␣␣␣tie␣my␣%cache␣=>␣'Memoize::SDBM_File',␣$filename,␣O_RDWR|O_CREAT,␣0666;
␣␣␣␣␣␣␣␣memoize␣'function',␣SCALAR_CACHE␣=>␣[HASH␣=>␣\%cache];

C<NDBM_File>␣has␣the␣same␣problem␣and␣the␣same␣solution.␣␣(Use
C<Memoize::NDBM_File␣instead␣of␣plain␣NDBM_File.>)

C<Storable>␣isn't␣a␣tied␣hash␣class␣at␣all.␣␣You␣can␣use␣it␣to␣store␣a
hash␣to␣disk␣and␣retrieve␣it␣again,␣but␣you␣can't␣modify␣the␣hash␣while
it's␣on␣the␣disk.␣␣So␣if␣you␣want␣to␣store␣your␣cache␣table␣in␣a
C<Storable>␣database,␣use␣C<Memoize::Storable>,␣which␣puts␣a␣hashlike
front-end␣onto␣C<Storable>.␣␣The␣hash␣table␣is␣actually␣kept␣in
memory,␣and␣is␣loaded␣from␣your␣C<Storable>␣file␣at␣the␣time␣you
memoize␣the␣function,␣and␣stored␣back␣at␣the␣time␣you␣unmemoize␣the
function␣(or␣when␣your␣program␣exits):

␣␣␣␣␣␣␣␣tie␣my␣%cache␣=>␣'Memoize::Storable',␣$filename;
	memoize␣'function',␣SCALAR_CACHE␣=>␣[HASH␣=>␣\%cache];

␣␣␣␣␣␣␣␣tie␣my␣%cache␣=>␣'Memoize::Storable',␣$filename,␣'nstore';
	memoize␣'function',␣SCALAR_CACHE␣=>␣[HASH␣=>␣\%cache];

Include␣the␣`nstore'␣option␣to␣have␣the␣C<Storable>␣database␣written
in␣`network␣order'.␣␣(See␣L<Storable>␣for␣more␣details␣about␣this.)

The␣C<flush_cache()>␣function␣will␣raise␣a␣run-time␣error␣unless␣the
tied␣package␣provides␣a␣C<CLEAR>␣method.

=head1␣EXPIRATION␣SUPPORT

See␣Memoize::Expire,␣which␣is␣a␣plug-in␣module␣that␣adds␣expiration
functionality␣to␣Memoize.␣␣If␣you␣don't␣like␣the␣kinds␣of␣policies
that␣Memoize::Expire␣implements,␣it␣is␣easy␣to␣write␣your␣own␣plug-in
module␣to␣implement␣whatever␣policy␣you␣desire.␣␣Memoize␣comes␣with
several␣examples.␣␣An␣expiration␣manager␣that␣implements␣a␣LRU␣policy
is␣available␣on␣CPAN␣as␣Memoize::ExpireLRU.

=head1␣BUGS

The␣test␣suite␣is␣much␣better,␣but␣always␣needs␣improvement.

There␣is␣some␣problem␣with␣the␣way␣C<goto␣&f>␣works␣under␣threaded
Perl,␣perhaps␣because␣of␣the␣lexical␣scoping␣of␣C<@_>.␣␣This␣is␣a␣bug
in␣Perl,␣and␣until␣it␣is␣resolved,␣memoized␣functions␣will␣see␣a
slightly␣different␣C<caller()>␣and␣will␣perform␣a␣little␣more␣slowly
on␣threaded␣perls␣than␣unthreaded␣perls.

Some␣versions␣of␣C<DB_File>␣won't␣let␣you␣store␣data␣under␣a␣key␣of
length␣0.␣␣That␣means␣that␣if␣you␣have␣a␣function␣C<f>␣which␣you
memoized␣and␣the␣cache␣is␣in␣a␣C<DB_File>␣database,␣then␣the␣value␣of
C<f()>␣(C<f>␣called␣with␣no␣arguments)␣will␣not␣be␣memoized.␣␣If␣this
is␣a␣big␣problem,␣you␣can␣supply␣a␣normalizer␣function␣that␣prepends
C<"x">␣to␣every␣key.

=head1␣MAILING␣LIST

To␣join␣a␣very␣low-traffic␣mailing␣list␣for␣announcements␣about
C<Memoize>,␣send␣an␣empty␣note␣to␣C<mjd-perl-memoize-request@plover.com>.

=head1␣AUTHOR

Mark-Jason␣Dominus␣(C<mjd-perl-memoize+@plover.com>),␣Plover␣Systems␣co.

See␣the␣C<Memoize.pm>␣Page␣at␣http://www.plover.com/~mjd/perl/Memoize/
for␣news␣and␣upgrades.␣␣Near␣this␣page,␣at
http://www.plover.com/~mjd/perl/MiniMemoize/␣there␣is␣an␣article␣about
memoization␣and␣about␣the␣internals␣of␣Memoize␣that␣appeared␣in␣The
Perl␣Journal,␣issue␣#13.␣␣(This␣article␣is␣also␣included␣in␣the
Memoize␣distribution␣as␣`article.html'.)

The␣author's␣book␣I<Higher␣Order␣Perl>␣(2005,␣ISBN␣1558607013,␣published
by␣Morgan␣Kaufmann)␣discusses␣memoization␣(and␣many␣other␣fascinating
topics)␣in␣tremendous␣detail.␣It␣will␣also␣be␣available␣on-line␣for␣free.
For␣more␣information,␣visit␣http://perl.plover.com/book/␣.

To␣join␣a␣mailing␣list␣for␣announcements␣about␣C<Memoize>,␣send␣an
empty␣message␣to␣C<mjd-perl-memoize-request@plover.com>.␣␣This␣mailing
list␣is␣for␣announcements␣only␣and␣has␣extremely␣low␣traffic---about
two␣messages␣per␣year.

=head1␣COPYRIGHT␣AND␣LICENSE

Copyright␣1998,␣1999,␣2000,␣2001␣␣by␣Mark␣Jason␣Dominus

This␣library␣is␣free␣software;␣you␣may␣redistribute␣it␣and/or␣modify
it␣under␣the␣same␣terms␣as␣Perl␣itself.

=head1␣THANK␣YOU

Many␣thanks␣to␣Jonathan␣Roy␣for␣bug␣reports␣and␣suggestions,␣to
Michael␣Schwern␣for␣other␣bug␣reports␣and␣patches,␣to␣Mike␣Cariaso␣for
helping␣me␣to␣figure␣out␣the␣Right␣Thing␣to␣Do␣About␣Expiration,␣to
Joshua␣Gerth,␣Joshua␣Chamas,␣Jonathan␣Roy␣(again),␣Mark␣D.␣Anderson,
and␣Andrew␣Johnson␣for␣more␣suggestions␣about␣expiration,␣to␣Brent
Powers␣for␣the␣Memoize::ExpireLRU␣module,␣to␣Ariel␣Scolnicov␣for
delightful␣messages␣about␣the␣Fibonacci␣function,␣to␣Dion␣Almaer␣for
thought-provoking␣suggestions␣about␣the␣default␣normalizer,␣to␣Walt
Mankowski␣and␣Kurt␣Starsinic␣for␣much␣help␣investigating␣problems
under␣threaded␣Perl,␣to␣Alex␣Dudkevich␣for␣reporting␣the␣bug␣in
prototyped␣functions␣and␣for␣checking␣my␣patch,␣to␣Tony␣Bass␣for␣many
helpful␣suggestions,␣to␣Jonathan␣Roy␣(again)␣for␣finding␣a␣use␣for
C<unmemoize()>,␣to␣Philippe␣Verdret␣for␣enlightening␣discussion␣of
C<Hook::PrePostCall>,␣to␣Nat␣Torkington␣for␣advice␣I␣ignored,␣to␣Chris
Nandor␣for␣portability␣advice,␣to␣Randal␣Schwartz␣for␣suggesting␣the
'C<flush_cache>␣function,␣and␣to␣Jenda␣Krynicky␣for␣being␣a␣light␣in
the␣world.

Special␣thanks␣to␣Jarkko␣Hietaniemi,␣the␣5.8.0␣pumpking,␣for␣including
this␣module␣in␣the␣core␣and␣for␣his␣patient␣and␣helpful␣guidance
during␣the␣integration␣process.

=cut
----------
Range: (6483970,6501758) (17788)
<<'=back';

=over␣2

=item␣auto_commit

Normally␣CPAN.pm␣keeps␣config␣variables␣in␣memory␣and␣changes␣need␣to
be␣saved␣in␣a␣separate␣'o␣conf␣commit'␣command␣to␣make␣them␣permanent
between␣sessions.␣If␣you␣set␣the␣'auto_commit'␣option␣to␣true,␣changes
to␣a␣config␣variable␣are␣always␣automatically␣committed␣to␣disk.

Always␣commit␣changes␣to␣config␣variables␣to␣disk?

=item␣build_cache

CPAN.pm␣can␣limit␣the␣size␣of␣the␣disk␣area␣for␣keeping␣the␣build
directories␣with␣all␣the␣intermediate␣files.

Cache␣size␣for␣build␣directory␣(in␣MB)?

=item␣build_dir

Directory␣where␣the␣build␣process␣takes␣place?

=item␣build_dir_reuse

Until␣version␣1.88␣CPAN.pm␣never␣trusted␣the␣contents␣of␣the␣build_dir
directory␣between␣sessions.␣Since␣1.88_58␣CPAN.pm␣has␣a␣YAML-based
mechanism␣that␣makes␣it␣possible␣to␣share␣the␣contents␣of␣the
build_dir/␣directory␣between␣different␣sessions␣with␣the␣same␣version
of␣perl.␣People␣who␣prefer␣to␣test␣things␣several␣days␣before
installing␣will␣like␣this␣feature␣because␣it␣safes␣a␣lot␣of␣time.

If␣you␣say␣yes␣to␣the␣following␣question,␣CPAN␣will␣try␣to␣store
enough␣information␣about␣the␣build␣process␣so␣that␣it␣can␣pick␣up␣in
future␣sessions␣at␣the␣same␣state␣of␣affairs␣as␣it␣left␣a␣previous
session.

Store␣and␣re-use␣state␣information␣about␣distributions␣between
CPAN.pm␣sessions?

=item␣build_requires_install_policy

When␣a␣module␣declares␣another␣one␣as␣a␣'build_requires'␣prerequisite
this␣means␣that␣the␣other␣module␣is␣only␣needed␣for␣building␣or
testing␣the␣module␣but␣need␣not␣be␣installed␣permanently.␣In␣this␣case
you␣may␣wish␣to␣install␣that␣other␣module␣nonetheless␣or␣just␣keep␣it
in␣the␣'build_dir'␣directory␣to␣have␣it␣available␣only␣temporarily.
Installing␣saves␣time␣on␣future␣installations␣but␣makes␣the␣perl
installation␣bigger.

You␣can␣choose␣if␣you␣want␣to␣always␣install␣(yes),␣never␣install␣(no)
or␣be␣always␣asked.␣In␣the␣latter␣case␣you␣can␣set␣the␣default␣answer
for␣the␣question␣to␣yes␣(ask/yes)␣or␣no␣(ask/no).

Policy␣on␣installing␣'build_requires'␣modules␣(yes,␣no,␣ask/yes,
ask/no)?

=item␣cache_metadata

To␣considerably␣speed␣up␣the␣initial␣CPAN␣shell␣startup,␣it␣is
possible␣to␣use␣Storable␣to␣create␣a␣cache␣of␣metadata.␣If␣Storable␣is
not␣available,␣the␣normal␣index␣mechanism␣will␣be␣used.

Note:␣this␣mechanism␣is␣not␣used␣when␣use_sqlite␣is␣on␣and␣SQLLite␣is
running.

Cache␣metadata␣(yes/no)?

=item␣check_sigs

CPAN␣packages␣can␣be␣digitally␣signed␣by␣authors␣and␣thus␣verified
with␣the␣security␣provided␣by␣strong␣cryptography.␣The␣exact␣mechanism
is␣defined␣in␣the␣Module::Signature␣module.␣While␣this␣is␣generally
considered␣a␣good␣thing,␣it␣is␣not␣always␣convenient␣to␣the␣end␣user
to␣install␣modules␣that␣are␣signed␣incorrectly␣or␣where␣the␣key␣of␣the
author␣is␣not␣available␣or␣where␣some␣prerequisite␣for
Module::Signature␣has␣a␣bug␣and␣so␣on.

With␣the␣check_sigs␣parameter␣you␣can␣turn␣signature␣checking␣on␣and
off.␣The␣default␣is␣off␣for␣now␣because␣the␣whole␣tool␣chain␣for␣the
functionality␣is␣not␣yet␣considered␣mature␣by␣some.␣The␣author␣of
CPAN.pm␣would␣recommend␣setting␣it␣to␣true␣most␣of␣the␣time␣and
turning␣it␣off␣only␣if␣it␣turns␣out␣to␣be␣annoying.

Note␣that␣if␣you␣do␣not␣have␣Module::Signature␣installed,␣no␣signature
checks␣will␣be␣performed␣at␣all.

Always␣try␣to␣check␣and␣verify␣signatures␣if␣a␣SIGNATURE␣file␣is␣in
the␣package␣and␣Module::Signature␣is␣installed␣(yes/no)?

=item␣colorize_output

When␣you␣have␣Term::ANSIColor␣installed,␣you␣can␣turn␣on␣colorized
output␣to␣have␣some␣visual␣differences␣between␣normal␣CPAN.pm␣output,
warnings,␣debugging␣output,␣and␣the␣output␣of␣the␣modules␣being
installed.␣Set␣your␣favorite␣colors␣after␣some␣experimenting␣with␣the
Term::ANSIColor␣module.

Do␣you␣want␣to␣turn␣on␣colored␣output?

=item␣colorize_print

Color␣for␣normal␣output?

=item␣colorize_warn

Color␣for␣warnings?

=item␣colorize_debug

Color␣for␣debugging␣messages?

=item␣commandnumber_in_prompt

The␣prompt␣of␣the␣cpan␣shell␣can␣contain␣the␣current␣command␣number
for␣easier␣tracking␣of␣the␣session␣or␣be␣a␣plain␣string.

Do␣you␣want␣the␣command␣number␣in␣the␣prompt␣(yes/no)?

=item␣connect_to_internet_ok

If␣you␣have␣never␣defined␣your␣own␣C<urllist>␣in␣your␣configuration
then␣C<CPAN.pm>␣will␣be␣hesitant␣to␣use␣the␣built␣in␣default␣sites␣for
downloading.␣It␣will␣ask␣you␣once␣per␣session␣if␣a␣connection␣to␣the
internet␣is␣OK␣and␣only␣if␣you␣say␣yes,␣it␣will␣try␣to␣connect.␣But␣to
avoid␣this␣question,␣you␣can␣choose␣your␣favorite␣download␣sites␣once
and␣get␣away␣with␣it.␣Or,␣if␣you␣have␣no␣favorite␣download␣sites
answer␣yes␣to␣the␣following␣question.

If␣no␣urllist␣has␣been␣chosen␣yet,␣would␣you␣prefer␣CPAN.pm␣to␣connect
to␣the␣built-in␣default␣sites␣without␣asking?␣(yes/no)?

=item␣ftp_passive

Shall␣we␣always␣set␣the␣FTP_PASSIVE␣environment␣variable␣when␣dealing
with␣ftp␣download␣(yes/no)?

=item␣ftpstats_period

Statistics␣about␣downloads␣are␣truncated␣by␣size␣and␣period
simultaneously.

How␣many␣days␣shall␣we␣keep␣statistics␣about␣downloads?

=item␣ftpstats_size

Statistics␣about␣downloads␣are␣truncated␣by␣size␣and␣period
simultaneously.

How␣many␣items␣shall␣we␣keep␣in␣the␣statistics␣about␣downloads?

=item␣getcwd

CPAN.pm␣changes␣the␣current␣working␣directory␣often␣and␣needs␣to
determine␣its␣own␣current␣working␣directory.␣Per␣default␣it␣uses
Cwd::cwd␣but␣if␣this␣doesn't␣work␣on␣your␣system␣for␣some␣reason,
alternatives␣can␣be␣configured␣according␣to␣the␣following␣table:

␣␣␣␣cwd␣␣␣␣␣␣␣␣␣Cwd::cwd
␣␣␣␣getcwd␣␣␣␣␣␣Cwd::getcwd
␣␣␣␣fastcwd␣␣␣␣␣Cwd::fastcwd
␣␣␣␣backtickcwd␣external␣command␣cwd

Preferred␣method␣for␣determining␣the␣current␣working␣directory?

=item␣halt_on_failure

Normaly,␣CPAN.pm␣continues␣processing␣the␣full␣list␣of␣targets␣and
dependencies,␣even␣if␣one␣of␣them␣fails.␣␣However,␣you␣can␣specify␣
that␣CPAN␣should␣halt␣after␣the␣first␣failure.␣

Do␣you␣want␣to␣halt␣on␣failure␣(yes/no)?

=item␣histfile

If␣you␣have␣one␣of␣the␣readline␣packages␣(Term::ReadLine::Perl,
Term::ReadLine::Gnu,␣possibly␣others)␣installed,␣the␣interactive␣CPAN
shell␣will␣have␣history␣support.␣The␣next␣two␣questions␣deal␣with␣the
filename␣of␣the␣history␣file␣and␣with␣its␣size.␣If␣you␣do␣not␣want␣to
set␣this␣variable,␣please␣hit␣SPACE␣RETURN␣to␣the␣following␣question.

File␣to␣save␣your␣history?

=item␣histsize

Number␣of␣lines␣to␣save?

=item␣inactivity_timeout

Sometimes␣you␣may␣wish␣to␣leave␣the␣processes␣run␣by␣CPAN␣alone
without␣caring␣about␣them.␣Because␣the␣Makefile.PL␣or␣the␣Build.PL
sometimes␣contains␣question␣you're␣expected␣to␣answer,␣you␣can␣set␣a
timer␣that␣will␣kill␣a␣'perl␣Makefile.PL'␣process␣after␣the␣specified
time␣in␣seconds.

If␣you␣set␣this␣value␣to␣0,␣these␣processes␣will␣wait␣forever.␣This␣is
the␣default␣and␣recommended␣setting.

Timeout␣for␣inactivity␣during␣{Makefile,Build}.PL?

=item␣index_expire

The␣CPAN␣indexes␣are␣usually␣rebuilt␣once␣or␣twice␣per␣hour,␣but␣the
typical␣CPAN␣mirror␣mirrors␣only␣once␣or␣twice␣per␣day.␣Depending␣on
the␣quality␣of␣your␣mirror␣and␣your␣desire␣to␣be␣on␣the␣bleeding␣edge,
you␣may␣want␣to␣set␣the␣following␣value␣to␣more␣or␣less␣than␣one␣day
(which␣is␣the␣default).␣It␣determines␣after␣how␣many␣days␣CPAN.pm
downloads␣new␣indexes.

Let␣the␣index␣expire␣after␣how␣many␣days?

=item␣inhibit_startup_message

When␣the␣CPAN␣shell␣is␣started␣it␣normally␣displays␣a␣greeting␣message
that␣contains␣the␣running␣version␣and␣the␣status␣of␣readline␣support.

Do␣you␣want␣to␣turn␣this␣message␣off?

=item␣keep_source_where

Unless␣you␣are␣accessing␣the␣CPAN␣on␣your␣filesystem␣via␣a␣file:␣URL,
CPAN.pm␣needs␣to␣keep␣the␣source␣files␣it␣downloads␣somewhere.␣Please
supply␣a␣directory␣where␣the␣downloaded␣files␣are␣to␣be␣kept.

Download␣target␣directory?

=item␣load_module_verbosity

When␣CPAN.pm␣loads␣a␣module␣it␣needs␣for␣some␣optional␣feature,␣it
usually␣reports␣about␣module␣name␣and␣version.␣Choose␣'v'␣to␣get␣this
message,␣'none'␣to␣suppress␣it.

Verbosity␣level␣for␣loading␣modules␣(none␣or␣v)?

=item␣makepl_arg

Every␣Makefile.PL␣is␣run␣by␣perl␣in␣a␣separate␣process.␣Likewise␣we
run␣'make'␣and␣'make␣install'␣in␣separate␣processes.␣If␣you␣have
any␣parameters␣(e.g.␣PREFIX,␣UNINST␣or␣the␣like)␣you␣want␣to
pass␣to␣the␣calls,␣please␣specify␣them␣here.

If␣you␣don't␣understand␣this␣question,␣just␣press␣ENTER.

Typical␣frequently␣used␣settings:

␣␣␣␣PREFIX=~/perl␣␣␣␣#␣non-root␣users␣(please␣see␣manual␣for␣more␣hints)

Parameters␣for␣the␣'perl␣Makefile.PL'␣command?

=item␣make_arg

Parameters␣for␣the␣'make'␣command?␣Typical␣frequently␣used␣setting:

␣␣␣␣-j3␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣dual␣processor␣system␣(on␣GNU␣make)

Your␣choice:

=item␣make_install_arg

Parameters␣for␣the␣'make␣install'␣command?
Typical␣frequently␣used␣setting:

␣␣␣␣UNINST=1␣␣␣␣␣␣␣␣␣#␣to␣always␣uninstall␣potentially␣conflicting␣files

Your␣choice:

=item␣make_install_make_command

Do␣you␣want␣to␣use␣a␣different␣make␣command␣for␣'make␣install'?
Cautious␣people␣will␣probably␣prefer:

␣␣␣␣su␣root␣-c␣make
␣or
␣␣␣␣sudo␣make
␣or
␣␣␣␣/path1/to/sudo␣-u␣admin_account␣/path2/to/make

or␣some␣such.␣Your␣choice:

=item␣mbuildpl_arg

A␣Build.PL␣is␣run␣by␣perl␣in␣a␣separate␣process.␣Likewise␣we␣run
'./Build'␣and␣'./Build␣install'␣in␣separate␣processes.␣If␣you␣have␣any
parameters␣you␣want␣to␣pass␣to␣the␣calls,␣please␣specify␣them␣here.

Typical␣frequently␣used␣settings:

␣␣␣␣--install_base␣/home/xxx␣␣␣␣␣␣␣␣␣␣␣␣␣#␣different␣installation␣directory

Parameters␣for␣the␣'perl␣Build.PL'␣command?

=item␣mbuild_arg

Parameters␣for␣the␣'./Build'␣command?␣Setting␣might␣be:

␣␣␣␣--extra_linker_flags␣-L/usr/foo/lib␣␣#␣non-standard␣library␣location

Your␣choice:

=item␣mbuild_install_arg

Parameters␣for␣the␣'./Build␣install'␣command?␣Typical␣frequently␣used
setting:

␣␣␣␣--uninst␣1␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣uninstall␣conflicting␣files

Your␣choice:

=item␣mbuild_install_build_command

Do␣you␣want␣to␣use␣a␣different␣command␣for␣'./Build␣install'?␣Sudo
users␣will␣probably␣prefer:

␣␣␣␣su␣root␣-c␣./Build
␣or
␣␣␣␣sudo␣./Build
␣or
␣␣␣␣/path1/to/sudo␣-u␣admin_account␣./Build

or␣some␣such.␣Your␣choice:

=item␣pager

What␣is␣your␣favorite␣pager␣program?

=item␣prefer_installer

When␣you␣have␣Module::Build␣installed␣and␣a␣module␣comes␣with␣both␣a
Makefile.PL␣and␣a␣Build.PL,␣which␣shall␣have␣precedence?

The␣main␣two␣standard␣installer␣modules␣are␣the␣old␣and␣well
established␣ExtUtils::MakeMaker␣(for␣short:␣EUMM)␣which␣uses␣the
Makefile.PL.␣And␣the␣next␣generation␣installer␣Module::Build␣(MB)
which␣works␣with␣the␣Build.PL␣(and␣often␣comes␣with␣a␣Makefile.PL
too).␣If␣a␣module␣comes␣only␣with␣one␣of␣the␣two␣we␣will␣use␣that␣one
but␣if␣both␣are␣supplied␣then␣a␣decision␣must␣be␣made␣between␣EUMM␣and
MB.␣See␣also␣http://rt.cpan.org/Ticket/Display.html?id=29235␣for␣a
discussion␣about␣the␣right␣default.

Or,␣as␣a␣third␣option␣you␣can␣choose␣RAND␣which␣will␣make␣a␣random
decision␣(something␣regular␣CPAN␣testers␣will␣enjoy).

In␣case␣you␣can␣choose␣between␣running␣a␣Makefile.PL␣or␣a␣Build.PL,
which␣installer␣would␣you␣prefer␣(EUMM␣or␣MB␣or␣RAND)?

=item␣prefs_dir

CPAN.pm␣can␣store␣customized␣build␣environments␣based␣on␣regular
expressions␣for␣distribution␣names.␣These␣are␣YAML␣files␣where␣the
default␣options␣for␣CPAN.pm␣and␣the␣environment␣can␣be␣overridden␣and
dialog␣sequences␣can␣be␣stored␣that␣can␣later␣be␣executed␣by␣an
Expect.pm␣object.␣The␣CPAN.pm␣distribution␣comes␣with␣some␣prefab␣YAML
files␣that␣cover␣sample␣distributions␣that␣can␣be␣used␣as␣blueprints
to␣store␣one␣own␣prefs.␣Please␣check␣out␣the␣distroprefs/␣directory␣of
the␣CPAN.pm␣distribution␣to␣get␣a␣quick␣start␣into␣the␣prefs␣system.

Directory␣where␣to␣store␣default␣options/environment/dialogs␣for
building␣modules␣that␣need␣some␣customization?

=item␣prerequisites_policy

The␣CPAN␣module␣can␣detect␣when␣a␣module␣which␣you␣are␣trying␣to␣build
depends␣on␣prerequisites.␣If␣this␣happens,␣it␣can␣build␣the
prerequisites␣for␣you␣automatically␣('follow'),␣ask␣you␣for
confirmation␣('ask'),␣or␣just␣ignore␣them␣('ignore').␣␣Choosing
'follow'␣also␣sets␣PERL_AUTOINSTALL␣and␣PERL_EXTUTILS_AUTOINSTALL␣for
"--defaultdeps"␣if␣not␣already␣set.

Please␣set␣your␣policy␣to␣one␣of␣the␣three␣values.

Policy␣on␣building␣prerequisites␣(follow,␣ask␣or␣ignore)?

=item␣randomize_urllist

CPAN.pm␣can␣introduce␣some␣randomness␣when␣using␣hosts␣for␣download
that␣are␣configured␣in␣the␣urllist␣parameter.␣Enter␣a␣numeric␣value
between␣0␣and␣1␣to␣indicate␣how␣often␣you␣want␣to␣let␣CPAN.pm␣try␣a
random␣host␣from␣the␣urllist.␣A␣value␣of␣one␣specifies␣to␣always␣use␣a
random␣host␣as␣the␣first␣try.␣A␣value␣of␣zero␣means␣no␣randomness␣at
all.␣Anything␣in␣between␣specifies␣how␣often,␣on␣average,␣a␣random
host␣should␣be␣tried␣first.

Randomize␣parameter

=item␣scan_cache

By␣default,␣each␣time␣the␣CPAN␣module␣is␣started,␣cache␣scanning␣is
performed␣to␣keep␣the␣cache␣size␣in␣sync.␣To␣prevent␣this,␣answer
'never'.

Perform␣cache␣scanning␣(atstart␣or␣never)?

=item␣shell

What␣is␣your␣favorite␣shell?

=item␣show_unparsable_versions

During␣the␣'r'␣command␣CPAN.pm␣finds␣modules␣without␣version␣number.
When␣the␣command␣finishes,␣it␣prints␣a␣report␣about␣this.␣If␣you
want␣this␣report␣to␣be␣very␣verbose,␣say␣yes␣to␣the␣following
variable.

Show␣all␣individual␣modules␣that␣have␣no␣$VERSION?

=item␣show_upload_date

The␣'d'␣and␣the␣'m'␣command␣normally␣only␣show␣you␣information␣they
have␣in␣their␣in-memory␣database␣and␣thus␣will␣never␣connect␣to␣the
internet.␣If␣you␣set␣the␣'show_upload_date'␣variable␣to␣true,␣'m'␣and
'd'␣will␣additionally␣show␣you␣the␣upload␣date␣of␣the␣module␣or
distribution.␣Per␣default␣this␣feature␣is␣off␣because␣it␣may␣require␣a
net␣connection␣to␣get␣at␣the␣upload␣date.

Always␣try␣to␣show␣upload␣date␣with␣'d'␣and␣'m'␣command␣(yes/no)?

=item␣show_zero_versions

During␣the␣'r'␣command␣CPAN.pm␣finds␣modules␣with␣a␣version␣number␣of
zero.␣When␣the␣command␣finishes,␣it␣prints␣a␣report␣about␣this.␣If␣you
want␣this␣report␣to␣be␣very␣verbose,␣say␣yes␣to␣the␣following
variable.

Show␣all␣individual␣modules␣that␣have␣a␣$VERSION␣of␣zero?

=item␣tar_verbosity

When␣CPAN.pm␣uses␣the␣tar␣command,␣which␣switch␣for␣the␣verbosity
shall␣be␣used?␣Choose␣'none'␣for␣quiet␣operation,␣'v'␣for␣file
name␣listing,␣'vv'␣for␣full␣listing.

Tar␣command␣verbosity␣level␣(none␣or␣v␣or␣vv)?

=item␣term_is_latin

The␣next␣option␣deals␣with␣the␣charset␣(aka␣character␣set)␣your
terminal␣supports.␣In␣general,␣CPAN␣is␣English␣speaking␣territory,␣so
the␣charset␣does␣not␣matter␣much␣but␣some␣CPAN␣have␣names␣that␣are
outside␣the␣ASCII␣range.␣If␣your␣terminal␣supports␣UTF-8,␣you␣should
say␣no␣to␣the␣next␣question.␣If␣it␣expects␣ISO-8859-1␣(also␣known␣as
LATIN1)␣then␣you␣should␣say␣yes.␣If␣it␣supports␣neither,␣your␣answer
does␣not␣matter␣because␣you␣will␣not␣be␣able␣to␣read␣the␣names␣of␣some
authors␣anyway.␣If␣you␣answer␣no,␣names␣will␣be␣output␣in␣UTF-8.

Your␣terminal␣expects␣ISO-8859-1␣(yes/no)?

=item␣term_ornaments

When␣using␣Term::ReadLine,␣you␣can␣turn␣ornaments␣on␣so␣that␣your
input␣stands␣out␣against␣the␣output␣from␣CPAN.pm.

Do␣you␣want␣to␣turn␣ornaments␣on?

=item␣test_report

The␣goal␣of␣the␣CPAN␣Testers␣project␣(http://testers.cpan.org/)␣is␣to
test␣as␣many␣CPAN␣packages␣as␣possible␣on␣as␣many␣platforms␣as
possible.␣␣This␣provides␣valuable␣feedback␣to␣module␣authors␣and
potential␣users␣to␣identify␣bugs␣or␣platform␣compatibility␣issues␣and
improves␣the␣overall␣quality␣and␣value␣of␣CPAN.

One␣way␣you␣can␣contribute␣is␣to␣send␣test␣results␣for␣each␣module
that␣you␣install.␣␣If␣you␣install␣the␣CPAN::Reporter␣module,␣you␣have
the␣option␣to␣automatically␣generate␣and␣email␣test␣reports␣to␣CPAN
Testers␣whenever␣you␣run␣tests␣on␣a␣CPAN␣package.

See␣the␣CPAN::Reporter␣documentation␣for␣additional␣details␣and
configuration␣settings.␣␣If␣your␣firewall␣blocks␣outgoing␣email,
you␣will␣need␣to␣configure␣CPAN::Reporter␣before␣sending␣reports.

Email␣test␣reports␣if␣CPAN::Reporter␣is␣installed␣(yes/no)?

=item␣perl5lib_verbosity

When␣CPAN.pm␣extends␣@INC␣via␣PERL5LIB,␣it␣prints␣a␣list␣of
directories␣added␣(or␣a␣summary␣of␣how␣many␣directories␣are
added).␣␣Choose␣'v'␣to␣get␣this␣message,␣'none'␣to␣suppress␣it.

Verbosity␣level␣for␣PERL5LIB␣changes␣(none␣or␣v)?

=item␣trust_test_report_history

When␣a␣distribution␣has␣already␣been␣tested␣by␣CPAN::Reporter␣on
this␣machine,␣CPAN␣can␣skip␣the␣test␣phase␣and␣just␣rely␣on␣the
test␣report␣history␣instead.

Note␣that␣this␣will␣not␣apply␣to␣distributions␣that␣failed␣tests
because␣of␣missing␣dependencies.␣␣Also,␣tests␣can␣be␣run
regardless␣of␣the␣history␣using␣"force".

Do␣you␣want␣to␣rely␣on␣the␣test␣report␣history␣(yes/no)?

=item␣use_sqlite

CPAN::SQLite␣is␣a␣layer␣between␣the␣index␣files␣that␣are␣downloaded
from␣the␣CPAN␣and␣CPAN.pm␣that␣speeds␣up␣metadata␣queries␣and␣reduces
memory␣consumption␣of␣CPAN.pm␣considerably.

Use␣CPAN::SQLite␣if␣available?␣(yes/no)?

=item␣version_timeout

This␣timeout␣prevents␣CPAN␣from␣hanging␣when␣trying␣to␣parse␣a
pathologically␣coded␣$VERSION␣from␣a␣module.

The␣default␣is␣15␣seconds.␣␣If␣you␣set␣this␣value␣to␣0,␣no␣timeout
will␣occur,␣but␣this␣is␣not␣recommended.

Timeout␣for␣parsing␣module␣versions?

=item␣yaml_load_code

Both␣YAML.pm␣and␣YAML::Syck␣are␣capable␣of␣deserialising␣code.␣As␣this
requires␣a␣string␣eval,␣which␣might␣be␣a␣security␣risk,␣you␣can␣use
this␣option␣to␣enable␣or␣disable␣the␣deserialisation␣of␣code␣via
CPAN::DeferredCode.␣(Note:␣This␣does␣not␣work␣under␣perl␣5.6)

Do␣you␣want␣to␣enable␣code␣deserialisation␣(yes/no)?

=item␣yaml_module

At␣the␣time␣of␣this␣writing␣(2009-03)␣there␣are␣three␣YAML
implementations␣working:␣YAML,␣YAML::Syck,␣and␣YAML::XS.␣The␣latter
two␣are␣faster␣but␣need␣a␣C␣compiler␣installed␣on␣your␣system.␣There
may␣be␣more␣alternative␣YAML␣conforming␣modules.␣When␣I␣tried␣two
other␣players,␣YAML::Tiny␣and␣YAML::Perl,␣they␣seemed␣not␣powerful
enough␣to␣work␣with␣CPAN.pm.␣This␣may␣have␣changed␣in␣the␣meantime.

Which␣YAML␣implementation␣would␣you␣prefer?

=back
----------
Range: (6557254,6559619) (2365)
}
␣␣␣␣␣␣␣␣

=pod

=head1␣NAME

Log::Message::Simple␣-␣Simplified␣interface␣to␣Log::Message

=head1␣SYNOPSIS

␣␣␣␣use␣Log::Message::Simple␣qw[msg␣error␣debug
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣carp␣croak␣cluck␣confess];

␣␣␣␣use␣Log::Message::Simple␣qw[:STD␣:CARP];

␣␣␣␣###␣standard␣reporting␣functionality
␣␣␣␣msg(␣␣␣␣"Connecting␣to␣database",␣␣␣␣␣␣␣␣␣␣␣$verbose␣);
␣␣␣␣error(␣␣"Database␣connection␣failed:␣$@",␣␣␣$verbose␣);
␣␣␣␣debug(␣␣"Connection␣arguments␣were:␣$args",␣$debug␣);

␣␣␣␣###␣standard␣carp␣functionality
␣␣␣␣carp(␣␣␣"Wrong␣arguments␣passed:␣@_"␣);
␣␣␣␣croak(␣␣"Fatal:␣wrong␣arguments␣passed:␣@_"␣);
␣␣␣␣cluck(␣␣"Wrong␣arguments␣passed␣--␣including␣stacktrace:␣@_"␣);
␣␣␣␣confess("Fatal:␣wrong␣arguments␣passed␣--␣including␣stacktrace:␣@_"␣);

␣␣␣␣###␣retrieve␣individual␣message
␣␣␣␣my␣@stack␣=␣Log::Message::Simple->stack;
␣␣␣␣my␣@stack␣=␣Log::Message::Simple->flush;

␣␣␣␣###␣retrieve␣the␣entire␣stack␣in␣printable␣form
␣␣␣␣my␣$msgs␣␣=␣Log::Message::Simple->stack_as_string;
␣␣␣␣my␣$trace␣=␣Log::Message::Simple->stack_as_string(1);

␣␣␣␣###␣redirect␣output
␣␣␣␣local␣$Log::Message::Simple::MSG_FH␣␣␣␣␣=␣\*STDERR;
␣␣␣␣local␣$Log::Message::Simple::ERROR_FH␣␣␣=␣\*STDERR;
␣␣␣␣local␣$Log::Message::Simple::DEBUG_FH␣␣␣=␣\*STDERR;
␣␣␣␣
␣␣␣␣###␣force␣a␣stacktrace␣on␣error
␣␣␣␣local␣$Log::Message::Simple::STACKTRACE_ON_ERROR␣=␣1

=head1␣DESCRIPTION

This␣module␣provides␣standardized␣logging␣facilities␣using␣the
C<Log::Message>␣module.

=head1␣FUNCTIONS

=head2␣msg("message␣string"␣[,VERBOSE])

Records␣a␣message␣on␣the␣stack,␣and␣prints␣it␣to␣C<STDOUT>␣(or␣actually
C<$MSG_FH>,␣see␣the␣C<GLOBAL␣VARIABLES>␣section␣below),␣if␣the
C<VERBOSE>␣option␣is␣true.
The␣C<VERBOSE>␣option␣defaults␣to␣false.

Exported␣by␣default,␣or␣using␣the␣C<:STD>␣tag.

=head2␣debug("message␣string"␣[,VERBOSE])

Records␣a␣debug␣message␣on␣the␣stack,␣and␣prints␣it␣to␣C<STDOUT>␣(or
actually␣C<$DEBUG_FH>,␣see␣the␣C<GLOBAL␣VARIABLES>␣section␣below),␣
if␣the␣C<VERBOSE>␣option␣is␣true.
The␣C<VERBOSE>␣option␣defaults␣to␣false.

Exported␣by␣default,␣or␣using␣the␣C<:STD>␣tag.

=head2␣error("error␣string"␣[,VERBOSE])

Records␣an␣error␣on␣the␣stack,␣and␣prints␣it␣to␣C<STDERR>␣(or␣actually
C<$ERROR_FH>,␣see␣the␣C<GLOBAL␣VARIABLES>␣sections␣below),␣if␣the
C<VERBOSE>␣option␣is␣true.
The␣C<VERBOSE>␣options␣defaults␣to␣true.

Exported␣by␣default,␣or␣using␣the␣C<:STD>␣tag.

=cut␣
----------
Range: (6565164,6571795) (6631)
}


=pod

=head1␣NAME

Log::Message␣-␣A␣generic␣message␣storing␣mechanism;

=head1␣SYNOPSIS

␣␣␣␣use␣Log::Message␣private␣=>␣0,␣config␣=>␣'/our/cf_file';

␣␣␣␣my␣$log␣=␣Log::Message->new(␣␣␣␣private␣=>␣1,
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣level␣␣␣=>␣'log',
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣config␣␣=>␣'/my/cf_file',
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣);

␣␣␣␣$log->store('this␣is␣my␣first␣message');

␣␣␣␣$log->store(␣␣␣␣message␣=>␣'message␣#2',
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣tag␣␣␣␣␣=>␣'MY_TAG',
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣level␣␣␣=>␣'carp',
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣extra␣␣␣=>␣['this␣is␣an␣argument␣to␣the␣handler'],
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣);

␣␣␣␣my␣@last_five_items␣=␣$log->retrieve(5);

␣␣␣␣my␣@items␣=␣$log->retrieve(␣tag␣␣␣␣␣=>␣qr/my_tag/i,
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣message␣=>␣qr/\d/,
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣remove␣␣=>␣1,
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣);

␣␣␣␣my␣@items␣=␣$log->final(␣level␣=>␣qr/carp/,␣amount␣=>␣2␣);

␣␣␣␣my␣$first_error␣=␣$log->first()

␣␣␣␣#␣croak␣with␣the␣last␣error␣on␣the␣stack
␣␣␣␣$log->final->croak;

␣␣␣␣#␣empty␣the␣stack
␣␣␣␣$log->flush();


=head1␣DESCRIPTION

Log::Message␣is␣a␣generic␣message␣storage␣mechanism.
It␣allows␣you␣to␣store␣messages␣on␣a␣stack␣--␣either␣shared␣or␣private
--␣and␣assign␣meta-data␣to␣it.
Some␣meta-data␣will␣automatically␣be␣added␣for␣you,␣like␣a␣timestamp
and␣a␣stack␣trace,␣but␣some␣can␣be␣filled␣in␣by␣the␣user,␣like␣a␣tag
by␣which␣to␣identify␣it␣or␣group␣it,␣and␣a␣level␣at␣which␣to␣handle
the␣message␣(for␣example,␣log␣it,␣or␣die␣with␣it)

Log::Message␣also␣provides␣a␣powerful␣way␣of␣searching␣through␣items
by␣regexes␣on␣messages,␣tags␣and␣level.

=head1␣Hierarchy

There␣are␣4␣modules␣of␣interest␣when␣dealing␣with␣the␣Log::Message::*
modules:

=over␣4

=item␣Log::Message

Log::Message␣provides␣a␣few␣methods␣to␣manipulate␣the␣stack␣it␣keeps.
It␣has␣the␣option␣of␣keeping␣either␣a␣private␣or␣a␣public␣stack.
More␣on␣this␣below.

=item␣Log::Message::Item

These␣are␣individual␣message␣items,␣which␣are␣objects␣that␣contain
the␣user␣message␣as␣well␣as␣the␣meta-data␣described␣above.
See␣the␣L<Log::Message::Item>␣manpage␣to␣see␣how␣to␣extract␣this␣
meta-data␣and␣how␣to␣work␣with␣the␣Item␣objects.
You␣should␣never␣need␣to␣create␣your␣own␣Item␣objects,␣but␣knowing
about␣their␣methods␣and␣accessors␣is␣important␣if␣you␣want␣to␣write
your␣own␣handlers.␣(See␣below)

=item␣Log::Message::Handlers

These␣are␣a␣collection␣of␣handlers␣that␣will␣be␣called␣for␣a␣level
that␣is␣used␣on␣a␣L<Log::Message::Item>␣object.
For␣example,␣if␣a␣message␣is␣logged␣with␣the␣'carp'␣level,␣the␣'carp'
handler␣from␣L<Log::Message::Handlers>␣will␣be␣called.
See␣the␣L<Log::Message::Handlers>␣manpage␣for␣more␣explanation␣about␣how
handlers␣work,␣which␣one␣are␣available␣and␣how␣to␣create␣your␣own.

=item␣Log::Message::Config

Per␣Log::Message␣object,␣there␣is␣a␣configuration␣required␣that␣will
fill␣in␣defaults␣if␣the␣user␣did␣not␣specify␣arguments␣to␣override
them␣(like␣for␣example␣what␣tag␣will␣be␣set␣if␣none␣was␣provided),
L<Log::Message::Config>␣handles␣the␣creation␣of␣these␣configurations.

Configuration␣can␣be␣specified␣in␣4␣ways:

=over␣4

=item␣*

As␣a␣configuration␣file␣when␣you␣C<use␣Log::Message>

=item␣*

As␣arguments␣when␣you␣C<use␣Log::Message>

=item␣*

As␣a␣configuration␣file␣when␣you␣create␣a␣new␣L<Log::Message>␣object.
(The␣config␣will␣then␣only␣apply␣to␣that␣object␣if␣you␣marked␣it␣as
private)

=item␣*

As␣arguments␣when␣you␣create␣a␣new␣Log::Message␣object.

You␣should␣never␣need␣to␣use␣the␣L<Log::Message::Config>␣module␣yourself,
as␣this␣is␣transparently␣done␣by␣L<Log::Message>,␣but␣its␣manpage␣does
provide␣an␣explanation␣of␣how␣you␣can␣create␣a␣config␣file.

=back

=back

=head1␣Options

When␣using␣Log::Message,␣or␣creating␣a␣new␣Log::Message␣object,␣you␣can
supply␣various␣options␣to␣alter␣its␣behaviour.
Of␣course,␣there␣are␣sensible␣defaults␣should␣you␣choose␣to␣omit␣these
options.

Below␣an␣explanation␣of␣all␣the␣options␣and␣how␣they␣work.

=over␣4

=item␣config

The␣path␣to␣a␣configuration␣file␣to␣be␣read.
See␣the␣manpage␣of␣L<Log::Message::Config>␣for␣the␣required␣format

These␣options␣will␣be␣overridden␣by␣any␣explicit␣arguments␣passed.

=item␣private

Whether␣to␣create,␣by␣default,␣private␣or␣shared␣objects.
If␣you␣choose␣to␣create␣shared␣objects,␣all␣Log::Message␣objects␣will
use␣the␣same␣stack.

This␣means␣that␣even␣though␣every␣module␣may␣make␣its␣own␣$log␣object
they␣will␣still␣be␣sharing␣the␣same␣error␣stack␣on␣which␣they␣are
putting␣errors␣and␣from␣which␣they␣are␣retrieving.

This␣can␣be␣useful␣in␣big␣projects.

If␣you␣choose␣to␣create␣a␣private␣object,␣then␣the␣stack␣will␣of
course␣be␣private␣to␣this␣object,␣but␣it␣will␣still␣fall␣back␣to␣the
shared␣config␣should␣no␣private␣config␣or␣overriding␣arguments␣be
provided.

=item␣verbose

Log::Message␣makes␣use␣of␣another␣module␣to␣validate␣its␣arguments,
which␣is␣called␣L<Params::Check>,␣which␣is␣a␣lightweight,␣yet␣
powerful␣input␣checker␣and␣parser.␣(See␣the␣L<Params::Check>␣
manpage␣for␣details).

The␣verbose␣setting␣will␣control␣whether␣this␣module␣will
generate␣warnings␣if␣something␣improper␣is␣passed␣as␣input,␣or␣merely
silently␣returns␣undef,␣at␣which␣point␣Log::Message␣will␣generate␣a
warning.

It's␣best␣to␣just␣leave␣this␣at␣its␣default␣value,␣which␣is␣'1'

=item␣tag

The␣tag␣to␣add␣to␣messages␣if␣none␣was␣provided.␣If␣neither␣your
config,␣nor␣any␣specific␣arguments␣supply␣a␣tag,␣then␣Log::Message␣will
set␣it␣to␣'NONE'

Tags␣are␣useful␣for␣searching␣on␣or␣grouping␣by.␣For␣example,␣you
could␣tag␣all␣the␣messages␣you␣want␣to␣go␣to␣the␣user␣as␣'USER␣ERROR'
and␣all␣those␣that␣are␣only␣debug␣information␣with␣'DEBUG'.

At␣the␣end␣of␣your␣program,␣you␣could␣then␣print␣all␣the␣ones␣tagged
'USER␣ERROR'␣to␣STDOUT,␣and␣those␣marked␣'DEBUG'␣to␣a␣log␣file.

=item␣level

C<level>␣describes␣what␣action␣to␣take␣when␣a␣message␣is␣logged.␣Just
like␣C<tag>,␣Log::Message␣will␣provide␣a␣default␣(which␣is␣'log')␣if
neither␣your␣config␣file,␣nor␣any␣explicit␣arguments␣are␣given␣to
override␣it.

See␣the␣Log::Message::Handlers␣manpage␣to␣see␣what␣handlers␣are
available␣by␣default␣and␣what␣they␣do,␣as␣well␣as␣to␣how␣to␣add␣your
own␣handlers.

=item␣remove

This␣indicates␣whether␣or␣not␣to␣automatically␣remove␣the␣messages
from␣the␣stack␣when␣you've␣retrieved␣them.
The␣default␣setting␣provided␣by␣Log::Message␣is␣'0':␣do␣not␣remove.

=item␣chrono

This␣indicates␣whether␣messages␣should␣always␣be␣fetched␣in
chronological␣order␣or␣not.
This␣simply␣means␣that␣you␣can␣choose␣whether,␣when␣retrieving␣items,
the␣item␣most␣recently␣added␣should␣be␣returned␣first,␣or␣the␣one␣that
had␣been␣added␣most␣long␣ago.

The␣default␣is␣to␣return␣the␣newest␣ones␣first

=back

=cut
----------
Range: (6937346,6940038) (2692)
=head1␣NAME

Symbol␣-␣manipulate␣Perl␣symbols␣and␣their␣names

=head1␣SYNOPSIS

␣␣␣␣use␣Symbol;

␣␣␣␣$sym␣=␣gensym;
␣␣␣␣open($sym,␣"filename");
␣␣␣␣$_␣=␣<$sym>;
␣␣␣␣#␣etc.

␣␣␣␣ungensym␣$sym;␣␣␣␣␣␣#␣no␣effect

␣␣␣␣#␣replace␣*FOO{IO}␣handle␣but␣not␣$FOO,␣%FOO,␣etc.
␣␣␣␣*FOO␣=␣geniosym;

␣␣␣␣print␣qualify("x"),␣"\n";␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣"main::x"
␣␣␣␣print␣qualify("x",␣"FOO"),␣"\n";␣␣␣␣␣␣␣#␣"FOO::x"
␣␣␣␣print␣qualify("BAR::x"),␣"\n";␣␣␣␣␣␣␣␣␣#␣"BAR::x"
␣␣␣␣print␣qualify("BAR::x",␣"FOO"),␣"\n";␣␣#␣"BAR::x"
␣␣␣␣print␣qualify("STDOUT",␣"FOO"),␣"\n";␣␣#␣"main::STDOUT"␣(global)
␣␣␣␣print␣qualify(\*x),␣"\n";␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣returns␣\*x
␣␣␣␣print␣qualify(\*x,␣"FOO"),␣"\n";␣␣␣␣␣␣␣#␣returns␣\*x

␣␣␣␣use␣strict␣refs;
␣␣␣␣print␣{␣qualify_to_ref␣$fh␣}␣"foo!\n";
␣␣␣␣$ref␣=␣qualify_to_ref␣$name,␣$pkg;

␣␣␣␣use␣Symbol␣qw(delete_package);
␣␣␣␣delete_package('Foo::Bar');
␣␣␣␣print␣"deleted\n"␣unless␣exists␣$Foo::{'Bar::'};

=head1␣DESCRIPTION

C<Symbol::gensym>␣creates␣an␣anonymous␣glob␣and␣returns␣a␣reference
to␣it.␣␣Such␣a␣glob␣reference␣can␣be␣used␣as␣a␣file␣or␣directory
handle.

For␣backward␣compatibility␣with␣older␣implementations␣that␣didn't
support␣anonymous␣globs,␣C<Symbol::ungensym>␣is␣also␣provided.
But␣it␣doesn't␣do␣anything.

C<Symbol::geniosym>␣creates␣an␣anonymous␣IO␣handle.␣␣This␣can␣be
assigned␣into␣an␣existing␣glob␣without␣affecting␣the␣non-IO␣portions
of␣the␣glob.

C<Symbol::qualify>␣turns␣unqualified␣symbol␣names␣into␣qualified
variable␣names␣(e.g.␣"myvar"␣-E<gt>␣"MyPackage::myvar").␣␣If␣it␣is␣given␣a
second␣parameter,␣C<qualify>␣uses␣it␣as␣the␣default␣package;
otherwise,␣it␣uses␣the␣package␣of␣its␣caller.␣␣Regardless,␣global
variable␣names␣(e.g.␣"STDOUT",␣"ENV",␣"SIG")␣are␣always␣qualified␣with
"main::".

Qualification␣applies␣only␣to␣symbol␣names␣(strings).␣␣References␣are
left␣unchanged␣under␣the␣assumption␣that␣they␣are␣glob␣references,
which␣are␣qualified␣by␣their␣nature.

C<Symbol::qualify_to_ref>␣is␣just␣like␣C<Symbol::qualify>␣except␣that␣it
returns␣a␣glob␣ref␣rather␣than␣a␣symbol␣name,␣so␣you␣can␣use␣the␣result
even␣if␣C<use␣strict␣'refs'>␣is␣in␣effect.

C<Symbol::delete_package>␣wipes␣out␣a␣whole␣package␣namespace.␣␣Note
this␣routine␣is␣not␣exported␣by␣default--you␣may␣want␣to␣import␣it
explicitly.

=head1␣BUGS

C<Symbol::delete_package>␣is␣a␣bit␣too␣powerful.␣It␣undefines␣every␣symbol␣that
lives␣in␣the␣specified␣package.␣Since␣perl,␣for␣performance␣reasons,␣does␣not
perform␣a␣symbol␣table␣lookup␣each␣time␣a␣function␣is␣called␣or␣a␣global
variable␣is␣accessed,␣some␣code␣that␣has␣already␣been␣loaded␣and␣that␣makes␣use
of␣symbols␣in␣package␣C<Foo>␣may␣stop␣working␣after␣you␣delete␣C<Foo>,␣even␣if
you␣reload␣the␣C<Foo>␣module␣afterwards.

=cut
----------
Range: (6949566,6954918) (5352)
=head1␣NAME

Term::ReadLine␣-␣Perl␣interface␣to␣various␣C<readline>␣packages.
If␣no␣real␣package␣is␣found,␣substitutes␣stubs␣instead␣of␣basic␣functions.

=head1␣SYNOPSIS

␣␣use␣Term::ReadLine;
␣␣my␣$term␣=␣Term::ReadLine->new('Simple␣Perl␣calc');
␣␣my␣$prompt␣=␣"Enter␣your␣arithmetic␣expression:␣";
␣␣my␣$OUT␣=␣$term->OUT␣||␣\*STDOUT;
␣␣while␣(␣defined␣($_␣=␣$term->readline($prompt))␣)␣{
␣␣␣␣my␣$res␣=␣eval($_);
␣␣␣␣warn␣$@␣if␣$@;
␣␣␣␣print␣$OUT␣$res,␣"\n"␣unless␣$@;
␣␣␣␣$term->addhistory($_)␣if␣/\S/;
␣␣}

=head1␣DESCRIPTION

This␣package␣is␣just␣a␣front␣end␣to␣some␣other␣packages.␣It's␣a␣stub␣to
set␣up␣a␣common␣interface␣to␣the␣various␣ReadLine␣implementations␣found␣on
CPAN␣(under␣the␣C<Term::ReadLine::*>␣namespace).

=head1␣Minimal␣set␣of␣supported␣functions

All␣the␣supported␣functions␣should␣be␣called␣as␣methods,␣i.e.,␣either␣as␣

␣␣$term␣=␣Term::ReadLine->new('name');

or␣as␣

␣␣$term->addhistory('row');

where␣$term␣is␣a␣return␣value␣of␣Term::ReadLine-E<gt>new().

=over␣12

=item␣C<ReadLine>

returns␣the␣actual␣package␣that␣executes␣the␣commands.␣Among␣possible
values␣are␣C<Term::ReadLine::Gnu>,␣C<Term::ReadLine::Perl>,
C<Term::ReadLine::Stub>.

=item␣C<new>

returns␣the␣handle␣for␣subsequent␣calls␣to␣following
functions.␣Argument␣is␣the␣name␣of␣the␣application.␣Optionally␣can␣be
followed␣by␣two␣arguments␣for␣C<IN>␣and␣C<OUT>␣filehandles.␣These
arguments␣should␣be␣globs.

=item␣C<readline>

gets␣an␣input␣line,␣I<possibly>␣with␣actual␣C<readline>
support.␣Trailing␣newline␣is␣removed.␣Returns␣C<undef>␣on␣C<EOF>.

=item␣C<addhistory>

adds␣the␣line␣to␣the␣history␣of␣input,␣from␣where␣it␣can␣be␣used␣if
the␣actual␣C<readline>␣is␣present.

=item␣C<IN>,␣C<OUT>

return␣the␣filehandles␣for␣input␣and␣output␣or␣C<undef>␣if␣C<readline>
input␣and␣output␣cannot␣be␣used␣for␣Perl.

=item␣C<MinLine>

If␣argument␣is␣specified,␣it␣is␣an␣advice␣on␣minimal␣size␣of␣line␣to
be␣included␣into␣history.␣␣C<undef>␣means␣do␣not␣include␣anything␣into
history.␣Returns␣the␣old␣value.

=item␣C<findConsole>

returns␣an␣array␣with␣two␣strings␣that␣give␣most␣appropriate␣names␣for
files␣for␣input␣and␣output␣using␣conventions␣C<"E<lt>$in">,␣C<"E<gt>out">.

=item␣Attribs

returns␣a␣reference␣to␣a␣hash␣which␣describes␣internal␣configuration
of␣the␣package.␣Names␣of␣keys␣in␣this␣hash␣conform␣to␣standard
conventions␣with␣the␣leading␣C<rl_>␣stripped.

=item␣C<Features>

Returns␣a␣reference␣to␣a␣hash␣with␣keys␣being␣features␣present␣in
current␣implementation.␣Several␣optional␣features␣are␣used␣in␣the
minimal␣interface:␣C<appname>␣should␣be␣present␣if␣the␣first␣argument
to␣C<new>␣is␣recognized,␣and␣C<minline>␣should␣be␣present␣if
C<MinLine>␣method␣is␣not␣dummy.␣␣C<autohistory>␣should␣be␣present␣if
lines␣are␣put␣into␣history␣automatically␣(maybe␣subject␣to
C<MinLine>),␣and␣C<addhistory>␣if␣C<addhistory>␣method␣is␣not␣dummy.

If␣C<Features>␣method␣reports␣a␣feature␣C<attribs>␣as␣present,␣the
method␣C<Attribs>␣is␣not␣dummy.

=back

=head1␣Additional␣supported␣functions

Actually␣C<Term::ReadLine>␣can␣use␣some␣other␣package,␣that␣will
support␣a␣richer␣set␣of␣commands.

All␣these␣commands␣are␣callable␣via␣method␣interface␣and␣have␣names
which␣conform␣to␣standard␣conventions␣with␣the␣leading␣C<rl_>␣stripped.

The␣stub␣package␣included␣with␣the␣perl␣distribution␣allows␣some
additional␣methods:␣

=over␣12

=item␣C<tkRunning>

makes␣Tk␣event␣loop␣run␣when␣waiting␣for␣user␣input␣(i.e.,␣during
C<readline>␣method).

=item␣C<ornaments>

makes␣the␣command␣line␣stand␣out␣by␣using␣termcap␣data.␣␣The␣argument
to␣C<ornaments>␣should␣be␣0,␣1,␣or␣a␣string␣of␣a␣form
C<"aa,bb,cc,dd">.␣␣Four␣components␣of␣this␣string␣should␣be␣names␣of
I<terminal␣capacities>,␣first␣two␣will␣be␣issued␣to␣make␣the␣prompt
standout,␣last␣two␣to␣make␣the␣input␣line␣standout.

=item␣C<newTTY>

takes␣two␣arguments␣which␣are␣input␣filehandle␣and␣output␣filehandle.
Switches␣to␣use␣these␣filehandles.

=back

One␣can␣check␣whether␣the␣currently␣loaded␣ReadLine␣package␣supports
these␣methods␣by␣checking␣for␣corresponding␣C<Features>.

=head1␣EXPORTS

None

=head1␣ENVIRONMENT

The␣environment␣variable␣C<PERL_RL>␣governs␣which␣ReadLine␣clone␣is
loaded.␣If␣the␣value␣is␣false,␣a␣dummy␣interface␣is␣used.␣If␣the␣value
is␣true,␣it␣should␣be␣tail␣of␣the␣name␣of␣the␣package␣to␣use,␣such␣as
C<Perl>␣or␣C<Gnu>.␣␣

As␣a␣special␣case,␣if␣the␣value␣of␣this␣variable␣is␣space-separated,
the␣tail␣might␣be␣used␣to␣disable␣the␣ornaments␣by␣setting␣the␣tail␣to
be␣C<o=0>␣or␣C<ornaments=0>.␣␣The␣head␣should␣be␣as␣described␣above,␣say

If␣the␣variable␣is␣not␣set,␣or␣if␣the␣head␣of␣space-separated␣list␣is
empty,␣the␣best␣available␣package␣is␣loaded.

␣␣export␣"PERL_RL=Perl␣o=0"	#␣Use␣Perl␣ReadLine␣without␣ornaments
␣␣export␣"PERL_RL=␣o=0"		#␣Use␣best␣available␣ReadLine␣without␣ornaments

(Note␣that␣processing␣of␣C<PERL_RL>␣for␣ornaments␣is␣in␣the␣discretion␣of␣the␣
particular␣used␣C<Term::ReadLine::*>␣package).

=head1␣CAVEATS

It␣seems␣that␣using␣Term::ReadLine␣from␣Emacs␣minibuffer␣doesn't␣work
quite␣right␣and␣one␣will␣get␣an␣error␣message␣like

␣␣␣␣Cannot␣open␣/dev/tty␣for␣read␣at␣...

One␣possible␣workaround␣for␣this␣is␣to␣explicitly␣open␣/dev/tty␣like␣this

␣␣␣␣open␣(FH,␣"/dev/tty"␣)
␣␣␣␣␣␣or␣eval␣'sub␣Term::ReadLine::findConsole␣{␣("&STDIN",␣"&STDERR")␣}';
␣␣␣␣die␣$@␣if␣$@;
␣␣␣␣close␣(FH);

or␣you␣can␣try␣using␣the␣4-argument␣form␣of␣Term::ReadLine->new().

=cut
----------
Range: (6961667,6965068) (3401)
=pod

=head1␣NAME

Term::UI␣-␣Term::ReadLine␣UI␣made␣easy

=head1␣SYNOPSIS

␣␣␣␣use␣Term::UI;
␣␣␣␣use␣Term::ReadLine;

␣␣␣␣my␣$term␣=␣Term::ReadLine->new('brand');

␣␣␣␣my␣$reply␣=␣$term->get_reply(
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣prompt␣=>␣'What␣is␣your␣favourite␣colour?',
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣choices␣=>␣[qw|blue␣red␣green|],
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣default␣=>␣blue,
␣␣␣␣);

␣␣␣␣my␣$bool␣=␣$term->ask_yn(
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣prompt␣=>␣'Do␣you␣like␣cookies?',
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣default␣=>␣'y',
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣);


␣␣␣␣my␣$string␣=␣q[some_command␣-option␣--no-foo␣--quux='this␣thing'];

␣␣␣␣my␣($options,$munged_input)␣=␣$term->parse_options($string);


␣␣␣␣###␣don't␣have␣Term::UI␣issue␣warnings␣--␣default␣is␣'1'
␣␣␣␣$Term::UI::VERBOSE␣=␣0;

␣␣␣␣###␣always␣pick␣the␣default␣(good␣for␣non-interactive␣terms)
␣␣␣␣###␣--␣default␣is␣'0'
␣␣␣␣$Term::UI::AUTOREPLY␣=␣1;
␣␣␣␣
␣␣␣␣###␣Retrieve␣the␣entire␣session␣as␣a␣printable␣string:
␣␣␣␣$hist␣=␣Term::UI::History->history_as_string;
␣␣␣␣$hist␣=␣$term->history_as_string;

=head1␣DESCRIPTION

C<Term::UI>␣is␣a␣transparent␣way␣of␣eliminating␣the␣overhead␣of␣having
to␣format␣a␣question␣and␣then␣validate␣the␣reply,␣informing␣the␣user
if␣the␣answer␣was␣not␣proper␣and␣re-issuing␣the␣question.

Simply␣give␣it␣the␣question␣you␣want␣to␣ask,␣optionally␣with␣choices
the␣user␣can␣pick␣from␣and␣a␣default␣and␣C<Term::UI>␣will␣DWYM.

For␣asking␣a␣yes␣or␣no␣question,␣there's␣even␣a␣shortcut.

=head1␣HOW␣IT␣WORKS

C<Term::UI>␣places␣itself␣at␣the␣back␣of␣the␣C<Term::ReadLine>␣
C<@ISA>␣array,␣so␣you␣can␣call␣its␣functions␣through␣your␣term␣object.

C<Term::UI>␣uses␣C<Term::UI::History>␣to␣record␣all␣interactions
with␣the␣commandline.␣You␣can␣retrieve␣this␣history,␣or␣alter
the␣filehandle␣the␣interaction␣is␣printed␣to.␣See␣the␣
C<Term::UI::History>␣manpage␣or␣the␣C<SYNOPSIS>␣for␣details.

=head1␣METHODS

=head2␣$reply␣=␣$term->get_reply(␣prompt␣=>␣'question?',␣[choices␣=>␣\@list,␣default␣=>␣$list[0],␣multi␣=>␣BOOL,␣print_me␣=>␣"extra␣text␣to␣print␣&␣record",␣allow␣=>␣$ref]␣);

C<get_reply>␣asks␣a␣user␣a␣question,␣and␣then␣returns␣the␣reply␣to␣the
caller.␣If␣the␣answer␣is␣invalid␣(more␣on␣that␣below),␣the␣question␣will
be␣reposed,␣until␣a␣satisfactory␣answer␣has␣been␣entered.

You␣have␣the␣option␣of␣providing␣a␣list␣of␣choices␣the␣user␣can␣pick␣from
using␣the␣C<choices>␣argument.␣If␣the␣answer␣is␣not␣in␣the␣list␣of␣choices
presented,␣the␣question␣will␣be␣reposed.

If␣you␣provide␣a␣C<default>␣␣answer,␣this␣will␣be␣returned␣when␣either
C<$AUTOREPLY>␣is␣set␣to␣true,␣(see␣the␣C<GLOBAL␣VARIABLES>␣section␣further
below),␣or␣when␣the␣user␣just␣hits␣C<enter>.

You␣can␣indicate␣that␣the␣user␣is␣allowed␣to␣enter␣multiple␣answers␣by
toggling␣the␣C<multi>␣flag.␣Note␣that␣a␣list␣of␣answers␣will␣then␣be
returned␣to␣you,␣rather␣than␣a␣simple␣string.

By␣specifying␣an␣C<allow>␣hander,␣you␣can␣yourself␣validate␣the␣answer
a␣user␣gives.␣This␣can␣be␣any␣of␣the␣types␣that␣the␣Params::Check␣C<allow>␣
function␣allows,␣so␣please␣refer␣to␣that␣manpage␣for␣details.␣

Finally,␣you␣have␣the␣option␣of␣adding␣a␣C<print_me>␣argument,␣which␣is
simply␣printed␣before␣the␣prompt.␣It's␣printed␣to␣the␣same␣file␣handle
as␣the␣rest␣of␣the␣questions,␣so␣you␣can␣use␣this␣to␣keep␣track␣of␣a
full␣session␣of␣Q&A␣with␣the␣user,␣and␣retrieve␣it␣later␣using␣the
C<<␣Term::UI->history_as_string␣>>␣function.

See␣the␣C<EXAMPLES>␣section␣for␣samples␣of␣how␣to␣use␣this␣function.

=cut
----------
Range: (6976171,6981490) (5319)
=head1␣GLOBAL␣VARIABLES

The␣behaviour␣of␣Term::UI␣can␣be␣altered␣by␣changing␣the␣following
global␣variables:

=head2␣$Term::UI::VERBOSE

This␣controls␣whether␣Term::UI␣will␣issue␣warnings␣and␣explanations
as␣to␣why␣certain␣things␣may␣have␣failed.␣If␣you␣set␣it␣to␣0,
Term::UI␣will␣not␣output␣any␣warnings.
The␣default␣is␣1;

=head2␣$Term::UI::AUTOREPLY

This␣will␣make␣every␣question␣be␣answered␣by␣the␣default,␣and␣warn␣if
there␣was␣no␣default␣provided.␣This␣is␣particularly␣useful␣if␣your
program␣is␣run␣in␣non-interactive␣mode.
The␣default␣is␣0;

=head2␣$Term::UI::INVALID

This␣holds␣the␣string␣that␣will␣be␣printed␣when␣the␣user␣makes␣an
invalid␣choice.
You␣can␣override␣this␣string␣from␣your␣program␣if␣you,␣for␣example,
wish␣to␣do␣localization.
The␣default␣is␣C<Invalid␣selection,␣please␣try␣again:␣>

=head2␣$Term::UI::History::HISTORY_FH

This␣is␣the␣filehandle␣all␣the␣print␣statements␣from␣this␣module
are␣being␣sent␣to.␣Please␣consult␣the␣C<Term::UI::History>␣manpage
for␣details.

This␣defaults␣to␣C<*STDOUT>.

=head1␣EXAMPLES

=head2␣Basic␣get_reply␣sample

␣␣␣␣###␣ask␣a␣user␣(with␣an␣open␣question)␣for␣their␣favourite␣colour
␣␣␣␣$reply␣=␣$term->get_reply(␣prompt␣=>␣'Your␣favourite␣colour?␣);
␣␣␣␣
which␣would␣look␣like:

␣␣␣␣Your␣favourite␣colour?␣

and␣C<$reply>␣would␣hold␣the␣text␣the␣user␣typed.

=head2␣get_reply␣with␣choices

␣␣␣␣###␣now␣provide␣a␣list␣of␣choices,␣so␣the␣user␣has␣to␣pick␣one
␣␣␣␣$reply␣=␣$term->get_reply(
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣prompt␣␣=>␣'Your␣favourite␣colour?',
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣choices␣=>␣[qw|red␣green␣blue|]␣);
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣
which␣would␣look␣like:

␣␣␣␣␣␣1>␣red
␣␣␣␣␣␣2>␣green
␣␣␣␣␣␣3>␣blue
␣␣␣␣
␣␣␣␣Your␣favourite␣colour?␣
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣
C<$reply>␣will␣hold␣one␣of␣the␣choices␣presented.␣C<Term::UI>␣will␣repose
the␣question␣if␣the␣user␣attempts␣to␣enter␣an␣answer␣that's␣not␣in␣the
list␣of␣choices.␣The␣string␣presented␣is␣held␣in␣the␣C<$Term::UI::INVALID>
variable␣(see␣the␣C<GLOBAL␣VARIABLES>␣section␣for␣details.

=head2␣get_reply␣with␣choices␣and␣default

␣␣␣␣###␣provide␣a␣sensible␣default␣option␣--␣everyone␣loves␣blue!
␣␣␣␣$reply␣=␣$term->get_reply(
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣prompt␣␣=>␣'Your␣favourite␣colour?',
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣choices␣=>␣[qw|red␣green␣blue|],
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣default␣=>␣'blue'␣);

which␣would␣look␣like:

␣␣␣␣␣␣1>␣red
␣␣␣␣␣␣2>␣green
␣␣␣␣␣␣3>␣blue
␣␣␣␣
␣␣␣␣Your␣favourite␣colour?␣[3]:␣␣

Note␣the␣default␣answer␣after␣the␣prompt.␣A␣user␣can␣now␣just␣hit␣C<enter>
(or␣set␣C<$Term::UI::AUTOREPLY>␣--␣see␣the␣C<GLOBAL␣VARIABLES>␣section)␣and
the␣sensible␣answer␣'blue'␣will␣be␣returned.

=head2␣get_reply␣using␣print_me␣&␣multi

␣␣␣␣###␣allow␣the␣user␣to␣pick␣more␣than␣one␣colour␣and␣add␣an␣
␣␣␣␣###␣introduction␣text
␣␣␣␣@reply␣=␣$term->get_reply(
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣print_me␣␣␣␣=>␣'Tell␣us␣what␣colours␣you␣like',␣
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣prompt␣␣␣␣␣␣=>␣'Your␣favourite␣colours?',
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣choices␣␣␣␣␣=>␣[qw|red␣green␣blue|],
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣multi␣␣␣␣␣␣␣=>␣1␣);

which␣would␣look␣like:

␣␣␣␣Tell␣us␣what␣colours␣you␣like
␣␣␣␣␣␣1>␣red
␣␣␣␣␣␣2>␣green
␣␣␣␣␣␣3>␣blue
␣␣␣␣
␣␣␣␣Your␣favourite␣colours?

An␣answer␣of␣C<3␣2␣1>␣would␣fill␣C<@reply>␣with␣C<blue␣green␣red>

=head2␣get_reply␣&␣allow

␣␣␣␣###␣pose␣an␣open␣question,␣but␣do␣a␣custom␣verification␣on␣
␣␣␣␣###␣the␣answer,␣which␣will␣only␣exit␣the␣question␣loop,␣if␣
␣␣␣␣###␣the␣answer␣matches␣the␣allow␣handler.
␣␣␣␣$reply␣=␣$term->get_reply(
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣prompt␣␣=>␣"What␣is␣the␣magic␣number?",
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣allow␣␣␣=>␣42␣);
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣
Unless␣the␣user␣now␣enters␣C<42>,␣the␣question␣will␣be␣reposed␣over
and␣over␣again.␣You␣can␣use␣more␣sophisticated␣C<allow>␣handlers␣(even
subroutines␣can␣be␣used).␣The␣C<allow>␣handler␣is␣implemented␣using
C<Params::Check>'s␣C<allow>␣function.␣Check␣its␣manpage␣for␣details.

=head2␣an␣elaborate␣ask_yn␣sample

␣␣␣␣###␣ask␣a␣user␣if␣he␣likes␣cookies.␣Default␣to␣a␣sensible␣'yes'
␣␣␣␣###␣and␣inform␣him␣first␣what␣cookies␣are.
␣␣␣␣$bool␣=␣$term->ask_yn(␣prompt␣␣␣=>␣'Do␣you␣like␣cookies?',
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣default␣␣=>␣'y',
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣print_me␣=>␣'Cookies␣are␣LOVELY!!!'␣);␣

would␣print:␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣

␣␣␣␣Cookies␣are␣LOVELY!!!
␣␣␣␣Do␣you␣like␣cookies?␣[Y/n]:␣

If␣a␣user␣then␣simply␣hits␣C<enter>,␣agreeing␣with␣the␣default,␣
C<$bool>␣would␣be␣set␣to␣C<true>.␣(Simply␣hitting␣'y'␣would␣also␣
return␣C<true>.␣Hitting␣'n'␣would␣return␣C<false>)

We␣could␣later␣retrieve␣this␣interaction␣by␣printing␣out␣the␣Q&A␣
history␣as␣follows:

␣␣␣␣print␣$term->history_as_string;

which␣would␣then␣print:

␣␣␣␣Cookies␣are␣LOVELY!!!
␣␣␣␣Do␣you␣like␣cookies?␣[Y/n]:␣␣y

There's␣a␣chance␣we're␣doing␣this␣non-interactively,␣because␣a␣console
is␣missing,␣the␣user␣indicated␣he␣just␣wanted␣the␣defaults,␣etc.

In␣this␣case,␣simply␣setting␣C<$Term::UI::AUTOREPLY>␣to␣true,␣will
return␣from␣every␣question␣with␣the␣default␣answer␣set␣for␣the␣question.
Do␣note␣that␣if␣C<AUTOREPLY>␣is␣true,␣and␣no␣default␣is␣set,␣C<Term::UI>
will␣warn␣about␣this␣and␣return␣C<undef>.

=head1␣See␣Also

C<Params::Check>,␣C<Term::ReadLine>,␣C<Term::UI::History>

=head1␣BUG␣REPORTS

Please␣report␣bugs␣or␣other␣issues␣to␣E<lt>bug-term-ui@rt.cpan.org<gt>.

=head1␣AUTHOR

This␣module␣by␣Jos␣Boumans␣E<lt>kane@cpan.orgE<gt>.

=head1␣COPYRIGHT

This␣library␣is␣free␣software;␣you␣may␣redistribute␣and/or␣modify␣it␣
under␣the␣same␣terms␣as␣Perl␣itself.

=cut
----------
Range: (6994923,6996905) (1982)
}

=item␣B<Tgetent>

Returns␣a␣blessed␣object␣reference␣which␣the␣user␣can
then␣use␣to␣send␣the␣control␣strings␣to␣the␣terminal␣using␣B<Tputs>
and␣B<Tgoto>.

The␣function␣extracts␣the␣entry␣of␣the␣specified␣terminal
type␣I<TERM>␣(defaults␣to␣the␣environment␣variable␣I<TERM>)␣from␣the
database.

It␣will␣look␣in␣the␣environment␣for␣a␣I<TERMCAP>␣variable.␣␣If
found,␣and␣the␣value␣does␣not␣begin␣with␣a␣slash,␣and␣the␣terminal
type␣name␣is␣the␣same␣as␣the␣environment␣string␣I<TERM>,␣the
I<TERMCAP>␣string␣is␣used␣instead␣of␣reading␣a␣termcap␣file.␣␣If
it␣does␣begin␣with␣a␣slash,␣the␣string␣is␣used␣as␣a␣path␣name␣of
the␣termcap␣file␣to␣search.␣␣If␣I<TERMCAP>␣does␣not␣begin␣with␣a
slash␣and␣name␣is␣different␣from␣I<TERM>,␣B<Tgetent>␣searches␣the
files␣F<$HOME/.termcap>,␣F</etc/termcap>,␣and␣F</usr/share/misc/termcap>,
in␣that␣order,␣unless␣the␣environment␣variable␣I<TERMPATH>␣exists,
in␣which␣case␣it␣specifies␣a␣list␣of␣file␣pathnames␣(separated␣by
spaces␣or␣colons)␣to␣be␣searched␣B<instead>.␣␣Whenever␣multiple
files␣are␣searched␣and␣a␣tc␣field␣occurs␣in␣the␣requested␣entry,
the␣entry␣it␣names␣must␣be␣found␣in␣the␣same␣file␣or␣one␣of␣the
succeeding␣files.␣␣If␣there␣is␣a␣C<:tc=...:>␣in␣the␣I<TERMCAP>
environment␣variable␣string␣it␣will␣continue␣the␣search␣in␣the
files␣as␣above.

The␣extracted␣termcap␣entry␣is␣available␣in␣the␣object
as␣C<$self-E<gt>{TERMCAP}>.

It␣takes␣a␣hash␣reference␣as␣an␣argument␣with␣two␣optional␣keys:

=over␣2

=item␣OSPEED

The␣terminal␣output␣bit␣rate␣(often␣mistakenly␣called␣the␣baud␣rate)
for␣this␣terminal␣-␣if␣not␣set␣a␣warning␣will␣be␣generated
and␣it␣will␣be␣defaulted␣to␣9600.␣␣I<OSPEED>␣can␣be␣be␣specified␣as
either␣a␣POSIX␣termios/SYSV␣termio␣speeds␣(where␣9600␣equals␣9600)␣or
an␣old␣DSD-style␣speed␣(␣where␣13␣equals␣9600).


=item␣TERM

The␣terminal␣type␣whose␣termcap␣entry␣will␣be␣used␣-␣if␣not␣supplied␣it␣will
default␣to␣$ENV{TERM}:␣if␣that␣is␣not␣set␣then␣B<Tgetent>␣will␣croak.

=back

It␣calls␣C<croak>␣on␣failure.

=cut
----------
Range: (7015750,7021337) (5587)
=head1␣NAME

Tie::Hash,␣Tie::StdHash,␣Tie::ExtraHash␣-␣base␣class␣definitions␣for␣tied␣hashes

=head1␣SYNOPSIS

␣␣␣␣package␣NewHash;
␣␣␣␣require␣Tie::Hash;

␣␣␣␣@ISA␣=␣qw(Tie::Hash);

␣␣␣␣sub␣DELETE␣{␣...␣}		#␣Provides␣needed␣method
␣␣␣␣sub␣CLEAR␣{␣...␣}		#␣Overrides␣inherited␣method


␣␣␣␣package␣NewStdHash;
␣␣␣␣require␣Tie::Hash;

␣␣␣␣@ISA␣=␣qw(Tie::StdHash);

␣␣␣␣#␣All␣methods␣provided␣by␣default,␣define␣only␣those␣needing␣overrides
␣␣␣␣#␣Accessors␣access␣the␣storage␣in␣%{$_[0]};
␣␣␣␣#␣TIEHASH␣should␣return␣a␣reference␣to␣the␣actual␣storage
␣␣␣␣sub␣DELETE␣{␣...␣}

␣␣␣␣package␣NewExtraHash;
␣␣␣␣require␣Tie::Hash;

␣␣␣␣@ISA␣=␣qw(Tie::ExtraHash);

␣␣␣␣#␣All␣methods␣provided␣by␣default,␣define␣only␣those␣needing␣overrides
␣␣␣␣#␣Accessors␣access␣the␣storage␣in␣%{$_[0][0]};
␣␣␣␣#␣TIEHASH␣should␣return␣an␣array␣reference␣with␣the␣first␣element␣being
␣␣␣␣#␣the␣reference␣to␣the␣actual␣storage␣
␣␣␣␣sub␣DELETE␣{␣
␣␣␣␣␣␣$_[0][1]->('del',␣$_[0][0],␣$_[1]);␣#␣Call␣the␣report␣writer
␣␣␣␣␣␣delete␣$_[0][0]->{$_[1]};		␣␣#␣␣$_[0]->SUPER::DELETE($_[1])
␣␣␣␣}


␣␣␣␣package␣main;

␣␣␣␣tie␣%new_hash,␣'NewHash';
␣␣␣␣tie␣%new_std_hash,␣'NewStdHash';
␣␣␣␣tie␣%new_extra_hash,␣'NewExtraHash',
	sub␣{warn␣"Doing␣\U$_[1]\E␣of␣$_[2].\n"};

=head1␣DESCRIPTION

This␣module␣provides␣some␣skeletal␣methods␣for␣hash-tying␣classes.␣See
L<perltie>␣for␣a␣list␣of␣the␣functions␣required␣in␣order␣to␣tie␣a␣hash
to␣a␣package.␣The␣basic␣B<Tie::Hash>␣package␣provides␣a␣C<new>␣method,␣as␣well
as␣methods␣C<TIEHASH>,␣C<EXISTS>␣and␣C<CLEAR>.␣The␣B<Tie::StdHash>␣and
B<Tie::ExtraHash>␣packages
provide␣most␣methods␣for␣hashes␣described␣in␣L<perltie>␣(the␣exceptions
are␣C<UNTIE>␣and␣C<DESTROY>).␣␣They␣cause␣tied␣hashes␣to␣behave␣exactly␣like␣standard␣hashes,
and␣allow␣for␣selective␣overwriting␣of␣methods.␣␣B<Tie::Hash>␣grandfathers␣the
C<new>␣method:␣it␣is␣used␣if␣C<TIEHASH>␣is␣not␣defined
in␣the␣case␣a␣class␣forgets␣to␣include␣a␣C<TIEHASH>␣method.

For␣developers␣wishing␣to␣write␣their␣own␣tied␣hashes,␣the␣required␣methods
are␣briefly␣defined␣below.␣See␣the␣L<perltie>␣section␣for␣more␣detailed
descriptive,␣as␣well␣as␣example␣code:

=over␣4

=item␣TIEHASH␣classname,␣LIST

The␣method␣invoked␣by␣the␣command␣C<tie␣%hash,␣classname>.␣Associates␣a␣new
hash␣instance␣with␣the␣specified␣class.␣C<LIST>␣would␣represent␣additional
arguments␣(along␣the␣lines␣of␣L<AnyDBM_File>␣and␣compatriots)␣needed␣to
complete␣the␣association.

=item␣STORE␣this,␣key,␣value

Store␣datum␣I<value>␣into␣I<key>␣for␣the␣tied␣hash␣I<this>.

=item␣FETCH␣this,␣key

Retrieve␣the␣datum␣in␣I<key>␣for␣the␣tied␣hash␣I<this>.

=item␣FIRSTKEY␣this

Return␣the␣first␣key␣in␣the␣hash.

=item␣NEXTKEY␣this,␣lastkey

Return␣the␣next␣key␣in␣the␣hash.

=item␣EXISTS␣this,␣key

Verify␣that␣I<key>␣exists␣with␣the␣tied␣hash␣I<this>.

The␣B<Tie::Hash>␣implementation␣is␣a␣stub␣that␣simply␣croaks.

=item␣DELETE␣this,␣key

Delete␣the␣key␣I<key>␣from␣the␣tied␣hash␣I<this>.

=item␣CLEAR␣this

Clear␣all␣values␣from␣the␣tied␣hash␣I<this>.

=item␣SCALAR␣this

Returns␣what␣evaluating␣the␣hash␣in␣scalar␣context␣yields.

B<Tie::Hash>␣does␣not␣implement␣this␣method␣(but␣B<Tie::StdHash>
and␣B<Tie::ExtraHash>␣do).

=back

=head1␣Inheriting␣from␣B<Tie::StdHash>

The␣accessor␣methods␣assume␣that␣the␣actual␣storage␣for␣the␣data␣in␣the␣tied
hash␣is␣in␣the␣hash␣referenced␣by␣C<tied(%tiedhash)>.␣␣Thus␣overwritten
C<TIEHASH>␣method␣should␣return␣a␣hash␣reference,␣and␣the␣remaining␣methods
should␣operate␣on␣the␣hash␣referenced␣by␣the␣first␣argument:

␣␣package␣ReportHash;
␣␣our␣@ISA␣=␣'Tie::StdHash';

␣␣sub␣TIEHASH␣␣{
␣␣␣␣my␣$storage␣=␣bless␣{},␣shift;
␣␣␣␣warn␣"New␣ReportHash␣created,␣stored␣in␣$storage.\n";
␣␣␣␣$storage
␣␣}
␣␣sub␣STORE␣␣␣␣{
␣␣␣␣warn␣"Storing␣data␣with␣key␣$_[1]␣at␣$_[0].\n";
␣␣␣␣$_[0]{$_[1]}␣=␣$_[2]
␣␣}


=head1␣Inheriting␣from␣B<Tie::ExtraHash>

The␣accessor␣methods␣assume␣that␣the␣actual␣storage␣for␣the␣data␣in␣the␣tied
hash␣is␣in␣the␣hash␣referenced␣by␣C<(tied(%tiedhash))-E<gt>[0]>.␣␣Thus␣overwritten
C<TIEHASH>␣method␣should␣return␣an␣array␣reference␣with␣the␣first
element␣being␣a␣hash␣reference,␣and␣the␣remaining␣methods␣should␣operate␣on␣the
hash␣C<<␣%{␣$_[0]->[0]␣}␣>>:

␣␣package␣ReportHash;
␣␣our␣@ISA␣=␣'Tie::ExtraHash';

␣␣sub␣TIEHASH␣␣{
␣␣␣␣my␣$class␣=␣shift;
␣␣␣␣my␣$storage␣=␣bless␣[{},␣@_],␣$class;
␣␣␣␣warn␣"New␣ReportHash␣created,␣stored␣in␣$storage.\n";
␣␣␣␣$storage;
␣␣}
␣␣sub␣STORE␣␣␣␣{
␣␣␣␣warn␣"Storing␣data␣with␣key␣$_[1]␣at␣$_[0].\n";
␣␣␣␣$_[0][0]{$_[1]}␣=␣$_[2]
␣␣}

The␣default␣C<TIEHASH>␣method␣stores␣"extra"␣arguments␣to␣tie()␣starting
from␣offset␣1␣in␣the␣array␣referenced␣by␣C<tied(%tiedhash)>;␣this␣is␣the
same␣storage␣algorithm␣as␣in␣TIEHASH␣subroutine␣above.␣␣Hence,␣a␣typical
package␣inheriting␣from␣B<Tie::ExtraHash>␣does␣not␣need␣to␣overwrite␣this
method.

=head1␣C<SCALAR>,␣C<UNTIE>␣and␣C<DESTROY>

The␣methods␣C<UNTIE>␣and␣C<DESTROY>␣are␣not␣defined␣in␣B<Tie::Hash>,
B<Tie::StdHash>,␣or␣B<Tie::ExtraHash>.␣␣Tied␣hashes␣do␣not␣require
presence␣of␣these␣methods,␣but␣if␣defined,␣the␣methods␣will␣be␣called␣in
proper␣time,␣see␣L<perltie>.

C<SCALAR>␣is␣only␣defined␣in␣B<Tie::StdHash>␣and␣B<Tie::ExtraHash>.

If␣needed,␣these␣methods␣should␣be␣defined␣by␣the␣package␣inheriting␣from
B<Tie::Hash>,␣B<Tie::StdHash>,␣or␣B<Tie::ExtraHash>.␣See␣L<perltie/"SCALAR">
to␣find␣out␣what␣happens␣when␣C<SCALAR>␣does␣not␣exist.

=head1␣MORE␣INFORMATION

The␣packages␣relating␣to␣various␣DBM-related␣implementations␣(F<DB_File>,
F<NDBM_File>,␣etc.)␣show␣examples␣of␣general␣tied␣hashes,␣as␣does␣the
L<Config>␣module.␣While␣these␣do␣not␣utilize␣B<Tie::Hash>,␣they␣serve␣as
good␣working␣examples.

=cut
----------
Range: (7079664,7082440) (2776)
=head1␣NAME

Tie::Scalar,␣Tie::StdScalar␣-␣base␣class␣definitions␣for␣tied␣scalars

=head1␣SYNOPSIS

␣␣␣␣package␣NewScalar;
␣␣␣␣require␣Tie::Scalar;

␣␣␣␣@ISA␣=␣qw(Tie::Scalar);

␣␣␣␣sub␣FETCH␣{␣...␣}		#␣Provide␣a␣needed␣method
␣␣␣␣sub␣TIESCALAR␣{␣...␣}	#␣Overrides␣inherited␣method


␣␣␣␣package␣NewStdScalar;
␣␣␣␣require␣Tie::Scalar;

␣␣␣␣@ISA␣=␣qw(Tie::StdScalar);

␣␣␣␣#␣All␣methods␣provided␣by␣default,␣so␣define␣only␣what␣needs␣be␣overridden
␣␣␣␣sub␣FETCH␣{␣...␣}


␣␣␣␣package␣main;

␣␣␣␣tie␣$new_scalar,␣'NewScalar';
␣␣␣␣tie␣$new_std_scalar,␣'NewStdScalar';

=head1␣DESCRIPTION

This␣module␣provides␣some␣skeletal␣methods␣for␣scalar-tying␣classes.␣See
L<perltie>␣for␣a␣list␣of␣the␣functions␣required␣in␣tying␣a␣scalar␣to␣a
package.␣The␣basic␣B<Tie::Scalar>␣package␣provides␣a␣C<new>␣method,␣as␣well
as␣methods␣C<TIESCALAR>,␣C<FETCH>␣and␣C<STORE>.␣The␣B<Tie::StdScalar>
package␣provides␣all␣the␣methods␣specified␣in␣␣L<perltie>.␣It␣inherits␣from
B<Tie::Scalar>␣and␣causes␣scalars␣tied␣to␣it␣to␣behave␣exactly␣like␣the
built-in␣scalars,␣allowing␣for␣selective␣overloading␣of␣methods.␣The␣C<new>
method␣is␣provided␣as␣a␣means␣of␣grandfathering,␣for␣classes␣that␣forget␣to
provide␣their␣own␣C<TIESCALAR>␣method.

For␣developers␣wishing␣to␣write␣their␣own␣tied-scalar␣classes,␣the␣methods
are␣summarized␣below.␣The␣L<perltie>␣section␣not␣only␣documents␣these,␣but
has␣sample␣code␣as␣well:

=over␣4

=item␣TIESCALAR␣classname,␣LIST

The␣method␣invoked␣by␣the␣command␣C<tie␣$scalar,␣classname>.␣Associates␣a␣new
scalar␣instance␣with␣the␣specified␣class.␣C<LIST>␣would␣represent␣additional
arguments␣(along␣the␣lines␣of␣L<AnyDBM_File>␣and␣compatriots)␣needed␣to
complete␣the␣association.

=item␣FETCH␣this

Retrieve␣the␣value␣of␣the␣tied␣scalar␣referenced␣by␣I<this>.

=item␣STORE␣this,␣value

Store␣data␣I<value>␣in␣the␣tied␣scalar␣referenced␣by␣I<this>.

=item␣DESTROY␣this

Free␣the␣storage␣associated␣with␣the␣tied␣scalar␣referenced␣by␣I<this>.
This␣is␣rarely␣needed,␣as␣Perl␣manages␣its␣memory␣quite␣well.␣But␣the
option␣exists,␣should␣a␣class␣wish␣to␣perform␣specific␣actions␣upon␣the
destruction␣of␣an␣instance.

=back

=head2␣Tie::Scalar␣vs␣Tie::StdScalar

C<<␣Tie::Scalar␣>>␣provides␣all␣the␣necessary␣methods,␣but␣one␣should␣realize
they␣do␣not␣do␣anything␣useful.␣Calling␣C<<␣Tie::Scalar::FETCH␣>>␣or␣
C<<␣Tie::Scalar::STORE␣>>␣results␣in␣a␣(trappable)␣croak.␣And␣if␣you␣inherit
from␣C<<␣Tie::Scalar␣>>,␣you␣I<must>␣provide␣either␣a␣C<<␣new␣>>␣or␣a
C<<␣TIESCALAR␣>>␣method.␣

If␣you␣are␣looking␣for␣a␣class␣that␣does␣everything␣for␣you␣you␣don't
define␣yourself,␣use␣the␣C<<␣Tie::StdScalar␣>>␣class,␣not␣the
C<<␣Tie::Scalar␣>>␣one.

=head1␣MORE␣INFORMATION

The␣L<perltie>␣section␣uses␣a␣good␣example␣of␣tying␣scalars␣by␣associating
process␣IDs␣with␣priority.

=cut
----------
Range: (7083990,7086544) (2554)
=head1␣NAME

Tie::Handle␣-␣base␣class␣definitions␣for␣tied␣handles

=head1␣SYNOPSIS

␣␣␣␣package␣NewHandle;
␣␣␣␣require␣Tie::Handle;

␣␣␣␣@ISA␣=␣qw(Tie::Handle);

␣␣␣␣sub␣READ␣{␣...␣}		#␣Provide␣a␣needed␣method
␣␣␣␣sub␣TIEHANDLE␣{␣...␣}	#␣Overrides␣inherited␣method


␣␣␣␣package␣main;

␣␣␣␣tie␣*FH,␣'NewHandle';

=head1␣DESCRIPTION

This␣module␣provides␣some␣skeletal␣methods␣for␣handle-tying␣classes.␣See
L<perltie>␣for␣a␣list␣of␣the␣functions␣required␣in␣tying␣a␣handle␣to␣a␣package.
The␣basic␣B<Tie::Handle>␣package␣provides␣a␣C<new>␣method,␣as␣well␣as␣methods
C<TIEHANDLE>,␣C<PRINT>,␣C<PRINTF>␣and␣C<GETC>.␣

For␣developers␣wishing␣to␣write␣their␣own␣tied-handle␣classes,␣the␣methods
are␣summarized␣below.␣The␣L<perltie>␣section␣not␣only␣documents␣these,␣but
has␣sample␣code␣as␣well:

=over␣4

=item␣TIEHANDLE␣classname,␣LIST

The␣method␣invoked␣by␣the␣command␣C<tie␣*glob,␣classname>.␣Associates␣a␣new
glob␣instance␣with␣the␣specified␣class.␣C<LIST>␣would␣represent␣additional
arguments␣(along␣the␣lines␣of␣L<AnyDBM_File>␣and␣compatriots)␣needed␣to
complete␣the␣association.

=item␣WRITE␣this,␣scalar,␣length,␣offset

Write␣I<length>␣bytes␣of␣data␣from␣I<scalar>␣starting␣at␣I<offset>.

=item␣PRINT␣this,␣LIST

Print␣the␣values␣in␣I<LIST>

=item␣PRINTF␣this,␣format,␣LIST

Print␣the␣values␣in␣I<LIST>␣using␣I<format>

=item␣READ␣this,␣scalar,␣length,␣offset

Read␣I<length>␣bytes␣of␣data␣into␣I<scalar>␣starting␣at␣I<offset>.

=item␣READLINE␣this

Read␣a␣single␣line

=item␣GETC␣this

Get␣a␣single␣character

=item␣CLOSE␣this

Close␣the␣handle

=item␣OPEN␣this,␣filename

(Re-)open␣the␣handle

=item␣BINMODE␣this

Specify␣content␣is␣binary

=item␣EOF␣this

Test␣for␣end␣of␣file.

=item␣TELL␣this

Return␣position␣in␣the␣file.

=item␣SEEK␣this,␣offset,␣whence

Position␣the␣file.

Test␣for␣end␣of␣file.

=item␣DESTROY␣this

Free␣the␣storage␣associated␣with␣the␣tied␣handle␣referenced␣by␣I<this>.
This␣is␣rarely␣needed,␣as␣Perl␣manages␣its␣memory␣quite␣well.␣But␣the
option␣exists,␣should␣a␣class␣wish␣to␣perform␣specific␣actions␣upon␣the
destruction␣of␣an␣instance.

=back

=head1␣MORE␣INFORMATION

The␣L<perltie>␣section␣contains␣an␣example␣of␣tying␣handles.

=head1␣COMPATIBILITY

This␣version␣of␣Tie::Handle␣is␣neither␣related␣to␣nor␣compatible␣with
the␣Tie::Handle␣(3.0)␣module␣available␣on␣CPAN.␣It␣was␣due␣to␣an
accident␣that␣two␣modules␣with␣the␣same␣name␣appeared.␣The␣namespace
clash␣has␣been␣cleared␣in␣favor␣of␣this␣module␣that␣comes␣with␣the
perl␣core␣in␣September␣2000␣and␣accordingly␣the␣version␣number␣has
been␣bumped␣up␣to␣4.0.

=cut
----------
Range: (7088053,7090053) (2000)
=head1␣NAME

Tie::RefHash␣-␣use␣references␣as␣hash␣keys

=head1␣SYNOPSIS

␣␣␣␣require␣5.004;
␣␣␣␣use␣Tie::RefHash;
␣␣␣␣tie␣HASHVARIABLE,␣'Tie::RefHash',␣LIST;
␣␣␣␣tie␣HASHVARIABLE,␣'Tie::RefHash::Nestable',␣LIST;

␣␣␣␣untie␣HASHVARIABLE;

=head1␣DESCRIPTION

This␣module␣provides␣the␣ability␣to␣use␣references␣as␣hash␣keys␣if␣you
first␣C<tie>␣the␣hash␣variable␣to␣this␣module.␣␣Normally,␣only␣the
keys␣of␣the␣tied␣hash␣itself␣are␣preserved␣as␣references;␣to␣use
references␣as␣keys␣in␣hashes-of-hashes,␣use␣Tie::RefHash::Nestable,
included␣as␣part␣of␣Tie::RefHash.

It␣is␣implemented␣using␣the␣standard␣perl␣TIEHASH␣interface.␣␣Please
see␣the␣C<tie>␣entry␣in␣perlfunc(1)␣and␣perltie(1)␣for␣more␣information.

The␣Nestable␣version␣works␣by␣looking␣for␣hash␣references␣being␣stored
and␣converting␣them␣to␣tied␣hashes␣so␣that␣they␣too␣can␣have
references␣as␣keys.␣␣This␣will␣happen␣without␣warning␣whenever␣you
store␣a␣reference␣to␣one␣of␣your␣own␣hashes␣in␣the␣tied␣hash.

=head1␣EXAMPLE

␣␣␣␣use␣Tie::RefHash;
␣␣␣␣tie␣%h,␣'Tie::RefHash';
␣␣␣␣$a␣=␣[];
␣␣␣␣$b␣=␣{};
␣␣␣␣$c␣=␣\*main;
␣␣␣␣$d␣=␣\"gunk";
␣␣␣␣$e␣=␣sub␣{␣'foo'␣};
␣␣␣␣%h␣=␣($a␣=>␣1,␣$b␣=>␣2,␣$c␣=>␣3,␣$d␣=>␣4,␣$e␣=>␣5);
␣␣␣␣$a->[0]␣=␣'foo';
␣␣␣␣$b->{foo}␣=␣'bar';
␣␣␣␣for␣(keys␣%h)␣{
␣␣␣␣␣␣␣print␣ref($_),␣"\n";
␣␣␣␣}

␣␣␣␣tie␣%h,␣'Tie::RefHash::Nestable';
␣␣␣␣$h{$a}->{$b}␣=␣1;
␣␣␣␣for␣(keys␣%h,␣keys␣%{$h{$a}})␣{
␣␣␣␣␣␣␣print␣ref($_),␣"\n";
␣␣␣␣}

=head1␣THREAD␣SUPPORT

L<Tie::RefHash>␣fully␣supports␣threading␣using␣the␣C<CLONE>␣method.

=head1␣STORABLE␣SUPPORT

L<Storable>␣hooks␣are␣provided␣for␣semantically␣correct␣serialization␣and
cloning␣of␣tied␣refhashes.

=head1␣RELIC␣SUPPORT

This␣version␣of␣Tie::RefHash␣seems␣to␣no␣longer␣work␣with␣5.004.␣This␣has␣not
been␣throughly␣investigated.␣Patches␣welcome␣;-)

=head1␣MAINTAINER

Yuval␣Kogman␣E<lt>nothingmuch@woobling.orgE<gt>

=head1␣AUTHOR

Gurusamy␣Sarathy␣␣␣␣␣␣␣␣gsar@activestate.com

'Nestable'␣by␣Ed␣Avis␣␣␣ed@membled.com

=head1␣SEE␣ALSO

perl(1),␣perlfunc(1),␣perltie(1)

=cut
----------
Range: (7103665,7106256) (2591)
=head1␣NAME

Tie::Memoize␣-␣add␣data␣to␣hash␣when␣needed

=head1␣SYNOPSIS

␣␣require␣Tie::Memoize;
␣␣tie␣%hash,␣'Tie::Memoize',
␣␣␣␣␣␣\&fetch,			#␣The␣rest␣is␣optional
␣␣␣␣␣␣$DATA,␣\&exists,
␣␣␣␣␣␣{%ini_value},␣{%ini_existence};

=head1␣DESCRIPTION

This␣package␣allows␣a␣tied␣hash␣to␣autoload␣its␣values␣on␣the␣first␣access,
and␣to␣use␣the␣cached␣value␣on␣the␣following␣accesses.

Only␣read-accesses␣(via␣fetching␣the␣value␣or␣C<exists>)␣result␣in␣calls␣to
the␣functions;␣the␣modify-accesses␣are␣performed␣as␣on␣a␣normal␣hash.

The␣required␣arguments␣during␣C<tie>␣are␣the␣hash,␣the␣package,␣and
the␣reference␣to␣the␣C<FETCH>ing␣function.␣␣The␣optional␣arguments␣are
an␣arbitrary␣scalar␣$data,␣the␣reference␣to␣the␣C<EXISTS>␣function,
and␣initial␣values␣of␣the␣hash␣and␣of␣the␣existence␣cache.

Both␣the␣C<FETCH>ing␣function␣and␣the␣C<EXISTS>␣functions␣have␣the
same␣signature:␣the␣arguments␣are␣C<$key,␣$data>;␣$data␣is␣the␣same
value␣as␣given␣as␣argument␣during␣tie()ing.␣␣Both␣functions␣should
return␣an␣empty␣list␣if␣the␣value␣does␣not␣exist.␣␣If␣C<EXISTS>
function␣is␣different␣from␣the␣C<FETCH>ing␣function,␣it␣should␣return
a␣TRUE␣value␣on␣success.␣␣The␣C<FETCH>ing␣function␣should␣return␣the
intended␣value␣if␣the␣key␣is␣valid.

=head1␣Inheriting␣from␣B<Tie::Memoize>

The␣structure␣of␣the␣tied()␣data␣is␣an␣array␣reference␣with␣elements

␣␣0:␣␣cache␣of␣known␣values
␣␣1:␣␣cache␣of␣known␣existence␣of␣keys
␣␣2:␣␣FETCH␣␣function
␣␣3:␣␣EXISTS␣function
␣␣4:␣␣$data

The␣rest␣is␣for␣internal␣usage␣of␣this␣package.␣␣In␣particular,␣if
TIEHASH␣is␣overwritten,␣it␣should␣call␣SUPER::TIEHASH.

=head1␣EXAMPLE

␣␣sub␣slurp␣{
␣␣␣␣my␣($key,␣$dir)␣=␣shift;
␣␣␣␣open␣my␣$h,␣'<',␣"$dir/$key"␣or␣return;
␣␣␣␣local␣$/;␣<$h>			#␣slurp␣it␣all
␣␣}
␣␣sub␣exists␣{␣my␣($key,␣$dir)␣=␣shift;␣return␣-f␣"$dir/$key"␣}

␣␣tie␣%hash,␣'Tie::Memoize',␣\&slurp,␣$directory,␣\&exists,
␣␣␣␣␣␣{␣fake_file1␣=>␣$content1,␣fake_file2␣=>␣$content2␣},
␣␣␣␣␣␣{␣pretend_does_not_exists␣=>␣0,␣known_to_exist␣=>␣1␣};

This␣example␣treats␣the␣slightly␣modified␣contents␣of␣$directory␣as␣a
hash.␣␣The␣modifications␣are␣that␣the␣keys␣F<fake_file1>␣and
F<fake_file2>␣fetch␣values␣$content1␣and␣$content2,␣and
F<pretend_does_not_exists>␣will␣never␣be␣accessed.␣␣Additionally,␣the
existence␣of␣F<known_to_exist>␣is␣never␣checked␣(so␣if␣it␣does␣not
exists␣when␣its␣content␣is␣needed,␣the␣user␣of␣%hash␣may␣be␣confused).

=head1␣BUGS

FIRSTKEY␣and␣NEXTKEY␣methods␣go␣through␣the␣keys␣which␣were␣already␣read,
not␣all␣the␣possible␣keys␣of␣the␣hash.

=head1␣AUTHOR

Ilya␣Zakharevich␣L<mailto:perl-module-hash-memoize@ilyaz.org>.

=cut
----------
Range: (7106935,7109479) (2544)
=head1␣NAME

FindBin␣-␣Locate␣directory␣of␣original␣perl␣script

=head1␣SYNOPSIS

␣use␣FindBin;
␣use␣lib␣"$FindBin::Bin/../lib";

␣or

␣use␣FindBin␣qw($Bin);
␣use␣lib␣"$Bin/../lib";

=head1␣DESCRIPTION

Locates␣the␣full␣path␣to␣the␣script␣bin␣directory␣to␣allow␣the␣use
of␣paths␣relative␣to␣the␣bin␣directory.

This␣allows␣a␣user␣to␣setup␣a␣directory␣tree␣for␣some␣software␣with
directories␣C<<␣<root>/bin␣>>␣and␣C<<␣<root>/lib␣>>,␣and␣then␣the␣above
example␣will␣allow␣the␣use␣of␣modules␣in␣the␣lib␣directory␣without␣knowing
where␣the␣software␣tree␣is␣installed.

If␣perl␣is␣invoked␣using␣the␣B<-e>␣option␣or␣the␣perl␣script␣is␣read␣from
C<STDIN>␣then␣FindBin␣sets␣both␣C<$Bin>␣and␣C<$RealBin>␣to␣the␣current
directory.

=head1␣EXPORTABLE␣VARIABLES

␣$Bin␣␣␣␣␣␣␣␣␣-␣path␣to␣bin␣directory␣from␣where␣script␣was␣invoked
␣$Script␣␣␣␣␣␣-␣basename␣of␣script␣from␣which␣perl␣was␣invoked
␣$RealBin␣␣␣␣␣-␣$Bin␣with␣all␣links␣resolved
␣$RealScript␣␣-␣$Script␣with␣all␣links␣resolved

=head1␣KNOWN␣ISSUES

If␣there␣are␣two␣modules␣using␣C<FindBin>␣from␣different␣directories
under␣the␣same␣interpreter,␣this␣won't␣work.␣Since␣C<FindBin>␣uses␣a
C<BEGIN>␣block,␣it'll␣be␣executed␣only␣once,␣and␣only␣the␣first␣caller
will␣get␣it␣right.␣This␣is␣a␣problem␣under␣mod_perl␣and␣other␣persistent
Perl␣environments,␣where␣you␣shouldn't␣use␣this␣module.␣Which␣also␣means
that␣you␣should␣avoid␣using␣C<FindBin>␣in␣modules␣that␣you␣plan␣to␣put
on␣CPAN.␣To␣make␣sure␣that␣C<FindBin>␣will␣work␣is␣to␣call␣the␣C<again>
function:

␣␣use␣FindBin;
␣␣FindBin::again();␣#␣or␣FindBin->again;

In␣former␣versions␣of␣FindBin␣there␣was␣no␣C<again>␣function.␣The
workaround␣was␣to␣force␣the␣C<BEGIN>␣block␣to␣be␣executed␣again:

␣␣delete␣$INC{'FindBin.pm'};
␣␣require␣FindBin;

=head1␣KNOWN␣BUGS

If␣perl␣is␣invoked␣as

␣␣␣perl␣filename

and␣I<filename>␣does␣not␣have␣executable␣rights␣and␣a␣program␣called
I<filename>␣exists␣in␣the␣users␣C<$ENV{PATH}>␣which␣satisfies␣both␣B<-x>
and␣B<-T>␣then␣FindBin␣assumes␣that␣it␣was␣invoked␣via␣the
C<$ENV{PATH}>.

Workaround␣is␣to␣invoke␣perl␣as

␣perl␣./filename

=head1␣AUTHORS

FindBin␣is␣supported␣as␣part␣of␣the␣core␣perl␣distribution.␣Please␣send␣bug
reports␣to␣E<lt>F<perlbug@perl.org>E<gt>␣using␣the␣perlbug␣program
included␣with␣perl.

Graham␣Barr␣E<lt>F<gbarr@pobox.com>E<gt>
Nick␣Ing-Simmons␣E<lt>F<nik@tiuk.ti.com>E<gt>

=head1␣COPYRIGHT

Copyright␣(c)␣1995␣Graham␣Barr␣&␣Nick␣Ing-Simmons.␣All␣rights␣reserved.
This␣program␣is␣free␣software;␣you␣can␣redistribute␣it␣and/or␣modify␣it
under␣the␣same␣terms␣as␣Perl␣itself.

=cut
----------
Range: (7115784,7119253) (3469)
}

=head1␣NAME

warnings␣-␣Perl␣pragma␣to␣control␣optional␣warnings

=head1␣SYNOPSIS

␣␣␣␣use␣warnings;
␣␣␣␣no␣warnings;

␣␣␣␣use␣warnings␣"all";
␣␣␣␣no␣warnings␣"all";

␣␣␣␣use␣warnings::register;
␣␣␣␣if␣(warnings::enabled())␣{
␣␣␣␣␣␣␣␣warnings::warn("some␣warning");
␣␣␣␣}

␣␣␣␣if␣(warnings::enabled("void"))␣{
␣␣␣␣␣␣␣␣warnings::warn("void",␣"some␣warning");
␣␣␣␣}

␣␣␣␣if␣(warnings::enabled($object))␣{
␣␣␣␣␣␣␣␣warnings::warn($object,␣"some␣warning");
␣␣␣␣}

␣␣␣␣warnings::warnif("some␣warning");
␣␣␣␣warnings::warnif("void",␣"some␣warning");
␣␣␣␣warnings::warnif($object,␣"some␣warning");

=head1␣DESCRIPTION

The␣C<warnings>␣pragma␣is␣a␣replacement␣for␣the␣command␣line␣flag␣C<-w>,
but␣the␣pragma␣is␣limited␣to␣the␣enclosing␣block,␣while␣the␣flag␣is␣global.
See␣L<perllexwarn>␣for␣more␣information.

If␣no␣import␣list␣is␣supplied,␣all␣possible␣warnings␣are␣either␣enabled
or␣disabled.

A␣number␣of␣functions␣are␣provided␣to␣assist␣module␣authors.

=over␣4

=item␣use␣warnings::register

Creates␣a␣new␣warnings␣category␣with␣the␣same␣name␣as␣the␣package␣where
the␣call␣to␣the␣pragma␣is␣used.

=item␣warnings::enabled()

Use␣the␣warnings␣category␣with␣the␣same␣name␣as␣the␣current␣package.

Return␣TRUE␣if␣that␣warnings␣category␣is␣enabled␣in␣the␣calling␣module.
Otherwise␣returns␣FALSE.

=item␣warnings::enabled($category)

Return␣TRUE␣if␣the␣warnings␣category,␣C<$category>,␣is␣enabled␣in␣the
calling␣module.
Otherwise␣returns␣FALSE.

=item␣warnings::enabled($object)

Use␣the␣name␣of␣the␣class␣for␣the␣object␣reference,␣C<$object>,␣as␣the
warnings␣category.

Return␣TRUE␣if␣that␣warnings␣category␣is␣enabled␣in␣the␣first␣scope
where␣the␣object␣is␣used.
Otherwise␣returns␣FALSE.

=item␣warnings::fatal_enabled()

Return␣TRUE␣if␣the␣warnings␣category␣with␣the␣same␣name␣as␣the␣current
package␣has␣been␣set␣to␣FATAL␣in␣the␣calling␣module.
Otherwise␣returns␣FALSE.

=item␣warnings::fatal_enabled($category)

Return␣TRUE␣if␣the␣warnings␣category␣C<$category>␣has␣been␣set␣to␣FATAL␣in
the␣calling␣module.
Otherwise␣returns␣FALSE.

=item␣warnings::fatal_enabled($object)

Use␣the␣name␣of␣the␣class␣for␣the␣object␣reference,␣C<$object>,␣as␣the
warnings␣category.

Return␣TRUE␣if␣that␣warnings␣category␣has␣been␣set␣to␣FATAL␣in␣the␣first
scope␣where␣the␣object␣is␣used.
Otherwise␣returns␣FALSE.

=item␣warnings::warn($message)

Print␣C<$message>␣to␣STDERR.

Use␣the␣warnings␣category␣with␣the␣same␣name␣as␣the␣current␣package.

If␣that␣warnings␣category␣has␣been␣set␣to␣"FATAL"␣in␣the␣calling␣module
then␣die.␣Otherwise␣return.

=item␣warnings::warn($category,␣$message)

Print␣C<$message>␣to␣STDERR.

If␣the␣warnings␣category,␣C<$category>,␣has␣been␣set␣to␣"FATAL"␣in␣the
calling␣module␣then␣die.␣Otherwise␣return.

=item␣warnings::warn($object,␣$message)

Print␣C<$message>␣to␣STDERR.

Use␣the␣name␣of␣the␣class␣for␣the␣object␣reference,␣C<$object>,␣as␣the
warnings␣category.

If␣that␣warnings␣category␣has␣been␣set␣to␣"FATAL"␣in␣the␣scope␣where␣C<$object>
is␣first␣used␣then␣die.␣Otherwise␣return.


=item␣warnings::warnif($message)

Equivalent␣to:

␣␣␣␣if␣(warnings::enabled())
␣␣␣␣␣␣{␣warnings::warn($message)␣}

=item␣warnings::warnif($category,␣$message)

Equivalent␣to:

␣␣␣␣if␣(warnings::enabled($category))
␣␣␣␣␣␣{␣warnings::warn($category,␣$message)␣}

=item␣warnings::warnif($object,␣$message)

Equivalent␣to:

␣␣␣␣if␣(warnings::enabled($object))
␣␣␣␣␣␣{␣warnings::warn($object,␣$message)␣}

=back

See␣L<perlmodlib/Pragmatic␣Modules>␣and␣L<perllexwarn>.

=cut
----------
Range: (7175476,7179204) (3728)
=head1␣NAME

App::Cpan␣-␣easily␣interact␣with␣CPAN␣from␣the␣command␣line

=head1␣SYNOPSIS

	#␣with␣arguments␣and␣no␣switches,␣installs␣specified␣modules
	cpan␣module_name␣[␣module_name␣...␣]

	#␣with␣switches,␣installs␣modules␣with␣extra␣behavior
	cpan␣[-cfFimt]␣module_name␣[␣module_name␣...␣]

	#␣use␣local::lib
	cpan␣-l␣module_name␣[␣module_name␣...␣]
	
	#␣with␣just␣the␣dot,␣install␣from␣the␣distribution␣in␣the
	#␣current␣directory
	cpan␣.
	
	#␣without␣arguments,␣starts␣CPAN.pm␣shell
	cpan

	#␣without␣arguments,␣but␣some␣switches
	cpan␣[-ahruvACDLO]

=head1␣DESCRIPTION

This␣script␣provides␣a␣command␣interface␣(not␣a␣shell)␣to␣CPAN.␣At␣the
moment␣it␣uses␣CPAN.pm␣to␣do␣the␣work,␣but␣it␣is␣not␣a␣one-shot␣command
runner␣for␣CPAN.pm.

=head2␣Options

=over␣4

=item␣-a

Creates␣a␣CPAN.pm␣autobundle␣with␣CPAN::Shell->autobundle.

=item␣-A␣module␣[␣module␣...␣]

Shows␣the␣primary␣maintainers␣for␣the␣specified␣modules.

=item␣-c␣module

Runs␣a␣`make␣clean`␣in␣the␣specified␣module's␣directories.

=item␣-C␣module␣[␣module␣...␣]

Show␣the␣F<Changes>␣files␣for␣the␣specified␣modules

=item␣-D␣module␣[␣module␣...␣]

Show␣the␣module␣details.␣This␣prints␣one␣line␣for␣each␣out-of-date␣module
(meaning,␣modules␣locally␣installed␣but␣have␣newer␣versions␣on␣CPAN).
Each␣line␣has␣three␣columns:␣module␣name,␣local␣version,␣and␣CPAN
version.

=item␣-f

Force␣the␣specified␣action,␣when␣it␣normally␣would␣have␣failed.␣Use␣this
to␣install␣a␣module␣even␣if␣its␣tests␣fail.␣When␣you␣use␣this␣option,
-i␣is␣not␣optional␣for␣installing␣a␣module␣when␣you␣need␣to␣force␣it:

	%␣cpan␣-f␣-i␣Module::Foo

=item␣-F

Turn␣off␣CPAN.pm's␣attempts␣to␣lock␣anything.␣You␣should␣be␣careful␣with␣
this␣since␣you␣might␣end␣up␣with␣multiple␣scripts␣trying␣to␣muck␣in␣the
same␣directory.␣This␣isn't␣so␣much␣of␣a␣concern␣if␣you're␣loading␣a␣special
config␣with␣C<-j>,␣and␣that␣config␣sets␣up␣its␣own␣work␣directories.

=item␣-g␣module␣[␣module␣...␣]

Downloads␣to␣the␣current␣directory␣the␣latest␣distribution␣of␣the␣module.

=item␣-G␣module␣[␣module␣...␣]

UNIMPLEMENTED

Download␣to␣the␣current␣directory␣the␣latest␣distribution␣of␣the
modules,␣unpack␣each␣distribution,␣and␣create␣a␣git␣repository␣for␣each
distribution.

If␣you␣want␣this␣feature,␣check␣out␣Yanick␣Champoux's␣C<Git::CPAN::Patch>
distribution.

=item␣-h

Print␣a␣help␣message␣and␣exit.␣When␣you␣specify␣C<-h>,␣it␣ignores␣all
of␣the␣other␣options␣and␣arguments.

=item␣-i

Install␣the␣specified␣modules.

=item␣-j␣Config.pm

Load␣the␣file␣that␣has␣the␣CPAN␣configuration␣data.␣This␣should␣have␣the
same␣format␣as␣the␣standard␣F<CPAN/Config.pm>␣file,␣which␣defines␣
C<$CPAN::Config>␣as␣an␣anonymous␣hash.

=item␣-J

Dump␣the␣configuration␣in␣the␣same␣format␣that␣CPAN.pm␣uses.␣This␣is␣useful
for␣checking␣the␣configuration␣as␣well␣as␣using␣the␣dump␣as␣a␣starting␣point
for␣a␣new,␣custom␣configuration.

=item␣-l

Use␣C<local::lib>.

=item␣-L␣author␣[␣author␣...␣]

List␣the␣modules␣by␣the␣specified␣authors.

=item␣-m

Make␣the␣specified␣modules.

=item␣-O

Show␣the␣out-of-date␣modules.

=item␣-t

Run␣a␣`make␣test`␣on␣the␣specified␣modules.

=item␣-r

Recompiles␣dynamically␣loaded␣modules␣with␣CPAN::Shell->recompile.

=item␣-u

Upgrade␣all␣installed␣modules.␣Blindly␣doing␣this␣can␣really␣break␣things,
so␣keep␣a␣backup.

=item␣-v

Print␣the␣script␣version␣and␣CPAN.pm␣version␣then␣exit.

=back

=head2␣Examples

	#␣print␣a␣help␣message
	cpan␣-h

	#␣print␣the␣version␣numbers
	cpan␣-v

	#␣create␣an␣autobundle
	cpan␣-a

	#␣recompile␣modules
	cpan␣-r

	#␣upgrade␣all␣installed␣modules
	cpan␣-u

	#␣install␣modules␣(␣sole␣-i␣is␣optional␣)
	cpan␣-i␣Netscape::Booksmarks␣Business::ISBN

	#␣force␣install␣modules␣(␣must␣use␣-i␣)
	cpan␣-fi␣CGI::Minimal␣URI


=head2␣Methods

=over␣4

=cut
----------
Range: (7213048,7216425) (3377)
=head1␣NAME

feature␣-␣Perl␣pragma␣to␣enable␣new␣features

=head1␣SYNOPSIS

␣␣␣␣use␣feature␣qw(switch␣say);
␣␣␣␣given␣($foo)␣{
	when␣(1)	␣␣{␣say␣"\$foo␣==␣1"␣}
	when␣([2,3])	␣␣{␣say␣"\$foo␣==␣2␣||␣\$foo␣==␣3"␣}
	when␣(/^a[bc]d$/)␣{␣say␣"\$foo␣eq␣'abd'␣||␣\$foo␣eq␣'acd'"␣}
	when␣($_␣>␣100)␣␣␣{␣say␣"\$foo␣>␣100"␣}
	default		␣␣{␣say␣"None␣of␣the␣above"␣}
␣␣␣␣}

␣␣␣␣use␣feature␣':5.10';␣#␣loads␣all␣features␣available␣in␣perl␣5.10

=head1␣DESCRIPTION

It␣is␣usually␣impossible␣to␣add␣new␣syntax␣to␣Perl␣without␣breaking
some␣existing␣programs.␣This␣pragma␣provides␣a␣way␣to␣minimize␣that
risk.␣New␣syntactic␣constructs,␣or␣new␣semantic␣meanings␣to␣older
constructs,␣can␣be␣enabled␣by␣C<use␣feature␣'foo'>,␣and␣will␣be␣parsed
only␣when␣the␣appropriate␣feature␣pragma␣is␣in␣scope.

=head2␣Lexical␣effect

Like␣other␣pragmas␣(C<use␣strict>,␣for␣example),␣features␣have␣a␣lexical
effect.␣C<use␣feature␣qw(foo)>␣will␣only␣make␣the␣feature␣"foo"␣available
from␣that␣point␣to␣the␣end␣of␣the␣enclosing␣block.

␣␣␣␣{
␣␣␣␣␣␣␣␣use␣feature␣'say';
␣␣␣␣␣␣␣␣say␣"say␣is␣available␣here";
␣␣␣␣}
␣␣␣␣print␣"But␣not␣here.\n";

=head2␣C<no␣feature>

Features␣can␣also␣be␣turned␣off␣by␣using␣C<no␣feature␣"foo">.␣This␣too
has␣lexical␣effect.

␣␣␣␣use␣feature␣'say';
␣␣␣␣say␣"say␣is␣available␣here";
␣␣␣␣{
␣␣␣␣␣␣␣␣no␣feature␣'say';
␣␣␣␣␣␣␣␣print␣"But␣not␣here.\n";
␣␣␣␣}
␣␣␣␣say␣"Yet␣it␣is␣here.";

C<no␣feature>␣with␣no␣features␣specified␣will␣turn␣off␣all␣features.

=head2␣The␣'switch'␣feature

C<use␣feature␣'switch'>␣tells␣the␣compiler␣to␣enable␣the␣Perl␣6
given/when␣construct.

See␣L<perlsyn/"Switch␣statements">␣for␣details.

=head2␣The␣'say'␣feature

C<use␣feature␣'say'>␣tells␣the␣compiler␣to␣enable␣the␣Perl␣6
C<say>␣function.

See␣L<perlfunc/say>␣for␣details.

=head2␣the␣'state'␣feature

C<use␣feature␣'state'>␣tells␣the␣compiler␣to␣enable␣C<state>
variables.

See␣L<perlsub/"Persistent␣Private␣Variables">␣for␣details.

=head2␣the␣'unicode_strings'␣feature

C<use␣feature␣'unicode_strings'>␣tells␣the␣compiler␣to␣treat
all␣strings␣outside␣of␣C<use␣locale>␣and␣C<use␣bytes>␣as␣Unicode.␣It␣is
available␣starting␣with␣Perl␣5.11.3.

See␣L<perlunicode/The␣"Unicode␣Bug">␣for␣details.

=head1␣FEATURE␣BUNDLES

It's␣possible␣to␣load␣a␣whole␣slew␣of␣features␣in␣one␣go,␣using
a␣I<feature␣bundle>.␣The␣name␣of␣a␣feature␣bundle␣is␣prefixed␣with
a␣colon,␣to␣distinguish␣it␣from␣an␣actual␣feature.␣At␣present,␣the
only␣feature␣bundle␣is␣C<use␣feature␣":5.10">␣which␣is␣equivalent
to␣C<use␣feature␣qw(switch␣say␣state)>.

Specifying␣sub-versions␣such␣as␣the␣C<0>␣in␣C<5.10.0>␣in␣feature␣bundles␣has
no␣effect:␣feature␣bundles␣are␣guaranteed␣to␣be␣the␣same␣for␣all␣sub-versions.

=head1␣IMPLICIT␣LOADING

There␣are␣two␣ways␣to␣load␣the␣C<feature>␣pragma␣implicitly␣:

=over␣4

=item␣*

By␣using␣the␣C<-E>␣switch␣on␣the␣command-line␣instead␣of␣C<-e>.␣It␣enables
all␣available␣features␣in␣the␣main␣compilation␣unit␣(that␣is,␣the␣one-liner.)

=item␣*

By␣requiring␣explicitly␣a␣minimal␣Perl␣version␣number␣for␣your␣program,␣with
the␣C<use␣VERSION>␣construct,␣and␣when␣the␣version␣is␣higher␣than␣or␣equal␣to
5.10.0.␣That␣is,

␣␣␣␣use␣5.10.0;

will␣do␣an␣implicit

␣␣␣␣use␣feature␣':5.10';

and␣so␣on.␣Note␣how␣the␣trailing␣sub-version␣is␣automatically␣stripped␣from␣the
version.

But␣to␣avoid␣portability␣warnings␣(see␣L<perlfunc/use>),␣you␣may␣prefer:

␣␣␣␣use␣5.010;

with␣the␣same␣effect.

=back

=cut
----------
Range: (7218103,7224012) (5909)
=head1␣NAME

diagnostics,␣splain␣-␣produce␣verbose␣warning␣diagnostics

=head1␣SYNOPSIS

Using␣the␣C<diagnostics>␣pragma:

␣␣␣␣use␣diagnostics;
␣␣␣␣use␣diagnostics␣-verbose;

␣␣␣␣enable␣␣diagnostics;
␣␣␣␣disable␣diagnostics;

Using␣the␣C<splain>␣standalone␣filter␣program:

␣␣␣␣perl␣program␣2>diag.out
␣␣␣␣splain␣[-v]␣[-p]␣diag.out

Using␣diagnostics␣to␣get␣stack␣traces␣from␣a␣misbehaving␣script:

␣␣␣␣perl␣-Mdiagnostics=-traceonly␣my_script.pl

=head1␣DESCRIPTION

=head2␣The␣C<diagnostics>␣Pragma

This␣module␣extends␣the␣terse␣diagnostics␣normally␣emitted␣by␣both␣the
perl␣compiler␣and␣the␣perl␣interpreter␣(from␣running␣perl␣with␣a␣-w␣
switch␣or␣C<use␣warnings>),␣augmenting␣them␣with␣the␣more
explicative␣and␣endearing␣descriptions␣found␣in␣L<perldiag>.␣␣Like␣the
other␣pragmata,␣it␣affects␣the␣compilation␣phase␣of␣your␣program␣rather
than␣merely␣the␣execution␣phase.

To␣use␣in␣your␣program␣as␣a␣pragma,␣merely␣invoke

␣␣␣␣use␣diagnostics;

at␣the␣start␣(or␣near␣the␣start)␣of␣your␣program.␣␣(Note␣
that␣this␣I<does>␣enable␣perl's␣B<-w>␣flag.)␣␣Your␣whole
compilation␣will␣then␣be␣subject(ed␣:-)␣to␣the␣enhanced␣diagnostics.
These␣still␣go␣out␣B<STDERR>.

Due␣to␣the␣interaction␣between␣runtime␣and␣compiletime␣issues,
and␣because␣it's␣probably␣not␣a␣very␣good␣idea␣anyway,
you␣may␣not␣use␣C<no␣diagnostics>␣to␣turn␣them␣off␣at␣compiletime.
However,␣you␣may␣control␣their␣behaviour␣at␣runtime␣using␣the␣
disable()␣and␣enable()␣methods␣to␣turn␣them␣off␣and␣on␣respectively.

The␣B<-verbose>␣flag␣first␣prints␣out␣the␣L<perldiag>␣introduction␣before
any␣other␣diagnostics.␣␣The␣$diagnostics::PRETTY␣variable␣can␣generate␣nicer
escape␣sequences␣for␣pagers.

Warnings␣dispatched␣from␣perl␣itself␣(or␣more␣accurately,␣those␣that␣match
descriptions␣found␣in␣L<perldiag>)␣are␣only␣displayed␣once␣(no␣duplicate
descriptions).␣␣User␣code␣generated␣warnings␣a␣la␣warn()␣are␣unaffected,
allowing␣duplicate␣user␣messages␣to␣be␣displayed.

This␣module␣also␣adds␣a␣stack␣trace␣to␣the␣error␣message␣when␣perl␣dies.
This␣is␣useful␣for␣pinpointing␣what␣caused␣the␣death.␣The␣B<-traceonly>␣(or
just␣B<-t>)␣flag␣turns␣off␣the␣explanations␣of␣warning␣messages␣leaving␣just
the␣stack␣traces.␣So␣if␣your␣script␣is␣dieing,␣run␣it␣again␣with

␣␣perl␣-Mdiagnostics=-traceonly␣my_bad_script

to␣see␣the␣call␣stack␣at␣the␣time␣of␣death.␣By␣supplying␣the␣B<-warntrace>
(or␣just␣B<-w>)␣flag,␣any␣warnings␣emitted␣will␣also␣come␣with␣a␣stack
trace.

=head2␣The␣I<splain>␣Program

While␣apparently␣a␣whole␣nuther␣program,␣I<splain>␣is␣actually␣nothing
more␣than␣a␣link␣to␣the␣(executable)␣F<diagnostics.pm>␣module,␣as␣well␣as
a␣link␣to␣the␣F<diagnostics.pod>␣documentation.␣␣The␣B<-v>␣flag␣is␣like
the␣C<use␣diagnostics␣-verbose>␣directive.
The␣B<-p>␣flag␣is␣like␣the
$diagnostics::PRETTY␣variable.␣␣Since␣you're␣post-processing␣with␣
I<splain>,␣there's␣no␣sense␣in␣being␣able␣to␣enable()␣or␣disable()␣processing.

Output␣from␣I<splain>␣is␣directed␣to␣B<STDOUT>,␣unlike␣the␣pragma.

=head1␣EXAMPLES

The␣following␣file␣is␣certain␣to␣trigger␣a␣few␣errors␣at␣both
runtime␣and␣compiletime:

␣␣␣␣use␣diagnostics;
␣␣␣␣print␣NOWHERE␣"nothing\n";
␣␣␣␣print␣STDERR␣"\n\tThis␣message␣should␣be␣unadorned.\n";
␣␣␣␣warn␣"\tThis␣is␣a␣user␣warning";
␣␣␣␣print␣"\nDIAGNOSTIC␣TESTER:␣Please␣enter␣a␣<CR>␣here:␣";
␣␣␣␣my␣$a,␣$b␣=␣scalar␣<STDIN>;
␣␣␣␣print␣"\n";
␣␣␣␣print␣$x/$y;

If␣you␣prefer␣to␣run␣your␣program␣first␣and␣look␣at␣its␣problem
afterwards,␣do␣this:

␣␣␣␣perl␣-w␣test.pl␣2>test.out
␣␣␣␣./splain␣<␣test.out

Note␣that␣this␣is␣not␣in␣general␣possible␣in␣shells␣of␣more␣dubious␣heritage,␣
as␣the␣theoretical␣

␣␣␣␣(perl␣-w␣test.pl␣>/dev/tty)␣>&␣test.out
␣␣␣␣./splain␣<␣test.out

Because␣you␣just␣moved␣the␣existing␣B<stdout>␣to␣somewhere␣else.

If␣you␣don't␣want␣to␣modify␣your␣source␣code,␣but␣still␣have␣on-the-fly
warnings,␣do␣this:

␣␣␣␣exec␣3>&1;␣perl␣-w␣test.pl␣2>&1␣1>&3␣3>&-␣|␣splain␣1>&2␣3>&-␣

Nifty,␣eh?

If␣you␣want␣to␣control␣warnings␣on␣the␣fly,␣do␣something␣like␣this.
Make␣sure␣you␣do␣the␣C<use>␣first,␣or␣you␣won't␣be␣able␣to␣get
at␣the␣enable()␣or␣disable()␣methods.

␣␣␣␣use␣diagnostics;␣#␣checks␣entire␣compilation␣phase␣
	print␣"\ntime␣for␣1st␣bogus␣diags:␣SQUAWKINGS\n";
	print␣BOGUS1␣'nada';
	print␣"done␣with␣1st␣bogus\n";

␣␣␣␣disable␣diagnostics;␣#␣only␣turns␣off␣runtime␣warnings
	print␣"\ntime␣for␣2nd␣bogus:␣(squelched)\n";
	print␣BOGUS2␣'nada';
	print␣"done␣with␣2nd␣bogus\n";

␣␣␣␣enable␣diagnostics;␣#␣turns␣back␣on␣runtime␣warnings
	print␣"\ntime␣for␣3rd␣bogus:␣SQUAWKINGS\n";
	print␣BOGUS3␣'nada';
	print␣"done␣with␣3rd␣bogus\n";

␣␣␣␣disable␣diagnostics;
	print␣"\ntime␣for␣4th␣bogus:␣(squelched)\n";
	print␣BOGUS4␣'nada';
	print␣"done␣with␣4th␣bogus\n";

=head1␣INTERNALS

Diagnostic␣messages␣derive␣from␣the␣F<perldiag.pod>␣file␣when␣available␣at
runtime.␣␣Otherwise,␣they␣may␣be␣embedded␣in␣the␣file␣itself␣when␣the
splain␣package␣is␣built.␣␣␣See␣the␣F<Makefile>␣for␣details.

If␣an␣extant␣$SIG{__WARN__}␣handler␣is␣discovered,␣it␣will␣continue
to␣be␣honored,␣but␣only␣after␣the␣diagnostics::splainthis()␣function␣
(the␣module's␣$SIG{__WARN__}␣interceptor)␣has␣had␣its␣way␣with␣your
warnings.

There␣is␣a␣$diagnostics::DEBUG␣variable␣you␣may␣set␣if␣you're␣desperately
curious␣what␣sorts␣of␣things␣are␣being␣intercepted.

␣␣␣␣BEGIN␣{␣$diagnostics::DEBUG␣=␣1␣}␣


=head1␣BUGS

Not␣being␣able␣to␣say␣"no␣diagnostics"␣is␣annoying,␣but␣may␣not␣be
insurmountable.

The␣C<-pretty>␣directive␣is␣called␣too␣late␣to␣affect␣matters.
You␣have␣to␣do␣this␣instead,␣and␣I<before>␣you␣load␣the␣module.

␣␣␣␣BEGIN␣{␣$diagnostics::PRETTY␣=␣1␣}␣

I␣could␣start␣up␣faster␣by␣delaying␣compilation␣until␣it␣should␣be
needed,␣but␣this␣gets␣a␣"panic:␣top_level"␣when␣using␣the␣pragma␣form
in␣Perl␣5.001e.

While␣it's␣true␣that␣this␣documentation␣is␣somewhat␣subserious,␣if␣you␣use
a␣program␣named␣I<splain>,␣you␣should␣expect␣a␣bit␣of␣whimsy.

=head1␣AUTHOR

Tom␣Christiansen␣<F<tchrist@mox.perl.com>>,␣25␣June␣1995.

=cut
----------
Range: (7272162,7276424) (4262)
}

=back

Test::Simple␣will␣start␣by␣printing␣number␣of␣tests␣run␣in␣the␣form
"1..M"␣(so␣"1..5"␣means␣you're␣going␣to␣run␣5␣tests).␣␣This␣strange
format␣lets␣Test::Harness␣know␣how␣many␣tests␣you␣plan␣on␣running␣in
case␣something␣goes␣horribly␣wrong.

If␣all␣your␣tests␣passed,␣Test::Simple␣will␣exit␣with␣zero␣(which␣is
normal).␣␣If␣anything␣failed␣it␣will␣exit␣with␣how␣many␣failed.␣␣If
you␣run␣less␣(or␣more)␣tests␣than␣you␣planned,␣the␣missing␣(or␣extras)
will␣be␣considered␣failures.␣␣If␣no␣tests␣were␣ever␣run␣Test::Simple
will␣throw␣a␣warning␣and␣exit␣with␣255.␣␣If␣the␣test␣died,␣even␣after
having␣successfully␣completed␣all␣its␣tests,␣it␣will␣still␣be
considered␣a␣failure␣and␣will␣exit␣with␣255.

So␣the␣exit␣codes␣are...

␣␣␣␣0␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣all␣tests␣successful
␣␣␣␣255␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣test␣died␣or␣all␣passed␣but␣wrong␣#␣of␣tests␣run
␣␣␣␣any␣other␣number␣␣␣␣how␣many␣failed␣(including␣missing␣or␣extras)

If␣you␣fail␣more␣than␣254␣tests,␣it␣will␣be␣reported␣as␣254.

This␣module␣is␣by␣no␣means␣trying␣to␣be␣a␣complete␣testing␣system.
It's␣just␣to␣get␣you␣started.␣␣Once␣you're␣off␣the␣ground␣its
recommended␣you␣look␣at␣L<Test::More>.


=head1␣EXAMPLE

Here's␣an␣example␣of␣a␣simple␣.t␣file␣for␣the␣fictional␣Film␣module.

␣␣␣␣use␣Test::Simple␣tests␣=>␣5;

␣␣␣␣use␣Film;␣␣#␣What␣you're␣testing.

␣␣␣␣my␣$btaste␣=␣Film->new({␣Title␣␣␣␣=>␣'Bad␣Taste',
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣Director␣=>␣'Peter␣Jackson',
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣Rating␣␣␣=>␣'R',
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣NumExplodingSheep␣=>␣1
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣});
␣␣␣␣ok(␣defined($btaste)␣&&␣ref␣$btaste␣eq␣'Film,␣␣␣␣␣'new()␣works'␣);

␣␣␣␣ok(␣$btaste->Title␣␣␣␣␣␣eq␣'Bad␣Taste',␣␣␣␣␣'Title()␣get'␣␣␣␣);
␣␣␣␣ok(␣$btaste->Director␣␣␣eq␣'Peter␣Jackson',␣'Director()␣get'␣);
␣␣␣␣ok(␣$btaste->Rating␣␣␣␣␣eq␣'R',␣␣␣␣␣␣␣␣␣␣␣␣␣'Rating()␣get'␣␣␣);
␣␣␣␣ok(␣$btaste->NumExplodingSheep␣==␣1,␣␣␣␣␣␣␣␣'NumExplodingSheep()␣get'␣);

It␣will␣produce␣output␣like␣this:

␣␣␣␣1..5
␣␣␣␣ok␣1␣-␣new()␣works
␣␣␣␣ok␣2␣-␣Title()␣get
␣␣␣␣ok␣3␣-␣Director()␣get
␣␣␣␣not␣ok␣4␣-␣Rating()␣get
␣␣␣␣#␣␣␣Failed␣test␣'Rating()␣get'
␣␣␣␣#␣␣␣in␣t/film.t␣at␣line␣14.
␣␣␣␣ok␣5␣-␣NumExplodingSheep()␣get
␣␣␣␣#␣Looks␣like␣you␣failed␣1␣tests␣of␣5

Indicating␣the␣Film::Rating()␣method␣is␣broken.


=head1␣CAVEATS

Test::Simple␣will␣only␣report␣a␣maximum␣of␣254␣failures␣in␣its␣exit
code.␣␣If␣this␣is␣a␣problem,␣you␣probably␣have␣a␣huge␣test␣script.
Split␣it␣into␣multiple␣files.␣␣(Otherwise␣blame␣the␣Unix␣folks␣for
using␣an␣unsigned␣short␣integer␣as␣the␣exit␣status).

Because␣VMS's␣exit␣codes␣are␣much,␣much␣different␣than␣the␣rest␣of␣the
universe,␣and␣perl␣does␣horrible␣mangling␣to␣them␣that␣gets␣in␣my␣way,
it␣works␣like␣this␣on␣VMS.

␣␣␣␣0␣␣␣␣␣SS$_NORMAL␣␣␣␣␣␣␣␣all␣tests␣successful
␣␣␣␣4␣␣␣␣␣SS$_ABORT␣␣␣␣␣␣␣␣␣something␣went␣wrong

Unfortunately,␣I␣can't␣differentiate␣any␣further.


=head1␣NOTES

Test::Simple␣is␣B<explicitly>␣tested␣all␣the␣way␣back␣to␣perl␣5.6.0.

Test::Simple␣is␣thread-safe␣in␣perl␣5.8.1␣and␣up.

=head1␣HISTORY

This␣module␣was␣conceived␣while␣talking␣with␣Tony␣Bowden␣in␣his
kitchen␣one␣night␣about␣the␣problems␣I␣was␣having␣writing␣some␣really
complicated␣feature␣into␣the␣new␣Testing␣module.␣␣He␣observed␣that␣the
main␣problem␣is␣not␣dealing␣with␣these␣edge␣cases␣but␣that␣people␣hate
to␣write␣tests␣B<at␣all>.␣␣What␣was␣needed␣was␣a␣dead␣simple␣module
that␣took␣all␣the␣hard␣work␣out␣of␣testing␣and␣was␣really,␣really␣easy
to␣learn.␣␣Paul␣Johnson␣simultaneously␣had␣this␣idea␣(unfortunately,
he␣wasn't␣in␣Tony's␣kitchen).␣␣This␣is␣it.


=head1␣SEE␣ALSO

=over␣4

=item␣L<Test::More>

More␣testing␣functions!␣␣Once␣you␣outgrow␣Test::Simple,␣look␣at
Test::More.␣␣Test::Simple␣is␣100%␣forward␣compatible␣with␣Test::More
(i.e.␣you␣can␣just␣use␣Test::More␣instead␣of␣Test::Simple␣in␣your
programs␣and␣things␣will␣still␣work).

=back

Look␣in␣Test::More's␣SEE␣ALSO␣for␣more␣testing␣modules.


=head1␣AUTHORS

Idea␣by␣Tony␣Bowden␣and␣Paul␣Johnson,␣code␣by␣Michael␣G␣Schwern
E<lt>schwern@pobox.comE<gt>,␣wardrobe␣by␣Calvin␣Klein.


=head1␣COPYRIGHT

Copyright␣2001-2008␣by␣Michael␣G␣Schwern␣E<lt>schwern@pobox.comE<gt>.

This␣program␣is␣free␣software;␣you␣can␣redistribute␣it␣and/or␣
modify␣it␣under␣the␣same␣terms␣as␣Perl␣itself.

See␣F<http://www.perl.com/perl/misc/Artistic.html>

=cut
----------
Range: (7277303,7280538) (3235)
=head1␣NAME

Test::More␣-␣yet␣another␣framework␣for␣writing␣test␣scripts

=head1␣SYNOPSIS

␣␣use␣Test::More␣tests␣=>␣23;
␣␣#␣or
␣␣use␣Test::More␣skip_all␣=>␣$reason;
␣␣#␣or
␣␣use␣Test::More;␣␣␣#␣see␣done_testing()

␣␣BEGIN␣{␣use_ok(␣'Some::Module'␣);␣}
␣␣require_ok(␣'Some::Module'␣);

␣␣#␣Various␣ways␣to␣say␣"ok"
␣␣ok($got␣eq␣$expected,␣$test_name);

␣␣is␣␣($got,␣$expected,␣$test_name);
␣␣isnt($got,␣$expected,␣$test_name);

␣␣#␣Rather␣than␣print␣STDERR␣"#␣here's␣what␣went␣wrong\n"
␣␣diag("here's␣what␣went␣wrong");

␣␣like␣␣($got,␣qr/expected/,␣$test_name);
␣␣unlike($got,␣qr/expected/,␣$test_name);

␣␣cmp_ok($got,␣'==',␣$expected,␣$test_name);

␣␣is_deeply($got_complex_structure,␣$expected_complex_structure,␣$test_name);

␣␣SKIP:␣{
␣␣␣␣␣␣skip␣$why,␣$how_many␣unless␣$have_some_feature;

␣␣␣␣␣␣ok(␣foo(),␣␣␣␣␣␣␣$test_name␣);
␣␣␣␣␣␣is(␣foo(42),␣23,␣$test_name␣);
␣␣};

␣␣TODO:␣{
␣␣␣␣␣␣local␣$TODO␣=␣$why;

␣␣␣␣␣␣ok(␣foo(),␣␣␣␣␣␣␣$test_name␣);
␣␣␣␣␣␣is(␣foo(42),␣23,␣$test_name␣);
␣␣};

␣␣can_ok($module,␣@methods);
␣␣isa_ok($object,␣$class);

␣␣pass($test_name);
␣␣fail($test_name);

␣␣BAIL_OUT($why);

␣␣#␣UNIMPLEMENTED!!!
␣␣my␣@status␣=␣Test::More::status;


=head1␣DESCRIPTION

B<STOP!>␣If␣you're␣just␣getting␣started␣writing␣tests,␣have␣a␣look␣at
L<Test::Simple>␣first.␣␣This␣is␣a␣drop␣in␣replacement␣for␣Test::Simple
which␣you␣can␣switch␣to␣once␣you␣get␣the␣hang␣of␣basic␣testing.

The␣purpose␣of␣this␣module␣is␣to␣provide␣a␣wide␣range␣of␣testing
utilities.␣␣Various␣ways␣to␣say␣"ok"␣with␣better␣diagnostics,
facilities␣to␣skip␣tests,␣test␣future␣features␣and␣compare␣complicated
data␣structures.␣␣While␣you␣can␣do␣almost␣anything␣with␣a␣simple
C<ok()>␣function,␣it␣doesn't␣provide␣good␣diagnostic␣output.


=head2␣I␣love␣it␣when␣a␣plan␣comes␣together

Before␣anything␣else,␣you␣need␣a␣testing␣plan.␣␣This␣basically␣declares
how␣many␣tests␣your␣script␣is␣going␣to␣run␣to␣protect␣against␣premature
failure.

The␣preferred␣way␣to␣do␣this␣is␣to␣declare␣a␣plan␣when␣you␣C<use␣Test::More>.

␣␣use␣Test::More␣tests␣=>␣23;

There␣are␣cases␣when␣you␣will␣not␣know␣beforehand␣how␣many␣tests␣your
script␣is␣going␣to␣run.␣␣In␣this␣case,␣you␣can␣declare␣your␣tests␣at
the␣end.

␣␣use␣Test::More;

␣␣...␣run␣your␣tests␣...

␣␣done_testing(␣$number_of_tests_run␣);

Sometimes␣you␣really␣don't␣know␣how␣many␣tests␣were␣run,␣or␣it's␣too
difficult␣to␣calculate.␣␣In␣which␣case␣you␣can␣leave␣off
$number_of_tests_run.

In␣some␣cases,␣you'll␣want␣to␣completely␣skip␣an␣entire␣testing␣script.

␣␣use␣Test::More␣skip_all␣=>␣$skip_reason;

Your␣script␣will␣declare␣a␣skip␣with␣the␣reason␣why␣you␣skipped␣and
exit␣immediately␣with␣a␣zero␣(success).␣␣See␣L<Test::Harness>␣for
details.

If␣you␣want␣to␣control␣what␣functions␣Test::More␣will␣export,␣you
have␣to␣use␣the␣'import'␣option.␣␣For␣example,␣to␣import␣everything
but␣'fail',␣you'd␣do:

␣␣use␣Test::More␣tests␣=>␣23,␣import␣=>␣['!fail'];

Alternatively,␣you␣can␣use␣the␣plan()␣function.␣␣Useful␣for␣when␣you
have␣to␣calculate␣the␣number␣of␣tests.

␣␣use␣Test::More;
␣␣plan␣tests␣=>␣keys␣%Stuff␣*␣3;

or␣for␣deciding␣between␣running␣the␣tests␣at␣all:

␣␣use␣Test::More;
␣␣if(␣$^O␣eq␣'MacOS'␣)␣{
␣␣␣␣␣␣plan␣skip_all␣=>␣'Test␣irrelevant␣on␣MacOS';
␣␣}
␣␣else␣{
␣␣␣␣␣␣plan␣tests␣=>␣42;
␣␣}

=cut
----------
Range: (7281648,7283587) (1939)
}

=head2␣Test␣names

By␣convention,␣each␣test␣is␣assigned␣a␣number␣in␣order.␣␣This␣is
largely␣done␣automatically␣for␣you.␣␣However,␣it's␣often␣very␣useful␣to
assign␣a␣name␣to␣each␣test.␣␣Which␣would␣you␣rather␣see:

␣␣ok␣4
␣␣not␣ok␣5
␣␣ok␣6

or

␣␣ok␣4␣-␣basic␣multi-variable
␣␣not␣ok␣5␣-␣simple␣exponential
␣␣ok␣6␣-␣force␣==␣mass␣*␣acceleration

The␣later␣gives␣you␣some␣idea␣of␣what␣failed.␣␣It␣also␣makes␣it␣easier
to␣find␣the␣test␣in␣your␣script,␣simply␣search␣for␣"simple
exponential".

All␣test␣functions␣take␣a␣name␣argument.␣␣It's␣optional,␣but␣highly
suggested␣that␣you␣use␣it.

=head2␣I'm␣ok,␣you're␣not␣ok.

The␣basic␣purpose␣of␣this␣module␣is␣to␣print␣out␣either␣"ok␣#"␣or␣"not
ok␣#"␣depending␣on␣if␣a␣given␣test␣succeeded␣or␣failed.␣␣Everything
else␣is␣just␣gravy.

All␣of␣the␣following␣print␣"ok"␣or␣"not␣ok"␣depending␣on␣if␣the␣test
succeeded␣or␣failed.␣␣They␣all␣also␣return␣true␣or␣false,
respectively.

=over␣4

=item␣B<ok>

␣␣ok($got␣eq␣$expected,␣$test_name);

This␣simply␣evaluates␣any␣expression␣(C<$got␣eq␣$expected>␣is␣just␣a
simple␣example)␣and␣uses␣that␣to␣determine␣if␣the␣test␣succeeded␣or
failed.␣␣A␣true␣expression␣passes,␣a␣false␣one␣fails.␣␣Very␣simple.

For␣example:

␣␣␣␣ok(␣$exp{9}␣==␣81,␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣'simple␣exponential'␣);
␣␣␣␣ok(␣Film->can('db_Main'),␣␣␣␣␣␣␣␣␣␣␣␣'set_db()'␣);
␣␣␣␣ok(␣$p->tests␣==␣4,␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣'saw␣tests'␣);
␣␣␣␣ok(␣!grep␣!defined␣$_,␣@items,␣␣␣␣␣␣␣'items␣populated'␣);

(Mnemonic:␣␣"This␣is␣ok.")

$test_name␣is␣a␣very␣short␣description␣of␣the␣test␣that␣will␣be␣printed
out.␣␣It␣makes␣it␣very␣easy␣to␣find␣a␣test␣in␣your␣script␣when␣it␣fails
and␣gives␣others␣an␣idea␣of␣your␣intentions.␣␣$test_name␣is␣optional,
but␣we␣B<very>␣strongly␣encourage␣its␣use.

Should␣an␣ok()␣fail,␣it␣will␣produce␣some␣diagnostics:

␣␣␣␣not␣ok␣18␣-␣sufficient␣mucus
␣␣␣␣#␣␣␣Failed␣test␣'sufficient␣mucus'
␣␣␣␣#␣␣␣in␣foo.t␣at␣line␣42.

This␣is␣the␣same␣as␣Test::Simple's␣ok()␣routine.

=cut
----------
Range: (7283704,7285815) (2111)
}

=item␣B<is>

=item␣B<isnt>

␣␣is␣␣(␣$got,␣$expected,␣$test_name␣);
␣␣isnt(␣$got,␣$expected,␣$test_name␣);

Similar␣to␣ok(),␣is()␣and␣isnt()␣compare␣their␣two␣arguments
with␣C<eq>␣and␣C<ne>␣respectively␣and␣use␣the␣result␣of␣that␣to
determine␣if␣the␣test␣succeeded␣or␣failed.␣␣So␣these:

␣␣␣␣#␣Is␣the␣ultimate␣answer␣42?
␣␣␣␣is(␣ultimate_answer(),␣42,␣␣␣␣␣␣␣␣␣␣"Meaning␣of␣Life"␣);

␣␣␣␣#␣$foo␣isn't␣empty
␣␣␣␣isnt(␣$foo,␣'',␣␣␣␣␣"Got␣some␣foo"␣);

are␣similar␣to␣these:

␣␣␣␣ok(␣ultimate_answer()␣eq␣42,␣␣␣␣␣␣␣␣"Meaning␣of␣Life"␣);
␣␣␣␣ok(␣$foo␣ne␣'',␣␣␣␣␣"Got␣some␣foo"␣);

(Mnemonic:␣␣"This␣is␣that."␣␣"This␣isn't␣that.")

So␣why␣use␣these?␣␣They␣produce␣better␣diagnostics␣on␣failure.␣␣ok()
cannot␣know␣what␣you␣are␣testing␣for␣(beyond␣the␣name),␣but␣is()␣and
isnt()␣know␣what␣the␣test␣was␣and␣why␣it␣failed.␣␣For␣example␣this
test:

␣␣␣␣my␣$foo␣=␣'waffle';␣␣my␣$bar␣=␣'yarblokos';
␣␣␣␣is(␣$foo,␣$bar,␣␣␣'Is␣foo␣the␣same␣as␣bar?'␣);

Will␣produce␣something␣like␣this:

␣␣␣␣not␣ok␣17␣-␣Is␣foo␣the␣same␣as␣bar?
␣␣␣␣#␣␣␣Failed␣test␣'Is␣foo␣the␣same␣as␣bar?'
␣␣␣␣#␣␣␣in␣foo.t␣at␣line␣139.
␣␣␣␣#␣␣␣␣␣␣␣␣␣␣got:␣'waffle'
␣␣␣␣#␣␣␣␣␣expected:␣'yarblokos'

So␣you␣can␣figure␣out␣what␣went␣wrong␣without␣rerunning␣the␣test.

You␣are␣encouraged␣to␣use␣is()␣and␣isnt()␣over␣ok()␣where␣possible,
however␣do␣not␣be␣tempted␣to␣use␣them␣to␣find␣out␣if␣something␣is
true␣or␣false!

␣␣#␣XXX␣BAD!
␣␣is(␣exists␣$brooklyn{tree},␣1,␣'A␣tree␣grows␣in␣Brooklyn'␣);

This␣does␣not␣check␣if␣C<exists␣$brooklyn{tree}>␣is␣true,␣it␣checks␣if
it␣returns␣1.␣␣Very␣different.␣␣Similar␣caveats␣exist␣for␣false␣and␣0.
In␣these␣cases,␣use␣ok().

␣␣ok(␣exists␣$brooklyn{tree},␣␣␣␣'A␣tree␣grows␣in␣Brooklyn'␣);

A␣simple␣call␣to␣isnt()␣usually␣does␣not␣provide␣a␣strong␣test␣but␣there
are␣cases␣when␣you␣cannot␣say␣much␣more␣about␣a␣value␣than␣that␣it␣is
different␣from␣some␣other␣value:

␣␣new_ok␣$obj,␣"Foo";

␣␣my␣$clone␣=␣$obj->clone;
␣␣isa_ok␣$obj,␣"Foo",␣"Foo->clone";

␣␣isnt␣$obj,␣$clone,␣"clone()␣produces␣a␣different␣object";

For␣those␣grammatical␣pedants␣out␣there,␣there's␣an␣C<isn't()>
function␣which␣is␣an␣alias␣of␣isnt().

=cut
----------
Range: (7304329,7306254) (1925)
}

=back


=head2␣Conditional␣tests

Sometimes␣running␣a␣test␣under␣certain␣conditions␣will␣cause␣the
test␣script␣to␣die.␣␣A␣certain␣function␣or␣method␣isn't␣implemented
(such␣as␣fork()␣on␣MacOS),␣some␣resource␣isn't␣available␣(like␣a␣
net␣connection)␣or␣a␣module␣isn't␣available.␣␣In␣these␣cases␣it's
necessary␣to␣skip␣tests,␣or␣declare␣that␣they␣are␣supposed␣to␣fail
but␣will␣work␣in␣the␣future␣(a␣todo␣test).

For␣more␣details␣on␣the␣mechanics␣of␣skip␣and␣todo␣tests␣see
L<Test::Harness>.

The␣way␣Test::More␣handles␣this␣is␣with␣a␣named␣block.␣␣Basically,␣a
block␣of␣tests␣which␣can␣be␣skipped␣over␣or␣made␣todo.␣␣It's␣best␣if␣I
just␣show␣you...

=over␣4

=item␣B<SKIP:␣BLOCK>

␣␣SKIP:␣{
␣␣␣␣␣␣skip␣$why,␣$how_many␣if␣$condition;

␣␣␣␣␣␣...normal␣testing␣code␣goes␣here...
␣␣}

This␣declares␣a␣block␣of␣tests␣that␣might␣be␣skipped,␣$how_many␣tests
there␣are,␣$why␣and␣under␣what␣$condition␣to␣skip␣them.␣␣An␣example␣is
the␣easiest␣way␣to␣illustrate:

␣␣␣␣SKIP:␣{
␣␣␣␣␣␣␣␣eval␣{␣require␣HTML::Lint␣};

␣␣␣␣␣␣␣␣skip␣"HTML::Lint␣not␣installed",␣2␣if␣$@;

␣␣␣␣␣␣␣␣my␣$lint␣=␣new␣HTML::Lint;
␣␣␣␣␣␣␣␣isa_ok(␣$lint,␣"HTML::Lint"␣);

␣␣␣␣␣␣␣␣$lint->parse(␣$html␣);
␣␣␣␣␣␣␣␣is(␣$lint->errors,␣0,␣"No␣errors␣found␣in␣HTML"␣);
␣␣␣␣}

If␣the␣user␣does␣not␣have␣HTML::Lint␣installed,␣the␣whole␣block␣of
code␣I<won't␣be␣run␣at␣all>.␣␣Test::More␣will␣output␣special␣ok's
which␣Test::Harness␣interprets␣as␣skipped,␣but␣passing,␣tests.

It's␣important␣that␣$how_many␣accurately␣reflects␣the␣number␣of␣tests
in␣the␣SKIP␣block␣so␣the␣#␣of␣tests␣run␣will␣match␣up␣with␣your␣plan.
If␣your␣plan␣is␣C<no_plan>␣$how_many␣is␣optional␣and␣will␣default␣to␣1.

It's␣perfectly␣safe␣to␣nest␣SKIP␣blocks.␣␣Each␣SKIP␣block␣must␣have
the␣label␣C<SKIP>,␣or␣Test::More␣can't␣work␣its␣magic.

You␣don't␣skip␣tests␣which␣are␣failing␣because␣there's␣a␣bug␣in␣your
program,␣or␣for␣which␣you␣don't␣yet␣have␣code␣written.␣␣For␣that␣you
use␣TODO.␣␣Read␣on.

=cut
----------
Range: (7306923,7308836) (1913)
}

=item␣B<TODO:␣BLOCK>

␣␣␣␣TODO:␣{
␣␣␣␣␣␣␣␣local␣$TODO␣=␣$why␣if␣$condition;

␣␣␣␣␣␣␣␣...normal␣testing␣code␣goes␣here...
␣␣␣␣}

Declares␣a␣block␣of␣tests␣you␣expect␣to␣fail␣and␣$why.␣␣Perhaps␣it's
because␣you␣haven't␣fixed␣a␣bug␣or␣haven't␣finished␣a␣new␣feature:

␣␣␣␣TODO:␣{
␣␣␣␣␣␣␣␣local␣$TODO␣=␣"URI::Geller␣not␣finished";

␣␣␣␣␣␣␣␣my␣$card␣=␣"Eight␣of␣clubs";
␣␣␣␣␣␣␣␣is(␣URI::Geller->your_card,␣$card,␣'Is␣THIS␣your␣card?'␣);

␣␣␣␣␣␣␣␣my␣$spoon;
␣␣␣␣␣␣␣␣URI::Geller->bend_spoon;
␣␣␣␣␣␣␣␣is(␣$spoon,␣'bent',␣␣␣␣"Spoon␣bending,␣that's␣original"␣);
␣␣␣␣}

With␣a␣todo␣block,␣the␣tests␣inside␣are␣expected␣to␣fail.␣␣Test::More
will␣run␣the␣tests␣normally,␣but␣print␣out␣special␣flags␣indicating
they␣are␣"todo".␣␣Test::Harness␣will␣interpret␣failures␣as␣being␣ok.
Should␣anything␣succeed,␣it␣will␣report␣it␣as␣an␣unexpected␣success.
You␣then␣know␣the␣thing␣you␣had␣todo␣is␣done␣and␣can␣remove␣the
TODO␣flag.

The␣nice␣part␣about␣todo␣tests,␣as␣opposed␣to␣simply␣commenting␣out␣a
block␣of␣tests,␣is␣it's␣like␣having␣a␣programmatic␣todo␣list.␣␣You␣know
how␣much␣work␣is␣left␣to␣be␣done,␣you're␣aware␣of␣what␣bugs␣there␣are,
and␣you'll␣know␣immediately␣when␣they're␣fixed.

Once␣a␣todo␣test␣starts␣succeeding,␣simply␣move␣it␣outside␣the␣block.
When␣the␣block␣is␣empty,␣delete␣it.


=item␣B<todo_skip>

␣␣␣␣TODO:␣{
␣␣␣␣␣␣␣␣todo_skip␣$why,␣$how_many␣if␣$condition;

␣␣␣␣␣␣␣␣...normal␣testing␣code...
␣␣␣␣}

With␣todo␣tests,␣it's␣best␣to␣have␣the␣tests␣actually␣run.␣␣That␣way
you'll␣know␣when␣they␣start␣passing.␣␣Sometimes␣this␣isn't␣possible.
Often␣a␣failing␣test␣will␣cause␣the␣whole␣program␣to␣die␣or␣hang,␣even
inside␣an␣C<eval␣BLOCK>␣with␣and␣using␣C<alarm>.␣␣In␣these␣extreme
cases␣you␣have␣no␣choice␣but␣to␣skip␣over␣the␣broken␣tests␣entirely.

The␣syntax␣and␣behavior␣is␣similar␣to␣a␣C<SKIP:␣BLOCK>␣except␣the
tests␣will␣be␣marked␣as␣failing␣but␣todo.␣␣Test::Harness␣will
interpret␣them␣as␣passing.

=cut
----------
Range: (7316664,7321962) (5298)
}

=back


=head2␣Extending␣and␣Embedding␣Test::More

Sometimes␣the␣Test::More␣interface␣isn't␣quite␣enough.␣␣Fortunately,
Test::More␣is␣built␣on␣top␣of␣Test::Builder␣which␣provides␣a␣single,
unified␣backend␣for␣any␣test␣library␣to␣use.␣␣This␣means␣two␣test
libraries␣which␣both␣use␣Test::Builder␣B<can␣be␣used␣together␣in␣the
same␣program>.

If␣you␣simply␣want␣to␣do␣a␣little␣tweaking␣of␣how␣the␣tests␣behave,
you␣can␣access␣the␣underlying␣Test::Builder␣object␣like␣so:

=over␣4

=item␣B<builder>

␣␣␣␣my␣$test_builder␣=␣Test::More->builder;

Returns␣the␣Test::Builder␣object␣underlying␣Test::More␣for␣you␣to␣play
with.


=back


=head1␣EXIT␣CODES

If␣all␣your␣tests␣passed,␣Test::Builder␣will␣exit␣with␣zero␣(which␣is
normal).␣␣If␣anything␣failed␣it␣will␣exit␣with␣how␣many␣failed.␣␣If
you␣run␣less␣(or␣more)␣tests␣than␣you␣planned,␣the␣missing␣(or␣extras)
will␣be␣considered␣failures.␣␣If␣no␣tests␣were␣ever␣run␣Test::Builder
will␣throw␣a␣warning␣and␣exit␣with␣255.␣␣If␣the␣test␣died,␣even␣after
having␣successfully␣completed␣all␣its␣tests,␣it␣will␣still␣be
considered␣a␣failure␣and␣will␣exit␣with␣255.

So␣the␣exit␣codes␣are...

␣␣␣␣0␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣all␣tests␣successful
␣␣␣␣255␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣test␣died␣or␣all␣passed␣but␣wrong␣#␣of␣tests␣run
␣␣␣␣any␣other␣number␣␣␣␣how␣many␣failed␣(including␣missing␣or␣extras)

If␣you␣fail␣more␣than␣254␣tests,␣it␣will␣be␣reported␣as␣254.

B<NOTE>␣␣This␣behavior␣may␣go␣away␣in␣future␣versions.


=head1␣CAVEATS␣and␣NOTES

=over␣4

=item␣Backwards␣compatibility

Test::More␣works␣with␣Perls␣as␣old␣as␣5.6.0.


=item␣utf8␣/␣"Wide␣character␣in␣print"

If␣you␣use␣utf8␣or␣other␣non-ASCII␣characters␣with␣Test::More␣you
might␣get␣a␣"Wide␣character␣in␣print"␣warning.␣␣Using␣C<binmode
STDOUT,␣":utf8">␣will␣not␣fix␣it.␣␣Test::Builder␣(which␣powers
Test::More)␣duplicates␣STDOUT␣and␣STDERR.␣␣So␣any␣changes␣to␣them,
including␣changing␣their␣output␣disciplines,␣will␣not␣be␣seem␣by
Test::More.

The␣work␣around␣is␣to␣change␣the␣filehandles␣used␣by␣Test::Builder
directly.

␣␣␣␣my␣$builder␣=␣Test::More->builder;
␣␣␣␣binmode␣$builder->output,␣␣␣␣␣␣␣␣␣":utf8";
␣␣␣␣binmode␣$builder->failure_output,␣":utf8";
␣␣␣␣binmode␣$builder->todo_output,␣␣␣␣":utf8";


=item␣Overloaded␣objects

String␣overloaded␣objects␣are␣compared␣B<as␣strings>␣(or␣in␣cmp_ok()'s
case,␣strings␣or␣numbers␣as␣appropriate␣to␣the␣comparison␣op).␣␣This
prevents␣Test::More␣from␣piercing␣an␣object's␣interface␣allowing
better␣blackbox␣testing.␣␣So␣if␣a␣function␣starts␣returning␣overloaded
objects␣instead␣of␣bare␣strings␣your␣tests␣won't␣notice␣the
difference.␣␣This␣is␣good.

However,␣it␣does␣mean␣that␣functions␣like␣is_deeply()␣cannot␣be␣used␣to
test␣the␣internals␣of␣string␣overloaded␣objects.␣␣In␣this␣case␣I␣would
suggest␣L<Test::Deep>␣which␣contains␣more␣flexible␣testing␣functions␣for
complex␣data␣structures.


=item␣Threads

Test::More␣will␣only␣be␣aware␣of␣threads␣if␣"use␣threads"␣has␣been␣done
I<before>␣Test::More␣is␣loaded.␣␣This␣is␣ok:

␣␣␣␣use␣threads;
␣␣␣␣use␣Test::More;

This␣may␣cause␣problems:

␣␣␣␣use␣Test::More
␣␣␣␣use␣threads;

5.8.1␣and␣above␣are␣supported.␣␣Anything␣below␣that␣has␣too␣many␣bugs.

=back


=head1␣HISTORY

This␣is␣a␣case␣of␣convergent␣evolution␣with␣Joshua␣Pritikin's␣Test
module.␣␣I␣was␣largely␣unaware␣of␣its␣existence␣when␣I'd␣first
written␣my␣own␣ok()␣routines.␣␣This␣module␣exists␣because␣I␣can't
figure␣out␣how␣to␣easily␣wedge␣test␣names␣into␣Test's␣interface␣(along
with␣a␣few␣other␣problems).

The␣goal␣here␣is␣to␣have␣a␣testing␣utility␣that's␣simple␣to␣learn,
quick␣to␣use␣and␣difficult␣to␣trip␣yourself␣up␣with␣while␣still
providing␣more␣flexibility␣than␣the␣existing␣Test.pm.␣␣As␣such,␣the
names␣of␣the␣most␣common␣routines␣are␣kept␣tiny,␣special␣cases␣and
magic␣side-effects␣are␣kept␣to␣a␣minimum.␣␣WYSIWYG.


=head1␣SEE␣ALSO

L<Test::Simple>␣if␣all␣this␣confuses␣you␣and␣you␣just␣want␣to␣write
some␣tests.␣␣You␣can␣upgrade␣to␣Test::More␣later␣(it's␣forward
compatible).

L<Test::Harness>␣is␣the␣test␣runner␣and␣output␣interpreter␣for␣Perl.
It's␣the␣thing␣that␣powers␣C<make␣test>␣and␣where␣the␣C<prove>␣utility
comes␣from.

L<Test::Legacy>␣tests␣written␣with␣Test.pm,␣the␣original␣testing
module,␣do␣not␣play␣well␣with␣other␣testing␣libraries.␣␣Test::Legacy
emulates␣the␣Test.pm␣interface␣and␣does␣play␣well␣with␣others.

L<Test::Differences>␣for␣more␣ways␣to␣test␣complex␣data␣structures.
And␣it␣plays␣well␣with␣Test::More.

L<Test::Class>␣is␣like␣xUnit␣but␣more␣perlish.

L<Test::Deep>␣gives␣you␣more␣powerful␣complex␣data␣structure␣testing.

L<Test::Inline>␣shows␣the␣idea␣of␣embedded␣testing.

L<Bundle::Test>␣installs␣a␣whole␣bunch␣of␣useful␣test␣modules.


=head1␣AUTHORS

Michael␣G␣Schwern␣E<lt>schwern@pobox.comE<gt>␣with␣much␣inspiration
from␣Joshua␣Pritikin's␣Test␣module␣and␣lots␣of␣help␣from␣Barrie
Slaymaker,␣Tony␣Bowden,␣blackstar.co.uk,␣chromatic,␣Fergal␣Daly␣and
the␣perl-qa␣gang.


=head1␣BUGS

See␣F<http://rt.cpan.org>␣to␣report␣and␣view␣bugs.


=head1␣SOURCE

The␣source␣code␣repository␣for␣Test::More␣can␣be␣found␣at
F<http://github.com/schwern/test-more/>.


=head1␣COPYRIGHT

Copyright␣2001-2008␣by␣Michael␣G␣Schwern␣E<lt>schwern@pobox.comE<gt>.

This␣program␣is␣free␣software;␣you␣can␣redistribute␣it␣and/or
modify␣it␣under␣the␣same␣terms␣as␣Perl␣itself.

See␣F<http://www.perl.com/perl/misc/Artistic.html>

=cut
----------
Range: (7377772,7380128) (2356)
}

=head1␣EXIT␣CODES

If␣all␣your␣tests␣passed,␣Test::Builder␣will␣exit␣with␣zero␣(which␣is
normal).␣␣If␣anything␣failed␣it␣will␣exit␣with␣how␣many␣failed.␣␣If
you␣run␣less␣(or␣more)␣tests␣than␣you␣planned,␣the␣missing␣(or␣extras)
will␣be␣considered␣failures.␣␣If␣no␣tests␣were␣ever␣run␣Test::Builder
will␣throw␣a␣warning␣and␣exit␣with␣255.␣␣If␣the␣test␣died,␣even␣after
having␣successfully␣completed␣all␣its␣tests,␣it␣will␣still␣be
considered␣a␣failure␣and␣will␣exit␣with␣255.

So␣the␣exit␣codes␣are...

␣␣␣␣0␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣all␣tests␣successful
␣␣␣␣255␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣test␣died␣or␣all␣passed␣but␣wrong␣#␣of␣tests␣run
␣␣␣␣any␣other␣number␣␣␣␣how␣many␣failed␣(including␣missing␣or␣extras)

If␣you␣fail␣more␣than␣254␣tests,␣it␣will␣be␣reported␣as␣254.

=head1␣THREADS

In␣perl␣5.8.1␣and␣later,␣Test::Builder␣is␣thread-safe.␣␣The␣test
number␣is␣shared␣amongst␣all␣threads.␣␣This␣means␣if␣one␣thread␣sets
the␣test␣number␣using␣C<current_test()>␣they␣will␣all␣be␣effected.

While␣versions␣earlier␣than␣5.8.1␣had␣threads␣they␣contain␣too␣many
bugs␣to␣support.

Test::Builder␣is␣only␣thread-aware␣if␣threads.pm␣is␣loaded␣I<before>
Test::Builder.

=head1␣MEMORY

An␣informative␣hash,␣accessable␣via␣C<<details()>>,␣is␣stored␣for␣each
test␣you␣perform.␣␣So␣memory␣usage␣will␣scale␣linearly␣with␣each␣test
run.␣Although␣this␣is␣not␣a␣problem␣for␣most␣test␣suites,␣it␣can
become␣an␣issue␣if␣you␣do␣large␣(hundred␣thousands␣to␣million)
combinatorics␣tests␣in␣the␣same␣run.

In␣such␣cases,␣you␣are␣advised␣to␣either␣split␣the␣test␣file␣into␣smaller
ones,␣or␣use␣a␣reverse␣approach,␣doing␣"normal"␣(code)␣compares␣and
triggering␣fail()␣should␣anything␣go␣unexpected.

Future␣versions␣of␣Test::Builder␣will␣have␣a␣way␣to␣turn␣history␣off.


=head1␣EXAMPLES

CPAN␣can␣provide␣the␣best␣examples.␣␣Test::Simple,␣Test::More,
Test::Exception␣and␣Test::Differences␣all␣use␣Test::Builder.

=head1␣SEE␣ALSO

Test::Simple,␣Test::More,␣Test::Harness

=head1␣AUTHORS

Original␣code␣by␣chromatic,␣maintained␣by␣Michael␣G␣Schwern
E<lt>schwern@pobox.comE<gt>

=head1␣COPYRIGHT

Copyright␣2002-2008␣by␣chromatic␣E<lt>chromatic@wgz.orgE<gt>␣and
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣Michael␣G␣Schwern␣E<lt>schwern@pobox.comE<gt>.

This␣program␣is␣free␣software;␣you␣can␣redistribute␣it␣and/or
modify␣it␣under␣the␣same␣terms␣as␣Perl␣itself.

See␣F<http://www.perl.com/perl/misc/Artistic.html>

=cut
----------
Range: (7419109,7421141) (2032)
=head1␣NAME

Env␣-␣perl␣module␣that␣imports␣environment␣variables␣as␣scalars␣or␣arrays

=head1␣SYNOPSIS

␣␣␣␣use␣Env;
␣␣␣␣use␣Env␣qw(PATH␣HOME␣TERM);
␣␣␣␣use␣Env␣qw($SHELL␣@LD_LIBRARY_PATH);

=head1␣DESCRIPTION

Perl␣maintains␣environment␣variables␣in␣a␣special␣hash␣named␣C<%ENV>.␣␣For
when␣this␣access␣method␣is␣inconvenient,␣the␣Perl␣module␣C<Env>␣allows
environment␣variables␣to␣be␣treated␣as␣scalar␣or␣array␣variables.

The␣C<Env::import()>␣function␣ties␣environment␣variables␣with␣suitable
names␣to␣global␣Perl␣variables␣with␣the␣same␣names.␣␣By␣default␣it
ties␣all␣existing␣environment␣variables␣(C<keys␣%ENV>)␣to␣scalars.␣␣If
the␣C<import>␣function␣receives␣arguments,␣it␣takes␣them␣to␣be␣a␣list␣of
variables␣to␣tie;␣it's␣okay␣if␣they␣don't␣yet␣exist.␣The␣scalar␣type
prefix␣'$'␣is␣inferred␣for␣any␣element␣of␣this␣list␣not␣prefixed␣by␣'$'
or␣'@'.␣Arrays␣are␣implemented␣in␣terms␣of␣C<split>␣and␣C<join>,␣using
C<$Config::Config{path_sep}>␣as␣the␣delimiter.

After␣an␣environment␣variable␣is␣tied,␣merely␣use␣it␣like␣a␣normal␣variable.
You␣may␣access␣its␣value␣

␣␣␣␣@path␣=␣split(/:/,␣$PATH);
␣␣␣␣print␣join("\n",␣@LD_LIBRARY_PATH),␣"\n";

or␣modify␣it

␣␣␣␣$PATH␣.=␣":.";
␣␣␣␣push␣@LD_LIBRARY_PATH,␣$dir;

however␣you'd␣like.␣Bear␣in␣mind,␣however,␣that␣each␣access␣to␣a␣tied␣array
variable␣requires␣splitting␣the␣environment␣variable's␣string␣anew.

The␣code:

␣␣␣␣use␣Env␣qw(@PATH);
␣␣␣␣push␣@PATH,␣'.';

is␣equivalent␣to:

␣␣␣␣use␣Env␣qw(PATH);
␣␣␣␣$PATH␣.=␣":.";

except␣that␣if␣C<$ENV{PATH}>␣started␣out␣empty,␣the␣second␣approach␣leaves
it␣with␣the␣(odd)␣value␣"C<:.>",␣but␣the␣first␣approach␣leaves␣it␣with␣"C<.>".

To␣remove␣a␣tied␣environment␣variable␣from
the␣environment,␣assign␣it␣the␣undefined␣value

␣␣␣␣undef␣$PATH;
␣␣␣␣undef␣@LD_LIBRARY_PATH;

=head1␣LIMITATIONS

On␣VMS␣systems,␣arrays␣tied␣to␣environment␣variables␣are␣read-only.␣Attempting
to␣change␣anything␣will␣cause␣a␣warning.

=head1␣AUTHOR

Chip␣Salzenberg␣E<lt>F<chip@fin.uucp>E<gt>
and
Gregor␣N.␣Purdy␣E<lt>F<gregor@focusresearch.com>E<gt>

=cut
----------
Range: (7429396,7431416) (2020)
}

=head2␣$tar->read␣(␣$filename|$handle,␣[$compressed,␣{opt␣=>␣'val'}]␣)

Read␣the␣given␣tar␣file␣into␣memory.
The␣first␣argument␣can␣either␣be␣the␣name␣of␣a␣file␣or␣a␣reference␣to
an␣already␣open␣filehandle␣(or␣an␣IO::Zlib␣object␣if␣it's␣compressed)

The␣C<read>␣will␣I<replace>␣any␣previous␣content␣in␣C<$tar>!

The␣second␣argument␣may␣be␣considered␣optional,␣but␣remains␣for
backwards␣compatibility.␣Archive::Tar␣now␣looks␣at␣the␣file
magic␣to␣determine␣what␣class␣should␣be␣used␣to␣open␣the␣file
and␣will␣transparently␣Do␣The␣Right␣Thing.

Archive::Tar␣will␣warn␣if␣you␣try␣to␣pass␣a␣bzip2␣compressed␣file␣and␣the
IO::Zlib␣/␣IO::Uncompress::Bunzip2␣modules␣are␣not␣available␣and␣simply␣return.

Note␣that␣you␣can␣currently␣B<not>␣pass␣a␣C<gzip>␣compressed
filehandle,␣which␣is␣not␣opened␣with␣C<IO::Zlib>,␣a␣C<bzip2>␣compressed
filehandle,␣which␣is␣not␣opened␣with␣C<IO::Uncompress::Bunzip2>,␣nor␣a␣string
containing␣the␣full␣archive␣information␣(either␣compressed␣or
uncompressed).␣These␣are␣worth␣while␣features,␣but␣not␣currently
implemented.␣See␣the␣C<TODO>␣section.

The␣third␣argument␣can␣be␣a␣hash␣reference␣with␣options.␣Note␣that
all␣options␣are␣case-sensitive.

=over␣4

=item␣limit

Do␣not␣read␣more␣than␣C<limit>␣files.␣This␣is␣useful␣if␣you␣have
very␣big␣archives,␣and␣are␣only␣interested␣in␣the␣first␣few␣files.

=item␣filter

Can␣be␣set␣to␣a␣regular␣expression.␣␣Only␣files␣with␣names␣that␣match
the␣expression␣will␣be␣read.

=item␣extract

If␣set␣to␣true,␣immediately␣extract␣entries␣when␣reading␣them.␣This
gives␣you␣the␣same␣memory␣break␣as␣the␣C<extract_archive>␣function.
Note␣however␣that␣entries␣will␣not␣be␣read␣into␣memory,␣but␣written
straight␣to␣disk.␣This␣means␣no␣C<Archive::Tar::File>␣objects␣are
created␣for␣you␣to␣inspect.

=back

All␣files␣are␣stored␣internally␣as␣C<Archive::Tar::File>␣objects.
Please␣consult␣the␣L<Archive::Tar::File>␣documentation␣for␣details.

Returns␣the␣number␣of␣files␣read␣in␣scalar␣context,␣and␣a␣list␣of
C<Archive::Tar::File>␣objects␣in␣list␣context.

=cut
----------
Range: (7525435,7528846) (3411)
=pod

=head1␣HOW␣IT␣WORKS

C<Archive::Extract>␣tries␣first␣to␣determine␣what␣type␣of␣archive␣you
are␣passing␣it,␣by␣inspecting␣its␣suffix.␣It␣does␣not␣do␣this␣by␣using
Mime␣magic,␣or␣something␣related.␣See␣C<CAVEATS>␣below.

Once␣it␣has␣determined␣the␣file␣type,␣it␣knows␣which␣extraction␣methods
it␣can␣use␣on␣the␣archive.␣It␣will␣try␣a␣perl␣solution␣first,␣then␣fall
back␣to␣a␣commandline␣tool␣if␣that␣fails.␣If␣that␣also␣fails,␣it␣will
return␣false,␣indicating␣it␣was␣unable␣to␣extract␣the␣archive.
See␣the␣section␣on␣C<GLOBAL␣VARIABLES>␣to␣see␣how␣to␣alter␣this␣order.

=head1␣CAVEATS

=head2␣File␣Extensions

C<Archive::Extract>␣trusts␣on␣the␣extension␣of␣the␣archive␣to␣determine
what␣type␣it␣is,␣and␣what␣extractor␣methods␣therefore␣can␣be␣used.␣If
your␣archives␣do␣not␣have␣any␣of␣the␣extensions␣as␣described␣in␣the
C<new()>␣method,␣you␣will␣have␣to␣specify␣the␣type␣explicitly,␣or
C<Archive::Extract>␣will␣not␣be␣able␣to␣extract␣the␣archive␣for␣you.

=head2␣Supporting␣Very␣Large␣Files

C<Archive::Extract>␣can␣use␣either␣pure␣perl␣modules␣or␣command␣line
programs␣under␣the␣hood.␣Some␣of␣the␣pure␣perl␣modules␣(like␣
C<Archive::Tar>␣and␣Compress::unLZMA)␣take␣the␣entire␣contents␣of␣the␣archive␣into␣memory,
which␣may␣not␣be␣feasible␣on␣your␣system.␣Consider␣setting␣the␣global
variable␣C<$Archive::Extract::PREFER_BIN>␣to␣C<1>,␣which␣will␣prefer
the␣use␣of␣command␣line␣programs␣and␣won't␣consume␣so␣much␣memory.

See␣the␣C<GLOBAL␣VARIABLES>␣section␣below␣for␣details.

=head2␣Bunzip2␣support␣of␣arbitrary␣extensions.

Older␣versions␣of␣C</bin/bunzip2>␣do␣not␣support␣arbitrary␣file␣
extensions␣and␣insist␣on␣a␣C<.bz2>␣suffix.␣Although␣we␣do␣our␣best
to␣guard␣against␣this,␣if␣you␣experience␣a␣bunzip2␣error,␣it␣may
be␣related␣to␣this.␣For␣details,␣please␣see␣the␣C<have_old_bunzip2>
method.

=head1␣GLOBAL␣VARIABLES

=head2␣$Archive::Extract::DEBUG

Set␣this␣variable␣to␣C<true>␣to␣have␣all␣calls␣to␣command␣line␣tools
be␣printed␣out,␣including␣all␣their␣output.
This␣also␣enables␣C<Carp::longmess>␣errors,␣instead␣of␣the␣regular
C<carp>␣errors.

Good␣for␣tracking␣down␣why␣things␣don't␣work␣with␣your␣particular
setup.

Defaults␣to␣C<false>.

=head2␣$Archive::Extract::WARN

This␣variable␣controls␣whether␣errors␣encountered␣internally␣by
C<Archive::Extract>␣should␣be␣C<carp>'d␣or␣not.

Set␣to␣false␣to␣silence␣warnings.␣Inspect␣the␣output␣of␣the␣C<error()>
method␣manually␣to␣see␣what␣went␣wrong.

Defaults␣to␣C<true>.

=head2␣$Archive::Extract::PREFER_BIN

This␣variables␣controls␣whether␣C<Archive::Extract>␣should␣prefer␣the
use␣of␣perl␣modules,␣or␣commandline␣tools␣to␣extract␣archives.

Set␣to␣C<true>␣to␣have␣C<Archive::Extract>␣prefer␣commandline␣tools.

Defaults␣to␣C<false>.

=head1␣TODO␣/␣CAVEATS

=over␣4

=item␣Mime␣magic␣support

Maybe␣this␣module␣should␣use␣something␣like␣C<File::Type>␣to␣determine
the␣type,␣rather␣than␣blindly␣trust␣the␣suffix.

=item␣Thread␣safety

Currently,␣C<Archive::Extract>␣does␣a␣C<chdir>␣to␣the␣extraction␣dir␣before
extraction,␣and␣a␣C<chdir>␣back␣again␣after.␣This␣is␣not␣necessarily␣
thread␣safe.␣See␣C<rt.cpan.org>␣bug␣C<#45671>␣for␣details.

=back

=head1␣BUG␣REPORTS

Please␣report␣bugs␣or␣other␣issues␣to␣E<lt>bug-archive-extract@rt.cpan.org<gt>.

=head1␣AUTHOR

This␣module␣by␣Jos␣Boumans␣E<lt>kane@cpan.orgE<gt>.

=head1␣COPYRIGHT

This␣library␣is␣free␣software;␣you␣may␣redistribute␣and/or␣modify␣it␣
under␣the␣same␣terms␣as␣Perl␣itself.

=cut
----------
Range: (7530558,7532925) (2367)
}
␣␣␣␣}
}

=head1␣NAME

Archive::Tar::File␣-␣a␣subclass␣for␣in-memory␣extracted␣file␣from␣Archive::Tar

=head1␣SYNOPSIS

␣␣␣␣my␣@items␣=␣$tar->get_files;

␣␣␣␣print␣$_->name,␣'␣',␣$_->size,␣"\n"␣for␣@items;

␣␣␣␣print␣$object->get_content;
␣␣␣␣$object->replace_content('new␣content');

␣␣␣␣$object->rename(␣'new/full/path/to/file.c'␣);

=head1␣DESCRIPTION

Archive::Tar::Files␣provides␣a␣neat␣little␣object␣layer␣for␣in-memory
extracted␣files.␣It's␣mostly␣used␣internally␣in␣Archive::Tar␣to␣tidy
up␣the␣code,␣but␣there's␣no␣reason␣users␣shouldn't␣use␣this␣API␣as
well.

=head2␣Accessors

A␣lot␣of␣the␣methods␣in␣this␣package␣are␣accessors␣to␣the␣various
fields␣in␣the␣tar␣header:

=over␣4

=item␣name

The␣file's␣name

=item␣mode

The␣file's␣mode

=item␣uid

The␣user␣id␣owning␣the␣file

=item␣gid

The␣group␣id␣owning␣the␣file

=item␣size

File␣size␣in␣bytes

=item␣mtime

Modification␣time.␣Adjusted␣to␣mac-time␣on␣MacOS␣if␣required

=item␣chksum

Checksum␣field␣for␣the␣tar␣header

=item␣type

File␣type␣--␣numeric,␣but␣comparable␣to␣exported␣constants␣--␣see
Archive::Tar's␣documentation

=item␣linkname

If␣the␣file␣is␣a␣symlink,␣the␣file␣it's␣pointing␣to

=item␣magic

Tar␣magic␣string␣--␣not␣useful␣for␣most␣users

=item␣version

Tar␣version␣string␣--␣not␣useful␣for␣most␣users

=item␣uname

The␣user␣name␣that␣owns␣the␣file

=item␣gname

The␣group␣name␣that␣owns␣the␣file

=item␣devmajor

Device␣major␣number␣in␣case␣of␣a␣special␣file

=item␣devminor

Device␣minor␣number␣in␣case␣of␣a␣special␣file

=item␣prefix

Any␣directory␣to␣prefix␣to␣the␣extraction␣path,␣if␣any

=item␣raw

Raw␣tar␣header␣--␣not␣useful␣for␣most␣users

=back

=head1␣Methods

=head2␣Archive::Tar::File->new(␣file␣=>␣$path␣)

Returns␣a␣new␣Archive::Tar::File␣object␣from␣an␣existing␣file.

Returns␣undef␣on␣failure.

=head2␣Archive::Tar::File->new(␣data␣=>␣$path,␣$data,␣$opt␣)

Returns␣a␣new␣Archive::Tar::File␣object␣from␣data.

C<$path>␣defines␣the␣file␣name␣(which␣need␣not␣exist),␣C<$data>␣the
file␣contents,␣and␣C<$opt>␣is␣a␣reference␣to␣a␣hash␣of␣attributes
which␣may␣be␣used␣to␣override␣the␣default␣attributes␣(fields␣in␣the
tar␣header),␣which␣are␣described␣above␣in␣the␣Accessors␣section.

Returns␣undef␣on␣failure.

=head2␣Archive::Tar::File->new(␣chunk␣=>␣$chunk␣)

Returns␣a␣new␣Archive::Tar::File␣object␣from␣a␣raw␣512-byte␣tar
archive␣chunk.

Returns␣undef␣on␣failure.

=cut
----------
