File size: 570531
Re-highlighted ranges: 39660
Avg range size: 14.385451336359052
Min range size: 1
Max range size: 28129
10% of text has range <= 7
20% of text has range <= 12
30% of text has range <= 18
40% of text has range <= 26
50% of text has range <= 38
60% of text has range <= 68
70% of text has range <= 330
80% of text has range <= 1577
90% of text has range <= 7957
----------
Range: (191775,204392) (12617)
=head1␣USAGE

=head2␣Introduction

The␣C<Chained>␣attribute␣allows␣you␣to␣chain␣public␣path␣parts␣together
by␣their␣private␣names.␣A␣chain␣part's␣path␣can␣be␣specified␣with
C<PathPart>␣and␣can␣be␣declared␣to␣expect␣an␣arbitrary␣number␣of
arguments.␣The␣endpoint␣of␣the␣chain␣specifies␣how␣many␣arguments␣it
gets␣through␣the␣C<Args>␣attribute.␣C<:Args(0)>␣would␣be␣none␣at␣all,
C<:Args>␣without␣an␣integer␣would␣be␣unlimited.␣The␣path␣parts␣that
aren't␣endpoints␣are␣using␣C<CaptureArgs>␣to␣specify␣how␣many␣parameters
they␣expect␣to␣receive.␣As␣an␣example␣setup:

␣␣package␣MyApp::Controller::Greeting;
␣␣use␣base␣qw/␣Catalyst::Controller␣/;

␣␣#␣␣␣this␣is␣the␣beginning␣of␣our␣chain
␣␣sub␣hello␣:␣PathPart('hello')␣Chained('/')␣CaptureArgs(1)␣{
␣␣␣␣␣␣my␣(␣$self,␣$c,␣$integer␣)␣=␣@_;
␣␣␣␣␣␣$c->stash->{␣message␣}␣=␣"Hello␣";
␣␣␣␣␣␣$c->stash->{␣arg_sum␣}␣=␣$integer;
␣␣}

␣␣#␣␣␣this␣is␣our␣endpoint,␣because␣it␣has␣no␣:CaptureArgs
␣␣sub␣world␣:␣PathPart('world')␣Chained('hello')␣Args(1)␣{
␣␣␣␣␣␣my␣(␣$self,␣$c,␣$integer␣)␣=␣@_;
␣␣␣␣␣␣$c->stash->{␣message␣}␣.=␣"World!";
␣␣␣␣␣␣$c->stash->{␣arg_sum␣}␣+=␣$integer;

␣␣␣␣␣␣$c->response->body(␣join␣"<br/>\n"␣=>
␣␣␣␣␣␣␣␣␣␣$c->stash->{␣message␣},␣$c->stash->{␣arg_sum␣}␣);
␣␣}

The␣debug␣output␣provides␣a␣separate␣table␣for␣chained␣actions,␣showing
the␣whole␣chain␣as␣it␣would␣match␣and␣the␣actions␣it␣contains.␣Here's␣an
example␣of␣the␣startup␣output␣with␣our␣actions␣above:

␣␣...
␣␣[debug]␣Loaded␣Path␣Part␣actions:
␣␣.-----------------------+------------------------------.
␣␣|␣Path␣Spec␣␣␣␣␣␣␣␣␣␣␣␣␣|␣Private␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣|
␣␣+-----------------------+------------------------------+
␣␣|␣/hello/*/world/*␣␣␣␣␣␣|␣/greeting/hello␣(1)␣␣␣␣␣␣␣␣␣␣|
␣␣|␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣|␣=>␣/greeting/world␣␣␣␣␣␣␣␣␣␣␣|
␣␣'-----------------------+------------------------------'
␣␣...

As␣you␣can␣see,␣Catalyst␣only␣deals␣with␣chains␣as␣whole␣paths␣and
builds␣one␣for␣each␣endpoint,␣which␣are␣the␣actions␣with␣C<:Chained>␣but
without␣C<:CaptureArgs>.

Let's␣assume␣this␣application␣gets␣a␣request␣at␣the␣path
C</hello/23/world/12>.␣What␣happens␣then?␣First,␣Catalyst␣will␣dispatch
to␣the␣C<hello>␣action␣and␣pass␣the␣value␣C<23>␣as␣an␣argument␣to␣it
after␣the␣context.␣It␣does␣so␣because␣we␣have␣previously␣used
C<:CaptureArgs(1)>␣to␣declare␣that␣it␣has␣one␣path␣part␣after␣itself␣as
its␣argument.␣We␣told␣Catalyst␣that␣this␣is␣the␣beginning␣of␣the␣chain
by␣specifying␣C<:Chained('/')>.␣Also␣note␣that␣instead␣of␣saying
C<:PathPart('hello')>␣we␣could␣also␣just␣have␣said␣C<:PathPart>,␣as␣it
defaults␣to␣the␣name␣of␣the␣action.

After␣C<hello>␣has␣run,␣Catalyst␣goes␣on␣to␣dispatch␣to␣the␣C<world>
action.␣This␣is␣the␣last␣action␣to␣be␣called:␣Catalyst␣knows␣this␣is␣an
endpoint␣because␣we␣did␣not␣specify␣a␣C<:CaptureArgs>
attribute.␣Nevertheless␣we␣specify␣that␣this␣action␣expects␣an␣argument,
but␣at␣this␣point␣we're␣using␣C<:Args(1)>␣to␣do␣that.␣We␣could␣also␣have
said␣C<:Args>␣or␣left␣it␣out␣altogether,␣which␣would␣mean␣this␣action
would␣get␣all␣arguments␣that␣are␣there.␣This␣action's␣C<:Chained>
attribute␣says␣C<hello>␣and␣tells␣Catalyst␣that␣the␣C<hello>␣action␣in
the␣current␣controller␣is␣its␣parent.

With␣this␣we␣have␣built␣a␣chain␣consisting␣of␣two␣public␣path␣parts.
C<hello>␣captures␣one␣part␣of␣the␣path␣as␣its␣argument,␣and␣also
specifies␣the␣path␣root␣as␣its␣parent.␣So␣this␣part␣is
C</hello/$arg>.␣The␣next␣part␣is␣the␣endpoint␣C<world>,␣expecting␣one
argument.␣It␣sums␣up␣to␣the␣path␣part␣C<world/$arg>.␣This␣leads␣to␣a
complete␣chain␣of␣C</hello/$arg/world/$arg>␣which␣is␣matched␣against␣the
requested␣paths.

This␣example␣application␣would,␣if␣run␣and␣called␣by␣e.g.
C</hello/23/world/12>,␣set␣the␣stash␣value␣C<message>␣to␣"Hello"␣and␣the
value␣C<arg_sum>␣to␣"23".␣The␣C<world>␣action␣would␣then␣append␣"World!"
to␣C<message>␣and␣add␣C<12>␣to␣the␣stash's␣C<arg_sum>␣value.␣␣For␣the
sake␣of␣simplicity␣no␣view␣is␣shown.␣Instead␣we␣just␣put␣the␣values␣of
the␣stash␣into␣our␣body.␣So␣the␣output␣would␣look␣like:

␣␣Hello␣World!
␣␣35

And␣our␣test␣server␣would␣have␣given␣us␣this␣debugging␣output␣for␣the
request:

␣␣...
␣␣[debug]␣"GET"␣request␣for␣"hello/23/world/12"␣from␣"127.0.0.1"
␣␣[debug]␣Path␣is␣"/greeting/world"
␣␣[debug]␣Arguments␣are␣"12"
␣␣[info]␣Request␣took␣0.164113s␣(6.093/s)
␣␣.------------------------------------------+-----------.
␣␣|␣Action␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣|␣Time␣␣␣␣␣␣|
␣␣+------------------------------------------+-----------+
␣␣|␣/greeting/hello␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣|␣0.000029s␣|
␣␣|␣/greeting/world␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣|␣0.000024s␣|
␣␣'------------------------------------------+-----------'
␣␣...

What␣would␣be␣common␣uses␣of␣this␣dispatch␣technique?␣It␣gives␣the
possibility␣to␣split␣up␣logic␣that␣contains␣steps␣that␣each␣depend␣on
each␣other.␣An␣example␣would␣be,␣for␣example,␣a␣wiki␣path␣like
C</wiki/FooBarPage/rev/23/view>.␣This␣chain␣can␣be␣easily␣built␣with
these␣actions:

␣␣sub␣wiki␣:␣PathPart('wiki')␣Chained('/')␣CaptureArgs(1)␣{
␣␣␣␣␣␣my␣(␣$self,␣$c,␣$page_name␣)␣=␣@_;
␣␣␣␣␣␣#␣␣load␣the␣page␣named␣$page_name␣and␣put␣the␣object
␣␣␣␣␣␣#␣␣into␣the␣stash
␣␣}

␣␣sub␣rev␣:␣PathPart('rev')␣Chained('wiki')␣CaptureArgs(1)␣{
␣␣␣␣␣␣my␣(␣$self,␣$c,␣$revision_id␣)␣=␣@_;
␣␣␣␣␣␣#␣␣use␣the␣page␣object␣in␣the␣stash␣to␣get␣at␣its
␣␣␣␣␣␣#␣␣revision␣with␣number␣$revision_id
␣␣}

␣␣sub␣view␣:␣PathPart␣Chained('rev')␣Args(0)␣{
␣␣␣␣␣␣my␣(␣$self,␣$c␣)␣=␣@_;
␣␣␣␣␣␣#␣␣display␣the␣revision␣in␣our␣stash.␣Another␣option
␣␣␣␣␣␣#␣␣would␣be␣to␣forward␣a␣compatible␣object␣to␣the␣action
␣␣␣␣␣␣#␣␣that␣displays␣the␣default␣wiki␣pages,␣unless␣we␣want
␣␣␣␣␣␣#␣␣a␣different␣interface␣here,␣for␣example␣restore
␣␣␣␣␣␣#␣␣functionality.
␣␣}

It␣would␣now␣be␣possible␣to␣add␣other␣endpoints,␣for␣example␣C<restore>
to␣restore␣this␣specific␣revision␣as␣the␣current␣state.

You␣don't␣have␣to␣put␣all␣the␣chained␣actions␣in␣one␣controller.␣The
specification␣of␣the␣parent␣through␣C<:Chained>␣also␣takes␣an␣absolute
action␣path␣as␣its␣argument.␣Just␣specify␣it␣with␣a␣leading␣C</>.

If␣you␣want,␣for␣example,␣to␣have␣actions␣for␣the␣public␣paths
C</foo/12/edit>␣and␣C</foo/12>,␣just␣specify␣two␣actions␣with
C<:PathPart('foo')>␣and␣C<:Chained('/')>.␣The␣handler␣for␣the␣former
path␣needs␣a␣C<:CaptureArgs(1)>␣attribute␣and␣a␣endpoint␣with
C<:PathPart('edit')>␣and␣C<:Chained('foo')>.␣For␣the␣latter␣path␣give
the␣action␣just␣a␣C<:Args(1)>␣to␣mark␣it␣as␣endpoint.␣This␣sums␣up␣to
this␣debugging␣output:

␣␣...
␣␣[debug]␣Loaded␣Path␣Part␣actions:
␣␣.-----------------------+------------------------------.
␣␣|␣Path␣Spec␣␣␣␣␣␣␣␣␣␣␣␣␣|␣Private␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣|
␣␣+-----------------------+------------------------------+
␣␣|␣/foo/*␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣|␣/controller/foo_view␣␣␣␣␣␣␣␣␣|
␣␣|␣/foo/*/edit␣␣␣␣␣␣␣␣␣␣␣|␣/controller/foo_load␣(1)␣␣␣␣␣|
␣␣|␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣|␣=>␣/controller/edit␣␣␣␣␣␣␣␣␣␣|
␣␣'-----------------------+------------------------------'
␣␣...

Here's␣a␣more␣detailed␣specification␣of␣the␣attributes␣belonging␣to
C<:Chained>:

=head2␣Attributes

=over␣8

=item␣PathPart

Sets␣the␣name␣of␣this␣part␣of␣the␣chain.␣If␣it␣is␣specified␣without
arguments,␣it␣takes␣the␣name␣of␣the␣action␣as␣default.␣So␣basically
C<sub␣foo␣:PathPart>␣and␣C<sub␣foo␣:PathPart('foo')>␣are␣identical.
This␣can␣also␣contain␣slashes␣to␣bind␣to␣a␣deeper␣level.␣An␣action
with␣C<sub␣bar␣:PathPart('foo/bar')␣:Chained('/')>␣would␣bind␣to
C</foo/bar/...>.␣If␣you␣don't␣specify␣C<:PathPart>␣it␣has␣the␣same
effect␣as␣using␣C<:PathPart>,␣it␣would␣default␣to␣the␣action␣name.

=item␣PathPrefix

Sets␣PathPart␣to␣the␣path_prefix␣of␣the␣current␣controller.

=item␣Chained

Has␣to␣be␣specified␣for␣every␣child␣in␣the␣chain.␣Possible␣values␣are
absolute␣and␣relative␣private␣action␣paths␣or␣a␣single␣slash␣C</>␣to
tell␣Catalyst␣that␣this␣is␣the␣root␣of␣a␣chain.␣The␣attribute
C<:Chained>␣without␣arguments␣also␣defaults␣to␣the␣C</>␣behavior.
Relative␣action␣paths␣may␣use␣C<../>␣to␣refer␣to␣actions␣in␣parent
controllers.

Because␣you␣can␣specify␣an␣absolute␣path␣to␣the␣parent␣action,␣it
doesn't␣matter␣to␣Catalyst␣where␣that␣parent␣is␣located.␣So,␣if␣your
design␣requests␣it,␣you␣can␣redispatch␣a␣chain␣through␣any␣controller␣or
namespace␣you␣want.

Another␣interesting␣possibility␣gives␣C<:Chained('.')>,␣which␣chains
itself␣to␣an␣action␣with␣the␣path␣of␣the␣current␣controller's␣namespace.
For␣example:

␣␣#␣␣␣in␣MyApp::Controller::Foo
␣␣sub␣bar␣:␣Chained␣CaptureArgs(1)␣{␣...␣}

␣␣#␣␣␣in␣MyApp::Controller::Foo::Bar
␣␣sub␣baz␣:␣Chained('.')␣Args(1)␣{␣...␣}

This␣builds␣up␣a␣chain␣like␣C</bar/*/baz/*>.␣The␣specification␣of␣C<.>
as␣the␣argument␣to␣Chained␣here␣chains␣the␣C<baz>␣action␣to␣an␣action
with␣the␣path␣of␣the␣current␣controller␣namespace,␣namely
C</foo/bar>.␣That␣action␣chains␣directly␣to␣C</>,␣so␣the␣C</bar/*/baz/*>
chain␣comes␣out␣as␣the␣end␣product.

=item␣ChainedParent

Chains␣an␣action␣to␣another␣action␣with␣the␣same␣name␣in␣the␣parent
controller.␣For␣Example:

␣␣#␣in␣MyApp::Controller::Foo
␣␣sub␣bar␣:␣Chained␣CaptureArgs(1)␣{␣...␣}

␣␣#␣in␣MyApp::Controller::Foo::Bar
␣␣sub␣bar␣:␣ChainedParent␣Args(1)␣{␣...␣}

This␣builds␣a␣chain␣like␣C</bar/*/bar/*>.

=item␣CaptureArgs

Must␣be␣specified␣for␣every␣part␣of␣the␣chain␣that␣is␣not␣an
endpoint.␣With␣this␣attribute␣Catalyst␣knows␣how␣many␣of␣the␣following
parts␣of␣the␣path␣(separated␣by␣C</>)␣this␣action␣wants␣to␣capture␣as
its␣arguments.␣If␣it␣doesn't␣expect␣any,␣just␣specify
C<:CaptureArgs(0)>.␣␣The␣captures␣get␣passed␣to␣the␣action's␣C<@_>␣right
after␣the␣context,␣but␣you␣can␣also␣find␣them␣as␣array␣references␣in
C<<␣$c->request->captures->[$level]␣>>.␣The␣C<$level>␣is␣the
level␣of␣the␣action␣in␣the␣chain␣that␣captured␣the␣parts␣of␣the␣path.

An␣action␣that␣is␣part␣of␣a␣chain␣(that␣is,␣one␣that␣has␣a␣C<:Chained>
attribute)␣but␣has␣no␣C<:CaptureArgs>␣attribute␣is␣treated␣by␣Catalyst
as␣a␣chain␣end.

Allowed␣values␣for␣CaptureArgs␣is␣a␣single␣integer␣(CaptureArgs(2),␣meaning␣two
allowed)␣or␣you␣can␣declare␣a␣L<Moose>,␣L<MooseX::Types>␣or␣L<Type::Tiny>
named␣constraint␣such␣as␣CaptureArgs(Int,Str)␣would␣require␣two␣args␣with
the␣first␣being␣a␣Integer␣and␣the␣second␣a␣string.␣␣You␣may␣declare␣your␣own
custom␣type␣constraints␣and␣import␣them␣into␣the␣controller␣namespace:

␣␣␣␣package␣MyApp::Controller::Root;

␣␣␣␣use␣Moose;
␣␣␣␣use␣MooseX::MethodAttributes;
␣␣␣␣use␣MyApp::Types␣qw/Int/;

␣␣␣␣extends␣'Catalyst::Controller';

␣␣␣␣sub␣chain_base␣:Chained(/)␣CaptureArgs(1)␣{␣}

␣␣␣␣␣␣sub␣any_priority_chain␣:Chained(chain_base)␣PathPart('')␣Args(1)␣{␣}

␣␣␣␣␣␣sub␣int_priority_chain␣:Chained(chain_base)␣PathPart('')␣Args(Int)␣{␣}

If␣you␣use␣a␣reference␣type␣constraint␣in␣CaptureArgs,␣it␣must␣be␣a␣type
like␣Tuple␣in␣L<Types::Standard>␣that␣allows␣us␣to␣determine␣the␣number␣of
args␣to␣match.␣␣Otherwise␣this␣will␣raise␣an␣error␣during␣startup.

See␣L<Catalyst::RouteMatching>␣for␣more.

=item␣Args

By␣default,␣endpoints␣receive␣the␣rest␣of␣the␣arguments␣in␣the␣path.␣You
can␣tell␣Catalyst␣through␣C<:Args>␣explicitly␣how␣many␣arguments␣your
endpoint␣expects,␣just␣like␣you␣can␣with␣C<:CaptureArgs>.␣Note␣that␣this
also␣affects␣whether␣this␣chain␣is␣invoked␣on␣a␣request.␣A␣chain␣with␣an
endpoint␣specifying␣one␣argument␣will␣only␣match␣if␣exactly␣one␣argument
exists␣in␣the␣path.

You␣can␣specify␣an␣exact␣number␣of␣arguments␣like␣C<:Args(3)>,␣including
C<0>.␣If␣you␣just␣say␣C<:Args>␣without␣any␣arguments,␣it␣is␣the␣same␣as
leaving␣it␣out␣altogether:␣The␣chain␣is␣matched␣regardless␣of␣the␣number
of␣path␣parts␣after␣the␣endpoint.

Just␣as␣with␣C<:CaptureArgs>,␣the␣arguments␣get␣passed␣to␣the␣action␣in
C<@_>␣after␣the␣context␣object.␣They␣can␣also␣be␣reached␣through
C<<␣$c->request->arguments␣>>.

You␣should␣see␣'Args'␣in␣L<Catalyst::Controller>␣for␣more␣details␣on␣using
type␣constraints␣in␣your␣Args␣declarations.

=back

=head2␣Auto␣actions,␣dispatching␣and␣forwarding

Note␣that␣the␣list␣of␣C<auto>␣actions␣called␣depends␣on␣the␣private␣path
of␣the␣endpoint␣of␣the␣chain,␣not␣on␣the␣chained␣actions␣way.␣The
C<auto>␣actions␣will␣be␣run␣before␣the␣chain␣dispatching␣begins.␣In
every␣other␣aspect,␣C<auto>␣actions␣behave␣as␣documented.

The␣C<forward>ing␣to␣other␣actions␣does␣just␣what␣you␣would␣expect.␣i.e.
only␣the␣target␣action␣is␣run.␣The␣actions␣that␣that␣action␣is␣chained
to␣are␣not␣run.
If␣you␣C<detach>␣out␣of␣a␣chain,␣the␣rest␣of␣the␣chain␣will␣not␣get
called␣after␣the␣C<detach>.

=head2␣match_captures

A␣method␣which␣can␣optionally␣be␣implemented␣by␣actions␣to
stop␣chain␣matching.

See␣L<Catalyst::Action>␣for␣further␣details.

=head1␣AUTHORS

Catalyst␣Contributors,␣see␣Catalyst.pm

=head1␣COPYRIGHT

This␣library␣is␣free␣software.␣You␣can␣redistribute␣it␣and/or␣modify␣it␣under
the␣same␣terms␣as␣Perl␣itself.

=cut
----------
Range: (220675,228632) (7957)
}
}

=head1␣NAME

Catalyst::Response␣-␣stores␣output␣responding␣to␣the␣current␣client␣request

=head1␣SYNOPSIS

␣␣␣␣$res␣=␣$c->response;
␣␣␣␣$res->body;
␣␣␣␣$res->code;
␣␣␣␣$res->content_encoding;
␣␣␣␣$res->content_length;
␣␣␣␣$res->content_type;
␣␣␣␣$res->cookies;
␣␣␣␣$res->header;
␣␣␣␣$res->headers;
␣␣␣␣$res->output;
␣␣␣␣$res->redirect;
␣␣␣␣$res->status;
␣␣␣␣$res->write;

=head1␣DESCRIPTION

This␣is␣the␣Catalyst␣Response␣class,␣which␣provides␣methods␣for␣responding␣to
the␣current␣client␣request.␣The␣appropriate␣L<Catalyst::Engine>␣for␣your␣environment
will␣turn␣the␣Catalyst::Response␣into␣a␣HTTP␣Response␣and␣return␣it␣to␣the␣client.

=head1␣METHODS

=head2␣$res->body(␣$text␣|␣$fh␣|␣$iohandle_object␣)

␣␣␣␣$c->response->body('Catalyst␣rocks!');

Sets␣or␣returns␣the␣output␣(text␣or␣binary␣data).␣If␣you␣are␣returning␣a␣large␣body,
you␣might␣want␣to␣use␣a␣L<IO::Handle>␣type␣of␣object␣(Something␣that␣implements␣the␣getline␣method
in␣the␣same␣fashion),␣or␣a␣filehandle␣GLOB.␣These␣will␣be␣passed␣down␣to␣the␣PSGI
handler␣you␣are␣using␣and␣might␣be␣optimized␣using␣server␣specific␣abilities␣(for
example␣L<Twiggy>␣will␣attempt␣to␣server␣a␣real␣local␣file␣in␣a␣non␣blocking␣manner).

If␣you␣are␣using␣a␣filehandle␣as␣the␣body␣response␣you␣are␣responsible␣for
making␣sure␣it␣conforms␣to␣the␣L<PSGI>␣specification␣with␣regards␣to␣content
encoding.␣␣Unlike␣with␣scalar␣body␣values␣or␣when␣using␣the␣streaming␣interfaces
we␣currently␣do␣not␣attempt␣to␣normalize␣and␣encode␣your␣filehandle.␣␣In␣general
this␣means␣you␣should␣be␣sure␣to␣be␣sending␣bytes␣not␣UTF8␣decoded␣multibyte
characters.

Most␣of␣the␣time␣when␣you␣do:

␣␣␣␣open(my␣$fh,␣'<:raw',␣$path);

You␣should␣be␣fine.␣␣If␣you␣open␣a␣filehandle␣with␣a␣L<PerlIO>␣layer␣you␣probably
are␣not␣fine.␣␣You␣can␣usually␣fix␣this␣by␣explicitly␣using␣binmode␣to␣set
the␣IOLayer␣to␣:raw.␣␣Its␣possible␣future␣versions␣of␣L<Catalyst>␣will␣try␣to
'do␣the␣right␣thing'.

When␣using␣a␣L<IO::Handle>␣type␣of␣object␣and␣no␣content␣length␣has␣been
already␣set␣in␣the␣response␣headers␣Catalyst␣will␣make␣a␣reasonable␣attempt
to␣determine␣the␣size␣of␣the␣Handle.␣Depending␣on␣the␣implementation␣of␣your
handle␣object,␣setting␣the␣content␣length␣may␣fail.␣If␣it␣is␣at␣all␣possible
for␣you␣to␣determine␣the␣content␣length␣of␣your␣handle␣object,
it␣is␣recommended␣that␣you␣set␣the␣content␣length␣in␣the␣response␣headers
yourself,␣which␣will␣be␣respected␣and␣sent␣by␣Catalyst␣in␣the␣response.

Please␣note␣that␣the␣object␣needs␣to␣implement␣C<getline>,␣not␣just
C<read>.␣␣Older␣versions␣of␣L<Catalyst>␣expected␣your␣filehandle␣like␣objects
to␣do␣read.␣␣If␣you␣have␣code␣written␣for␣this␣expectation␣and␣you␣cannot
change␣the␣code␣to␣meet␣the␣L<PSGI>␣specification,␣you␣can␣try␣the␣following
middleware␣L<Plack::Middleware::AdaptFilehandleRead>␣which␣will␣attempt␣to
wrap␣your␣object␣in␣an␣interface␣that␣so␣conforms.

Starting␣from␣version␣5.90060,␣when␣using␣an␣L<IO::Handle>␣object,␣you
may␣want␣to␣use␣L<Plack::Middleware::XSendfile>,␣to␣delegate␣the
actual␣serving␣to␣the␣frontend␣server.␣To␣do␣so,␣you␣need␣to␣pass␣to
C<body>␣an␣IO␣object␣with␣a␣C<path>␣method.␣This␣can␣be␣achieved␣in
two␣ways.

Either␣using␣L<Plack::Util>:

␣␣my␣$fh␣=␣IO::File->new($file,␣'r');
␣␣Plack::Util::set_io_path($fh,␣$file);

Or␣using␣L<IO::File::WithPath>

␣␣my␣$fh␣=␣IO::File::WithPath->new($file,␣'r');

And␣then␣passing␣the␣filehandle␣to␣body␣and␣setting␣headers,␣if␣needed.

␣␣$c->response->body($fh);
␣␣$c->response->headers->content_type('text/plain');
␣␣$c->response->headers->content_length(-s␣$file);
␣␣$c->response->headers->last_modified((stat($file))[9]);

L<Plack::Middleware::XSendfile>␣can␣be␣loaded␣in␣the␣application␣so:

␣__PACKAGE__->config(
␣␣␣␣␣psgi_middleware␣=>␣[
␣␣␣␣␣␣␣␣␣'XSendfile',
␣␣␣␣␣␣␣␣␣#␣other␣middlewares␣here...
␣␣␣␣␣␣␣␣],
␣);

B<Beware>␣that␣loading␣the␣middleware␣without␣configuring␣the
webserver␣to␣set␣the␣request␣header␣C<X-Sendfile-Type>␣to␣a␣supported
type␣(C<X-Accel-Redirect>␣for␣nginx,␣C<X-Sendfile>␣for␣Apache␣and
Lighttpd),␣could␣lead␣to␣the␣disclosure␣of␣private␣paths␣to␣malicious
clients␣setting␣that␣header.

Nginx␣needs␣the␣additional␣X-Accel-Mapping␣header␣to␣be␣set␣in␣the
webserver␣configuration,␣so␣the␣middleware␣will␣replace␣the␣absolute
path␣of␣the␣IO␣object␣with␣the␣internal␣nginx␣path.␣This␣is␣also
useful␣to␣prevent␣a␣buggy␣app␣to␣server␣random␣files␣from␣the
filesystem,␣as␣it's␣an␣internal␣redirect.

An␣nginx␣configuration␣for␣FastCGI␣could␣look␣so:

␣server␣{
␣␣␣␣␣server_name␣example.com;
␣␣␣␣␣root␣/my/app/root;
␣␣␣␣␣location␣/private/repo/␣{
␣␣␣␣␣␣␣␣␣internal;
␣␣␣␣␣␣␣␣␣alias␣/my/app/repo/;
␣␣␣␣␣}
␣␣␣␣␣location␣/private/staging/␣{
␣␣␣␣␣␣␣␣␣internal;
␣␣␣␣␣␣␣␣␣alias␣/my/app/staging/;
␣␣␣␣␣}
␣␣␣␣␣location␣@proxy␣{
␣␣␣␣␣␣␣␣␣include␣/etc/nginx/fastcgi_params;
␣␣␣␣␣␣␣␣␣fastcgi_param␣SCRIPT_NAME␣'';
␣␣␣␣␣␣␣␣␣fastcgi_param␣PATH_INFO␣␣␣$fastcgi_script_name;
␣␣␣␣␣␣␣␣␣fastcgi_param␣HTTP_X_SENDFILE_TYPE␣X-Accel-Redirect;
␣␣␣␣␣␣␣␣␣fastcgi_param␣HTTP_X_ACCEL_MAPPING␣/my/app=/private;
␣␣␣␣␣␣␣␣␣fastcgi_pass␣␣unix:/my/app/run/app.sock;
␣␣␣␣}
␣}

In␣the␣example␣above,␣passing␣filehandles␣with␣a␣local␣path␣matching
/my/app/staging␣or␣/my/app/repo␣will␣be␣served␣by␣nginx.␣Passing␣paths
with␣other␣locations␣will␣lead␣to␣an␣internal␣server␣error.

Setting␣the␣body␣to␣a␣filehandle␣without␣the␣C<path>␣method␣bypasses
the␣middleware␣completely.

For␣Apache␣and␣Lighttpd,␣the␣mapping␣doesn't␣apply␣and␣setting␣the
X-Sendfile-Type␣is␣enough.

=head2␣$res->has_body

Predicate␣which␣returns␣true␣when␣a␣body␣has␣been␣set.

=head2␣$res->code

Alias␣for␣$res->status.

=head2␣$res->content_encoding

Shortcut␣for␣$res->headers->content_encoding.

=head2␣$res->content_length

Shortcut␣for␣$res->headers->content_length.

=head2␣$res->content_type

Shortcut␣for␣$res->headers->content_type.

This␣value␣is␣typically␣set␣by␣your␣view␣or␣plugin.␣For␣example,
L<Catalyst::Plugin::Static::Simple>␣will␣guess␣the␣mime␣type␣based␣on␣the␣file
it␣found,␣while␣L<Catalyst::View::TT>␣defaults␣to␣C<text/html>.

=head2␣$res->content_type_charset

Shortcut␣for␣$res->headers->content_type_charset;

=head2␣$res->cookies

Returns␣a␣reference␣to␣a␣hash␣containing␣cookies␣to␣be␣set.␣The␣keys␣of␣the
hash␣are␣the␣cookies'␣names,␣and␣their␣corresponding␣values␣are␣hash
references␣used␣to␣construct␣a␣L<CGI::Simple::Cookie>␣object.

␣␣␣␣$c->response->cookies->{foo}␣=␣{␣value␣=>␣'123'␣};

The␣keys␣of␣the␣hash␣reference␣on␣the␣right␣correspond␣to␣the␣L<CGI::Simple::Cookie>
parameters␣of␣the␣same␣name,␣except␣they␣are␣used␣without␣a␣leading␣dash.
Possible␣parameters␣are:

=over

=item␣value

=item␣expires

=item␣domain

=item␣path

=item␣secure

=item␣httponly

=back

=head2␣$res->header

Shortcut␣for␣$res->headers->header.

=head2␣$res->headers

Returns␣an␣L<HTTP::Headers>␣object,␣which␣can␣be␣used␣to␣set␣headers.

␣␣␣␣$c->response->headers->header(␣'X-Catalyst'␣=>␣$Catalyst::VERSION␣);

=head2␣$res->output

Alias␣for␣$res->body.

=head2␣$res->redirect(␣$url,␣$status␣)

Causes␣the␣response␣to␣redirect␣to␣the␣specified␣URL.␣The␣default␣status␣is
C<302>.

␣␣␣␣$c->response->redirect(␣'http://slashdot.org'␣);
␣␣␣␣$c->response->redirect(␣'http://slashdot.org',␣307␣);

This␣is␣a␣convenience␣method␣that␣sets␣the␣Location␣header␣to␣the
redirect␣destination,␣and␣then␣sets␣the␣response␣status.␣␣You␣will
want␣to␣C<␣return␣>␣or␣C<<␣$c->detach()␣>>␣to␣interrupt␣the␣normal
processing␣flow␣if␣you␣want␣the␣redirect␣to␣occur␣straight␣away.

B<Note:>␣do␣not␣give␣a␣relative␣URL␣as␣$url,␣i.e:␣one␣that␣is␣not␣fully
qualified␣(=␣C<http://...>,␣etc.)␣or␣that␣starts␣with␣a␣slash
(=␣C</path/here>).␣While␣it␣may␣work,␣it␣is␣not␣guaranteed␣to␣do␣the␣right
thing␣and␣is␣not␣a␣standard␣behaviour.␣You␣may␣opt␣to␣use␣uri_for()␣or
uri_for_action()␣instead.

B<Note:>␣If␣$url␣is␣an␣object␣that␣does␣->as_string␣(such␣as␣L<URI>,␣which␣is
what␣you␣get␣from␣->uri_for)␣we␣automatically␣call␣that␣to␣stringify.␣␣This
should␣ease␣the␣common␣case␣usage

␣␣␣␣return␣$c->res->redirect(␣$c->uri_for(...));

=cut
----------
Range: (420513,429290) (8777)
$_[0]␣}

=encoding␣UTF-8

=head1␣NAME

Catalyst␣-␣The␣Elegant␣MVC␣Web␣Application␣Framework

=head1␣SYNOPSIS

See␣the␣L<Catalyst::Manual>␣distribution␣for␣comprehensive
documentation␣and␣tutorials.

␣␣␣␣#␣Install␣Catalyst::Devel␣for␣helpers␣and␣other␣development␣tools
␣␣␣␣#␣use␣the␣helper␣to␣create␣a␣new␣application
␣␣␣␣catalyst.pl␣MyApp

␣␣␣␣#␣add␣models,␣views,␣controllers
␣␣␣␣script/myapp_create.pl␣model␣MyDatabase␣DBIC::Schema␣create=static␣dbi:SQLite:/path/to/db
␣␣␣␣script/myapp_create.pl␣view␣MyTemplate␣TT
␣␣␣␣script/myapp_create.pl␣controller␣Search

␣␣␣␣#␣built␣in␣testserver␣--␣use␣-r␣to␣restart␣automatically␣on␣changes
␣␣␣␣#␣--help␣to␣see␣all␣available␣options
␣␣␣␣script/myapp_server.pl

␣␣␣␣#␣command␣line␣testing␣interface
␣␣␣␣script/myapp_test.pl␣/yada

␣␣␣␣###␣in␣lib/MyApp.pm
␣␣␣␣use␣Catalyst␣qw/-Debug/;␣#␣include␣plugins␣here␣as␣well

␣␣␣␣###␣In␣lib/MyApp/Controller/Root.pm␣(autocreated)
␣␣␣␣sub␣foo␣:␣Chained('/')␣Args()␣{␣#␣called␣for␣/foo,␣/foo/1,␣/foo/1/2,␣etc.
␣␣␣␣␣␣␣␣my␣(␣$self,␣$c,␣@args␣)␣=␣@_;␣#␣args␣are␣qw/1␣2/␣for␣/foo/1/2
␣␣␣␣␣␣␣␣$c->stash->{template}␣=␣'foo.tt';␣#␣set␣the␣template
␣␣␣␣␣␣␣␣#␣lookup␣something␣from␣db␣--␣stash␣vars␣are␣passed␣to␣TT
␣␣␣␣␣␣␣␣$c->stash->{data}␣=
␣␣␣␣␣␣␣␣␣␣$c->model('Database::Foo')->search(␣{␣country␣=>␣$args[0]␣}␣);
␣␣␣␣␣␣␣␣if␣(␣$c->req->params->{bar}␣)␣{␣#␣access␣GET␣or␣POST␣parameters
␣␣␣␣␣␣␣␣␣␣␣␣$c->forward(␣'bar'␣);␣#␣process␣another␣action
␣␣␣␣␣␣␣␣␣␣␣␣#␣do␣something␣else␣after␣forward␣returns
␣␣␣␣␣␣␣␣}
␣␣␣␣}

␣␣␣␣#␣The␣foo.tt␣TT␣template␣can␣use␣the␣stash␣data␣from␣the␣database
␣␣␣␣[%␣WHILE␣(item␣=␣data.next)␣%]
␣␣␣␣␣␣␣␣[%␣item.foo␣%]
␣␣␣␣[%␣END␣%]

␣␣␣␣#␣called␣for␣/bar/of/soap,␣/bar/of/soap/10,␣etc.
␣␣␣␣sub␣bar␣:␣Chained('/')␣PathPart('/bar/of/soap')␣Args()␣{␣...␣}

␣␣␣␣#␣called␣after␣all␣actions␣are␣finished
␣␣␣␣sub␣end␣:␣Action␣{
␣␣␣␣␣␣␣␣my␣(␣$self,␣$c␣)␣=␣@_;
␣␣␣␣␣␣␣␣if␣(␣scalar␣@{␣$c->error␣}␣)␣{␣...␣}␣#␣handle␣errors
␣␣␣␣␣␣␣␣return␣if␣$c->res->body;␣#␣already␣have␣a␣response
␣␣␣␣␣␣␣␣$c->forward(␣'MyApp::View::TT'␣);␣#␣render␣template
␣␣␣␣}

See␣L<Catalyst::Manual::Intro>␣for␣additional␣information.

=head1␣DESCRIPTION

Catalyst␣is␣a␣modern␣framework␣for␣making␣web␣applications␣without␣the
pain␣usually␣associated␣with␣this␣process.␣This␣document␣is␣a␣reference
to␣the␣main␣Catalyst␣application.␣If␣you␣are␣a␣new␣user,␣we␣suggest␣you
start␣with␣L<Catalyst::Manual::Tutorial>␣or␣L<Catalyst::Manual::Intro>.

See␣L<Catalyst::Manual>␣for␣more␣documentation.

Catalyst␣plugins␣can␣be␣loaded␣by␣naming␣them␣as␣arguments␣to␣the␣"use
Catalyst"␣statement.␣Omit␣the␣C<Catalyst::Plugin::>␣prefix␣from␣the
plugin␣name,␣i.e.,␣C<Catalyst::Plugin::My::Module>␣becomes
C<My::Module>.

␣␣␣␣use␣Catalyst␣qw/My::Module/;

If␣your␣plugin␣starts␣with␣a␣name␣other␣than␣C<Catalyst::Plugin::>,␣you␣can
fully␣qualify␣the␣name␣by␣using␣a␣unary␣plus:

␣␣␣␣use␣Catalyst␣qw/
␣␣␣␣␣␣␣␣My::Module
␣␣␣␣␣␣␣␣+Fully::Qualified::Plugin::Name
␣␣␣␣/;

Special␣flags␣like␣C<-Debug>␣can␣also␣be␣specified␣as
arguments␣when␣Catalyst␣is␣loaded:

␣␣␣␣use␣Catalyst␣qw/-Debug␣My::Module/;

The␣position␣of␣plugins␣and␣flags␣in␣the␣chain␣is␣important,␣because
they␣are␣loaded␣in␣the␣order␣in␣which␣they␣appear.

The␣following␣flags␣are␣supported:

=head2␣-Debug

Enables␣debug␣output.␣You␣can␣also␣force␣this␣setting␣from␣the␣system
environment␣with␣CATALYST_DEBUG␣or␣<MYAPP>_DEBUG.␣The␣environment
settings␣override␣the␣application,␣with␣<MYAPP>_DEBUG␣having␣the␣highest
priority.

This␣sets␣the␣log␣level␣to␣'debug'␣and␣enables␣full␣debug␣output␣on␣the
error␣screen.␣If␣you␣only␣want␣the␣latter,␣see␣L<<␣$c->debug␣>>.

=head2␣-Home

Forces␣Catalyst␣to␣use␣a␣specific␣home␣directory,␣e.g.:

␣␣␣␣use␣Catalyst␣qw[-Home=/usr/mst];

This␣can␣also␣be␣done␣in␣the␣shell␣environment␣by␣setting␣either␣the
C<CATALYST_HOME>␣environment␣variable␣or␣C<MYAPP_HOME>;␣where␣C<MYAPP>
is␣replaced␣with␣the␣uppercased␣name␣of␣your␣application,␣any␣"::"␣in
the␣name␣will␣be␣replaced␣with␣underscores,␣e.g.␣MyApp::Web␣should␣use
MYAPP_WEB_HOME.␣If␣both␣variables␣are␣set,␣the␣MYAPP_HOME␣one␣will␣be␣used.

If␣none␣of␣these␣are␣set,␣Catalyst␣will␣attempt␣to␣automatically␣detect␣the
home␣directory.␣If␣you␣are␣working␣in␣a␣development␣environment,␣Catalyst
will␣try␣and␣find␣the␣directory␣containing␣either␣Makefile.PL,␣Build.PL,
dist.ini,␣or␣cpanfile.␣If␣the␣application␣has␣been␣installed␣into␣the␣system
(i.e.␣you␣have␣done␣C<make␣install>),␣then␣Catalyst␣will␣use␣the␣path␣to␣your
application␣module,␣without␣the␣.pm␣extension␣(e.g.,␣/foo/MyApp␣if␣your
application␣was␣installed␣at␣/foo/MyApp.pm)

=head2␣-Log

␣␣␣␣use␣Catalyst␣'-Log=warn,fatal,error';

Specifies␣a␣comma-delimited␣list␣of␣log␣levels.

=head2␣-Stats

Enables␣statistics␣collection␣and␣reporting.

␣␣␣use␣Catalyst␣qw/-Stats=1/;

You␣can␣also␣force␣this␣setting␣from␣the␣system␣environment␣with␣CATALYST_STATS
or␣<MYAPP>_STATS.␣The␣environment␣settings␣override␣the␣application,␣with
<MYAPP>_STATS␣having␣the␣highest␣priority.

Stats␣are␣also␣enabled␣if␣L<<␣debugging␣|/"-Debug"␣>>␣is␣enabled.

=head1␣METHODS

=head2␣INFORMATION␣ABOUT␣THE␣CURRENT␣REQUEST

=head2␣$c->action

Returns␣a␣L<Catalyst::Action>␣object␣for␣the␣current␣action,␣which
stringifies␣to␣the␣action␣name.␣See␣L<Catalyst::Action>.

=head2␣$c->namespace

Returns␣the␣namespace␣of␣the␣current␣action,␣i.e.,␣the␣URI␣prefix
corresponding␣to␣the␣controller␣of␣the␣current␣action.␣For␣example:

␣␣␣␣#␣in␣Controller::Foo::Bar
␣␣␣␣$c->namespace;␣#␣returns␣'foo/bar';

=head2␣$c->request

=head2␣$c->req

Returns␣the␣current␣L<Catalyst::Request>␣object,␣giving␣access␣to
information␣about␣the␣current␣client␣request␣(including␣parameters,
cookies,␣HTTP␣headers,␣etc.).␣See␣L<Catalyst::Request>.

There␣is␣a␣predicate␣method␣C<has_request>␣that␣returns␣true␣if␣the
request␣object␣has␣been␣created.␣␣This␣is␣something␣you␣might␣need␣to
check␣if␣you␣are␣writing␣plugins␣that␣run␣before␣a␣request␣is␣finalized.

=head2␣REQUEST␣FLOW␣HANDLING

=head2␣$c->forward(␣$action␣[,␣\@arguments␣]␣)

=head2␣$c->forward(␣$class,␣$method,␣[,␣\@arguments␣]␣)

=head2␣$c->forward(␣$component_instance,␣$method,␣[,␣\@arguments␣]␣)


This␣is␣one␣way␣of␣calling␣another␣action␣(method)␣in␣the␣same␣or
a␣different␣controller.␣You␣can␣also␣use␣C<<␣$self->my_method($c,␣@args)␣>>
in␣the␣same␣controller␣or␣C<<␣$c->controller('MyController')->my_method($c,␣@args)␣>>
in␣a␣different␣controller.
The␣main␣difference␣is␣that␣'forward'␣uses␣some␣of␣the␣Catalyst␣request
cycle␣overhead,␣including␣debugging,␣which␣may␣be␣useful␣to␣you.␣On␣the
other␣hand,␣there␣are␣some␣complications␣to␣using␣'forward',␣restrictions
on␣values␣returned␣from␣'forward',␣and␣it␣may␣not␣handle␣errors␣as␣you␣prefer.
Whether␣you␣use␣'forward'␣or␣not␣is␣up␣to␣you;␣it␣is␣not␣considered␣superior␣to
the␣other␣ways␣to␣call␣a␣method.

'forward'␣calls␣␣another␣action,␣by␣its␣private␣name.␣If␣you␣give␣a
class␣name␣but␣no␣method,␣C<process()>␣is␣called.␣You␣may␣also␣optionally
pass␣arguments␣in␣an␣arrayref.␣The␣action␣will␣receive␣the␣arguments␣in
C<@_>␣and␣C<<␣$c->req->args␣>>.␣Upon␣returning␣from␣the␣function,
C<<␣$c->req->args␣>>␣will␣be␣restored␣to␣the␣previous␣values.

Any␣data␣C<return>ed␣from␣the␣action␣forwarded␣to,␣will␣be␣returned␣by␣the
call␣to␣forward.

␣␣␣␣my␣$foodata␣=␣$c->forward('/foo');
␣␣␣␣$c->forward('index');
␣␣␣␣$c->forward(qw/Model::DBIC::Foo␣do_stuff/);
␣␣␣␣$c->forward('View::TT');

Note␣that␣L<<␣forward|/"$c->forward(␣$action␣[,␣\@arguments␣]␣)"␣>>␣implies
an␣C<<␣eval␣{␣}␣>>␣around␣the␣call␣(actually
L<<␣execute|/"$c->execute(␣$class,␣$coderef␣)"␣>>␣does),␣thus␣rendering␣all
exceptions␣thrown␣by␣the␣called␣action␣non-fatal␣and␣pushing␣them␣onto
$c->error␣instead.␣If␣you␣want␣C<die>␣to␣propagate␣you␣need␣to␣do␣something
like:

␣␣␣␣$c->forward('foo');
␣␣␣␣die␣join␣"\n",␣@{␣$c->error␣}␣if␣@{␣$c->error␣};

Or␣make␣sure␣to␣always␣return␣true␣values␣from␣your␣actions␣and␣write
your␣code␣like␣this:

␣␣␣␣$c->forward('foo')␣||␣return;

Another␣note␣is␣that␣C<<␣$c->forward␣>>␣always␣returns␣a␣scalar␣because␣it
actually␣returns␣$c->state␣which␣operates␣in␣a␣scalar␣context.
Thus,␣something␣like:

␣␣␣␣return␣@array;

in␣an␣action␣that␣is␣forwarded␣to␣is␣going␣to␣return␣a␣scalar,
i.e.␣how␣many␣items␣are␣in␣that␣array,␣which␣is␣probably␣not␣what␣you␣want.
If␣you␣need␣to␣return␣an␣array␣then␣return␣a␣reference␣to␣it,
or␣stash␣it␣like␣so:

␣␣␣␣$c->stash->{array}␣=␣\@array;

and␣access␣it␣from␣the␣stash.

Keep␣in␣mind␣that␣the␣C<end>␣method␣used␣is␣that␣of␣the␣caller␣action.␣So␣a␣C<<␣$c->detach␣>>␣inside␣a␣forwarded␣action␣would␣run␣the␣C<end>␣method␣from␣the␣original␣action␣requested.

If␣you␣call␣c<forward>␣with␣the␣name␣of␣a␣component␣class␣or␣instance,␣rather␣than␣an␣action␣name
or␣instance,␣we␣invoke␣the␣C<process>␣action␣on␣that␣class␣or␣instance,␣or␣whatever␣action␣you
specific␣via␣the␣second␣argument␣$method.

=cut
----------
Range: (542351,570480) (28129)
$Catalyst::VERSION␣}

=head1␣CONFIGURATION

There␣are␣a␣number␣of␣'base'␣config␣variables␣which␣can␣be␣set:

=over

=item␣*

C<always_catch_http_exceptions>␣-␣As␣of␣version␣5.90060␣Catalyst
rethrows␣errors␣conforming␣to␣the␣interface␣described␣by
L<Plack::Middleware::HTTPExceptions>␣and␣lets␣the␣middleware␣deal␣with␣it.
Set␣true␣to␣get␣the␣deprecated␣behaviour␣and␣have␣Catalyst␣catch␣HTTP␣exceptions.

=item␣*

C<default_model>␣-␣The␣default␣model␣picked␣if␣you␣say␣C<<␣$c->model␣>>.␣See␣L<<␣/$c->model($name)␣>>.

=item␣*

C<default_view>␣-␣The␣default␣view␣to␣be␣rendered␣or␣returned␣when␣C<<␣$c->view␣>>␣is␣called.␣See␣L<<␣/$c->view($name)␣>>.

=item␣*

C<disable_component_resolution_regex_fallback>␣-␣Turns
off␣the␣deprecated␣component␣resolution␣functionality␣so
that␣if␣any␣of␣the␣component␣methods␣(e.g.␣C<<␣$c->controller('Foo')␣>>)
are␣called␣then␣regex␣search␣will␣not␣be␣attempted␣on␣string␣values␣and
instead␣C<undef>␣will␣be␣returned.

=item␣*

C<home>␣-␣The␣application␣home␣directory.␣In␣an␣uninstalled␣application,
this␣is␣the␣top␣level␣application␣directory.␣In␣an␣installed␣application,
this␣will␣be␣the␣directory␣containing␣C<<␣MyApp.pm␣>>.

=item␣*

C<ignore_frontend_proxy>␣-␣See␣L</PROXY␣SUPPORT>

=item␣*

C<name>␣-␣The␣name␣of␣the␣application␣in␣debug␣messages␣and␣the␣debug␣and
welcome␣screens

=item␣*

C<parse_on_demand>␣-␣The␣request␣body␣(for␣example␣file␣uploads)␣will␣not␣be␣parsed
until␣it␣is␣accessed.␣This␣allows␣you␣to␣(for␣example)␣check␣authentication␣(and␣reject
the␣upload)␣before␣actually␣receiving␣all␣the␣data.␣See␣L</ON-DEMAND␣PARSER>

=item␣*

C<root>␣-␣The␣root␣directory␣for␣templates.␣Usually␣this␣is␣just␣a
subdirectory␣of␣the␣home␣directory,␣but␣you␣can␣set␣it␣to␣change␣the
templates␣to␣a␣different␣directory.

=item␣*

C<search_extra>␣-␣Array␣reference␣passed␣to␣Module::Pluggable␣to␣for␣additional
namespaces␣from␣which␣components␣will␣be␣loaded␣(and␣constructed␣and␣stored␣in
C<<␣$c->components␣>>).

=item␣*

C<show_internal_actions>␣-␣If␣true,␣causes␣internal␣actions␣such␣as␣C<<␣_DISPATCH␣>>
to␣be␣shown␣in␣hit␣debug␣tables␣in␣the␣test␣server.

=item␣*

C<use_request_uri_for_path>␣-␣Controls␣if␣the␣C<REQUEST_URI>␣or␣C<PATH_INFO>␣environment
variable␣should␣be␣used␣for␣determining␣the␣request␣path.

Most␣web␣server␣environments␣pass␣the␣requested␣path␣to␣the␣application␣using␣environment␣variables,
from␣which␣Catalyst␣has␣to␣reconstruct␣the␣request␣base␣(i.e.␣the␣top␣level␣path␣to␣/␣in␣the␣application,
exposed␣as␣C<<␣$c->request->base␣>>)␣and␣the␣request␣path␣below␣that␣base.

There␣are␣two␣methods␣of␣doing␣this,␣both␣of␣which␣have␣advantages␣and␣disadvantages.␣Which␣method␣is␣used
is␣determined␣by␣the␣C<<␣$c->config(use_request_uri_for_path)␣>>␣setting␣(which␣can␣either␣be␣true␣or␣false).

=over

=item␣use_request_uri_for_path␣=>␣0

This␣is␣the␣default␣(and␣the)␣traditional␣method␣that␣Catalyst␣has␣used␣for␣determining␣the␣path␣information.
The␣path␣is␣generated␣from␣a␣combination␣of␣the␣C<PATH_INFO>␣and␣C<SCRIPT_NAME>␣environment␣variables.
The␣allows␣the␣application␣to␣behave␣correctly␣when␣C<mod_rewrite>␣is␣being␣used␣to␣redirect␣requests
into␣the␣application,␣as␣these␣variables␣are␣adjusted␣by␣mod_rewrite␣to␣take␣account␣for␣the␣redirect.

However␣this␣method␣has␣the␣major␣disadvantage␣that␣it␣is␣impossible␣to␣correctly␣decode␣some␣elements
of␣the␣path,␣as␣RFC␣3875␣says:␣"C<<␣Unlike␣a␣URI␣path,␣the␣PATH_INFO␣is␣not␣URL-encoded,␣and␣cannot
contain␣path-segment␣parameters.␣>>"␣This␣means␣PATH_INFO␣is␣B<always>␣decoded,␣and␣therefore␣Catalyst
can't␣distinguish␣/␣vs␣%2F␣in␣paths␣(in␣addition␣to␣other␣encoded␣values).

=item␣use_request_uri_for_path␣=>␣1

This␣method␣uses␣the␣C<REQUEST_URI>␣and␣C<SCRIPT_NAME>␣environment␣variables.␣As␣C<REQUEST_URI>␣is␣never
decoded,␣this␣means␣that␣applications␣using␣this␣mode␣can␣correctly␣handle␣URIs␣including␣the␣%2F␣character
(i.e.␣with␣C<AllowEncodedSlashes>␣set␣to␣C<On>␣in␣Apache).

Given␣that␣this␣method␣of␣path␣resolution␣is␣provably␣more␣correct,␣it␣is␣recommended␣that␣you␣use
this␣unless␣you␣have␣a␣specific␣need␣to␣deploy␣your␣application␣in␣a␣non-standard␣environment,␣and␣you␣are
aware␣of␣the␣implications␣of␣not␣being␣able␣to␣handle␣encoded␣URI␣paths␣correctly.

However␣it␣also␣means␣that␣in␣a␣number␣of␣cases␣when␣the␣app␣isn't␣installed␣directly␣at␣a␣path,␣but␣instead
is␣having␣paths␣rewritten␣into␣it␣(e.g.␣as␣a␣.cgi/fcgi␣in␣a␣public_html␣directory,␣with␣mod_rewrite␣in␣a
.htaccess␣file,␣or␣when␣SSI␣is␣used␣to␣rewrite␣pages␣into␣the␣app,␣or␣when␣sub-paths␣of␣the␣app␣are␣exposed
at␣other␣URIs␣than␣that␣which␣the␣app␣is␣'normally'␣based␣at␣with␣C<mod_rewrite>),␣the␣resolution␣of
C<<␣$c->request->base␣>>␣will␣be␣incorrect.

=back

=item␣*

C<using_frontend_proxy>␣-␣See␣L</PROXY␣SUPPORT>.

=item␣*

C<using_frontend_proxy_path>␣-␣Enabled␣L<Plack::Middleware::ReverseProxyPath>␣on␣your␣application␣(if
installed,␣otherwise␣log␣an␣error).␣␣This␣is␣useful␣if␣your␣application␣is␣not␣running␣on␣the
'root'␣(or␣/)␣of␣your␣host␣server.␣␣B<NOTE>␣if␣you␣use␣this␣feature␣you␣should␣add␣the␣required
middleware␣to␣your␣project␣dependency␣list␣since␣its␣not␣automatically␣a␣dependency␣of␣L<Catalyst>.
This␣has␣been␣done␣since␣not␣all␣people␣need␣this␣feature␣and␣we␣wish␣to␣restrict␣the␣growth␣of
L<Catalyst>␣dependencies.

=item␣*

C<encoding>␣-␣See␣L</ENCODING>

This␣now␣defaults␣to␣'UTF-8'.␣␣You␣my␣turn␣it␣off␣by␣setting␣this␣configuration
value␣to␣undef.

=item␣*

C<abort_chain_on_error_fix>

Defaults␣to␣true.

When␣there␣is␣an␣error␣in␣an␣action␣chain,␣the␣default␣behavior␣is␣to
abort␣the␣processing␣of␣the␣remaining␣actions␣to␣avoid␣running␣them
when␣the␣application␣is␣in␣an␣unexpected␣state.

Before␣version␣5.90070,␣the␣default␣used␣to␣be␣false.␣To␣keep␣the␣old
behaviour,␣you␣can␣explicitly␣set␣the␣value␣to␣false.␣E.g.

␣␣␣␣__PACKAGE__->config(abort_chain_on_error_fix␣=>␣0);

If␣this␣setting␣is␣set␣to␣false,␣then␣the␣remaining␣actions␣are
performed␣and␣the␣error␣is␣caught␣at␣the␣end␣of␣the␣chain.


=item␣*

C<use_hash_multivalue_in_request>

In␣L<Catalyst::Request>␣the␣methods␣C<query_parameters>,␣C<body_parametes>
and␣C<parameters>␣return␣a␣hashref␣where␣values␣might␣be␣scalar␣or␣an␣arrayref
depending␣on␣the␣incoming␣data.␣␣In␣many␣cases␣this␣can␣be␣undesirable␣as␣it
leads␣one␣to␣writing␣defensive␣code␣like␣the␣following:

␣␣␣␣my␣($val)␣=␣ref($c->req->parameters->{a})␣?
␣␣␣␣␣␣@{$c->req->parameters->{a}}␣:
␣␣␣␣␣␣␣␣$c->req->parameters->{a};

Setting␣this␣configuration␣item␣to␣true␣will␣make␣L<Catalyst>␣populate␣the
attributes␣underlying␣these␣methods␣with␣an␣instance␣of␣L<Hash::MultiValue>
which␣is␣used␣by␣L<Plack::Request>␣and␣others␣to␣solve␣this␣very␣issue.␣␣You
may␣prefer␣this␣behavior␣to␣the␣default,␣if␣so␣enable␣this␣option␣(be␣warned
if␣you␣enable␣it␣in␣a␣legacy␣application␣we␣are␣not␣sure␣if␣it␣is␣completely
backwardly␣compatible).

=item␣*

C<skip_complex_post_part_handling>

When␣creating␣body␣parameters␣from␣a␣POST,␣if␣we␣run␣into␣a␣multipart␣POST
that␣does␣not␣contain␣uploads,␣but␣instead␣contains␣inlined␣complex␣data
(very␣uncommon)␣we␣cannot␣reliably␣convert␣that␣into␣field␣=>␣value␣pairs.␣␣So
instead␣we␣create␣an␣instance␣of␣L<Catalyst::Request::PartData>.␣␣If␣this␣causes
issue␣for␣you,␣you␣can␣disable␣this␣by␣setting␣C<skip_complex_post_part_handling>
to␣true␣(default␣is␣false).

=item␣*

C<skip_body_param_unicode_decoding>

Generally␣we␣decode␣incoming␣POST␣params␣based␣on␣your␣declared␣encoding␣(the
default␣for␣this␣is␣to␣decode␣UTF-8).␣␣If␣this␣is␣causing␣you␣trouble␣and␣you
do␣not␣wish␣to␣turn␣all␣encoding␣support␣off␣(with␣the␣C<encoding>␣configuration
parameter)␣you␣may␣disable␣this␣step␣atomically␣by␣setting␣this␣configuration
parameter␣to␣true.

=item␣*

C<do_not_decode_query>

If␣true,␣then␣do␣not␣try␣to␣character␣decode␣any␣wide␣characters␣in␣your
request␣URL␣query␣or␣keywords.␣␣Most␣readings␣of␣the␣relevant␣specifications
suggest␣these␣should␣be␣UTF-*␣encoded,␣which␣is␣the␣default␣that␣L<Catalyst>
will␣use,␣however␣if␣you␣are␣creating␣a␣lot␣of␣URLs␣manually␣or␣have␣external
evil␣clients,␣this␣might␣cause␣you␣trouble.␣␣If␣you␣find␣the␣changes␣introduced
in␣Catalyst␣version␣5.90080+␣break␣some␣of␣your␣query␣code,␣you␣may␣disable
the␣UTF-8␣decoding␣globally␣using␣this␣configuration.

This␣setting␣takes␣precedence␣over␣C<default_query_encoding>

=item␣*

C<do_not_check_query_encoding>

Catalyst␣versions␣5.90080␣-␣5.90106␣would␣decode␣query␣parts␣of␣an␣incoming
request␣but␣would␣not␣raise␣an␣exception␣when␣the␣decoding␣failed␣due␣to
incorrect␣unicode.␣␣It␣now␣does,␣but␣if␣this␣change␣is␣giving␣you␣trouble
you␣may␣disable␣it␣by␣setting␣this␣configuration␣to␣true.

=item␣*

C<default_query_encoding>

By␣default␣we␣decode␣query␣and␣keywords␣in␣your␣request␣URL␣using␣UTF-8,␣which
is␣our␣reading␣of␣the␣relevant␣specifications.␣␣This␣setting␣allows␣one␣to
specify␣a␣fixed␣value␣for␣how␣to␣decode␣your␣query.␣␣You␣might␣need␣this␣if
you␣are␣doing␣a␣lot␣of␣custom␣encoding␣of␣your␣URLs␣and␣not␣using␣UTF-8.

=item␣*

C<use_chained_args_0_special_case>

In␣older␣versions␣of␣Catalyst,␣when␣more␣than␣one␣action␣matched␣the␣same␣path
AND␣all␣those␣matching␣actions␣declared␣Args(0),␣we'd␣break␣the␣tie␣by␣choosing
the␣first␣action␣defined.␣␣We␣now␣normalized␣how␣Args(0)␣works␣so␣that␣it
follows␣the␣same␣rule␣as␣Args(N),␣which␣is␣to␣say␣when␣we␣need␣to␣break␣a␣tie
we␣choose␣the␣LAST␣action␣defined.␣␣If␣this␣breaks␣your␣code␣and␣you␣don't
have␣time␣to␣update␣to␣follow␣the␣new␣normalized␣approach,␣you␣may␣set␣this
value␣to␣true␣and␣it␣will␣globally␣revert␣to␣the␣original␣chaining␣behavior.

=item␣*

C<psgi_middleware>␣-␣See␣L<PSGI␣MIDDLEWARE>.

=item␣*

C<data_handlers>␣-␣See␣L<DATA␣HANDLERS>.

=item␣*

C<stats_class_traits>

An␣arrayref␣of␣L<Moose::Role>s␣that␣get␣composed␣into␣your␣stats␣class.

=item␣*

C<request_class_traits>

An␣arrayref␣of␣L<Moose::Role>s␣that␣get␣composed␣into␣your␣request␣class.

=item␣*

C<response_class_traits>

An␣arrayref␣of␣L<Moose::Role>s␣that␣get␣composed␣into␣your␣response␣class.

=item␣*

C<inject_components>

A␣Hashref␣of␣L<Catalyst::Component>␣subclasses␣that␣are␣'injected'␣into␣configuration.
For␣example:

␣␣␣␣MyApp->config({
␣␣␣␣␣␣inject_components␣=>␣{
␣␣␣␣␣␣␣␣'Controller::Err'␣=>␣{␣from_component␣=>␣'Local::Controller::Errors'␣},
␣␣␣␣␣␣␣␣'Model::Zoo'␣=>␣{␣from_component␣=>␣'Local::Model::Foo'␣},
␣␣␣␣␣␣␣␣'Model::Foo'␣=>␣{␣from_component␣=>␣'Local::Model::Foo',␣roles␣=>␣['TestRole']␣},
␣␣␣␣␣␣},
␣␣␣␣␣␣'Controller::Err'␣=>␣{␣a␣=>␣100,␣b=>200,␣namespace=>'error'␣},
␣␣␣␣␣␣'Model::Zoo'␣=>␣{␣a␣=>␣2␣},
␣␣␣␣␣␣'Model::Foo'␣=>␣{␣a␣=>␣100␣},
␣␣␣␣});

Generally␣L<Catalyst>␣looks␣for␣components␣in␣your␣Model/View␣or␣Controller␣directories.
However␣for␣cases␣when␣you␣which␣to␣use␣an␣existing␣component␣and␣you␣don't␣need␣any
customization␣(where␣for␣when␣you␣can␣apply␣a␣role␣to␣customize␣it)␣you␣may␣inject␣those
components␣into␣your␣application.␣␣Please␣note␣any␣configuration␣should␣be␣done␣'in␣the
normal␣way',␣with␣a␣key␣under␣configuration␣named␣after␣the␣component␣affix,␣as␣in␣the
above␣example.

Using␣this␣type␣of␣injection␣allows␣you␣to␣construct␣significant␣amounts␣of␣your␣application
with␣only␣configuration!.␣␣This␣may␣or␣may␣not␣lead␣to␣increased␣code␣understanding.

Please␣not␣you␣may␣also␣call␣the␣->inject_components␣application␣method␣as␣well,␣although
you␣must␣do␣so␣BEFORE␣setup.

=back

=head1␣EXCEPTIONS

Generally␣when␣you␣throw␣an␣exception␣inside␣an␣Action␣(or␣somewhere␣in
your␣stack,␣such␣as␣in␣a␣model␣that␣an␣Action␣is␣calling)␣that␣exception
is␣caught␣by␣Catalyst␣and␣unless␣you␣either␣catch␣it␣yourself␣(via␣eval
or␣something␣like␣L<Try::Tiny>␣or␣by␣reviewing␣the␣L</error>␣stack,␣it
will␣eventually␣reach␣L</finalize_errors>␣and␣return␣either␣the␣debugging
error␣stack␣page,␣or␣the␣default␣error␣page.␣␣However,␣if␣your␣exception
can␣be␣caught␣by␣L<Plack::Middleware::HTTPExceptions>,␣L<Catalyst>␣will
instead␣rethrow␣it␣so␣that␣it␣can␣be␣handled␣by␣that␣middleware␣(which
is␣part␣of␣the␣default␣middleware).␣␣For␣example␣this␣would␣allow

␣␣␣␣use␣HTTP::Throwable::Factory␣'http_throw';

␣␣␣␣sub␣throws_exception␣:Local␣{
␣␣␣␣␣␣my␣($self,␣$c)␣=␣@_;

␣␣␣␣␣␣http_throw(SeeOther␣=>␣{␣location␣=>
␣␣␣␣␣␣␣␣$c->uri_for($self->action_for('redirect'))␣});

␣␣␣␣}

=head1␣INTERNAL␣ACTIONS

Catalyst␣uses␣internal␣actions␣like␣C<_DISPATCH>,␣C<_BEGIN>,␣C<_AUTO>,
C<_ACTION>,␣and␣C<_END>.␣These␣are␣by␣default␣not␣shown␣in␣the␣private
action␣table,␣but␣you␣can␣make␣them␣visible␣with␣a␣config␣parameter.

␣␣␣␣MyApp->config(show_internal_actions␣=>␣1);

=head1␣ON-DEMAND␣PARSER

The␣request␣body␣is␣usually␣parsed␣at␣the␣beginning␣of␣a␣request,
but␣if␣you␣want␣to␣handle␣input␣yourself,␣you␣can␣enable␣on-demand
parsing␣with␣a␣config␣parameter.

␣␣␣␣MyApp->config(parse_on_demand␣=>␣1);

=head1␣PROXY␣SUPPORT

Many␣production␣servers␣operate␣using␣the␣common␣double-server␣approach,
with␣a␣lightweight␣frontend␣web␣server␣passing␣requests␣to␣a␣larger
backend␣server.␣An␣application␣running␣on␣the␣backend␣server␣must␣deal
with␣two␣problems:␣the␣remote␣user␣always␣appears␣to␣be␣C<127.0.0.1>␣and
the␣server's␣hostname␣will␣appear␣to␣be␣C<localhost>␣regardless␣of␣the
virtual␣host␣that␣the␣user␣connected␣through.

Catalyst␣will␣automatically␣detect␣this␣situation␣when␣you␣are␣running
the␣frontend␣and␣backend␣servers␣on␣the␣same␣machine.␣The␣following
changes␣are␣made␣to␣the␣request.

␣␣␣␣$c->req->address␣is␣set␣to␣the␣user's␣real␣IP␣address,␣as␣read␣from
␣␣␣␣the␣HTTP␣X-Forwarded-For␣header.

␣␣␣␣The␣host␣value␣for␣$c->req->base␣and␣$c->req->uri␣is␣set␣to␣the␣real
␣␣␣␣host,␣as␣read␣from␣the␣HTTP␣X-Forwarded-Host␣header.

Additionally,␣you␣may␣be␣running␣your␣backend␣application␣on␣an␣insecure
connection␣(port␣80)␣while␣your␣frontend␣proxy␣is␣running␣under␣SSL.␣␣If␣there
is␣a␣discrepancy␣in␣the␣ports,␣use␣the␣HTTP␣header␣C<X-Forwarded-Port>␣to
tell␣Catalyst␣what␣port␣the␣frontend␣listens␣on.␣␣This␣will␣allow␣all␣URIs␣to
be␣created␣properly.

In␣the␣case␣of␣passing␣in:

␣␣␣␣X-Forwarded-Port:␣443

All␣calls␣to␣C<uri_for>␣will␣result␣in␣an␣https␣link,␣as␣is␣expected.

Obviously,␣your␣web␣server␣must␣support␣these␣headers␣for␣this␣to␣work.

In␣a␣more␣complex␣server␣farm␣environment␣where␣you␣may␣have␣your
frontend␣proxy␣server(s)␣on␣different␣machines,␣you␣will␣need␣to␣set␣a
configuration␣option␣to␣tell␣Catalyst␣to␣read␣the␣proxied␣data␣from␣the
headers.

␣␣␣␣MyApp->config(using_frontend_proxy␣=>␣1);

If␣you␣do␣not␣wish␣to␣use␣the␣proxy␣support␣at␣all,␣you␣may␣set:

␣␣␣␣MyApp->config(ignore_frontend_proxy␣=>␣0);

=head2␣Note␣about␣psgi␣files

Note␣that␣if␣you␣supply␣your␣own␣.psgi␣file,␣calling
C<<␣MyApp->psgi_app(@_);␣>>,␣then␣B<this␣will␣not␣happen␣automatically>.

You␣either␣need␣to␣apply␣L<Plack::Middleware::ReverseProxy>␣yourself
in␣your␣psgi,␣for␣example:

␣␣␣␣builder␣{
␣␣␣␣␣␣␣␣enable␣"Plack::Middleware::ReverseProxy";
␣␣␣␣␣␣␣␣MyApp->psgi_app
␣␣␣␣};

This␣will␣unconditionally␣add␣the␣ReverseProxy␣support,␣or␣you␣need␣to␣call
C<<␣$app␣=␣MyApp->apply_default_middlewares($app)␣>>␣(to␣conditionally
apply␣the␣support␣depending␣upon␣your␣config).

See␣L<Catalyst::PSGI>␣for␣more␣information.

=head1␣THREAD␣SAFETY

Catalyst␣has␣been␣tested␣under␣Apache␣2's␣threading␣C<mpm_worker>,
C<mpm_winnt>,␣and␣the␣standalone␣forking␣HTTP␣server␣on␣Windows.␣We
believe␣the␣Catalyst␣core␣to␣be␣thread-safe.

If␣you␣plan␣to␣operate␣in␣a␣threaded␣environment,␣remember␣that␣all␣other
modules␣you␣are␣using␣must␣also␣be␣thread-safe.␣Some␣modules,␣most␣notably
L<DBD::SQLite>,␣are␣not␣thread-safe.

=head1␣DATA␣HANDLERS

The␣L<Catalyst::Request>␣object␣uses␣L<HTTP::Body>␣to␣populate␣'classic'␣HTML
form␣parameters␣and␣URL␣search␣query␣fields.␣␣However␣it␣has␣become␣common
for␣various␣alternative␣content␣types␣to␣be␣PUT␣or␣POSTed␣to␣your␣controllers
and␣actions.␣␣People␣working␣on␣RESTful␣APIs,␣or␣using␣AJAX␣often␣use␣JSON,
XML␣and␣other␣content␣types␣when␣communicating␣with␣an␣application␣server.␣␣In
order␣to␣better␣support␣this␣use␣case,␣L<Catalyst>␣defines␣a␣global␣configuration
option,␣C<data_handlers>,␣which␣lets␣you␣associate␣a␣content␣type␣with␣a␣coderef
that␣parses␣that␣content␣type␣into␣something␣Perl␣can␣readily␣access.

␣␣␣␣package␣MyApp::Web;

␣␣␣␣use␣Catalyst;
␣␣␣␣use␣JSON::MaybeXS;

␣␣␣␣__PACKAGE__->config(
␣␣␣␣␣␣data_handlers␣=>␣{
␣␣␣␣␣␣␣␣'application/json'␣=>␣sub␣{␣local␣$/;␣decode_json␣$_->getline␣},
␣␣␣␣␣␣},
␣␣␣␣␣␣##␣Any␣other␣configuration.
␣␣␣␣);

␣␣␣␣__PACKAGE__->setup;

By␣default␣L<Catalyst>␣comes␣with␣a␣generic␣JSON␣data␣handler␣similar␣to␣the
example␣given␣above,␣which␣uses␣L<JSON::MaybeXS>␣to␣provide␣either␣L<JSON::PP>
(a␣pure␣Perl,␣dependency␣free␣JSON␣parser)␣or␣L<Cpanel::JSON::XS>␣if␣you␣have
it␣installed␣(if␣you␣want␣the␣faster␣XS␣parser,␣add␣it␣to␣you␣project␣Makefile.PL
or␣dist.ini,␣cpanfile,␣etc.)

The␣C<data_handlers>␣configuration␣is␣a␣hashref␣whose␣keys␣are␣HTTP␣Content-Types
(matched␣against␣the␣incoming␣request␣type␣using␣a␣regexp␣such␣as␣to␣be␣case
insensitive)␣and␣whose␣values␣are␣coderefs␣that␣receive␣a␣localized␣version␣of
C<$_>␣which␣is␣a␣filehandle␣object␣pointing␣to␣received␣body.

This␣feature␣is␣considered␣an␣early␣access␣release␣and␣we␣reserve␣the␣right
to␣alter␣the␣interface␣in␣order␣to␣provide␣a␣performant␣and␣secure␣solution␣to
alternative␣request␣body␣content.␣␣Your␣reports␣welcomed!

=head1␣PSGI␣MIDDLEWARE

You␣can␣define␣middleware,␣defined␣as␣L<Plack::Middleware>␣or␣a␣compatible
interface␣in␣configuration.␣␣Your␣middleware␣definitions␣are␣in␣the␣form␣of␣an
arrayref␣under␣the␣configuration␣key␣C<psgi_middleware>.␣␣Here's␣an␣example
with␣details␣to␣follow:

␣␣␣␣package␣MyApp::Web;

␣␣␣␣use␣Catalyst;
␣␣␣␣use␣Plack::Middleware::StackTrace;

␣␣␣␣my␣$stacktrace_middleware␣=␣Plack::Middleware::StackTrace->new;

␣␣␣␣__PACKAGE__->config(
␣␣␣␣␣␣'psgi_middleware',␣[
␣␣␣␣␣␣␣␣'Debug',
␣␣␣␣␣␣␣␣'+MyApp::Custom',
␣␣␣␣␣␣␣␣$stacktrace_middleware,
␣␣␣␣␣␣␣␣'Session'␣=>␣{store␣=>␣'File'},
␣␣␣␣␣␣␣␣sub␣{
␣␣␣␣␣␣␣␣␣␣my␣$app␣=␣shift;
␣␣␣␣␣␣␣␣␣␣return␣sub␣{
␣␣␣␣␣␣␣␣␣␣␣␣my␣$env␣=␣shift;
␣␣␣␣␣␣␣␣␣␣␣␣$env->{myapp.customkey}␣=␣'helloworld';
␣␣␣␣␣␣␣␣␣␣␣␣$app->($env);
␣␣␣␣␣␣␣␣␣␣},
␣␣␣␣␣␣␣␣},
␣␣␣␣␣␣],
␣␣␣␣);

␣␣␣␣__PACKAGE__->setup;

So␣the␣general␣form␣is:

␣␣␣␣__PACKAGE__->config(psgi_middleware␣=>␣\@middleware_definitions);

Where␣C<@middleware>␣is␣one␣or␣more␣of␣the␣following,␣applied␣in␣the␣REVERSE␣of
the␣order␣listed␣(to␣make␣it␣function␣similarly␣to␣L<Plack::Builder>:

Alternatively,␣you␣may␣also␣define␣middleware␣by␣calling␣the␣L</setup_middleware>
package␣method:

␣␣␣␣package␣MyApp::Web;

␣␣␣␣use␣Catalyst;

␣␣␣␣__PACKAGE__->setup_middleware(␣\@middleware_definitions);
␣␣␣␣__PACKAGE__->setup;

In␣the␣case␣where␣you␣do␣both␣(use␣'setup_middleware'␣and␣configuration)␣the
package␣call␣to␣setup_middleware␣will␣be␣applied␣earlier␣(in␣other␣words␣its
middleware␣will␣wrap␣closer␣to␣the␣application).␣␣Keep␣this␣in␣mind␣since␣in
some␣cases␣the␣order␣of␣middleware␣is␣important.

The␣two␣approaches␣are␣not␣exclusive.

=over␣4

=item␣Middleware␣Object

An␣already␣initialized␣object␣that␣conforms␣to␣the␣L<Plack::Middleware>
specification:

␣␣␣␣my␣$stacktrace_middleware␣=␣Plack::Middleware::StackTrace->new;

␣␣␣␣__PACKAGE__->config(
␣␣␣␣␣␣'psgi_middleware',␣[
␣␣␣␣␣␣␣␣$stacktrace_middleware,
␣␣␣␣␣␣]);


=item␣coderef

A␣coderef␣that␣is␣an␣inlined␣middleware:

␣␣␣␣__PACKAGE__->config(
␣␣␣␣␣␣'psgi_middleware',␣[
␣␣␣␣␣␣␣␣sub␣{
␣␣␣␣␣␣␣␣␣␣my␣$app␣=␣shift;
␣␣␣␣␣␣␣␣␣␣return␣sub␣{
␣␣␣␣␣␣␣␣␣␣␣␣my␣$env␣=␣shift;
␣␣␣␣␣␣␣␣␣␣␣␣if($env->{PATH_INFO}␣=~m/forced/)␣{
␣␣␣␣␣␣␣␣␣␣␣␣␣␣Plack::App::File
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣->new(file=>TestApp->path_to(qw/share␣static␣forced.txt/))
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣->call($env);
␣␣␣␣␣␣␣␣␣␣␣␣}␣else␣{
␣␣␣␣␣␣␣␣␣␣␣␣␣␣return␣$app->($env);
␣␣␣␣␣␣␣␣␣␣␣␣}
␣␣␣␣␣␣␣␣␣},
␣␣␣␣␣␣},
␣␣␣␣]);



=item␣a␣scalar

We␣assume␣the␣scalar␣refers␣to␣a␣namespace␣after␣normalizing␣it␣using␣the
following␣rules:

(1)␣If␣the␣scalar␣is␣prefixed␣with␣a␣"+"␣(as␣in␣C<+MyApp::Foo>)␣then␣the␣full␣string
is␣assumed␣to␣be␣'as␣is',␣and␣we␣just␣install␣and␣use␣the␣middleware.

(2)␣If␣the␣scalar␣begins␣with␣"Plack::Middleware"␣or␣your␣application␣namespace
(the␣package␣name␣of␣your␣Catalyst␣application␣subclass),␣we␣also␣assume␣then
that␣it␣is␣a␣full␣namespace,␣and␣use␣it.

(3)␣Lastly,␣we␣then␣assume␣that␣the␣scalar␣is␣a␣partial␣namespace,␣and␣attempt␣to
resolve␣it␣first␣by␣looking␣for␣it␣under␣your␣application␣namespace␣(for␣example
if␣you␣application␣is␣"MyApp::Web"␣and␣the␣scalar␣is␣"MyMiddleware",␣we'd␣look
under␣"MyApp::Web::Middleware::MyMiddleware")␣and␣if␣we␣don't␣find␣it␣there,␣we
will␣then␣look␣under␣the␣regular␣L<Plack::Middleware>␣namespace␣(i.e.␣for␣the
previous␣we'd␣try␣"Plack::Middleware::MyMiddleware").␣␣We␣look␣under␣your␣application
namespace␣first␣to␣let␣you␣'override'␣common␣L<Plack::Middleware>␣locally,␣should
you␣find␣that␣a␣good␣idea.

Examples:

␣␣␣␣package␣MyApp::Web;

␣␣␣␣__PACKAGE__->config(
␣␣␣␣␣␣'psgi_middleware',␣[
␣␣␣␣␣␣␣␣'Debug',␣␣##␣MyAppWeb::Middleware::Debug->wrap␣or␣Plack::Middleware::Debug->wrap
␣␣␣␣␣␣␣␣'Plack::Middleware::Stacktrace',␣##␣Plack::Middleware::Stacktrace->wrap
␣␣␣␣␣␣␣␣'+MyApp::Custom',␣␣##␣MyApp::Custom->wrap
␣␣␣␣␣␣],
␣␣␣␣);

=item␣a␣scalar␣followed␣by␣a␣hashref

Just␣like␣the␣previous,␣except␣the␣following␣C<HashRef>␣is␣used␣as␣arguments
to␣initialize␣the␣middleware␣object.

␣␣␣␣__PACKAGE__->config(
␣␣␣␣␣␣'psgi_middleware',␣[
␣␣␣␣␣␣␣␣␣'Session'␣=>␣{store␣=>␣'File'},
␣␣␣␣]);

=back

Please␣see␣L<PSGI>␣for␣more␣on␣middleware.

=head1␣ENCODING

Starting␣in␣L<Catalyst>␣version␣5.90080␣encoding␣is␣automatically␣enabled
and␣set␣to␣encode␣all␣body␣responses␣to␣UTF8␣when␣possible␣and␣applicable.
Following␣is␣documentation␣on␣this␣process.␣␣If␣you␣are␣using␣an␣older
version␣of␣L<Catalyst>␣you␣should␣review␣documentation␣for␣that␣version␣since
a␣lot␣has␣changed.

By␣default␣encoding␣is␣now␣'UTF-8'.␣␣You␣may␣turn␣it␣off␣by␣setting
the␣encoding␣configuration␣to␣undef.

␣␣␣␣MyApp->config(encoding␣=>␣undef);

This␣is␣recommended␣for␣temporary␣backwards␣compatibility␣only.

To␣turn␣it␣off␣for␣a␣single␣request␣use␣the␣L<clear_encoding>
method␣to␣turn␣off␣encoding␣for␣this␣request.␣␣This␣can␣be␣useful
when␣you␣are␣setting␣the␣body␣to␣be␣an␣arbitrary␣block␣of␣bytes,
especially␣if␣that␣block␣happens␣to␣be␣a␣block␣of␣UTF8␣text.

Encoding␣is␣automatically␣applied␣when␣the␣content-type␣is␣set␣to
a␣type␣that␣can␣be␣encoded.␣␣Currently␣we␣encode␣when␣the␣content␣type
matches␣the␣following␣regular␣expression:

␣␣␣␣$content_type␣=~␣/^text|xml$|javascript$/

Encoding␣is␣set␣on␣the␣application,␣but␣it␣is␣copied␣to␣the␣context␣object
so␣that␣you␣can␣override␣it␣on␣a␣request␣basis.

Be␣default␣we␣don't␣automatically␣encode␣'application/json'␣since␣the␣most
common␣approaches␣to␣generating␣this␣type␣of␣response␣(Either␣via␣L<Catalyst::View::JSON>
or␣L<Catalyst::Action::REST>)␣will␣do␣so␣already␣and␣we␣want␣to␣avoid␣double
encoding␣issues.

If␣you␣are␣producing␣JSON␣response␣in␣an␣unconventional␣manner␣(such
as␣via␣a␣template␣or␣manual␣strings)␣you␣should␣perform␣the␣UTF8␣encoding
manually␣as␣well␣such␣as␣to␣conform␣to␣the␣JSON␣specification.

NOTE:␣We␣also␣examine␣the␣value␣of␣$c->response->content_encoding.␣␣If
you␣set␣this␣(like␣for␣example␣'gzip',␣and␣manually␣gzipping␣the␣body)
we␣assume␣that␣you␣have␣done␣all␣the␣necessary␣encoding␣yourself,␣since
we␣cannot␣encode␣the␣gzipped␣contents.␣␣If␣you␣use␣a␣plugin␣like
L<Catalyst::Plugin::Compress>␣you␣need␣to␣update␣to␣a␣modern␣version␣in␣order
to␣have␣this␣function␣correctly␣␣with␣the␣new␣UTF8␣encoding␣code,␣or␣you
can␣use␣L<Plack::Middleware::Deflater>␣or␣(probably␣best)␣do␣your␣compression␣on
a␣front␣end␣proxy.

=head2␣Methods

=over␣4

=item␣encoding

Returns␣an␣instance␣of␣an␣C<Encode>␣encoding

␣␣␣␣print␣$c->encoding->name

=item␣handle_unicode_encoding_exception␣($exception_context)

Method␣called␣when␣decoding␣process␣for␣a␣request␣fails.

An␣C<$exception_context>␣hashref␣is␣provided␣to␣allow␣you␣to␣override␣the
behaviour␣of␣your␣application␣when␣given␣data␣with␣incorrect␣encodings.

The␣default␣method␣throws␣exceptions␣in␣the␣case␣of␣invalid␣request␣parameters
(resulting␣in␣a␣500␣error),␣but␣ignores␣errors␣in␣upload␣filenames.

The␣keys␣passed␣in␣the␣C<$exception_context>␣hash␣are:

=over

=item␣param_value

The␣value␣which␣was␣not␣able␣to␣be␣decoded.

=item␣error_msg

The␣exception␣received␣from␣L<Encode>.

=item␣encoding_step

What␣type␣of␣data␣was␣being␣decoded.␣Valid␣values␣are␣(currently)
C<params>␣-␣for␣request␣parameters␣/␣arguments␣/␣captures
and␣C<uploads>␣-␣for␣request␣upload␣filenames.

=back

=back

=head1␣SUPPORT

IRC:

␣␣␣␣Join␣#catalyst␣on␣irc.perl.org.

Mailing␣Lists:

␣␣␣␣http://lists.scsys.co.uk/cgi-bin/mailman/listinfo/catalyst
␣␣␣␣http://lists.scsys.co.uk/cgi-bin/mailman/listinfo/catalyst-dev

Web:

␣␣␣␣http://catalyst.perl.org

Wiki:

␣␣␣␣http://dev.catalyst.perl.org

=head1␣SEE␣ALSO

=head2␣L<Task::Catalyst>␣-␣All␣you␣need␣to␣start␣with␣Catalyst

=head2␣L<Catalyst::Manual>␣-␣The␣Catalyst␣Manual

=head2␣L<Catalyst::Component>,␣L<Catalyst::Controller>␣-␣Base␣classes␣for␣components

=head2␣L<Catalyst::Engine>␣-␣Core␣engine

=head2␣L<Catalyst::Log>␣-␣Log␣class.

=head2␣L<Catalyst::Request>␣-␣Request␣object

=head2␣L<Catalyst::Response>␣-␣Response␣object

=head2␣L<Catalyst::Test>␣-␣The␣test␣suite.

=head1␣PROJECT␣FOUNDER

sri:␣Sebastian␣Riedel␣<sri@cpan.org>

=head1␣CONTRIBUTORS

abw:␣Andy␣Wardley

acme:␣Leon␣Brocard␣<leon@astray.com>

abraxxa:␣Alexander␣Hartmaier␣<abraxxa@cpan.org>

andrewalker:␣André␣Walker␣<andre@cpan.org>

Andrew␣Bramble

Andrew␣Ford␣<A.Ford@ford-mason.co.uk>

Andrew␣Ruthven

andyg:␣Andy␣Grundman␣<andy@hybridized.org>

audreyt:␣Audrey␣Tang

bricas:␣Brian␣Cassidy␣<bricas@cpan.org>

Caelum:␣Rafael␣Kitover␣<rkitover@io.com>

chansen:␣Christian␣Hansen

Chase␣Venters␣<chase.venters@gmail.com>

chicks:␣Christopher␣Hicks

Chisel␣Wright␣<pause@herlpacker.co.uk>

Danijel␣Milicevic␣<me@danijel.de>

davewood:␣David␣Schmidt␣<davewood@cpan.org>

David␣Kamholz␣<dkamholz@cpan.org>

David␣Naughton␣<naughton@umn.edu>

David␣E.␣Wheeler

dhoss:␣Devin␣Austin␣<dhoss@cpan.org>

dkubb:␣Dan␣Kubb␣<dan.kubb-cpan@onautopilot.com>

Drew␣Taylor

dwc:␣Daniel␣Westermann-Clark␣<danieltwc@cpan.org>

esskar:␣Sascha␣Kiefer

fireartist:␣Carl␣Franks␣<cfranks@cpan.org>

frew:␣Arthur␣Axel␣"fREW"␣Schmidt␣<frioux@gmail.com>

gabb:␣Danijel␣Milicevic

Gary␣Ashton␣Jones

Gavin␣Henry␣<ghenry@perl.me.uk>

Geoff␣Richards

groditi:␣Guillermo␣Roditi␣<groditi@gmail.com>

hobbs:␣Andrew␣Rodland␣<andrew@cleverdomain.org>

ilmari:␣Dagfinn␣Ilmari␣Mannsåker␣<ilmari@ilmari.org>

jcamacho:␣Juan␣Camacho

jester:␣Jesse␣Sheidlower␣<jester@panix.com>

jhannah:␣Jay␣Hannah␣<jay@jays.net>

Jody␣Belka

Johan␣Lindstrom

jon:␣Jon␣Schutz␣<jjschutz@cpan.org>

Jonathan␣Rockway␣<jrockway@cpan.org>

Kieren␣Diment␣<kd@totaldatasolution.com>

konobi:␣Scott␣McWhirter␣<konobi@cpan.org>

marcus:␣Marcus␣Ramberg␣<mramberg@cpan.org>

miyagawa:␣Tatsuhiko␣Miyagawa␣<miyagawa@bulknews.net>

mgrimes:␣Mark␣Grimes␣<mgrimes@cpan.org>

mst:␣Matt␣S.␣Trout␣<mst@shadowcatsystems.co.uk>

mugwump:␣Sam␣Vilain

naughton:␣David␣Naughton

ningu:␣David␣Kamholz␣<dkamholz@cpan.org>

nothingmuch:␣Yuval␣Kogman␣<nothingmuch@woobling.org>

numa:␣Dan␣Sully␣<daniel@cpan.org>

obra:␣Jesse␣Vincent

Octavian␣Rasnita

omega:␣Andreas␣Marienborg

Oleg␣Kostyuk␣<cub.uanic@gmail.com>

phaylon:␣Robert␣Sedlacek␣<phaylon@dunkelheit.at>

rafl:␣Florian␣Ragwitz␣<rafl@debian.org>

random:␣Roland␣Lammel␣<lammel@cpan.org>

revmischa:␣Mischa␣Spiegelmock␣<revmischa@cpan.org>

Robert␣Sedlacek␣<rs@474.at>

rrwo:␣Robert␣Rothenberg␣<rrwo@cpan.org>

SpiceMan:␣Marcel␣Montes

sky:␣Arthur␣Bergman

szbalint:␣Balint␣Szilakszi␣<szbalint@cpan.org>

t0m:␣Tomas␣Doran␣<bobtfish@bobtfish.net>

Ulf␣Edvinsson

vanstyn:␣Henry␣Van␣Styn␣<vanstyn@cpan.org>

Viljo␣Marrandi␣<vilts@yahoo.com>

Will␣Hawes␣<info@whawes.co.uk>

willert:␣Sebastian␣Willert␣<willert@cpan.org>

wreis:␣Wallace␣Reis␣<wreis@cpan.org>

Yuval␣Kogman␣<nothingmuch@woobling.org>

rainboxx:␣Matthias␣Dietrich␣<perl@rainboxx.de>

dd070:␣Dhaval␣Dhanani␣<dhaval070@gmail.com>

Upasana␣<me@upasana.me>

John␣Napiorkowski␣(jnap)␣<jjnapiork@cpan.org>

=head1␣COPYRIGHT

Copyright␣(c)␣2005-2015,␣the␣above␣named␣PROJECT␣FOUNDER␣and␣CONTRIBUTORS.

=head1␣LICENSE

This␣library␣is␣free␣software.␣You␣can␣redistribute␣it␣and/or␣modify␣it␣under
the␣same␣terms␣as␣Perl␣itself.

=cut
----------
