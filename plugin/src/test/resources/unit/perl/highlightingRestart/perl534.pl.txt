File size: 7610585
Re-highlighted ranges: 688722
Avg range size: 11.050293151663515
Min range size: 1
Max range size: 67244
10% of text has range <= 6
20% of text has range <= 9
30% of text has range <= 13
40% of text has range <= 17
50% of text has range <= 25
60% of text has range <= 30
70% of text has range <= 50
80% of text has range <= 76
90% of text has range <= 1474
----------
Range: (856,3661) (2805)
=head1␣NAME

Test␣-␣provides␣a␣simple␣framework␣for␣writing␣test␣scripts

=head1␣SYNOPSIS

␣␣use␣strict;
␣␣use␣Test;

␣␣#␣use␣a␣BEGIN␣block␣so␣we␣print␣our␣plan␣before␣MyModule␣is␣loaded
␣␣BEGIN␣{␣plan␣tests␣=>␣14,␣todo␣=>␣[3,4]␣}

␣␣#␣load␣your␣module...
␣␣use␣MyModule;

␣␣#␣Helpful␣notes.␣␣All␣note-lines␣must␣start␣with␣a␣"#".
␣␣print␣"#␣I'm␣testing␣MyModule␣version␣$MyModule::VERSION\n";

␣␣ok(0);␣#␣failure
␣␣ok(1);␣#␣success

␣␣ok(0);␣#␣ok,␣expected␣failure␣(see␣todo␣list,␣above)
␣␣ok(1);␣#␣surprise␣success!

␣␣ok(0,1);␣␣␣␣␣␣␣␣␣␣␣␣␣#␣failure:␣'0'␣ne␣'1'
␣␣ok('broke','fixed');␣#␣failure:␣'broke'␣ne␣'fixed'
␣␣ok('fixed','fixed');␣#␣success:␣'fixed'␣eq␣'fixed'
␣␣ok('fixed',qr/x/);␣␣␣#␣success:␣'fixed'␣=~␣qr/x/

␣␣ok(sub␣{␣1+1␣},␣2);␣␣#␣success:␣'2'␣eq␣'2'
␣␣ok(sub␣{␣1+1␣},␣3);␣␣#␣failure:␣'2'␣ne␣'3'

␣␣my␣@list␣=␣(0,0);
␣␣ok␣@list,␣3,␣"\@list=".join(',',@list);␣␣␣␣␣␣#extra␣notes
␣␣ok␣'segmentation␣fault',␣'/(?i)success/';␣␣␣␣#regex␣match

␣␣skip(
␣␣␣␣$^O␣=~␣m/MSWin/␣?␣"Skip␣if␣MSWin"␣:␣0,␣␣#␣whether␣to␣skip
␣␣␣␣$foo,␣$bar␣␣#␣arguments␣just␣like␣for␣ok(...)
␣␣);
␣␣skip(
␣␣␣␣$^O␣=~␣m/MSWin/␣?␣0␣:␣"Skip␣unless␣MSWin",␣␣#␣whether␣to␣skip
␣␣␣␣$foo,␣$bar␣␣#␣arguments␣just␣like␣for␣ok(...)
␣␣);

=head1␣DESCRIPTION

This␣module␣simplifies␣the␣task␣of␣writing␣test␣files␣for␣Perl␣modules,
such␣that␣their␣output␣is␣in␣the␣format␣that
L<Test::Harness|Test::Harness>␣expects␣to␣see.

=head1␣QUICK␣START␣GUIDE

To␣write␣a␣test␣for␣your␣new␣(and␣probably␣not␣even␣done)␣module,␣create
a␣new␣file␣called␣F<t/test.t>␣(in␣a␣new␣F<t>␣directory).␣If␣you␣have
multiple␣test␣files,␣to␣test␣the␣"foo",␣"bar",␣and␣"baz"␣feature␣sets,
then␣feel␣free␣to␣call␣your␣files␣F<t/foo.t>,␣F<t/bar.t>,␣and
F<t/baz.t>

=head2␣Functions

This␣module␣defines␣three␣public␣functions,␣C<plan(...)>,␣C<ok(...)>,
and␣C<skip(...)>.␣␣By␣default,␣all␣three␣are␣exported␣by
the␣C<use␣Test;>␣statement.

=over␣4

=item␣C<plan(...)>

␣␣␣␣␣BEGIN␣{␣plan␣%theplan;␣}

This␣should␣be␣the␣first␣thing␣you␣call␣in␣your␣test␣script.␣␣It
declares␣your␣testing␣plan,␣how␣many␣there␣will␣be,␣if␣any␣of␣them
should␣be␣allowed␣to␣fail,␣and␣so␣on.

Typical␣usage␣is␣just:

␣␣␣␣␣use␣Test;
␣␣␣␣␣BEGIN␣{␣plan␣tests␣=>␣23␣}

These␣are␣the␣things␣that␣you␣can␣put␣in␣the␣parameters␣to␣plan:

=over

=item␣C<tests␣=E<gt>␣I<number>>

The␣number␣of␣tests␣in␣your␣script.
This␣means␣all␣ok()␣and␣skip()␣calls.

=item␣C<todo␣=E<gt>␣[I<1,5,14>]>

A␣reference␣to␣a␣list␣of␣tests␣which␣are␣allowed␣to␣fail.
See␣L</TODO␣TESTS>.

=item␣C<onfail␣=E<gt>␣sub␣{␣...␣}>

=item␣C<onfail␣=E<gt>␣\&some_sub>

A␣subroutine␣reference␣to␣be␣run␣at␣the␣end␣of␣the␣test␣script,␣if
any␣of␣the␣tests␣fail.␣␣See␣L</ONFAIL>.

=back

You␣must␣call␣C<plan(...)>␣once␣and␣only␣once.␣␣You␣should␣call␣it
in␣a␣C<BEGIN␣{...}>␣block,␣like␣so:

␣␣␣␣␣BEGIN␣{␣plan␣tests␣=>␣23␣}

=cut
----------
Range: (7498,11601) (4103)
}


=end␣_private

=item␣C<ok(...)>

␣␣ok(1␣+␣1␣==␣2);
␣␣ok($have,␣$expect);
␣␣ok($have,␣$expect,␣$diagnostics);

This␣function␣is␣the␣reason␣for␣C<Test>'s␣existence.␣␣It's
the␣basic␣function␣that
handles␣printing␣"C<ok>"␣or␣"C<not␣ok>",␣along␣with␣the
current␣test␣number.␣␣(That's␣what␣C<Test::Harness>␣wants␣to␣see.)

In␣its␣most␣basic␣usage,␣C<ok(...)>␣simply␣takes␣a␣single␣scalar
expression.␣␣If␣its␣value␣is␣true,␣the␣test␣passes;␣if␣false,
the␣test␣fails.␣␣Examples:

␣␣␣␣#␣Examples␣of␣ok(scalar)

␣␣␣␣ok(␣1␣+␣1␣==␣2␣);␣␣␣␣␣␣␣␣␣␣␣#␣ok␣if␣1␣+␣1␣==␣2
␣␣␣␣ok(␣$foo␣=~␣/bar/␣);␣␣␣␣␣␣␣␣#␣ok␣if␣$foo␣contains␣'bar'
␣␣␣␣ok(␣baz($x␣+␣$y)␣eq␣'Armondo'␣);␣␣␣␣#␣ok␣if␣baz($x␣+␣$y)␣returns
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣'Armondo'
␣␣␣␣ok(␣@a␣==␣@b␣);␣␣␣␣␣␣␣␣␣␣␣␣␣#␣ok␣if␣@a␣and␣@b␣are␣the␣same
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣length

The␣expression␣is␣evaluated␣in␣scalar␣context.␣␣So␣the␣following␣will
work:

␣␣␣␣ok(␣@stuff␣);␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣ok␣if␣@stuff␣has␣any
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣elements
␣␣␣␣ok(␣!grep␣!defined␣$_,␣@stuff␣);␣␣␣␣#␣ok␣if␣everything␣in␣@stuff
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣is␣defined.

A␣special␣case␣is␣if␣the␣expression␣is␣a␣subroutine␣reference␣(in␣either
C<sub␣{...}>␣syntax␣or␣C<\&foo>␣syntax).␣␣In
that␣case,␣it␣is␣executed␣and␣its␣value␣(true␣or␣false)␣determines␣if
the␣test␣passes␣or␣fails.␣␣For␣example,

␣␣␣␣ok(␣sub␣{␣␣␣#␣See␣whether␣sleep␣works␣at␣least␣passably
␣␣␣␣␣␣my␣$start_time␣=␣time;
␣␣␣␣␣␣sleep␣5;
␣␣␣␣␣␣time()␣-␣$start_time␣␣>=␣4
␣␣␣␣});

In␣its␣two-argument␣form,␣C<ok(I<arg1>,␣I<arg2>)>␣compares␣the␣two
scalar␣values␣to␣see␣if␣they␣match.␣␣They␣match␣if␣both␣are␣undefined,
or␣if␣I<arg2>␣is␣a␣regex␣that␣matches␣I<arg1>,␣or␣if␣they␣compare␣equal
with␣C<eq>.

␣␣␣␣#␣Example␣of␣ok(scalar,␣scalar)

␣␣␣␣ok(␣"this",␣"that"␣);␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣not␣ok,␣'this'␣ne␣'that'
␣␣␣␣ok(␣"",␣undef␣);␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣not␣ok,␣""␣is␣defined

The␣second␣argument␣is␣considered␣a␣regex␣if␣it␣is␣either␣a␣regex
object␣or␣a␣string␣that␣looks␣like␣a␣regex.␣␣Regex␣objects␣are
constructed␣with␣the␣qr//␣operator␣in␣recent␣versions␣of␣perl.␣␣A
string␣is␣considered␣to␣look␣like␣a␣regex␣if␣its␣first␣and␣last
characters␣are␣"/",␣or␣if␣the␣first␣character␣is␣"m"
and␣its␣second␣and␣last␣characters␣are␣both␣the
same␣non-alphanumeric␣non-whitespace␣character.␣␣These␣regexp

Regex␣examples:

␣␣␣␣ok(␣'JaffO',␣'/Jaff/'␣);␣␣␣␣#␣ok,␣'JaffO'␣=~␣/Jaff/
␣␣␣␣ok(␣'JaffO',␣'m|Jaff|'␣);␣␣␣#␣ok,␣'JaffO'␣=~␣m|Jaff|
␣␣␣␣ok(␣'JaffO',␣qr/Jaff/␣);␣␣␣␣#␣ok,␣'JaffO'␣=~␣qr/Jaff/;
␣␣␣␣ok(␣'JaffO',␣'/(?i)jaff/␣);␣#␣ok,␣'JaffO'␣=~␣/jaff/i;

If␣either␣(or␣both!)␣is␣a␣subroutine␣reference,␣it␣is␣run␣and␣used
as␣the␣value␣for␣comparing.␣␣For␣example:

␣␣␣␣ok␣sub␣{
␣␣␣␣␣␣␣␣open(OUT,␣'>',␣'x.dat')␣||␣die␣$!;
␣␣␣␣␣␣␣␣print␣OUT␣"\x{e000}";
␣␣␣␣␣␣␣␣close␣OUT;
␣␣␣␣␣␣␣␣my␣$bytecount␣=␣-s␣'x.dat';
␣␣␣␣␣␣␣␣unlink␣'x.dat'␣or␣warn␣"Can't␣unlink␣:␣$!";
␣␣␣␣␣␣␣␣return␣$bytecount;
␣␣␣␣␣␣},
␣␣␣␣␣␣4
␣␣␣␣;

The␣above␣test␣passes␣two␣values␣to␣C<ok(arg1,␣arg2)>␣--␣the␣first␣
a␣coderef,␣and␣the␣second␣is␣the␣number␣4.␣␣Before␣C<ok>␣compares␣them,
it␣calls␣the␣coderef,␣and␣uses␣its␣return␣value␣as␣the␣real␣value␣of
this␣parameter.␣Assuming␣that␣C<$bytecount>␣returns␣4,␣C<ok>␣ends␣up
testing␣C<4␣eq␣4>.␣␣Since␣that's␣true,␣this␣test␣passes.

Finally,␣you␣can␣append␣an␣optional␣third␣argument,␣in
C<ok(I<arg1>,I<arg2>,␣I<note>)>,␣where␣I<note>␣is␣a␣string␣value␣that
will␣be␣printed␣if␣the␣test␣fails.␣␣This␣should␣be␣some␣useful
information␣about␣the␣test,␣pertaining␣to␣why␣it␣failed,␣and/or
a␣description␣of␣the␣test.␣␣For␣example:

␣␣␣␣ok(␣grep($_␣eq␣'something␣unique',␣@stuff),␣1,
␣␣␣␣␣␣␣␣"Something␣that␣should␣be␣unique␣isn't!\n".
␣␣␣␣␣␣␣␣'@stuff␣=␣'.join␣',␣',␣@stuff
␣␣␣␣␣␣);

Unfortunately,␣a␣note␣cannot␣be␣used␣with␣the␣single␣argument
style␣of␣C<ok()>.␣␣That␣is,␣if␣you␣try␣C<ok(I<arg1>,␣I<note>)>,␣then
C<Test>␣will␣interpret␣this␣as␣C<ok(I<arg1>,␣I<arg2>)>,␣and␣probably
end␣up␣testing␣C<I<arg1>␣eq␣I<arg2>>␣--␣and␣that's␣not␣what␣you␣want!

All␣of␣the␣above␣special␣cases␣can␣occasionally␣cause␣some
problems.␣␣See␣L</BUGS␣and␣CAVEATS>.

=cut
----------
Range: (19226,21564) (2338)
=item␣C<skip(I<skip_if_true>,␣I<args...>)>

This␣is␣used␣for␣tests␣that␣under␣some␣conditions␣can␣be␣skipped.␣␣It's
basically␣equivalent␣to:

␣␣if(␣$skip_if_true␣)␣{
␣␣␣␣ok(1);
␣␣}␣else␣{
␣␣␣␣ok(␣args...␣);
␣␣}

...except␣that␣the␣C<ok(1)>␣emits␣not␣just␣"C<ok␣I<testnum>>"␣but
actually␣"C<ok␣I<testnum>␣#␣I<skip_if_true_value>>".

The␣arguments␣after␣the␣I<skip_if_true>␣are␣what␣is␣fed␣to␣C<ok(...)>␣if
this␣test␣isn't␣skipped.

Example␣usage:

␣␣my␣$if_MSWin␣=
␣␣␣␣$^O␣=~␣m/MSWin/␣?␣'Skip␣if␣under␣MSWin'␣:␣'';

␣␣#␣A␣test␣to␣be␣skipped␣if␣under␣MSWin␣(i.e.,␣run␣except␣under
␣␣#␣MSWin)
␣␣skip($if_MSWin,␣thing($foo),␣thing($bar)␣);

Or,␣going␣the␣other␣way:

␣␣my␣$unless_MSWin␣=
␣␣␣␣$^O␣=~␣m/MSWin/␣?␣''␣:␣'Skip␣unless␣under␣MSWin';

␣␣#␣A␣test␣to␣be␣skipped␣unless␣under␣MSWin␣(i.e.,␣run␣only␣under
␣␣#␣MSWin)
␣␣skip($unless_MSWin,␣thing($foo),␣thing($bar)␣);

The␣tricky␣thing␣to␣remember␣is␣that␣the␣first␣parameter␣is␣true␣if
you␣want␣to␣I<skip>␣the␣test,␣not␣I<run>␣it;␣and␣it␣also␣doubles␣as␣a
note␣about␣why␣it's␣being␣skipped.␣So␣in␣the␣first␣codeblock␣above,␣read
the␣code␣as␣"skip␣if␣MSWin␣--␣(otherwise)␣test␣whether␣C<thing($foo)>␣is
C<thing($bar)>"␣or␣for␣the␣second␣case,␣"skip␣unless␣MSWin...".

Also,␣when␣your␣I<skip_if_reason>␣string␣is␣true,␣it␣really␣should␣(for
backwards␣compatibility␣with␣older␣Test.pm␣versions)␣start␣with␣the
string␣"Skip",␣as␣shown␣in␣the␣above␣examples.

Note␣that␣in␣the␣above␣cases,␣C<thing($foo)>␣and␣C<thing($bar)>
I<are>␣evaluated␣--␣but␣as␣long␣as␣the␣C<skip_if_true>␣is␣true,
then␣we␣C<skip(...)>␣just␣tosses␣out␣their␣value␣(i.e.,␣not
bothering␣to␣treat␣them␣like␣values␣to␣C<ok(...)>.␣␣But␣if
you␣need␣to␣I<not>␣eval␣the␣arguments␣when␣skipping␣the
test,␣use
this␣format:

␣␣skip(␣$unless_MSWin,
␣␣␣␣sub␣{
␣␣␣␣␣␣#␣This␣code␣returns␣true␣if␣the␣test␣passes.
␣␣␣␣␣␣#␣(But␣it␣doesn't␣even␣get␣called␣if␣the␣test␣is␣skipped.)
␣␣␣␣␣␣thing($foo)␣eq␣thing($bar)
␣␣␣␣}
␣␣);

or␣even␣this,␣which␣is␣basically␣equivalent:

␣␣skip(␣$unless_MSWin,
␣␣␣␣sub␣{␣thing($foo)␣},␣sub␣{␣thing($bar)␣}
␣␣);

That␣is,␣both␣are␣like␣this:

␣␣if(␣$unless_MSWin␣)␣{
␣␣␣␣ok(1);␣␣#␣but␣it␣actually␣appends␣"#␣$unless_MSWin"
␣␣␣␣␣␣␣␣␣␣␣␣#␣␣so␣that␣Test::Harness␣can␣tell␣it's␣a␣skip
␣␣}␣else␣{
␣␣␣␣#␣Not␣skipping,␣so␣actually␣call␣and␣evaluate...
␣␣␣␣ok(␣sub␣{␣thing($foo)␣},␣sub␣{␣thing($bar)␣}␣);
␣␣}

=cut
----------
Range: (31358,44408) (13050)
=head1␣NAME

Benchmark␣-␣benchmark␣running␣times␣of␣Perl␣code

=head1␣SYNOPSIS

␣␣␣␣use␣Benchmark␣qw(:all)␣;

␣␣␣␣timethis␣($count,␣"code");

␣␣␣␣#␣Use␣Perl␣code␣in␣strings...
␣␣␣␣timethese($count,␣{
	'Name1'␣=>␣'...code1...',
	'Name2'␣=>␣'...code2...',
␣␣␣␣});

␣␣␣␣#␣...␣or␣use␣subroutine␣references.
␣␣␣␣timethese($count,␣{
	'Name1'␣=>␣sub␣{␣...code1...␣},
	'Name2'␣=>␣sub␣{␣...code2...␣},
␣␣␣␣});

␣␣␣␣#␣cmpthese␣can␣be␣used␣both␣ways␣as␣well
␣␣␣␣cmpthese($count,␣{
	'Name1'␣=>␣'...code1...',
	'Name2'␣=>␣'...code2...',
␣␣␣␣});

␣␣␣␣cmpthese($count,␣{
	'Name1'␣=>␣sub␣{␣...code1...␣},
	'Name2'␣=>␣sub␣{␣...code2...␣},
␣␣␣␣});

␣␣␣␣#␣...or␣in␣two␣stages
␣␣␣␣$results␣=␣timethese($count,
␣␣␣␣␣␣␣␣{
	␣␣␣␣'Name1'␣=>␣sub␣{␣...code1...␣},
	␣␣␣␣'Name2'␣=>␣sub␣{␣...code2...␣},
␣␣␣␣␣␣␣␣},
	'none'
␣␣␣␣);
␣␣␣␣cmpthese(␣$results␣)␣;

␣␣␣␣$t␣=␣timeit($count,␣'...other␣code...')
␣␣␣␣print␣"$count␣loops␣of␣other␣code␣took:",timestr($t),"\n";

␣␣␣␣$t␣=␣countit($time,␣'...other␣code...')
␣␣␣␣$count␣=␣$t->iters␣;
␣␣␣␣print␣"$count␣loops␣of␣other␣code␣took:",timestr($t),"\n";

␣␣␣␣#␣enable␣hires␣wallclock␣timing␣if␣possible
␣␣␣␣use␣Benchmark␣':hireswallclock';

=head1␣DESCRIPTION

The␣Benchmark␣module␣encapsulates␣a␣number␣of␣routines␣to␣help␣you
figure␣out␣how␣long␣it␣takes␣to␣execute␣some␣code.

timethis␣-␣run␣a␣chunk␣of␣code␣several␣times

timethese␣-␣run␣several␣chunks␣of␣code␣several␣times

cmpthese␣-␣print␣results␣of␣timethese␣as␣a␣comparison␣chart

timeit␣-␣run␣a␣chunk␣of␣code␣and␣see␣how␣long␣it␣goes

countit␣-␣see␣how␣many␣times␣a␣chunk␣of␣code␣runs␣in␣a␣given␣time


=head2␣Methods

=over␣10

=item␣new

Returns␣the␣current␣time.␣␣␣Example:

␣␣␣␣use␣Benchmark;
␣␣␣␣$t0␣=␣Benchmark->new;
␣␣␣␣#␣...␣your␣code␣here␣...
␣␣␣␣$t1␣=␣Benchmark->new;
␣␣␣␣$td␣=␣timediff($t1,␣$t0);
␣␣␣␣print␣"the␣code␣took:",timestr($td),"\n";

=item␣debug

Enables␣or␣disable␣debugging␣by␣setting␣the␣C<$Benchmark::Debug>␣flag:

␣␣␣␣Benchmark->debug(1);
␣␣␣␣$t␣=␣timeit(10,␣'␣5␣**␣$Global␣');
␣␣␣␣Benchmark->debug(0);

=item␣iters

Returns␣the␣number␣of␣iterations.

=back

=head2␣Standard␣Exports

The␣following␣routines␣will␣be␣exported␣into␣your␣namespace
if␣you␣use␣the␣Benchmark␣module:

=over␣10

=item␣timeit(COUNT,␣CODE)

Arguments:␣COUNT␣is␣the␣number␣of␣times␣to␣run␣the␣loop,␣and␣CODE␣is
the␣code␣to␣run.␣␣CODE␣may␣be␣either␣a␣code␣reference␣or␣a␣string␣to
be␣eval'd;␣either␣way␣it␣will␣be␣run␣in␣the␣caller's␣package.

Returns:␣a␣Benchmark␣object.

=item␣timethis␣(␣COUNT,␣CODE,␣[␣TITLE,␣[␣STYLE␣]]␣)

Time␣COUNT␣iterations␣of␣CODE.␣CODE␣may␣be␣a␣string␣to␣eval␣or␣a
code␣reference;␣either␣way␣the␣CODE␣will␣run␣in␣the␣caller's␣package.
Results␣will␣be␣printed␣to␣STDOUT␣as␣TITLE␣followed␣by␣the␣times.
TITLE␣defaults␣to␣"timethis␣COUNT"␣if␣none␣is␣provided.␣STYLE
determines␣the␣format␣of␣the␣output,␣as␣described␣for␣timestr()␣below.

The␣COUNT␣can␣be␣zero␣or␣negative:␣this␣means␣the␣I<minimum␣number␣of
CPU␣seconds>␣to␣run.␣␣A␣zero␣signifies␣the␣default␣of␣3␣seconds.␣␣For
example␣to␣run␣at␣least␣for␣10␣seconds:

	timethis(-10,␣$code)

or␣to␣run␣two␣pieces␣of␣code␣tests␣for␣at␣least␣3␣seconds:

	timethese(0,␣{␣test1␣=>␣'...',␣test2␣=>␣'...'})

CPU␣seconds␣is,␣in␣UNIX␣terms,␣the␣user␣time␣plus␣the␣system␣time␣of
the␣process␣itself,␣as␣opposed␣to␣the␣real␣(wallclock)␣time␣and␣the
time␣spent␣by␣the␣child␣processes.␣␣Less␣than␣0.1␣seconds␣is␣not
accepted␣(-0.01␣as␣the␣count,␣for␣example,␣will␣cause␣a␣fatal␣runtime
exception).

Note␣that␣the␣CPU␣seconds␣is␣the␣B<minimum>␣time:␣CPU␣scheduling␣and
other␣operating␣system␣factors␣may␣complicate␣the␣attempt␣so␣that␣a
little␣bit␣more␣time␣is␣spent.␣␣The␣benchmark␣output␣will,␣however,
also␣tell␣the␣number␣of␣C<$code>␣runs/second,␣which␣should␣be␣a␣more
interesting␣number␣than␣the␣actually␣spent␣seconds.

Returns␣a␣Benchmark␣object.

=item␣timethese␣(␣COUNT,␣CODEHASHREF,␣[␣STYLE␣]␣)

The␣CODEHASHREF␣is␣a␣reference␣to␣a␣hash␣containing␣names␣as␣keys
and␣either␣a␣string␣to␣eval␣or␣a␣code␣reference␣for␣each␣value.
For␣each␣(KEY,␣VALUE)␣pair␣in␣the␣CODEHASHREF,␣this␣routine␣will
call

	timethis(COUNT,␣VALUE,␣KEY,␣STYLE)

The␣routines␣are␣called␣in␣string␣comparison␣order␣of␣KEY.

The␣COUNT␣can␣be␣zero␣or␣negative,␣see␣timethis().

Returns␣a␣hash␣reference␣of␣Benchmark␣objects,␣keyed␣by␣name.

=item␣timediff␣(␣T1,␣T2␣)

Returns␣the␣difference␣between␣two␣Benchmark␣times␣as␣a␣Benchmark
object␣suitable␣for␣passing␣to␣timestr().

=item␣timestr␣(␣TIMEDIFF,␣[␣STYLE,␣[␣FORMAT␣]␣]␣)

Returns␣a␣string␣that␣formats␣the␣times␣in␣the␣TIMEDIFF␣object␣in
the␣requested␣STYLE.␣TIMEDIFF␣is␣expected␣to␣be␣a␣Benchmark␣object
similar␣to␣that␣returned␣by␣timediff().

STYLE␣can␣be␣any␣of␣'all',␣'none',␣'noc',␣'nop'␣or␣'auto'.␣'all'␣shows
each␣of␣the␣5␣times␣available␣('wallclock'␣time,␣user␣time,␣system␣time,
user␣time␣of␣children,␣and␣system␣time␣of␣children).␣'noc'␣shows␣all
except␣the␣two␣children␣times.␣'nop'␣shows␣only␣wallclock␣and␣the
two␣children␣times.␣'auto'␣(the␣default)␣will␣act␣as␣'all'␣unless
the␣children␣times␣are␣both␣zero,␣in␣which␣case␣it␣acts␣as␣'noc'.
'none'␣prevents␣output.

FORMAT␣is␣the␣L<printf(3)>-style␣format␣specifier␣(without␣the
leading␣'%')␣to␣use␣to␣print␣the␣times.␣It␣defaults␣to␣'5.2f'.

=back

=head2␣Optional␣Exports

The␣following␣routines␣will␣be␣exported␣into␣your␣namespace
if␣you␣specifically␣ask␣that␣they␣be␣imported:

=over␣10

=item␣clearcache␣(␣COUNT␣)

Clear␣the␣cached␣time␣for␣COUNT␣rounds␣of␣the␣null␣loop.

=item␣clearallcache␣(␣)

Clear␣all␣cached␣times.

=item␣cmpthese␣(␣COUNT,␣CODEHASHREF,␣[␣STYLE␣]␣)

=item␣cmpthese␣(␣RESULTSHASHREF,␣[␣STYLE␣]␣)

Optionally␣calls␣timethese(),␣then␣outputs␣comparison␣chart.␣␣This:

␣␣␣␣cmpthese(␣-1,␣{␣a␣=>␣"++\$i",␣b␣=>␣"\$i␣*=␣2"␣}␣)␣;

outputs␣a␣chart␣like:

␣␣␣␣␣␣␣␣␣␣␣Rate␣␣␣␣b␣␣␣␣a
␣␣␣␣b␣2831802/s␣␣␣--␣-61%
␣␣␣␣a␣7208959/s␣155%␣␣␣--

This␣chart␣is␣sorted␣from␣slowest␣to␣fastest,␣and␣shows␣the␣percent␣speed
difference␣between␣each␣pair␣of␣tests.

C<cmpthese>␣can␣also␣be␣passed␣the␣data␣structure␣that␣timethese()␣returns:

␣␣␣␣$results␣=␣timethese(␣-1,
␣␣␣␣␣␣␣␣{␣a␣=>␣"++\$i",␣b␣=>␣"\$i␣*=␣2"␣}␣)␣;
␣␣␣␣cmpthese(␣$results␣);

in␣case␣you␣want␣to␣see␣both␣sets␣of␣results.
If␣the␣first␣argument␣is␣an␣unblessed␣hash␣reference,
that␣is␣RESULTSHASHREF;␣otherwise␣that␣is␣COUNT.

Returns␣a␣reference␣to␣an␣ARRAY␣of␣rows,␣each␣row␣is␣an␣ARRAY␣of␣cells␣from␣the
above␣chart,␣including␣labels.␣This:

␣␣␣␣my␣$rows␣=␣cmpthese(␣-1,
␣␣␣␣␣␣␣␣{␣a␣=>␣'++$i',␣b␣=>␣'$i␣*=␣2'␣},␣"none"␣);

returns␣a␣data␣structure␣like:

␣␣␣␣[
␣␣␣␣␣␣␣␣[␣'',␣␣␣␣␣␣␣'Rate',␣␣␣'b',␣␣␣␣'a'␣],
␣␣␣␣␣␣␣␣[␣'b',␣'2885232/s',␣␣'--',␣'-59%'␣],
␣␣␣␣␣␣␣␣[␣'a',␣'7099126/s',␣'146%',␣␣'--'␣],
␣␣␣␣]

B<NOTE>:␣This␣result␣value␣differs␣from␣previous␣versions,␣which␣returned
the␣C<timethese()>␣result␣structure.␣␣If␣you␣want␣that,␣just␣use␣the␣two
statement␣C<timethese>...C<cmpthese>␣idiom␣shown␣above.

Incidentally,␣note␣the␣variance␣in␣the␣result␣values␣between␣the␣two␣examples;
this␣is␣typical␣of␣benchmarking.␣␣If␣this␣were␣a␣real␣benchmark,␣you␣would
probably␣want␣to␣run␣a␣lot␣more␣iterations.

=item␣countit(TIME,␣CODE)

Arguments:␣TIME␣is␣the␣minimum␣length␣of␣time␣to␣run␣CODE␣for,␣and␣CODE␣is
the␣code␣to␣run.␣␣CODE␣may␣be␣either␣a␣code␣reference␣or␣a␣string␣to
be␣eval'd;␣either␣way␣it␣will␣be␣run␣in␣the␣caller's␣package.

TIME␣is␣I<not>␣negative.␣␣countit()␣will␣run␣the␣loop␣many␣times␣to
calculate␣the␣speed␣of␣CODE␣before␣running␣it␣for␣TIME.␣␣The␣actual
time␣run␣for␣will␣usually␣be␣greater␣than␣TIME␣due␣to␣system␣clock
resolution,␣so␣it's␣best␣to␣look␣at␣the␣number␣of␣iterations␣divided
by␣the␣times␣that␣you␣are␣concerned␣with,␣not␣just␣the␣iterations.

Returns:␣a␣Benchmark␣object.

=item␣disablecache␣(␣)

Disable␣caching␣of␣timings␣for␣the␣null␣loop.␣This␣will␣force␣Benchmark
to␣recalculate␣these␣timings␣for␣each␣new␣piece␣of␣code␣timed.

=item␣enablecache␣(␣)

Enable␣caching␣of␣timings␣for␣the␣null␣loop.␣The␣time␣taken␣for␣COUNT
rounds␣of␣the␣null␣loop␣will␣be␣calculated␣only␣once␣for␣each
different␣COUNT␣used.

=item␣timesum␣(␣T1,␣T2␣)

Returns␣the␣sum␣of␣two␣Benchmark␣times␣as␣a␣Benchmark␣object␣suitable
for␣passing␣to␣timestr().

=back

=head2␣:hireswallclock

If␣the␣Time::HiRes␣module␣has␣been␣installed,␣you␣can␣specify␣the
special␣tag␣C<:hireswallclock>␣for␣Benchmark␣(if␣Time::HiRes␣is␣not
available,␣the␣tag␣will␣be␣silently␣ignored).␣␣This␣tag␣will␣cause␣the
wallclock␣time␣to␣be␣measured␣in␣microseconds,␣instead␣of␣integer
seconds.␣␣Note␣though␣that␣the␣speed␣computations␣are␣still␣conducted
in␣CPU␣time,␣not␣wallclock␣time.

=head1␣Benchmark␣Object

Many␣of␣the␣functions␣in␣this␣module␣return␣a␣Benchmark␣object,
or␣in␣the␣case␣of␣C<timethese()>,␣a␣reference␣to␣a␣hash,␣the␣values␣of
which␣are␣Benchmark␣objects.␣␣This␣is␣useful␣if␣you␣want␣to␣store␣or
further␣process␣results␣from␣Benchmark␣functions.

Internally␣the␣Benchmark␣object␣holds␣timing␣values,
described␣in␣L</"NOTES">␣below.
The␣following␣methods␣can␣be␣used␣to␣access␣them:

=over␣4

=item␣cpu_p

Total␣CPU␣(User␣+␣System)␣of␣the␣main␣(parent)␣process.

=item␣cpu_c

Total␣CPU␣(User␣+␣System)␣of␣any␣children␣processes.

=item␣cpu_a

Total␣CPU␣of␣parent␣and␣any␣children␣processes.

=item␣real

Real␣elapsed␣time␣"wallclock␣seconds".

=item␣iters

Number␣of␣iterations␣run.

=back

The␣following␣illustrates␣use␣of␣the␣Benchmark␣object:

␣␣␣␣$result␣=␣timethis(100000,␣sub␣{␣...␣});
␣␣␣␣print␣"total␣CPU␣=␣",␣$result->cpu_a,␣"\n";

=head1␣NOTES

The␣data␣is␣stored␣as␣a␣list␣of␣values␣from␣the␣time␣and␣times
functions:

␣␣␣␣␣␣($real,␣$user,␣$system,␣$children_user,␣$children_system,␣$iters)

in␣seconds␣for␣the␣whole␣loop␣(not␣divided␣by␣the␣number␣of␣rounds).

The␣timing␣is␣done␣using␣time(3)␣and␣times(3).

Code␣is␣executed␣in␣the␣caller's␣package.

The␣time␣of␣the␣null␣loop␣(a␣loop␣with␣the␣same
number␣of␣rounds␣but␣empty␣loop␣body)␣is␣subtracted
from␣the␣time␣of␣the␣real␣loop.

The␣null␣loop␣times␣can␣be␣cached,␣the␣key␣being␣the
number␣of␣rounds.␣The␣caching␣can␣be␣controlled␣using
calls␣like␣these:

␣␣␣␣clearcache($key);
␣␣␣␣clearallcache();

␣␣␣␣disablecache();
␣␣␣␣enablecache();

Caching␣is␣off␣by␣default,␣as␣it␣can␣(usually␣slightly)␣decrease
accuracy␣and␣does␣not␣usually␣noticeably␣affect␣runtimes.

=head1␣EXAMPLES

For␣example,

␣␣␣␣use␣Benchmark␣qw(␣cmpthese␣)␣;
␣␣␣␣$x␣=␣3;
␣␣␣␣cmpthese(␣-5,␣{
␣␣␣␣␣␣␣␣a␣=>␣sub{$x*$x},
␣␣␣␣␣␣␣␣b␣=>␣sub{$x**2},
␣␣␣␣}␣);

outputs␣something␣like␣this:

␣␣␣Benchmark:␣running␣a,␣b,␣each␣for␣at␣least␣5␣CPU␣seconds...
␣␣␣␣␣␣␣␣␣␣Rate␣␣␣␣b␣␣␣␣a
␣␣␣b␣1559428/s␣␣␣--␣-62%
␣␣␣a␣4152037/s␣166%␣␣␣--


while

␣␣␣␣use␣Benchmark␣qw(␣timethese␣cmpthese␣)␣;
␣␣␣␣$x␣=␣3;
␣␣␣␣$r␣=␣timethese(␣-5,␣{
␣␣␣␣␣␣␣␣a␣=>␣sub{$x*$x},
␣␣␣␣␣␣␣␣b␣=>␣sub{$x**2},
␣␣␣␣}␣);
␣␣␣␣cmpthese␣$r;

outputs␣something␣like␣this:

␣␣␣␣Benchmark:␣running␣a,␣b,␣each␣for␣at␣least␣5␣CPU␣seconds...
␣␣␣␣␣␣␣␣␣␣␣␣␣a:␣10␣wallclock␣secs␣(␣5.14␣usr␣+␣␣0.13␣sys␣=␣␣5.27␣CPU)␣@␣3835055.60/s␣(n=20210743)
␣␣␣␣␣␣␣␣␣␣␣␣␣b:␣␣5␣wallclock␣secs␣(␣5.41␣usr␣+␣␣0.00␣sys␣=␣␣5.41␣CPU)␣@␣1574944.92/s␣(n=8520452)
␣␣␣␣␣␣␣␣␣␣␣Rate␣␣␣␣b␣␣␣␣a
␣␣␣␣b␣1574945/s␣␣␣--␣-59%
␣␣␣␣a␣3835056/s␣144%␣␣␣--


=head1␣INHERITANCE

Benchmark␣inherits␣from␣no␣other␣class,␣except␣of␣course
from␣Exporter.

=head1␣CAVEATS

Comparing␣eval'd␣strings␣with␣code␣references␣will␣give␣you
inaccurate␣results:␣a␣code␣reference␣will␣show␣a␣slightly␣slower
execution␣time␣than␣the␣equivalent␣eval'd␣string.

The␣real␣time␣timing␣is␣done␣using␣time(2)␣and
the␣granularity␣is␣therefore␣only␣one␣second.

Short␣tests␣may␣produce␣negative␣figures␣because␣perl
can␣appear␣to␣take␣longer␣to␣execute␣the␣empty␣loop
than␣a␣short␣test;␣try:

␣␣␣␣timethis(100,'1');

The␣system␣time␣of␣the␣null␣loop␣might␣be␣slightly
more␣than␣the␣system␣time␣of␣the␣loop␣with␣the␣actual
code␣and␣therefore␣the␣difference␣might␣end␣up␣being␣E<lt>␣0.

=head1␣SEE␣ALSO

L<Devel::NYTProf>␣-␣a␣Perl␣code␣profiler

=head1␣AUTHORS

Jarkko␣Hietaniemi␣<F<jhi@iki.fi>>,␣Tim␣Bunce␣<F<Tim.Bunce@ig.co.uk>>

=head1␣MODIFICATION␣HISTORY

September␣8th,␣1994;␣by␣Tim␣Bunce.

March␣28th,␣1997;␣by␣Hugo␣van␣der␣Sanden:␣added␣support␣for␣code
references␣and␣the␣already␣documented␣'debug'␣method;␣revamped
documentation.

April␣04-07th,␣1997:␣by␣Jarkko␣Hietaniemi,␣added␣the␣run-for-some-time
functionality.

September,␣1999;␣by␣Barrie␣Slaymaker:␣math␣fixes␣and␣accuracy␣and
efficiency␣tweaks.␣␣Added␣cmpthese().␣␣A␣result␣is␣now␣returned␣from
timethese().␣␣Exposed␣countit()␣(was␣runfor()).

December,␣2001;␣by␣Nicholas␣Clark:␣make␣timestr()␣recognise␣the␣style␣'none'
and␣return␣an␣empty␣string.␣If␣cmpthese␣is␣calling␣timethese,␣make␣it␣pass␣the
style␣in.␣(so␣that␣'none'␣will␣suppress␣output).␣Make␣sub␣new␣dump␣its
debugging␣output␣to␣STDERR,␣to␣be␣consistent␣with␣everything␣else.
All␣bugs␣found␣while␣writing␣a␣regression␣test.

September,␣2002;␣by␣Jarkko␣Hietaniemi:␣add␣':hireswallclock'␣special␣tag.

February,␣2004;␣by␣Chia-liang␣Kao:␣make␣cmpthese␣and␣timestr␣use␣time
statistics␣for␣children␣instead␣of␣parent␣when␣the␣style␣is␣'nop'.

November,␣2007;␣by␣Christophe␣Grosjean:␣make␣cmpthese␣and␣timestr␣compute
time␣consistently␣with␣style␣argument,␣default␣is␣'all'␣not␣'noc'␣any␣more.

=cut
----------
Range: (64344,67917) (3573)
=head1␣NAME

filetest␣-␣Perl␣pragma␣to␣control␣the␣filetest␣permission␣operators

=head1␣SYNOPSIS

␣␣␣␣$can_perhaps_read␣=␣-r␣"file";	#␣use␣the␣mode␣bits
␣␣␣␣{
␣␣␣␣␣␣␣␣use␣filetest␣'access';		#␣intuit␣harder
␣␣␣␣␣␣␣␣$can_really_read␣=␣-r␣"file";
␣␣␣␣}
␣␣␣␣$can_perhaps_read␣=␣-r␣"file";	#␣use␣the␣mode␣bits␣again

=head1␣DESCRIPTION

This␣pragma␣tells␣the␣compiler␣to␣change␣the␣behaviour␣of␣the␣filetest
permission␣operators,␣C<-r>␣C<-w>␣C<-x>␣C<-R>␣C<-W>␣C<-X>
(see␣L<perlfunc>).

The␣default␣behaviour␣of␣file␣test␣operators␣is␣to␣use␣the␣simple
mode␣bits␣as␣returned␣by␣the␣stat()␣family␣of␣system␣calls.␣␣However,
many␣operating␣systems␣have␣additional␣features␣to␣define␣more␣complex
access␣rights,␣for␣example␣ACLs␣(Access␣Control␣Lists).
For␣such␣environments,␣C<use␣filetest>␣may␣help␣the␣permission
operators␣to␣return␣results␣more␣consistent␣with␣other␣tools.

The␣C<use␣filetest>␣or␣C<no␣filetest>␣statements␣affect␣file␣tests␣defined␣in
their␣block,␣up␣to␣the␣end␣of␣the␣closest␣enclosing␣block␣(they␣are␣lexically
block-scoped).

Currently,␣only␣the␣C<access>␣sub-pragma␣is␣implemented.␣␣It␣enables␣(or
disables)␣the␣use␣of␣access()␣when␣available,␣that␣is,␣on␣most␣UNIX␣systems␣and
other␣POSIX␣environments.␣␣See␣details␣below.

=head2␣Consider␣this␣carefully

The␣stat()␣mode␣bits␣are␣probably␣right␣for␣most␣of␣the␣files␣and
directories␣found␣on␣your␣system,␣because␣few␣people␣want␣to␣use␣the
additional␣features␣offered␣by␣access().␣But␣you␣may␣encounter␣surprises
if␣your␣program␣runs␣on␣a␣system␣that␣uses␣ACLs,␣since␣the␣stat()
information␣won't␣reflect␣the␣actual␣permissions.

There␣may␣be␣a␣slight␣performance␣decrease␣in␣the␣filetest␣operations
when␣the␣filetest␣pragma␣is␣in␣effect,␣because␣checking␣bits␣is␣very
cheap.

Also,␣note␣that␣using␣the␣file␣tests␣for␣security␣purposes␣is␣a␣lost␣cause
from␣the␣start:␣there␣is␣a␣window␣open␣for␣race␣conditions␣(who␣is␣to
say␣that␣the␣permissions␣will␣not␣change␣between␣the␣test␣and␣the␣real
operation?).␣␣Therefore␣if␣you␣are␣serious␣about␣security,␣just␣try
the␣real␣operation␣and␣test␣for␣its␣success␣-␣think␣in␣terms␣of␣atomic
operations.␣␣Filetests␣are␣more␣useful␣for␣filesystem␣administrative
tasks,␣when␣you␣have␣no␣need␣for␣the␣content␣of␣the␣elements␣on␣disk.

=head2␣The␣"access"␣sub-pragma

UNIX␣and␣POSIX␣systems␣provide␣an␣abstract␣access()␣operating␣system␣call,
which␣should␣be␣used␣to␣query␣the␣read,␣write,␣and␣execute␣rights.␣This
function␣hides␣various␣distinct␣approaches␣in␣additional␣operating␣system
specific␣security␣features,␣like␣Access␣Control␣Lists␣(ACLs)

The␣extended␣filetest␣functionality␣is␣used␣by␣Perl␣only␣when␣the␣argument
of␣the␣operators␣is␣a␣filename,␣not␣when␣it␣is␣a␣filehandle.

=head2␣Limitation␣with␣regard␣to␣C<_>

Because␣access()␣does␣not␣invoke␣stat()␣(at␣least␣not␣in␣a␣way␣visible
to␣Perl),␣B<the␣stat␣result␣cache␣"_"␣is␣not␣set>.␣␣This␣means␣that␣the
outcome␣of␣the␣following␣two␣tests␣is␣different.␣␣The␣first␣has␣the␣stat
bits␣of␣F</etc/passwd>␣in␣C<_>,␣and␣in␣the␣second␣case␣this␣still
contains␣the␣bits␣of␣C</etc>.

␣{␣-d␣'/etc';
␣␣␣-w␣'/etc/passwd';
␣␣␣print␣-f␣_␣?␣'Yes'␣:␣'No';␣␣␣#␣Yes
␣}

␣{␣use␣filetest␣'access';
␣␣␣-d␣'/etc';
␣␣␣-w␣'/etc/passwd';
␣␣␣print␣-f␣_␣?␣'Yes'␣:␣'No';␣␣␣#␣No
␣}

Of␣course,␣unless␣your␣OS␣does␣not␣implement␣access(),␣in␣which␣case␣the
pragma␣is␣simply␣ignored.␣␣Best␣not␣to␣use␣C<_>␣at␣all␣in␣a␣file␣where
the␣filetest␣pragma␣is␣active!

As␣a␣side␣effect,␣as␣C<_>␣doesn't␣work,␣stacked␣filetest␣operators
(C<-f␣-w␣$file>)␣won't␣work␣either.

This␣limitation␣might␣be␣removed␣in␣a␣future␣version␣of␣perl.

=cut
----------
Range: (226775,228277) (1502)
qw␣(usleep␣sleep␣ualarm␣alarm␣gettimeofday␣time␣tv_interval
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣getitimer␣setitimer␣nanosleep␣clock_gettime␣clock_getres
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣clock␣clock_nanosleep
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣CLOCKS_PER_SEC
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣CLOCK_BOOTTIME
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣CLOCK_HIGHRES
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣CLOCK_MONOTONIC
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣CLOCK_MONOTONIC_COARSE
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣CLOCK_MONOTONIC_FAST
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣CLOCK_MONOTONIC_PRECISE
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣CLOCK_MONOTONIC_RAW
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣CLOCK_PROCESS_CPUTIME_ID
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣CLOCK_PROF
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣CLOCK_REALTIME
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣CLOCK_REALTIME_COARSE
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣CLOCK_REALTIME_FAST
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣CLOCK_REALTIME_PRECISE
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣CLOCK_REALTIME_RAW
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣CLOCK_SECOND
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣CLOCK_SOFTTIME
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣CLOCK_THREAD_CPUTIME_ID
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣CLOCK_TIMEOFDAY
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣CLOCK_UPTIME
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣CLOCK_UPTIME_COARSE
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣CLOCK_UPTIME_FAST
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣CLOCK_UPTIME_PRECISE
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣CLOCK_UPTIME_RAW
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣CLOCK_VIRTUAL
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣ITIMER_PROF
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣ITIMER_REAL
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣ITIMER_REALPROF
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣ITIMER_VIRTUAL
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣TIMER_ABSTIME
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣d_usleep␣d_ualarm␣d_gettimeofday␣d_getitimer␣d_setitimer
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣d_nanosleep␣d_clock_gettime␣d_clock_getres
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣d_clock␣d_clock_nanosleep␣d_hires_stat
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣d_futimens␣d_utimensat␣d_hires_utime
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣stat␣lstat␣utime
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣);
----------
Range: (294794,300405) (5611)
}

=item␣catdir()

Concatenate␣two␣or␣more␣directory␣names␣to␣form␣a␣path␣separated␣by␣colons
(":")␣ending␣with␣a␣directory.␣Resulting␣paths␣are␣B<relative>␣by␣default,
but␣can␣be␣forced␣to␣be␣absolute␣(but␣avoid␣this,␣see␣below).␣Automatically
puts␣a␣trailing␣":"␣on␣the␣end␣of␣the␣complete␣path,␣because␣that's␣what's
done␣in␣MacPerl's␣environment␣and␣helps␣to␣distinguish␣a␣file␣path␣from␣a
directory␣path.

B<IMPORTANT␣NOTE:>␣Beginning␣with␣version␣1.3␣of␣this␣module,␣the␣resulting
path␣is␣relative␣by␣default␣and␣I<not>␣absolute.␣This␣decision␣was␣made␣due
to␣portability␣reasons.␣Since␣C<File::Spec-E<gt>catdir()>␣returns␣relative␣paths
on␣all␣other␣operating␣systems,␣it␣will␣now␣also␣follow␣this␣convention␣on␣Mac
OS.␣Note␣that␣this␣may␣break␣some␣existing␣scripts.

The␣intended␣purpose␣of␣this␣routine␣is␣to␣concatenate␣I<directory␣names>.
But␣because␣of␣the␣nature␣of␣Macintosh␣paths,␣some␣additional␣possibilities
are␣allowed␣to␣make␣using␣this␣routine␣give␣reasonable␣results␣for␣some
common␣situations.␣In␣other␣words,␣you␣are␣also␣allowed␣to␣concatenate
I<paths>␣instead␣of␣directory␣names␣(strictly␣speaking,␣a␣string␣like␣":a"
is␣a␣path,␣but␣not␣a␣name,␣since␣it␣contains␣a␣punctuation␣character␣":").

So,␣beside␣calls␣like

␣␣␣␣catdir("a")␣=␣":a:"
␣␣␣␣catdir("a","b")␣=␣":a:b:"
␣␣␣␣catdir()␣=␣""␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣(special␣case)

calls␣like␣the␣following

␣␣␣␣catdir(":a:")␣=␣":a:"
␣␣␣␣catdir(":a","b")␣=␣":a:b:"
␣␣␣␣catdir(":a:","b")␣=␣":a:b:"
␣␣␣␣catdir(":a:",":b:")␣=␣":a:b:"
␣␣␣␣catdir(":")␣=␣":"

are␣allowed.

Here␣are␣the␣rules␣that␣are␣used␣in␣C<catdir()>;␣note␣that␣we␣try␣to␣be␣as
compatible␣as␣possible␣to␣Unix:

=over␣2

=item␣1.

The␣resulting␣path␣is␣relative␣by␣default,␣i.e.␣the␣resulting␣path␣will␣have␣a
leading␣colon.

=item␣2.

A␣trailing␣colon␣is␣added␣automatically␣to␣the␣resulting␣path,␣to␣denote␣a
directory.

=item␣3.

Generally,␣each␣argument␣has␣one␣leading␣":"␣and␣one␣trailing␣":"
removed␣(if␣any).␣They␣are␣then␣joined␣together␣by␣a␣":".␣Special
treatment␣applies␣for␣arguments␣denoting␣updir␣paths␣like␣"::lib:",
see␣(4),␣or␣arguments␣consisting␣solely␣of␣colons␣("colon␣paths"),
see␣(5).

=item␣4.

When␣an␣updir␣path␣like␣":::lib::"␣is␣passed␣as␣argument,␣the␣number
of␣directories␣to␣climb␣up␣is␣handled␣correctly,␣not␣removing␣leading
or␣trailing␣colons␣when␣necessary.␣E.g.

␣␣␣␣catdir(":::a","::b","c")␣␣␣␣=␣":::a::b:c:"
␣␣␣␣catdir(":::a::","::b","c")␣␣=␣":::a:::b:c:"

=item␣5.

Adding␣a␣colon␣":"␣or␣empty␣string␣""␣to␣a␣path␣at␣I<any>␣position
doesn't␣alter␣the␣path,␣i.e.␣these␣arguments␣are␣ignored.␣(When␣a␣""
is␣passed␣as␣the␣first␣argument,␣it␣has␣a␣special␣meaning,␣see
(6)).␣This␣way,␣a␣colon␣":"␣is␣handled␣like␣a␣"."␣(curdir)␣on␣Unix,
while␣an␣empty␣string␣""␣is␣generally␣ignored␣(see
L<File::Spec::Unix/canonpath()>␣).␣Likewise,␣a␣"::"␣is␣handled␣like␣a␣".."
(updir),␣and␣a␣":::"␣is␣handled␣like␣a␣"../.."␣etc.␣␣E.g.

␣␣␣␣catdir("a",":",":","b")␣␣␣=␣":a:b:"
␣␣␣␣catdir("a",":","::",":b")␣=␣":a::b:"

=item␣6.

If␣the␣first␣argument␣is␣an␣empty␣string␣""␣or␣is␣a␣volume␣name,␣i.e.␣matches
the␣pattern␣/^[^:]+:/,␣the␣resulting␣path␣is␣B<absolute>.

=item␣7.

Passing␣an␣empty␣string␣""␣as␣the␣first␣argument␣to␣C<catdir()>␣is
like␣passingC<File::Spec-E<gt>rootdir()>␣as␣the␣first␣argument,␣i.e.

␣␣␣␣catdir("","a","b")␣␣␣␣␣␣␣␣␣␣is␣the␣same␣as

␣␣␣␣catdir(rootdir(),"a","b").

This␣is␣true␣on␣Unix,␣where␣C<catdir("","a","b")>␣yields␣"/a/b"␣and
C<rootdir()>␣is␣"/".␣Note␣that␣C<rootdir()>␣on␣Mac␣OS␣is␣the␣startup
volume,␣which␣is␣the␣closest␣in␣concept␣to␣Unix'␣"/".␣This␣should␣help
to␣run␣existing␣scripts␣originally␣written␣for␣Unix.

=item␣8.

For␣absolute␣paths,␣some␣cleanup␣is␣done,␣to␣ensure␣that␣the␣volume
name␣isn't␣immediately␣followed␣by␣updirs.␣This␣is␣invalid,␣because
this␣would␣go␣beyond␣"root".␣Generally,␣these␣cases␣are␣handled␣like
their␣Unix␣counterparts:

␣Unix:
␣␣␣␣Unix->catdir("","")␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣=␣␣"/"
␣␣␣␣Unix->catdir("",".")␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣=␣␣"/"
␣␣␣␣Unix->catdir("","..")␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣=␣␣"/"␣␣␣␣␣␣␣␣#␣can't␣go
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣beyond␣root
␣␣␣␣Unix->catdir("",".","..","..","a")␣␣=␣␣"/a"
␣Mac:
␣␣␣␣Mac->catdir("","")␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣=␣␣rootdir()␣␣#␣(e.g.␣"HD:")
␣␣␣␣Mac->catdir("",":")␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣=␣␣rootdir()
␣␣␣␣Mac->catdir("","::")␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣=␣␣rootdir()␣␣#␣can't␣go
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣beyond␣root
␣␣␣␣Mac->catdir("",":","::","::","a")␣␣␣=␣␣rootdir()␣.␣"a:"
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣(e.g.␣"HD:a:")

However,␣this␣approach␣is␣limited␣to␣the␣first␣arguments␣following
"root"␣(again,␣see␣L<File::Spec::Unix/canonpath()>.␣If␣there␣are␣more
arguments␣that␣move␣up␣the␣directory␣tree,␣an␣invalid␣path␣going
beyond␣root␣can␣be␣created.

=back

As␣you've␣seen,␣you␣can␣force␣C<catdir()>␣to␣create␣an␣absolute␣path
by␣passing␣either␣an␣empty␣string␣or␣a␣path␣that␣begins␣with␣a␣volume
name␣as␣the␣first␣argument.␣However,␣you␣are␣strongly␣encouraged␣not
to␣do␣so,␣since␣this␣is␣done␣only␣for␣backward␣compatibility.␣Newer
versions␣of␣File::Spec␣come␣with␣a␣method␣called␣C<catpath()>␣(see
below),␣that␣is␣designed␣to␣offer␣a␣portable␣solution␣for␣the␣creation
of␣absolute␣paths.␣␣It␣takes␣volume,␣directory␣and␣file␣portions␣and
returns␣an␣entire␣path.␣While␣C<catdir()>␣is␣still␣suitable␣for␣the
concatenation␣of␣I<directory␣names>,␣you␣are␣encouraged␣to␣use
C<catpath()>␣to␣concatenate␣I<volume␣names>␣and␣I<directory
paths>.␣E.g.

␣␣␣␣$dir␣␣␣␣␣␣=␣File::Spec->catdir("tmp","sources");
␣␣␣␣$abs_path␣=␣File::Spec->catpath("MacintoshHD:",␣$dir,"");

yields

␣␣␣␣"MacintoshHD:tmp:sources:"␣.

=cut
----------
Range: (324554,328434) (3880)
=head1␣NAME

B::Xref␣-␣Generates␣cross␣reference␣reports␣for␣Perl␣programs

=head1␣SYNOPSIS

perl␣-MO=Xref[,OPTIONS]␣foo.pl

=head1␣DESCRIPTION

The␣B::Xref␣module␣is␣used␣to␣generate␣a␣cross␣reference␣listing␣of␣all
definitions␣and␣uses␣of␣variables,␣subroutines␣and␣formats␣in␣a␣Perl␣program.
It␣is␣implemented␣as␣a␣backend␣for␣the␣Perl␣compiler.

The␣report␣generated␣is␣in␣the␣following␣format:

␣␣␣␣File␣filename1
␣␣␣␣␣␣Subroutine␣subname1
	Package␣package1
	␣␣object1␣␣␣␣␣␣␣␣line␣numbers
	␣␣object2␣␣␣␣␣␣␣␣line␣numbers
	␣␣...
	Package␣package2
	...

Each␣B<File>␣section␣reports␣on␣a␣single␣file.␣Each␣B<Subroutine>␣section
reports␣on␣a␣single␣subroutine␣apart␣from␣the␣special␣cases
"(definitions)"␣and␣"(main)".␣These␣report,␣respectively,␣on␣subroutine
definitions␣found␣by␣the␣initial␣symbol␣table␣walk␣and␣on␣the␣main␣part␣of
the␣program␣or␣module␣external␣to␣all␣subroutines.

The␣report␣is␣then␣grouped␣by␣the␣B<Package>␣of␣each␣variable,
subroutine␣or␣format␣with␣the␣special␣case␣"(lexicals)"␣meaning
lexical␣variables.␣Each␣B<object>␣name␣(implicitly␣qualified␣by␣its
containing␣B<Package>)␣includes␣its␣type␣character(s)␣at␣the␣beginning
where␣possible.␣Lexical␣variables␣are␣easier␣to␣track␣and␣even
included␣dereferencing␣information␣where␣possible.

The␣C<line␣numbers>␣are␣a␣comma␣separated␣list␣of␣line␣numbers␣(some
preceded␣by␣code␣letters)␣where␣that␣object␣is␣used␣in␣some␣way.
Simple␣uses␣aren't␣preceded␣by␣a␣code␣letter.␣Introductions␣(such␣as
where␣a␣lexical␣is␣first␣defined␣with␣C<my>)␣are␣indicated␣with␣the
letter␣"i".␣Subroutine␣and␣method␣calls␣are␣indicated␣by␣the␣character
"&".␣␣Subroutine␣definitions␣are␣indicated␣by␣"s"␣and␣format
definitions␣by␣"f".

For␣instance,␣here's␣part␣of␣the␣report␣from␣the␣I<pod2man>␣program␣that
comes␣with␣Perl:

␣␣Subroutine␣clear_noremap
␣␣␣␣Package␣(lexical)
␣␣␣␣␣␣$ready_to_print␣␣␣i1069,␣1079
␣␣␣␣Package␣main
␣␣␣␣␣␣$&␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣1086
␣␣␣␣␣␣$.␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣1086
␣␣␣␣␣␣$0␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣1086
␣␣␣␣␣␣$1␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣1087
␣␣␣␣␣␣$2␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣1085,␣1085
␣␣␣␣␣␣$3␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣1085,␣1085
␣␣␣␣␣␣$ARGV␣␣␣␣␣␣␣␣␣␣␣␣␣1086
␣␣␣␣␣␣%HTML_Escapes␣␣␣␣␣1085,␣1085

This␣shows␣the␣variables␣used␣in␣the␣subroutine␣C<clear_noremap>.␣␣The
variable␣C<$ready_to_print>␣is␣a␣my()␣(lexical)␣variable,
B<i>ntroduced␣(first␣declared␣with␣my())␣on␣line␣1069,␣and␣used␣on
line␣1079.␣␣The␣variable␣C<$&>␣from␣the␣main␣package␣is␣used␣on␣1086,
and␣so␣on.

A␣line␣number␣may␣be␣prefixed␣by␣a␣single␣letter:

=over␣4

=item␣i

Lexical␣variable␣introduced␣(declared␣with␣my())␣for␣the␣first␣time.

=item␣&

Subroutine␣or␣method␣call.

=item␣s

Subroutine␣defined.

=item␣r

Format␣defined.

=back

The␣most␣useful␣option␣the␣cross␣referencer␣has␣is␣to␣save␣the␣report
to␣a␣separate␣file.␣␣For␣instance,␣to␣save␣the␣report␣on
I<myperlprogram>␣to␣the␣file␣I<report>:

␣␣$␣perl␣-MO=Xref,-oreport␣myperlprogram

=head1␣OPTIONS

Option␣words␣are␣separated␣by␣commas␣(not␣whitespace)␣and␣follow␣the
usual␣conventions␣of␣compiler␣backend␣options.

=over␣8

=item␣C<-oFILENAME>

Directs␣output␣to␣C<FILENAME>␣instead␣of␣standard␣output.

=item␣C<-r>

Raw␣output.␣Instead␣of␣producing␣a␣human-readable␣report,␣outputs␣a␣line
in␣machine-readable␣form␣for␣each␣definition/use␣of␣a␣variable/sub/format.

=item␣C<-d>

Don't␣output␣the␣"(definitions)"␣sections.

=item␣C<-D[tO]>

(Internal)␣debug␣options,␣probably␣only␣useful␣if␣C<-r>␣included.
The␣C<t>␣option␣prints␣the␣object␣on␣the␣top␣of␣the␣stack␣as␣it's
being␣tracked.␣The␣C<O>␣option␣prints␣each␣operator␣as␣it's␣being
processed␣in␣the␣execution␣order␣of␣the␣program.

=back

=head1␣BUGS

Non-lexical␣variables␣are␣quite␣difficult␣to␣track␣through␣a␣program.
Sometimes␣the␣type␣of␣a␣non-lexical␣variable's␣use␣is␣impossible␣to
determine.␣Introductions␣of␣non-lexical␣non-scalars␣don't␣seem␣to␣be
reported␣properly.

=head1␣AUTHOR

Malcolm␣Beattie,␣mbeattie@sable.ox.ac.uk.

=cut
----------
Range: (411293,415118) (3825)
s{^((?:[^\r\n]*(?:$re_newline[␣\t])?)*)($re_newline)?}{

␣␣␣␣␣␣␣␣my␣$line␣=␣$1;
␣␣␣␣␣␣␣␣my␣$sep␣=␣defined␣$2␣?␣$2␣:␣'';

␣␣␣␣␣␣␣␣$stop␣=␣1␣unless␣length($line)␣or␣length($sep);

␣␣␣␣␣␣␣␣#␣NOTE:␣this␣code␣partially␣could␣break␣$chk␣support
␣␣␣␣␣␣␣␣#␣in␣non␣strict␣mode␣concat␣consecutive␣encoded␣mime␣words␣with␣same␣charset,␣language␣and␣encoding
␣␣␣␣␣␣␣␣#␣fixes␣breaking␣inside␣multi-byte␣characters
␣␣␣␣␣␣␣␣1␣while␣not␣$STRICT_DECODE␣and␣$line␣=~␣s/$re_capture_encoded_word_split\s*=\?\1\2\?\3\?($re_encoded_text)\?=/=\?$1$2\?$3\?$4$5\?=/so;

␣␣␣␣␣␣␣␣#␣process␣sequence␣of␣encoded␣MIME␣words␣at␣once
␣␣␣␣␣␣␣␣1␣while␣not␣$stop␣and␣$line␣=~␣s{^(.*?)$re_match_decode}{

␣␣␣␣␣␣␣␣␣␣␣␣my␣$begin␣=␣$1␣.␣$2;
␣␣␣␣␣␣␣␣␣␣␣␣my␣$words␣=␣$3;

␣␣␣␣␣␣␣␣␣␣␣␣$begin␣=~␣tr/\r\n//d;
␣␣␣␣␣␣␣␣␣␣␣␣$output␣.=␣$begin;

␣␣␣␣␣␣␣␣␣␣␣␣#␣decode␣one␣MIME␣word
␣␣␣␣␣␣␣␣␣␣␣␣1␣while␣not␣$stop␣and␣$words␣=~␣s{^(.*?)($re_capture_decode)}{

␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣$output␣.=␣$1;
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣my␣$orig␣=␣$2;
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣my␣$charset␣=␣$3;
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣my␣($mime_enc,␣$text)␣=␣split␣/\?/,␣$5;

␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣$text␣=~␣tr/\r\n//d;

␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣my␣$enc␣=␣Encode::find_mime_encoding($charset);

␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣in␣non␣strict␣mode␣allow␣also␣perl␣encoding␣aliases
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣if␣(␣not␣defined␣$enc␣and␣not␣$STRICT_DECODE␣)␣{
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣make␣sure␣that␣decoded␣string␣will␣be␣always␣strict␣UTF-8
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣$charset␣=␣'UTF-8'␣if␣lc($charset)␣eq␣'utf8';
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣$enc␣=␣Encode::find_encoding($charset);
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣}

␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣if␣(␣not␣defined␣$enc␣)␣{
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣Carp::croak␣qq(Unknown␣charset␣"$charset")␣if␣not␣ref␣$chk␣and␣$chk␣and␣$chk␣&␣Encode::DIE_ON_ERR;
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣Carp::carp␣qq(Unknown␣charset␣"$charset")␣if␣not␣ref␣$chk␣and␣$chk␣and␣$chk␣&␣Encode::WARN_ON_ERR;
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣$stop␣=␣1␣if␣not␣ref␣$chk␣and␣$chk␣and␣$chk␣&␣Encode::RETURN_ON_ERR;
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣$output␣.=␣($output␣=~␣/(?:\A|[␣\t])$/␣?␣''␣:␣'␣')␣.␣$orig␣unless␣$stop;␣#␣$orig␣mime␣word␣is␣separated␣by␣whitespace
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣$stop␣?␣$orig␣:␣'';
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣}␣else␣{
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣if␣(␣uc($mime_enc)␣eq␣'B'␣and␣$obj->{decode_b}␣)␣{
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣my␣$decoded␣=␣_decode_b($enc,␣$text,␣$chk);
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣$stop␣=␣1␣if␣not␣defined␣$decoded␣and␣not␣ref␣$chk␣and␣$chk␣and␣$chk␣&␣Encode::RETURN_ON_ERR;
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣$output␣.=␣(defined␣$decoded␣?␣$decoded␣:␣$text)␣unless␣$stop;
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣$stop␣?␣$orig␣:␣'';
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣}␣elsif␣(␣uc($mime_enc)␣eq␣'Q'␣and␣$obj->{decode_q}␣)␣{
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣my␣$decoded␣=␣_decode_q($enc,␣$text,␣$chk);
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣$stop␣=␣1␣if␣not␣defined␣$decoded␣and␣not␣ref␣$chk␣and␣$chk␣and␣$chk␣&␣Encode::RETURN_ON_ERR;
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣$output␣.=␣(defined␣$decoded␣?␣$decoded␣:␣$text)␣unless␣$stop;
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣$stop␣?␣$orig␣:␣'';
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣}␣else␣{
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣Carp::croak␣qq(MIME␣"$mime_enc"␣unsupported)␣if␣not␣ref␣$chk␣and␣$chk␣and␣$chk␣&␣Encode::DIE_ON_ERR;
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣Carp::carp␣qq(MIME␣"$mime_enc"␣unsupported)␣if␣not␣ref␣$chk␣and␣$chk␣and␣$chk␣&␣Encode::WARN_ON_ERR;
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣$stop␣=␣1␣if␣not␣ref␣$chk␣and␣$chk␣and␣$chk␣&␣Encode::RETURN_ON_ERR;
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣$output␣.=␣($output␣=~␣/(?:\A|[␣\t])$/␣?␣''␣:␣'␣')␣.␣$orig␣unless␣$stop;␣#␣$orig␣mime␣word␣is␣separated␣by␣whitespace
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣$stop␣?␣$orig␣:␣'';
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣}
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣}

␣␣␣␣␣␣␣␣␣␣␣␣}se;

␣␣␣␣␣␣␣␣␣␣␣␣if␣(␣not␣$stop␣)␣{
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣$output␣.=␣$words;
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣$words␣=␣'';
␣␣␣␣␣␣␣␣␣␣␣␣}

␣␣␣␣␣␣␣␣␣␣␣␣$words;

␣␣␣␣␣␣␣␣}se;

␣␣␣␣␣␣␣␣if␣(␣not␣$stop␣)␣{
␣␣␣␣␣␣␣␣␣␣␣␣$line␣=~␣tr/\r\n//d;
␣␣␣␣␣␣␣␣␣␣␣␣$output␣.=␣$line␣.␣$sep;
␣␣␣␣␣␣␣␣␣␣␣␣$line␣=␣'';
␣␣␣␣␣␣␣␣␣␣␣␣$sep␣=␣'';
␣␣␣␣␣␣␣␣}

␣␣␣␣␣␣␣␣$line␣.␣$sep;

␣␣␣␣}se;
----------
Range: (512552,515786) (3234)
=head1␣NAME

IO::File␣-␣supply␣object␣methods␣for␣filehandles

=head1␣SYNOPSIS

␣␣␣␣use␣IO::File;

␣␣␣␣$fh␣=␣IO::File->new();
␣␣␣␣if␣($fh->open("<␣file"))␣{
␣␣␣␣␣␣␣␣print␣<$fh>;
␣␣␣␣␣␣␣␣$fh->close;
␣␣␣␣}

␣␣␣␣$fh␣=␣IO::File->new(">␣file");
␣␣␣␣if␣(defined␣$fh)␣{
␣␣␣␣␣␣␣␣print␣$fh␣"bar\n";
␣␣␣␣␣␣␣␣$fh->close;
␣␣␣␣}

␣␣␣␣$fh␣=␣IO::File->new("file",␣"r");
␣␣␣␣if␣(defined␣$fh)␣{
␣␣␣␣␣␣␣␣print␣<$fh>;
␣␣␣␣␣␣␣␣undef␣$fh;␣␣␣␣␣␣␣#␣automatically␣closes␣the␣file
␣␣␣␣}

␣␣␣␣$fh␣=␣IO::File->new("file",␣O_WRONLY|O_APPEND);
␣␣␣␣if␣(defined␣$fh)␣{
␣␣␣␣␣␣␣␣print␣$fh␣"corge\n";

␣␣␣␣␣␣␣␣$pos␣=␣$fh->getpos;
␣␣␣␣␣␣␣␣$fh->setpos($pos);

␣␣␣␣␣␣␣␣undef␣$fh;␣␣␣␣␣␣␣#␣automatically␣closes␣the␣file
␣␣␣␣}

␣␣␣␣autoflush␣STDOUT␣1;

=head1␣DESCRIPTION

C<IO::File>␣inherits␣from␣C<IO::Handle>␣and␣C<IO::Seekable>.␣It␣extends
these␣classes␣with␣methods␣that␣are␣specific␣to␣file␣handles.

=head1␣CONSTRUCTOR

=over␣4

=item␣new␣(␣FILENAME␣[,MODE␣[,PERMS]]␣)

Creates␣an␣C<IO::File>.␣␣If␣it␣receives␣any␣parameters,␣they␣are␣passed␣to
the␣method␣C<open>;␣if␣the␣open␣fails,␣the␣object␣is␣destroyed.␣␣Otherwise,
it␣is␣returned␣to␣the␣caller.

=item␣new_tmpfile

Creates␣an␣C<IO::File>␣opened␣for␣read/write␣on␣a␣newly␣created␣temporary
file.␣␣On␣systems␣where␣this␣is␣possible,␣the␣temporary␣file␣is␣anonymous
(i.e.␣it␣is␣unlinked␣after␣creation,␣but␣held␣open).␣␣If␣the␣temporary
file␣cannot␣be␣created␣or␣opened,␣the␣C<IO::File>␣object␣is␣destroyed.
Otherwise,␣it␣is␣returned␣to␣the␣caller.

=back

=head1␣METHODS

=over␣4

=item␣open(␣FILENAME␣[,MODE␣[,PERMS]]␣)

=item␣open(␣FILENAME,␣IOLAYERS␣)

C<open>␣accepts␣one,␣two␣or␣three␣parameters.␣␣With␣one␣parameter,
it␣is␣just␣a␣front␣end␣for␣the␣built-in␣C<open>␣function.␣␣With␣two␣or␣three
parameters,␣the␣first␣parameter␣is␣a␣filename␣that␣may␣include
whitespace␣or␣other␣special␣characters,␣and␣the␣second␣parameter␣is
the␣open␣mode,␣optionally␣followed␣by␣a␣file␣permission␣value.

If␣C<IO::File::open>␣receives␣a␣Perl␣mode␣string␣("E<gt>",␣"+E<lt>",␣etc.)
or␣an␣ANSI␣C␣fopen()␣mode␣string␣("w",␣"r+",␣etc.),␣it␣uses␣the␣basic
Perl␣C<open>␣operator␣(but␣protects␣any␣special␣characters).

If␣C<IO::File::open>␣is␣given␣a␣numeric␣mode,␣it␣passes␣that␣mode
and␣the␣optional␣permissions␣value␣to␣the␣Perl␣C<sysopen>␣operator.
The␣permissions␣default␣to␣0666.

If␣C<IO::File::open>␣is␣given␣a␣mode␣that␣includes␣the␣C<:>␣character,
it␣passes␣all␣the␣three␣arguments␣to␣the␣three-argument␣C<open>␣operator.

For␣convenience,␣C<IO::File>␣exports␣the␣O_XXX␣constants␣from␣the
Fcntl␣module,␣if␣this␣module␣is␣available.

=item␣binmode(␣[LAYER]␣)

C<binmode>␣sets␣C<binmode>␣on␣the␣underlying␣C<IO>␣object,␣as␣documented
in␣C<perldoc␣-f␣binmode>.

C<binmode>␣accepts␣one␣optional␣parameter,␣which␣is␣the␣layer␣to␣be
passed␣on␣to␣the␣C<binmode>␣call.

=back

=head1␣NOTE

Some␣operating␣systems␣may␣perform␣␣C<IO::File::new()>␣or␣C<IO::File::open()>
on␣a␣directory␣without␣errors.␣␣This␣behavior␣is␣not␣portable␣and␣not
suggested␣for␣use.␣␣Using␣C<opendir()>␣and␣C<readdir()>␣or␣C<IO::Dir>␣are
suggested␣instead.

=head1␣SEE␣ALSO

L<perlfunc>,␣
L<perlop/"I/O␣Operators">,
L<IO::Handle>,
L<IO::Seekable>,
L<IO::Dir>

=head1␣HISTORY

Derived␣from␣FileHandle.pm␣by␣Graham␣Barr␣E<lt>F<gbarr@pobox.com>E<gt>.

=cut
----------
Range: (527421,536358) (8937)
=head1␣NAME

IO::Handle␣-␣supply␣object␣methods␣for␣I/O␣handles

=head1␣SYNOPSIS

␣␣␣␣use␣IO::Handle;

␣␣␣␣$io␣=␣IO::Handle->new();
␣␣␣␣if␣($io->fdopen(fileno(STDIN),"r"))␣{
␣␣␣␣␣␣␣␣print␣$io->getline;
␣␣␣␣␣␣␣␣$io->close;
␣␣␣␣}

␣␣␣␣$io␣=␣IO::Handle->new();
␣␣␣␣if␣($io->fdopen(fileno(STDOUT),"w"))␣{
␣␣␣␣␣␣␣␣$io->print("Some␣text\n");
␣␣␣␣}

␣␣␣␣#␣setvbuf␣is␣not␣available␣by␣default␣on␣Perls␣5.8.0␣and␣later.
␣␣␣␣use␣IO::Handle␣'_IOLBF';
␣␣␣␣$io->setvbuf($buffer_var,␣_IOLBF,␣1024);

␣␣␣␣undef␣$io;␣␣␣␣␣␣␣#␣automatically␣closes␣the␣file␣if␣it's␣open

␣␣␣␣autoflush␣STDOUT␣1;

=head1␣DESCRIPTION

C<IO::Handle>␣is␣the␣base␣class␣for␣all␣other␣IO␣handle␣classes.␣It␣is
not␣intended␣that␣objects␣of␣C<IO::Handle>␣would␣be␣created␣directly,
but␣instead␣C<IO::Handle>␣is␣inherited␣from␣by␣several␣other␣classes
in␣the␣IO␣hierarchy.

If␣you␣are␣reading␣this␣documentation,␣looking␣for␣a␣replacement␣for
the␣C<FileHandle>␣package,␣then␣I␣suggest␣you␣read␣the␣documentation
for␣C<IO::File>␣too.

=head1␣CONSTRUCTOR

=over␣4

=item␣new␣()

Creates␣a␣new␣C<IO::Handle>␣object.

=item␣new_from_fd␣(␣FD,␣MODE␣)

Creates␣an␣C<IO::Handle>␣like␣C<new>␣does.
It␣requires␣two␣parameters,␣which␣are␣passed␣to␣the␣method␣C<fdopen>;
if␣the␣fdopen␣fails,␣the␣object␣is␣destroyed.␣Otherwise,␣it␣is␣returned
to␣the␣caller.

=back

=head1␣METHODS

See␣L<perlfunc>␣for␣complete␣descriptions␣of␣each␣of␣the␣following
supported␣C<IO::Handle>␣methods,␣which␣are␣just␣front␣ends␣for␣the
corresponding␣built-in␣functions:

␣␣␣␣$io->close
␣␣␣␣$io->eof
␣␣␣␣$io->fcntl(␣FUNCTION,␣SCALAR␣)
␣␣␣␣$io->fileno
␣␣␣␣$io->format_write(␣[FORMAT_NAME]␣)
␣␣␣␣$io->getc
␣␣␣␣$io->ioctl(␣FUNCTION,␣SCALAR␣)
␣␣␣␣$io->read␣(␣BUF,␣LEN,␣[OFFSET]␣)
␣␣␣␣$io->print␣(␣ARGS␣)
␣␣␣␣$io->printf␣(␣FMT,␣[ARGS]␣)
␣␣␣␣$io->say␣(␣ARGS␣)
␣␣␣␣$io->stat
␣␣␣␣$io->sysread␣(␣BUF,␣LEN,␣[OFFSET]␣)
␣␣␣␣$io->syswrite␣(␣BUF,␣[LEN,␣[OFFSET]]␣)
␣␣␣␣$io->truncate␣(␣LEN␣)

See␣L<perlvar>␣for␣complete␣descriptions␣of␣each␣of␣the␣following
supported␣C<IO::Handle>␣methods.␣␣All␣of␣them␣return␣the␣previous
value␣of␣the␣attribute␣and␣takes␣an␣optional␣single␣argument␣that␣when
given␣will␣set␣the␣value.␣␣If␣no␣argument␣is␣given␣the␣previous␣value
is␣unchanged␣(except␣for␣$io->autoflush␣will␣actually␣turn␣ON
autoflush␣by␣default).

␣␣␣␣$io->autoflush␣(␣[BOOL]␣)␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣$|
␣␣␣␣$io->format_page_number(␣[NUM]␣)␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣$%
␣␣␣␣$io->format_lines_per_page(␣[NUM]␣)␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣$=
␣␣␣␣$io->format_lines_left(␣[NUM]␣)␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣$-
␣␣␣␣$io->format_name(␣[STR]␣)␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣$~
␣␣␣␣$io->format_top_name(␣[STR]␣)␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣$^
␣␣␣␣$io->input_line_number(␣[NUM])␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣$.

The␣following␣methods␣are␣not␣supported␣on␣a␣per-filehandle␣basis.

␣␣␣␣IO::Handle->format_line_break_characters(␣[STR]␣)␣$:
␣␣␣␣IO::Handle->format_formfeed(␣[STR])␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣$^L
␣␣␣␣IO::Handle->output_field_separator(␣[STR]␣)␣␣␣␣␣␣␣$,
␣␣␣␣IO::Handle->output_record_separator(␣[STR]␣)␣␣␣␣␣␣$\

␣␣␣␣IO::Handle->input_record_separator(␣[STR]␣)␣␣␣␣␣␣␣$/

Furthermore,␣for␣doing␣normal␣I/O␣you␣might␣need␣these:

=over␣4

=item␣$io->fdopen␣(␣FD,␣MODE␣)

C<fdopen>␣is␣like␣an␣ordinary␣C<open>␣except␣that␣its␣first␣parameter
is␣not␣a␣filename␣but␣rather␣a␣file␣handle␣name,␣an␣IO::Handle␣object,
or␣a␣file␣descriptor␣number.␣␣(For␣the␣documentation␣of␣the␣C<open>
method,␣see␣L<IO::File>.)

=item␣$io->opened

Returns␣true␣if␣the␣object␣is␣currently␣a␣valid␣file␣descriptor,␣false
otherwise.

=item␣$io->getline

This␣works␣like␣<$io>␣described␣in␣L<perlop/"I/O␣Operators">
except␣that␣it's␣more␣readable␣and␣can␣be␣safely␣called␣in␣a
list␣context␣but␣still␣returns␣just␣one␣line.␣␣If␣used␣as␣the␣conditional
within␣a␣C<while>␣or␣C-style␣C<for>␣loop,␣however,␣you␣will␣need␣to
emulate␣the␣functionality␣of␣<$io>␣with␣C<<␣defined($_␣=␣$io->getline)␣>>.

=item␣$io->getlines

This␣works␣like␣<$io>␣when␣called␣in␣a␣list␣context␣to␣read␣all
the␣remaining␣lines␣in␣a␣file,␣except␣that␣it's␣more␣readable.
It␣will␣also␣croak()␣if␣accidentally␣called␣in␣a␣scalar␣context.

=item␣$io->ungetc␣(␣ORD␣)

Pushes␣a␣character␣with␣the␣given␣ordinal␣value␣back␣onto␣the␣given
handle's␣input␣stream.␣␣Only␣one␣character␣of␣pushback␣per␣handle␣is
guaranteed.

=item␣$io->write␣(␣BUF,␣LEN␣[,␣OFFSET␣]␣)

This␣C<write>␣is␣somewhat␣like␣C<write>␣found␣in␣C,␣in␣that␣it␣is␣the
opposite␣of␣read.␣The␣wrapper␣for␣the␣perl␣C<write>␣function␣is
called␣C<format_write>.␣However,␣whilst␣the␣C␣C<write>␣function␣returns
the␣number␣of␣bytes␣written,␣this␣C<write>␣function␣simply␣returns␣true
if␣successful␣(like␣C<print>).␣A␣more␣C-like␣C<write>␣is␣C<syswrite>
(see␣above).

=item␣$io->error

Returns␣a␣true␣value␣if␣the␣given␣handle␣has␣experienced␣any␣errors
since␣it␣was␣opened␣or␣since␣the␣last␣call␣to␣C<clearerr>,␣or␣if␣the
handle␣is␣invalid.␣It␣only␣returns␣false␣for␣a␣valid␣handle␣with␣no
outstanding␣errors.

=item␣$io->clearerr

Clear␣the␣given␣handle's␣error␣indicator.␣Returns␣-1␣if␣the␣handle␣is
invalid,␣0␣otherwise.

=item␣$io->sync

C<sync>␣synchronizes␣a␣file's␣in-memory␣state␣␣with␣␣that␣␣on␣the
physical␣medium.␣C<sync>␣does␣not␣operate␣at␣the␣perlio␣api␣level,␣but
operates␣on␣the␣file␣descriptor␣(similar␣to␣sysread,␣sysseek␣and
systell).␣This␣means␣that␣any␣data␣held␣at␣the␣perlio␣api␣level␣will␣not
be␣synchronized.␣To␣synchronize␣data␣that␣is␣buffered␣at␣the␣perlio␣api
level␣you␣must␣use␣the␣flush␣method.␣C<sync>␣is␣not␣implemented␣on␣all
platforms.␣Returns␣"0␣but␣true"␣on␣success,␣C<undef>␣on␣error,␣C<undef>
for␣an␣invalid␣handle.␣See␣L<fsync(3c)>.

=item␣$io->flush

C<flush>␣causes␣perl␣to␣flush␣any␣buffered␣data␣at␣the␣perlio␣api␣level.
Any␣unread␣data␣in␣the␣buffer␣will␣be␣discarded,␣and␣any␣unwritten␣data
will␣be␣written␣to␣the␣underlying␣file␣descriptor.␣Returns␣"0␣but␣true"
on␣success,␣C<undef>␣on␣error.

=item␣$io->printflush␣(␣ARGS␣)

Turns␣on␣autoflush,␣print␣ARGS␣and␣then␣restores␣the␣autoflush␣status␣of␣the
C<IO::Handle>␣object.␣Returns␣the␣return␣value␣from␣print.

=item␣$io->blocking␣(␣[␣BOOL␣]␣)

If␣called␣with␣an␣argument␣C<blocking>␣will␣turn␣on␣non-blocking␣IO␣if
C<BOOL>␣is␣false,␣and␣turn␣it␣off␣if␣C<BOOL>␣is␣true.

C<blocking>␣will␣return␣the␣value␣of␣the␣previous␣setting,␣or␣the
current␣setting␣if␣C<BOOL>␣is␣not␣given.␣

If␣an␣error␣occurs␣C<blocking>␣will␣return␣undef␣and␣C<$!>␣will␣be␣set.

=back


If␣the␣C␣functions␣setbuf()␣and/or␣setvbuf()␣are␣available,␣then
C<IO::Handle::setbuf>␣and␣C<IO::Handle::setvbuf>␣set␣the␣buffering
policy␣for␣an␣IO::Handle.␣␣The␣calling␣sequences␣for␣the␣Perl␣functions
are␣the␣same␣as␣their␣C␣counterparts--including␣the␣constants␣C<_IOFBF>,
C<_IOLBF>,␣and␣C<_IONBF>␣for␣setvbuf()--except␣that␣the␣buffer␣parameter
specifies␣a␣scalar␣variable␣to␣use␣as␣a␣buffer.␣You␣should␣only
change␣the␣buffer␣before␣any␣I/O,␣or␣immediately␣after␣calling␣flush.

WARNING:␣The␣IO::Handle::setvbuf()␣is␣not␣available␣by␣default␣on
Perls␣5.8.0␣and␣later␣because␣setvbuf()␣is␣rather␣specific␣to␣using
the␣stdio␣library,␣while␣Perl␣prefers␣the␣new␣perlio␣subsystem␣instead.

WARNING:␣A␣variable␣used␣as␣a␣buffer␣by␣C<setbuf>␣or␣C<setvbuf>␣B<must␣not
be␣modified>␣in␣any␣way␣until␣the␣IO::Handle␣is␣closed␣or␣C<setbuf>␣or
C<setvbuf>␣is␣called␣again,␣or␣memory␣corruption␣may␣result!␣Remember␣that
the␣order␣of␣global␣destruction␣is␣undefined,␣so␣even␣if␣your␣buffer
variable␣remains␣in␣scope␣until␣program␣termination,␣it␣may␣be␣undefined
before␣the␣file␣IO::Handle␣is␣closed.␣Note␣that␣you␣need␣to␣import␣the
constants␣C<_IOFBF>,␣C<_IOLBF>,␣and␣C<_IONBF>␣explicitly.␣Like␣C,␣setbuf
returns␣nothing.␣setvbuf␣returns␣"0␣but␣true",␣on␣success,␣C<undef>␣on
failure.

Lastly,␣there␣is␣a␣special␣method␣for␣working␣under␣B<-T>␣and␣setuid/gid
scripts:

=over␣4

=item␣$io->untaint

Marks␣the␣object␣as␣taint-clean,␣and␣as␣such␣data␣read␣from␣it␣will␣also
be␣considered␣taint-clean.␣Note␣that␣this␣is␣a␣very␣trusting␣action␣to
take,␣and␣appropriate␣consideration␣for␣the␣data␣source␣and␣potential
vulnerability␣should␣be␣kept␣in␣mind.␣Returns␣0␣on␣success,␣-1␣if␣setting
the␣taint-clean␣flag␣failed.␣(eg␣invalid␣handle)

=back

=head1␣NOTE

An␣C<IO::Handle>␣object␣is␣a␣reference␣to␣a␣symbol/GLOB␣reference␣(see
the␣C<Symbol>␣package).␣␣Some␣modules␣that
inherit␣from␣C<IO::Handle>␣may␣want␣to␣keep␣object␣related␣variables
in␣the␣hash␣table␣part␣of␣the␣GLOB.␣In␣an␣attempt␣to␣prevent␣modules
trampling␣on␣each␣other␣I␣propose␣the␣that␣any␣such␣module␣should␣prefix
its␣variables␣with␣its␣own␣name␣separated␣by␣_'s.␣For␣example␣the␣IO::Socket
module␣keeps␣a␣C<timeout>␣variable␣in␣'io_socket_timeout'.

=head1␣SEE␣ALSO

L<perlfunc>,␣
L<perlop/"I/O␣Operators">,
L<IO::File>

=head1␣BUGS

Due␣to␣backwards␣compatibility,␣all␣filehandles␣resemble␣objects
of␣class␣C<IO::Handle>,␣or␣actually␣classes␣derived␣from␣that␣class.
They␣actually␣aren't.␣␣Which␣means␣you␣can't␣derive␣your␣own␣
class␣from␣C<IO::Handle>␣and␣inherit␣those␣methods.

=head1␣HISTORY

Derived␣from␣FileHandle.pm␣by␣Graham␣Barr␣E<lt>F<gbarr@pobox.com>E<gt>

=cut
----------
Range: (544067,546314) (2247)
=head1␣NAME

IO::Seekable␣-␣supply␣seek␣based␣methods␣for␣I/O␣objects

=head1␣SYNOPSIS

␣␣␣␣use␣IO::Seekable;
␣␣␣␣package␣IO::Something;
␣␣␣␣@ISA␣=␣qw(IO::Seekable);

=head1␣DESCRIPTION

C<IO::Seekable>␣does␣not␣have␣a␣constructor␣of␣its␣own␣as␣it␣is␣intended␣to
be␣inherited␣by␣other␣C<IO::Handle>␣based␣objects.␣It␣provides␣methods
which␣allow␣seeking␣of␣the␣file␣descriptors.

=over␣4

=item␣$io->getpos

Returns␣an␣opaque␣value␣that␣represents␣the␣current␣position␣of␣the
IO::File,␣or␣C<undef>␣if␣this␣is␣not␣possible␣(eg␣an␣unseekable␣stream␣such
as␣a␣terminal,␣pipe␣or␣socket).␣If␣the␣fgetpos()␣function␣is␣available␣in
your␣C␣library␣it␣is␣used␣to␣implements␣getpos,␣else␣perl␣emulates␣getpos
using␣C's␣ftell()␣function.

=item␣$io->setpos

Uses␣the␣value␣of␣a␣previous␣getpos␣call␣to␣return␣to␣a␣previously␣visited
position.␣Returns␣"0␣but␣true"␣on␣success,␣C<undef>␣on␣failure.

=back

See␣L<perlfunc>␣for␣complete␣descriptions␣of␣each␣of␣the␣following
supported␣C<IO::Seekable>␣methods,␣which␣are␣just␣front␣ends␣for␣the
corresponding␣built-in␣functions:

=over␣4

=item␣$io->seek␣(␣POS,␣WHENCE␣)

Seek␣the␣IO::File␣to␣position␣POS,␣relative␣to␣WHENCE:

=over␣8

=item␣WHENCE=0␣(SEEK_SET)

POS␣is␣absolute␣position.␣(Seek␣relative␣to␣the␣start␣of␣the␣file)

=item␣WHENCE=1␣(SEEK_CUR)

POS␣is␣an␣offset␣from␣the␣current␣position.␣(Seek␣relative␣to␣current)

=item␣WHENCE=2␣(SEEK_END)

POS␣is␣an␣offset␣from␣the␣end␣of␣the␣file.␣(Seek␣relative␣to␣end)

=back

The␣SEEK_*␣constants␣can␣be␣imported␣from␣the␣C<Fcntl>␣module␣if␣you
don't␣wish␣to␣use␣the␣numbers␣C<0>␣C<1>␣or␣C<2>␣in␣your␣code.

Returns␣C<1>␣upon␣success,␣C<0>␣otherwise.

=item␣$io->sysseek(␣POS,␣WHENCE␣)

Similar␣to␣$io->seek,␣but␣sets␣the␣IO::File's␣position␣using␣the␣system
call␣lseek(2)␣directly,␣so␣will␣confuse␣most␣perl␣IO␣operators␣except
sysread␣and␣syswrite␣(see␣L<perlfunc>␣for␣full␣details)

Returns␣the␣new␣position,␣or␣C<undef>␣on␣failure.␣␣A␣position
of␣zero␣is␣returned␣as␣the␣string␣C<"0␣but␣true">

=item␣$io->tell

Returns␣the␣IO::File's␣current␣position,␣or␣-1␣on␣error.

=back

=head1␣SEE␣ALSO

L<perlfunc>,␣
L<perlop/"I/O␣Operators">,
L<IO::Handle>
L<IO::File>

=head1␣HISTORY

Derived␣from␣FileHandle.pm␣by␣Graham␣Barr␣E<lt>gbarr@pobox.comE<gt>

=cut
----------
Range: (573056,580780) (7724)
=head2␣reduce

␣␣␣␣$result␣=␣reduce␣{␣BLOCK␣}␣@list

Reduces␣C<@list>␣by␣calling␣C<BLOCK_>␣in␣a␣scalar␣context␣multiple␣times,
setting␣C<$a>␣and␣C<$b>␣each␣time.␣The␣first␣call␣will␣be␣with␣C<$a>␣and␣C<$b>
set␣to␣the␣first␣two␣elements␣of␣the␣list,␣subsequent␣calls␣will␣be␣done␣by
setting␣C<$a>␣to␣the␣result␣of␣the␣previous␣call␣and␣C<$b>␣to␣the␣next␣element
in␣the␣list.

Returns␣the␣result␣of␣the␣last␣call␣to␣the␣C<BLOCK_>.␣If␣C<@list>␣is␣empty␣then
C<undef>␣is␣returned.␣If␣C<@list>␣only␣contains␣one␣element␣then␣that␣element
is␣returned␣and␣C<BLOCK_>␣is␣not␣executed.

The␣following␣examples␣all␣demonstrate␣how␣C<reduce>␣could␣be␣used␣to␣implement
the␣other␣list-reduction␣functions␣in␣this␣module.␣(They␣are␣not␣in␣fact
implemented␣like␣this,␣but␣instead␣in␣a␣more␣efficient␣manner␣in␣individual␣C
functions).

␣␣␣␣$foo␣=␣reduce␣{␣defined($a)␣␣␣␣␣␣␣␣␣␣␣␣?␣$a␣:
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣$code->(local␣$_␣=␣$b)␣?␣$b␣:
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣undef␣}␣undef,␣@list␣#␣first

␣␣␣␣$foo␣=␣reduce␣{␣$a␣>␣$b␣?␣$a␣:␣$b␣}␣1..10␣␣␣␣␣␣␣#␣max
␣␣␣␣$foo␣=␣reduce␣{␣$a␣gt␣$b␣?␣$a␣:␣$b␣}␣'A'..'Z'␣␣␣#␣maxstr
␣␣␣␣$foo␣=␣reduce␣{␣$a␣<␣$b␣?␣$a␣:␣$b␣}␣1..10␣␣␣␣␣␣␣#␣min
␣␣␣␣$foo␣=␣reduce␣{␣$a␣lt␣$b␣?␣$a␣:␣$b␣}␣'aa'..'zz'␣#␣minstr
␣␣␣␣$foo␣=␣reduce␣{␣$a␣+␣$b␣}␣1␣..␣10␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣sum
␣␣␣␣$foo␣=␣reduce␣{␣$a␣.␣$b␣}␣@bar␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣concat

␣␣␣␣$foo␣=␣reduce␣{␣$a␣||␣$code->(local␣$_␣=␣$b)␣}␣0,␣@bar␣␣␣#␣any
␣␣␣␣$foo␣=␣reduce␣{␣$a␣&&␣$code->(local␣$_␣=␣$b)␣}␣1,␣@bar␣␣␣#␣all
␣␣␣␣$foo␣=␣reduce␣{␣$a␣&&␣!$code->(local␣$_␣=␣$b)␣}␣1,␣@bar␣␣#␣none
␣␣␣␣$foo␣=␣reduce␣{␣$a␣||␣!$code->(local␣$_␣=␣$b)␣}␣0,␣@bar␣␣#␣notall
␣␣␣␣␣␣␣#␣Note␣that␣these␣implementations␣do␣not␣fully␣short-circuit

If␣your␣algorithm␣requires␣that␣C<reduce>␣produce␣an␣identity␣value,␣then␣make
sure␣that␣you␣always␣pass␣that␣identity␣value␣as␣the␣first␣argument␣to␣prevent
C<undef>␣being␣returned

␣␣$foo␣=␣reduce␣{␣$a␣+␣$b␣}␣0,␣@values;␣␣␣␣␣␣␣␣␣␣␣␣␣#␣sum␣with␣0␣identity␣value

The␣above␣example␣code␣blocks␣also␣suggest␣how␣to␣use␣C<reduce>␣to␣build␣a
more␣efficient␣combined␣version␣of␣one␣of␣these␣basic␣functions␣and␣a␣C<map>
block.␣For␣example,␣to␣find␣the␣total␣length␣of␣all␣the␣strings␣in␣a␣list,
we␣could␣use

␣␣␣␣$total␣=␣sum␣map␣{␣length␣}␣@strings;

However,␣this␣produces␣a␣list␣of␣temporary␣integer␣values␣as␣long␣as␣the
original␣list␣of␣strings,␣only␣to␣reduce␣it␣down␣to␣a␣single␣value␣again.␣We
can␣compute␣the␣same␣result␣more␣efficiently␣by␣using␣C<reduce>␣with␣a␣code
block␣that␣accumulates␣lengths␣by␣writing␣this␣instead␣as:

␣␣␣␣$total␣=␣reduce␣{␣$a␣+␣length␣$b␣}␣0,␣@strings

The␣other␣scalar-returning␣list␣reduction␣functions␣are␣all␣specialisations␣of
this␣generic␣idea.

=head2␣reductions

␣␣␣␣@results␣=␣reductions␣{␣BLOCK␣}␣@list

I<Since␣version␣1.54.>

Similar␣to␣C<reduce>␣except␣that␣it␣also␣returns␣the␣intermediate␣values␣along
with␣the␣final␣result.␣As␣before,␣C<$a>␣is␣set␣to␣the␣first␣element␣of␣the
given␣list,␣and␣the␣C<BLOCK_>␣is␣then␣called␣once␣for␣remaining␣item␣in␣the
list␣set␣into␣C<$b>,␣with␣the␣result␣being␣captured␣for␣return␣as␣well␣as
becoming␣the␣new␣value␣for␣C<$a>.

The␣returned␣list␣will␣begin␣with␣the␣initial␣value␣for␣C<$a>,␣followed␣by
each␣return␣value␣from␣the␣block␣in␣order.␣The␣final␣value␣of␣the␣result␣will
be␣identical␣to␣what␣the␣C<reduce>␣function␣would␣have␣returned␣given␣the␣same
block␣and␣list.

␣␣␣␣reduce␣␣␣␣␣{␣"$a-$b"␣}␣␣"a".."d"␣␣␣␣#␣"a-b-c-d"
␣␣␣␣reductions␣{␣"$a-$b"␣}␣␣"a".."d"␣␣␣␣#␣"a",␣"a-b",␣"a-b-c",␣"a-b-c-d"

=head2␣any

␣␣␣␣my␣$bool␣=␣any␣{␣BLOCK␣}␣@list;

I<Since␣version␣1.33.>

Similar␣to␣C<grep>␣in␣that␣it␣evaluates␣C<BLOCK_>␣setting␣C<$_>␣to␣each␣element
of␣C<@list>␣in␣turn.␣C<any>␣returns␣true␣if␣any␣element␣makes␣the␣C<BLOCK_>
return␣a␣true␣value.␣If␣C<BLOCK_>␣never␣returns␣true␣or␣C<@list>␣was␣empty␣then
it␣returns␣false.

Many␣cases␣of␣using␣C<grep>␣in␣a␣conditional␣can␣be␣written␣using␣C<any>
instead,␣as␣it␣can␣short-circuit␣after␣the␣first␣true␣result.

␣␣␣␣if(␣any␣{␣length␣>␣10␣}␣@strings␣)␣{
␣␣␣␣␣␣␣␣#␣at␣least␣one␣string␣has␣more␣than␣10␣characters
␣␣␣␣}

Note:␣Due␣to␣XS␣issues␣the␣block␣passed␣may␣be␣able␣to␣access␣the␣outer␣@_
directly.␣This␣is␣not␣intentional␣and␣will␣break␣under␣debugger.

=head2␣all

␣␣␣␣my␣$bool␣=␣all␣{␣BLOCK␣}␣@list;

I<Since␣version␣1.33.>

Similar␣to␣L</any>,␣except␣that␣it␣requires␣all␣elements␣of␣the␣C<@list>␣to
make␣the␣C<BLOCK_>␣return␣true.␣If␣any␣element␣returns␣false,␣then␣it␣returns
false.␣If␣the␣C<BLOCK_>␣never␣returns␣false␣or␣the␣C<@list>␣was␣empty␣then␣it
returns␣true.

Note:␣Due␣to␣XS␣issues␣the␣block␣passed␣may␣be␣able␣to␣access␣the␣outer␣@_
directly.␣This␣is␣not␣intentional␣and␣will␣break␣under␣debugger.

=head2␣none

=head2␣notall

␣␣␣␣my␣$bool␣=␣none␣{␣BLOCK␣}␣@list;

␣␣␣␣my␣$bool␣=␣notall␣{␣BLOCK␣}␣@list;

I<Since␣version␣1.33.>

Similar␣to␣L</any>␣and␣L</all>,␣but␣with␣the␣return␣sense␣inverted.␣C<none>
returns␣true␣only␣if␣no␣value␣in␣the␣C<@list>␣causes␣the␣C<BLOCK_>␣to␣return
true,␣and␣C<notall>␣returns␣true␣only␣if␣not␣all␣of␣the␣values␣do.

Note:␣Due␣to␣XS␣issues␣the␣block␣passed␣may␣be␣able␣to␣access␣the␣outer␣@_
directly.␣This␣is␣not␣intentional␣and␣will␣break␣under␣debugger.

=head2␣first

␣␣␣␣my␣$val␣=␣first␣{␣BLOCK␣}␣@list;

Similar␣to␣C<grep>␣in␣that␣it␣evaluates␣C<BLOCK_>␣setting␣C<$_>␣to␣each␣element
of␣C<@list>␣in␣turn.␣C<first>␣returns␣the␣first␣element␣where␣the␣result␣from
C<BLOCK_>␣is␣a␣true␣value.␣If␣C<BLOCK_>␣never␣returns␣true␣or␣C<@list>␣was␣empty
then␣C<undef>␣is␣returned.

␣␣␣␣$foo␣=␣first␣{␣defined($_)␣}␣@list␣␣␣␣#␣first␣defined␣value␣in␣@list
␣␣␣␣$foo␣=␣first␣{␣$_␣>␣$value␣}␣@list␣␣␣␣#␣first␣value␣in␣@list␣which
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣is␣greater␣than␣$value

=head2␣max

␣␣␣␣my␣$num␣=␣max␣@list;

Returns␣the␣entry␣in␣the␣list␣with␣the␣highest␣numerical␣value.␣If␣the␣list␣is
empty␣then␣C<undef>␣is␣returned.

␣␣␣␣$foo␣=␣max␣1..10␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣10
␣␣␣␣$foo␣=␣max␣3,9,12␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣12
␣␣␣␣$foo␣=␣max␣@bar,␣@baz␣␣␣␣␣␣␣␣␣␣␣#␣whatever

=head2␣maxstr

␣␣␣␣my␣$str␣=␣maxstr␣@list;

Similar␣to␣L</max>,␣but␣treats␣all␣the␣entries␣in␣the␣list␣as␣strings␣and
returns␣the␣highest␣string␣as␣defined␣by␣the␣C<gt>␣operator.␣If␣the␣list␣is
empty␣then␣C<undef>␣is␣returned.

␣␣␣␣$foo␣=␣maxstr␣'A'..'Z'␣␣␣␣␣␣␣␣␣␣#␣'Z'
␣␣␣␣$foo␣=␣maxstr␣"hello","world"␣␣␣#␣"world"
␣␣␣␣$foo␣=␣maxstr␣@bar,␣@baz␣␣␣␣␣␣␣␣#␣whatever

=head2␣min

␣␣␣␣my␣$num␣=␣min␣@list;

Similar␣to␣L</max>␣but␣returns␣the␣entry␣in␣the␣list␣with␣the␣lowest␣numerical
value.␣If␣the␣list␣is␣empty␣then␣C<undef>␣is␣returned.

␣␣␣␣$foo␣=␣min␣1..10␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣1
␣␣␣␣$foo␣=␣min␣3,9,12␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣3
␣␣␣␣$foo␣=␣min␣@bar,␣@baz␣␣␣␣␣␣␣␣␣␣␣#␣whatever

=head2␣minstr

␣␣␣␣my␣$str␣=␣minstr␣@list;

Similar␣to␣L</min>,␣but␣treats␣all␣the␣entries␣in␣the␣list␣as␣strings␣and
returns␣the␣lowest␣string␣as␣defined␣by␣the␣C<lt>␣operator.␣If␣the␣list␣is
empty␣then␣C<undef>␣is␣returned.

␣␣␣␣$foo␣=␣minstr␣'A'..'Z'␣␣␣␣␣␣␣␣␣␣#␣'A'
␣␣␣␣$foo␣=␣minstr␣"hello","world"␣␣␣#␣"hello"
␣␣␣␣$foo␣=␣minstr␣@bar,␣@baz␣␣␣␣␣␣␣␣#␣whatever

=head2␣product

␣␣␣␣my␣$num␣=␣product␣@list;

I<Since␣version␣1.35.>

Returns␣the␣numerical␣product␣of␣all␣the␣elements␣in␣C<@list>.␣If␣C<@list>␣is
empty␣then␣C<1>␣is␣returned.

␣␣␣␣$foo␣=␣product␣1..10␣␣␣␣␣␣␣␣␣␣␣␣#␣3628800
␣␣␣␣$foo␣=␣product␣3,9,12␣␣␣␣␣␣␣␣␣␣␣#␣324

=head2␣sum

␣␣␣␣my␣$num_or_undef␣=␣sum␣@list;

Returns␣the␣numerical␣sum␣of␣all␣the␣elements␣in␣C<@list>.␣For␣backwards
compatibility,␣if␣C<@list>␣is␣empty␣then␣C<undef>␣is␣returned.

␣␣␣␣$foo␣=␣sum␣1..10␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣55
␣␣␣␣$foo␣=␣sum␣3,9,12␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣24
␣␣␣␣$foo␣=␣sum␣@bar,␣@baz␣␣␣␣␣␣␣␣␣␣␣#␣whatever

=head2␣sum0

␣␣␣␣my␣$num␣=␣sum0␣@list;

I<Since␣version␣1.26.>

Similar␣to␣L</sum>,␣except␣this␣returns␣0␣when␣given␣an␣empty␣list,␣rather
than␣C<undef>.

=cut
----------
Range: (582184,587480) (5296)
=head2␣pairs

␣␣␣␣my␣@pairs␣=␣pairs␣@kvlist;

I<Since␣version␣1.29.>

A␣convenient␣shortcut␣to␣operating␣on␣even-sized␣lists␣of␣pairs,␣this␣function
returns␣a␣list␣of␣C<ARRAY>␣references,␣each␣containing␣two␣items␣from␣the
given␣list.␣It␣is␣a␣more␣efficient␣version␣of

␣␣␣␣@pairs␣=␣pairmap␣{␣[␣$a,␣$b␣]␣}␣@kvlist

It␣is␣most␣convenient␣to␣use␣in␣a␣C<foreach>␣loop,␣for␣example:

␣␣␣␣foreach␣my␣$pair␣(␣pairs␣@kvlist␣)␣{
␣␣␣␣␣␣␣my␣(␣$key,␣$value␣)␣=␣@$pair;
␣␣␣␣␣␣␣...
␣␣␣␣}

Since␣version␣C<1.39>␣these␣C<ARRAY>␣references␣are␣blessed␣objects,
recognising␣the␣two␣methods␣C<key>␣and␣C<value>.␣The␣following␣code␣is
equivalent:

␣␣␣␣foreach␣my␣$pair␣(␣pairs␣@kvlist␣)␣{
␣␣␣␣␣␣␣my␣$key␣␣␣=␣$pair->key;
␣␣␣␣␣␣␣my␣$value␣=␣$pair->value;
␣␣␣␣␣␣␣...
␣␣␣␣}

Since␣version␣C<1.51>␣they␣also␣have␣a␣C<TO_JSON>␣method␣to␣ease
serialisation.

=head2␣unpairs

␣␣␣␣my␣@kvlist␣=␣unpairs␣@pairs

I<Since␣version␣1.42.>

The␣inverse␣function␣to␣C<pairs>;␣this␣function␣takes␣a␣list␣of␣C<ARRAY>
references␣containing␣two␣elements␣each,␣and␣returns␣a␣flattened␣list␣of␣the
two␣values␣from␣each␣of␣the␣pairs,␣in␣order.␣This␣is␣notionally␣equivalent␣to

␣␣␣␣my␣@kvlist␣=␣map␣{␣@{$_}[0,1]␣}␣@pairs

except␣that␣it␣is␣implemented␣more␣efficiently␣internally.␣Specifically,␣for
any␣input␣item␣it␣will␣extract␣exactly␣two␣values␣for␣the␣output␣list;␣using
C<undef>␣if␣the␣input␣array␣references␣are␣short.

Between␣C<pairs>␣and␣C<unpairs>,␣a␣higher-order␣list␣function␣can␣be␣used␣to
operate␣on␣the␣pairs␣as␣single␣scalars;␣such␣as␣the␣following␣near-equivalents
of␣the␣other␣C<pair*>␣higher-order␣functions:

␣␣␣␣@kvlist␣=␣unpairs␣grep␣{␣FUNC␣}␣pairs␣@kvlist
␣␣␣␣#␣Like␣pairgrep,␣but␣takes␣$_␣instead␣of␣$a␣and␣$b

␣␣␣␣@kvlist␣=␣unpairs␣map␣{␣FUNC␣}␣pairs␣@kvlist
␣␣␣␣#␣Like␣pairmap,␣but␣takes␣$_␣instead␣of␣$a␣and␣$b

Note␣however␣that␣these␣versions␣will␣not␣behave␣as␣nicely␣in␣scalar␣context.

Finally,␣this␣technique␣can␣be␣used␣to␣implement␣a␣sort␣on␣a␣keyvalue␣pair
list;␣e.g.:

␣␣␣␣@kvlist␣=␣unpairs␣sort␣{␣$a->key␣cmp␣$b->key␣}␣pairs␣@kvlist

=head2␣pairkeys

␣␣␣␣my␣@keys␣=␣pairkeys␣@kvlist;

I<Since␣version␣1.29.>

A␣convenient␣shortcut␣to␣operating␣on␣even-sized␣lists␣of␣pairs,␣this␣function
returns␣a␣list␣of␣the␣the␣first␣values␣of␣each␣of␣the␣pairs␣in␣the␣given␣list.
It␣is␣a␣more␣efficient␣version␣of

␣␣␣␣@keys␣=␣pairmap␣{␣$a␣}␣@kvlist

=head2␣pairvalues

␣␣␣␣my␣@values␣=␣pairvalues␣@kvlist;

I<Since␣version␣1.29.>

A␣convenient␣shortcut␣to␣operating␣on␣even-sized␣lists␣of␣pairs,␣this␣function
returns␣a␣list␣of␣the␣the␣second␣values␣of␣each␣of␣the␣pairs␣in␣the␣given␣list.
It␣is␣a␣more␣efficient␣version␣of

␣␣␣␣@values␣=␣pairmap␣{␣$b␣}␣@kvlist

=head2␣pairgrep

␣␣␣␣my␣@kvlist␣=␣pairgrep␣{␣BLOCK␣}␣@kvlist;

␣␣␣␣my␣$count␣=␣pairgrep␣{␣BLOCK␣}␣@kvlist;

I<Since␣version␣1.29.>

Similar␣to␣perl's␣C<grep>␣keyword,␣but␣interprets␣the␣given␣list␣as␣an
even-sized␣list␣of␣pairs.␣It␣invokes␣the␣C<BLOCK_>␣multiple␣times,␣in␣scalar
context,␣with␣C<$a>␣and␣C<$b>␣set␣to␣successive␣pairs␣of␣values␣from␣the
C<@kvlist>.

Returns␣an␣even-sized␣list␣of␣those␣pairs␣for␣which␣the␣C<BLOCK_>␣returned␣true
in␣list␣context,␣or␣the␣count␣of␣the␣B<number␣of␣pairs>␣in␣scalar␣context.
(Note,␣therefore,␣in␣scalar␣context␣that␣it␣returns␣a␣number␣half␣the␣size␣of
the␣count␣of␣items␣it␣would␣have␣returned␣in␣list␣context).

␣␣␣␣@subset␣=␣pairgrep␣{␣$a␣=~␣m/^[[:upper:]]+$/␣}␣@kvlist

As␣with␣C<grep>␣aliasing␣C<$_>␣to␣list␣elements,␣C<pairgrep>␣aliases␣C<$a>␣and
C<$b>␣to␣elements␣of␣the␣given␣list.␣Any␣modifications␣of␣it␣by␣the␣code␣block
will␣be␣visible␣to␣the␣caller.

=head2␣pairfirst

␣␣␣␣my␣(␣$key,␣$val␣)␣=␣pairfirst␣{␣BLOCK␣}␣@kvlist;

␣␣␣␣my␣$found␣=␣pairfirst␣{␣BLOCK␣}␣@kvlist;

I<Since␣version␣1.30.>

Similar␣to␣the␣L</first>␣function,␣but␣interprets␣the␣given␣list␣as␣an
even-sized␣list␣of␣pairs.␣It␣invokes␣the␣C<BLOCK_>␣multiple␣times,␣in␣scalar
context,␣with␣C<$a>␣and␣C<$b>␣set␣to␣successive␣pairs␣of␣values␣from␣the
C<@kvlist>.

Returns␣the␣first␣pair␣of␣values␣from␣the␣list␣for␣which␣the␣C<BLOCK_>␣returned
true␣in␣list␣context,␣or␣an␣empty␣list␣of␣no␣such␣pair␣was␣found.␣In␣scalar
context␣it␣returns␣a␣simple␣boolean␣value,␣rather␣than␣either␣the␣key␣or␣the
value␣found.

␣␣␣␣(␣$key,␣$value␣)␣=␣pairfirst␣{␣$a␣=~␣m/^[[:upper:]]+$/␣}␣@kvlist

As␣with␣C<grep>␣aliasing␣C<$_>␣to␣list␣elements,␣C<pairfirst>␣aliases␣C<$a>␣and
C<$b>␣to␣elements␣of␣the␣given␣list.␣Any␣modifications␣of␣it␣by␣the␣code␣block
will␣be␣visible␣to␣the␣caller.

=head2␣pairmap

␣␣␣␣my␣@list␣=␣pairmap␣{␣BLOCK␣}␣@kvlist;

␣␣␣␣my␣$count␣=␣pairmap␣{␣BLOCK␣}␣@kvlist;

I<Since␣version␣1.29.>

Similar␣to␣perl's␣C<map>␣keyword,␣but␣interprets␣the␣given␣list␣as␣an
even-sized␣list␣of␣pairs.␣It␣invokes␣the␣C<BLOCK_>␣multiple␣times,␣in␣list
context,␣with␣C<$a>␣and␣C<$b>␣set␣to␣successive␣pairs␣of␣values␣from␣the
C<@kvlist>.

Returns␣the␣concatenation␣of␣all␣the␣values␣returned␣by␣the␣C<BLOCK_>␣in␣list
context,␣or␣the␣count␣of␣the␣number␣of␣items␣that␣would␣have␣been␣returned␣in
scalar␣context.

␣␣␣␣@result␣=␣pairmap␣{␣"The␣key␣$a␣has␣value␣$b"␣}␣@kvlist

As␣with␣C<map>␣aliasing␣C<$_>␣to␣list␣elements,␣C<pairmap>␣aliases␣C<$a>␣and
C<$b>␣to␣elements␣of␣the␣given␣list.␣Any␣modifications␣of␣it␣by␣the␣code␣block
will␣be␣visible␣to␣the␣caller.

See␣L</KNOWN␣BUGS>␣for␣a␣known-bug␣with␣C<pairmap>,␣and␣a␣workaround.

=cut
----------
Range: (587732,591381) (3649)
=head2␣sample

␣␣␣␣my␣@items␣=␣sample␣$count,␣@values

I<Since␣version␣1.54.>

Randomly␣select␣the␣given␣number␣of␣elements␣from␣the␣input␣list.␣Any␣given
position␣in␣the␣input␣list␣will␣be␣selected␣at␣most␣once.

If␣there␣are␣fewer␣than␣C<$count>␣items␣in␣the␣list␣then␣the␣function␣will
return␣once␣all␣of␣them␣have␣been␣randomly␣selected;␣effectively␣the␣function
behaves␣similarly␣to␣L</shuffle>.

This␣function␣is␣affected␣by␣the␣C<$RAND>␣variable.

=head2␣uniq

␣␣␣␣my␣@subset␣=␣uniq␣@values

I<Since␣version␣1.45.>

Filters␣a␣list␣of␣values␣to␣remove␣subsequent␣duplicates,␣as␣judged␣by␣a
DWIM-ish␣string␣equality␣or␣C<undef>␣test.␣Preserves␣the␣order␣of␣unique
elements,␣and␣retains␣the␣first␣value␣of␣any␣duplicate␣set.

␣␣␣␣my␣$count␣=␣uniq␣@values

In␣scalar␣context,␣returns␣the␣number␣of␣elements␣that␣would␣have␣been
returned␣as␣a␣list.

The␣C<undef>␣value␣is␣treated␣by␣this␣function␣as␣distinct␣from␣the␣empty
string,␣and␣no␣warning␣will␣be␣produced.␣It␣is␣left␣as-is␣in␣the␣returned
list.␣Subsequent␣C<undef>␣values␣are␣still␣considered␣identical␣to␣the␣first,
and␣will␣be␣removed.

=head2␣uniqint

␣␣␣␣my␣@subset␣=␣uniqint␣@values

I<Since␣version␣1.55.>

Filters␣a␣list␣of␣values␣to␣remove␣subsequent␣duplicates,␣as␣judged␣by␣an
integer␣numerical␣equality␣test.␣Preserves␣the␣order␣of␣unique␣elements,␣and
retains␣the␣first␣value␣of␣any␣duplicate␣set.␣Values␣in␣the␣returned␣list␣will
be␣coerced␣into␣integers.

␣␣␣␣my␣$count␣=␣uniqint␣@values

In␣scalar␣context,␣returns␣the␣number␣of␣elements␣that␣would␣have␣been
returned␣as␣a␣list.

Note␣that␣C<undef>␣is␣treated␣much␣as␣other␣numerical␣operations␣treat␣it;␣it
compares␣equal␣to␣zero␣but␣additionally␣produces␣a␣warning␣if␣such␣warnings
are␣enabled␣(C<use␣warnings␣'uninitialized';>).␣In␣addition,␣an␣C<undef>␣in
the␣returned␣list␣is␣coerced␣into␣a␣numerical␣zero,␣so␣that␣the␣entire␣list␣of
values␣returned␣by␣C<uniqint>␣are␣well-behaved␣as␣integers.

=head2␣uniqnum

␣␣␣␣my␣@subset␣=␣uniqnum␣@values

I<Since␣version␣1.44.>

Filters␣a␣list␣of␣values␣to␣remove␣subsequent␣duplicates,␣as␣judged␣by␣a
numerical␣equality␣test.␣Preserves␣the␣order␣of␣unique␣elements,␣and␣retains
the␣first␣value␣of␣any␣duplicate␣set.

␣␣␣␣my␣$count␣=␣uniqnum␣@values

In␣scalar␣context,␣returns␣the␣number␣of␣elements␣that␣would␣have␣been
returned␣as␣a␣list.

Note␣that␣C<undef>␣is␣treated␣much␣as␣other␣numerical␣operations␣treat␣it;␣it
compares␣equal␣to␣zero␣but␣additionally␣produces␣a␣warning␣if␣such␣warnings
are␣enabled␣(C<use␣warnings␣'uninitialized';>).␣In␣addition,␣an␣C<undef>␣in
the␣returned␣list␣is␣coerced␣into␣a␣numerical␣zero,␣so␣that␣the␣entire␣list␣of
values␣returned␣by␣C<uniqnum>␣are␣well-behaved␣as␣numbers.

Note␣also␣that␣multiple␣IEEE␣C<NaN>␣values␣are␣treated␣as␣duplicates␣of
each␣other,␣regardless␣of␣any␣differences␣in␣their␣payloads,␣and␣despite
the␣fact␣that␣C<<␣0+'NaN'␣==␣0+'NaN'␣>>␣yields␣false.

=head2␣uniqstr

␣␣␣␣my␣@subset␣=␣uniqstr␣@values

I<Since␣version␣1.45.>

Filters␣a␣list␣of␣values␣to␣remove␣subsequent␣duplicates,␣as␣judged␣by␣a
string␣equality␣test.␣Preserves␣the␣order␣of␣unique␣elements,␣and␣retains␣the
first␣value␣of␣any␣duplicate␣set.

␣␣␣␣my␣$count␣=␣uniqstr␣@values

In␣scalar␣context,␣returns␣the␣number␣of␣elements␣that␣would␣have␣been
returned␣as␣a␣list.

Note␣that␣C<undef>␣is␣treated␣much␣as␣other␣string␣operations␣treat␣it;␣it
compares␣equal␣to␣the␣empty␣string␣but␣additionally␣produces␣a␣warning␣if␣such
warnings␣are␣enabled␣(C<use␣warnings␣'uninitialized';>).␣In␣addition,␣an
C<undef>␣in␣the␣returned␣list␣is␣coerced␣into␣an␣empty␣string,␣so␣that␣the
entire␣list␣of␣values␣returned␣by␣C<uniqstr>␣are␣well-behaved␣as␣strings.

=cut
----------
Range: (591383,595101) (3718)
=head2␣head

␣␣␣␣my␣@values␣=␣head␣$size,␣@list;

I<Since␣version␣1.50.>

Returns␣the␣first␣C<$size>␣elements␣from␣C<@list>.␣If␣C<$size>␣is␣negative,␣returns
all␣but␣the␣last␣C<$size>␣elements␣from␣C<@list>.

␣␣␣␣@result␣=␣head␣2,␣qw(␣foo␣bar␣baz␣);
␣␣␣␣#␣foo,␣bar

␣␣␣␣@result␣=␣head␣-2,␣qw(␣foo␣bar␣baz␣);
␣␣␣␣#␣foo

=head2␣tail

␣␣␣␣my␣@values␣=␣tail␣$size,␣@list;

I<Since␣version␣1.50.>

Returns␣the␣last␣C<$size>␣elements␣from␣C<@list>.␣If␣C<$size>␣is␣negative,␣returns
all␣but␣the␣first␣C<$size>␣elements␣from␣C<@list>.

␣␣␣␣@result␣=␣tail␣2,␣qw(␣foo␣bar␣baz␣);
␣␣␣␣#␣bar,␣baz

␣␣␣␣@result␣=␣tail␣-2,␣qw(␣foo␣bar␣baz␣);
␣␣␣␣#␣baz

=head1␣CONFIGURATION␣VARIABLES

=head2␣$RAND

␣␣␣␣local␣$List::Util::RAND␣=␣sub␣{␣...␣};

I<Since␣version␣1.54.>

This␣package␣variable␣is␣used␣by␣code␣which␣needs␣to␣generate␣random␣numbers
(such␣as␣the␣L</shuffle>␣and␣L</sample>␣functions).␣If␣set␣to␣a␣CODE␣reference
it␣provides␣an␣alternative␣to␣perl's␣builtin␣C<rand()>␣function.␣When␣a␣new
random␣number␣is␣needed␣this␣function␣will␣be␣invoked␣with␣no␣arguments␣and␣is
expected␣to␣return␣a␣floating-point␣value,␣of␣which␣only␣the␣fractional␣part
will␣be␣used.

=head1␣KNOWN␣BUGS

=head2␣RT␣#95409

L<https://rt.cpan.org/Ticket/Display.html?id=95409>

If␣the␣block␣of␣code␣given␣to␣L</pairmap>␣contains␣lexical␣variables␣that␣are
captured␣by␣a␣returned␣closure,␣and␣the␣closure␣is␣executed␣after␣the␣block
has␣been␣re-used␣for␣the␣next␣iteration,␣these␣lexicals␣will␣not␣see␣the
correct␣values.␣For␣example:

␣my␣@subs␣=␣pairmap␣{
␣␣␣␣my␣$var␣=␣"$a␣is␣$b";
␣␣␣␣sub␣{␣print␣"$var\n"␣};
␣}␣one␣=>␣1,␣two␣=>␣2,␣three␣=>␣3;

␣$_->()␣for␣@subs;

Will␣incorrectly␣print

␣three␣is␣3
␣three␣is␣3
␣three␣is␣3

This␣is␣due␣to␣the␣performance␣optimisation␣of␣using␣C<MULTICALL>␣for␣the␣code
block,␣which␣means␣that␣fresh␣SVs␣do␣not␣get␣allocated␣for␣each␣call␣to␣the
block.␣Instead,␣the␣same␣SV␣is␣re-assigned␣for␣each␣iteration,␣and␣all␣the
closures␣will␣share␣the␣value␣seen␣on␣the␣final␣iteration.

To␣work␣around␣this␣bug,␣surround␣the␣code␣with␣a␣second␣set␣of␣braces.␣This
creates␣an␣inner␣block␣that␣defeats␣the␣C<MULTICALL>␣logic,␣and␣does␣get␣fresh
SVs␣allocated␣each␣time:

␣my␣@subs␣=␣pairmap␣{
␣␣␣␣{
␣␣␣␣␣␣␣my␣$var␣=␣"$a␣is␣$b";
␣␣␣␣␣␣␣sub␣{␣print␣"$var\n";␣}
␣␣␣␣}
␣}␣one␣=>␣1,␣two␣=>␣2,␣three␣=>␣3;

This␣bug␣only␣affects␣closures␣that␣are␣generated␣by␣the␣block␣but␣used
afterwards.␣Lexical␣variables␣that␣are␣only␣used␣during␣the␣lifetime␣of␣the
block's␣execution␣will␣take␣their␣individual␣values␣for␣each␣invocation,␣as
normal.

=head2␣uniqnum()␣on␣oversized␣bignums

Due␣to␣the␣way␣that␣C<uniqnum()>␣compares␣numbers,␣it␣cannot␣distinguish
differences␣between␣bignums␣(especially␣bigints)␣that␣are␣too␣large␣to␣fit␣in
the␣native␣platform␣types.␣For␣example,

␣my␣$x␣=␣Math::BigInt->new(␣"1"␣x␣100␣);
␣my␣$y␣=␣$x␣+␣1;

␣say␣for␣uniqnum(␣$x,␣$y␣);

Will␣print␣just␣the␣value␣of␣C<$x>,␣believing␣that␣C<$y>␣is␣a␣numerically-
equivalent␣value.␣This␣bug␣does␣not␣affect␣C<uniqstr()>,␣which␣will␣correctly
observe␣that␣the␣two␣values␣stringify␣to␣different␣strings.

=head1␣SUGGESTED␣ADDITIONS

The␣following␣are␣additions␣that␣have␣been␣requested,␣but␣I␣have␣been␣reluctant
to␣add␣due␣to␣them␣being␣very␣simple␣to␣implement␣in␣perl

␣␣#␣How␣many␣elements␣are␣true

␣␣sub␣true␣{␣scalar␣grep␣{␣$_␣}␣@_␣}

␣␣#␣How␣many␣elements␣are␣false

␣␣sub␣false␣{␣scalar␣grep␣{␣!$_␣}␣@_␣}

=head1␣SEE␣ALSO

L<Scalar::Util>,␣L<List::MoreUtils>

=head1␣COPYRIGHT

Copyright␣(c)␣1997-2007␣Graham␣Barr␣<gbarr@pobox.com>.␣All␣rights␣reserved.
This␣program␣is␣free␣software;␣you␣can␣redistribute␣it␣and/or
modify␣it␣under␣the␣same␣terms␣as␣Perl␣itself.

Recent␣additions␣and␣current␣maintenance␣by
Paul␣Evans,␣<leonerd@leonerd.org.uk>.

=cut
----------
Range: (595308,602419) (7111)
=head1␣NAME

GDBM_File␣-␣Perl5␣access␣to␣the␣gdbm␣library.

=head1␣SYNOPSIS

␣␣␣␣use␣GDBM_File;
␣␣␣␣[$db␣=]␣tie␣%hash,␣'GDBM_File',␣$filename,␣&GDBM_WRCREAT,␣0640;
␣␣␣␣#␣Use␣the␣%hash␣array.

␣␣␣␣$e␣=␣$db->errno;
␣␣␣␣$e␣=␣$db->syserrno;
␣␣␣␣$str␣=␣$db->strerror;
␣␣␣␣$bool␣=␣$db->needs_recovery;

␣␣␣␣$db->clear_error;

␣␣␣␣$db->reorganize;
␣␣␣␣$db->sync;

␣␣␣␣$n␣=␣$db->count;

␣␣␣␣$n␣=␣$db->flags;

␣␣␣␣$str␣=␣$db->dbname;

␣␣␣␣$db->cache_size;
␣␣␣␣$db->cache_size($newsize);

␣␣␣␣$n␣=␣$db->block_size;

␣␣␣␣$bool␣=␣$db->sync_mode;
␣␣␣␣$db->sync_mode($bool);

␣␣␣␣$bool␣=␣$db->centfree;
␣␣␣␣$db->centfree($bool);

␣␣␣␣$bool␣=␣$db->coalesce;
␣␣␣␣$db->coalesce($bool);

␣␣␣␣$bool␣=␣$db->mmap;

␣␣␣␣$size␣=␣$db->mmapsize;
␣␣␣␣$db->mmapsize($newsize);

␣␣␣␣$db->recover(%args);

␣␣␣␣untie␣%hash␣;

=head1␣DESCRIPTION

B<GDBM_File>␣is␣a␣module␣which␣allows␣Perl␣programs␣to␣make␣use␣of␣the
facilities␣provided␣by␣the␣GNU␣gdbm␣library.␣␣If␣you␣intend␣to␣use␣this
module␣you␣should␣really␣have␣a␣copy␣of␣the␣gdbm␣manualpage␣at␣hand.

Most␣of␣the␣libgdbm.a␣functions␣are␣available␣through␣the␣GDBM_File
interface.

Unlike␣Perl's␣built-in␣hashes,␣it␣is␣not␣safe␣to␣C<delete>␣the␣current
item␣from␣a␣GDBM_File␣tied␣hash␣while␣iterating␣over␣it␣with␣C<each>.
This␣is␣a␣limitation␣of␣the␣gdbm␣library.

=head1␣STATIC␣METHODS

=head2␣GDBM_version

␣␣␣␣$str␣=␣GDBM_File->GDBM_version;
␣␣␣␣@ar␣=␣GDBM_File->GDBM_version;

Returns␣the␣version␣number␣of␣the␣underlying␣B<libgdbm>␣library.␣In␣scalar
context,␣returns␣the␣library␣version␣formatted␣as␣string:

␣␣␣␣MINOR.MAJOR[.PATCH][␣(GUESS)]

where␣I<MINOR>,␣I<MAJOR>,␣and␣I<PATCH>␣are␣version␣numbers,␣and␣I<GUESS>␣is
a␣guess␣level␣(see␣below).

In␣list␣context,␣returns␣a␣list:

␣␣␣␣(␣MINOR,␣MAJOR,␣PATCH␣[,␣GUESS]␣)

The␣I<GUESS>␣component␣is␣present␣only␣if␣B<libgdbm>␣version␣is␣1.8.3␣or
earlier.␣This␣is␣because␣earlier␣releases␣of␣B<libgdbm>␣did␣not␣include
information␣about␣their␣version␣and␣the␣B<GDBM_File>␣module␣has␣to␣implement
certain␣guesswork␣in␣order␣to␣determine␣it.␣I<GUESS>␣is␣a␣textual␣description
in␣string␣context,␣and␣a␣positive␣number␣indicating␣how␣rough␣the␣guess␣is
in␣list␣context.␣Possible␣values␣are:

=over␣4

=item␣1␣␣-␣exact␣guess

The␣major␣and␣minor␣version␣numbers␣are␣guaranteed␣to␣be␣correct.␣The␣actual
patchlevel␣is␣most␣probably␣guessed␣right,␣but␣can␣be␣1-2␣less␣than␣indicated.

=item␣2␣␣-␣approximate

The␣major␣and␣minor␣number␣are␣guaranteed␣to␣be␣correct.␣The␣patchlevel␣is
set␣to␣the␣upper␣bound.

=item␣3␣␣-␣rough␣guess

The␣version␣is␣guaranteed␣to␣be␣not␣newer␣than␣B<I<MAJOR>.I<MINOR>>.

=back

=head1␣METHODS

=head2␣close

␣␣␣␣$db->close;

Closes␣the␣database.␣You␣are␣not␣advised␣to␣use␣this␣method␣directly.␣Please,
use␣B<untie>␣instead.

=head2␣errno

␣␣␣␣$db->errno

Returns␣the␣last␣error␣status␣associated␣with␣this␣database.

=head2␣syserrno

␣␣␣␣$db->syserrno

Returns␣the␣last␣system␣error␣status␣(C␣C<errno>␣variable),␣associated␣with
this␣database,

=head2␣strerror

␣␣␣␣$db->strerror

Returns␣textual␣description␣of␣the␣last␣error␣that␣occurred␣in␣this␣database.

=head2␣clear_error

␣␣␣␣$db->clear_error

Clear␣error␣status.

=head2␣needs_recovery

␣␣␣␣$db->needs_recovery

Returns␣true␣if␣the␣database␣needs␣recovery.

=head2␣reorganize

␣␣␣␣$db->reorganize;

Reorganizes␣the␣database.

=head2␣sync

␣␣␣␣$db->sync;

Synchronizes␣recent␣changes␣to␣the␣database␣with␣its␣disk␣copy.

=head2␣count

␣␣␣␣$n␣=␣$db->count;

Returns␣number␣of␣keys␣in␣the␣database.

=head2␣flags

␣␣␣␣$db->flags;

Returns␣flags␣passed␣as␣4th␣argument␣to␣B<tie>.

=head2␣dbname

␣␣␣␣$db->dbname;

Returns␣the␣database␣name␣(i.e.␣3rd␣argument␣to␣B<tie>.

=head2␣cache_size

␣␣␣␣$db->cache_size;
␣␣␣␣$db->cache_size($newsize);

Returns␣the␣size␣of␣the␣internal␣B<GDBM>␣cache␣for␣that␣database.

Called␣with␣argument,␣sets␣the␣size␣to␣I<$newsize>.

=head2␣block_size

␣␣␣␣$db->block_size;

Returns␣the␣block␣size␣of␣the␣database.

=head2␣sync_mode

␣␣␣␣$db->sync_mode;
␣␣␣␣$db->sync_mode($bool);

Returns␣the␣status␣of␣the␣automatic␣synchronization␣mode.␣Called␣with␣argument,
enables␣or␣disables␣the␣sync␣mode,␣depending␣on␣whether␣$bool␣is␣B<true>␣or
B<false>.

When␣synchronization␣mode␣is␣on␣(B<true>),␣any␣changes␣to␣the␣database␣are
immediately␣written␣to␣the␣disk.␣This␣ensures␣database␣consistency␣in␣case
of␣any␣unforeseen␣errors␣(e.g.␣power␣failures),␣at␣the␣expense␣of␣considerable
slowdown␣of␣operation.

Synchronization␣mode␣is␣off␣by␣default.

=head2␣centfree

␣␣␣␣$db->centfree;
␣␣␣␣$db->centfree($bool);

Returns␣status␣of␣the␣central␣free␣block␣pool␣(B<0>␣-␣disabled,
B<1>␣-␣enabled).

With␣argument,␣changes␣its␣status.

By␣default,␣central␣free␣block␣pool␣is␣disabled.

=head2␣coalesce

␣␣␣␣$db->coalesce;
␣␣␣␣$db->coalesce($bool);

=head2␣mmap

␣␣␣␣$db->mmap;

Returns␣true␣if␣memory␣mapping␣is␣enabled.

This␣method␣will␣B<croak>␣if␣the␣B<libgdbm>␣library␣is␣complied␣without
memory␣mapping␣support.

=head2␣mmapsize

␣␣␣␣$db->mmapsize;
␣␣␣␣$db->mmapsize($newsize);

If␣memory␣mapping␣is␣enabled,␣returns␣the␣size␣of␣memory␣mapping.␣With
argument,␣sets␣the␣size␣to␣B<$newsize>.

This␣method␣will␣B<croak>␣if␣the␣B<libgdbm>␣library␣is␣complied␣without
memory␣mapping␣support.

=head2␣recover

␣␣␣␣$db->recover(%args);

Recovers␣data␣from␣a␣failed␣database.␣B<%args>␣is␣optional␣and␣can␣contain
following␣keys:

=over␣4

=item␣err␣=>␣sub␣{␣...␣}

Reference␣to␣code␣for␣detailed␣error␣reporting.␣Upon␣encountering␣an␣error,
B<recover>␣will␣call␣this␣sub␣with␣a␣single␣argument␣-␣a␣description␣of␣the
error.

=item␣backup␣=>␣\$str

Creates␣a␣backup␣copy␣of␣the␣database␣before␣recovery␣and␣returns␣its
filename␣in␣B<$str>.

=item␣max_failed_keys␣=>␣$n

Maximum␣allowed␣number␣of␣failed␣keys.␣If␣the␣actual␣number␣becomes␣equal
to␣I<$n>,␣B<recover>␣aborts␣and␣returns␣error.

=item␣max_failed_buckets␣=>␣$n

Maximum␣allowed␣number␣of␣failed␣buckets.␣If␣the␣actual␣number␣becomes␣equal
to␣I<$n>,␣B<recover>␣aborts␣and␣returns␣error.

=item␣max_failures␣=>␣$n

Maximum␣allowed␣number␣of␣failures␣during␣recovery.

=item␣stat␣=>␣\%hash

Return␣recovery␣statistics␣in␣I<%hash>.␣Upon␣return,␣the␣following␣keys␣will
be␣present:

=over␣8

=item␣recovered_keys

Number␣of␣successfully␣recovered␣keys.

=item␣recovered_buckets

Number␣of␣successfully␣recovered␣buckets.

=item␣failed_keys

Number␣of␣keys␣that␣failed␣to␣be␣retrieved.

=item␣failed_buckets

Number␣of␣buckets␣that␣failed␣to␣be␣retrieved.

=back

=back


=head1␣AVAILABILITY

gdbm␣is␣available␣from␣any␣GNU␣archive.␣␣The␣master␣site␣is
C<ftp.gnu.org>,␣but␣you␣are␣strongly␣urged␣to␣use␣one␣of␣the␣many
mirrors.␣␣You␣can␣obtain␣a␣list␣of␣mirror␣sites␣from
L<http://www.gnu.org/order/ftp.html>.

=head1␣SECURITY␣AND␣PORTABILITY

B<Do␣not␣accept␣GDBM␣files␣from␣untrusted␣sources.>

GDBM␣files␣are␣not␣portable␣across␣platforms.

The␣GDBM␣documentation␣doesn't␣imply␣that␣files␣from␣untrusted␣sources
can␣be␣safely␣used␣with␣C<libgdbm>.

A␣maliciously␣crafted␣file␣might␣cause␣perl␣to␣crash␣or␣even␣expose␣a
security␣vulnerability.

=head1␣SEE␣ALSO

L<perl(1)>,␣L<DB_File(3)>,␣L<perldbmfilter>,
L<gdbm(3)>,
L<https://www.gnu.org.ua/software/gdbm/manual.html>.

=cut
----------
Range: (635680,702924) (67244)
=head1␣NAME

Devel::PPPort␣-␣Perl/Pollution/Portability

=head1␣SYNOPSIS

␣␣Devel::PPPort::WriteFile();␣␣␣#␣defaults␣to␣./ppport.h
␣␣Devel::PPPort::WriteFile('someheader.h');

␣␣#␣Same␣as␣above␣but␣retrieve␣contents␣rather␣than␣write␣file
␣␣my␣$contents␣=␣Devel::PPPort::GetFileContents();
␣␣my␣$contents␣=␣Devel::PPPort::GetFileContents('someheader.h');

=head1␣Start␣using␣Devel::PPPort␣for␣XS␣projects

␣␣$␣cpan␣Devel::PPPort
␣␣$␣perl␣-MDevel::PPPort␣-e'Devel::PPPort::WriteFile'
␣␣$␣perl␣ppport.h␣--compat-version=5.6.1␣--patch=diff.patch␣*.xs
␣␣$␣patch␣-p0␣<␣diff.patch
␣␣$␣echo␣ppport.h␣>>MANIFEST

=head1␣DESCRIPTION

Perl's␣API␣has␣changed␣over␣time,␣gaining␣new␣features,␣new␣functions,
increasing␣its␣flexibility,␣and␣reducing␣the␣impact␣on␣the␣C␣namespace
environment␣(reduced␣pollution).␣The␣header␣file␣written␣by␣this␣module,
typically␣F<ppport.h>,␣attempts␣to␣bring␣some␣of␣the␣newer␣Perl␣API
features␣to␣older␣versions␣of␣Perl,␣so␣that␣you␣can␣worry␣less␣about
keeping␣track␣of␣old␣releases,␣but␣users␣can␣still␣reap␣the␣benefit.

C<Devel::PPPort>␣contains␣two␣functions,␣C<WriteFile>␣and␣C<GetFileContents>.
C<WriteFile>'s␣only␣purpose␣is␣to␣write␣the␣F<ppport.h>␣C␣header␣file.
This␣file␣contains␣a␣series␣of␣macros␣and,␣if␣explicitly␣requested,␣functions
that␣allow␣XS␣modules␣to␣be␣built␣using␣older␣versions␣of␣Perl.␣Currently,
Perl␣versions␣from␣5.003_07␣to␣5.33.1␣are␣supported.

C<GetFileContents>␣can␣be␣used␣to␣retrieve␣the␣file␣contents␣rather␣than
writing␣it␣out.

This␣module␣is␣used␣by␣C<h2xs>␣to␣write␣the␣file␣F<ppport.h>.

=head2␣Why␣use␣ppport.h?

You␣should␣use␣F<ppport.h>␣in␣modern␣code␣so␣that␣your␣code␣will␣work
with␣the␣widest␣range␣of␣Perl␣interpreters␣possible,␣without␣significant
additional␣work.

You␣should␣attempt␣to␣get␣older␣code␣to␣fully␣use␣F<ppport.h>,␣because␣the
reduced␣pollution␣of␣newer␣Perl␣versions␣is␣an␣important␣thing.␣It's␣so
important␣that␣the␣old␣polluting␣ways␣of␣original␣Perl␣modules␣will␣not␣be
supported␣very␣far␣into␣the␣future,␣and␣your␣module␣will␣almost␣certainly
break!␣By␣adapting␣to␣it␣now,␣you'll␣gain␣compatibility␣and␣a␣sense␣of
having␣done␣the␣electronic␣ecology␣some␣good.

=head2␣How␣to␣use␣ppport.h

Don't␣direct␣the␣users␣of␣your␣module␣to␣download␣C<Devel::PPPort>.
They␣are␣most␣probably␣not␣XS␣writers.␣Also,␣don't␣make␣F<ppport.h>
optional.␣Rather,␣just␣take␣the␣most␣recent␣copy␣of␣F<ppport.h>␣that
you␣can␣find␣(e.g.␣by␣generating␣it␣with␣the␣latest␣C<Devel::PPPort>
release␣from␣CPAN),␣copy␣it␣into␣your␣project,␣adjust␣your␣project␣to
use␣it,␣test␣it,␣and␣distribute␣the␣header␣along␣with␣your␣module.

It␣is␣important␣to␣use␣the␣most␣recent␣version␣of␣F<ppport.h>.␣␣You␣do␣need␣to
test␣before␣shipping␣a␣newer␣version␣than␣you␣already␣had.␣␣One␣possible
failure␣is␣that␣someone␣had␣to␣convert␣a␣backported␣element␣from␣a␣macro␣into
a␣function,␣and␣actual␣functions␣must␣be␣enabled␣with␣a␣NEED␣macro␣to␣minimize
the␣possibility␣of␣namespace␣pollution.␣␣See␣L<HACKERS>␣for␣details.␣␣The
developers␣of␣C<Devel::PPPort>␣want␣to␣hear␣if␣there␣are␣other␣problems␣that
arise␣from␣using␣a␣later␣F<ppport.h>.␣␣Use
L<https://github.com/Dual-Life/Devel-PPPort/issues>␣to␣report␣any.

=head2␣Running␣ppport.h

But␣F<ppport.h>␣is␣more␣than␣just␣a␣C␣header.␣It's␣also␣a␣Perl␣script
that␣can␣check␣your␣source␣code.␣It␣will␣suggest␣hints␣and␣portability
notes,␣and␣can␣even␣make␣suggestions␣on␣how␣to␣change␣your␣code.␣You
can␣run␣it␣like␣any␣other␣Perl␣program:

␣␣␣␣perl␣ppport.h␣[options]␣[files]

It␣also␣has␣embedded␣documentation,␣so␣you␣can␣use

␣␣␣␣perldoc␣ppport.h

to␣find␣out␣more␣about␣how␣to␣use␣it.

=head1␣FUNCTIONS

=head2␣WriteFile

C<WriteFile>␣takes␣one␣optional␣argument.␣When␣called␣with␣one
argument,␣it␣expects␣to␣be␣passed␣a␣filename.␣When␣called␣with
no␣arguments,␣it␣defaults␣to␣the␣filename␣F<ppport.h>.

The␣function␣returns␣a␣true␣value␣if␣the␣file␣was␣written␣successfully.
Otherwise␣it␣returns␣a␣false␣value.

=head2␣GetFileContents

C<GetFileContents>␣behaves␣like␣C<WriteFile>␣above,␣but␣returns␣the␣contents
of␣the␣would-be␣file␣rather␣than␣writing␣it␣out.

=head1␣COMPATIBILITY

F<ppport.h>␣supports␣Perl␣versions␣from␣5.003_07␣to␣5.33.1
in␣threaded␣and␣non-threaded␣configurations.

=head2␣Provided␣Perl␣compatibility␣API

The␣header␣file␣written␣by␣this␣module,␣typically␣F<ppport.h>,␣provides␣access
to␣the␣following␣elements␣of␣the␣Perl␣API␣that␣are␣not␣otherwise␣available␣in
Perl␣releases␣older␣than␣when␣the␣elements␣were␣first␣introduced.␣␣(Note␣that
many␣of␣these␣are␣not␣supported␣all␣the␣way␣back␣to␣5.003_07,␣but␣it␣may
be␣that␣they␣are␣supported␣back␣as␣far␣as␣you␣need;␣see␣L</Supported␣Perl␣API,
sorted␣by␣version>␣for␣that␣information.)

␣␣␣␣_aMY_CXT
␣␣␣␣aMY_CXT
␣␣␣␣aMY_CXT_
␣␣␣␣__ASSERT_
␣␣␣␣aTHX
␣␣␣␣aTHX_
␣␣␣␣aTHXR
␣␣␣␣aTHXR_
␣␣␣␣av_count
␣␣␣␣AvFILLp
␣␣␣␣av_tindex
␣␣␣␣av_top_index
␣␣␣␣BOM_UTF8
␣␣␣␣boolSV
␣␣␣␣call_argv
␣␣␣␣caller_cx
␣␣␣␣call_method
␣␣␣␣call_pv
␣␣␣␣call_sv
␣␣␣␣C_ARRAY_END
␣␣␣␣C_ARRAY_LENGTH
␣␣␣␣cBOOL
␣␣␣␣ckWARN
␣␣␣␣ckWARN2
␣␣␣␣ckWARN2_d
␣␣␣␣ckWARN3
␣␣␣␣ckWARN3_d
␣␣␣␣ckWARN4
␣␣␣␣ckWARN4_d
␣␣␣␣ckWARN_d
␣␣␣␣ck_warner
␣␣␣␣ck_warner_d
␣␣␣␣CopFILE
␣␣␣␣CopFILEAV
␣␣␣␣CopFILEGV
␣␣␣␣CopFILEGV_set
␣␣␣␣CopFILE_set
␣␣␣␣CopFILESV
␣␣␣␣CopSTASH
␣␣␣␣CopSTASH_eq
␣␣␣␣CopSTASHPV
␣␣␣␣CopSTASHPV_set
␣␣␣␣CopSTASH_set
␣␣␣␣CopyD
␣␣␣␣CPERLscope
␣␣␣␣croak_memory_wrap
␣␣␣␣croak_nocontext
␣␣␣␣croak_no_modify
␣␣␣␣croak_sv
␣␣␣␣croak_xs_usage
␣␣␣␣dAX
␣␣␣␣dAXMARK
␣␣␣␣DECLARATION_FOR_LC_NUMERIC_MANIPULATION
␣␣␣␣DEFSV
␣␣␣␣DEFSV_set
␣␣␣␣die_sv
␣␣␣␣dITEMS
␣␣␣␣dMY_CXT
␣␣␣␣dMY_CXT_SV
␣␣␣␣dNOOP
␣␣␣␣dTHR
␣␣␣␣dTHX
␣␣␣␣dTHXa
␣␣␣␣dTHXoa
␣␣␣␣dTHXR
␣␣␣␣dUNDERBAR
␣␣␣␣dVAR
␣␣␣␣dXCPT
␣␣␣␣dXSTARG
␣␣␣␣END_EXTERN_C
␣␣␣␣ERRSV
␣␣␣␣eval_pv
␣␣␣␣eval_sv
␣␣␣␣EXTERN_C
␣␣␣␣foldEQ_utf8
␣␣␣␣get_av
␣␣␣␣get_cv
␣␣␣␣get_cvn_flags
␣␣␣␣get_cvs
␣␣␣␣get_hv
␣␣␣␣get_sv
␣␣␣␣G_METHOD
␣␣␣␣G_RETHROW
␣␣␣␣grok_bin
␣␣␣␣grok_hex
␣␣␣␣grok_number
␣␣␣␣GROK_NUMERIC_RADIX
␣␣␣␣grok_numeric_radix
␣␣␣␣grok_oct
␣␣␣␣gv_fetchpvn_flags
␣␣␣␣gv_fetchpvs
␣␣␣␣gv_fetchsv
␣␣␣␣gv_init_pvn
␣␣␣␣gv_stashpvn
␣␣␣␣gv_stashpvs
␣␣␣␣GvSVn
␣␣␣␣HEf_SVKEY
␣␣␣␣HeUTF8
␣␣␣␣hv_fetchs
␣␣␣␣HvNAME_get
␣␣␣␣HvNAMELEN_get
␣␣␣␣hv_stores
␣␣␣␣IN_LOCALE
␣␣␣␣IN_LOCALE_COMPILETIME
␣␣␣␣IN_LOCALE_RUNTIME
␣␣␣␣IN_PERL_COMPILETIME
␣␣␣␣INT2PTR
␣␣␣␣isALNUM
␣␣␣␣isALNUM_A
␣␣␣␣isALNUMC
␣␣␣␣isALNUMC_A
␣␣␣␣isALNUMC_L1
␣␣␣␣isALPHA
␣␣␣␣isALPHA_A
␣␣␣␣isALPHA_L1
␣␣␣␣isALPHA_LC_utf8_safe
␣␣␣␣isALPHANUMERIC
␣␣␣␣isALPHANUMERIC_A
␣␣␣␣isALPHANUMERIC_L1
␣␣␣␣isALPHANUMERIC_LC
␣␣␣␣isALPHANUMERIC_LC_utf8_safe
␣␣␣␣isALPHANUMERIC_utf8_safe
␣␣␣␣isALPHANUMERIC_uvchr
␣␣␣␣isALPHA_utf8_safe
␣␣␣␣isALPHA_uvchr
␣␣␣␣isASCII
␣␣␣␣isASCII_A
␣␣␣␣isASCII_L1
␣␣␣␣isASCII_LC
␣␣␣␣isASCII_utf8_safe
␣␣␣␣isASCII_uvchr
␣␣␣␣isBLANK
␣␣␣␣isBLANK_A
␣␣␣␣isBLANK_L1
␣␣␣␣isBLANK_LC
␣␣␣␣isBLANK_LC_utf8_safe
␣␣␣␣isBLANK_utf8_safe
␣␣␣␣isBLANK_uvchr
␣␣␣␣isCNTRL
␣␣␣␣isCNTRL_A
␣␣␣␣isCNTRL_L1
␣␣␣␣isCNTRL_LC_utf8_safe
␣␣␣␣isCNTRL_utf8_safe
␣␣␣␣isCNTRL_uvchr
␣␣␣␣isDIGIT
␣␣␣␣isDIGIT_A
␣␣␣␣isDIGIT_L1
␣␣␣␣isDIGIT_LC_utf8_safe
␣␣␣␣isDIGIT_utf8_safe
␣␣␣␣isDIGIT_uvchr
␣␣␣␣isGRAPH
␣␣␣␣isGRAPH_A
␣␣␣␣isGRAPH_L1
␣␣␣␣isGRAPH_LC_utf8_safe
␣␣␣␣isGRAPH_utf8_safe
␣␣␣␣isGRAPH_uvchr
␣␣␣␣isGV_with_GP
␣␣␣␣isIDCONT
␣␣␣␣isIDCONT_A
␣␣␣␣isIDCONT_L1
␣␣␣␣isIDCONT_LC
␣␣␣␣isIDCONT_LC_utf8_safe
␣␣␣␣isIDCONT_utf8_safe
␣␣␣␣isIDCONT_uvchr
␣␣␣␣isIDFIRST
␣␣␣␣isIDFIRST_A
␣␣␣␣isIDFIRST_L1
␣␣␣␣isIDFIRST_LC
␣␣␣␣isIDFIRST_LC_utf8_safe
␣␣␣␣isIDFIRST_utf8_safe
␣␣␣␣isIDFIRST_uvchr
␣␣␣␣is_invariant_string
␣␣␣␣isLOWER
␣␣␣␣isLOWER_A
␣␣␣␣isLOWER_L1
␣␣␣␣isLOWER_LC_utf8_safe
␣␣␣␣isLOWER_utf8_safe
␣␣␣␣isLOWER_uvchr
␣␣␣␣IS_NUMBER_GREATER_THAN_UV_MAX
␣␣␣␣IS_NUMBER_INFINITY
␣␣␣␣IS_NUMBER_IN_UV
␣␣␣␣IS_NUMBER_NAN
␣␣␣␣IS_NUMBER_NEG
␣␣␣␣IS_NUMBER_NOT_INT
␣␣␣␣isOCTAL
␣␣␣␣isOCTAL_A
␣␣␣␣isOCTAL_L1
␣␣␣␣isPRINT
␣␣␣␣isPRINT_A
␣␣␣␣isPRINT_L1
␣␣␣␣isPRINT_LC_utf8_safe
␣␣␣␣isPRINT_utf8_safe
␣␣␣␣isPRINT_uvchr
␣␣␣␣isPSXSPC
␣␣␣␣isPSXSPC_A
␣␣␣␣isPSXSPC_L1
␣␣␣␣isPSXSPC_LC_utf8_safe
␣␣␣␣isPSXSPC_utf8_safe
␣␣␣␣isPSXSPC_uvchr
␣␣␣␣isPUNCT
␣␣␣␣isPUNCT_A
␣␣␣␣isPUNCT_L1
␣␣␣␣isPUNCT_LC_utf8_safe
␣␣␣␣isPUNCT_utf8_safe
␣␣␣␣isPUNCT_uvchr
␣␣␣␣isSPACE
␣␣␣␣isSPACE_A
␣␣␣␣isSPACE_L1
␣␣␣␣isSPACE_LC_utf8_safe
␣␣␣␣isSPACE_utf8_safe
␣␣␣␣isSPACE_uvchr
␣␣␣␣isUPPER
␣␣␣␣isUPPER_A
␣␣␣␣isUPPER_L1
␣␣␣␣isUPPER_LC_utf8_safe
␣␣␣␣isUPPER_utf8_safe
␣␣␣␣isUPPER_uvchr
␣␣␣␣isUTF8_CHAR
␣␣␣␣is_utf8_invariant_string
␣␣␣␣isWORDCHAR
␣␣␣␣isWORDCHAR_A
␣␣␣␣isWORDCHAR_L1
␣␣␣␣isWORDCHAR_LC
␣␣␣␣isWORDCHAR_LC_utf8_safe
␣␣␣␣isWORDCHAR_utf8_safe
␣␣␣␣isWORDCHAR_uvchr
␣␣␣␣isXDIGIT
␣␣␣␣isXDIGIT_A
␣␣␣␣isXDIGIT_L1
␣␣␣␣isXDIGIT_LC
␣␣␣␣isXDIGIT_LC_utf8_safe
␣␣␣␣isXDIGIT_utf8_safe
␣␣␣␣isXDIGIT_uvchr
␣␣␣␣IVdf
␣␣␣␣IVSIZE
␣␣␣␣IVTYPE
␣␣␣␣LATIN1_TO_NATIVE
␣␣␣␣LC_NUMERIC_LOCK
␣␣␣␣LC_NUMERIC_UNLOCK
␣␣␣␣LIKELY
␣␣␣␣load_module
␣␣␣␣LOCK_LC_NUMERIC_STANDARD
␣␣␣␣LOCK_NUMERIC_STANDARD
␣␣␣␣memCHRs
␣␣␣␣memEQ
␣␣␣␣memEQs
␣␣␣␣memNE
␣␣␣␣memNEs
␣␣␣␣mess
␣␣␣␣mess_nocontext
␣␣␣␣mess_sv
␣␣␣␣mg_findext
␣␣␣␣MoveD
␣␣␣␣mPUSHi
␣␣␣␣mPUSHn
␣␣␣␣mPUSHp
␣␣␣␣mPUSHs
␣␣␣␣mPUSHu
␣␣␣␣MUTABLE_AV
␣␣␣␣MUTABLE_CV
␣␣␣␣MUTABLE_GV
␣␣␣␣MUTABLE_HV
␣␣␣␣MUTABLE_IO
␣␣␣␣MUTABLE_PTR
␣␣␣␣MUTABLE_SV
␣␣␣␣mXPUSHi
␣␣␣␣mXPUSHn
␣␣␣␣mXPUSHp
␣␣␣␣mXPUSHs
␣␣␣␣mXPUSHu
␣␣␣␣MY_CXT
␣␣␣␣MY_CXT_CLONE
␣␣␣␣MY_CXT_INIT
␣␣␣␣my_snprintf
␣␣␣␣my_sprintf
␣␣␣␣my_strlcat
␣␣␣␣my_strlcpy
␣␣␣␣my_strnlen
␣␣␣␣NATIVE_TO_LATIN1
␣␣␣␣NATIVE_TO_UNI
␣␣␣␣newCONSTSUB
␣␣␣␣newRV_inc
␣␣␣␣newRV_noinc
␣␣␣␣newSVpvn
␣␣␣␣newSVpvn_flags
␣␣␣␣newSVpvn_share
␣␣␣␣newSVpvn_utf8
␣␣␣␣newSVpvs
␣␣␣␣newSVpvs_flags
␣␣␣␣newSVpvs_share
␣␣␣␣newSVsv_flags
␣␣␣␣newSVsv_nomg
␣␣␣␣newSV_type
␣␣␣␣newSVuv
␣␣␣␣Newx
␣␣␣␣Newxc
␣␣␣␣Newxz
␣␣␣␣NOOP
␣␣␣␣NUM2PTR
␣␣␣␣NVef
␣␣␣␣NVff
␣␣␣␣NVgf
␣␣␣␣NVTYPE
␣␣␣␣OpHAS_SIBLING
␣␣␣␣OpLASTSIB_set
␣␣␣␣OpMAYBESIB_set
␣␣␣␣OpMORESIB_set
␣␣␣␣OpSIBLING
␣␣␣␣packWARN
␣␣␣␣packWARN2
␣␣␣␣packWARN3
␣␣␣␣packWARN4
␣␣␣␣PERL_ABS
␣␣␣␣PERL_ARGS_ASSERT_CROAK_XS_USAGE
␣␣␣␣Perl_ck_warner
␣␣␣␣Perl_ck_warner_d
␣␣␣␣Perl_croak_no_modify
␣␣␣␣PERL_HASH
␣␣␣␣PERL_INT_MAX
␣␣␣␣PERL_INT_MIN
␣␣␣␣PERLIO_FUNCS_CAST
␣␣␣␣PERLIO_FUNCS_DECL
␣␣␣␣PERL_LONG_MAX
␣␣␣␣PERL_LONG_MIN
␣␣␣␣PERL_MAGIC_arylen
␣␣␣␣PERL_MAGIC_backref
␣␣␣␣PERL_MAGIC_bm
␣␣␣␣PERL_MAGIC_collxfrm
␣␣␣␣PERL_MAGIC_dbfile
␣␣␣␣PERL_MAGIC_dbline
␣␣␣␣PERL_MAGIC_defelem
␣␣␣␣PERL_MAGIC_env
␣␣␣␣PERL_MAGIC_envelem
␣␣␣␣PERL_MAGIC_ext
␣␣␣␣PERL_MAGIC_fm
␣␣␣␣PERL_MAGIC_glob
␣␣␣␣PERL_MAGIC_isa
␣␣␣␣PERL_MAGIC_isaelem
␣␣␣␣PERL_MAGIC_mutex
␣␣␣␣PERL_MAGIC_nkeys
␣␣␣␣PERL_MAGIC_overload
␣␣␣␣PERL_MAGIC_overload_elem
␣␣␣␣PERL_MAGIC_overload_table
␣␣␣␣PERL_MAGIC_pos
␣␣␣␣PERL_MAGIC_qr
␣␣␣␣PERL_MAGIC_regdata
␣␣␣␣PERL_MAGIC_regdatum
␣␣␣␣PERL_MAGIC_regex_global
␣␣␣␣PERL_MAGIC_shared
␣␣␣␣PERL_MAGIC_shared_scalar
␣␣␣␣PERL_MAGIC_sig
␣␣␣␣PERL_MAGIC_sigelem
␣␣␣␣PERL_MAGIC_substr
␣␣␣␣PERL_MAGIC_sv
␣␣␣␣PERL_MAGIC_taint
␣␣␣␣PERL_MAGIC_tied
␣␣␣␣PERL_MAGIC_tiedelem
␣␣␣␣PERL_MAGIC_tiedscalar
␣␣␣␣PERL_MAGIC_utf8
␣␣␣␣PERL_MAGIC_uvar
␣␣␣␣PERL_MAGIC_uvar_elem
␣␣␣␣PERL_MAGIC_vec
␣␣␣␣PERL_MAGIC_vstring
␣␣␣␣PERL_PV_ESCAPE_ALL
␣␣␣␣PERL_PV_ESCAPE_FIRSTCHAR
␣␣␣␣PERL_PV_ESCAPE_NOBACKSLASH
␣␣␣␣PERL_PV_ESCAPE_NOCLEAR
␣␣␣␣PERL_PV_ESCAPE_QUOTE
␣␣␣␣PERL_PV_ESCAPE_RE
␣␣␣␣PERL_PV_ESCAPE_UNI
␣␣␣␣PERL_PV_ESCAPE_UNI_DETECT
␣␣␣␣PERL_PV_PRETTY_DUMP
␣␣␣␣PERL_PV_PRETTY_ELLIPSES
␣␣␣␣PERL_PV_PRETTY_LTGT
␣␣␣␣PERL_PV_PRETTY_NOCLEAR
␣␣␣␣PERL_PV_PRETTY_QUOTE
␣␣␣␣PERL_PV_PRETTY_REGPROP
␣␣␣␣PERL_QUAD_MAX
␣␣␣␣PERL_QUAD_MIN
␣␣␣␣PERL_SCAN_ALLOW_UNDERSCORES
␣␣␣␣PERL_SCAN_DISALLOW_PREFIX
␣␣␣␣PERL_SCAN_GREATER_THAN_UV_MAX
␣␣␣␣PERL_SCAN_SILENT_ILLDIGIT
␣␣␣␣PERL_SHORT_MAX
␣␣␣␣PERL_SHORT_MIN
␣␣␣␣PERL_SIGNALS_UNSAFE_FLAG
␣␣␣␣PERL_UCHAR_MAX
␣␣␣␣PERL_UCHAR_MIN
␣␣␣␣PERL_UINT_MAX
␣␣␣␣PERL_UINT_MIN
␣␣␣␣PERL_ULONG_MAX
␣␣␣␣PERL_ULONG_MIN
␣␣␣␣PERL_UNUSED_ARG
␣␣␣␣PERL_UNUSED_CONTEXT
␣␣␣␣PERL_UNUSED_DECL
␣␣␣␣PERL_UNUSED_RESULT
␣␣␣␣PERL_UNUSED_VAR
␣␣␣␣PERL_UQUAD_MAX
␣␣␣␣PERL_UQUAD_MIN
␣␣␣␣PERL_USE_GCC_BRACE_GROUPS
␣␣␣␣PERL_USHORT_MAX
␣␣␣␣PERL_USHORT_MIN
␣␣␣␣PERL_VERSION_EQ
␣␣␣␣PERL_VERSION_GE
␣␣␣␣PERL_VERSION_GT
␣␣␣␣PERL_VERSION_LE
␣␣␣␣PERL_VERSION_LT
␣␣␣␣PERL_VERSION_NE
␣␣␣␣Perl_warner
␣␣␣␣Perl_warner_nocontext
␣␣␣␣PL_bufend
␣␣␣␣PL_bufptr
␣␣␣␣PL_compiling
␣␣␣␣PL_copline
␣␣␣␣PL_curcop
␣␣␣␣PL_curstash
␣␣␣␣PL_DBsignal
␣␣␣␣PL_DBsingle
␣␣␣␣PL_DBsub
␣␣␣␣PL_DBtrace
␣␣␣␣PL_debstash
␣␣␣␣PL_defgv
␣␣␣␣PL_diehook
␣␣␣␣PL_dirty
␣␣␣␣PL_dowarn
␣␣␣␣PL_errgv
␣␣␣␣PL_error_count
␣␣␣␣PL_expect
␣␣␣␣PL_hexdigit
␣␣␣␣PL_hints
␣␣␣␣PL_in_my
␣␣␣␣PL_in_my_stash
␣␣␣␣PL_laststatval
␣␣␣␣PL_lex_state
␣␣␣␣PL_lex_stuff
␣␣␣␣PL_linestr
␣␣␣␣PL_mess_sv
␣␣␣␣PL_na
␣␣␣␣PL_no_modify
␣␣␣␣PL_parser
␣␣␣␣PL_perldb
␣␣␣␣PL_perl_destruct_level
␣␣␣␣PL_ppaddr
␣␣␣␣PL_rsfp
␣␣␣␣PL_rsfp_filters
␣␣␣␣PL_signals
␣␣␣␣PL_stack_base
␣␣␣␣PL_stack_sp
␣␣␣␣PL_statcache
␣␣␣␣PL_stdingv
␣␣␣␣PL_Sv
␣␣␣␣PL_sv_arenaroot
␣␣␣␣PL_sv_no
␣␣␣␣PL_sv_undef
␣␣␣␣PL_sv_yes
␣␣␣␣PL_tainted
␣␣␣␣PL_tainting
␣␣␣␣PL_tokenbuf
␣␣␣␣PL_Xpv
␣␣␣␣_pMY_CXT
␣␣␣␣pMY_CXT
␣␣␣␣pMY_CXT_
␣␣␣␣Poison
␣␣␣␣PoisonFree
␣␣␣␣PoisonNew
␣␣␣␣PoisonWith
␣␣␣␣pTHX
␣␣␣␣pTHX_
␣␣␣␣PTR2IV
␣␣␣␣PTR2nat
␣␣␣␣PTR2NV
␣␣␣␣PTR2ul
␣␣␣␣PTR2UV
␣␣␣␣PTRV
␣␣␣␣PUSHmortal
␣␣␣␣PUSHu
␣␣␣␣pv_display
␣␣␣␣pv_escape
␣␣␣␣pv_pretty
␣␣␣␣REPLACEMENT_CHARACTER_UTF8
␣␣␣␣RESTORE_LC_NUMERIC
␣␣␣␣SAVE_DEFSV
␣␣␣␣START_EXTERN_C
␣␣␣␣START_MY_CXT
␣␣␣␣start_subparse
␣␣␣␣STMT_END
␣␣␣␣STMT_START
␣␣␣␣STORE_LC_NUMERIC_SET_STANDARD
␣␣␣␣STORE_NUMERIC_SET_STANDARD
␣␣␣␣STR_WITH_LEN
␣␣␣␣sv_2pvbyte
␣␣␣␣sv_2pvbyte_nolen
␣␣␣␣sv_2pv_flags
␣␣␣␣sv_2pv_nolen
␣␣␣␣sv_2uv
␣␣␣␣sv_catpvf_mg
␣␣␣␣sv_catpvf_mg_nocontext
␣␣␣␣sv_catpv_mg
␣␣␣␣sv_catpvn_mg
␣␣␣␣sv_catpvn_nomg
␣␣␣␣sv_catpvs
␣␣␣␣sv_catsv_mg
␣␣␣␣sv_catsv_nomg
␣␣␣␣SV_CONST_RETURN
␣␣␣␣SV_COW_DROP_PV
␣␣␣␣SV_COW_SHARED_HASH_KEYS
␣␣␣␣SVf
␣␣␣␣SVfARG
␣␣␣␣SVf_UTF8
␣␣␣␣SvGETMAGIC
␣␣␣␣SV_GMAGIC
␣␣␣␣SV_HAS_TRAILING_NUL
␣␣␣␣SV_IMMEDIATE_UNREF
␣␣␣␣SvIV_nomg
␣␣␣␣sv_len_utf8
␣␣␣␣sv_len_utf8_nomg
␣␣␣␣sv_magic_portable
␣␣␣␣SvMAGIC_set
␣␣␣␣sv_mortalcopy_flags
␣␣␣␣SV_MUTABLE_RETURN
␣␣␣␣SV_NOSTEAL
␣␣␣␣SvNV_nomg
␣␣␣␣SvPVbyte
␣␣␣␣SvPV_const
␣␣␣␣SvPV_flags
␣␣␣␣SvPV_flags_const
␣␣␣␣SvPV_flags_const_nolen
␣␣␣␣SvPV_flags_mutable
␣␣␣␣SvPV_force
␣␣␣␣SvPV_force_flags
␣␣␣␣SvPV_force_flags_mutable
␣␣␣␣SvPV_force_flags_nolen
␣␣␣␣SvPV_force_mutable
␣␣␣␣SvPV_force_nolen
␣␣␣␣SvPV_force_nomg
␣␣␣␣SvPV_force_nomg_nolen
␣␣␣␣SvPV_mutable
␣␣␣␣sv_pvn_force_flags
␣␣␣␣sv_pvn_nomg
␣␣␣␣SvPV_nolen
␣␣␣␣SvPV_nolen_const
␣␣␣␣SvPV_nomg
␣␣␣␣SvPV_nomg_const
␣␣␣␣SvPV_nomg_const_nolen
␣␣␣␣SvPV_nomg_nolen
␣␣␣␣SvPV_renew
␣␣␣␣SvPVX_const
␣␣␣␣SvPVX_mutable
␣␣␣␣SvPVx_nolen_const
␣␣␣␣SvREFCNT_inc
␣␣␣␣SvREFCNT_inc_NN
␣␣␣␣SvREFCNT_inc_simple
␣␣␣␣SvREFCNT_inc_simple_NN
␣␣␣␣SvREFCNT_inc_simple_void
␣␣␣␣SvREFCNT_inc_simple_void_NN
␣␣␣␣SvREFCNT_inc_void
␣␣␣␣SvREFCNT_inc_void_NN
␣␣␣␣SvRV_set
␣␣␣␣SvRX
␣␣␣␣SvRXOK
␣␣␣␣sv_setiv_mg
␣␣␣␣sv_setnv_mg
␣␣␣␣sv_setpvf_mg
␣␣␣␣sv_setpvf_mg_nocontext
␣␣␣␣sv_setpv_mg
␣␣␣␣sv_setpvn_mg
␣␣␣␣sv_setpvs
␣␣␣␣sv_setsv_flags
␣␣␣␣sv_setsv_mg
␣␣␣␣sv_setsv_nomg
␣␣␣␣sv_setuv
␣␣␣␣sv_setuv_mg
␣␣␣␣SvSHARED_HASH
␣␣␣␣SV_SMAGIC
␣␣␣␣SvSTASH_set
␣␣␣␣SvTRUE_nomg
␣␣␣␣sv_unmagicext
␣␣␣␣SvUOK
␣␣␣␣sv_usepvn_mg
␣␣␣␣SvUTF8
␣␣␣␣SV_UTF8_NO_ENCODING
␣␣␣␣sv_uv
␣␣␣␣SvUV
␣␣␣␣SvUV_nomg
␣␣␣␣SvUV_set
␣␣␣␣SvUVX
␣␣␣␣SvUVx
␣␣␣␣SvUVXx
␣␣␣␣sv_vcatpvf
␣␣␣␣sv_vcatpvf_mg
␣␣␣␣sv_vsetpvf
␣␣␣␣sv_vsetpvf_mg
␣␣␣␣SvVSTRING_mg
␣␣␣␣switch_to_global_locale
␣␣␣␣sync_locale
␣␣␣␣toFOLD_utf8_safe
␣␣␣␣toFOLD_uvchr
␣␣␣␣toLOWER_utf8_safe
␣␣␣␣toLOWER_uvchr
␣␣␣␣toTITLE_utf8_safe
␣␣␣␣toTITLE_uvchr
␣␣␣␣toUPPER_utf8_safe
␣␣␣␣toUPPER_uvchr
␣␣␣␣UNDERBAR
␣␣␣␣UNICODE_REPLACEMENT
␣␣␣␣UNI_TO_NATIVE
␣␣␣␣UNLIKELY
␣␣␣␣UNLOCK_LC_NUMERIC_STANDARD
␣␣␣␣UNLOCK_NUMERIC_STANDARD
␣␣␣␣UTF8_CHK_SKIP
␣␣␣␣UTF8f
␣␣␣␣UTF8fARG
␣␣␣␣UTF8_IS_INVARIANT
␣␣␣␣UTF8_MAXBYTES
␣␣␣␣UTF8_MAXBYTES_CASE
␣␣␣␣UTF8_SAFE_SKIP
␣␣␣␣UTF8_SKIP
␣␣␣␣utf8_to_uvchr
␣␣␣␣utf8_to_uvchr_buf
␣␣␣␣UVCHR_IS_INVARIANT
␣␣␣␣UVCHR_SKIP
␣␣␣␣UVof
␣␣␣␣UVSIZE
␣␣␣␣UVTYPE
␣␣␣␣UVuf
␣␣␣␣UVXf
␣␣␣␣UVxf
␣␣␣␣vload_module
␣␣␣␣vmess
␣␣␣␣vnewSVpvf
␣␣␣␣vwarner
␣␣␣␣WARN_ALL
␣␣␣␣WARN_AMBIGUOUS
␣␣␣␣WARN_ASSERTIONS
␣␣␣␣WARN_BAREWORD
␣␣␣␣WARN_CLOSED
␣␣␣␣WARN_CLOSURE
␣␣␣␣WARN_DEBUGGING
␣␣␣␣WARN_DEPRECATED
␣␣␣␣WARN_DIGIT
␣␣␣␣warner
␣␣␣␣WARN_EXEC
␣␣␣␣WARN_EXITING
␣␣␣␣WARN_GLOB
␣␣␣␣WARN_INPLACE
␣␣␣␣WARN_INTERNAL
␣␣␣␣WARN_IO
␣␣␣␣WARN_LAYER
␣␣␣␣WARN_MALLOC
␣␣␣␣WARN_MISC
␣␣␣␣WARN_NEWLINE
␣␣␣␣warn_nocontext
␣␣␣␣WARN_NUMERIC
␣␣␣␣WARN_ONCE
␣␣␣␣WARN_OVERFLOW
␣␣␣␣WARN_PACK
␣␣␣␣WARN_PARENTHESIS
␣␣␣␣WARN_PIPE
␣␣␣␣WARN_PORTABLE
␣␣␣␣WARN_PRECEDENCE
␣␣␣␣WARN_PRINTF
␣␣␣␣WARN_PROTOTYPE
␣␣␣␣WARN_QW
␣␣␣␣WARN_RECURSION
␣␣␣␣WARN_REDEFINE
␣␣␣␣WARN_REGEXP
␣␣␣␣WARN_RESERVED
␣␣␣␣WARN_SEMICOLON
␣␣␣␣WARN_SEVERE
␣␣␣␣WARN_SIGNAL
␣␣␣␣WARN_SUBSTR
␣␣␣␣warn_sv
␣␣␣␣WARN_SYNTAX
␣␣␣␣WARN_TAINT
␣␣␣␣WARN_THREADS
␣␣␣␣WARN_UNINITIALIZED
␣␣␣␣WARN_UNOPENED
␣␣␣␣WARN_UNPACK
␣␣␣␣WARN_UNTIE
␣␣␣␣WARN_UTF8
␣␣␣␣WARN_VOID
␣␣␣␣WIDEST_UTYPE
␣␣␣␣XCPT_CATCH
␣␣␣␣XCPT_RETHROW
␣␣␣␣XCPT_TRY_END
␣␣␣␣XCPT_TRY_START
␣␣␣␣XPUSHmortal
␣␣␣␣XPUSHu
␣␣␣␣XSprePUSH
␣␣␣␣XSPROTO
␣␣␣␣XSRETURN
␣␣␣␣XSRETURN_UV
␣␣␣␣XST_mUV
␣␣␣␣ZeroD

=head2␣Supported␣Perl␣API,␣sorted␣by␣version

The␣table␣in␣this␣section␣lists␣all␣the␣Perl␣API␣elements␣available,␣sorted␣by
the␣version␣in␣which␣support␣starts.␣␣This␣includes␣all␣the␣elements␣that
F<ppport.h>␣helps␣out␣with,␣as␣well␣as␣those␣elements␣that␣it␣doesn't.

In␣some␣cases,␣it␣doesn't␣make␣practical␣sense␣for␣elements␣to␣be␣supported
earlier␣than␣they␣already␣are.␣␣For␣example,␣UTF-8␣functionality␣isn't
provided␣prior␣to␣the␣release␣where␣it␣was␣first␣introduced.

But␣in␣other␣cases,␣it␣just␣is␣that␣no␣one␣has␣implemented␣support␣yet.
Patches␣welcome!␣␣Some␣elements␣are␣ported␣backward␣for␣some␣releases,␣but␣not
all␣the␣way␣to␣5.003_07.

If␣an␣element,␣call␣it␣ELEMENT,␣is␣not␣on␣this␣list,␣try␣using␣this␣command␣to
find␣out␣why:

␣perl␣ppport.h␣--api-info=ELEMENT

A␣few␣of␣the␣entries␣in␣the␣list␣below␣are␣marked␣as␣DEPRECATED.␣␣You␣should
not␣use␣these␣for␣new␣code,␣and␣should␣be␣converting␣existing␣uses␣to␣use
something␣better.

Some␣of␣the␣entries␣in␣the␣list␣are␣marked␣as␣"experimental".␣␣This␣means
these␣should␣not␣generally␣be␣used.␣␣They␣may␣be␣removed␣or␣changed␣without
notice.␣␣You␣can␣ask␣why␣they␣are␣experimental␣by␣sending␣email␣to
L<mailto:perl5-porters@perl.org>.

And␣some␣of␣the␣entries␣are␣marked␣as␣"undocumented".␣␣This␣means␣that␣they
aren't␣necessarily␣considered␣stable,␣and␣could␣be␣changed␣or␣removed␣in␣some
future␣release␣without␣warning.␣␣It␣is␣therefore␣a␣bad␣idea␣to␣use␣them
without␣further␣checking.␣␣It␣could␣be␣that␣these␣are␣considered␣to␣be␣for
perl␣core␣use␣only;␣or␣it␣could␣be,␣though,␣that␣C<Devel::PPPort>␣doesn't␣know
where␣to␣find␣their␣documentation,␣or␣that␣it's␣just␣an␣oversight␣that␣they
haven't␣been␣documented.␣␣If␣you␣want␣to␣use␣one,␣and␣potentially␣have␣it
backported,␣first␣send␣mail␣to␣L<mailto:perl5-porters@perl.org>.

=over␣4

=item␣perl␣5.33.1

␣␣dMY_CXT_SV

=item␣perl␣5.33.0

␣␣PERL_INC_VERSION_LIST
␣␣USE_C_BACKTRACE

=item␣perl␣5.32.0

␣␣HAS_SOCKADDR_STORAGE

=item␣perl␣5.31.7

␣␣HASATTRIBUTE_ALWAYS_INLINE
␣␣HAS_ISLESS
␣␣HAS_WCRTOMB
␣␣sv_isa_sv␣␣(marked␣experimental)
␣␣WARN_EXPERIMENTAL__ISA

=item␣perl␣5.31.6

␣␣GDBMNDBM_H_USES_PROTOTYPES
␣␣HAS_DBMINIT_PROTO
␣␣I_DBM
␣␣I_NDBM
␣␣NDBM_H_USES_PROTOTYPES

=item␣perl␣5.31.5

␣␣isALPHANUMERIC_utf8
␣␣isALPHA_utf8
␣␣isASCII_utf8
␣␣isBLANK_utf8
␣␣isCNTRL_utf8
␣␣isDIGIT_utf8
␣␣isGRAPH_utf8
␣␣isIDCONT_utf8
␣␣isIDFIRST_utf8
␣␣isLOWER_utf8
␣␣isPRINT_utf8
␣␣isPSXSPC_utf8
␣␣isPUNCT_utf8
␣␣isSPACE_utf8
␣␣isUPPER_utf8
␣␣isWORDCHAR_utf8
␣␣isXDIGIT_utf8
␣␣toFOLD_utf8
␣␣toLOWER_utf8
␣␣toTITLE_utf8
␣␣toUPPER_utf8

=item␣perl␣5.31.4

␣␣sv_2pvbyte_flags
␣␣sv_2pvutf8_flags␣␣(undocumented)
␣␣SvAMAGIC_off
␣␣SvAMAGIC_on
␣␣SvPVbyte_nomg
␣␣SvPVbyte_or_null
␣␣SvPVbyte_or_null_nomg
␣␣SvPVutf8_nomg
␣␣SvPVutf8_or_null
␣␣SvPVutf8_or_null_nomg
␣␣sv_utf8_downgrade_flags
␣␣sv_utf8_downgrade_nomg

=item␣perl␣5.31.3

␣␣parse_subsignature␣␣(marked␣experimental)
␣␣SANE_ERRSV
␣␣STORE_LC_NUMERIC_SET_TO_NEEDED_IN
␣␣WITH_LC_NUMERIC_SET_TO_NEEDED
␣␣WITH_LC_NUMERIC_SET_TO_NEEDED_IN

=item␣perl␣5.29.10

␣␣my_strtod
␣␣Strtod

=item␣perl␣5.29.9

␣␣HAS_TOWLOWER
␣␣HAS_TOWUPPER
␣␣I_WCTYPE
␣␣WARN_EXPERIMENTAL__PRIVATE_USE
␣␣WARN_EXPERIMENTAL__UNIPROP_WILDCARDS
␣␣WARN_EXPERIMENTAL__VLB

=item␣perl␣5.27.11

␣␣HAS_DUPLOCALE
␣␣HAS_STRTOD_L

=item␣perl␣5.27.9

␣␣PERL_MAGIC_nonelem
␣␣thread_locale_init␣␣(marked␣experimental)␣␣(undocumented)
␣␣thread_locale_term␣␣(marked␣experimental)␣␣(undocumented)
␣␣utf8n_to_uvchr_msgs
␣␣uvchr_to_utf8_flags_msgs
␣␣WARN_EXPERIMENTAL__ALPHA_ASSERTIONS

=item␣perl␣5.27.8

␣␣HAS_ACCEPT4
␣␣HAS_DUP3
␣␣HAS_MKOSTEMP
␣␣HAS_PIPE2
␣␣newWHENOP
␣␣WARN_EXPERIMENTAL__SCRIPT_RUN

=item␣perl␣5.27.7

␣␣WARN_SHADOW

=item␣perl␣5.27.6

␣␣HAS_MBRLEN
␣␣HAS_MBRTOWC
␣␣HAS_NANOSLEEP
␣␣HAS_STRNLEN
␣␣HAS_STRTOLD_L
␣␣HAS_THREAD_SAFE_NL_LANGINFO_L
␣␣I_WCHAR
␣␣wrap_keyword_plugin␣␣(marked␣experimental)

=item␣perl␣5.27.5

␣␣HAS_MEMRCHR

=item␣perl␣5.27.4

␣␣HAS_FCHMODAT
␣␣HAS_LINKAT
␣␣HAS_OPENAT
␣␣HAS_RENAMEAT
␣␣HAS_UNLINKAT
␣␣mg_freeext
␣␣Perl_langinfo
␣␣sv_rvunweaken

=item␣perl␣5.27.3

␣␣cv_get_call_checker_flags
␣␣PL_sv_zero
␣␣sv_string_from_errnum

=item␣perl␣5.27.2

␣␣Perl_setlocale
␣␣UTF8_DISALLOW_PERL_EXTENDED
␣␣UTF8_WARN_PERL_EXTENDED

=item␣perl␣5.27.1

␣␣bytes_from_utf8_loc␣␣(marked␣experimental)␣␣(undocumented)
␣␣is_utf8_invariant_string_loc

=item␣perl␣5.25.11

␣␣DEFAULT_INC_EXCLUDES_DOT

=item␣perl␣5.25.10

␣␣op_class

=item␣perl␣5.25.9

␣␣isASCII_LC_utf8_safe

=item␣perl␣5.25.8

␣␣sv_set_undef

=item␣perl␣5.25.7

␣␣CLEAR_ERRSV
␣␣DOUBLE_HAS_NEGATIVE_ZERO
␣␣DOUBLE_HAS_SUBNORMALS
␣␣DOUBLE_STYLE_IEEE
␣␣LONG_DOUBLE_STYLE_IEEE
␣␣LONG_DOUBLE_STYLE_IEEE_EXTENDED
␣␣utf8_hop_back
␣␣utf8_hop_forward
␣␣utf8_hop_safe

=item␣perl␣5.25.6

␣␣DOUBLE_IS_CRAY_SINGLE_64_BIT
␣␣DOUBLE_IS_IBM_DOUBLE_64_BIT
␣␣DOUBLE_IS_IBM_SINGLE_32_BIT
␣␣is_c9strict_utf8_string
␣␣is_c9strict_utf8_string_loc
␣␣is_c9strict_utf8_string_loclen
␣␣is_strict_utf8_string
␣␣is_strict_utf8_string_loc
␣␣is_strict_utf8_string_loclen
␣␣is_utf8_fixed_width_buf_flags
␣␣is_utf8_fixed_width_buf_loc_flags
␣␣is_utf8_fixed_width_buf_loclen_flags
␣␣is_utf8_string_flags
␣␣is_utf8_string_loc_flags
␣␣is_utf8_string_loclen_flags
␣␣SvPVCLEAR
␣␣sv_setpv_bufsize
␣␣utf8n_to_uvchr_error

=item␣perl␣5.25.5

␣␣isC9_STRICT_UTF8_CHAR
␣␣isSTRICT_UTF8_CHAR
␣␣isUTF8_CHAR_flags
␣␣is_utf8_valid_partial_char
␣␣is_utf8_valid_partial_char_flags
␣␣UTF8_DISALLOW_ILLEGAL_C9_INTERCHANGE
␣␣UTF8_WARN_ILLEGAL_C9_INTERCHANGE

=item␣perl␣5.25.4

␣␣HAS_GAI_STRERROR
␣␣I_XLOCALE
␣␣LONG_DOUBLE_IS_VAX_H_FLOAT

=item␣perl␣5.25.3

␣␣DOUBLE_HAS_INF
␣␣DOUBLE_HAS_NAN
␣␣DOUBLE_IS_VAX_D_FLOAT
␣␣DOUBLE_IS_VAX_F_FLOAT
␣␣DOUBLE_IS_VAX_G_FLOAT
␣␣hv_bucket_ratio␣␣(marked␣experimental)
␣␣WARN_EXPERIMENTAL__DECLARED_REFS

=item␣perl␣5.25.2

␣␣HAS_STRERROR_L

=item␣perl␣5.25.1

␣␣op_parent

=item␣perl␣5.24.0

␣␣HAS_MEMMEM

=item␣perl␣5.23.9

␣␣HAS_FREELOCALE
␣␣HAS_NEWLOCALE
␣␣HAS_USELOCALE

=item␣perl␣5.23.8

␣␣clear_defarray␣␣(undocumented)
␣␣HAS_SIGINFO_SI_ADDR
␣␣HAS_SIGINFO_SI_BAND
␣␣HAS_SIGINFO_SI_ERRNO
␣␣HAS_SIGINFO_SI_PID
␣␣HAS_SIGINFO_SI_STATUS
␣␣HAS_SIGINFO_SI_UID
␣␣HAS_SIGINFO_SI_VALUE
␣␣leave_adjust_stacks␣␣(marked␣experimental)␣␣(undocumented)
␣␣savetmps␣␣(marked␣experimental)␣␣(undocumented)

=item␣perl␣5.23.6

␣␣LONG_DOUBLE_IS_DOUBLEDOUBLE_128_BIT_BE_BE
␣␣LONG_DOUBLE_IS_DOUBLEDOUBLE_128_BIT_BE_LE
␣␣LONG_DOUBLE_IS_DOUBLEDOUBLE_128_BIT_LE_BE
␣␣LONG_DOUBLE_IS_DOUBLEDOUBLE_128_BIT_LE_LE

=item␣perl␣5.23.5

␣␣HAS_FSTATFS
␣␣HAS_FSTATVFS
␣␣HAS_GETMNTENT
␣␣HAS_HASMNTOPT
␣␣HAS_STRUCT_STATFS
␣␣HAS_STRUCT_STATFS_F_FLAGS
␣␣HAS_USTAT
␣␣I_MNTENT
␣␣I_SYS_MOUNT
␣␣I_SYS_STATFS
␣␣I_SYS_STATVFS
␣␣I_SYS_VFS
␣␣I_USTAT

=item␣perl␣5.23.2

␣␣UTF8_IS_NONCHAR
␣␣UTF8_IS_SUPER
␣␣UTF8_IS_SURROGATE

=item␣perl␣5.23.0

␣␣DOUBLEINFBYTES
␣␣DOUBLEMANTBITS
␣␣DOUBLENANBYTES
␣␣LONGDBLINFBYTES
␣␣LONGDBLMANTBITS
␣␣LONGDBLNANBYTES
␣␣NVMANTBITS

=item␣perl␣5.21.10

␣␣DECLARATION_FOR_LC_NUMERIC_MANIPULATION
␣␣RESTORE_LC_NUMERIC
␣␣STORE_LC_NUMERIC_FORCE_TO_UNDERLYING
␣␣STORE_LC_NUMERIC_SET_TO_NEEDED

=item␣perl␣5.21.9

␣␣HAS_LLRINTL
␣␣HAS_LLROUNDL
␣␣HAS_LRINTL
␣␣HAS_LROUNDL
␣␣WARN_EXPERIMENTAL__BITWISE

=item␣perl␣5.21.8

␣␣sv_get_backrefs␣␣(marked␣experimental)
␣␣WARN_EXPERIMENTAL__CONST_ATTR
␣␣WARN_EXPERIMENTAL__RE_STRICT

=item␣perl␣5.21.7

␣␣HAS_REGCOMP
␣␣HAS_STAT
␣␣I_GDBM
␣␣I_GDBMNDBM
␣␣newPADNAMELIST␣␣(marked␣experimental)
␣␣newPADNAMEouter␣␣(marked␣experimental)
␣␣newPADNAMEpvn␣␣(marked␣experimental)
␣␣newUNOP_AUX
␣␣padnamelist_fetch␣␣(marked␣experimental)
␣␣PadnamelistREFCNT␣␣(marked␣experimental)
␣␣PadnamelistREFCNT_dec␣␣(marked␣experimental)
␣␣padnamelist_store␣␣(marked␣experimental)
␣␣PadnameREFCNT␣␣(marked␣experimental)
␣␣PadnameREFCNT_dec␣␣(marked␣experimental)
␣␣PADNAMEt_OUTER

=item␣perl␣5.21.6

␣␣DOUBLE_IS_IEEE_754_128_BIT_BIG_ENDIAN
␣␣DOUBLE_IS_IEEE_754_128_BIT_LITTLE_ENDIAN
␣␣DOUBLE_IS_IEEE_754_32_BIT_BIG_ENDIAN
␣␣DOUBLE_IS_IEEE_754_32_BIT_LITTLE_ENDIAN
␣␣DOUBLE_IS_IEEE_754_64_BIT_BIG_ENDIAN
␣␣DOUBLE_IS_IEEE_754_64_BIT_LITTLE_ENDIAN
␣␣DOUBLE_IS_IEEE_754_64_BIT_MIXED_ENDIAN_BE_LE
␣␣DOUBLE_IS_IEEE_754_64_BIT_MIXED_ENDIAN_LE_BE
␣␣DOUBLE_IS_UNKNOWN_FORMAT
␣␣DOUBLEKIND
␣␣HAS_ASINH
␣␣HAS_ATANH
␣␣HAS_CBRT
␣␣HAS_COPYSIGN
␣␣HAS_ERF
␣␣HAS_ERFC
␣␣HAS_EXP2
␣␣HAS_EXPM1
␣␣HAS_FDIM
␣␣HAS_FMA
␣␣HAS_FMAX
␣␣HAS_FMIN
␣␣HAS_HYPOT
␣␣HAS_ILOGB
␣␣HAS_ISNORMAL
␣␣HAS_LGAMMA
␣␣HAS_LGAMMA_R
␣␣HAS_LLRINT
␣␣HAS_LLROUND
␣␣HAS_LOG1P
␣␣HAS_LOG2
␣␣HAS_LOGB
␣␣HAS_LRINT
␣␣HAS_LROUND
␣␣HAS_NAN
␣␣HAS_NEARBYINT
␣␣HAS_NEXTAFTER
␣␣HAS_NEXTTOWARD
␣␣HAS_REMAINDER
␣␣HAS_REMQUO
␣␣HAS_RINT
␣␣HAS_ROUND
␣␣HAS_SCALBN
␣␣HAS_TGAMMA
␣␣HAS_TRUNC
␣␣newDEFSVOP
␣␣op_convert_list
␣␣WARN_LOCALE

=item␣perl␣5.21.5

␣␣cv_name
␣␣CV_NAME_NOTQUAL
␣␣HAS_LC_MONETARY_2008
␣␣newMETHOP
␣␣newMETHOP_named
␣␣PERL_MAGIC_debugvar
␣␣PERL_MAGIC_lvref
␣␣SV_CATBYTES
␣␣SV_CATUTF8
␣␣WARN_EXPERIMENTAL__REFALIASING

=item␣perl␣5.21.4

␣␣CALL_CHECKER_REQUIRE_GV
␣␣cv_set_call_checker_flags
␣␣grok_infnan
␣␣HAS_ACOSH
␣␣HAS_FEGETROUND
␣␣HAS_FPCLASSIFY
␣␣HAS_ISFINITE
␣␣HAS_ISINFL
␣␣HAS_J0
␣␣HAS_J0L
␣␣HAS_TRUNCL
␣␣I_FENV
␣␣isinfnan
␣␣I_STDINT

=item␣perl␣5.21.3

␣␣HAS_LDEXPL
␣␣LONG_DOUBLE_IS_DOUBLE
␣␣LONG_DOUBLE_IS_DOUBLEDOUBLE_128_BIT_BIG_ENDIAN
␣␣LONG_DOUBLE_IS_DOUBLEDOUBLE_128_BIT_LITTLE_ENDIAN
␣␣LONG_DOUBLE_IS_IEEE_754_128_BIT_BIG_ENDIAN
␣␣LONG_DOUBLE_IS_IEEE_754_128_BIT_LITTLE_ENDIAN
␣␣LONG_DOUBLE_IS_UNKNOWN_FORMAT
␣␣LONG_DOUBLE_IS_X86_80_BIT_BIG_ENDIAN
␣␣LONG_DOUBLE_IS_X86_80_BIT_LITTLE_ENDIAN
␣␣LONG_DOUBLEKIND

=item␣perl␣5.21.2

␣␣grok_number_flags
␣␣op_sibling_splice
␣␣PERL_SCAN_TRAILING
␣␣WARN_MISSING
␣␣WARN_REDUNDANT

=item␣perl␣5.21.1

␣␣HAS_BACKTRACE
␣␣HAS_DLADDR
␣␣HAS_PTRDIFF_T
␣␣HAS_WCSCMP
␣␣HAS_WCSXFRM
␣␣I_EXECINFO
␣␣markstack_grow␣␣(undocumented)
␣␣WARN_EXPERIMENTAL__WIN32_PERLIO

=item␣perl␣5.19.10

␣␣OP_TYPE_IS_OR_WAS

=item␣perl␣5.19.9

␣␣WARN_EXPERIMENTAL__SIGNATURES

=item␣perl␣5.19.7

␣␣OP_TYPE_IS

=item␣perl␣5.19.5

␣␣WARN_EXPERIMENTAL__POSTDEREF

=item␣perl␣5.19.4

␣␣IS_SAFE_SYSCALL
␣␣is_safe_syscall
␣␣WARN_SYSCALLS

=item␣perl␣5.19.3

␣␣PERL_EXIT_ABORT
␣␣PERL_EXIT_WARN
␣␣sv_pos_b2u_flags

=item␣perl␣5.19.2

␣␣G_METHOD_NAMED

=item␣perl␣5.19.1

␣␣toFOLD
␣␣toLOWER_L1
␣␣toTITLE

=item␣perl␣5.18.0

␣␣hv_rand_set␣␣(undocumented)

=item␣perl␣5.17.11

␣␣WARN_EXPERIMENTAL__SMARTMATCH

=item␣perl␣5.17.8

␣␣isALPHANUMERIC_LC_uvchr
␣␣isIDCONT_LC_uvchr
␣␣WARN_EXPERIMENTAL__REGEX_SETS

=item␣perl␣5.17.7

␣␣isALNUMC_LC_uvchr
␣␣isASCII_LC_uvchr
␣␣isBLANK_LC_uvchr
␣␣isPSXSPC_LC_uvchr
␣␣isWORDCHAR_LC_uvchr
␣␣isXDIGIT_LC_uvchr
␣␣SvREFCNT_dec_NN
␣␣SvTRUE_NN
␣␣SvTRUE_nomg_NN

=item␣perl␣5.17.6

␣␣READ_XDIGIT

=item␣perl␣5.17.5

␣␣WARN_EXPERIMENTAL__LEXICAL_SUBS

=item␣perl␣5.17.4

␣␣GV_SUPER
␣␣HAS_IP_MREQ_SOURCE
␣␣newMYSUB␣␣(undocumented)
␣␣newSVpadname␣␣(marked␣experimental)
␣␣PadARRAY␣␣(marked␣experimental)
␣␣PadlistARRAY␣␣(marked␣experimental)
␣␣PadlistMAX␣␣(marked␣experimental)
␣␣PadlistNAMES␣␣(marked␣experimental)
␣␣PadlistNAMESARRAY␣␣(marked␣experimental)
␣␣PadlistNAMESMAX␣␣(marked␣experimental)
␣␣PadlistREFCNT␣␣(marked␣experimental)
␣␣PadMAX␣␣(marked␣experimental)
␣␣PadnameLEN␣␣(marked␣experimental)
␣␣PadnamelistARRAY␣␣(marked␣experimental)
␣␣PadnamelistMAX␣␣(marked␣experimental)
␣␣PadnamePV␣␣(marked␣experimental)
␣␣PadnameSV␣␣(marked␣experimental)
␣␣PadnameUTF8␣␣(marked␣experimental)
␣␣PL_comppad_name␣␣(marked␣experimental)
␣␣WARN_EXPERIMENTAL

=item␣perl␣5.17.2

␣␣HAS_IP_MREQ
␣␣PERL_RELOCATABLE_INC
␣␣sv_copypv_flags
␣␣sv_copypv_nomg
␣␣sv_vcatpvfn_flags

=item␣perl␣5.17.1

␣␣alloccopstash␣␣(marked␣experimental)
␣␣CopSTASHPV_set

=item␣perl␣5.16.0

␣␣CopLABEL_len
␣␣CopLABEL_len_flags

=item␣perl␣5.15.8

␣␣HAS_IPV6_MREQ
␣␣HAS_SOCKADDR_IN6
␣␣is_utf8_char_buf
␣␣wrap_op_checker

=item␣perl␣5.15.7

␣␣HAS_ISBLANK

=item␣perl␣5.15.6

␣␣newCONSTSUB_flags

=item␣perl␣5.15.4

␣␣gv_autoload_pv
␣␣gv_autoload_pvn
␣␣gv_autoload_sv
␣␣gv_fetchmethod_pv_flags␣␣(marked␣experimental)␣␣(undocumented)
␣␣gv_fetchmethod_pvn_flags␣␣(marked␣experimental)␣␣(undocumented)
␣␣gv_fetchmethod_sv_flags␣␣(marked␣experimental)␣␣(undocumented)
␣␣gv_fetchmeth_pv
␣␣gv_fetchmeth_pv_autoload
␣␣gv_fetchmeth_pvn
␣␣gv_fetchmeth_pvn_autoload
␣␣gv_fetchmeth_sv
␣␣gv_fetchmeth_sv_autoload
␣␣gv_init_pv
␣␣gv_init_sv
␣␣HvENAMELEN
␣␣HvENAMEUTF8
␣␣HvNAMELEN
␣␣HvNAMEUTF8
␣␣newGVgen_flags␣␣(undocumented)
␣␣sv_derived_from_pv
␣␣sv_derived_from_pvn
␣␣sv_derived_from_sv
␣␣sv_does_pv
␣␣sv_does_pvn
␣␣sv_does_sv
␣␣sv_ref
␣␣whichsig_pv
␣␣whichsig_pvn
␣␣whichsig_sv

=item␣perl␣5.15.3

␣␣GV_ADDMG
␣␣gv_fetchsv_nomg
␣␣GV_NO_SVGMAGIC
␣␣I_STDBOOL
␣␣QUAD_IS___INT64

=item␣perl␣5.15.2

␣␣ST_INO_SIGN
␣␣ST_INO_SIZE
␣␣XS_EXTERNAL
␣␣XS_INTERNAL

=item␣perl␣5.15.1

␣␣cop_fetch_label␣␣(marked␣experimental)
␣␣cop_store_label␣␣(marked␣experimental)
␣␣pad_add_name_pv
␣␣pad_add_name_pvn
␣␣pad_add_name_pvs
␣␣pad_add_name_sv
␣␣pad_findmy_pv
␣␣pad_findmy_pvn
␣␣pad_findmy_pvs
␣␣pad_findmy_sv

=item␣perl␣5.13.10

␣␣WARN_NONCHAR
␣␣WARN_NON_UNICODE
␣␣WARN_SURROGATE

=item␣perl␣5.13.9

␣␣HAS_SIN6_SCOPE_ID
␣␣PERL_PV_ESCAPE_NONASCII
␣␣UTF8_DISALLOW_ILLEGAL_INTERCHANGE
␣␣UTF8_DISALLOW_NONCHAR
␣␣UTF8_DISALLOW_SUPER
␣␣UTF8_DISALLOW_SURROGATE
␣␣UTF8_WARN_ILLEGAL_INTERCHANGE
␣␣UTF8_WARN_NONCHAR
␣␣UTF8_WARN_SUPER
␣␣UTF8_WARN_SURROGATE

=item␣perl␣5.13.8

␣␣parse_arithexpr␣␣(marked␣experimental)
␣␣parse_fullexpr␣␣(marked␣experimental)
␣␣parse_listexpr␣␣(marked␣experimental)
␣␣parse_termexpr␣␣(marked␣experimental)

=item␣perl␣5.13.7

␣␣amagic_deref_call␣␣(undocumented)
␣␣bytes_cmp_utf8
␣␣cophh_2hv␣␣(marked␣experimental)
␣␣cophh_copy␣␣(marked␣experimental)
␣␣cophh_delete_pv␣␣(marked␣experimental)
␣␣cophh_delete_pvn␣␣(marked␣experimental)
␣␣cophh_delete_pvs␣␣(marked␣experimental)
␣␣cophh_delete_sv␣␣(marked␣experimental)
␣␣cophh_fetch_pv␣␣(marked␣experimental)
␣␣cophh_fetch_pvn␣␣(marked␣experimental)
␣␣cophh_fetch_pvs␣␣(marked␣experimental)
␣␣cophh_fetch_sv␣␣(marked␣experimental)
␣␣cophh_free␣␣(marked␣experimental)
␣␣COPHH_KEY_UTF8
␣␣cophh_new_empty␣␣(marked␣experimental)
␣␣cophh_store_pv␣␣(marked␣experimental)
␣␣cophh_store_pvn␣␣(marked␣experimental)
␣␣cophh_store_pvs␣␣(marked␣experimental)
␣␣cophh_store_sv␣␣(marked␣experimental)
␣␣cop_hints_2hv
␣␣cop_hints_fetch_pv
␣␣cop_hints_fetch_pvn
␣␣cop_hints_fetch_pvs
␣␣cop_hints_fetch_sv
␣␣custom_op_register
␣␣dirp_dup␣␣(undocumented)
␣␣HvENAME
␣␣newFOROP
␣␣newWHILEOP
␣␣OP_CLASS
␣␣op_lvalue␣␣(marked␣experimental)
␣␣op_scope␣␣(marked␣experimental)
␣␣parse_barestmt␣␣(marked␣experimental)
␣␣parse_block␣␣(marked␣experimental)
␣␣parse_label␣␣(marked␣experimental)
␣␣PARSE_OPTIONAL
␣␣PL_phase
␣␣XopDISABLE
␣␣XopENABLE
␣␣XopENTRY
␣␣XopENTRYCUSTOM
␣␣XopENTRY_set
␣␣XopFLAGS

=item␣perl␣5.13.6

␣␣ck_entersub_args_list
␣␣ck_entersub_args_proto
␣␣ck_entersub_args_proto_or_list
␣␣cv_get_call_checker
␣␣cv_set_call_checker
␣␣gv_fetchpvn
␣␣lex_stuff_pv␣␣(marked␣experimental)
␣␣LINKLIST
␣␣mg_free_type
␣␣newSVpv_share
␣␣op_append_elem
␣␣op_append_list
␣␣op_contextualize
␣␣op_linklist
␣␣op_prepend_elem
␣␣parse_stmtseq␣␣(marked␣experimental)
␣␣PERL_MAGIC_checkcall
␣␣rv2cv_op_cv
␣␣RV2CVOPCV_MARK_EARLY
␣␣RV2CVOPCV_RETURN_NAME_GV
␣␣savesharedpvs
␣␣savesharedsvpv
␣␣sv_catpv_flags
␣␣sv_catpv_nomg
␣␣sv_catpvs_flags
␣␣sv_catpvs_mg
␣␣sv_catpvs_nomg
␣␣sv_cmp_flags
␣␣sv_cmp_locale_flags
␣␣sv_collxfrm_flags
␣␣sv_eq_flags
␣␣sv_setpvs_mg
␣␣sv_setref_pvs

=item␣perl␣5.13.5

␣␣lex_stuff_pvs␣␣(marked␣experimental)
␣␣parse_fullstmt␣␣(marked␣experimental)
␣␣PL_rpeepp

=item␣perl␣5.13.4

␣␣HAS_STATIC_INLINE
␣␣PERL_STATIC_INLINE
␣␣XS_APIVERSION_BOOTCHECK

=item␣perl␣5.13.3

␣␣blockhook_register␣␣(marked␣experimental)

=item␣perl␣5.13.2

␣␣clone_params_del␣␣(undocumented)
␣␣clone_params_new␣␣(undocumented)
␣␣find_rundefsv
␣␣foldEQ
␣␣foldEQ_locale
␣␣hv_fill
␣␣sv_dec_nomg
␣␣sv_dup_inc␣␣(undocumented)
␣␣sv_inc_nomg

=item␣perl␣5.13.1

␣␣sv_2nv_flags

=item␣perl␣5.13.0

␣␣HAS_PRCTL
␣␣HAS_PRCTL_SET_NAME

=item␣perl␣5.11.5

␣␣sv_pos_u2b_flags

=item␣perl␣5.11.4

␣␣prescan_version
␣␣WARN_ILLEGALPROTO

=item␣perl␣5.11.2

␣␣CHARBITS
␣␣ENTER_with_name
␣␣LEAVE_with_name
␣␣lex_bufutf8␣␣(marked␣experimental)
␣␣lex_discard_to␣␣(marked␣experimental)
␣␣lex_grow_linestr␣␣(marked␣experimental)
␣␣LEX_KEEP_PREVIOUS
␣␣lex_next_chunk␣␣(marked␣experimental)
␣␣lex_peek_unichar␣␣(marked␣experimental)
␣␣lex_read_space␣␣(marked␣experimental)
␣␣lex_read_to␣␣(marked␣experimental)
␣␣lex_read_unichar␣␣(marked␣experimental)
␣␣lex_stuff_pvn␣␣(marked␣experimental)
␣␣lex_stuff_sv␣␣(marked␣experimental)
␣␣LEX_STUFF_UTF8
␣␣lex_unstuff␣␣(marked␣experimental)
␣␣PL_keyword_plugin␣␣(marked␣experimental)

=item␣perl␣5.11.1

␣␣ck_warner
␣␣ck_warner_d

=item␣perl␣5.11.0

␣␣gv_add_by_type␣␣(undocumented)
␣␣Gv_AMupdate␣␣(undocumented)
␣␣is_ascii_string
␣␣is_invariant_string
␣␣is_utf8_invariant_string
␣␣PL_opfreehook
␣␣PUSH_MULTICALL
␣␣re_dup_guts
␣␣save_adelete␣␣(undocumented)
␣␣save_aelem_flags␣␣(undocumented)
␣␣save_hdelete␣␣(undocumented)
␣␣save_helem_flags␣␣(undocumented)
␣␣SvOOK_offset
␣␣SVt_REGEXP
␣␣sv_utf8_upgrade_flags_grow
␣␣WARN_IMPRECISION

=item␣perl␣5.10.1

␣␣GMTIME_MAX
␣␣GMTIME_MIN
␣␣HASATTRIBUTE_DEPRECATED
␣␣HAS_BUILTIN_EXPECT
␣␣HAS_GETADDRINFO
␣␣HAS_GETNAMEINFO
␣␣HAS_INETNTOP
␣␣HAS_INETPTON
␣␣HAS_TIMEGM
␣␣I_SYS_POLL
␣␣LOCALTIME_MAX
␣␣LOCALTIME_MIN
␣␣mro_get_from_name␣␣(undocumented)
␣␣mro_get_private_data
␣␣mro_register
␣␣mro_set_mro␣␣(undocumented)
␣␣mro_set_private_data
␣␣MUTABLE_AV
␣␣MUTABLE_CV
␣␣MUTABLE_GV
␣␣MUTABLE_HV
␣␣MUTABLE_IO
␣␣NV_OVERFLOWS_INTEGERS_AT
␣␣PERL_USE_DEVEL
␣␣SAVEFREEOP
␣␣save_hints␣␣(undocumented)
␣␣save_op␣␣(undocumented)
␣␣save_padsv_and_mortalize␣␣(undocumented)
␣␣save_pushi32ptr␣␣(undocumented)
␣␣save_pushptr␣␣(undocumented)
␣␣save_pushptrptr␣␣(undocumented)
␣␣sv_insert_flags

=item␣perl␣5.10.0

␣␣HAS_ASCTIME_R
␣␣HAS_CRYPT_R
␣␣HAS_CTIME_R
␣␣HAS_DRAND48_R
␣␣HAS_GETGRENT_R
␣␣HAS_GETGRGID_R
␣␣HAS_GETGRNAM_R
␣␣HAS_GETHOSTBYADDR_R
␣␣HAS_GETHOSTBYNAME_R
␣␣HAS_GETHOSTENT_R
␣␣HAS_GETLOGIN_R
␣␣HAS_GETNETBYADDR_R
␣␣HAS_GETNETBYNAME_R
␣␣HAS_GETNETENT_R
␣␣HAS_GETPROTOBYNAME_R
␣␣HAS_GETPROTOBYNUMBER_R
␣␣HAS_GETPROTOENT_R
␣␣HAS_GETPWENT_R
␣␣HAS_GETPWNAM_R
␣␣HAS_GETPWUID_R
␣␣HAS_GETSERVBYNAME_R
␣␣HAS_GETSERVBYPORT_R
␣␣HAS_GETSERVENT_R
␣␣HAS_GETSPNAM_R
␣␣HAS_GMTIME_R
␣␣HAS_LOCALTIME_R
␣␣HAS_OFF64_T
␣␣HAS_PTHREAD_ATFORK
␣␣HAS_RANDOM_R
␣␣HAS_READDIR64_R
␣␣HAS_READDIR_R
␣␣HAS_SETRESGID_PROTO
␣␣HAS_SETRESUID_PROTO
␣␣HAS_SRAND48_R
␣␣HAS_SRANDOM_R
␣␣HAS_STRERROR_R
␣␣HAS_TMPNAM_R
␣␣HAS_TTYNAME_R
␣␣LOCALTIME_R_NEEDS_TZSET
␣␣my_cxt_init␣␣(undocumented)
␣␣START_MY_CXT
␣␣sv_destroyable
␣␣USE_ITHREADS

=item␣perl␣5.9.5

␣␣av_create_and_push␣␣(marked␣experimental)
␣␣av_create_and_unshift_one␣␣(marked␣experimental)
␣␣CopLABEL
␣␣gv_fetchfile_flags
␣␣HAS_CTERMID
␣␣HAS_PTHREAD_YIELD
␣␣HAS_SIGNBIT
␣␣lex_start␣␣(marked␣experimental)
␣␣L_R_TZSET
␣␣mro_get_linear_isa
␣␣mro_method_changed_in
␣␣my_dirfd␣␣(undocumented)
␣␣Perl_signbit␣␣(marked␣experimental)
␣␣pregcomp
␣␣PRINTF_FORMAT_NULL_OK
␣␣ptr_table_clear␣␣(DEPRECATED)␣␣(undocumented)
␣␣ptr_table_fetch␣␣(undocumented)
␣␣ptr_table_free␣␣(undocumented)
␣␣ptr_table_new␣␣(undocumented)
␣␣ptr_table_split␣␣(undocumented)
␣␣ptr_table_store␣␣(undocumented)
␣␣re_compile␣␣(undocumented)
␣␣savesharedpvn
␣␣scan_vstring␣␣(undocumented)
␣␣upg_version

=item␣perl␣5.9.4

␣␣gv_name_set␣␣(undocumented)
␣␣GV_NOTQUAL
␣␣HAS_BUILTIN_CHOOSE_EXPR
␣␣HAS_C99_VARIADIC_MACROS
␣␣hv_copy_hints_hv
␣␣my_vsnprintf
␣␣newXS_flags␣␣(marked␣experimental)␣␣(undocumented)
␣␣PerlIO_context_layers␣␣(undocumented)
␣␣PERL_MAGIC_hints
␣␣PERL_MAGIC_hintselem
␣␣sv_does
␣␣sv_usepvn_flags

=item␣perl␣5.9.3

␣␣dMULTICALL
␣␣doref␣␣(undocumented)
␣␣gv_const_sv
␣␣GV_NOADD_NOINIT
␣␣GV_NOEXPAND
␣␣HASATTRIBUTE_FORMAT
␣␣HASATTRIBUTE_MALLOC
␣␣HASATTRIBUTE_NONNULL
␣␣HASATTRIBUTE_NORETURN
␣␣HASATTRIBUTE_PURE
␣␣HASATTRIBUTE_UNUSED
␣␣HASATTRIBUTE_WARN_UNUSED_RESULT
␣␣HAS_CLEARENV
␣␣HAS_FUTIMES
␣␣HAS_MODFL_PROTO
␣␣HAS_SNPRINTF
␣␣HAS_UNSETENV
␣␣HAS_VSNPRINTF
␣␣hv_eiter_p␣␣(undocumented)
␣␣hv_eiter_set␣␣(undocumented)
␣␣hv_name_set␣␣(undocumented)
␣␣hv_placeholders_get␣␣(undocumented)
␣␣hv_placeholders_set␣␣(undocumented)
␣␣hv_riter_p␣␣(undocumented)
␣␣hv_riter_set␣␣(undocumented)
␣␣is_utf8_string_loclen
␣␣LIBM_LIB_VERSION
␣␣MULTICALL
␣␣newGIVENOP
␣␣newSVhek
␣␣NV_ZERO_IS_ALLBITS_ZERO
␣␣pad_compname_type␣␣(DEPRECATED)
␣␣PERLIO_FUNCS_DECL
␣␣PERL_MAGIC_arylen_p
␣␣PERL_MAGIC_rhash
␣␣PERL_MAGIC_symtab
␣␣POP_MULTICALL
␣␣savepvs
␣␣sortsv_flags
␣␣SvPV_shrink_to_cur
␣␣vverify

=item␣perl␣5.9.2

␣␣find_rundefsvoffset␣␣(DEPRECATED)
␣␣op_refcnt_lock␣␣(undocumented)
␣␣op_refcnt_unlock␣␣(undocumented)
␣␣PERL_MALLOC_WRAP
␣␣savesvpv
␣␣SvPVbyte_force
␣␣vnormal

=item␣perl␣5.9.1

␣␣hv_clear_placeholders
␣␣hv_scalar
␣␣scan_version
␣␣sv_2iv_flags
␣␣sv_2uv_flags

=item␣perl␣5.9.0

␣␣_aMY_CXT
␣␣aMY_CXT
␣␣aMY_CXT_
␣␣dMY_CXT
␣␣hek_dup␣␣(undocumented)
␣␣MY_CXT
␣␣MY_CXT_CLONE
␣␣MY_CXT_INIT
␣␣new_version
␣␣parser_dup␣␣(undocumented)
␣␣_pMY_CXT
␣␣pMY_CXT
␣␣pMY_CXT_
␣␣save_set_svflags␣␣(undocumented)
␣␣SVs_PADSTALE
␣␣vcmp
␣␣vnumify
␣␣vstringify

=item␣perl␣5.8.8

␣␣__ASSERT_

=item␣perl␣5.8.3

␣␣SvIsCOW
␣␣SvIsCOW_shared_hash

=item␣perl␣5.8.1

␣␣CvPADLIST␣␣(marked␣experimental)
␣␣find_runcv
␣␣HAS_COPYSIGNL
␣␣HAS_FAST_STDIO
␣␣HAS_ILOGBL
␣␣HAS_PTHREAD_ATTR_SETSCOPE
␣␣HAS_SCALBNL
␣␣HAS_TM_TM_GMTOFF
␣␣IN_PERL_RUNTIME
␣␣is_utf8_string_loc
␣␣packlist
␣␣pad_add_anon
␣␣pad_new
␣␣pad_tidy␣␣(marked␣experimental)
␣␣PL_comppad␣␣(marked␣experimental)
␣␣SAVEBOOL
␣␣savestack_grow_cnt␣␣(undocumented)
␣␣seed␣␣(undocumented)
␣␣sv_cat_decode
␣␣sv_setpviv␣␣(DEPRECATED)
␣␣sv_setpviv_mg␣␣(DEPRECATED)
␣␣SvVOK
␣␣unpackstring

=item␣perl␣5.8.0

␣␣ASCTIME_R_PROTO
␣␣CRYPT_R_PROTO
␣␣CTERMID_R_PROTO
␣␣CTIME_R_PROTO
␣␣DRAND48_R_PROTO
␣␣ENDGRENT_R_PROTO
␣␣ENDHOSTENT_R_PROTO
␣␣ENDNETENT_R_PROTO
␣␣ENDPROTOENT_R_PROTO
␣␣ENDPWENT_R_PROTO
␣␣ENDSERVENT_R_PROTO
␣␣GETGRENT_R_PROTO
␣␣GETGRGID_R_PROTO
␣␣GETGRNAM_R_PROTO
␣␣GETHOSTBYADDR_R_PROTO
␣␣GETHOSTBYNAME_R_PROTO
␣␣GETHOSTENT_R_PROTO
␣␣GETLOGIN_R_PROTO
␣␣GETNETBYADDR_R_PROTO
␣␣GETNETBYNAME_R_PROTO
␣␣GETNETENT_R_PROTO
␣␣GETPROTOBYNAME_R_PROTO
␣␣GETPROTOBYNUMBER_R_PROTO
␣␣GETPROTOENT_R_PROTO
␣␣GETPWENT_R_PROTO
␣␣GETPWNAM_R_PROTO
␣␣GETPWUID_R_PROTO
␣␣GETSERVBYNAME_R_PROTO
␣␣GETSERVBYPORT_R_PROTO
␣␣GETSERVENT_R_PROTO
␣␣GETSPNAM_R_PROTO
␣␣GMTIME_R_PROTO
␣␣HAS_TIME
␣␣HAS_TM_TM_ZONE
␣␣HeUTF8
␣␣hv_iternext_flags␣␣(marked␣experimental)
␣␣HV_ITERNEXT_WANTPLACEHOLDERS
␣␣hv_store_flags␣␣(marked␣experimental)␣␣(undocumented)
␣␣I_CRYPT
␣␣LOCALTIME_R_PROTO
␣␣nothreadhook
␣␣RANDOM_R_PROTO
␣␣READDIR64_R_PROTO
␣␣READDIR_R_PROTO
␣␣SETGRENT_R_PROTO
␣␣SETHOSTENT_R_PROTO
␣␣SETLOCALE_R_PROTO
␣␣SETNETENT_R_PROTO
␣␣SETPROTOENT_R_PROTO
␣␣SETPWENT_R_PROTO
␣␣SETSERVENT_R_PROTO
␣␣SRAND48_R_PROTO
␣␣SRANDOM_R_PROTO
␣␣STRERROR_R_PROTO
␣␣TMPNAM_R_PROTO
␣␣TTYNAME_R_PROTO

=item␣perl␣5.7.3

␣␣ckWARN3
␣␣ckWARN3_d
␣␣ckWARN4
␣␣ckWARN4_d
␣␣custom_op_desc␣␣(DEPRECATED)
␣␣custom_op_name␣␣(DEPRECATED)
␣␣deb␣␣(undocumented)
␣␣deb_nocontext␣␣(undocumented)
␣␣debstack␣␣(undocumented)
␣␣debstackptrs␣␣(undocumented)
␣␣foldEQ_utf8
␣␣fp_dup␣␣(undocumented)
␣␣gp_dup␣␣(undocumented)
␣␣gv_fetchmeth_autoload
␣␣HAS_DIRFD
␣␣HAS_FINITE
␣␣HAS_FINITEL
␣␣HAS_ISINF
␣␣HAS_PROCSELFEXE
␣␣he_dup␣␣(undocumented)
␣␣ibcmp_utf8
␣␣mg_dup␣␣(undocumented)
␣␣my_fork␣␣(undocumented)
␣␣my_socketpair␣␣(undocumented)
␣␣OP_DESC
␣␣OP_NAME
␣␣pack_cat␣␣(DEPRECATED)
␣␣packWARN2
␣␣packWARN3
␣␣packWARN4
␣␣perl_destruct
␣␣PERL_EXIT_DESTRUCT_END
␣␣PerlIO_clearerr
␣␣PerlIO_close
␣␣PerlIO_eof
␣␣PerlIO_error
␣␣PerlIO_fileno
␣␣PerlIO_fill␣␣(undocumented)
␣␣PerlIO_flush
␣␣PerlIO_get_base
␣␣PerlIO_get_bufsiz
␣␣PerlIO_get_cnt
␣␣PerlIO_get_ptr
␣␣PerlIO_read
␣␣PerlIO_seek
␣␣PerlIO_set_cnt
␣␣PerlIO_setlinebuf
␣␣PerlIO_set_ptrcnt
␣␣PerlIO_stderr
␣␣PerlIO_stdin
␣␣PerlIO_stdout
␣␣PerlIO_tell
␣␣PerlIO_unread␣␣(undocumented)
␣␣PerlIO_write
␣␣PL_peepp
␣␣PROCSELFEXE_PATH
␣␣pv_uni_display
␣␣rvpv_dup␣␣(undocumented)
␣␣savesharedpv
␣␣save_shared_pvref␣␣(undocumented)
␣␣si_dup␣␣(undocumented)
␣␣sortsv
␣␣ss_dup␣␣(undocumented)
␣␣sv_copypv
␣␣sv_dup␣␣(undocumented)
␣␣SvLOCK
␣␣sv_magicext
␣␣sv_nolocking␣␣(DEPRECATED)
␣␣sv_nosharing
␣␣sv_nounlocking␣␣(DEPRECATED)
␣␣sv_recode_to_utf8
␣␣SvSHARE
␣␣sv_uni_display
␣␣SvUNLOCK
␣␣unpack_str␣␣(DEPRECATED)
␣␣uvchr_to_utf8_flags
␣␣vdeb␣␣(undocumented)

=item␣perl␣5.7.2

␣␣atfork_lock␣␣(undocumented)
␣␣atfork_unlock␣␣(undocumented)
␣␣calloc
␣␣DB_VERSION_MAJOR_CFG
␣␣DB_VERSION_MINOR_CFG
␣␣DB_VERSION_PATCH_CFG
␣␣getcwd_sv
␣␣HAS_FCHDIR
␣␣HAS_FLOCK_PROTO
␣␣HAS_NL_LANGINFO
␣␣HAS_SOCKATMARK_PROTO
␣␣HAS_STRFTIME
␣␣HAS_SYSCALL_PROTO
␣␣HAS_USLEEP_PROTO
␣␣I_LANGINFO
␣␣init_tm␣␣(undocumented)
␣␣malloc
␣␣mfree␣␣(undocumented)
␣␣mini_mktime
␣␣my_strftime
␣␣op_null
␣␣OSVERS
␣␣PERL_TARGETARCH
␣␣realloc
␣␣sv_catpvn_flags
␣␣sv_catsv_flags
␣␣sv_utf8_upgrade_flags
␣␣sv_utf8_upgrade_nomg

=item␣perl␣5.7.1

␣␣bytes_from_utf8␣␣(marked␣experimental)
␣␣do_openn␣␣(undocumented)
␣␣FCNTL_CAN_LOCK
␣␣gv_handler␣␣(undocumented)
␣␣HAS_FSYNC
␣␣HAS_GETITIMER
␣␣HAS_GETPAGESIZE
␣␣HAS_READV
␣␣HAS_RECVMSG
␣␣HAS_SBRK_PROTO
␣␣HAS_SENDMSG
␣␣HAS_SETITIMER
␣␣HAS_SIGPROCMASK
␣␣HAS_SOCKATMARK
␣␣HAS_STRTOQ
␣␣HAS_STRUCT_CMSGHDR
␣␣HAS_STRUCT_MSGHDR
␣␣HAS_UALARM
␣␣HAS_USLEEP
␣␣HAS_WRITEV
␣␣isALNUM_LC_uvchr
␣␣isALPHA_LC_uvchr
␣␣isCNTRL_LC_uvchr
␣␣isDIGIT_LC_uvchr
␣␣isGRAPH_LC_uvchr
␣␣isIDFIRST_LC_uvchr
␣␣isLOWER_LC_uvchr
␣␣is_lvalue_sub␣␣(undocumented)
␣␣isPRINT_LC_uvchr
␣␣isPUNCT_LC_uvchr
␣␣isSPACE_LC_uvchr
␣␣isUPPER_LC_uvchr
␣␣my_popen_list␣␣(undocumented)
␣␣NEED_VA_COPY
␣␣PerlIO_apply_layers
␣␣PerlIO_binmode
␣␣PerlIO_debug
␣␣PERLIO_FUNCS_CAST
␣␣POPpbytex
␣␣printf_nocontext␣␣(DEPRECATED)␣␣(undocumented)
␣␣SAVEMORTALIZESV
␣␣SIG_SIZE
␣␣STDIO_PTR_LVAL_SETS_CNT
␣␣sv_force_normal_flags
␣␣sv_setref_uv
␣␣sv_unref_flags
␣␣sv_utf8_upgrade
␣␣U32_ALIGNMENT_REQUIRED
␣␣USE_PERLIO
␣␣UTF8_CHECK_ONLY
␣␣utf8_length
␣␣utf8n_to_uvchr
␣␣uvchr_to_utf8
␣␣UVXf

=item␣perl␣5.6.1

␣␣apply_attrs_string␣␣(marked␣experimental)␣␣(undocumented)
␣␣bytes_to_utf8␣␣(marked␣experimental)
␣␣gv_efullname4␣␣(undocumented)
␣␣gv_fullname4␣␣(undocumented)
␣␣HAS_FREXPL
␣␣HAS_ISNAN
␣␣HAS_ISNANL
␣␣HAS_MODFL
␣␣isPSXSPC_LC
␣␣isUTF8_CHAR
␣␣is_utf8_string
␣␣NV_PRESERVES_UV_BITS
␣␣NVSIZE
␣␣PERL_PRIeldbl
␣␣PERL_SCNfldbl
␣␣save_generic_pvref␣␣(undocumented)
␣␣SvGAMAGIC
␣␣utf8_to_bytes␣␣(marked␣experimental)
␣␣utf8_to_uvchr␣␣(DEPRECATED)
␣␣utf8_to_uvchr_buf

=item␣perl␣5.6.0

␣␣av_delete
␣␣av_exists
␣␣call_atexit␣␣(undocumented)
␣␣caller_cx
␣␣ckWARN2
␣␣ckWARN2_d
␣␣ckWARN_d
␣␣CopLINE
␣␣CPPLAST
␣␣CPPRUN
␣␣die_nocontext
␣␣do_open9␣␣(DEPRECATED)␣␣(undocumented)
␣␣DO_UTF8
␣␣Drand01
␣␣dump_all
␣␣dump_eval␣␣(undocumented)
␣␣dump_form␣␣(undocumented)
␣␣dump_packsubs
␣␣dump_sub␣␣(undocumented)
␣␣FFLUSH_NULL
␣␣form_nocontext
␣␣fprintf_nocontext␣␣(DEPRECATED)␣␣(undocumented)
␣␣get_context␣␣(undocumented)
␣␣get_ppaddr␣␣(undocumented)
␣␣Gid_t_f
␣␣Gid_t_sign
␣␣Gid_t_size
␣␣gv_dump␣␣(undocumented)
␣␣HAS_ACCESS
␣␣HAS_ATOLL
␣␣HAS_DRAND48_PROTO
␣␣HAS_EACCESS
␣␣HAS_FD_SET
␣␣HAS_FSEEKO
␣␣HAS_FTELLO
␣␣HAS_GETCWD
␣␣HAS_GETHOSTNAME
␣␣HAS_GETSPNAM
␣␣HAS_INT64_T
␣␣HAS_LDBL_DIG
␣␣HAS_LSEEK_PROTO
␣␣HAS_MADVISE
␣␣HAS_MKDTEMP
␣␣HAS_MKSTEMP
␣␣HAS_MKSTEMPS
␣␣HAS_MMAP
␣␣HAS_MPROTECT
␣␣HAS_MSYNC
␣␣HAS_MUNMAP
␣␣HAS_SQRTL
␣␣HAS_STRTOLD
␣␣HAS_STRTOLL
␣␣HAS_STRTOULL
␣␣HAS_STRTOUQ
␣␣HAS_TELLDIR_PROTO
␣␣I16SIZE
␣␣I16TYPE
␣␣I32SIZE
␣␣I32TYPE
␣␣I64SIZE
␣␣I64TYPE
␣␣I8SIZE
␣␣I8TYPE
␣␣I_INTTYPES
␣␣I_NETINET_TCP
␣␣I_POLL
␣␣isALNUMC_LC
␣␣isALPHA_LC_utf8_safe
␣␣isALPHANUMERIC_LC_utf8_safe
␣␣isALPHANUMERIC_utf8_safe
␣␣isALPHANUMERIC_uvchr
␣␣isALPHA_utf8_safe
␣␣isALPHA_uvchr
␣␣isBLANK_LC_utf8_safe
␣␣isBLANK_utf8_safe
␣␣isBLANK_uvchr
␣␣isCNTRL_LC
␣␣isCNTRL_LC_utf8_safe
␣␣isCNTRL_utf8_safe
␣␣isCNTRL_uvchr
␣␣isDIGIT_LC_utf8_safe
␣␣isDIGIT_utf8_safe
␣␣isDIGIT_uvchr
␣␣isGRAPH_LC
␣␣isGRAPH_LC_utf8_safe
␣␣isGRAPH_utf8_safe
␣␣isGRAPH_uvchr
␣␣I_SHADOW
␣␣isIDCONT_LC_utf8_safe
␣␣isIDCONT_utf8_safe
␣␣isIDCONT_uvchr
␣␣isIDFIRST_LC_utf8_safe
␣␣isIDFIRST_utf8_safe
␣␣isIDFIRST_uvchr
␣␣isLOWER_LC_utf8_safe
␣␣isLOWER_utf8_safe
␣␣isLOWER_uvchr
␣␣isPRINT_LC_utf8_safe
␣␣isPRINT_utf8_safe
␣␣isPRINT_uvchr
␣␣isPSXSPC_LC_utf8_safe
␣␣isPSXSPC_utf8_safe
␣␣isPSXSPC_uvchr
␣␣isPUNCT_LC
␣␣isPUNCT_LC_utf8_safe
␣␣isPUNCT_utf8_safe
␣␣isPUNCT_uvchr
␣␣isSPACE_LC_utf8_safe
␣␣isSPACE_utf8_safe
␣␣isSPACE_uvchr
␣␣isUPPER_LC_utf8_safe
␣␣isUPPER_utf8_safe
␣␣isUPPER_uvchr
␣␣is_utf8_char␣␣(DEPRECATED)
␣␣isWORDCHAR_LC_utf8_safe
␣␣isWORDCHAR_utf8_safe
␣␣isWORDCHAR_uvchr
␣␣isXDIGIT_LC_utf8_safe
␣␣isXDIGIT_utf8_safe
␣␣isXDIGIT_uvchr
␣␣I_SYSLOG
␣␣I_SYSUIO
␣␣I_SYSUTSNAME
␣␣load_module_nocontext
␣␣LSEEKSIZE
␣␣magic_dump␣␣(undocumented)
␣␣Mmap_t
␣␣MULTIPLICITY
␣␣my_atof
␣␣my_fflush_all␣␣(undocumented)
␣␣newANONATTRSUB␣␣(undocumented)
␣␣newATTRSUB
␣␣newSVpvf_nocontext
␣␣newXS
␣␣newXSproto
␣␣Off_t_size
␣␣op_dump
␣␣OPpEARLY_CV
␣␣PERL_EXIT_EXPECTED
␣␣perl_parse
␣␣PERL_PRIfldbl
␣␣PERL_PRIgldbl
␣␣PERL_REVISION␣␣(DEPRECATED)
␣␣PERL_SYS_INIT3
␣␣PHOSTNAME
␣␣PL_check
␣␣PL_exit_flags
␣␣PL_runops
␣␣pmop_dump␣␣(undocumented)
␣␣POPul
␣␣QUAD_IS_INT
␣␣QUAD_IS_INT64_T
␣␣QUAD_IS_LONG
␣␣QUAD_IS_LONG_LONG
␣␣QUADKIND
␣␣Rand_seed_t
␣␣require_pv
␣␣safesyscalloc
␣␣safesysfree
␣␣safesysmalloc
␣␣safesysrealloc
␣␣save_alloc␣␣(undocumented)
␣␣SAVEDESTRUCTOR
␣␣SAVEI8
␣␣save_vptr␣␣(undocumented)
␣␣scan_bin
␣␣SCHED_YIELD
␣␣seedDrand01
␣␣set_context␣␣(undocumented)
␣␣SITELIB_STEM
␣␣Size_t_size
␣␣Sock_size_t
␣␣STDIO_PTR_LVALUE
␣␣STDIO_STREAM_ARRAY
␣␣Strtol
␣␣Strtoul
␣␣sv_2pvutf8
␣␣sv_catpvf_mg_nocontext
␣␣sv_catpvf_nocontext
␣␣sv_force_normal
␣␣SvIOK_notUV
␣␣SvIOK_only_UV
␣␣SvIOK_UV
␣␣sv_len_utf8
␣␣sv_len_utf8_nomg␣␣(undocumented)
␣␣SvPOK_only_UTF8
␣␣sv_pos_b2u
␣␣sv_pos_u2b
␣␣SvPVbyte_nolen
␣␣SvPVbytex
␣␣SvPVbytex_force
␣␣SvPVutf8
␣␣SvPVutf8_force
␣␣SvPVutf8_nolen
␣␣SvPVutf8x
␣␣SvPVutf8x_force
␣␣sv_rvweaken
␣␣sv_setpvf_mg_nocontext
␣␣sv_setpvf_nocontext
␣␣SvUOK
␣␣sv_utf8_decode
␣␣sv_utf8_downgrade
␣␣sv_utf8_encode
␣␣SvUTF8_off
␣␣SvUTF8_on
␣␣toFOLD_utf8_safe
␣␣toFOLD_uvchr
␣␣toLOWER_utf8_safe
␣␣toLOWER_uvchr
␣␣toTITLE_utf8_safe
␣␣toTITLE_uvchr
␣␣toUPPER_utf8_safe
␣␣toUPPER_uvchr
␣␣U16SIZE
␣␣U16TYPE
␣␣U32SIZE
␣␣U32TYPE
␣␣U64SIZE
␣␣U64TYPE
␣␣U8SIZE
␣␣U8TYPE
␣␣Uid_t_f
␣␣Uid_t_sign
␣␣Uid_t_size
␣␣Uquad_t
␣␣USE_64_BIT_ALL
␣␣USE_64_BIT_INT
␣␣USE_LARGE_FILES
␣␣USE_STDIO_BASE
␣␣USE_STDIO_PTR
␣␣USE_THREADS
␣␣UTF8_CHK_SKIP
␣␣utf8_distance
␣␣utf8_hop
␣␣UTF8_MAXBYTES
␣␣UTF8_SAFE_SKIP
␣␣UTF8_SKIP
␣␣UTF8SKIP
␣␣vcroak
␣␣vform
␣␣vwarn
␣␣vwarner
␣␣warn_nocontext

=item␣perl␣5.005_03

␣␣get_vtbl␣␣(undocumented)
␣␣I_PTHREAD
␣␣POPpx
␣␣save_generic_svref␣␣(undocumented)
␣␣SELECT_MIN_BITS
␣␣USE_STAT_BLOCKS

=item␣perl␣5.005

␣␣debop␣␣(undocumented)
␣␣debprofdump␣␣(undocumented)
␣␣DOUBLESIZE
␣␣fbm_compile
␣␣fbm_instr
␣␣get_op_descs␣␣(undocumented)
␣␣get_op_names␣␣(undocumented)
␣␣GRPASSWD
␣␣HAS_CSH
␣␣HAS_ENDGRENT
␣␣HAS_ENDHOSTENT
␣␣HAS_ENDNETENT
␣␣HAS_ENDPROTOENT
␣␣HAS_ENDPWENT
␣␣HAS_ENDSERVENT
␣␣HAS_GETGRENT
␣␣HAS_GETHOSTBYADDR
␣␣HAS_GETHOSTBYNAME
␣␣HAS_GETHOST_PROTOS
␣␣HAS_GETNETBYADDR
␣␣HAS_GETNETBYNAME
␣␣HAS_GETNETENT
␣␣HAS_GETNET_PROTOS
␣␣HAS_GETPROTOBYNAME
␣␣HAS_GETPROTOBYNUMBER
␣␣HAS_GETPROTOENT
␣␣HAS_GETPROTO_PROTOS
␣␣HAS_GETPWENT
␣␣HAS_GETSERVBYNAME
␣␣HAS_GETSERVBYPORT
␣␣HAS_GETSERVENT
␣␣HAS_GETSERV_PROTOS
␣␣HAS_LCHOWN
␣␣HAS_LONG_DOUBLE
␣␣HAS_LONG_LONG
␣␣HAS_SCHED_YIELD
␣␣HAS_SETGRENT
␣␣HAS_SETHOSTENT
␣␣HAS_SETNETENT
␣␣HAS_SETPROTOENT
␣␣HAS_SETPWENT
␣␣HAS_SETSERVENT
␣␣HAS_SETVBUF
␣␣I_ARPA_INET
␣␣I_NETDB
␣␣init_stacks␣␣(undocumented)
␣␣LONG_DOUBLESIZE
␣␣LONGLONGSIZE
␣␣mg_length␣␣(DEPRECATED)
␣␣mg_size␣␣(undocumented)
␣␣Netdb_hlen_t
␣␣Netdb_host_t
␣␣Netdb_name_t
␣␣Netdb_net_t
␣␣newHVhv␣␣(undocumented)
␣␣new_stackinfo␣␣(undocumented)
␣␣Pid_t
␣␣PL_curpad␣␣(marked␣experimental)
␣␣PL_in_my_stash␣␣(undocumented)
␣␣PL_modglobal
␣␣PTRSIZE
␣␣PWPASSWD
␣␣sv_peek␣␣(undocumented)
␣␣sv_pvn_nomg␣␣(DEPRECATED)␣␣(undocumented)

=item␣perl␣5.004_05

␣␣do_binmode␣␣(DEPRECATED)␣␣(undocumented)
␣␣GV_NOINIT
␣␣HAS_CHSIZE
␣␣HAS_GNULIBC
␣␣PWGECOS
␣␣save_aelem␣␣(undocumented)
␣␣save_helem␣␣(undocumented)
␣␣USE_SEMCTL_SEMID_DS
␣␣USE_SEMCTL_SEMUN

=item␣perl␣5.004

␣␣ARCHNAME
␣␣BIN_EXP
␣␣block_end
␣␣block_gimme␣␣(undocumented)
␣␣block_start
␣␣call_list␣␣(undocumented)
␣␣delimcpy
␣␣form
␣␣GIMME_V
␣␣gv_autoload4
␣␣gv_fetchmethod_autoload
␣␣G_VOID
␣␣HAS_GETTIMEOFDAY
␣␣HAS_INET_ATON
␣␣HAS_SETGROUPS
␣␣HAS_STRTOD
␣␣HAS_STRTOL
␣␣HAS_STRTOUL
␣␣HePV
␣␣HeSVKEY_set
␣␣hv_delayfree_ent␣␣(undocumented)
␣␣hv_free_ent␣␣(undocumented)
␣␣ibcmp_locale
␣␣IN_LOCALE
␣␣IN_LOCALE_COMPILETIME
␣␣IN_LOCALE_RUNTIME
␣␣intro_my
␣␣isALNUM_LC
␣␣isALPHA_LC
␣␣isALPHANUMERIC_LC
␣␣isDIGIT_LC
␣␣isIDCONT_LC
␣␣isIDFIRST_LC
␣␣isLOWER_LC
␣␣isPRINT_LC
␣␣isSPACE_LC
␣␣isUPPER_LC
␣␣isWORDCHAR_LC
␣␣mess
␣␣mess_nocontext
␣␣mess_sv
␣␣my_failure_exit␣␣(undocumented)
␣␣newSVpvf
␣␣Perl_warner_nocontext␣␣(undocumented)
␣␣PL_mess_sv␣␣(undocumented)
␣␣POPu
␣␣rsignal
␣␣rsignal_state␣␣(undocumented)
␣␣save_gp
␣␣SAVEI16
␣␣SAVESTACK_POS
␣␣share_hek␣␣(undocumented)
␣␣SHORTSIZE
␣␣sv_catpvf
␣␣sv_catpvf_mg
␣␣sv_cmp_locale
␣␣sv_derived_from
␣␣sv_magic_portable␣␣(undocumented)
␣␣SvSetMagicSV
␣␣SvSetMagicSV_nosteal
␣␣sv_setpvf
␣␣sv_setpvf_mg
␣␣SvSetSV_nosteal
␣␣SvTAINTED
␣␣SvTAINTED_off
␣␣SvTAINTED_on
␣␣sv_vcatpvf
␣␣sv_vcatpvf_mg
␣␣sv_vcatpvfn
␣␣sv_vsetpvf
␣␣sv_vsetpvf_mg
␣␣sv_vsetpvfn
␣␣Timeval
␣␣toLOWER_LC
␣␣vmess
␣␣vnewSVpvf
␣␣warner
␣␣warner_nocontext

=item␣perl␣5.003_07␣(or␣maybe␣earlier)

␣␣amagic_call␣␣(undocumented)
␣␣ARCHLIB
␣␣ARCHLIB_EXP
␣␣aTHX
␣␣aTHX_
␣␣aTHXR␣␣(undocumented)
␣␣aTHXR_␣␣(undocumented)
␣␣av_clear
␣␣av_count
␣␣av_extend
␣␣av_fetch
␣␣av_fill
␣␣AvFILL
␣␣AvFILLp
␣␣av_len
␣␣av_make
␣␣av_pop
␣␣av_push
␣␣av_shift
␣␣av_store
␣␣av_tindex
␣␣av_top_index
␣␣av_undef
␣␣av_unshift
␣␣ax
␣␣BIN
␣␣BOM_UTF8
␣␣boolSV
␣␣BYTEORDER
␣␣call_argv
␣␣call_method
␣␣call_pv
␣␣call_sv
␣␣C_ARRAY_END
␣␣C_ARRAY_LENGTH
␣␣CASTFLAGS
␣␣CASTNEGFLOAT
␣␣CAT2
␣␣cBOOL
␣␣ckWARN
␣␣CLASS
␣␣CopFILE
␣␣CopFILEAV
␣␣CopFILEGV
␣␣CopFILEGV_set
␣␣CopFILE_set
␣␣CopFILESV
␣␣CopSTASH
␣␣CopSTASH_eq
␣␣CopSTASHPV
␣␣CopSTASH_set
␣␣Copy
␣␣CopyD
␣␣CPERLscope␣␣(DEPRECATED)
␣␣CPPMINUS
␣␣CPPSTDIN
␣␣croak
␣␣croak_memory_wrap␣␣(undocumented)
␣␣croak_nocontext
␣␣croak_no_modify
␣␣croak_sv
␣␣croak_xs_usage
␣␣CSH
␣␣cv_clone
␣␣cv_const_sv
␣␣CvDEPTH
␣␣CvGV
␣␣CvSTASH
␣␣cv_undef
␣␣dAX
␣␣dAXMARK
␣␣DB_Hash_t
␣␣DB_Prefix_t
␣␣DEFSV
␣␣DEFSV_set
␣␣die
␣␣die_sv
␣␣Direntry_t
␣␣dITEMS
␣␣dMARK
␣␣dNOOP
␣␣do_close␣␣(undocumented)
␣␣do_join␣␣(undocumented)
␣␣do_open␣␣(undocumented)
␣␣dORIGMARK
␣␣dowantarray␣␣(undocumented)
␣␣dSP
␣␣dTARGET
␣␣dTHR
␣␣dTHX
␣␣dTHXa
␣␣dTHXoa
␣␣dTHXR␣␣(undocumented)
␣␣dUNDERBAR
␣␣dVAR
␣␣dXCPT
␣␣dXSARGS
␣␣dXSI32
␣␣dXSTARG␣␣(undocumented)
␣␣END_EXTERN_C
␣␣ENTER
␣␣EOF_NONBLOCK
␣␣ERRSV
␣␣eval_pv
␣␣eval_sv
␣␣EXTEND
␣␣EXTERN_C
␣␣FILE_base
␣␣FILE_bufsiz
␣␣FILE_cnt
␣␣FILE_ptr
␣␣filter_add
␣␣filter_del␣␣(undocumented)
␣␣filter_read
␣␣FLEXFILENAMES
␣␣Fpos_t
␣␣Free_t
␣␣FREETMPS
␣␣G_ARRAY
␣␣Gconvert
␣␣G_DISCARD
␣␣get_av
␣␣get_cv
␣␣get_cvn_flags
␣␣get_cvs
␣␣get_hv
␣␣get_sv
␣␣G_EVAL
␣␣Gid_t
␣␣GIMME␣␣(DEPRECATED)
␣␣G_KEEPERR
␣␣G_METHOD
␣␣G_NOARGS
␣␣gp_free␣␣(undocumented)
␣␣gp_ref␣␣(undocumented)
␣␣G_RETHROW
␣␣grok_bin
␣␣grok_hex
␣␣grok_number
␣␣GROK_NUMERIC_RADIX
␣␣grok_numeric_radix
␣␣grok_oct
␣␣Groups_t
␣␣G_SCALAR
␣␣GV_ADD
␣␣GV_ADDMULTI
␣␣GV_ADDWARN
␣␣GvAV
␣␣gv_AVadd␣␣(undocumented)
␣␣GvCV
␣␣gv_efullname␣␣(DEPRECATED)␣␣(undocumented)
␣␣gv_efullname3␣␣(undocumented)
␣␣gv_fetchfile
␣␣gv_fetchmeth
␣␣gv_fetchmethod
␣␣gv_fetchpv
␣␣gv_fetchpvn_flags
␣␣gv_fetchpvs
␣␣gv_fetchsv
␣␣gv_fullname␣␣(DEPRECATED)␣␣(undocumented)
␣␣gv_fullname3␣␣(undocumented)
␣␣GvHV
␣␣gv_HVadd␣␣(undocumented)
␣␣gv_init
␣␣gv_init_pvn
␣␣gv_IOadd␣␣(undocumented)
␣␣gv_stashpv
␣␣gv_stashpvn
␣␣gv_stashpvs
␣␣gv_stashsv
␣␣GvSV
␣␣GvSVn
␣␣HAS_ALARM
␣␣HAS_CHOWN
␣␣HAS_CHROOT
␣␣HAS_CRYPT
␣␣HAS_CUSERID
␣␣HAS_DIFFTIME
␣␣HAS_DLERROR
␣␣HAS_DUP2
␣␣HAS_FCHMOD
␣␣HAS_FCHOWN
␣␣HAS_FCNTL
␣␣HAS_FGETPOS
␣␣HAS_FLOCK
␣␣HAS_FORK
␣␣HAS_FPATHCONF
␣␣HAS_FSETPOS
␣␣HAS_GETGROUPS
␣␣HAS_GETHOSTENT
␣␣HAS_GETLOGIN
␣␣HAS_GETPGID
␣␣HAS_GETPGRP
␣␣HAS_GETPPID
␣␣HAS_GETPRIORITY
␣␣HAS_HTONL
␣␣HAS_HTONS
␣␣HAS_ISASCII
␣␣HAS_KILLPG
␣␣HAS_LINK
␣␣HAS_LOCALECONV
␣␣HAS_LOCKF
␣␣HAS_LSTAT
␣␣HAS_MBLEN
␣␣HAS_MBSTOWCS
␣␣HAS_MBTOWC
␣␣HAS_MKDIR
␣␣HAS_MKFIFO
␣␣HAS_MKTIME
␣␣HAS_MSG
␣␣HAS_NICE
␣␣HAS_NTOHL
␣␣HAS_NTOHS
␣␣HAS_OPEN3
␣␣HAS_PATHCONF
␣␣HAS_PAUSE
␣␣HAS_PIPE
␣␣HAS_POLL
␣␣HAS_QUAD
␣␣HAS_READDIR
␣␣HAS_READLINK
␣␣HAS_RENAME
␣␣HAS_REWINDDIR
␣␣HAS_RMDIR
␣␣HAS_SEEKDIR
␣␣HAS_SELECT
␣␣HAS_SEM
␣␣HAS_SETEGID
␣␣HAS_SETEUID
␣␣HAS_SETLINEBUF
␣␣HAS_SETLOCALE
␣␣HAS_SETPGID
␣␣HAS_SETPGRP
␣␣HAS_SETPRIORITY
␣␣HAS_SETREGID
␣␣HAS_SETRESGID
␣␣HAS_SETRESUID
␣␣HAS_SETREUID
␣␣HAS_SETSID
␣␣HAS_SHM
␣␣HAS_SHMAT_PROTOTYPE
␣␣HAS_SIGACTION
␣␣HAS_SIGSETJMP
␣␣HAS_SOCKET
␣␣HAS_SOCKETPAIR
␣␣HAS_STRCOLL
␣␣HAS_STRXFRM
␣␣HAS_SYMLINK
␣␣HAS_SYSCALL
␣␣HAS_SYSCONF
␣␣HAS_SYS_ERRLIST
␣␣HAS_SYSTEM
␣␣HAS_TCGETPGRP
␣␣HAS_TCSETPGRP
␣␣HAS_TELLDIR
␣␣HAS_TIMES
␣␣HAS_TRUNCATE
␣␣HAS_TZNAME
␣␣HAS_UMASK
␣␣HAS_UNAME
␣␣HAS_WAIT4
␣␣HAS_WAITPID
␣␣HAS_WCSTOMBS
␣␣HAS_WCTOMB
␣␣HEf_SVKEY
␣␣HeHASH
␣␣HeKEY
␣␣HeKLEN
␣␣HeSVKEY
␣␣HeSVKEY_force
␣␣HeVAL
␣␣hv_clear
␣␣hv_delete
␣␣hv_delete_ent
␣␣hv_exists
␣␣hv_exists_ent
␣␣hv_fetch
␣␣hv_fetch_ent
␣␣hv_fetchs
␣␣HvFILL
␣␣hv_iterinit
␣␣hv_iterkey
␣␣hv_iterkeysv
␣␣hv_iternext
␣␣hv_iternextsv
␣␣hv_iterval
␣␣hv_ksplit␣␣(undocumented)
␣␣hv_magic
␣␣HvNAME
␣␣HvNAME_get
␣␣HvNAMELEN_get
␣␣hv_store
␣␣hv_store_ent
␣␣hv_stores
␣␣hv_undef
␣␣ibcmp
␣␣I_DIRENT
␣␣I_DLFCN
␣␣I_GRP
␣␣I_LOCALE
␣␣I_NETINET_IN
␣␣IN_PERL_COMPILETIME
␣␣instr
␣␣INT2PTR
␣␣INTMAX_C
␣␣INTSIZE
␣␣I_PWD
␣␣isALNUM
␣␣isALNUM_A
␣␣isALNUMC
␣␣isALNUMC_A
␣␣isALNUMC_L1
␣␣isALPHA
␣␣isALPHA_A
␣␣isALPHA_L1
␣␣isALPHANUMERIC
␣␣isALPHANUMERIC_A
␣␣isALPHANUMERIC_L1
␣␣isASCII
␣␣isASCII_A
␣␣isASCII_L1
␣␣isASCII_LC
␣␣isASCII_utf8_safe
␣␣isASCII_uvchr
␣␣isBLANK
␣␣isBLANK_A
␣␣isBLANK_L1
␣␣isBLANK_LC
␣␣isCNTRL
␣␣isCNTRL_A
␣␣isCNTRL_L1
␣␣isDIGIT
␣␣isDIGIT_A
␣␣isDIGIT_L1
␣␣isGRAPH
␣␣isGRAPH_A
␣␣isGRAPH_L1
␣␣isGV_with_GP
␣␣isIDCONT
␣␣isIDCONT_A
␣␣isIDCONT_L1
␣␣isIDFIRST
␣␣isIDFIRST_A
␣␣isIDFIRST_L1
␣␣isLOWER
␣␣isLOWER_A
␣␣isLOWER_L1
␣␣IS_NUMBER_GREATER_THAN_UV_MAX
␣␣IS_NUMBER_INFINITY
␣␣IS_NUMBER_IN_UV
␣␣IS_NUMBER_NAN
␣␣IS_NUMBER_NEG
␣␣IS_NUMBER_NOT_INT
␣␣isOCTAL
␣␣isOCTAL_A
␣␣isOCTAL_L1
␣␣isPRINT
␣␣isPRINT_A
␣␣isPRINT_L1
␣␣isPSXSPC
␣␣isPSXSPC_A
␣␣isPSXSPC_L1
␣␣isPUNCT
␣␣isPUNCT_A
␣␣isPUNCT_L1
␣␣isSPACE
␣␣isSPACE_A
␣␣isSPACE_L1
␣␣isUPPER
␣␣isUPPER_A
␣␣isUPPER_L1
␣␣isWORDCHAR
␣␣isWORDCHAR_A
␣␣isWORDCHAR_L1
␣␣isXDIGIT
␣␣isXDIGIT_A
␣␣isXDIGIT_L1
␣␣isXDIGIT_LC
␣␣I_SYS_DIR
␣␣I_SYS_FILE
␣␣I_SYS_IOCTL
␣␣I_SYS_PARAM
␣␣I_SYS_RESOURCE
␣␣I_SYS_SELECT
␣␣I_SYS_STAT
␣␣I_SYS_TIME
␣␣I_SYS_TIMES
␣␣I_SYS_TYPES
␣␣I_SYS_UN
␣␣I_SYS_WAIT
␣␣items
␣␣I_TERMIOS
␣␣I_TIME
␣␣I_UNISTD
␣␣I_UTIME
␣␣IVdf
␣␣IV_MAX␣␣(undocumented)
␣␣IV_MIN␣␣(undocumented)
␣␣IVSIZE
␣␣IVTYPE
␣␣ix
␣␣LATIN1_TO_NATIVE
␣␣LEAVE
␣␣leave_scope␣␣(undocumented)
␣␣LIKELY
␣␣load_module
␣␣LOC_SED
␣␣LONGSIZE
␣␣looks_like_number
␣␣Malloc_t
␣␣MARK
␣␣MEM_ALIGNBYTES
␣␣memCHRs
␣␣memEQ
␣␣memEQs
␣␣memNE
␣␣memNEs
␣␣mg_clear
␣␣mg_copy
␣␣mg_find
␣␣mg_findext
␣␣mg_free
␣␣mg_get
␣␣mg_magical
␣␣mg_set
␣␣Mode_t
␣␣Move
␣␣MoveD
␣␣mPUSHi
␣␣mPUSHn
␣␣mPUSHp
␣␣mPUSHs
␣␣mPUSHu
␣␣MUTABLE_PTR
␣␣MUTABLE_SV
␣␣mXPUSHi
␣␣mXPUSHn
␣␣mXPUSHp
␣␣mXPUSHs
␣␣mXPUSHu
␣␣my_exit
␣␣my_pclose␣␣(undocumented)
␣␣my_popen␣␣(undocumented)
␣␣my_setenv
␣␣my_snprintf
␣␣my_sprintf␣␣(DEPRECATED)
␣␣my_strlcat
␣␣my_strlcpy
␣␣my_strnlen
␣␣NATIVE_TO_LATIN1
␣␣NATIVE_TO_UNI
␣␣newANONHASH␣␣(undocumented)
␣␣newANONLIST␣␣(undocumented)
␣␣newANONSUB␣␣(undocumented)
␣␣newASSIGNOP
␣␣newAV
␣␣newAVREF␣␣(undocumented)
␣␣newBINOP
␣␣newCONDOP
␣␣newCONSTSUB
␣␣newCVREF␣␣(undocumented)
␣␣newFORM␣␣(undocumented)
␣␣newGVgen␣␣(undocumented)
␣␣newGVOP
␣␣newGVREF␣␣(undocumented)
␣␣newHV
␣␣newHVREF␣␣(undocumented)
␣␣newIO␣␣(undocumented)
␣␣newLISTOP
␣␣newLOGOP
␣␣newLOOPEX
␣␣newLOOPOP
␣␣newNULLLIST
␣␣newOP
␣␣newPMOP
␣␣newPROG␣␣(undocumented)
␣␣newPVOP
␣␣newRANGE
␣␣newRV␣␣(undocumented)
␣␣newRV_inc
␣␣newRV_noinc
␣␣newSLICEOP
␣␣newSTATEOP
␣␣newSUB
␣␣newSV
␣␣newSViv
␣␣newSVnv
␣␣newSVOP
␣␣newSVpv
␣␣newSVpvn
␣␣newSVpvn_flags
␣␣newSVpvn_share
␣␣newSVpvn_utf8
␣␣newSVpvs
␣␣newSVpvs_flags
␣␣newSVpvs_share
␣␣newSVREF␣␣(undocumented)
␣␣newSVrv
␣␣newSVsv
␣␣newSVsv_flags␣␣(undocumented)
␣␣newSVsv_nomg
␣␣newSV_type
␣␣newSVuv
␣␣newUNOP
␣␣Newx
␣␣Newxc
␣␣Newxz
␣␣ninstr
␣␣NOOP
␣␣Nullav␣␣(DEPRECATED)
␣␣Nullch
␣␣Nullcv␣␣(DEPRECATED)
␣␣Nullhv␣␣(DEPRECATED)
␣␣Nullsv
␣␣NUM2PTR
␣␣NVef
␣␣NVff
␣␣NVgf
␣␣NVTYPE
␣␣Off_t
␣␣OPf_KIDS
␣␣op_free
␣␣OpHAS_SIBLING
␣␣OpLASTSIB_set
␣␣OpMAYBESIB_set
␣␣OpMORESIB_set
␣␣OPpENTERSUB_AMPER
␣␣OpSIBLING
␣␣ORIGMARK
␣␣OSNAME
␣␣packWARN
␣␣pad_alloc␣␣(marked␣experimental)
␣␣PERL_ABS
␣␣perl_alloc
␣␣perl_construct
␣␣Perl_eval_pv␣␣(undocumented)
␣␣Perl_eval_sv␣␣(undocumented)
␣␣perl_free
␣␣PERL_HASH
␣␣PERL_INT_MAX
␣␣PERL_INT_MIN
␣␣PerlIO_canset_cnt
␣␣PerlIO_exportFILE
␣␣PerlIO_fast_gets
␣␣PerlIO_fdopen
␣␣PerlIO_findFILE
␣␣PerlIO_getc
␣␣PerlIO_getpos
␣␣PerlIO_has_base
␣␣PerlIO_has_cntptr
␣␣PerlIO_importFILE
␣␣PerlIO_open
␣␣PerlIO_printf
␣␣PerlIO_putc
␣␣PerlIO_puts
␣␣PerlIO_releaseFILE
␣␣PerlIO_reopen
␣␣PerlIO_rewind
␣␣PerlIO_setpos
␣␣PerlIO_stdoutf
␣␣PerlIO_ungetc
␣␣PerlIO_vprintf
␣␣PERL_LOADMOD_DENY
␣␣PERL_LOADMOD_IMPORT_OPS
␣␣PERL_LOADMOD_NOIMPORT
␣␣PERL_LONG_MAX
␣␣PERL_LONG_MIN
␣␣PERL_MAGIC_arylen
␣␣PERL_MAGIC_backref
␣␣PERL_MAGIC_bm
␣␣PERL_MAGIC_collxfrm
␣␣PERL_MAGIC_dbfile
␣␣PERL_MAGIC_dbline
␣␣PERL_MAGIC_defelem
␣␣PERL_MAGIC_env
␣␣PERL_MAGIC_envelem
␣␣PERL_MAGIC_ext
␣␣PERL_MAGIC_fm
␣␣PERL_MAGIC_glob␣␣(undocumented)
␣␣PERL_MAGIC_isa
␣␣PERL_MAGIC_isaelem
␣␣PERL_MAGIC_mutex␣␣(undocumented)
␣␣PERL_MAGIC_nkeys
␣␣PERL_MAGIC_overload␣␣(undocumented)
␣␣PERL_MAGIC_overload_elem␣␣(undocumented)
␣␣PERL_MAGIC_overload_table
␣␣PERL_MAGIC_pos
␣␣PERL_MAGIC_qr
␣␣PERL_MAGIC_regdata
␣␣PERL_MAGIC_regdatum
␣␣PERL_MAGIC_regex_global
␣␣PERL_MAGIC_shared
␣␣PERL_MAGIC_shared_scalar
␣␣PERL_MAGIC_sig
␣␣PERL_MAGIC_sigelem
␣␣PERL_MAGIC_substr
␣␣PERL_MAGIC_sv
␣␣PERL_MAGIC_taint
␣␣PERL_MAGIC_tied
␣␣PERL_MAGIC_tiedelem
␣␣PERL_MAGIC_tiedscalar
␣␣PERL_MAGIC_utf8
␣␣PERL_MAGIC_uvar
␣␣PERL_MAGIC_uvar_elem
␣␣PERL_MAGIC_vec
␣␣PERL_MAGIC_vstring
␣␣PERL_PV_ESCAPE_ALL
␣␣PERL_PV_ESCAPE_FIRSTCHAR
␣␣PERL_PV_ESCAPE_NOBACKSLASH
␣␣PERL_PV_ESCAPE_NOCLEAR
␣␣PERL_PV_ESCAPE_QUOTE
␣␣PERL_PV_ESCAPE_RE
␣␣PERL_PV_ESCAPE_UNI
␣␣PERL_PV_ESCAPE_UNI_DETECT
␣␣PERL_PV_PRETTY_DUMP
␣␣PERL_PV_PRETTY_ELLIPSES
␣␣PERL_PV_PRETTY_LTGT
␣␣PERL_PV_PRETTY_NOCLEAR
␣␣PERL_PV_PRETTY_QUOTE
␣␣PERL_PV_PRETTY_REGPROP
␣␣PERL_QUAD_MAX
␣␣PERL_QUAD_MIN
␣␣perl_run
␣␣PERL_SCAN_ALLOW_UNDERSCORES
␣␣PERL_SCAN_DISALLOW_PREFIX
␣␣PERL_SCAN_GREATER_THAN_UV_MAX
␣␣PERL_SCAN_SILENT_ILLDIGIT
␣␣PERL_SHORT_MAX
␣␣PERL_SHORT_MIN
␣␣PERL_SIGNALS_UNSAFE_FLAG
␣␣PERL_SUBVERSION␣␣(DEPRECATED)
␣␣PERL_SYS_INIT
␣␣PERL_SYS_TERM
␣␣PERL_UCHAR_MAX
␣␣PERL_UCHAR_MIN
␣␣PERL_UINT_MAX
␣␣PERL_UINT_MIN
␣␣PERL_ULONG_MAX
␣␣PERL_ULONG_MIN
␣␣PERL_UNUSED_ARG
␣␣PERL_UNUSED_CONTEXT
␣␣PERL_UNUSED_DECL
␣␣PERL_UNUSED_RESULT
␣␣PERL_UNUSED_VAR
␣␣PERL_UQUAD_MAX
␣␣PERL_UQUAD_MIN
␣␣PERL_USE_GCC_BRACE_GROUPS
␣␣PERL_USHORT_MAX
␣␣PERL_USHORT_MIN
␣␣PERL_VERSION␣␣(DEPRECATED)
␣␣PERL_VERSION_GE
␣␣PERL_VERSION_GT
␣␣PERL_VERSION_LE
␣␣PERL_VERSION_LT
␣␣PL_bufend␣␣(undocumented)
␣␣PL_bufptr␣␣(undocumented)
␣␣PL_compiling␣␣(undocumented)
␣␣PL_copline␣␣(undocumented)
␣␣PL_curcop
␣␣PL_curstash
␣␣PL_DBsignal␣␣(undocumented)
␣␣PL_DBsingle
␣␣PL_DBsub
␣␣PL_DBtrace
␣␣PL_debstash␣␣(undocumented)
␣␣PL_defgv
␣␣PL_diehook␣␣(undocumented)
␣␣PL_dirty␣␣(undocumented)
␣␣PL_dowarn
␣␣PL_errgv
␣␣PL_error_count␣␣(undocumented)
␣␣PL_expect␣␣(undocumented)
␣␣PL_hexdigit
␣␣PL_hints␣␣(undocumented)
␣␣PL_in_my␣␣(undocumented)
␣␣PL_laststatval␣␣(undocumented)
␣␣PL_lex_state␣␣(undocumented)
␣␣PL_lex_stuff␣␣(undocumented)
␣␣PL_linestr␣␣(undocumented)
␣␣PL_na
␣␣PL_no_modify␣␣(undocumented)
␣␣PL_parser
␣␣PL_perldb␣␣(undocumented)
␣␣PL_perl_destruct_level
␣␣PL_ppaddr␣␣(undocumented)
␣␣PL_rsfp␣␣(undocumented)
␣␣PL_rsfp_filters␣␣(undocumented)
␣␣PL_signals␣␣(undocumented)
␣␣PL_stack_base␣␣(undocumented)
␣␣PL_stack_sp␣␣(undocumented)
␣␣PL_statcache␣␣(undocumented)
␣␣PL_stdingv␣␣(undocumented)
␣␣PL_Sv
␣␣PL_sv_arenaroot␣␣(undocumented)
␣␣PL_sv_no
␣␣PL_sv_undef
␣␣PL_sv_yes
␣␣PL_tainted␣␣(undocumented)
␣␣PL_tainting␣␣(undocumented)
␣␣PL_tokenbuf␣␣(undocumented)
␣␣PL_Xpv␣␣(undocumented)
␣␣Poison
␣␣PoisonFree
␣␣PoisonNew
␣␣PoisonWith
␣␣POPi
␣␣POPl
␣␣POPn
␣␣POPp
␣␣POPs
␣␣pop_scope␣␣(undocumented)
␣␣pregexec
␣␣pregfree␣␣(undocumented)
␣␣PRIVLIB
␣␣PRIVLIB_EXP
␣␣pTHX
␣␣pTHX_
␣␣PTR2IV
␣␣PTR2nat
␣␣PTR2NV
␣␣PTR2ul
␣␣PTR2UV
␣␣PTRV
␣␣PUSHi
␣␣PUSHMARK
␣␣PUSHmortal
␣␣PUSHn
␣␣PUSHp
␣␣PUSHs
␣␣push_scope␣␣(undocumented)
␣␣PUSHu
␣␣PUTBACK
␣␣pv_display
␣␣pv_escape
␣␣pv_pretty
␣␣Quad_t
␣␣RANDBITS
␣␣RD_NODATA
␣␣Renew
␣␣Renewc
␣␣repeatcpy␣␣(undocumented)
␣␣REPLACEMENT_CHARACTER_UTF8
␣␣RETVAL
␣␣rninstr
␣␣Safefree
␣␣save_aptr
␣␣save_ary
␣␣SAVE_DEFSV
␣␣SAVEDELETE
␣␣SAVEFREEPV
␣␣SAVEFREESV
␣␣save_hash
␣␣save_hptr
␣␣SAVEI32
␣␣SAVEINT
␣␣save_item
␣␣SAVEIV
␣␣save_list␣␣(DEPRECATED)
␣␣SAVELONG
␣␣save_nogv␣␣(DEPRECATED)␣␣(undocumented)
␣␣SAVEPPTR
␣␣savepv
␣␣savepvn
␣␣save_scalar
␣␣SAVESPTR
␣␣savestack_grow␣␣(undocumented)
␣␣save_svref
␣␣SAVETMPS
␣␣scan_hex
␣␣scan_oct
␣␣Select_fd_set_t
␣␣setdefout
␣␣Shmat_t
␣␣SH_PATH
␣␣Sigjmp_buf
␣␣Siglongjmp
␣␣Signal_t
␣␣SIG_NAME
␣␣SIG_NUM
␣␣Sigsetjmp
␣␣SITEARCH
␣␣SITEARCH_EXP
␣␣SITELIB
␣␣SITELIB_EXP
␣␣Size_t
␣␣SP
␣␣SPAGAIN
␣␣SSize_t
␣␣ST
␣␣START_EXTERN_C
␣␣STARTPERL
␣␣start_subparse␣␣(undocumented)
␣␣STDCHAR
␣␣STMT_END
␣␣STMT_START
␣␣strEQ
␣␣strGE
␣␣strGT
␣␣STRINGIFY
␣␣strLE
␣␣strLT
␣␣strNE
␣␣strnEQ
␣␣strnNE
␣␣StructCopy
␣␣STR_WITH_LEN
␣␣sv_2cv
␣␣sv_2io
␣␣sv_2mortal
␣␣sv_2pvbyte
␣␣sv_2pvbyte_nolen
␣␣sv_2pv_flags
␣␣sv_2pv_nolen
␣␣sv_2uv␣␣(undocumented)
␣␣sv_backoff
␣␣sv_bless
␣␣sv_catpv
␣␣sv_catpv_mg
␣␣sv_catpvn
␣␣sv_catpvn_mg
␣␣sv_catpvn_nomg
␣␣sv_catpvs
␣␣sv_catsv
␣␣sv_catsv_mg
␣␣sv_catsv_nomg
␣␣sv_chop
␣␣sv_clear
␣␣sv_cmp
␣␣SV_CONST_RETURN␣␣(undocumented)
␣␣SV_COW_DROP_PV
␣␣SV_COW_SHARED_HASH_KEYS␣␣(undocumented)
␣␣SvCUR
␣␣SvCUR_set
␣␣sv_dec
␣␣sv_dump
␣␣SvEND
␣␣sv_eq
␣␣SVf
␣␣SVfARG
␣␣sv_free
␣␣SVf_UTF8
␣␣SvGETMAGIC
␣␣sv_gets
␣␣SV_GMAGIC
␣␣SvGROW
␣␣SV_HAS_TRAILING_NUL
␣␣SV_IMMEDIATE_UNREF
␣␣sv_inc
␣␣sv_insert
␣␣SvIOK
␣␣SvIOK_off
␣␣SvIOK_on
␣␣SvIOK_only
␣␣SvIOKp
␣␣sv_isa
␣␣sv_isobject
␣␣SvIV
␣␣SvIV_nomg
␣␣SvIV_set
␣␣SvIVX
␣␣SvIVx
␣␣sv_len
␣␣SvLEN
␣␣SvLEN_set
␣␣sv_magic
␣␣SvMAGIC_set
␣␣sv_mortalcopy
␣␣sv_mortalcopy_flags
␣␣SV_MUTABLE_RETURN␣␣(undocumented)
␣␣sv_newmortal
␣␣SvNIOK
␣␣SvNIOK_off
␣␣SvNIOKp
␣␣SvNOK
␣␣SvNOK_off
␣␣SvNOK_on
␣␣SvNOK_only
␣␣SvNOKp
␣␣SV_NOSTEAL
␣␣SvNV
␣␣SvNV_nomg
␣␣SvNV_set
␣␣SvNVX
␣␣SvNVx
␣␣SvOK
␣␣SvOOK
␣␣SvOOK_off
␣␣SvPOK
␣␣SvPOK_off
␣␣SvPOK_on
␣␣SvPOK_only
␣␣SvPOKp
␣␣SvPV
␣␣SvPVbyte
␣␣SvPV_const
␣␣SvPV_flags
␣␣SvPV_flags_const
␣␣SvPV_flags_const_nolen
␣␣SvPV_flags_mutable
␣␣SvPV_force
␣␣SvPV_force_flags
␣␣SvPV_force_flags_mutable
␣␣SvPV_force_flags_nolen
␣␣SvPV_force_mutable
␣␣SvPV_force_nolen
␣␣SvPV_force_nomg
␣␣SvPV_force_nomg_nolen
␣␣SvPV_mutable
␣␣sv_pvn_force_flags
␣␣SvPV_nolen
␣␣SvPV_nolen_const
␣␣SvPV_nomg
␣␣SvPV_nomg_const
␣␣SvPV_nomg_const_nolen
␣␣SvPV_nomg_nolen
␣␣SvPV_renew
␣␣SvPV_set
␣␣SvPVX
␣␣SvPVx
␣␣SvPVX_const
␣␣SvPVX_mutable
␣␣SvREADONLY
␣␣SvREADONLY_off
␣␣SvREADONLY_on
␣␣SvREFCNT
␣␣SvREFCNT_dec
␣␣SvREFCNT_inc
␣␣SvREFCNT_inc_NN
␣␣SvREFCNT_inc_simple
␣␣SvREFCNT_inc_simple_NN
␣␣SvREFCNT_inc_simple_void
␣␣SvREFCNT_inc_simple_void_NN
␣␣SvREFCNT_inc_void
␣␣SvREFCNT_inc_void_NN
␣␣sv_reftype
␣␣sv_replace
␣␣sv_report_used
␣␣sv_reset
␣␣SvROK
␣␣SvROK_off
␣␣SvROK_on
␣␣SvRV
␣␣SvRV_set
␣␣SvRX
␣␣SvRXOK
␣␣sv_setiv
␣␣sv_setiv_mg
␣␣SvSETMAGIC
␣␣sv_setnv
␣␣sv_setnv_mg
␣␣sv_setpv
␣␣sv_setpv_mg
␣␣sv_setpvn
␣␣sv_setpvn_mg
␣␣sv_setpvs
␣␣sv_setref_iv
␣␣sv_setref_nv
␣␣sv_setref_pv
␣␣sv_setref_pvn
␣␣sv_setsv
␣␣SvSetSV
␣␣sv_setsv_flags
␣␣sv_setsv_mg
␣␣sv_setsv_nomg
␣␣sv_setuv
␣␣sv_setuv_mg
␣␣SvSHARED_HASH
␣␣SV_SMAGIC
␣␣SvSTASH
␣␣SvSTASH_set
␣␣SVs_TEMP
␣␣SvTAINT
␣␣SVt_IV
␣␣SVt_NULL
␣␣SVt_NV
␣␣SVt_PV
␣␣SVt_PVAV
␣␣SVt_PVCV
␣␣SVt_PVFM
␣␣SVt_PVGV
␣␣SVt_PVHV
␣␣SVt_PVIO
␣␣SVt_PVIV
␣␣SVt_PVLV
␣␣SVt_PVMG
␣␣SVt_PVNV
␣␣SvTRUE
␣␣SvTRUE_nomg
␣␣SvTRUEx
␣␣SvTYPE
␣␣svtype
␣␣sv_unmagic
␣␣sv_unmagicext
␣␣sv_unref
␣␣sv_upgrade
␣␣SvUPGRADE
␣␣sv_usepvn
␣␣sv_usepvn_mg
␣␣SvUTF8
␣␣SV_UTF8_NO_ENCODING␣␣(DEPRECATED)
␣␣sv_uv␣␣(DEPRECATED)
␣␣SvUV
␣␣SvUV_nomg
␣␣SvUV_set
␣␣SvUVX
␣␣SvUVx
␣␣SvUVXx␣␣(DEPRECATED)
␣␣SvVSTRING_mg
␣␣switch_to_global_locale
␣␣sync_locale
␣␣TARG
␣␣THIS
␣␣Time_t
␣␣toLOWER
␣␣toUPPER
␣␣Uid_t
␣␣UINTMAX_C
␣␣UNDERBAR
␣␣UNICODE_REPLACEMENT
␣␣UNI_TO_NATIVE
␣␣UNLIKELY
␣␣unsharepvn␣␣(undocumented)
␣␣USE_DYNAMIC_LOADING
␣␣UTF8f
␣␣UTF8fARG
␣␣UTF8_IS_INVARIANT
␣␣UTF8_MAXBYTES_CASE
␣␣UVCHR_IS_INVARIANT
␣␣UVCHR_SKIP
␣␣UV_MAX␣␣(undocumented)
␣␣UV_MIN␣␣(undocumented)
␣␣UVof
␣␣UVSIZE
␣␣UVTYPE
␣␣UVuf
␣␣UVxf
␣␣VAL_EAGAIN
␣␣VAL_O_NONBLOCK
␣␣vload_module
␣␣warn
␣␣WARN_ALL
␣␣WARN_AMBIGUOUS
␣␣WARN_ASSERTIONS␣␣(undocumented)
␣␣WARN_BAREWORD
␣␣WARN_CLOSED
␣␣WARN_CLOSURE
␣␣WARN_DEBUGGING
␣␣WARN_DEPRECATED
␣␣WARN_DIGIT
␣␣WARN_EXEC
␣␣WARN_EXITING
␣␣WARN_GLOB
␣␣WARN_INPLACE
␣␣WARN_INTERNAL
␣␣WARN_IO
␣␣WARN_LAYER
␣␣WARN_MALLOC
␣␣WARN_MISC
␣␣WARN_NEWLINE
␣␣WARN_NUMERIC
␣␣WARN_ONCE
␣␣WARN_OVERFLOW
␣␣WARN_PACK
␣␣WARN_PARENTHESIS
␣␣WARN_PIPE
␣␣WARN_PORTABLE
␣␣WARN_PRECEDENCE
␣␣WARN_PRINTF
␣␣WARN_PROTOTYPE
␣␣WARN_QW
␣␣WARN_RECURSION
␣␣WARN_REDEFINE
␣␣WARN_REGEXP
␣␣WARN_RESERVED
␣␣WARN_SEMICOLON
␣␣WARN_SEVERE
␣␣WARN_SIGNAL
␣␣WARN_SUBSTR
␣␣warn_sv
␣␣WARN_SYNTAX
␣␣WARN_TAINT
␣␣WARN_THREADS
␣␣WARN_UNINITIALIZED
␣␣WARN_UNOPENED
␣␣WARN_UNPACK
␣␣WARN_UNTIE
␣␣WARN_UTF8
␣␣WARN_VOID
␣␣whichsig
␣␣WIDEST_UTYPE
␣␣XCPT_CATCH
␣␣XCPT_RETHROW
␣␣XCPT_TRY_END
␣␣XCPT_TRY_START
␣␣XPUSHi
␣␣XPUSHmortal
␣␣XPUSHn
␣␣XPUSHp
␣␣XPUSHs
␣␣XPUSHu
␣␣XS
␣␣XSprePUSH␣␣(undocumented)
␣␣XSPROTO
␣␣XSRETURN
␣␣XSRETURN_EMPTY
␣␣XSRETURN_IV
␣␣XSRETURN_NO
␣␣XSRETURN_NV
␣␣XSRETURN_PV
␣␣XSRETURN_UNDEF
␣␣XSRETURN_UV
␣␣XSRETURN_YES
␣␣XST_mIV
␣␣XST_mNO
␣␣XST_mNV
␣␣XST_mPV
␣␣XST_mUNDEF
␣␣XST_mUV
␣␣XST_mYES
␣␣XS_VERSION
␣␣XS_VERSION_BOOTCHECK
␣␣Zero
␣␣ZeroD

=item␣Backported␣version␣unknown

␣LC_NUMERIC_LOCK␣␣(undocumented)
␣LC_NUMERIC_UNLOCK␣␣(undocumented)
␣LOCK_LC_NUMERIC_STANDARD␣␣(undocumented)
␣LOCK_NUMERIC_STANDARD␣␣(undocumented)
␣PERL_ARGS_ASSERT_CROAK_XS_USAGE␣␣(undocumented)
␣STORE_LC_NUMERIC_SET_STANDARD␣␣(undocumented)
␣STORE_NUMERIC_SET_STANDARD␣␣(undocumented)
␣SvPVx_nolen_const␣␣(undocumented)
␣UNLOCK_LC_NUMERIC_STANDARD␣␣(undocumented)
␣UNLOCK_NUMERIC_STANDARD␣␣(undocumented)

=back

=head1␣BUGS

If␣you␣find␣any␣bugs,␣C<Devel::PPPort>␣doesn't␣seem␣to␣build␣on␣your
system,␣or␣any␣of␣its␣tests␣fail,␣please␣send␣a␣bug␣report␣to
L<https://github.com/Dual-Life/Devel-PPPort/issues/new>.

=head1␣AUTHORS

=over␣2

=item␣*

Version␣1.x␣of␣Devel::PPPort␣was␣written␣by␣Kenneth␣Albanowski.

=item␣*

Version␣2.x␣was␣ported␣to␣the␣Perl␣core␣by␣Paul␣Marquess.

=item␣*

Version␣3.x␣was␣ported␣back␣to␣CPAN␣by␣Marcus␣Holland-Moritz.

=item␣*

Versions␣>=␣3.22␣are␣maintained␣by␣perl5␣porters

=back

=head1␣COPYRIGHT

Version␣3.x,␣Copyright␣(C)␣2004-2013,␣Marcus␣Holland-Moritz.

␣␣␣␣␣␣␣␣␣␣␣␣␣Copyright␣(C)␣2018-2020,␣The␣perl5␣porters

Version␣2.x,␣Copyright␣(C)␣2001,␣Paul␣Marquess.

Version␣1.x,␣Copyright␣(C)␣1999,␣Kenneth␣Albanowski.

This␣program␣is␣free␣software;␣you␣can␣redistribute␣it␣and/or
modify␣it␣under␣the␣same␣terms␣as␣Perl␣itself.

=head1␣SEE␣ALSO

See␣L<h2xs>,␣L<ppport.h>.

=cut
----------
Range: (705760,708005) (2245)
=head1␣NAME

C<Socket>␣-␣networking␣constants␣and␣support␣functions

=head1␣SYNOPSIS

C<Socket>␣a␣low-level␣module␣used␣by,␣among␣other␣things,␣the␣L<IO::Socket>
family␣of␣modules.␣The␣following␣examples␣demonstrate␣some␣low-level␣uses␣but
a␣practical␣program␣would␣likely␣use␣the␣higher-level␣API␣provided␣by
C<IO::Socket>␣or␣similar␣instead.

␣use␣Socket␣qw(PF_INET␣SOCK_STREAM␣pack_sockaddr_in␣inet_aton);

␣socket(my␣$socket,␣PF_INET,␣SOCK_STREAM,␣0)
␣␣␣␣␣or␣die␣"socket:␣$!";

␣my␣$port␣=␣getservbyname␣"echo",␣"tcp";
␣connect($socket,␣pack_sockaddr_in($port,␣inet_aton("localhost")))
␣␣␣␣␣or␣die␣"connect:␣$!";

␣print␣$socket␣"Hello,␣world!\n";
␣print␣<$socket>;

See␣also␣the␣L</EXAMPLES>␣section.

=head1␣DESCRIPTION

This␣module␣provides␣a␣variety␣of␣constants,␣structure␣manipulators␣and␣other
functions␣related␣to␣socket-based␣networking.␣The␣values␣and␣functions
provided␣are␣useful␣when␣used␣in␣conjunction␣with␣Perl␣core␣functions␣such␣as
socket(),␣setsockopt()␣and␣bind().␣It␣also␣provides␣several␣other␣support
functions,␣mostly␣for␣dealing␣with␣conversions␣of␣network␣addresses␣between
human-readable␣and␣native␣binary␣forms,␣and␣for␣hostname␣resolver␣operations.

Some␣constants␣and␣functions␣are␣exported␣by␣default␣by␣this␣module;␣but␣for
backward-compatibility␣any␣recently-added␣symbols␣are␣not␣exported␣by␣default
and␣must␣be␣requested␣explicitly.␣When␣an␣import␣list␣is␣provided␣to␣the
C<use␣Socket>␣line,␣the␣default␣exports␣are␣not␣automatically␣imported.␣It␣is
therefore␣best␣practice␣to␣always␣to␣explicitly␣list␣all␣the␣symbols␣required.

Also,␣some␣common␣socket␣"newline"␣constants␣are␣provided:␣the␣constants
C<CR>,␣C<LF>,␣and␣C<CRLF>,␣as␣well␣as␣C<$CR>,␣C<$LF>,␣and␣C<$CRLF>,␣which␣map
to␣C<\015>,␣C<\012>,␣and␣C<\015\012>.␣If␣you␣do␣not␣want␣to␣use␣the␣literal
characters␣in␣your␣programs,␣then␣use␣the␣constants␣provided␣here.␣They␣are
not␣exported␣by␣default,␣but␣can␣be␣imported␣individually,␣and␣with␣the
C<:crlf>␣export␣tag:

␣use␣Socket␣qw(:DEFAULT␣:crlf);

␣$sock->print("GET␣/␣HTTP/1.0$CRLF");

The␣entire␣getaddrinfo()␣subsystem␣can␣be␣exported␣using␣the␣tag␣C<:addrinfo>;
this␣exports␣the␣getaddrinfo()␣and␣getnameinfo()␣functions,␣and␣all␣the
C<AI_*>,␣C<NI_*>,␣C<NIx_*>␣and␣C<EAI_*>␣constants.

=cut
----------
Range: (708320,710868) (2548)
=head2␣PF_INET,␣PF_INET6,␣PF_UNIX,␣...

Protocol␣family␣constants␣to␣use␣as␣the␣first␣argument␣to␣socket()␣or␣the
value␣of␣the␣C<SO_DOMAIN>␣or␣C<SO_FAMILY>␣socket␣option.

=head2␣AF_INET,␣AF_INET6,␣AF_UNIX,␣...

Address␣family␣constants␣used␣by␣the␣socket␣address␣structures,␣to␣pass␣to
such␣functions␣as␣inet_pton()␣or␣getaddrinfo(),␣or␣are␣returned␣by␣such
functions␣as␣sockaddr_family().

=head2␣SOCK_STREAM,␣SOCK_DGRAM,␣SOCK_RAW,␣...

Socket␣type␣constants␣to␣use␣as␣the␣second␣argument␣to␣socket(),␣or␣the␣value
of␣the␣C<SO_TYPE>␣socket␣option.

=head2␣SOCK_NONBLOCK.␣SOCK_CLOEXEC

Linux-specific␣shortcuts␣to␣specify␣the␣C<O_NONBLOCK>␣and␣C<FD_CLOEXEC>␣flags
during␣a␣C<socket(2)>␣call.

␣socket(␣my␣$sockh,␣PF_INET,␣SOCK_DGRAM|SOCK_NONBLOCK,␣0␣)

=head2␣SOL_SOCKET

Socket␣option␣level␣constant␣for␣setsockopt()␣and␣getsockopt().

=head2␣SO_ACCEPTCONN,␣SO_BROADCAST,␣SO_ERROR,␣...

Socket␣option␣name␣constants␣for␣setsockopt()␣and␣getsockopt()␣at␣the
C<SOL_SOCKET>␣level.

=head2␣IP_OPTIONS,␣IP_TOS,␣IP_TTL,␣...

Socket␣option␣name␣constants␣for␣IPv4␣socket␣options␣at␣the␣C<IPPROTO_IP>
level.

=head2␣IP_PMTUDISC_WANT,␣IP_PMTUDISC_DONT,␣...

Socket␣option␣value␣constants␣for␣C<IP_MTU_DISCOVER>␣socket␣option.

=head2␣IPTOS_LOWDELAY,␣IPTOS_THROUGHPUT,␣IPTOS_RELIABILITY,␣...

Socket␣option␣value␣constants␣for␣C<IP_TOS>␣socket␣option.

=head2␣MSG_BCAST,␣MSG_OOB,␣MSG_TRUNC,␣...

Message␣flag␣constants␣for␣send()␣and␣recv().

=head2␣SHUT_RD,␣SHUT_RDWR,␣SHUT_WR

Direction␣constants␣for␣shutdown().

=head2␣INADDR_ANY,␣INADDR_BROADCAST,␣INADDR_LOOPBACK,␣INADDR_NONE

Constants␣giving␣the␣special␣C<AF_INET>␣addresses␣for␣wildcard,␣broadcast,
local␣loopback,␣and␣invalid␣addresses.

Normally␣equivalent␣to␣inet_aton('0.0.0.0'),␣inet_aton('255.255.255.255'),
inet_aton('localhost')␣and␣inet_aton('255.255.255.255')␣respectively.

=head2␣IPPROTO_IP,␣IPPROTO_IPV6,␣IPPROTO_TCP,␣...

IP␣protocol␣constants␣to␣use␣as␣the␣third␣argument␣to␣socket(),␣the␣level
argument␣to␣getsockopt()␣or␣setsockopt(),␣or␣the␣value␣of␣the␣C<SO_PROTOCOL>
socket␣option.

=head2␣TCP_CORK,␣TCP_KEEPALIVE,␣TCP_NODELAY,␣...

Socket␣option␣name␣constants␣for␣TCP␣socket␣options␣at␣the␣C<IPPROTO_TCP>
level.

=head2␣IN6ADDR_ANY,␣IN6ADDR_LOOPBACK

Constants␣giving␣the␣special␣C<AF_INET6>␣addresses␣for␣wildcard␣and␣local
loopback.

Normally␣equivalent␣to␣inet_pton(AF_INET6,␣"::")␣and
inet_pton(AF_INET6,␣"::1")␣respectively.

=head2␣IPV6_ADD_MEMBERSHIP,␣IPV6_MTU,␣IPV6_V6ONLY,␣...

Socket␣option␣name␣constants␣for␣IPv6␣socket␣options␣at␣the␣C<IPPROTO_IPV6>
level.

=cut
----------
Range: (711081,716832) (5751)
=head2␣$family␣=␣sockaddr_family␣$sockaddr

Takes␣a␣packed␣socket␣address␣(as␣returned␣by␣pack_sockaddr_in(),
pack_sockaddr_un()␣or␣the␣perl␣builtin␣functions␣getsockname()␣and
getpeername()).␣Returns␣the␣address␣family␣tag.␣This␣will␣be␣one␣of␣the
C<AF_*>␣constants,␣such␣as␣C<AF_INET>␣for␣a␣C<sockaddr_in>␣addresses␣or
C<AF_UNIX>␣for␣a␣C<sockaddr_un>.␣It␣can␣be␣used␣to␣figure␣out␣what␣unpack␣to
use␣for␣a␣sockaddr␣of␣unknown␣type.

=head2␣$sockaddr␣=␣pack_sockaddr_in␣$port,␣$ip_address

Takes␣two␣arguments,␣a␣port␣number␣and␣an␣opaque␣string␣(as␣returned␣by
inet_aton(),␣or␣a␣v-string).␣Returns␣the␣C<sockaddr_in>␣structure␣with␣those
arguments␣packed␣in␣and␣C<AF_INET>␣filled␣in.␣For␣Internet␣domain␣sockets,
this␣structure␣is␣normally␣what␣you␣need␣for␣the␣arguments␣in␣bind(),
connect(),␣and␣send().

An␣undefined␣$port␣argument␣is␣taken␣as␣zero;␣an␣undefined␣$ip_address␣is
considered␣a␣fatal␣error.

=head2␣($port,␣$ip_address)␣=␣unpack_sockaddr_in␣$sockaddr

Takes␣a␣C<sockaddr_in>␣structure␣(as␣returned␣by␣pack_sockaddr_in(),
getpeername()␣or␣recv()).␣Returns␣a␣list␣of␣two␣elements:␣the␣port␣and␣an
opaque␣string␣representing␣the␣IP␣address␣(you␣can␣use␣inet_ntoa()␣to␣convert
the␣address␣to␣the␣four-dotted␣numeric␣format).␣Will␣croak␣if␣the␣structure
does␣not␣represent␣an␣C<AF_INET>␣address.

In␣scalar␣context␣will␣return␣just␣the␣IP␣address.

=head2␣$sockaddr␣=␣sockaddr_in␣$port,␣$ip_address

=head2␣($port,␣$ip_address)␣=␣sockaddr_in␣$sockaddr

A␣wrapper␣of␣pack_sockaddr_in()␣or␣unpack_sockaddr_in().␣In␣list␣context,
unpacks␣its␣argument␣and␣returns␣a␣list␣consisting␣of␣the␣port␣and␣IP␣address.
In␣scalar␣context,␣packs␣its␣port␣and␣IP␣address␣arguments␣as␣a␣C<sockaddr_in>
and␣returns␣it.

Provided␣largely␣for␣legacy␣compatibility;␣it␣is␣better␣to␣use
pack_sockaddr_in()␣or␣unpack_sockaddr_in()␣explicitly.

=head2␣$sockaddr␣=␣pack_sockaddr_in6␣$port,␣$ip6_address,␣[$scope_id,␣[$flowinfo]]

Takes␣two␣to␣four␣arguments,␣a␣port␣number,␣an␣opaque␣string␣(as␣returned␣by
inet_pton()),␣optionally␣a␣scope␣ID␣number,␣and␣optionally␣a␣flow␣label
number.␣Returns␣the␣C<sockaddr_in6>␣structure␣with␣those␣arguments␣packed␣in
and␣C<AF_INET6>␣filled␣in.␣IPv6␣equivalent␣of␣pack_sockaddr_in().

An␣undefined␣$port␣argument␣is␣taken␣as␣zero;␣an␣undefined␣$ip6_address␣is
considered␣a␣fatal␣error.

=head2␣($port,␣$ip6_address,␣$scope_id,␣$flowinfo)␣=␣unpack_sockaddr_in6␣$sockaddr

Takes␣a␣C<sockaddr_in6>␣structure.␣Returns␣a␣list␣of␣four␣elements:␣the␣port
number,␣an␣opaque␣string␣representing␣the␣IPv6␣address,␣the␣scope␣ID,␣and␣the
flow␣label.␣(You␣can␣use␣inet_ntop()␣to␣convert␣the␣address␣to␣the␣usual
string␣format).␣Will␣croak␣if␣the␣structure␣does␣not␣represent␣an␣C<AF_INET6>
address.

In␣scalar␣context␣will␣return␣just␣the␣IP␣address.

=head2␣$sockaddr␣=␣sockaddr_in6␣$port,␣$ip6_address,␣[$scope_id,␣[$flowinfo]]

=head2␣($port,␣$ip6_address,␣$scope_id,␣$flowinfo)␣=␣sockaddr_in6␣$sockaddr

A␣wrapper␣of␣pack_sockaddr_in6()␣or␣unpack_sockaddr_in6().␣In␣list␣context,
unpacks␣its␣argument␣according␣to␣unpack_sockaddr_in6().␣In␣scalar␣context,
packs␣its␣arguments␣according␣to␣pack_sockaddr_in6().

Provided␣largely␣for␣legacy␣compatibility;␣it␣is␣better␣to␣use
pack_sockaddr_in6()␣or␣unpack_sockaddr_in6()␣explicitly.

=head2␣$sockaddr␣=␣pack_sockaddr_un␣$path

Takes␣one␣argument,␣a␣pathname.␣Returns␣the␣C<sockaddr_un>␣structure␣with␣that
path␣packed␣in␣with␣C<AF_UNIX>␣filled␣in.␣For␣C<PF_UNIX>␣sockets,␣this
structure␣is␣normally␣what␣you␣need␣for␣the␣arguments␣in␣bind(),␣connect(),
and␣send().

=head2␣($path)␣=␣unpack_sockaddr_un␣$sockaddr

Takes␣a␣C<sockaddr_un>␣structure␣(as␣returned␣by␣pack_sockaddr_un(),
getpeername()␣or␣recv()).␣Returns␣a␣list␣of␣one␣element:␣the␣pathname.␣Will
croak␣if␣the␣structure␣does␣not␣represent␣an␣C<AF_UNIX>␣address.

=head2␣$sockaddr␣=␣sockaddr_un␣$path

=head2␣($path)␣=␣sockaddr_un␣$sockaddr

A␣wrapper␣of␣pack_sockaddr_un()␣or␣unpack_sockaddr_un().␣In␣a␣list␣context,
unpacks␣its␣argument␣and␣returns␣a␣list␣consisting␣of␣the␣pathname.␣In␣a
scalar␣context,␣packs␣its␣pathname␣as␣a␣C<sockaddr_un>␣and␣returns␣it.

Provided␣largely␣for␣legacy␣compatibility;␣it␣is␣better␣to␣use
pack_sockaddr_un()␣or␣unpack_sockaddr_un()␣explicitly.

These␣are␣only␣supported␣if␣your␣system␣has␣E<lt>F<sys/un.h>E<gt>.

=head2␣$ip_mreq␣=␣pack_ip_mreq␣$multiaddr,␣$interface

Takes␣an␣IPv4␣multicast␣address␣and␣optionally␣an␣interface␣address␣(or
C<INADDR_ANY>).␣Returns␣the␣C<ip_mreq>␣structure␣with␣those␣arguments␣packed
in.␣Suitable␣for␣use␣with␣the␣C<IP_ADD_MEMBERSHIP>␣and␣C<IP_DROP_MEMBERSHIP>
sockopts.

=head2␣($multiaddr,␣$interface)␣=␣unpack_ip_mreq␣$ip_mreq

Takes␣an␣C<ip_mreq>␣structure.␣Returns␣a␣list␣of␣two␣elements;␣the␣IPv4
multicast␣address␣and␣interface␣address.

=head2␣$ip_mreq_source␣=␣pack_ip_mreq_source␣$multiaddr,␣$source,␣$interface

Takes␣an␣IPv4␣multicast␣address,␣source␣address,␣and␣optionally␣an␣interface
address␣(or␣C<INADDR_ANY>).␣Returns␣the␣C<ip_mreq_source>␣structure␣with␣those
arguments␣packed␣in.␣Suitable␣for␣use␣with␣the␣C<IP_ADD_SOURCE_MEMBERSHIP>
and␣C<IP_DROP_SOURCE_MEMBERSHIP>␣sockopts.

=head2␣($multiaddr,␣$source,␣$interface)␣=␣unpack_ip_mreq_source␣$ip_mreq

Takes␣an␣C<ip_mreq_source>␣structure.␣Returns␣a␣list␣of␣three␣elements;␣the
IPv4␣multicast␣address,␣source␣address␣and␣interface␣address.

=head2␣$ipv6_mreq␣=␣pack_ipv6_mreq␣$multiaddr6,␣$ifindex

Takes␣an␣IPv6␣multicast␣address␣and␣an␣interface␣number.␣Returns␣the
C<ipv6_mreq>␣structure␣with␣those␣arguments␣packed␣in.␣Suitable␣for␣use␣with
the␣C<IPV6_ADD_MEMBERSHIP>␣and␣C<IPV6_DROP_MEMBERSHIP>␣sockopts.

=head2␣($multiaddr6,␣$ifindex)␣=␣unpack_ipv6_mreq␣$ipv6_mreq

Takes␣an␣C<ipv6_mreq>␣structure.␣Returns␣a␣list␣of␣two␣elements;␣the␣IPv6
address␣and␣an␣interface␣number.

=cut
----------
Range: (716858,724734) (7876)
=head2␣$ip_address␣=␣inet_aton␣$string

Takes␣a␣string␣giving␣the␣name␣of␣a␣host,␣or␣a␣textual␣representation␣of␣an␣IP
address␣and␣translates␣that␣to␣an␣packed␣binary␣address␣structure␣suitable␣to
pass␣to␣pack_sockaddr_in().␣If␣passed␣a␣hostname␣that␣cannot␣be␣resolved,
returns␣C<undef>.␣For␣multi-homed␣hosts␣(hosts␣with␣more␣than␣one␣address),
the␣first␣address␣found␣is␣returned.

For␣portability␣do␣not␣assume␣that␣the␣result␣of␣inet_aton()␣is␣32␣bits␣wide,
in␣other␣words,␣that␣it␣would␣contain␣only␣the␣IPv4␣address␣in␣network␣order.

This␣IPv4-only␣function␣is␣provided␣largely␣for␣legacy␣reasons.␣Newly-written
code␣should␣use␣getaddrinfo()␣or␣inet_pton()␣instead␣for␣IPv6␣support.

=head2␣$string␣=␣inet_ntoa␣$ip_address

Takes␣a␣packed␣binary␣address␣structure␣such␣as␣returned␣by
unpack_sockaddr_in()␣(or␣a␣v-string␣representing␣the␣four␣octets␣of␣the␣IPv4
address␣in␣network␣order)␣and␣translates␣it␣into␣a␣string␣of␣the␣form
C<d.d.d.d>␣where␣the␣C<d>s␣are␣numbers␣less␣than␣256␣(the␣normal
human-readable␣four␣dotted␣number␣notation␣for␣Internet␣addresses).

This␣IPv4-only␣function␣is␣provided␣largely␣for␣legacy␣reasons.␣Newly-written
code␣should␣use␣getnameinfo()␣or␣inet_ntop()␣instead␣for␣IPv6␣support.

=head2␣$address␣=␣inet_pton␣$family,␣$string

Takes␣an␣address␣family␣(such␣as␣C<AF_INET>␣or␣C<AF_INET6>)␣and␣a␣string
containing␣a␣textual␣representation␣of␣an␣address␣in␣that␣family␣and
translates␣that␣to␣an␣packed␣binary␣address␣structure.

See␣also␣getaddrinfo()␣for␣a␣more␣powerful␣and␣flexible␣function␣to␣look␣up
socket␣addresses␣given␣hostnames␣or␣textual␣addresses.

=head2␣$string␣=␣inet_ntop␣$family,␣$address

Takes␣an␣address␣family␣and␣a␣packed␣binary␣address␣structure␣and␣translates
it␣into␣a␣human-readable␣textual␣representation␣of␣the␣address;␣typically␣in
C<d.d.d.d>␣form␣for␣C<AF_INET>␣or␣C<hhhh:hhhh::hhhh>␣form␣for␣C<AF_INET6>.

See␣also␣getnameinfo()␣for␣a␣more␣powerful␣and␣flexible␣function␣to␣turn
socket␣addresses␣into␣human-readable␣textual␣representations.

=head2␣($err,␣@result)␣=␣getaddrinfo␣$host,␣$service,␣[$hints]

Given␣both␣a␣hostname␣and␣service␣name,␣this␣function␣attempts␣to␣resolve␣the
host␣name␣into␣a␣list␣of␣network␣addresses,␣and␣the␣service␣name␣into␣a
protocol␣and␣port␣number,␣and␣then␣returns␣a␣list␣of␣address␣structures
suitable␣to␣connect()␣to␣it.

Given␣just␣a␣host␣name,␣this␣function␣attempts␣to␣resolve␣it␣to␣a␣list␣of
network␣addresses,␣and␣then␣returns␣a␣list␣of␣address␣structures␣giving␣these
addresses.

Given␣just␣a␣service␣name,␣this␣function␣attempts␣to␣resolve␣it␣to␣a␣protocol
and␣port␣number,␣and␣then␣returns␣a␣list␣of␣address␣structures␣that␣represent
it␣suitable␣to␣bind()␣to.␣This␣use␣should␣be␣combined␣with␣the␣C<AI_PASSIVE>
flag;␣see␣below.

Given␣neither␣name,␣it␣generates␣an␣error.

If␣present,␣$hints␣should␣be␣a␣reference␣to␣a␣hash,␣where␣the␣following␣keys
are␣recognised:

=over␣4

=item␣flags␣=>␣INT

A␣bitfield␣containing␣C<AI_*>␣constants;␣see␣below.

=item␣family␣=>␣INT

Restrict␣to␣only␣generating␣addresses␣in␣this␣address␣family

=item␣socktype␣=>␣INT

Restrict␣to␣only␣generating␣addresses␣of␣this␣socket␣type

=item␣protocol␣=>␣INT

Restrict␣to␣only␣generating␣addresses␣for␣this␣protocol

=back

The␣return␣value␣will␣be␣a␣list;␣the␣first␣value␣being␣an␣error␣indication,
followed␣by␣a␣list␣of␣address␣structures␣(if␣no␣error␣occurred).

The␣error␣value␣will␣be␣a␣dualvar;␣comparable␣to␣the␣C<EAI_*>␣error␣constants,
or␣printable␣as␣a␣human-readable␣error␣message␣string.␣If␣no␣error␣occurred␣it
will␣be␣zero␣numerically␣and␣an␣empty␣string.

Each␣value␣in␣the␣results␣list␣will␣be␣a␣hash␣reference␣containing␣the␣following
fields:

=over␣4

=item␣family␣=>␣INT

The␣address␣family␣(e.g.␣C<AF_INET>)

=item␣socktype␣=>␣INT

The␣socket␣type␣(e.g.␣C<SOCK_STREAM>)

=item␣protocol␣=>␣INT

The␣protocol␣(e.g.␣C<IPPROTO_TCP>)

=item␣addr␣=>␣STRING

The␣address␣in␣a␣packed␣string␣(such␣as␣would␣be␣returned␣by
pack_sockaddr_in())

=item␣canonname␣=>␣STRING

The␣canonical␣name␣for␣the␣host␣if␣the␣C<AI_CANONNAME>␣flag␣was␣provided,␣or
C<undef>␣otherwise.␣This␣field␣will␣only␣be␣present␣on␣the␣first␣returned
address.

=back

The␣following␣flag␣constants␣are␣recognised␣in␣the␣$hints␣hash.␣Other␣flag
constants␣may␣exist␣as␣provided␣by␣the␣OS.

=over␣4

=item␣AI_PASSIVE

Indicates␣that␣this␣resolution␣is␣for␣a␣local␣bind()␣for␣a␣passive␣(i.e.
listening)␣socket,␣rather␣than␣an␣active␣(i.e.␣connecting)␣socket.

=item␣AI_CANONNAME

Indicates␣that␣the␣caller␣wishes␣the␣canonical␣hostname␣(C<canonname>)␣field
of␣the␣result␣to␣be␣filled␣in.

=item␣AI_NUMERICHOST

Indicates␣that␣the␣caller␣will␣pass␣a␣numeric␣address,␣rather␣than␣a␣hostname,
and␣that␣getaddrinfo()␣must␣not␣perform␣a␣resolve␣operation␣on␣this␣name.␣This
flag␣will␣prevent␣a␣possibly-slow␣network␣lookup␣operation,␣and␣instead␣return
an␣error␣if␣a␣hostname␣is␣passed.

=back

=head2␣($err,␣$hostname,␣$servicename)␣=␣getnameinfo␣$sockaddr,␣[$flags,␣[$xflags]]

Given␣a␣packed␣socket␣address␣(such␣as␣from␣getsockname(),␣getpeername(),␣or
returned␣by␣getaddrinfo()␣in␣a␣C<addr>␣field),␣returns␣the␣hostname␣and
symbolic␣service␣name␣it␣represents.␣$flags␣may␣be␣a␣bitmask␣of␣C<NI_*>
constants,␣or␣defaults␣to␣0␣if␣unspecified.

The␣return␣value␣will␣be␣a␣list;␣the␣first␣value␣being␣an␣error␣condition,
followed␣by␣the␣hostname␣and␣service␣name.

The␣error␣value␣will␣be␣a␣dualvar;␣comparable␣to␣the␣C<EAI_*>␣error␣constants,
or␣printable␣as␣a␣human-readable␣error␣message␣string.␣The␣host␣and␣service
names␣will␣be␣plain␣strings.

The␣following␣flag␣constants␣are␣recognised␣as␣$flags.␣Other␣flag␣constants␣may
exist␣as␣provided␣by␣the␣OS.

=over␣4

=item␣NI_NUMERICHOST

Requests␣that␣a␣human-readable␣string␣representation␣of␣the␣numeric␣address␣be
returned␣directly,␣rather␣than␣performing␣a␣name␣resolve␣operation␣that␣may
convert␣it␣into␣a␣hostname.␣This␣will␣also␣avoid␣potentially-blocking␣network
IO.

=item␣NI_NUMERICSERV

Requests␣that␣the␣port␣number␣be␣returned␣directly␣as␣a␣number␣representation
rather␣than␣performing␣a␣name␣resolve␣operation␣that␣may␣convert␣it␣into␣a
service␣name.

=item␣NI_NAMEREQD

If␣a␣name␣resolve␣operation␣fails␣to␣provide␣a␣name,␣then␣this␣flag␣will␣cause
getnameinfo()␣to␣indicate␣an␣error,␣rather␣than␣returning␣the␣numeric
representation␣as␣a␣human-readable␣string.

=item␣NI_DGRAM

Indicates␣that␣the␣socket␣address␣relates␣to␣a␣C<SOCK_DGRAM>␣socket,␣for␣the
services␣whose␣name␣differs␣between␣TCP␣and␣UDP␣protocols.

=back

The␣following␣constants␣may␣be␣supplied␣as␣$xflags.

=over␣4

=item␣NIx_NOHOST

Indicates␣that␣the␣caller␣is␣not␣interested␣in␣the␣hostname␣of␣the␣result,␣so
it␣does␣not␣have␣to␣be␣converted.␣C<undef>␣will␣be␣returned␣as␣the␣hostname.

=item␣NIx_NOSERV

Indicates␣that␣the␣caller␣is␣not␣interested␣in␣the␣service␣name␣of␣the␣result,
so␣it␣does␣not␣have␣to␣be␣converted.␣C<undef>␣will␣be␣returned␣as␣the␣service
name.

=back

=head1␣getaddrinfo()␣/␣getnameinfo()␣ERROR␣CONSTANTS

The␣following␣constants␣may␣be␣returned␣by␣getaddrinfo()␣or␣getnameinfo().
Others␣may␣be␣provided␣by␣the␣OS.

=over␣4

=item␣EAI_AGAIN

A␣temporary␣failure␣occurred␣during␣name␣resolution.␣The␣operation␣may␣be
successful␣if␣it␣is␣retried␣later.

=item␣EAI_BADFLAGS

The␣value␣of␣the␣C<flags>␣hint␣to␣getaddrinfo(),␣or␣the␣$flags␣parameter␣to
getnameinfo()␣contains␣unrecognised␣flags.

=item␣EAI_FAMILY

The␣C<family>␣hint␣to␣getaddrinfo(),␣or␣the␣family␣of␣the␣socket␣address
passed␣to␣getnameinfo()␣is␣not␣supported.

=item␣EAI_NODATA

The␣host␣name␣supplied␣to␣getaddrinfo()␣did␣not␣provide␣any␣usable␣address
data.

=item␣EAI_NONAME

The␣host␣name␣supplied␣to␣getaddrinfo()␣does␣not␣exist,␣or␣the␣address
supplied␣to␣getnameinfo()␣is␣not␣associated␣with␣a␣host␣name␣and␣the
C<NI_NAMEREQD>␣flag␣was␣supplied.

=item␣EAI_SERVICE

The␣service␣name␣supplied␣to␣getaddrinfo()␣is␣not␣available␣for␣the␣socket
type␣given␣in␣the␣$hints.

=back

=cut
----------
Range: (724736,728828) (4092)
=head1␣EXAMPLES

=head2␣Lookup␣for␣connect()

The␣getaddrinfo()␣function␣converts␣a␣hostname␣and␣a␣service␣name␣into␣a␣list
of␣structures,␣each␣containing␣a␣potential␣way␣to␣connect()␣to␣the␣named
service␣on␣the␣named␣host.

␣use␣IO::Socket;
␣use␣Socket␣qw(SOCK_STREAM␣getaddrinfo);

␣my␣%hints␣=␣(socktype␣=>␣SOCK_STREAM);
␣my␣($err,␣@res)␣=␣getaddrinfo("localhost",␣"echo",␣\%hints);
␣die␣"Cannot␣getaddrinfo␣-␣$err"␣if␣$err;

␣my␣$sock;

␣foreach␣my␣$ai␣(@res)␣{
␣␣␣␣␣my␣$candidate␣=␣IO::Socket->new();

␣␣␣␣␣$candidate->socket($ai->{family},␣$ai->{socktype},␣$ai->{protocol})
␣␣␣␣␣␣␣␣␣or␣next;

␣␣␣␣␣$candidate->connect($ai->{addr})
␣␣␣␣␣␣␣␣␣or␣next;

␣␣␣␣␣$sock␣=␣$candidate;
␣␣␣␣␣last;
␣}

␣die␣"Cannot␣connect␣to␣localhost:echo"␣unless␣$sock;

␣$sock->print("Hello,␣world!\n");
␣print␣<$sock>;

Because␣a␣list␣of␣potential␣candidates␣is␣returned,␣the␣C<while>␣loop␣tries
each␣in␣turn␣until␣it␣finds␣one␣that␣succeeds␣both␣the␣socket()␣and␣connect()
calls.

This␣function␣performs␣the␣work␣of␣the␣legacy␣functions␣gethostbyname(),
getservbyname(),␣inet_aton()␣and␣pack_sockaddr_in().

In␣practice␣this␣logic␣is␣better␣performed␣by␣L<IO::Socket::IP>.

=head2␣Making␣a␣human-readable␣string␣out␣of␣an␣address

The␣getnameinfo()␣function␣converts␣a␣socket␣address,␣such␣as␣returned␣by
getsockname()␣or␣getpeername(),␣into␣a␣pair␣of␣human-readable␣strings
representing␣the␣address␣and␣service␣name.

␣use␣IO::Socket::IP;
␣use␣Socket␣qw(getnameinfo);

␣my␣$server␣=␣IO::Socket::IP->new(LocalPort␣=>␣12345,␣Listen␣=>␣1)␣or
␣␣␣␣␣die␣"Cannot␣listen␣-␣$@";

␣my␣$socket␣=␣$server->accept␣or␣die␣"accept:␣$!";

␣my␣($err,␣$hostname,␣$servicename)␣=␣getnameinfo($socket->peername);
␣die␣"Cannot␣getnameinfo␣-␣$err"␣if␣$err;

␣print␣"The␣peer␣is␣connected␣from␣$hostname\n";

Since␣in␣this␣example␣only␣the␣hostname␣was␣used,␣the␣redundant␣conversion␣of
the␣port␣number␣into␣a␣service␣name␣may␣be␣omitted␣by␣passing␣the
C<NIx_NOSERV>␣flag.

␣use␣Socket␣qw(getnameinfo␣NIx_NOSERV);

␣my␣($err,␣$hostname)␣=␣getnameinfo($socket->peername,␣0,␣NIx_NOSERV);

This␣function␣performs␣the␣work␣of␣the␣legacy␣functions␣unpack_sockaddr_in(),
inet_ntoa(),␣gethostbyaddr()␣and␣getservbyport().

In␣practice␣this␣logic␣is␣better␣performed␣by␣L<IO::Socket::IP>.

=head2␣Resolving␣hostnames␣into␣IP␣addresses

To␣turn␣a␣hostname␣into␣a␣human-readable␣plain␣IP␣address␣use␣getaddrinfo()
to␣turn␣the␣hostname␣into␣a␣list␣of␣socket␣structures,␣then␣getnameinfo()␣on
each␣one␣to␣make␣it␣a␣readable␣IP␣address␣again.

␣use␣Socket␣qw(:addrinfo␣SOCK_RAW);

␣my␣($err,␣@res)␣=␣getaddrinfo($hostname,␣"",␣{socktype␣=>␣SOCK_RAW});
␣die␣"Cannot␣getaddrinfo␣-␣$err"␣if␣$err;

␣while(␣my␣$ai␣=␣shift␣@res␣)␣{
␣␣␣␣␣my␣($err,␣$ipaddr)␣=␣getnameinfo($ai->{addr},␣NI_NUMERICHOST,␣NIx_NOSERV);
␣␣␣␣␣die␣"Cannot␣getnameinfo␣-␣$err"␣if␣$err;

␣␣␣␣␣print␣"$ipaddr\n";
␣}

The␣C<socktype>␣hint␣to␣getaddrinfo()␣filters␣the␣results␣to␣only␣include␣one
socket␣type␣and␣protocol.␣Without␣this␣most␣OSes␣return␣three␣combinations,
for␣C<SOCK_STREAM>,␣C<SOCK_DGRAM>␣and␣C<SOCK_RAW>,␣resulting␣in␣triplicate
output␣of␣addresses.␣The␣C<NI_NUMERICHOST>␣flag␣to␣getnameinfo()␣causes␣it␣to
return␣a␣string-formatted␣plain␣IP␣address,␣rather␣than␣reverse␣resolving␣it
back␣into␣a␣hostname.

This␣combination␣performs␣the␣work␣of␣the␣legacy␣functions␣gethostbyname()
and␣inet_ntoa().

=head2␣Accessing␣socket␣options

The␣many␣C<SO_*>␣and␣other␣constants␣provide␣the␣socket␣option␣names␣for
getsockopt()␣and␣setsockopt().

␣use␣IO::Socket::INET;
␣use␣Socket␣qw(SOL_SOCKET␣SO_RCVBUF␣IPPROTO_IP␣IP_TTL);

␣my␣$socket␣=␣IO::Socket::INET->new(LocalPort␣=>␣0,␣Proto␣=>␣'udp')
␣␣␣␣␣or␣die␣"Cannot␣create␣socket:␣$@";

␣$socket->setsockopt(SOL_SOCKET,␣SO_RCVBUF,␣64*1024)␣or
␣␣␣␣␣die␣"setsockopt:␣$!";

␣print␣"Receive␣buffer␣is␣",␣$socket->getsockopt(SOL_SOCKET,␣SO_RCVBUF),
␣␣␣␣␣"␣bytes\n";

␣print␣"IP␣TTL␣is␣",␣$socket->getsockopt(IPPROTO_IP,␣IP_TTL),␣"\n";

As␣a␣convenience,␣L<IO::Socket>'s␣setsockopt()␣method␣will␣convert␣a␣number
into␣a␣packed␣byte␣buffer,␣and␣getsockopt()␣will␣unpack␣a␣byte␣buffer␣of␣the
correct␣size␣back␣into␣a␣number.

=cut
----------
Range: (729396,731273) (1877)
qw(
	PF_802␣PF_AAL␣PF_APPLETALK␣PF_CCITT␣PF_CHAOS␣PF_CTF␣PF_DATAKIT
	PF_DECnet␣PF_DLI␣PF_ECMA␣PF_GOSIP␣PF_HYLINK␣PF_IMPLINK␣PF_INET␣PF_INET6
	PF_ISO␣PF_KEY␣PF_LAST␣PF_LAT␣PF_LINK␣PF_MAX␣PF_NBS␣PF_NIT␣PF_NS␣PF_OSI
	PF_OSINET␣PF_PUP␣PF_ROUTE␣PF_SNA␣PF_UNIX␣PF_UNSPEC␣PF_USER␣PF_WAN
	PF_X25

	AF_802␣AF_AAL␣AF_APPLETALK␣AF_CCITT␣AF_CHAOS␣AF_CTF␣AF_DATAKIT
	AF_DECnet␣AF_DLI␣AF_ECMA␣AF_GOSIP␣AF_HYLINK␣AF_IMPLINK␣AF_INET␣AF_INET6
	AF_ISO␣AF_KEY␣AF_LAST␣AF_LAT␣AF_LINK␣AF_MAX␣AF_NBS␣AF_NIT␣AF_NS␣AF_OSI
	AF_OSINET␣AF_PUP␣AF_ROUTE␣AF_SNA␣AF_UNIX␣AF_UNSPEC␣AF_USER␣AF_WAN
	AF_X25

	SOCK_DGRAM␣SOCK_RAW␣SOCK_RDM␣SOCK_SEQPACKET␣SOCK_STREAM

	SOL_SOCKET

	SO_ACCEPTCONN␣SO_ATTACH_FILTER␣SO_BACKLOG␣SO_BROADCAST␣SO_CHAMELEON
	SO_DEBUG␣SO_DETACH_FILTER␣SO_DGRAM_ERRIND␣SO_DOMAIN␣SO_DONTLINGER
	SO_DONTROUTE␣SO_ERROR␣SO_FAMILY␣SO_KEEPALIVE␣SO_LINGER␣SO_OOBINLINE
	SO_PASSCRED␣SO_PASSIFNAME␣SO_PEERCRED␣SO_PROTOCOL␣SO_PROTOTYPE
	SO_RCVBUF␣SO_RCVLOWAT␣SO_RCVTIMEO␣SO_REUSEADDR␣SO_REUSEPORT
	SO_SECURITY_AUTHENTICATION␣SO_SECURITY_ENCRYPTION_NETWORK
	SO_SECURITY_ENCRYPTION_TRANSPORT␣SO_SNDBUF␣SO_SNDLOWAT␣SO_SNDTIMEO
	SO_STATE␣SO_TYPE␣SO_USELOOPBACK␣SO_XOPEN␣SO_XSE

	IP_HDRINCL␣IP_OPTIONS␣IP_RECVOPTS␣IP_RECVRETOPTS␣IP_RETOPTS␣IP_TOS
	IP_TTL

	MSG_BCAST␣MSG_BTAG␣MSG_CTLFLAGS␣MSG_CTLIGNORE␣MSG_CTRUNC␣MSG_DONTROUTE
	MSG_DONTWAIT␣MSG_EOF␣MSG_EOR␣MSG_ERRQUEUE␣MSG_ETAG␣MSG_FASTOPEN␣MSG_FIN
	MSG_MAXIOVLEN␣MSG_MCAST␣MSG_NOSIGNAL␣MSG_OOB␣MSG_PEEK␣MSG_PROXY␣MSG_RST
	MSG_SYN␣MSG_TRUNC␣MSG_URG␣MSG_WAITALL␣MSG_WIRE

	SHUT_RD␣SHUT_RDWR␣SHUT_WR

	INADDR_ANY␣INADDR_BROADCAST␣INADDR_LOOPBACK␣INADDR_NONE

	SCM_CONNECT␣SCM_CREDENTIALS␣SCM_CREDS␣SCM_RIGHTS␣SCM_TIMESTAMP

	SOMAXCONN

	IOV_MAX
	UIO_MAXIOV

	sockaddr_family
	pack_sockaddr_in␣␣unpack_sockaddr_in␣␣sockaddr_in
	pack_sockaddr_in6␣unpack_sockaddr_in6␣sockaddr_in6
	pack_sockaddr_un␣␣unpack_sockaddr_un␣␣sockaddr_un␣

	inet_aton␣inet_ntoa
);
----------
Range: (731437,733290) (1853)
qw(
	CR␣LF␣CRLF␣$CR␣$LF␣$CRLF

	SOCK_NONBLOCK␣SOCK_CLOEXEC

	IP_ADD_MEMBERSHIP␣IP_ADD_SOURCE_MEMBERSHIP␣IP_BIND_ADDRESS_NO_PORT
	IP_DROP_MEMBERSHIP␣IP_DROP_SOURCE_MEMBERSHIP␣IP_FREEBIND
	IP_MULTICAST_ALL␣IP_MULTICAST_IF␣IP_MULTICAST_LOOP␣IP_MULTICAST_TTL
	IP_MTU␣IP_MTU_DISCOVER␣IP_NODEFRAG␣IP_RECVERR␣IP_TRANSPARENT

	IPPROTO_IP␣IPPROTO_IPV6␣IPPROTO_RAW␣IPPROTO_ICMP␣IPPROTO_IGMP
	IPPROTO_TCP␣IPPROTO_UDP␣IPPROTO_GRE␣IPPROTO_ESP␣IPPROTO_AH
	IPPROTO_ICMPV6␣IPPROTO_SCTP

	IP_PMTUDISC_DO␣IP_PMTUDISC_DONT␣IP_PMTUDISC_PROBE␣IP_PMTUDISC_WANT

	IPTOS_LOWDELAY␣IPTOS_THROUGHPUT␣IPTOS_RELIABILITY␣IPTOS_MINCOST

	TCP_CONGESTION␣TCP_CONNECTIONTIMEOUT␣TCP_CORK␣TCP_DEFER_ACCEPT
	TCP_FASTOPEN␣TCP_INFO␣TCP_INIT_CWND␣TCP_KEEPALIVE␣TCP_KEEPCNT
	TCP_KEEPIDLE␣TCP_KEEPINTVL␣TCP_LINGER2␣TCP_MAXRT␣TCP_MAXSEG
	TCP_MD5SIG␣TCP_NODELAY␣TCP_NOOPT␣TCP_NOPUSH␣TCP_QUICKACK
	TCP_SACK_ENABLE␣TCP_STDURG␣TCP_SYNCNT␣TCP_USER_TIMEOUT
	TCP_WINDOW_CLAMP

	IN6ADDR_ANY␣IN6ADDR_LOOPBACK

	IPV6_ADDRFROM␣IPV6_ADD_MEMBERSHIP␣IPV6_DROP_MEMBERSHIP␣IPV6_JOIN_GROUP
	IPV6_LEAVE_GROUP␣IPV6_MTU␣IPV6_MTU_DISCOVER␣IPV6_MULTICAST_HOPS
	IPV6_MULTICAST_IF␣IPV6_MULTICAST_LOOP␣IPV6_RECVERR␣IPV6_ROUTER_ALERT
	IPV6_UNICAST_HOPS␣IPV6_V6ONLY

	SO_LOCK_FILTER␣SO_RCVBUFFORCE␣SO_SNDBUFFORCE

	pack_ip_mreq␣unpack_ip_mreq␣pack_ip_mreq_source␣unpack_ip_mreq_source

	pack_ipv6_mreq␣unpack_ipv6_mreq

	inet_pton␣inet_ntop

	getaddrinfo␣getnameinfo

	AI_ADDRCONFIG␣AI_ALL␣AI_CANONIDN␣AI_CANONNAME␣AI_IDN
	AI_IDN_ALLOW_UNASSIGNED␣AI_IDN_USE_STD3_ASCII_RULES␣AI_NUMERICHOST
	AI_NUMERICSERV␣AI_PASSIVE␣AI_V4MAPPED

	NI_DGRAM␣NI_IDN␣NI_IDN_ALLOW_UNASSIGNED␣NI_IDN_USE_STD3_ASCII_RULES
	NI_NAMEREQD␣NI_NOFQDN␣NI_NUMERICHOST␣NI_NUMERICSERV

	NIx_NOHOST␣NIx_NOSERV

	EAI_ADDRFAMILY␣EAI_AGAIN␣EAI_BADFLAGS␣EAI_BADHINTS␣EAI_FAIL␣EAI_FAMILY
	EAI_NODATA␣EAI_NONAME␣EAI_PROTOCOL␣EAI_SERVICE␣EAI_SOCKTYPE␣EAI_SYSTEM
);
----------
Range: (753103,754989) (1886)
=head1␣NAME

Fcntl␣-␣load␣the␣C␣Fcntl.h␣defines

=head1␣SYNOPSIS

␣␣␣␣use␣Fcntl;
␣␣␣␣use␣Fcntl␣qw(:DEFAULT␣:flock);

=head1␣DESCRIPTION

This␣module␣is␣just␣a␣translation␣of␣the␣C␣F<fcntl.h>␣file.
Unlike␣the␣old␣mechanism␣of␣requiring␣a␣translated␣F<fcntl.ph>
file,␣this␣uses␣the␣B<h2xs>␣program␣(see␣the␣Perl␣source␣distribution)
and␣your␣native␣C␣compiler.␣␣This␣means␣that␣it␣has␣a␣
far␣more␣likely␣chance␣of␣getting␣the␣numbers␣right.

=head1␣NOTE

Only␣C<#define>␣symbols␣get␣translated;␣you␣must␣still␣correctly
pack␣up␣your␣own␣arguments␣to␣pass␣as␣args␣for␣locking␣functions,␣etc.

=head1␣EXPORTED␣SYMBOLS

By␣default␣your␣system's␣F_*␣and␣O_*␣constants␣(eg,␣F_DUPFD␣and
O_CREAT)␣and␣the␣FD_CLOEXEC␣constant␣are␣exported␣into␣your␣namespace.

You␣can␣request␣that␣the␣flock()␣constants␣(LOCK_SH,␣LOCK_EX,␣LOCK_NB
and␣LOCK_UN)␣be␣provided␣by␣using␣the␣tag␣C<:flock>.␣␣See␣L<Exporter>.

You␣can␣request␣that␣the␣old␣constants␣(FAPPEND,␣FASYNC,␣FCREAT,
FDEFER,␣FEXCL,␣FNDELAY,␣FNONBLOCK,␣FSYNC,␣FTRUNC)␣be␣provided␣for
compatibility␣reasons␣by␣using␣the␣tag␣C<:Fcompat>.␣␣For␣new
applications␣the␣newer␣versions␣of␣these␣constants␣are␣suggested
(O_APPEND,␣O_ASYNC,␣O_CREAT,␣O_DEFER,␣O_EXCL,␣O_NDELAY,␣O_NONBLOCK,
O_SYNC,␣O_TRUNC).

For␣ease␣of␣use␣also␣the␣SEEK_*␣constants␣(for␣seek()␣and␣sysseek(),
e.g.␣SEEK_END)␣and␣the␣S_I*␣constants␣(for␣chmod()␣and␣stat())␣are
available␣for␣import.␣␣They␣can␣be␣imported␣either␣separately␣or␣using
the␣tags␣C<:seek>␣and␣C<:mode>.

Please␣refer␣to␣your␣native␣fcntl(2),␣open(2),␣fseek(3),␣lseek(2)
(equal␣to␣Perl's␣seek()␣and␣sysseek(),␣respectively),␣and␣chmod(2)
documentation␣to␣see␣what␣constants␣are␣implemented␣in␣your␣system.

See␣L<perlopentut>␣to␣learn␣about␣the␣uses␣of␣the␣O_*␣constants
with␣sysopen().

See␣L<perlfunc/seek>␣and␣L<perlfunc/sysseek>␣about␣the␣SEEK_*␣constants.

See␣L<perlfunc/stat>␣about␣the␣S_I*␣constants.

=cut
----------
Range: (768214,771779) (3565)
}


=head1␣NAME

Hash::Util␣-␣A␣selection␣of␣general-utility␣hash␣subroutines

=head1␣SYNOPSIS

␣␣#␣Restricted␣hashes

␣␣use␣Hash::Util␣qw(
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣fieldhash␣fieldhashes

␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣all_keys
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣lock_keys␣unlock_keys
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣lock_value␣unlock_value
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣lock_hash␣unlock_hash
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣lock_keys_plus
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣hash_locked␣hash_unlocked
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣hashref_locked␣hashref_unlocked
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣hidden_keys␣legal_keys

␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣lock_ref_keys␣unlock_ref_keys
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣lock_ref_value␣unlock_ref_value
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣lock_hashref␣unlock_hashref
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣lock_ref_keys_plus
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣hidden_ref_keys␣legal_ref_keys

␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣hash_seed␣hash_value␣hv_store
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣bucket_stats␣bucket_info␣bucket_array
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣lock_hash_recurse␣unlock_hash_recurse
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣lock_hashref_recurse␣unlock_hashref_recurse

␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣hash_traversal_mask
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣);

␣␣%hash␣=␣(foo␣=>␣42,␣bar␣=>␣23);
␣␣#␣Ways␣to␣restrict␣a␣hash
␣␣lock_keys(%hash);
␣␣lock_keys(%hash,␣@keyset);
␣␣lock_keys_plus(%hash,␣@additional_keys);

␣␣#␣Ways␣to␣inspect␣the␣properties␣of␣a␣restricted␣hash
␣␣my␣@legal␣=␣legal_keys(%hash);
␣␣my␣@hidden␣=␣hidden_keys(%hash);
␣␣my␣$ref␣=␣all_keys(%hash,@keys,@hidden);
␣␣my␣$is_locked␣=␣hash_locked(%hash);

␣␣#␣Remove␣restrictions␣on␣the␣hash
␣␣unlock_keys(%hash);

␣␣#␣Lock␣individual␣values␣in␣a␣hash
␣␣lock_value␣␣(%hash,␣'foo');
␣␣unlock_value(%hash,␣'foo');

␣␣#␣Ways␣to␣change␣the␣restrictions␣on␣both␣keys␣and␣values
␣␣lock_hash␣␣(%hash);
␣␣unlock_hash(%hash);

␣␣my␣$hashes_are_randomised␣=␣hash_seed()␣!~␣/^\0+$/;

␣␣my␣$int_hash_value␣=␣hash_value(␣'string'␣);

␣␣my␣$mask=␣hash_traversal_mask(%hash);

␣␣hash_traversal_mask(%hash,1234);

=head1␣DESCRIPTION

C<Hash::Util>␣and␣C<Hash::Util::FieldHash>␣contain␣special␣functions
for␣manipulating␣hashes␣that␣don't␣really␣warrant␣a␣keyword.

C<Hash::Util>␣contains␣a␣set␣of␣functions␣that␣support
L<restricted␣hashes|/"Restricted␣hashes">.␣These␣are␣described␣in
this␣document.␣␣C<Hash::Util::FieldHash>␣contains␣an␣(unrelated)
set␣of␣functions␣that␣support␣the␣use␣of␣hashes␣in
I<inside-out␣classes>,␣described␣in␣L<Hash::Util::FieldHash>.

By␣default␣C<Hash::Util>␣does␣not␣export␣anything.

=head2␣Restricted␣hashes

5.8.0␣introduces␣the␣ability␣to␣restrict␣a␣hash␣to␣a␣certain␣set␣of
keys.␣␣No␣keys␣outside␣of␣this␣set␣can␣be␣added.␣␣It␣also␣introduces
the␣ability␣to␣lock␣an␣individual␣key␣so␣it␣cannot␣be␣deleted␣and␣the
ability␣to␣ensure␣that␣an␣individual␣value␣cannot␣be␣changed.

This␣is␣intended␣to␣largely␣replace␣the␣deprecated␣pseudo-hashes.

=over␣4

=item␣B<lock_keys>

=item␣B<unlock_keys>

␣␣lock_keys(%hash);
␣␣lock_keys(%hash,␣@keys);

Restricts␣the␣given␣%hash's␣set␣of␣keys␣to␣@keys.␣␣If␣@keys␣is␣not
given␣it␣restricts␣it␣to␣its␣current␣keyset.␣␣No␣more␣keys␣can␣be
added.␣delete()␣and␣exists()␣will␣still␣work,␣but␣will␣not␣alter
the␣set␣of␣allowed␣keys.␣B<Note>:␣the␣current␣implementation␣prevents
the␣hash␣from␣being␣bless()ed␣while␣it␣is␣in␣a␣locked␣state.␣Any␣attempt
to␣do␣so␣will␣raise␣an␣exception.␣Of␣course␣you␣can␣still␣bless()
the␣hash␣before␣you␣call␣lock_keys()␣so␣this␣shouldn't␣be␣a␣problem.

␣␣unlock_keys(%hash);

Removes␣the␣restriction␣on␣the␣%hash's␣keyset.

B<Note>␣that␣if␣any␣of␣the␣values␣of␣the␣hash␣have␣been␣locked␣they␣will␣not
be␣unlocked␣after␣this␣sub␣executes.

Both␣routines␣return␣a␣reference␣to␣the␣hash␣operated␣on.

=cut
----------
Range: (778077,783641) (5564)
@_)␣}

=item␣B<legal_keys>

␣␣my␣@keys␣=␣legal_keys(%hash);

Returns␣the␣list␣of␣the␣keys␣that␣are␣legal␣in␣a␣restricted␣hash.
In␣the␣case␣of␣an␣unrestricted␣hash␣this␣is␣identical␣to␣calling
keys(%hash).

=item␣B<hidden_keys>

␣␣my␣@keys␣=␣hidden_keys(%hash);

Returns␣the␣list␣of␣the␣keys␣that␣are␣legal␣in␣a␣restricted␣hash␣but
do␣not␣have␣a␣value␣associated␣to␣them.␣Thus␣if␣'foo'␣is␣a
"hidden"␣key␣of␣the␣%hash␣it␣will␣return␣false␣for␣both␣C<defined>
and␣C<exists>␣tests.

In␣the␣case␣of␣an␣unrestricted␣hash␣this␣will␣return␣an␣empty␣list.

B<NOTE>␣this␣is␣an␣experimental␣feature␣that␣is␣heavily␣dependent
on␣the␣current␣implementation␣of␣restricted␣hashes.␣Should␣the
implementation␣change,␣this␣routine␣may␣become␣meaningless,␣in␣which
case␣it␣will␣return␣an␣empty␣list.

=item␣B<all_keys>

␣␣all_keys(%hash,@keys,@hidden);

Populates␣the␣arrays␣@keys␣with␣the␣all␣the␣keys␣that␣would␣pass
an␣C<exists>␣tests,␣and␣populates␣@hidden␣with␣the␣remaining␣legal
keys␣that␣have␣not␣been␣utilized.

Returns␣a␣reference␣to␣the␣hash.

In␣the␣case␣of␣an␣unrestricted␣hash␣this␣will␣be␣equivalent␣to

␣␣$ref␣=␣do␣{
␣␣␣␣␣␣@keys␣=␣keys␣%hash;
␣␣␣␣␣␣@hidden␣=␣();
␣␣␣␣␣␣\%hash
␣␣};

B<NOTE>␣this␣is␣an␣experimental␣feature␣that␣is␣heavily␣dependent
on␣the␣current␣implementation␣of␣restricted␣hashes.␣Should␣the
implementation␣change␣this␣routine␣may␣become␣meaningless␣in␣which
case␣it␣will␣behave␣identically␣to␣how␣it␣would␣behave␣on␣an
unrestricted␣hash.

=item␣B<hash_seed>

␣␣␣␣my␣$hash_seed␣=␣hash_seed();

hash_seed()␣returns␣the␣seed␣bytes␣used␣to␣randomise␣hash␣ordering.

B<Note␣that␣the␣hash␣seed␣is␣sensitive␣information>:␣by␣knowing␣it␣one
can␣craft␣a␣denial-of-service␣attack␣against␣Perl␣code,␣even␣remotely,
see␣L<perlsec/"Algorithmic␣Complexity␣Attacks">␣for␣more␣information.
B<Do␣not␣disclose␣the␣hash␣seed>␣to␣people␣who␣don't␣need␣to␣know␣it.
See␣also␣L<perlrun/PERL_HASH_SEED_DEBUG>.

Prior␣to␣Perl␣5.17.6␣this␣function␣returned␣a␣UV,␣it␣now␣returns␣a␣string,
which␣may␣be␣of␣nearly␣any␣size␣as␣determined␣by␣the␣hash␣function␣your
Perl␣has␣been␣built␣with.␣Possible␣sizes␣may␣be␣but␣are␣not␣limited␣to
4␣bytes␣(for␣most␣hash␣algorithms)␣and␣16␣bytes␣(for␣siphash).

=item␣B<hash_value>

␣␣␣␣my␣$hash_value␣=␣hash_value($string);

hash_value()␣returns␣the␣current␣perl's␣internal␣hash␣value␣for␣a␣given
string.

Returns␣a␣32␣bit␣integer␣representing␣the␣hash␣value␣of␣the␣string␣passed
in.␣This␣value␣is␣only␣reliable␣for␣the␣lifetime␣of␣the␣process.␣It␣may
be␣different␣depending␣on␣invocation,␣environment␣variables,␣␣perl␣version,
architectures,␣and␣build␣options.

B<Note␣that␣the␣hash␣value␣of␣a␣given␣string␣is␣sensitive␣information>:
by␣knowing␣it␣one␣can␣deduce␣the␣hash␣seed␣which␣in␣turn␣can␣allow␣one␣to
craft␣a␣denial-of-service␣attack␣against␣Perl␣code,␣even␣remotely,
see␣L<perlsec/"Algorithmic␣Complexity␣Attacks">␣for␣more␣information.
B<Do␣not␣disclose␣the␣hash␣value␣of␣a␣string>␣to␣people␣who␣don't␣need␣to
know␣it.␣See␣also␣L<perlrun/PERL_HASH_SEED_DEBUG>.

=item␣B<bucket_info>

Return␣a␣set␣of␣basic␣information␣about␣a␣hash.

␣␣␣␣my␣($keys,␣$buckets,␣$used,␣@length_counts)=␣bucket_info($hash);

Fields␣are␣as␣follows:

␣␣␣␣0:␣Number␣of␣keys␣in␣the␣hash
␣␣␣␣1:␣Number␣of␣buckets␣in␣the␣hash
␣␣␣␣2:␣Number␣of␣used␣buckets␣in␣the␣hash
␣␣␣␣rest␣:␣list␣of␣counts,␣Kth␣element␣is␣the␣number␣of␣buckets
␣␣␣␣␣␣␣␣␣␣␣with␣K␣keys␣in␣it.

See␣also␣bucket_stats()␣and␣bucket_array().

=item␣B<bucket_stats>

Returns␣a␣list␣of␣statistics␣about␣a␣hash.

␣my␣($keys,␣$buckets,␣$used,␣$quality,␣$utilization_ratio,
␣␣␣␣␣␣␣␣$collision_pct,␣$mean,␣$stddev,␣@length_counts)
␣␣␣␣=␣bucket_stats($hashref);

Fields␣are␣as␣follows:

␣␣␣␣0:␣Number␣of␣keys␣in␣the␣hash
␣␣␣␣1:␣Number␣of␣buckets␣in␣the␣hash
␣␣␣␣2:␣Number␣of␣used␣buckets␣in␣the␣hash
␣␣␣␣3:␣Hash␣Quality␣Score
␣␣␣␣4:␣Percent␣of␣buckets␣used
␣␣␣␣5:␣Percent␣of␣keys␣which␣are␣in␣collision
␣␣␣␣6:␣Mean␣bucket␣length␣of␣occupied␣buckets
␣␣␣␣7:␣Standard␣Deviation␣of␣bucket␣lengths␣of␣occupied␣buckets
␣␣␣␣rest␣:␣list␣of␣counts,␣Kth␣element␣is␣the␣number␣of␣buckets
␣␣␣␣␣␣␣␣␣␣␣with␣K␣keys␣in␣it.

See␣also␣bucket_info()␣and␣bucket_array().

Note␣that␣Hash␣Quality␣Score␣would␣be␣1␣for␣an␣ideal␣hash,␣numbers
close␣to␣and␣below␣1␣indicate␣good␣hashing,␣and␣number␣significantly
above␣indicate␣a␣poor␣score.␣In␣practice␣it␣should␣be␣around␣0.95␣to␣1.05.
It␣is␣defined␣as:

␣$score=␣sum(␣$count[$length]␣*␣($length␣*␣($length␣+␣1)␣/␣2)␣)
␣␣␣␣␣␣␣␣␣␣␣␣/
␣␣␣␣␣␣␣␣␣␣␣␣(␣(␣$keys␣/␣2␣*␣$buckets␣)␣*
␣␣␣␣␣␣␣␣␣␣␣␣␣␣(␣$keys␣+␣(␣2␣*␣$buckets␣)␣-␣1␣)␣)

The␣formula␣is␣from␣the␣Red␣Dragon␣book␣(reformulated␣to␣use␣the␣data␣available)
and␣is␣documented␣at␣L<http://www.strchr.com/hash_functions>

=item␣B<bucket_array>

␣␣␣␣my␣$array=␣bucket_array(\%hash);

Returns␣a␣packed␣representation␣of␣the␣bucket␣array␣associated␣with␣a␣hash.␣Each␣element
of␣the␣array␣is␣either␣an␣integer␣K,␣in␣which␣case␣it␣represents␣K␣empty␣buckets,␣or
a␣reference␣to␣another␣array␣which␣contains␣the␣keys␣that␣are␣in␣that␣bucket.

B<Note␣that␣the␣information␣returned␣by␣bucket_array␣is␣sensitive␣information>:
by␣knowing␣it␣one␣can␣directly␣attack␣perl's␣hash␣function␣which␣in␣turn␣may␣allow
one␣to␣craft␣a␣denial-of-service␣attack␣against␣Perl␣code,␣even␣remotely,
see␣L<perlsec/"Algorithmic␣Complexity␣Attacks">␣for␣more␣information.
B<Do␣not␣disclose␣the␣output␣of␣this␣function>␣to␣people␣who␣don't␣need␣to
know␣it.␣See␣also␣L<perlrun/PERL_HASH_SEED_DEBUG>.␣This␣function␣is␣provided␣strictly
for␣␣debugging␣and␣diagnostics␣purposes␣only,␣it␣is␣hard␣to␣imagine␣a␣reason␣why␣it
would␣be␣used␣in␣production␣code.

=cut
----------
Range: (784399,786468) (2069)
}

=item␣B<bucket_stats_formatted>

␣␣print␣bucket_stats_formatted($hashref);

Return␣a␣formatted␣report␣of␣the␣information␣returned␣by␣bucket_stats().
An␣example␣report␣looks␣like␣this:

␣Keys:␣50␣Buckets:␣33/64␣Quality-Score:␣1.01␣(Good)
␣Utilized␣Buckets:␣51.56%␣Optimal:␣78.12%␣Keys␣In␣Collision:␣34.00%
␣Chain␣Length␣-␣mean:␣1.52␣stddev:␣0.66
␣Buckets␣64␣␣␣␣␣␣␣␣␣␣[0000000000000000000000000000000111111111111111111122222222222333]
␣Len␣␣␣0␣Pct:␣␣48.44␣[###############################]
␣Len␣␣␣1␣Pct:␣␣29.69␣[###################]
␣Len␣␣␣2␣Pct:␣␣17.19␣[###########]
␣Len␣␣␣3␣Pct:␣␣␣4.69␣[###]
␣Keys␣␣␣␣50␣␣␣␣␣␣␣␣␣␣[11111111111111111111111111111111122222222222222333]
␣Pos␣␣␣1␣Pct:␣␣66.00␣[#################################]
␣Pos␣␣␣2␣Pct:␣␣28.00␣[##############]
␣Pos␣␣␣3␣Pct:␣␣␣6.00␣[###]

The␣first␣set␣of␣stats␣gives␣some␣summary␣statistical␣information,
including␣the␣quality␣score␣translated␣into␣"Good",␣"Poor"␣and␣"Bad",
(score<=1.05,␣score<=1.2,␣score>1.2).␣See␣the␣documentation␣in
bucket_stats()␣for␣more␣details.

The␣two␣sets␣of␣barcharts␣give␣stats␣and␣a␣visual␣indication␣of␣performance
of␣the␣hash.

The␣first␣gives␣data␣on␣bucket␣chain␣lengths␣and␣provides␣insight␣on␣how
much␣work␣a␣fetch␣*miss*␣will␣take.␣In␣this␣case␣we␣have␣to␣inspect␣every␣item
in␣a␣bucket␣before␣we␣can␣be␣sure␣the␣item␣is␣not␣in␣the␣list.␣The␣performance
for␣an␣insert␣is␣equivalent␣to␣this␣case,␣as␣is␣a␣delete␣where␣the␣item
is␣not␣in␣the␣hash.

The␣second␣gives␣data␣on␣how␣many␣keys␣are␣at␣each␣depth␣in␣the␣chain,␣and
gives␣an␣idea␣of␣how␣much␣work␣a␣fetch␣*hit*␣will␣take.␣The␣performance␣for
an␣update␣or␣delete␣of␣an␣item␣in␣the␣hash␣is␣equivalent␣to␣this␣case.

Note␣that␣these␣statistics␣are␣summary␣only.␣Actual␣performance␣will␣depend
on␣real␣hit/miss␣ratios␣accessing␣the␣hash.␣If␣you␣are␣concerned␣by␣hit␣ratios
you␣are␣recommended␣to␣"oversize"␣your␣hash␣by␣using␣something␣like:

␣␣␣keys(%hash)=␣keys(%hash)␣<<␣$k;

With␣$k␣chosen␣carefully,␣and␣likely␣to␣be␣a␣small␣number␣like␣1␣or␣2.␣In
theory␣the␣larger␣the␣bucket␣array␣the␣less␣chance␣of␣collision.

=cut
----------
Range: (788325,791585) (3260)
$return
}

=item␣B<hv_store>

␣␣my␣$sv␣=␣0;
␣␣hv_store(%hash,$key,$sv)␣or␣die␣"Failed␣to␣alias!";
␣␣$hash{$key}␣=␣1;
␣␣print␣$sv;␣#␣prints␣1

Stores␣an␣alias␣to␣a␣variable␣in␣a␣hash␣instead␣of␣copying␣the␣value.

=item␣B<hash_traversal_mask>

As␣of␣Perl␣5.18␣every␣hash␣has␣its␣own␣hash␣traversal␣order,␣and␣this␣order
changes␣every␣time␣a␣new␣element␣is␣inserted␣into␣the␣hash.␣This␣functionality
is␣provided␣by␣maintaining␣an␣unsigned␣integer␣mask␣(U32)␣which␣is␣xor'ed
with␣the␣actual␣bucket␣id␣during␣a␣traversal␣of␣the␣hash␣buckets␣using␣keys(),
values()␣or␣each().

You␣can␣use␣this␣subroutine␣to␣get␣and␣set␣the␣traversal␣mask␣for␣a␣specific
hash.␣Setting␣the␣mask␣ensures␣that␣a␣given␣hash␣will␣produce␣the␣same␣key
order.␣B<Note>␣that␣this␣does␣B<not>␣guarantee␣that␣B<two>␣hashes␣will␣produce
the␣same␣key␣order␣for␣the␣same␣hash␣seed␣and␣traversal␣mask,␣items␣that
collide␣into␣one␣bucket␣may␣have␣different␣orders␣regardless␣of␣this␣setting.

=item␣B<bucket_ratio>

This␣function␣behaves␣the␣same␣way␣that␣scalar(%hash)␣behaved␣prior␣to
Perl␣5.25.␣Specifically␣if␣the␣hash␣is␣tied,␣then␣it␣calls␣the␣SCALAR␣tied
hash␣method,␣if␣untied␣then␣if␣the␣hash␣is␣empty␣it␣return␣0,␣otherwise␣it
returns␣a␣string␣containing␣the␣number␣of␣used␣buckets␣in␣the␣hash,
followed␣by␣a␣slash,␣followed␣by␣the␣total␣number␣of␣buckets␣in␣the␣hash.

␣␣␣␣my␣%hash=("foo"=>1);
␣␣␣␣print␣Hash::Util::bucket_ratio(%hash);␣#␣prints␣"1/8"

=item␣B<used_buckets>

This␣function␣returns␣the␣count␣of␣used␣buckets␣in␣the␣hash.␣It␣is␣expensive
to␣calculate␣and␣the␣value␣is␣NOT␣cached,␣so␣avoid␣use␣of␣this␣function
in␣production␣code.

=item␣B<num_buckets>

This␣function␣returns␣the␣total␣number␣of␣buckets␣the␣hash␣holds,␣or␣would
hold␣if␣the␣array␣were␣created.␣(When␣a␣hash␣is␣freshly␣created␣the␣array
may␣not␣be␣allocated␣even␣though␣this␣value␣will␣be␣non-zero.)

=back

=head2␣Operating␣on␣references␣to␣hashes.

Most␣subroutines␣documented␣in␣this␣module␣have␣equivalent␣versions
that␣operate␣on␣references␣to␣hashes␣instead␣of␣native␣hashes.
The␣following␣is␣a␣list␣of␣these␣subs.␣They␣are␣identical␣except
in␣name␣and␣in␣that␣instead␣of␣taking␣a␣%hash␣they␣take␣a␣$hashref,
and␣additionally␣are␣not␣prototyped.

=over␣4

=item␣lock_ref_keys

=item␣unlock_ref_keys

=item␣lock_ref_keys_plus

=item␣lock_ref_value

=item␣unlock_ref_value

=item␣lock_hashref

=item␣unlock_hashref

=item␣lock_hashref_recurse

=item␣unlock_hashref_recurse

=item␣hash_ref_unlocked

=item␣legal_ref_keys

=item␣hidden_ref_keys

=back

=head1␣CAVEATS

Note␣that␣the␣trapping␣of␣the␣restricted␣operations␣is␣not␣atomic:
for␣example

␣␣␣␣eval␣{␣%hash␣=␣(illegal_key␣=>␣1)␣}

leaves␣the␣C<%hash>␣empty␣rather␣than␣with␣its␣original␣contents.

=head1␣BUGS

The␣interface␣exposed␣by␣this␣module␣is␣very␣close␣to␣the␣current
implementation␣of␣restricted␣hashes.␣Over␣time␣it␣is␣expected␣that
this␣behavior␣will␣be␣extended␣and␣the␣interface␣abstracted␣further.

=head1␣AUTHOR

Michael␣G␣Schwern␣<schwern@pobox.com>␣on␣top␣of␣code␣by␣Nick
Ing-Simmons␣and␣Jeffrey␣Friedl.

hv_store()␣is␣from␣Array::RefElem,␣Copyright␣2000␣Gisle␣Aas.

Additional␣code␣by␣Yves␣Orton.

=head1␣SEE␣ALSO

L<Scalar::Util>,␣L<List::Util>␣and␣L<perlsec/"Algorithmic␣Complexity␣Attacks">.

L<Hash::Util::FieldHash>.

=cut
----------
Range: (823216,824822) (1606)
=head1␣NAME

ExtUtils::Typemaps␣-␣Read/Write/Modify␣Perl/XS␣typemap␣files

=head1␣SYNOPSIS

␣␣#␣read/create␣file
␣␣my␣$typemap␣=␣ExtUtils::Typemaps->new(file␣=>␣'typemap');
␣␣#␣alternatively␣create␣an␣in-memory␣typemap
␣␣#␣$typemap␣=␣ExtUtils::Typemaps->new();
␣␣#␣alternatively␣create␣an␣in-memory␣typemap␣by␣parsing␣a␣string
␣␣#␣$typemap␣=␣ExtUtils::Typemaps->new(string␣=>␣$sometypemap);

␣␣#␣add␣a␣mapping
␣␣$typemap->add_typemap(ctype␣=>␣'NV',␣xstype␣=>␣'T_NV');
␣␣$typemap->add_inputmap(
␣␣␣␣␣xstype␣=>␣'T_NV',␣code␣=>␣'$var␣=␣($type)SvNV($arg);'
␣␣);
␣␣$typemap->add_outputmap(
␣␣␣␣␣xstype␣=>␣'T_NV',␣code␣=>␣'sv_setnv($arg,␣(NV)$var);'
␣␣);
␣␣$typemap->add_string(string␣=>␣$typemapstring);
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣will␣be␣parsed␣and␣merged

␣␣#␣remove␣a␣mapping␣(same␣for␣remove_typemap␣and␣remove_outputmap...)
␣␣$typemap->remove_inputmap(xstype␣=>␣'SomeType');

␣␣#␣save␣a␣typemap␣to␣a␣file
␣␣$typemap->write(file␣=>␣'anotherfile.map');

␣␣#␣merge␣the␣other␣typemap␣into␣this␣one
␣␣$typemap->merge(typemap␣=>␣$another_typemap);

=head1␣DESCRIPTION

This␣module␣can␣read,␣modify,␣create␣and␣write␣Perl␣XS␣typemap␣files.␣If␣you␣don't␣know
what␣a␣typemap␣is,␣please␣confer␣the␣L<perlxstut>␣and␣L<perlxs>␣manuals.

The␣module␣is␣not␣entirely␣round-trip␣safe:␣For␣example␣it␣currently␣simply␣strips␣all␣comments.
The␣order␣of␣entries␣in␣the␣maps␣is,␣however,␣preserved.

We␣check␣for␣duplicate␣entries␣in␣the␣typemap,␣but␣do␣not␣check␣for␣missing
C<TYPEMAP>␣entries␣for␣C<INPUTMAP>␣or␣C<OUTPUTMAP>␣entries␣since␣these␣might␣be␣hidden
in␣a␣different␣typemap.

=head1␣METHODS

=cut
----------
Range: (908059,912511) (4452)
printf␣$fh␣<<'EOF!HEAD',␣xsi_header();
/*␣␣␣␣miniperlmain.c␣or␣perlmain.c␣-␣a␣generated␣file
␣*
␣*␣␣␣␣Copyright␣(C)␣1994,␣1995,␣1996,␣1997,␣1999,␣2000,␣2001,␣2002,␣2003,
␣*␣␣␣␣2004,␣2005,␣2006,␣2007,␣2016␣by␣Larry␣Wall␣and␣others
␣*
␣*␣␣␣␣You␣may␣distribute␣under␣the␣terms␣of␣either␣the␣GNU␣General␣Public
␣*␣␣␣␣License␣or␣the␣Artistic␣License,␣as␣specified␣in␣the␣README␣file.
␣*
␣*/

/*
␣*␣␣␣␣␣␣The␣Road␣goes␣ever␣on␣and␣on
␣*␣␣␣␣␣␣␣␣␣␣Down␣from␣the␣door␣where␣it␣began.
␣*
␣*␣␣␣␣␣[Bilbo␣on␣p.35␣of␣_The␣Lord␣of␣the␣Rings_,␣I/i:␣"A␣Long-Expected␣Party"]
␣*␣␣␣␣␣[Frodo␣on␣p.73␣of␣_The␣Lord␣of␣the␣Rings_,␣I/iii:␣"Three␣Is␣Company"]
␣*/

/*␣This␣file␣contains␣the␣main()␣function␣for␣the␣perl␣interpreter.
␣*␣Note␣that␣miniperlmain.c␣contains␣main()␣for␣the␣'miniperl'␣binary,
␣*␣while␣perlmain.c␣contains␣main()␣for␣the␣'perl'␣binary.␣The␣typical
␣*␣difference␣being␣that␣the␣latter␣includes␣Dynaloader.
␣*
␣*␣Miniperl␣is␣like␣perl␣except␣that␣it␣does␣not␣support␣dynamic␣loading,
␣*␣and␣in␣fact␣is␣used␣to␣build␣the␣dynamic␣modules␣needed␣for␣the␣'real'
␣*␣perl␣executable.
␣*
␣*␣The␣content␣of␣the␣body␣of␣this␣generated␣file␣is␣mostly␣contained
␣*␣in␣Miniperl.pm␣-␣edit␣that␣file␣if␣you␣want␣to␣change␣anything.
␣*␣miniperlmain.c␣is␣generated␣by␣running␣regen/miniperlmain.pl,␣while
␣*␣perlmain.c␣is␣built␣automatically␣by␣Makefile␣(so␣the␣former␣is
␣*␣included␣in␣the␣tarball␣while␣the␣latter␣isn't).
␣*/

#ifdef␣OEMVS
#ifdef␣MYMALLOC
/*␣sbrk␣is␣limited␣to␣first␣heap␣segment␣so␣make␣it␣big␣*/
#pragma␣runopts(HEAP(8M,500K,ANYWHERE,KEEP,8K,4K)␣STACK(,,ANY,)␣ALL31(ON))
#else
#pragma␣runopts(HEAP(2M,500K,ANYWHERE,KEEP,8K,4K)␣STACK(,,ANY,)␣ALL31(ON))
#endif
#endif

#define␣PERL_IN_MINIPERLMAIN_C

/*␣work␣round␣bug␣in␣MakeMaker␣which␣doesn't␣currently␣(2019)␣supply␣this
␣*␣flag␣when␣making␣a␣statically␣linked␣perl␣*/
#define␣PERL_CORE␣1

%s
static␣void␣xs_init␣(pTHX);
static␣PerlInterpreter␣*my_perl;

#ifdef␣NO_ENV_ARRAY_IN_MAIN
extern␣char␣**environ;
int
main(int␣argc,␣char␣**argv)
#else
int
main(int␣argc,␣char␣**argv,␣char␣**env)
#endif
{
␣␣␣␣int␣exitstatus,␣i;
#ifndef␣NO_ENV_ARRAY_IN_MAIN
␣␣␣␣PERL_UNUSED_ARG(env);
#endif
#ifndef␣PERL_USE_SAFE_PUTENV
␣␣␣␣PL_use_safe_putenv␣=␣FALSE;
#endif␣/*␣PERL_USE_SAFE_PUTENV␣*/

␣␣␣␣/*␣if␣user␣wants␣control␣of␣gprof␣profiling␣off␣by␣default␣*/
␣␣␣␣/*␣noop␣unless␣Configure␣is␣given␣-Accflags=-DPERL_GPROF_CONTROL␣*/
␣␣␣␣PERL_GPROF_MONCONTROL(0);

#ifdef␣NO_ENV_ARRAY_IN_MAIN
␣␣␣␣PERL_SYS_INIT3(&argc,&argv,&environ);
#else
␣␣␣␣PERL_SYS_INIT3(&argc,&argv,&env);
#endif

#if␣defined(USE_ITHREADS)
␣␣␣␣/*␣XXX␣Ideally,␣this␣should␣really␣be␣happening␣in␣perl_alloc()␣or
␣␣␣␣␣*␣perl_construct()␣to␣keep␣libperl.a␣transparently␣fork()-safe.
␣␣␣␣␣*␣It␣is␣currently␣done␣here␣only␣because␣Apache/mod_perl␣have
␣␣␣␣␣*␣problems␣due␣to␣lack␣of␣a␣call␣to␣cancel␣pthread_atfork()
␣␣␣␣␣*␣handlers␣when␣shared␣objects␣that␣contain␣the␣handlers␣may
␣␣␣␣␣*␣be␣dlclose()d.␣␣This␣forces␣applications␣that␣embed␣perl␣to
␣␣␣␣␣*␣call␣PTHREAD_ATFORK()␣explicitly,␣but␣if␣and␣only␣if␣it␣hasn't
␣␣␣␣␣*␣been␣called␣at␣least␣once␣before␣in␣the␣current␣process.
␣␣␣␣␣*␣--GSAR␣2001-07-20␣*/
␣␣␣␣PTHREAD_ATFORK(Perl_atfork_lock,
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣Perl_atfork_unlock,
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣Perl_atfork_unlock);
#endif

␣␣␣␣PERL_SYS_FPU_INIT;

␣␣␣␣if␣(!PL_do_undump)␣{
	my_perl␣=␣perl_alloc();
	if␣(!my_perl)
	␣␣␣␣exit(1);
	perl_construct(my_perl);
	PL_perl_destruct_level␣=␣0;
␣␣␣␣}
␣␣␣␣PL_exit_flags␣|=␣PERL_EXIT_DESTRUCT_END;
␣␣␣␣if␣(!perl_parse(my_perl,␣xs_init,␣argc,␣argv,␣(char␣**)NULL))
␣␣␣␣␣␣␣␣perl_run(my_perl);

#ifndef␣PERL_MICRO
␣␣␣␣/*␣Unregister␣our␣signal␣handler␣before␣destroying␣my_perl␣*/
␣␣␣␣for␣(i␣=␣1;␣PL_sig_name[i];␣i++)␣{
	if␣(rsignal_state(PL_sig_num[i])␣==␣(Sighandler_t)␣PL_csighandlerp)␣{
	␣␣␣␣rsignal(PL_sig_num[i],␣(Sighandler_t)␣SIG_DFL);
	}
␣␣␣␣}
#endif

␣␣␣␣exitstatus␣=␣perl_destruct(my_perl);

␣␣␣␣perl_free(my_perl);

#if␣defined(USE_ENVIRON_ARRAY)␣&&␣defined(PERL_TRACK_MEMPOOL)␣&&␣!defined(NO_ENV_ARRAY_IN_MAIN)
␣␣␣␣/*
␣␣␣␣␣*␣The␣old␣environment␣may␣have␣been␣freed␣by␣perl_free()
␣␣␣␣␣*␣when␣PERL_TRACK_MEMPOOL␣is␣defined,␣but␣without␣having
␣␣␣␣␣*␣been␣restored␣by␣perl_destruct()␣before␣(this␣is␣only
␣␣␣␣␣*␣done␣if␣destruct_level␣>␣0).
␣␣␣␣␣*
␣␣␣␣␣*␣It␣is␣important␣to␣have␣a␣valid␣environment␣for␣atexit()
␣␣␣␣␣*␣routines␣that␣are␣eventually␣called.
␣␣␣␣␣*/
␣␣␣␣environ␣=␣env;
#endif

␣␣␣␣PERL_SYS_TERM();

␣␣␣␣exit(exitstatus);
}

/*␣Register␣any␣extra␣external␣extensions␣*/

EOF!HEAD
----------
Range: (914105,915873) (1768)
}
}


=head1␣NAME

ExtUtils::MM_Unix␣-␣methods␣used␣by␣ExtUtils::MakeMaker

=head1␣SYNOPSIS

␣␣require␣ExtUtils::MM_Unix;

=head1␣DESCRIPTION

The␣methods␣provided␣by␣this␣package␣are␣designed␣to␣be␣used␣in
conjunction␣with␣L<ExtUtils::MakeMaker>.␣When␣MakeMaker␣writes␣a
Makefile,␣it␣creates␣one␣or␣more␣objects␣that␣inherit␣their␣methods
from␣a␣package␣L<MM|ExtUtils::MM>.␣MM␣itself␣doesn't␣provide␣any␣methods,␣but
it␣ISA␣ExtUtils::MM_Unix␣class.␣The␣inheritance␣tree␣of␣MM␣lets␣operating
specific␣packages␣take␣the␣responsibility␣for␣all␣the␣methods␣provided
by␣MM_Unix.␣We␣are␣trying␣to␣reduce␣the␣number␣of␣the␣necessary
overrides␣by␣defining␣rather␣primitive␣operations␣within
ExtUtils::MM_Unix.

If␣you␣are␣going␣to␣write␣a␣platform␣specific␣MM␣package,␣please␣try
to␣limit␣the␣necessary␣overrides␣to␣primitive␣methods,␣and␣if␣it␣is␣not
possible␣to␣do␣so,␣let's␣work␣out␣how␣to␣achieve␣that␣gain.

If␣you␣are␣overriding␣any␣of␣these␣methods␣in␣your␣Makefile.PL␣(in␣the
MY␣class),␣please␣report␣that␣to␣the␣makemaker␣mailing␣list.␣We␣are
trying␣to␣minimize␣the␣necessary␣method␣overrides␣and␣switch␣to␣data
driven␣Makefile.PLs␣wherever␣possible.␣In␣the␣long␣run␣less␣methods
will␣be␣overridable␣via␣the␣MY␣class.

=head1␣METHODS

The␣following␣description␣of␣methods␣is␣still␣under
development.␣Please␣refer␣to␣the␣code␣for␣not␣suitably␣documented
sections␣and␣complain␣loudly␣to␣the␣makemaker@perl.org␣mailing␣list.
Better␣yet,␣provide␣a␣patch.

Not␣all␣of␣the␣methods␣below␣are␣overridable␣in␣a
Makefile.PL.␣Overridable␣methods␣are␣marked␣as␣(o).␣All␣methods␣are
overridable␣by␣a␣platform␣specific␣MM_*.pm␣file.

Cross-platform␣methods␣are␣being␣moved␣into␣L<MM_Any|ExtUtils::MM_Any>.
If␣you␣can't␣find␣something␣that␣used␣to␣be␣in␣here,␣look␣in␣MM_Any.

=cut
----------
Range: (1050827,1055693) (4866)
}

=end␣_private

=head2␣install

␣␣␣␣#␣deprecated␣forms
␣␣␣␣install(\%from_to);
␣␣␣␣install(\%from_to,␣$verbose,␣$dry_run,␣$uninstall_shadows,
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣$skip,␣$always_copy,␣\%result);

␣␣␣␣#␣recommended␣form␣as␣of␣1.47
␣␣␣␣install([
␣␣␣␣␣␣␣␣from_to␣=>␣\%from_to,
␣␣␣␣␣␣␣␣verbose␣=>␣1,
␣␣␣␣␣␣␣␣dry_run␣=>␣0,
␣␣␣␣␣␣␣␣uninstall_shadows␣=>␣1,
␣␣␣␣␣␣␣␣skip␣=>␣undef,
␣␣␣␣␣␣␣␣always_copy␣=>␣1,
␣␣␣␣␣␣␣␣result␣=>␣\%install_results,
␣␣␣␣]);


Copies␣each␣directory␣tree␣of␣%from_to␣to␣its␣corresponding␣value
preserving␣timestamps␣and␣permissions.

There␣are␣two␣keys␣with␣a␣special␣meaning␣in␣the␣hash:␣"read"␣and
"write".␣␣These␣contain␣packlist␣files.␣␣After␣the␣copying␣is␣done,
install()␣will␣write␣the␣list␣of␣target␣files␣to␣$from_to{write}.␣If
$from_to{read}␣is␣given␣the␣contents␣of␣this␣file␣will␣be␣merged␣into
the␣written␣file.␣The␣read␣and␣the␣written␣file␣may␣be␣identical,␣but
on␣AFS␣it␣is␣quite␣likely␣that␣people␣are␣installing␣to␣a␣different
directory␣than␣the␣one␣where␣the␣files␣later␣appear.

If␣$verbose␣is␣true,␣will␣print␣out␣each␣file␣removed.␣␣Default␣is
false.␣␣This␣is␣"make␣install␣VERBINST=1".␣$verbose␣values␣going
up␣to␣5␣show␣increasingly␣more␣diagnostics␣output.

If␣$dry_run␣is␣true␣it␣will␣only␣print␣what␣it␣was␣going␣to␣do
without␣actually␣doing␣it.␣␣Default␣is␣false.

If␣$uninstall_shadows␣is␣true␣any␣differing␣versions␣throughout␣@INC
will␣be␣uninstalled.␣␣This␣is␣"make␣install␣UNINST=1"

As␣of␣1.37_02␣install()␣supports␣the␣use␣of␣a␣list␣of␣patterns␣to␣filter␣out
files␣that␣shouldn't␣be␣installed.␣If␣$skip␣is␣omitted␣or␣undefined␣then
install␣will␣try␣to␣read␣the␣list␣from␣INSTALL.SKIP␣in␣the␣CWD.␣This␣file␣is
a␣list␣of␣regular␣expressions␣and␣is␣just␣like␣the␣MANIFEST.SKIP␣file␣used
by␣L<ExtUtils::Manifest>.

A␣default␣site␣INSTALL.SKIP␣may␣be␣provided␣by␣setting␣then␣environment
variable␣EU_INSTALL_SITE_SKIPFILE,␣this␣will␣only␣be␣used␣when␣there␣isn't␣a
distribution␣specific␣INSTALL.SKIP.␣If␣the␣environment␣variable
EU_INSTALL_IGNORE_SKIP␣is␣true␣then␣no␣install␣file␣filtering␣will␣be
performed.

If␣$skip␣is␣undefined␣then␣the␣skip␣file␣will␣be␣autodetected␣and␣used␣if␣it
is␣found.␣If␣$skip␣is␣a␣reference␣to␣an␣array␣then␣it␣is␣assumed␣the␣array
contains␣the␣list␣of␣patterns,␣if␣$skip␣is␣a␣true␣non␣reference␣it␣is
assumed␣to␣be␣the␣filename␣holding␣the␣list␣of␣patterns,␣any␣other␣value␣of
$skip␣is␣taken␣to␣mean␣that␣no␣install␣filtering␣should␣occur.

B<Changes␣As␣of␣Version␣1.47>

As␣of␣version␣1.47␣the␣following␣additions␣were␣made␣to␣the␣install␣interface.
Note␣that␣the␣new␣argument␣style␣and␣use␣of␣the␣%result␣hash␣is␣recommended.

The␣$always_copy␣parameter␣which␣when␣true␣causes␣files␣to␣be␣updated
regardless␣as␣to␣whether␣they␣have␣changed,␣if␣it␣is␣defined␣but␣false␣then
copies␣are␣made␣only␣if␣the␣files␣have␣changed,␣if␣it␣is␣undefined␣then␣the
value␣of␣the␣environment␣variable␣EU_INSTALL_ALWAYS_COPY␣is␣used␣as␣default.

The␣%result␣hash␣will␣be␣populated␣with␣the␣various␣keys/subhashes␣reflecting
the␣install.␣Currently␣these␣keys␣and␣their␣structure␣are:

␣␣␣␣install␣␣␣␣␣␣␣␣␣␣␣␣␣=>␣{␣$target␣␣␣␣=>␣$source␣},
␣␣␣␣install_fail␣␣␣␣␣␣␣␣=>␣{␣$target␣␣␣␣=>␣$source␣},
␣␣␣␣install_unchanged␣␣␣=>␣{␣$target␣␣␣␣=>␣$source␣},

␣␣␣␣install_filtered␣␣␣␣=>␣{␣$source␣␣␣␣=>␣$pattern␣},

␣␣␣␣uninstall␣␣␣␣␣␣␣␣␣␣␣=>␣{␣$uninstalled␣=>␣$source␣},
␣␣␣␣uninstall_fail␣␣␣␣␣␣=>␣{␣$uninstalled␣=>␣$source␣},

where␣C<$source>␣is␣the␣filespec␣of␣the␣file␣being␣installed.␣C<$target>␣is␣where
it␣is␣being␣installed␣to,␣and␣C<$uninstalled>␣is␣any␣shadow␣file␣that␣is␣in␣C<@INC>
or␣C<$ENV{PERL5LIB}>␣or␣other␣standard␣locations,␣and␣C<$pattern>␣is␣the␣pattern␣that
caused␣a␣source␣file␣to␣be␣skipped.␣In␣future␣more␣keys␣will␣be␣added,␣such␣as␣to
show␣created␣directories,␣however␣this␣requires␣changes␣in␣other␣modules␣and␣must
therefore␣wait.

These␣keys␣will␣be␣populated␣before␣any␣exceptions␣are␣thrown␣should␣there␣be␣an
error.

Note␣that␣all␣updates␣of␣the␣%result␣are␣additive,␣the␣hash␣will␣not␣be
cleared␣before␣use,␣thus␣allowing␣status␣results␣of␣many␣installs␣to␣be␣easily
aggregated.

B<NEW␣ARGUMENT␣STYLE>

If␣there␣is␣only␣one␣argument␣and␣it␣is␣a␣reference␣to␣an␣array␣then
the␣array␣is␣assumed␣to␣contain␣a␣list␣of␣key-value␣pairs␣specifying
the␣options.␣In␣this␣case␣the␣option␣"from_to"␣is␣mandatory.␣This␣style
means␣that␣you␣do␣not␣have␣to␣supply␣a␣cryptic␣list␣of␣arguments␣and␣can
use␣a␣self␣documenting␣argument␣list␣that␣is␣easier␣to␣understand.

This␣is␣now␣the␣recommended␣interface␣to␣install().

B<RETURN>

If␣all␣actions␣were␣successful␣install␣will␣return␣a␣hashref␣of␣the␣results
as␣described␣above␣for␣the␣$result␣parameter.␣If␣any␣action␣is␣a␣failure
then␣install␣will␣die,␣therefore␣it␣is␣recommended␣to␣pass␣in␣the␣$result
parameter␣instead␣of␣using␣the␣return␣value.␣If␣the␣result␣parameter␣is
provided␣then␣the␣returned␣hashref␣will␣be␣the␣passed␣in␣hashref.

=cut
----------
Range: (1080682,1083104) (2422)
=head1␣NAME

ExtUtils::ParseXS::Utilities␣-␣Subroutines␣used␣with␣ExtUtils::ParseXS

=head1␣SYNOPSIS

␣␣use␣ExtUtils::ParseXS::Utilities␣qw(
␣␣␣␣standard_typemap_locations
␣␣␣␣trim_whitespace
␣␣␣␣C_string
␣␣␣␣valid_proto_string
␣␣␣␣process_typemaps
␣␣␣␣map_type
␣␣␣␣standard_XS_defs
␣␣␣␣assign_func_args
␣␣␣␣analyze_preprocessor_statements
␣␣␣␣set_cond
␣␣␣␣Warn
␣␣␣␣blurt
␣␣␣␣death
␣␣␣␣check_conditional_preprocessor_statements
␣␣␣␣escape_file_for_line_directive
␣␣␣␣report_typemap_failure
␣␣);

=head1␣SUBROUTINES

The␣following␣functions␣are␣not␣considered␣to␣be␣part␣of␣the␣public␣interface.
They␣are␣documented␣here␣for␣the␣benefit␣of␣future␣maintainers␣of␣this␣module.

=head2␣C<standard_typemap_locations()>

=over␣4

=item␣*␣Purpose

Provide␣a␣list␣of␣filepaths␣where␣F<typemap>␣files␣may␣be␣found.␣␣The
filepaths␣--␣relative␣paths␣to␣files␣(not␣just␣directory␣paths)␣--␣appear␣in␣this␣list␣in␣lowest-to-highest␣priority.

The␣highest␣priority␣is␣to␣look␣in␣the␣current␣directory.␣␣

␣␣'typemap'

The␣second␣and␣third␣highest␣priorities␣are␣to␣look␣in␣the␣parent␣of␣the
current␣directory␣and␣a␣directory␣called␣F<lib/ExtUtils>␣underneath␣the␣parent
directory.

␣␣'../typemap',
␣␣'../lib/ExtUtils/typemap',

The␣fourth␣through␣ninth␣highest␣priorities␣are␣to␣look␣in␣the␣corresponding
grandparent,␣great-grandparent␣and␣great-great-grandparent␣directories.

␣␣'../../typemap',
␣␣'../../lib/ExtUtils/typemap',
␣␣'../../../typemap',
␣␣'../../../lib/ExtUtils/typemap',
␣␣'../../../../typemap',
␣␣'../../../../lib/ExtUtils/typemap',

The␣tenth␣and␣subsequent␣priorities␣are␣to␣look␣in␣directories␣named
F<ExtUtils>␣which␣are␣subdirectories␣of␣directories␣found␣in␣C<@INC>␣--
I<provided>␣a␣file␣named␣F<typemap>␣actually␣exists␣in␣such␣a␣directory.
Example:

␣␣'/usr/local/lib/perl5/5.10.1/ExtUtils/typemap',

However,␣these␣filepaths␣appear␣in␣the␣list␣returned␣by
C<standard_typemap_locations()>␣in␣reverse␣order,␣I<i.e.>,␣lowest-to-highest.

␣␣'/usr/local/lib/perl5/5.10.1/ExtUtils/typemap',
␣␣'../../../../lib/ExtUtils/typemap',
␣␣'../../../../typemap',
␣␣'../../../lib/ExtUtils/typemap',
␣␣'../../../typemap',
␣␣'../../lib/ExtUtils/typemap',
␣␣'../../typemap',
␣␣'../lib/ExtUtils/typemap',
␣␣'../typemap',
␣␣'typemap'

=item␣*␣Arguments

␣␣my␣@stl␣=␣standard_typemap_locations(␣\@INC␣);

Reference␣to␣C<@INC>.

=item␣*␣Return␣Value

Array␣holding␣list␣of␣directories␣to␣be␣searched␣for␣F<typemap>␣files.

=back

=cut
----------
Range: (1086918,1089815) (2897)
print␣<<"EOF";
#ifndef␣PERL_UNUSED_VAR
#␣␣define␣PERL_UNUSED_VAR(var)␣if␣(0)␣var␣=␣var
#endif

#ifndef␣dVAR
#␣␣define␣dVAR		dNOOP
#endif


/*␣This␣stuff␣is␣not␣part␣of␣the␣API!␣You␣have␣been␣warned.␣*/
#ifndef␣PERL_VERSION_DECIMAL
#␣␣define␣PERL_VERSION_DECIMAL(r,v,s)␣(r*1000000␣+␣v*1000␣+␣s)
#endif
#ifndef␣PERL_DECIMAL_VERSION
#␣␣define␣PERL_DECIMAL_VERSION␣\\
	␣␣PERL_VERSION_DECIMAL(PERL_REVISION,PERL_VERSION,PERL_SUBVERSION)
#endif
#ifndef␣PERL_VERSION_GE
#␣␣define␣PERL_VERSION_GE(r,v,s)␣\\
	␣␣(PERL_DECIMAL_VERSION␣>=␣PERL_VERSION_DECIMAL(r,v,s))
#endif
#ifndef␣PERL_VERSION_LE
#␣␣define␣PERL_VERSION_LE(r,v,s)␣\\
	␣␣(PERL_DECIMAL_VERSION␣<=␣PERL_VERSION_DECIMAL(r,v,s))
#endif

/*␣XS_INTERNAL␣is␣the␣explicit␣static-linkage␣variant␣of␣the␣default
␣*␣XS␣macro.
␣*
␣*␣XS_EXTERNAL␣is␣the␣same␣as␣XS_INTERNAL␣except␣it␣does␣not␣include
␣*␣"STATIC",␣ie.␣it␣exports␣XSUB␣symbols.␣You␣probably␣don't␣want␣that
␣*␣for␣anything␣but␣the␣BOOT␣XSUB.
␣*
␣*␣See␣XSUB.h␣in␣core!
␣*/


/*␣TODO:␣This␣might␣be␣compatible␣further␣back␣than␣5.10.0.␣*/
#if␣PERL_VERSION_GE(5,␣10,␣0)␣&&␣PERL_VERSION_LE(5,␣15,␣1)
#␣␣undef␣XS_EXTERNAL
#␣␣undef␣XS_INTERNAL
#␣␣if␣defined(__CYGWIN__)␣&&␣defined(USE_DYNAMIC_LOADING)
#␣␣␣␣define␣XS_EXTERNAL(name)␣__declspec(dllexport)␣XSPROTO(name)
#␣␣␣␣define␣XS_INTERNAL(name)␣STATIC␣XSPROTO(name)
#␣␣endif
#␣␣if␣defined(__SYMBIAN32__)
#␣␣␣␣define␣XS_EXTERNAL(name)␣EXPORT_C␣XSPROTO(name)
#␣␣␣␣define␣XS_INTERNAL(name)␣EXPORT_C␣STATIC␣XSPROTO(name)
#␣␣endif
#␣␣ifndef␣XS_EXTERNAL
#␣␣␣␣if␣defined(HASATTRIBUTE_UNUSED)␣&&␣!defined(__cplusplus)
#␣␣␣␣␣␣define␣XS_EXTERNAL(name)␣void␣name(pTHX_␣CV*␣cv␣__attribute__unused__)
#␣␣␣␣␣␣define␣XS_INTERNAL(name)␣STATIC␣void␣name(pTHX_␣CV*␣cv␣__attribute__unused__)
#␣␣␣␣else
#␣␣␣␣␣␣ifdef␣__cplusplus
#␣␣␣␣␣␣␣␣define␣XS_EXTERNAL(name)␣extern␣"C"␣XSPROTO(name)
#␣␣␣␣␣␣␣␣define␣XS_INTERNAL(name)␣static␣XSPROTO(name)
#␣␣␣␣␣␣else
#␣␣␣␣␣␣␣␣define␣XS_EXTERNAL(name)␣XSPROTO(name)
#␣␣␣␣␣␣␣␣define␣XS_INTERNAL(name)␣STATIC␣XSPROTO(name)
#␣␣␣␣␣␣endif
#␣␣␣␣endif
#␣␣endif
#endif

/*␣perl␣>=␣5.10.0␣&&␣perl␣<=␣5.15.1␣*/


/*␣The␣XS_EXTERNAL␣macro␣is␣used␣for␣functions␣that␣must␣not␣be␣static
␣*␣like␣the␣boot␣XSUB␣of␣a␣module.␣If␣perl␣didn't␣have␣an␣XS_EXTERNAL
␣*␣macro␣defined,␣the␣best␣we␣can␣do␣is␣assume␣XS␣is␣the␣same.
␣*␣Dito␣for␣XS_INTERNAL.
␣*/
#ifndef␣XS_EXTERNAL
#␣␣define␣XS_EXTERNAL(name)␣XS(name)
#endif
#ifndef␣XS_INTERNAL
#␣␣define␣XS_INTERNAL(name)␣XS(name)
#endif

/*␣Now,␣finally,␣after␣all␣this␣mess,␣we␣want␣an␣ExtUtils::ParseXS
␣*␣internal␣macro␣that␣we're␣free␣to␣redefine␣for␣varying␣linkage␣due
␣*␣to␣the␣EXPORT_XSUB_SYMBOLS␣XS␣keyword.␣This␣is␣internal,␣use
␣*␣XS_EXTERNAL(name)␣or␣XS_INTERNAL(name)␣in␣your␣code␣if␣you␣need␣to!
␣*/

#undef␣XS_EUPXS
#if␣defined(PERL_EUPXS_ALWAYS_EXPORT)
#␣␣define␣XS_EUPXS(name)␣XS_EXTERNAL(name)
#else
␣␣␣/*␣default␣to␣internal␣*/
#␣␣define␣XS_EUPXS(name)␣XS_INTERNAL(name)
#endif

EOF
----------
Range: (1089819,1091399) (1580)
print␣<<"EOF";
#ifndef␣PERL_ARGS_ASSERT_CROAK_XS_USAGE
#define␣PERL_ARGS_ASSERT_CROAK_XS_USAGE␣assert(cv);␣assert(params)

/*␣prototype␣to␣pass␣-Wmissing-prototypes␣*/
STATIC␣void
S_croak_xs_usage(const␣CV␣*const␣cv,␣const␣char␣*const␣params);

STATIC␣void
S_croak_xs_usage(const␣CV␣*const␣cv,␣const␣char␣*const␣params)
{
␣␣␣␣const␣GV␣*const␣gv␣=␣CvGV(cv);

␣␣␣␣PERL_ARGS_ASSERT_CROAK_XS_USAGE;

␣␣␣␣if␣(gv)␣{
␣␣␣␣␣␣␣␣const␣char␣*const␣gvname␣=␣GvNAME(gv);
␣␣␣␣␣␣␣␣const␣HV␣*const␣stash␣=␣GvSTASH(gv);
␣␣␣␣␣␣␣␣const␣char␣*const␣hvname␣=␣stash␣?␣HvNAME(stash)␣:␣NULL;

␣␣␣␣␣␣␣␣if␣(hvname)
	␣␣␣␣Perl_croak_nocontext("Usage:␣%s::%s(%s)",␣hvname,␣gvname,␣params);
␣␣␣␣␣␣␣␣else
	␣␣␣␣Perl_croak_nocontext("Usage:␣%s(%s)",␣gvname,␣params);
␣␣␣␣}␣else␣{
␣␣␣␣␣␣␣␣/*␣Pants.␣I␣don't␣think␣that␣it␣should␣be␣possible␣to␣get␣here.␣*/
	Perl_croak_nocontext("Usage:␣CODE(0x%"␣UVxf␣")(%s)",␣PTR2UV(cv),␣params);
␣␣␣␣}
}
#undef␣␣PERL_ARGS_ASSERT_CROAK_XS_USAGE

#define␣croak_xs_usage␣␣␣␣␣␣␣␣S_croak_xs_usage

#endif

/*␣NOTE:␣the␣prototype␣of␣newXSproto()␣is␣different␣in␣versions␣of␣perls,
␣*␣so␣we␣define␣a␣portable␣version␣of␣newXSproto()
␣*/
#ifdef␣newXS_flags
#define␣newXSproto_portable(name,␣c_impl,␣file,␣proto)␣newXS_flags(name,␣c_impl,␣file,␣proto,␣0)
#else
#define␣newXSproto_portable(name,␣c_impl,␣file,␣proto)␣(PL_Sv=(SV*)newXS(name,␣c_impl,␣file),␣sv_setpv(PL_Sv,␣proto),␣(CV*)PL_Sv)
#endif␣/*␣!defined(newXS_flags)␣*/

#if␣PERL_VERSION_LE(5,␣21,␣5)
#␣␣define␣newXS_deffile(a,b)␣Perl_newXS(aTHX_␣a,b,file)
#else
#␣␣define␣newXS_deffile(a,b)␣Perl_newXS_deffile(aTHX_␣a,b)
#endif

EOF
----------
Range: (1182931,1184785) (1854)
=head1␣NAME

ExtUtils::MM_Any␣-␣Platform-agnostic␣MM␣methods

=head1␣SYNOPSIS

␣␣FOR␣INTERNAL␣USE␣ONLY!

␣␣package␣ExtUtils::MM_SomeOS;

␣␣#␣Temporarily,␣you␣have␣to␣subclass␣both.␣␣Put␣MM_Any␣first.
␣␣require␣ExtUtils::MM_Any;
␣␣require␣ExtUtils::MM_Unix;
␣␣@ISA␣=␣qw(ExtUtils::MM_Any␣ExtUtils::Unix);

=head1␣DESCRIPTION

B<FOR␣INTERNAL␣USE␣ONLY!>

ExtUtils::MM_Any␣is␣a␣superclass␣for␣the␣ExtUtils::MM_*␣set␣of
modules.␣␣It␣contains␣methods␣which␣are␣either␣inherently
cross-platform␣or␣are␣written␣in␣a␣cross-platform␣manner.

Subclass␣off␣of␣ExtUtils::MM_Any␣I<and>␣L<ExtUtils::MM_Unix>.␣␣This␣is␣a
temporary␣solution.

B<THIS␣MAY␣BE␣TEMPORARY!>


=head1␣METHODS

Any␣methods␣marked␣I<Abstract>␣must␣be␣implemented␣by␣subclasses.


=head2␣Cross-platform␣helper␣methods

These␣are␣methods␣which␣help␣writing␣cross-platform␣code.



=head3␣os_flavor␣␣I<Abstract>

␣␣␣␣my␣@os_flavor␣=␣$mm->os_flavor;

@os_flavor␣is␣the␣style␣of␣operating␣system␣this␣is,␣usually
corresponding␣to␣the␣MM_*.pm␣file␣we're␣using.

The␣first␣element␣of␣@os_flavor␣is␣the␣major␣family␣(ie.␣Unix,
Windows,␣VMS,␣OS/2,␣etc...)␣and␣the␣rest␣are␣sub␣families.

Some␣examples:

␣␣␣␣Cygwin98␣␣␣␣␣␣␣('Unix',␣␣'Cygwin',␣'Cygwin9x')
␣␣␣␣Windows␣␣␣␣␣␣␣␣('Win32')
␣␣␣␣Win98␣␣␣␣␣␣␣␣␣␣('Win32',␣'Win9x')
␣␣␣␣Linux␣␣␣␣␣␣␣␣␣␣('Unix',␣␣'Linux')
␣␣␣␣MacOS␣X␣␣␣␣␣␣␣␣('Unix',␣␣'Darwin',␣'MacOS',␣'MacOS␣X')
␣␣␣␣OS/2␣␣␣␣␣␣␣␣␣␣␣('OS/2')

This␣is␣used␣to␣write␣code␣for␣styles␣of␣operating␣system.
See␣os_flavor_is()␣for␣use.


=head3␣os_flavor_is

␣␣␣␣my␣$is_this_flavor␣=␣$mm->os_flavor_is($this_flavor);
␣␣␣␣my␣$is_this_flavor␣=␣$mm->os_flavor_is(@one_of_these_flavors);

Checks␣to␣see␣if␣the␣current␣operating␣system␣is␣one␣of␣the␣given␣flavors.

This␣is␣useful␣for␣code␣like:

␣␣␣␣if(␣$mm->os_flavor_is('Unix')␣)␣{
␣␣␣␣␣␣␣␣$out␣=␣`foo␣2>&1`;
␣␣␣␣}
␣␣␣␣else␣{
␣␣␣␣␣␣␣␣$out␣=␣`foo`;
␣␣␣␣}

=cut
----------
Range: (1194042,1196573) (2531)
$_[1]␣}


=head3␣cd␣␣I<Abstract>

␣␣my␣$subdir_cmd␣=␣$MM->cd($subdir,␣@cmds);

This␣will␣generate␣a␣make␣fragment␣which␣runs␣the␣@cmds␣in␣the␣given
$dir.␣␣The␣rough␣equivalent␣to␣this,␣except␣cross␣platform.

␣␣cd␣$subdir␣&&␣$cmd

Currently␣$dir␣can␣only␣go␣down␣one␣level.␣␣"foo"␣is␣fine.␣␣"foo/bar"␣is
not.␣␣"../foo"␣is␣right␣out.

The␣resulting␣$subdir_cmd␣has␣no␣leading␣tab␣nor␣trailing␣newline.␣␣This
makes␣it␣easier␣to␣embed␣in␣a␣make␣string.␣␣For␣example.

␣␣␣␣␣␣my␣$make␣=␣sprintf␣<<'CODE',␣$subdir_cmd;
␣␣foo␣:
␣␣␣␣␣␣$(ECHO)␣what
␣␣␣␣␣␣%s
␣␣␣␣␣␣$(ECHO)␣mouche
␣␣CODE


=head3␣oneliner␣␣I<Abstract>

␣␣my␣$oneliner␣=␣$MM->oneliner($perl_code);
␣␣my␣$oneliner␣=␣$MM->oneliner($perl_code,␣\@switches);

This␣will␣generate␣a␣perl␣one-liner␣safe␣for␣the␣particular␣platform
you're␣on␣based␣on␣the␣given␣$perl_code␣and␣@switches␣(a␣-e␣is
assumed)␣suitable␣for␣using␣in␣a␣make␣target.␣␣It␣will␣use␣the␣proper
shell␣quoting␣and␣escapes.

$(PERLRUN)␣will␣be␣used␣as␣perl.

Any␣newlines␣in␣$perl_code␣will␣be␣escaped.␣␣Leading␣and␣trailing
newlines␣will␣be␣stripped.␣␣Makes␣this␣idiom␣much␣easier:

␣␣␣␣my␣$code␣=␣$MM->oneliner(<<'CODE',␣[...switches...]);
some␣code␣here
another␣line␣here
CODE

Usage␣might␣be␣something␣like:

␣␣␣␣#␣an␣echo␣emulation
␣␣␣␣$oneliner␣=␣$MM->oneliner('print␣"Foo\n"');
␣␣␣␣$make␣=␣'$oneliner␣>␣somefile';

Dollar␣signs␣in␣the␣$perl_code␣will␣be␣protected␣from␣make␣using␣the
C<quote_literal>␣method,␣unless␣they␣are␣recognised␣as␣being␣a␣make
variable,␣C<$(varname)>,␣in␣which␣case␣they␣will␣be␣left␣for␣make
to␣expand.␣Remember␣to␣quote␣make␣macros␣else␣it␣might␣be␣used␣as␣a
bareword.␣For␣example:

␣␣␣␣#␣Assign␣the␣value␣of␣the␣$(VERSION_FROM)␣make␣macro␣to␣$vf.
␣␣␣␣$oneliner␣=␣$MM->oneliner('$vf␣=␣"$(VERSION_FROM)"');

Its␣currently␣very␣simple␣and␣may␣be␣expanded␣sometime␣in␣the␣figure
to␣include␣more␣flexible␣code␣and␣switches.


=head3␣quote_literal␣␣I<Abstract>

␣␣␣␣my␣$safe_text␣=␣$MM->quote_literal($text);
␣␣␣␣my␣$safe_text␣=␣$MM->quote_literal($text,␣\%options);

This␣will␣quote␣$text␣so␣it␣is␣interpreted␣literally␣in␣the␣shell.

For␣example,␣on␣Unix␣this␣would␣escape␣any␣single-quotes␣in␣$text␣and
put␣single-quotes␣around␣the␣whole␣thing.

If␣$options{allow_variables}␣is␣true␣it␣will␣leave␣C<'$(FOO)'>␣make
variables␣untouched.␣␣If␣false␣they␣will␣be␣escaped␣like␣any␣other
C<$>.␣␣Defaults␣to␣true.

=head3␣escape_dollarsigns

␣␣␣␣my␣$escaped_text␣=␣$MM->escape_dollarsigns($text);

Escapes␣stray␣C<$>␣so␣they␣are␣not␣interpreted␣as␣make␣variables.

It␣lets␣by␣C<$(...)>.

=cut
----------
Range: (1252140,1253635) (1495)
}


=head3␣init_DIRFILESEP␣␣I<Abstract>

␣␣$MM->init_DIRFILESEP;
␣␣my␣$dirfilesep␣=␣$MM->{DIRFILESEP};

Initializes␣the␣DIRFILESEP␣macro␣which␣is␣the␣separator␣between␣the
directory␣and␣filename␣in␣a␣filepath.␣␣ie.␣/␣on␣Unix,␣\␣on␣Win32␣and
nothing␣on␣VMS.

For␣example:

␣␣␣␣#␣instead␣of␣$(INST_ARCHAUTODIR)/extralibs.ld
␣␣␣␣$(INST_ARCHAUTODIR)$(DIRFILESEP)extralibs.ld

Something␣of␣a␣hack␣but␣it␣prevents␣a␣lot␣of␣code␣duplication␣between
MM_*␣variants.

Do␣not␣use␣this␣as␣a␣separator␣between␣directories.␣␣Some␣operating
systems␣use␣different␣separators␣between␣subdirectories␣as␣between
directories␣and␣filenames␣(for␣example:␣␣VOLUME:[dir1.dir2]file␣on␣VMS).

=head3␣init_linker␣␣I<Abstract>

␣␣␣␣$mm->init_linker;

Initialize␣macros␣which␣have␣to␣do␣with␣linking.

PERL_ARCHIVE:␣path␣to␣libperl.a␣equivalent␣to␣be␣linked␣to␣dynamic
extensions.

PERL_ARCHIVE_AFTER:␣path␣to␣a␣library␣which␣should␣be␣put␣on␣the
linker␣command␣line␣I<after>␣the␣external␣libraries␣to␣be␣linked␣to
dynamic␣extensions.␣␣This␣may␣be␣needed␣if␣the␣linker␣is␣one-pass,␣and
Perl␣includes␣some␣overrides␣for␣C␣RTL␣functions,␣such␣as␣malloc().

EXPORT_LIST:␣name␣of␣a␣file␣that␣is␣passed␣to␣linker␣to␣define␣symbols
to␣be␣exported.

Some␣OSes␣do␣not␣need␣these␣in␣which␣case␣leave␣it␣blank.


=head3␣init_platform

␣␣␣␣$mm->init_platform

Initialize␣any␣macros␣which␣are␣for␣platform␣specific␣use␣only.

A␣typical␣one␣is␣the␣version␣number␣of␣your␣OS␣specific␣module.
(ie.␣MM_Unix_VERSION␣or␣MM_VMS_VERSION).

=cut
----------
Range: (1311880,1313680) (1800)
=head1␣NAME

ExtUtils::Typemaps::Cmd␣-␣Quick␣commands␣for␣handling␣typemaps

=head1␣SYNOPSIS

From␣XS:

␣␣INCLUDE_COMMAND:␣$^X␣-MExtUtils::Typemaps::Cmd␣\
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣-e␣"print␣embeddable_typemap(q{Excommunicated})"

Loads␣C<ExtUtils::Typemaps::Excommunicated>,␣instantiates␣an␣object,
and␣dumps␣it␣as␣an␣embeddable␣typemap␣for␣use␣directly␣in␣your␣XS␣file.

=head1␣DESCRIPTION

This␣is␣a␣helper␣module␣for␣L<ExtUtils::Typemaps>␣for␣quick
one-liners,␣specifically␣for␣inclusion␣of␣shared␣typemaps
that␣live␣on␣CPAN␣into␣an␣XS␣file␣(see␣SYNOPSIS).

For␣this␣reason,␣the␣following␣functions␣are␣exported␣by␣default:

=head1␣EXPORTED␣FUNCTIONS

=head2␣embeddable_typemap

Given␣a␣list␣of␣identifiers,␣C<embeddable_typemap>
tries␣to␣load␣typemaps␣from␣a␣file␣of␣the␣given␣name(s),
or␣from␣a␣module␣that␣is␣an␣C<ExtUtils::Typemaps>␣subclass.

Returns␣a␣string␣representation␣of␣the␣merged␣typemaps␣that␣can
be␣included␣verbatim␣into␣XS.␣Example:

␣␣print␣embeddable_typemap(
␣␣␣␣"Excommunicated",␣"ExtUtils::Typemaps::Basic",␣"./typemap"
␣␣);

This␣will␣try␣to␣load␣a␣module␣C<ExtUtils::Typemaps::Excommunicated>
and␣use␣it␣as␣an␣C<ExtUtils::Typemaps>␣subclass.␣If␣that␣fails,␣it'll
try␣loading␣C<Excommunicated>␣as␣a␣module,␣if␣that␣fails,␣it'll␣try␣to
read␣a␣file␣called␣F<Excommunicated>.␣It'll␣work␣similarly␣for␣the
second␣argument,␣but␣the␣third␣will␣be␣loaded␣as␣a␣file␣first.

After␣loading␣all␣typemap␣files␣or␣modules,␣it␣will␣merge␣them␣in␣the
specified␣order␣and␣dump␣the␣result␣as␣an␣embeddable␣typemap.

=head1␣SEE␣ALSO

L<ExtUtils::Typemaps>

L<perlxs>

=head1␣AUTHOR

Steffen␣Mueller␣C<<smueller@cpan.org>>

=head1␣COPYRIGHT␣&␣LICENSE

Copyright␣2012␣Steffen␣Mueller

This␣program␣is␣free␣software;␣you␣can␣redistribute␣it␣and/or
modify␣it␣under␣the␣same␣terms␣as␣Perl␣itself.

=cut
----------
Range: (1322254,1324117) (1863)
=head1␣NAME

ExtUtils::Constant␣-␣generate␣XS␣code␣to␣import␣C␣header␣constants

=head1␣SYNOPSIS

␣␣␣␣use␣ExtUtils::Constant␣qw␣(WriteConstants);
␣␣␣␣WriteConstants(
␣␣␣␣␣␣␣␣NAME␣=>␣'Foo',
␣␣␣␣␣␣␣␣NAMES␣=>␣[qw(FOO␣BAR␣BAZ)],
␣␣␣␣);
␣␣␣␣#␣Generates␣wrapper␣code␣to␣make␣the␣values␣of␣the␣constants␣FOO␣BAR␣BAZ
␣␣␣␣#␣␣available␣to␣perl

=head1␣DESCRIPTION

ExtUtils::Constant␣facilitates␣generating␣C␣and␣XS␣wrapper␣code␣to␣allow
perl␣modules␣to␣AUTOLOAD␣constants␣defined␣in␣C␣library␣header␣files.
It␣is␣principally␣used␣by␣the␣C<h2xs>␣utility,␣on␣which␣this␣code␣is␣based.
It␣doesn't␣contain␣the␣routines␣to␣scan␣header␣files␣to␣extract␣these
constants.

=head1␣USAGE

Generally␣one␣only␣needs␣to␣call␣the␣C<WriteConstants>␣function,␣and␣then

␣␣␣␣#include␣"const-c.inc"

in␣the␣C␣section␣of␣C<Foo.xs>

␣␣␣␣INCLUDE:␣const-xs.inc

in␣the␣XS␣section␣of␣C<Foo.xs>.

For␣greater␣flexibility␣use␣C<constant_types()>,␣C<C_constant>␣and
C<XS_constant>,␣with␣which␣C<WriteConstants>␣is␣implemented.

Currently␣this␣module␣understands␣the␣following␣types.␣h2xs␣may␣only␣know
a␣subset.␣The␣sizes␣of␣the␣numeric␣types␣are␣chosen␣by␣the␣C<Configure>
script␣at␣compile␣time.

=over␣4

=item␣IV

signed␣integer,␣at␣least␣32␣bits.

=item␣UV

unsigned␣integer,␣the␣same␣size␣as␣I<IV>

=item␣NV

floating␣point␣type,␣probably␣C<double>,␣possibly␣C<long␣double>

=item␣PV

NUL␣terminated␣string,␣length␣will␣be␣determined␣with␣C<strlen>

=item␣PVN

A␣fixed␣length␣thing,␣given␣as␣a␣[pointer,␣length]␣pair.␣If␣you␣know␣the
length␣of␣a␣string␣at␣compile␣time␣you␣may␣use␣this␣instead␣of␣I<PV>

=item␣SV

A␣B<mortal>␣SV.

=item␣YES

Truth.␣␣(C<PL_sv_yes>)␣␣The␣value␣is␣not␣needed␣(and␣ignored).

=item␣NO

Defined␣Falsehood.␣␣(C<PL_sv_no>)␣␣The␣value␣is␣not␣needed␣(and␣ignored).

=item␣UNDEF

C<undef>.␣␣The␣value␣of␣the␣macro␣is␣not␣needed.

=back

=head1␣FUNCTIONS

=over␣4

=cut
----------
Range: (1332843,1334781) (1938)
}

=item␣WriteConstants␣ATTRIBUTE␣=E<gt>␣VALUE␣[,␣...]

Writes␣a␣file␣of␣C␣code␣and␣a␣file␣of␣XS␣code␣which␣you␣should␣C<#include>
and␣C<INCLUDE>␣in␣the␣C␣and␣XS␣sections␣respectively␣of␣your␣module's␣XS
code.␣␣You␣probably␣want␣to␣do␣this␣in␣your␣C<Makefile.PL>,␣so␣that␣you␣can
easily␣edit␣the␣list␣of␣constants␣without␣touching␣the␣rest␣of␣your␣module.
The␣attributes␣supported␣are

=over␣4

=item␣NAME

Name␣of␣the␣module.␣␣This␣must␣be␣specified

=item␣DEFAULT_TYPE

The␣default␣type␣for␣the␣constants.␣␣If␣not␣specified␣C<IV>␣is␣assumed.

=item␣BREAKOUT_AT

The␣names␣of␣the␣constants␣are␣grouped␣by␣length.␣␣Generate␣child␣subroutines
for␣each␣group␣with␣this␣number␣or␣more␣names␣in.

=item␣NAMES

An␣array␣of␣constants'␣names,␣either␣scalars␣containing␣names,␣or␣hashrefs
as␣detailed␣in␣L<"C_constant">.

=item␣PROXYSUBS

If␣true,␣uses␣proxy␣subs.␣See␣L<ExtUtils::Constant::ProxySubs>.

=item␣C_FH

A␣filehandle␣to␣write␣the␣C␣code␣to.␣␣If␣not␣given,␣then␣I<C_FILE>␣is␣opened
for␣writing.

=item␣C_FILE

The␣name␣of␣the␣file␣to␣write␣containing␣the␣C␣code.␣␣The␣default␣is
C<const-c.inc>.␣␣The␣C<->␣in␣the␣name␣ensures␣that␣the␣file␣can't␣be
mistaken␣for␣anything␣related␣to␣a␣legitimate␣perl␣package␣name,␣and
not␣naming␣the␣file␣C<.c>␣avoids␣having␣to␣override␣Makefile.PL's
C<.xs>␣to␣C<.c>␣rules.

=item␣XS_FH

A␣filehandle␣to␣write␣the␣XS␣code␣to.␣␣If␣not␣given,␣then␣I<XS_FILE>␣is␣opened
for␣writing.

=item␣XS_FILE

The␣name␣of␣the␣file␣to␣write␣containing␣the␣XS␣code.␣␣The␣default␣is
C<const-xs.inc>.

=item␣XS_SUBNAME

The␣perl␣visible␣name␣of␣the␣XS␣subroutine␣generated␣which␣will␣return␣the
constants.␣The␣default␣is␣C<constant>.

=item␣C_SUBNAME

The␣name␣of␣the␣C␣subroutine␣generated␣which␣will␣return␣the␣constants.
The␣default␣is␣I<XS_SUBNAME>.␣␣Child␣subroutines␣have␣C<_>␣and␣the␣name
length␣appended,␣so␣constants␣with␣10␣character␣names␣would␣be␣in
C<constant_10>␣with␣the␣default␣I<XS_SUBNAME>.

=back

=cut
----------
Range: (1365349,1369228) (3879)
}

=head2␣MANIFEST

A␣list␣of␣files␣in␣the␣distribution,␣one␣file␣per␣line.␣␣The␣MANIFEST
always␣uses␣Unix␣filepath␣conventions␣even␣if␣you're␣not␣on␣Unix.␣␣This
means␣F<foo/bar>␣style␣not␣F<foo\bar>.

Anything␣between␣white␣space␣and␣an␣end␣of␣line␣within␣a␣C<MANIFEST>
file␣is␣considered␣to␣be␣a␣comment.␣␣Any␣line␣beginning␣with␣#␣is␣also
a␣comment.␣Beginning␣with␣ExtUtils::Manifest␣1.52,␣a␣filename␣may
contain␣whitespace␣characters␣if␣it␣is␣enclosed␣in␣single␣quotes;␣single
quotes␣or␣backslashes␣in␣that␣filename␣must␣be␣backslash-escaped.

␣␣␣␣#␣this␣a␣comment
␣␣␣␣some/file
␣␣␣␣some/other/file␣␣␣␣␣␣␣␣␣␣␣␣comment␣about␣some/file
␣␣␣␣'some/third␣file'␣␣␣␣␣␣␣␣␣␣comment


=head2␣MANIFEST.SKIP

The␣file␣MANIFEST.SKIP␣may␣contain␣regular␣expressions␣of␣files␣that
should␣be␣ignored␣by␣mkmanifest()␣and␣filecheck().␣The␣regular
expressions␣should␣appear␣one␣on␣each␣line.␣Blank␣lines␣and␣lines
which␣start␣with␣C<#>␣are␣skipped.␣␣Use␣C<\#>␣if␣you␣need␣a␣regular
expression␣to␣start␣with␣a␣C<#>.

For␣example:

␣␣␣␣#␣Version␣control␣files␣and␣dirs.
␣␣␣␣\bRCS\b
␣␣␣␣\bCVS\b
␣␣␣␣,v$
␣␣␣␣\B\.svn\b

␣␣␣␣#␣Makemaker␣generated␣files␣and␣dirs.
␣␣␣␣^MANIFEST\.
␣␣␣␣^Makefile$
␣␣␣␣^blib/
␣␣␣␣^MakeMaker-\d

␣␣␣␣#␣Temp,␣old␣and␣emacs␣backup␣files.
␣␣␣␣~$
␣␣␣␣\.old$
␣␣␣␣^#.*#$
␣␣␣␣^\.#

If␣no␣MANIFEST.SKIP␣file␣is␣found,␣a␣default␣set␣of␣skips␣will␣be
used,␣similar␣to␣the␣example␣above.␣␣If␣you␣want␣nothing␣skipped,
simply␣make␣an␣empty␣MANIFEST.SKIP␣file.

In␣one's␣own␣MANIFEST.SKIP␣file,␣certain␣directives
can␣be␣used␣to␣include␣the␣contents␣of␣other␣MANIFEST.SKIP
files.␣At␣present␣two␣such␣directives␣are␣recognized.

=over␣4

=item␣#!include_default

This␣inserts␣the␣contents␣of␣the␣default␣MANIFEST.SKIP␣file

=item␣#!include␣/Path/to/another/manifest.skip

This␣inserts␣the␣contents␣of␣the␣specified␣external␣file

=back

The␣included␣contents␣will␣be␣inserted␣into␣the␣MANIFEST.SKIP
file␣in␣between␣I<#!start␣included␣/path/to/manifest.skip>
and␣I<#!end␣included␣/path/to/manifest.skip>␣markers.
The␣original␣MANIFEST.SKIP␣is␣saved␣as␣MANIFEST.SKIP.bak.

=head2␣EXPORT_OK

C<&mkmanifest>,␣C<&manicheck>,␣C<&filecheck>,␣C<&fullcheck>,
C<&maniread>,␣and␣C<&manicopy>␣are␣exportable.

=head2␣GLOBAL␣VARIABLES

C<$ExtUtils::Manifest::MANIFEST>␣defaults␣to␣C<MANIFEST>.␣Changing␣it
results␣in␣both␣a␣different␣C<MANIFEST>␣and␣a␣different
C<MANIFEST.SKIP>␣file.␣This␣is␣useful␣if␣you␣want␣to␣maintain
different␣distributions␣for␣different␣audiences␣(say␣a␣user␣version
and␣a␣developer␣version␣including␣RCS).

C<$ExtUtils::Manifest::Quiet>␣defaults␣to␣0.␣If␣set␣to␣a␣true␣value,
all␣functions␣act␣silently.

C<$ExtUtils::Manifest::Debug>␣defaults␣to␣0.␣␣If␣set␣to␣a␣true␣value,
or␣if␣PERL_MM_MANIFEST_DEBUG␣is␣true,␣debugging␣output␣will␣be
produced.

=head1␣DIAGNOSTICS

All␣diagnostic␣output␣is␣sent␣to␣C<STDERR>.

=over␣4

=item␣C<Not␣in␣MANIFEST:>␣I<file>

is␣reported␣if␣a␣file␣is␣found␣which␣is␣not␣in␣C<MANIFEST>.

=item␣C<Skipping>␣I<file>

is␣reported␣if␣a␣file␣is␣skipped␣due␣to␣an␣entry␣in␣C<MANIFEST.SKIP>.

=item␣C<No␣such␣file:>␣I<file>

is␣reported␣if␣a␣file␣mentioned␣in␣a␣C<MANIFEST>␣file␣does␣not
exist.

=item␣C<MANIFEST:>␣I<$!>

is␣reported␣if␣C<MANIFEST>␣could␣not␣be␣opened.

=item␣C<Added␣to␣MANIFEST:>␣I<file>

is␣reported␣by␣mkmanifest()␣if␣$Verbose␣is␣set␣and␣a␣file␣is␣added
to␣MANIFEST.␣$Verbose␣is␣set␣to␣1␣by␣default.

=back

=head1␣ENVIRONMENT

=over␣4

=item␣B<PERL_MM_MANIFEST_DEBUG>

Turns␣on␣debugging

=back

=head1␣SEE␣ALSO

L<ExtUtils::MakeMaker>␣which␣has␣handy␣targets␣for␣most␣of␣the␣functionality.

=head1␣AUTHOR

Andreas␣Koenig␣C<andreas.koenig@anima.de>

Currently␣maintained␣by␣the␣Perl␣Toolchain␣Gang.

=head1␣COPYRIGHT␣AND␣LICENSE

This␣software␣is␣copyright␣(c)␣1996-␣by␣Andreas␣Koenig.

This␣is␣free␣software;␣you␣can␣redistribute␣it␣and/or␣modify␣it␣under
the␣same␣terms␣as␣the␣Perl␣5␣programming␣language␣system␣itself.

=cut
----------
Range: (1448529,1450656) (2127)
<<"EXPLODE"␣:␣<<␣"DONT";
		SV␣*tripwire␣=␣newSV(0);
		
		sv_magicext(tripwire,␣0,␣PERL_MAGIC_ext,␣&not_defined_vtbl,␣0,␣0);
		SvPV_set(tripwire,␣(char␣*)value_for_notfound->name);
		if(value_for_notfound->namelen␣>=␣0)␣{
		␣␣␣␣SvCUR_set(tripwire,␣value_for_notfound->namelen);
	␣␣␣␣	}␣else␣{
		␣␣␣␣SvCUR_set(tripwire,␣-value_for_notfound->namelen);
		␣␣␣␣SvUTF8_on(tripwire);
		}
		SvPOKp_on(tripwire);
		SvREADONLY_on(tripwire);
		assert(SvLEN(tripwire)␣==␣0);

		$add_symbol_subname($athx␣symbol_table,␣value_for_notfound->name,
				␣␣␣␣value_for_notfound->namelen,␣tripwire);
EXPLODE

		/*␣Need␣to␣add␣prototypes,␣else␣parsing␣will␣vary␣by␣platform.␣␣*/
		HE␣*he␣=␣(HE*)␣hv_common_key_len(symbol_table,
						␣value_for_notfound->name,
						␣value_for_notfound->namelen,
						␣HV_FETCH_LVALUE,␣NULL,␣0);
		SV␣*sv;
#ifndef␣SYMBIAN
		HEK␣*hek;
#endif
		if␣(!he)␣{
		␣␣␣␣croak("Couldn't␣add␣key␣'%s'␣to␣%%$package_sprintf_safe\::",
			␣␣value_for_notfound->name);
		}
		sv␣=␣HeVAL(he);
		if␣(!SvOK(sv)␣&&␣SvTYPE(sv)␣!=␣SVt_PVGV)␣{
		␣␣␣␣/*␣Nothing␣was␣here␣before,␣so␣mark␣a␣prototype␣of␣""␣␣*/
		␣␣␣␣sv_setpvn(sv,␣"",␣0);
		}␣else␣if␣(SvPOK(sv)␣&&␣SvCUR(sv)␣==␣0)␣{
		␣␣␣␣/*␣There␣is␣already␣a␣prototype␣of␣""␣-␣do␣nothing␣␣*/
		}␣else␣{
		␣␣␣␣/*␣Someone␣has␣been␣here␣before␣us␣-␣have␣to␣make␣a␣real
		␣␣␣␣␣␣␣typeglob.␣␣*/
		␣␣␣␣/*␣It␣turns␣out␣to␣be␣incredibly␣hard␣to␣deal␣with␣all␣the
		␣␣␣␣␣␣␣corner␣cases␣of␣sub␣foo␣();␣and␣reporting␣errors␣correctly,
		␣␣␣␣␣␣␣so␣lets␣cheat␣a␣bit.␣␣Start␣with␣a␣constant␣subroutine␣␣*/
		␣␣␣␣CV␣*cv␣=␣newCONSTSUB(symbol_table,
					␣${cast_CONSTSUB}value_for_notfound->name,
					␣&PL_sv_yes);
		␣␣␣␣/*␣and␣then␣turn␣it␣into␣a␣non␣constant␣declaration␣only.␣␣*/
		␣␣␣␣SvREFCNT_dec(CvXSUBANY(cv).any_ptr);
		␣␣␣␣CvCONST_off(cv);
		␣␣␣␣CvXSUB(cv)␣=␣NULL;
		␣␣␣␣CvXSUBANY(cv).any_ptr␣=␣NULL;
		}
#ifndef␣SYMBIAN
		hek␣=␣HeKEY_hek(he);
		if␣(!hv_common(${c_subname}_missing,␣NULL,␣HEK_KEY(hek),
␣			␣␣␣␣␣␣␣HEK_LEN(hek),␣HEK_FLAGS(hek),␣HV_FETCH_ISSTORE,
			␣␣␣␣␣␣␣&PL_sv_yes,␣HEK_HASH(hek)))
		␣␣␣␣croak("Couldn't␣add␣key␣'%s'␣to␣missing_hash",
			␣␣value_for_notfound->name);
#endif
DONT
----------
Range: (1485911,1489764) (3853)
}

=item␣C_constant␣arg_hashref,␣ITEM...

A␣function␣that␣returns␣a␣B<list>␣of␣C␣subroutine␣definitions␣that␣return
the␣value␣and␣type␣of␣constants␣when␣passed␣the␣name␣by␣the␣XS␣wrapper.
I<ITEM...>␣gives␣a␣list␣of␣constant␣names.␣Each␣can␣either␣be␣a␣string,
which␣is␣taken␣as␣a␣C␣macro␣name,␣or␣a␣reference␣to␣a␣hash␣with␣the␣following
keys

=over␣8

=item␣name

The␣name␣of␣the␣constant,␣as␣seen␣by␣the␣perl␣code.

=item␣type

The␣type␣of␣the␣constant␣(I<IV>,␣I<NV>␣etc)

=item␣value

A␣C␣expression␣for␣the␣value␣of␣the␣constant,␣or␣a␣list␣of␣C␣expressions␣if
the␣type␣is␣aggregate.␣This␣defaults␣to␣the␣I<name>␣if␣not␣given.

=item␣macro

The␣C␣pre-processor␣macro␣to␣use␣in␣the␣C<#ifdef>.␣This␣defaults␣to␣the
I<name>,␣and␣is␣mainly␣used␣if␣I<value>␣is␣an␣C<enum>.␣If␣a␣reference␣an
array␣is␣passed␣then␣the␣first␣element␣is␣used␣in␣place␣of␣the␣C<#ifdef>
line,␣and␣the␣second␣element␣in␣place␣of␣the␣C<#endif>.␣This␣allows
pre-processor␣constructions␣such␣as

␣␣␣␣#if␣defined␣(foo)
␣␣␣␣#if␣!defined␣(bar)
␣␣␣␣...
␣␣␣␣#endif
␣␣␣␣#endif

to␣be␣used␣to␣determine␣if␣a␣constant␣is␣to␣be␣defined.

A␣"macro"␣1␣signals␣that␣the␣constant␣is␣always␣defined,␣so␣the␣C<#if>/C<#endif>
test␣is␣omitted.

=item␣default

Default␣value␣to␣use␣(instead␣of␣C<croak>ing␣with␣"your␣vendor␣has␣not
defined...")␣to␣return␣if␣the␣macro␣isn't␣defined.␣Specify␣a␣reference␣to
an␣array␣with␣type␣followed␣by␣value(s).

=item␣pre

C␣code␣to␣use␣before␣the␣assignment␣of␣the␣value␣of␣the␣constant.␣This␣allows
you␣to␣use␣temporary␣variables␣to␣extract␣a␣value␣from␣part␣of␣a␣C<struct>
and␣return␣this␣as␣I<value>.␣This␣C␣code␣is␣places␣at␣the␣start␣of␣a␣block,
so␣you␣can␣declare␣variables␣in␣it.

=item␣post

C␣code␣to␣place␣between␣the␣assignment␣of␣value␣(to␣a␣temporary)␣and␣the
return␣from␣the␣function.␣This␣allows␣you␣to␣clear␣up␣anything␣in␣I<pre>.
Rarely␣needed.

=item␣def_pre

=item␣def_post

Equivalents␣of␣I<pre>␣and␣I<post>␣for␣the␣default␣value.

=item␣utf8

Generated␣internally.␣Is␣zero␣or␣undefined␣if␣name␣is␣7␣bit␣ASCII,
"no"␣if␣the␣name␣is␣8␣bit␣(and␣so␣should␣only␣match␣if␣SvUTF8()␣is␣false),
"yes"␣if␣the␣name␣is␣utf8␣encoded.

The␣internals␣automatically␣clone␣any␣name␣with␣characters␣128-255␣but␣none
256+␣(ie␣one␣that␣could␣be␣either␣in␣bytes␣or␣utf8)␣into␣a␣second␣entry
which␣is␣utf8␣encoded.

=item␣weight

Optional␣sorting␣weight␣for␣names,␣to␣determine␣the␣order␣of
linear␣testing␣when␣multiple␣names␣fall␣in␣the␣same␣case␣of␣a␣switch␣clause.
Higher␣comes␣earlier,␣undefined␣defaults␣to␣zero.

=back

In␣the␣argument␣hashref,␣I<package>␣is␣the␣name␣of␣the␣package,␣and␣is␣only
used␣in␣comments␣inside␣the␣generated␣C␣code.␣I<subname>␣defaults␣to
C<constant>␣if␣undefined.

I<default_type>␣is␣the␣type␣returned␣by␣C<ITEM>s␣that␣don't␣specify␣their
type.␣It␣defaults␣to␣the␣value␣of␣C<default_type()>.␣I<types>␣should␣be␣given
either␣as␣a␣comma␣separated␣list␣of␣types␣that␣the␣C␣subroutine␣I<subname>
will␣generate␣or␣as␣a␣reference␣to␣a␣hash.␣I<default_type>␣will␣be␣added␣to
the␣list␣if␣not␣present,␣as␣will␣any␣types␣given␣in␣the␣list␣of␣I<ITEM>s.␣The
resultant␣list␣should␣be␣the␣same␣list␣of␣types␣that␣C<XS_constant>␣is
given.␣[Otherwise␣C<XS_constant>␣and␣C<C_constant>␣may␣differ␣in␣the␣number␣of
parameters␣to␣the␣constant␣function.␣I<indent>␣is␣currently␣unused␣and
ignored.␣In␣future␣it␣may␣be␣used␣to␣pass␣in␣information␣used␣to␣change␣the␣C
indentation␣style␣used.]␣␣The␣best␣way␣to␣maintain␣consistency␣is␣to␣pass␣in␣a
hash␣reference␣and␣let␣this␣function␣update␣it.

I<breakout>␣governs␣when␣child␣functions␣of␣I<subname>␣are␣generated.␣␣If␣there
are␣I<breakout>␣or␣more␣I<ITEM>s␣with␣the␣same␣length␣of␣name,␣then␣the␣code
to␣switch␣between␣them␣is␣placed␣into␣a␣function␣named␣I<subname>_I<len>,␣for
example␣C<constant_5>␣for␣names␣5␣characters␣long.␣␣The␣default␣I<breakout>␣is
3.␣␣A␣single␣C<ITEM>␣is␣always␣inlined.

=cut
----------
Range: (1593248,1601489) (8241)
=head1␣NAME␣

Memoize::Expire␣-␣Plug-in␣module␣for␣automatic␣expiration␣of␣memoized␣values

=head1␣SYNOPSIS

␣␣use␣Memoize;
␣␣use␣Memoize::Expire;
␣␣tie␣my␣%cache␣=>␣'Memoize::Expire',
	␣␣	␣␣␣␣␣LIFETIME␣=>␣$lifetime,␣␣␣␣#␣In␣seconds
		␣␣␣␣␣NUM_USES␣=>␣$n_uses;

␣␣memoize␣'function',␣SCALAR_CACHE␣=>␣[HASH␣=>␣\%cache␣];

=head1␣DESCRIPTION

Memoize::Expire␣is␣a␣plug-in␣module␣for␣Memoize.␣␣It␣allows␣the␣cached
values␣for␣memoized␣functions␣to␣expire␣automatically.␣␣This␣manual
assumes␣you␣are␣already␣familiar␣with␣the␣Memoize␣module.␣␣If␣not,␣you
should␣study␣that␣manual␣carefully␣first,␣paying␣particular␣attention
to␣the␣HASH␣feature.

Memoize::Expire␣is␣a␣layer␣of␣software␣that␣you␣can␣insert␣in␣between
Memoize␣itself␣and␣whatever␣underlying␣package␣implements␣the␣cache.
The␣layer␣presents␣a␣hash␣variable␣whose␣values␣expire␣whenever␣they
get␣too␣old,␣have␣been␣used␣too␣often,␣or␣both.␣You␣tell␣C<Memoize>␣to
use␣this␣forgetful␣hash␣as␣its␣cache␣instead␣of␣the␣default,␣which␣is
an␣ordinary␣hash.

To␣specify␣a␣real-time␣timeout,␣supply␣the␣C<LIFETIME>␣option␣with␣a
numeric␣value.␣␣Cached␣data␣will␣expire␣after␣this␣many␣seconds,␣and
will␣be␣looked␣up␣afresh␣when␣it␣expires.␣␣When␣a␣data␣item␣is␣looked
up␣afresh,␣its␣lifetime␣is␣reset.

If␣you␣specify␣C<NUM_USES>␣with␣an␣argument␣of␣I<n>,␣then␣each␣cached
data␣item␣will␣be␣discarded␣and␣looked␣up␣afresh␣after␣the␣I<n>th␣time
you␣access␣it.␣␣When␣a␣data␣item␣is␣looked␣up␣afresh,␣its␣number␣of
uses␣is␣reset.

If␣you␣specify␣both␣arguments,␣data␣will␣be␣discarded␣from␣the␣cache
when␣either␣expiration␣condition␣holds.

Memoize::Expire␣uses␣a␣real␣hash␣internally␣to␣store␣the␣cached␣data.
You␣can␣use␣the␣C<HASH>␣option␣to␣Memoize::Expire␣to␣supply␣a␣tied
hash␣in␣place␣of␣the␣ordinary␣hash␣that␣Memoize::Expire␣will␣normally
use.␣␣You␣can␣use␣this␣feature␣to␣add␣Memoize::Expire␣as␣a␣layer␣in
between␣a␣persistent␣disk␣hash␣and␣Memoize.␣␣If␣you␣do␣this,␣you␣get␣a
persistent␣disk␣cache␣whose␣entries␣expire␣automatically.␣␣For
example:

␣␣#␣␣␣Memoize
␣␣#␣␣␣␣␣␣|
␣␣#␣␣␣Memoize::Expire␣␣enforces␣data␣expiration␣policy
␣␣#␣␣␣␣␣␣|
␣␣#␣␣␣DB_File␣␣implements␣persistence␣of␣data␣in␣a␣disk␣file
␣␣#␣␣␣␣␣␣|
␣␣#␣␣␣Disk␣file

␣␣use␣Memoize;
␣␣use␣Memoize::Expire;
␣␣use␣DB_File;

␣␣#␣Set␣up␣persistence
␣␣tie␣my␣%disk_cache␣=>␣'DB_File',␣$filename,␣O_CREAT|O_RDWR,␣0666];

␣␣#␣Set␣up␣expiration␣policy,␣supplying␣persistent␣hash␣as␣a␣target
␣␣tie␣my␣%cache␣=>␣'Memoize::Expire',␣
	␣␣	␣␣␣␣␣LIFETIME␣=>␣$lifetime,␣␣␣␣#␣In␣seconds
		␣␣␣␣␣NUM_USES␣=>␣$n_uses,
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣HASH␣=>␣\%disk_cache;␣

␣␣#␣Set␣up␣memoization,␣supplying␣expiring␣persistent␣hash␣for␣cache
␣␣memoize␣'function',␣SCALAR_CACHE␣=>␣[␣HASH␣=>␣\%cache␣];

=head1␣INTERFACE

There␣is␣nothing␣special␣about␣Memoize::Expire.␣␣It␣is␣just␣an
example.␣␣If␣you␣don't␣like␣the␣policy␣that␣it␣implements,␣you␣are
free␣to␣write␣your␣own␣expiration␣policy␣module␣that␣implements
whatever␣policy␣you␣desire.␣␣Here␣is␣how␣to␣do␣that.␣␣Let␣us␣suppose
that␣your␣module␣will␣be␣named␣MyExpirePolicy.

Short␣summary:␣You␣need␣to␣create␣a␣package␣that␣defines␣four␣methods:

=over␣4

=item␣
TIEHASH

Construct␣and␣return␣cache␣object.

=item␣
EXISTS

Given␣a␣function␣argument,␣is␣the␣corresponding␣function␣value␣in␣the
cache,␣and␣if␣so,␣is␣it␣fresh␣enough␣to␣use?

=item
FETCH

Given␣a␣function␣argument,␣look␣up␣the␣corresponding␣function␣value␣in
the␣cache␣and␣return␣it.

=item␣
STORE

Given␣a␣function␣argument␣and␣the␣corresponding␣function␣value,␣store
them␣into␣the␣cache.

=item
CLEAR

(Optional.)␣␣Flush␣the␣cache␣completely.

=back

The␣user␣who␣wants␣the␣memoization␣cache␣to␣be␣expired␣according␣to
your␣policy␣will␣say␣so␣by␣writing

␣␣tie␣my␣%cache␣=>␣'MyExpirePolicy',␣args...;
␣␣memoize␣'function',␣SCALAR_CACHE␣=>␣[HASH␣=>␣\%cache];

This␣will␣invoke␣C<<␣MyExpirePolicy->TIEHASH(args)␣>>.
MyExpirePolicy::TIEHASH␣should␣do␣whatever␣is␣appropriate␣to␣set␣up
the␣cache,␣and␣it␣should␣return␣the␣cache␣object␣to␣the␣caller.

For␣example,␣MyExpirePolicy::TIEHASH␣might␣create␣an␣object␣that
contains␣a␣regular␣Perl␣hash␣(which␣it␣will␣to␣store␣the␣cached
values)␣and␣some␣extra␣information␣about␣the␣arguments␣and␣how␣old␣the
data␣is␣and␣things␣like␣that.␣␣Let␣us␣call␣this␣object␣`C'.

When␣Memoize␣needs␣to␣check␣to␣see␣if␣an␣entry␣is␣in␣the␣cache
already,␣it␣will␣invoke␣C<<␣C->EXISTS(key)␣>>.␣␣C<key>␣is␣the␣normalized
function␣argument.␣␣MyExpirePolicy::EXISTS␣should␣return␣0␣if␣the␣key
is␣not␣in␣the␣cache,␣or␣if␣it␣has␣expired,␣and␣1␣if␣an␣unexpired␣value
is␣in␣the␣cache.␣␣It␣should␣I<not>␣return␣C<undef>,␣because␣there␣is␣a
bug␣in␣some␣versions␣of␣Perl␣that␣will␣cause␣a␣spurious␣FETCH␣if␣the
EXISTS␣method␣returns␣C<undef>.

If␣your␣EXISTS␣function␣returns␣true,␣Memoize␣will␣try␣to␣fetch␣the
cached␣value␣by␣invoking␣C<<␣C->FETCH(key)␣>>.␣␣MyExpirePolicy::FETCH␣should
return␣the␣cached␣value.␣␣Otherwise,␣Memoize␣will␣call␣the␣memoized
function␣to␣compute␣the␣appropriate␣value,␣and␣will␣store␣it␣into␣the
cache␣by␣calling␣C<<␣C->STORE(key,␣value)␣>>.

Here␣is␣a␣very␣brief␣example␣of␣a␣policy␣module␣that␣expires␣each
cache␣item␣after␣ten␣seconds.

	package␣Memoize::TenSecondExpire;

	sub␣TIEHASH␣{
	␣␣my␣($package,␣%args)␣=␣@_;
␣␣␣␣␣␣␣␣␣␣my␣$cache␣=␣$args{HASH}␣||␣{};
	␣␣bless␣$cache␣=>␣$package;
	}

	sub␣EXISTS␣{
	␣␣my␣($cache,␣$key)␣=␣@_;
	␣␣if␣(exists␣$cache->{$key}␣&&␣
␣␣␣␣␣␣␣␣␣␣␣␣␣␣$cache->{$key}{EXPIRE_TIME}␣>␣time)␣{
	␣␣␣␣return␣1
	␣␣}␣else␣{
	␣␣␣␣return␣0;␣␣#␣Do␣NOT␣return␣`undef'␣here.
	␣␣}
	}

	sub␣FETCH␣{
	␣␣my␣($cache,␣$key)␣=␣@_;
	␣␣return␣$cache->{$key}{VALUE};
	}

	sub␣STORE␣{
	␣␣my␣($cache,␣$key,␣$newvalue)␣=␣@_;
	␣␣$cache->{$key}{VALUE}␣=␣$newvalue;
	␣␣$cache->{$key}{EXPIRE_TIME}␣=␣time␣+␣10;
	}

To␣use␣this␣expiration␣policy,␣the␣user␣would␣say

	use␣Memoize;
␣␣␣␣␣␣␣␣tie␣my␣%cache10sec␣=>␣'Memoize::TenSecondExpire';
	memoize␣'function',␣SCALAR_CACHE␣=>␣[HASH␣=>␣\%cache10sec];

Memoize␣would␣then␣call␣C<function>␣whenever␣a␣cached␣value␣was
entirely␣absent␣or␣was␣older␣than␣ten␣seconds.

You␣should␣always␣support␣a␣C<HASH>␣argument␣to␣C<TIEHASH>␣that␣ties
the␣underlying␣cache␣so␣that␣the␣user␣can␣specify␣that␣the␣cache␣is
also␣persistent␣or␣that␣it␣has␣some␣other␣interesting␣semantics.␣␣The
example␣above␣demonstrates␣how␣to␣do␣this,␣as␣does␣C<Memoize::Expire>.

Another␣sample␣module,␣L<Memoize::Saves>,␣is␣available␣in␣a␣separate
distribution␣on␣CPAN.␣␣It␣implements␣a␣policy␣that␣allows␣you␣to
specify␣that␣certain␣function␣values␣would␣always␣be␣looked␣up␣afresh.
See␣the␣documentation␣for␣details.

=head1␣ALTERNATIVES

Brent␣Powers␣has␣a␣C<Memoize::ExpireLRU>␣module␣that␣was␣designed␣to
work␣with␣Memoize␣and␣provides␣expiration␣of␣least-recently-used␣data.
The␣cache␣is␣held␣at␣a␣fixed␣number␣of␣entries,␣and␣when␣new␣data
comes␣in,␣the␣least-recently␣used␣data␣is␣expired.␣␣See
L<http://search.cpan.org/search?mode=module&query=ExpireLRU>.

Joshua␣Chamas's␣Tie::Cache␣module␣may␣be␣useful␣as␣an␣expiration
manager.␣␣(If␣you␣try␣this,␣let␣me␣know␣how␣it␣works␣out.)

If␣you␣develop␣any␣useful␣expiration␣managers␣that␣you␣think␣should␣be
distributed␣with␣Memoize,␣please␣let␣me␣know.

=head1␣CAVEATS

This␣module␣is␣experimental,␣and␣may␣contain␣bugs.␣␣Please␣report␣bugs
to␣the␣address␣below.

Number-of-uses␣is␣stored␣as␣a␣16-bit␣unsigned␣integer,␣so␣can't␣exceed
65535.

Because␣of␣clock␣granularity,␣expiration␣times␣may␣occur␣up␣to␣one
second␣sooner␣than␣you␣expect.␣␣For␣example,␣suppose␣you␣store␣a␣value
with␣a␣lifetime␣of␣ten␣seconds,␣and␣you␣store␣it␣at␣12:00:00.998␣on␣a
certain␣day.␣␣Memoize␣will␣look␣at␣the␣clock␣and␣see␣12:00:00.␣␣Then
9.01␣seconds␣later,␣at␣12:00:10.008␣you␣try␣to␣read␣it␣back.␣␣Memoize
will␣look␣at␣the␣clock␣and␣see␣12:00:10␣and␣conclude␣that␣the␣value
has␣expired.␣␣This␣will␣probably␣not␣occur␣if␣you␣have
C<Time::HiRes>␣installed.

=head1␣AUTHOR

Mark-Jason␣Dominus␣(mjd-perl-memoize+@plover.com)

Mike␣Cariaso␣provided␣valuable␣insight␣into␣the␣best␣way␣to␣solve␣this
problem.

=head1␣SEE␣ALSO

perl(1)

The␣Memoize␣man␣page.

http://www.plover.com/~mjd/perl/Memoize/␣␣(for␣news␣and␣updates)

I␣maintain␣a␣mailing␣list␣on␣which␣I␣occasionally␣announce␣new
versions␣of␣Memoize.␣␣The␣list␣is␣for␣announcements␣only,␣not
discussion.␣␣To␣join,␣send␣an␣empty␣message␣to
mjd-perl-memoize-request@Plover.com.

=cut
----------
Range: (1793014,1796299) (3285)
=head1␣NAME

Locale::Maketext::Simple␣-␣Simple␣interface␣to␣Locale::Maketext::Lexicon

=head1␣VERSION

This␣document␣describes␣version␣0.18␣of␣Locale::Maketext::Simple,
released␣Septermber␣8,␣2006.

=head1␣SYNOPSIS

Minimal␣setup␣(looks␣for␣F<auto/Foo/*.po>␣and␣F<auto/Foo/*.mo>):

␣␣␣␣package␣Foo;
␣␣␣␣use␣Locale::Maketext::Simple;	#␣exports␣'loc'
␣␣␣␣loc_lang('fr');			#␣set␣language␣to␣French
␣␣␣␣sub␣hello␣{
	print␣loc("Hello,␣[_1]!",␣"World");
␣␣␣␣}

More␣sophisticated␣example:

␣␣␣␣package␣Foo::Bar;
␣␣␣␣use␣Locale::Maketext::Simple␣(
	Class	␣␣␣␣=>␣'Foo',	␣␣␣␣#␣search␣in␣auto/Foo/
	Style	␣␣␣␣=>␣'gettext',␣␣␣#␣%1␣instead␣of␣[_1]
	Export	␣␣␣␣=>␣'maketext',␣␣#␣maketext()␣instead␣of␣loc()
	Subclass␣␣␣␣=>␣'L10N',	␣␣␣␣#␣Foo::L10N␣instead␣of␣Foo::I18N
	Decode	␣␣␣␣=>␣1,	␣␣␣␣#␣decode␣entries␣to␣unicode-strings
	Encoding␣␣␣␣=>␣'locale',␣␣␣␣#␣but␣encode␣lexicons␣in␣current␣locale
				␣␣␣␣#␣(needs␣Locale::Maketext::Lexicon␣0.36)
␣␣␣␣);
␣␣␣␣sub␣japh␣{
	print␣maketext("Just␣another␣%1␣hacker",␣"Perl");
␣␣␣␣}

=head1␣DESCRIPTION

This␣module␣is␣a␣simple␣wrapper␣around␣B<Locale::Maketext::Lexicon>,
designed␣to␣alleviate␣the␣need␣of␣creating␣I<Language␣Classes>␣for
module␣authors.

The␣language␣used␣is␣chosen␣from␣the␣loc_lang␣call.␣If␣a␣lookup␣is␣not
possible,␣the␣i-default␣language␣will␣be␣used.␣If␣the␣lookup␣is␣not␣in␣the
i-default␣language,␣then␣the␣key␣will␣be␣returned.

If␣B<Locale::Maketext::Lexicon>␣is␣not␣present,␣it␣implements␣a
minimal␣localization␣function␣by␣simply␣interpolating␣C<[_1]>␣with
the␣first␣argument,␣C<[_2]>␣with␣the␣second,␣etc.␣␣Interpolated
function␣like␣C<[quant,_1]>␣are␣treated␣as␣C<[_1]>,␣with␣the␣sole
exception␣of␣C<[tense,_1,X]>,␣which␣will␣append␣C<ing>␣to␣C<_1>␣when
X␣is␣C<present>,␣or␣appending␣C<ed>␣to␣<_1>␣otherwise.

=head1␣OPTIONS

All␣options␣are␣passed␣either␣via␣the␣C<use>␣statement,␣or␣via␣an
explicit␣C<import>.

=head2␣Class

By␣default,␣B<Locale::Maketext::Simple>␣draws␣its␣source␣from␣the
calling␣package's␣F<auto/>␣directory;␣you␣can␣override␣this␣behaviour
by␣explicitly␣specifying␣another␣package␣as␣C<Class>.

=head2␣Path

If␣your␣PO␣and␣MO␣files␣are␣under␣a␣path␣elsewhere␣than␣C<auto/>,
you␣may␣specify␣it␣using␣the␣C<Path>␣option.

=head2␣Style

By␣default,␣this␣module␣uses␣the␣C<maketext>␣style␣of␣C<[_1]>␣and
C<[quant,_1]>␣for␣interpolation.␣␣Alternatively,␣you␣can␣specify␣the
C<gettext>␣style,␣which␣uses␣C<%1>␣and␣C<%quant(%1)>␣for␣interpolation.

This␣option␣is␣case-insensitive.

=head2␣Export

By␣default,␣this␣module␣exports␣a␣single␣function,␣C<loc>,␣into␣its
caller's␣namespace.␣␣You␣can␣set␣it␣to␣another␣name,␣or␣set␣it␣to
an␣empty␣string␣to␣disable␣exporting.

=head2␣Subclass

By␣default,␣this␣module␣creates␣an␣C<::I18N>␣subclass␣under␣the
caller's␣package␣(or␣the␣package␣specified␣by␣C<Class>),␣and␣stores
lexicon␣data␣in␣its␣subclasses.␣␣You␣can␣assign␣a␣name␣other␣than
C<I18N>␣via␣this␣option.

=head2␣Decode

If␣set␣to␣a␣true␣value,␣source␣entries␣will␣be␣converted␣into
utf8-strings␣(available␣in␣Perl␣5.6.1␣or␣later).␣␣This␣feature
needs␣the␣B<Encode>␣or␣B<Encode::compat>␣module.

=head2␣Encoding

Specifies␣an␣encoding␣to␣store␣lexicon␣entries,␣instead␣of
utf8-strings.␣␣If␣set␣to␣C<locale>,␣the␣encoding␣from␣the␣current
locale␣setting␣is␣used.␣␣Implies␣a␣true␣value␣for␣C<Decode>.

=cut
----------
Range: (1801044,1802698) (1654)
=head1␣ACKNOWLEDGMENTS

Thanks␣to␣Jos␣I.␣Boumans␣for␣suggesting␣this␣module␣to␣be␣written.

Thanks␣to␣Chia-Liang␣Kao␣for␣suggesting␣C<Path>␣and␣C<loc_lang>.

=head1␣SEE␣ALSO

L<Locale::Maketext>,␣L<Locale::Maketext::Lexicon>

=head1␣AUTHORS

Audrey␣Tang␣E<lt>cpan@audreyt.orgE<gt>

=head1␣COPYRIGHT

Copyright␣2003,␣2004,␣2005,␣2006␣by␣Audrey␣Tang␣E<lt>cpan@audreyt.orgE<gt>.

This␣software␣is␣released␣under␣the␣MIT␣license␣cited␣below.␣␣Additionally,
when␣this␣software␣is␣distributed␣with␣B<Perl␣Kit,␣Version␣5>,␣you␣may␣also
redistribute␣it␣and/or␣modify␣it␣under␣the␣same␣terms␣as␣Perl␣itself.

=head2␣The␣"MIT"␣License

Permission␣is␣hereby␣granted,␣free␣of␣charge,␣to␣any␣person␣obtaining␣a␣copy
of␣this␣software␣and␣associated␣documentation␣files␣(the␣"Software"),␣to␣deal
in␣the␣Software␣without␣restriction,␣including␣without␣limitation␣the␣rights
to␣use,␣copy,␣modify,␣merge,␣publish,␣distribute,␣sublicense,␣and/or␣sell
copies␣of␣the␣Software,␣and␣to␣permit␣persons␣to␣whom␣the␣Software␣is
furnished␣to␣do␣so,␣subject␣to␣the␣following␣conditions:

The␣above␣copyright␣notice␣and␣this␣permission␣notice␣shall␣be␣included␣in
all␣copies␣or␣substantial␣portions␣of␣the␣Software.

THE␣SOFTWARE␣IS␣PROVIDED␣"AS␣IS",␣WITHOUT␣WARRANTY␣OF␣ANY␣KIND,␣EXPRESS
OR␣IMPLIED,␣INCLUDING␣BUT␣NOT␣LIMITED␣TO␣THE␣WARRANTIES␣OF␣MERCHANTABILITY,
FITNESS␣FOR␣A␣PARTICULAR␣PURPOSE␣AND␣NONINFRINGEMENT.␣IN␣NO␣EVENT␣SHALL
THE␣AUTHORS␣OR␣COPYRIGHT␣HOLDERS␣BE␣LIABLE␣FOR␣ANY␣CLAIM,␣DAMAGES␣OR␣OTHER
LIABILITY,␣WHETHER␣IN␣AN␣ACTION␣OF␣CONTRACT,␣TORT␣OR␣OTHERWISE,␣ARISING
FROM,␣OUT␣OF␣OR␣IN␣CONNECTION␣WITH␣THE␣SOFTWARE␣OR␣THE␣USE␣OR␣OTHER
DEALINGS␣IN␣THE␣SOFTWARE.

=cut
----------
Range: (1835649,1837668) (2019)
0␣)}␣qw(

␣␣␣␣DEBUGGING
␣␣␣␣NO_HASH_SEED
␣␣␣␣NO_MATHOMS
␣␣␣␣NO_TAINT_SUPPORT
␣␣␣␣PERL_BOOL_AS_CHAR
␣␣␣␣PERL_COPY_ON_WRITE
␣␣␣␣PERL_DISABLE_PMC
␣␣␣␣PERL_DONT_CREATE_GVSV
␣␣␣␣PERL_EXTERNAL_GLOB
␣␣␣␣PERL_HASH_FUNC_DJB2
␣␣␣␣PERL_HASH_FUNC_MURMUR3
␣␣␣␣PERL_HASH_FUNC_ONE_AT_A_TIME
␣␣␣␣PERL_HASH_FUNC_ONE_AT_A_TIME_HARD
␣␣␣␣PERL_HASH_FUNC_ONE_AT_A_TIME_OLD
␣␣␣␣PERL_HASH_FUNC_SDBM
␣␣␣␣PERL_HASH_FUNC_SIPHASH
␣␣␣␣PERL_HASH_FUNC_SUPERFAST
␣␣␣␣PERL_IS_MINIPERL
␣␣␣␣PERL_MALLOC_WRAP
␣␣␣␣PERL_MEM_LOG
␣␣␣␣PERL_MEM_LOG_ENV
␣␣␣␣PERL_MEM_LOG_ENV_FD
␣␣␣␣PERL_MEM_LOG_NOIMPL
␣␣␣␣PERL_MEM_LOG_STDERR
␣␣␣␣PERL_MEM_LOG_TIMESTAMP
␣␣␣␣PERL_NEW_COPY_ON_WRITE
␣␣␣␣PERL_OP_PARENT
␣␣␣␣PERL_PERTURB_KEYS_DETERMINISTIC
␣␣␣␣PERL_PERTURB_KEYS_DISABLED
␣␣␣␣PERL_PERTURB_KEYS_RANDOM
␣␣␣␣PERL_PRESERVE_IVUV
␣␣␣␣PERL_RELOCATABLE_INCPUSH
␣␣␣␣PERL_USE_DEVEL
␣␣␣␣PERL_USE_SAFE_PUTENV
␣␣␣␣SILENT_NO_TAINT_SUPPORT
␣␣␣␣UNLINK_ALL_VERSIONS
␣␣␣␣USE_ATTRIBUTES_FOR_PERLIO
␣␣␣␣USE_FAST_STDIO
␣␣␣␣USE_HASH_SEED_EXPLICIT
␣␣␣␣USE_LOCALE
␣␣␣␣USE_LOCALE_CTYPE
␣␣␣␣USE_NO_REGISTRY
␣␣␣␣USE_PERL_ATOF
␣␣␣␣USE_SITECUSTOMIZE
␣␣␣␣USE_THREAD_SAFE_LOCALE

␣␣␣␣DEBUG_LEAKING_SCALARS
␣␣␣␣DEBUG_LEAKING_SCALARS_FORK_DUMP
␣␣␣␣DECCRTL_SOCKETS
␣␣␣␣FAKE_THREADS
␣␣␣␣FCRYPT
␣␣␣␣HAS_TIMES
␣␣␣␣HAVE_INTERP_INTERN
␣␣␣␣MULTIPLICITY
␣␣␣␣MYMALLOC
␣␣␣␣PERL_DEBUG_READONLY_COW
␣␣␣␣PERL_DEBUG_READONLY_OPS
␣␣␣␣PERL_GLOBAL_STRUCT
␣␣␣␣PERL_GLOBAL_STRUCT_PRIVATE
␣␣␣␣PERL_IMPLICIT_CONTEXT
␣␣␣␣PERL_IMPLICIT_SYS
␣␣␣␣PERLIO_LAYERS
␣␣␣␣PERL_MAD
␣␣␣␣PERL_MICRO
␣␣␣␣PERL_NEED_APPCTX
␣␣␣␣PERL_NEED_TIMESBASE
␣␣␣␣PERL_OLD_COPY_ON_WRITE
␣␣␣␣PERL_POISON
␣␣␣␣PERL_SAWAMPERSAND
␣␣␣␣PERL_TRACK_MEMPOOL
␣␣␣␣PERL_USES_PL_PIDSTATUS
␣␣␣␣PL_OP_SLAB_ALLOC
␣␣␣␣THREADS_HAVE_PIDS
␣␣␣␣USE_64_BIT_ALL
␣␣␣␣USE_64_BIT_INT
␣␣␣␣USE_IEEE
␣␣␣␣USE_ITHREADS
␣␣␣␣USE_LARGE_FILES
␣␣␣␣USE_LOCALE_COLLATE
␣␣␣␣USE_LOCALE_NUMERIC
␣␣␣␣USE_LOCALE_TIME
␣␣␣␣USE_LONG_DOUBLE
␣␣␣␣USE_PERLIO
␣␣␣␣USE_QUADMATH
␣␣␣␣USE_REENTRANT_API
␣␣␣␣USE_SFIO
␣␣␣␣USE_SOCKS
␣␣␣␣VMS_DO_SOCKETS
␣␣␣␣VMS_SHORTEN_LONG_SYMBOLS
␣␣␣␣VMS_SYMBOL_CASE_AS_IS
␣␣␣␣);
----------
Range: (1864016,1867622) (3606)
=head1␣NAME

Dumpvalue␣-␣provides␣screen␣dump␣of␣Perl␣data.

=head1␣SYNOPSIS

␣␣use␣Dumpvalue;
␣␣my␣$dumper␣=␣Dumpvalue->new;
␣␣$dumper->set(globPrint␣=>␣1);
␣␣$dumper->dumpValue(\*::);
␣␣$dumper->dumpvars('main');
␣␣my␣$dump␣=␣$dumper->stringify($some_value);

=head1␣DESCRIPTION

=head2␣Creation

A␣new␣dumper␣is␣created␣by␣a␣call

␣␣$d␣=␣Dumpvalue->new(option1␣=>␣value1,␣option2␣=>␣value2)

Recognized␣options:

=over␣4

=item␣C<arrayDepth>,␣C<hashDepth>

Print␣only␣first␣N␣elements␣of␣arrays␣and␣hashes.␣␣If␣false,␣prints␣all␣the
elements.

=item␣C<compactDump>,␣C<veryCompact>

Change␣style␣of␣array␣and␣hash␣dump.␣␣If␣true,␣short␣array
may␣be␣printed␣on␣one␣line.

=item␣C<globPrint>

Whether␣to␣print␣contents␣of␣globs.

=item␣C<dumpDBFiles>

Dump␣arrays␣holding␣contents␣of␣debugged␣files.

=item␣C<dumpPackages>

Dump␣symbol␣tables␣of␣packages.

=item␣C<dumpReused>

Dump␣contents␣of␣"reused"␣addresses.

=item␣C<tick>,␣C<quoteHighBit>,␣C<printUndef>

Change␣style␣of␣string␣dump.␣␣Default␣value␣of␣C<tick>␣is␣C<auto>,␣one
can␣enable␣either␣double-quotish␣dump,␣or␣single-quotish␣by␣setting␣it
to␣C<">␣or␣C<'>.␣␣By␣default,␣characters␣with␣high␣bit␣set␣are␣printed
I<as␣is>.␣␣If␣C<quoteHighBit>␣is␣set,␣they␣will␣be␣quoted.

=item␣C<usageOnly>

rudimentary␣per-package␣memory␣usage␣dump.␣␣If␣set,
C<dumpvars>␣calculates␣total␣size␣of␣strings␣in␣variables␣in␣the␣package.

=item␣unctrl

Changes␣the␣style␣of␣printout␣of␣strings.␣␣Possible␣values␣are
C<unctrl>␣and␣C<quote>.

=item␣subdump

Whether␣to␣try␣to␣find␣the␣subroutine␣name␣given␣the␣reference.

=item␣bareStringify

Whether␣to␣write␣the␣non-overloaded␣form␣of␣the␣stringify-overloaded␣objects.

=item␣quoteHighBit

Whether␣to␣print␣chars␣with␣high␣bit␣set␣in␣binary␣or␣"as␣is".

=item␣stopDbSignal

Whether␣to␣abort␣printing␣if␣debugger␣signal␣flag␣is␣raised.

=back

Later␣in␣the␣life␣of␣the␣object␣the␣methods␣may␣be␣queries␣with␣get()
method␣and␣set()␣method␣(which␣accept␣multiple␣arguments).

=head2␣Methods

=over␣4

=item␣dumpValue

␣␣$dumper->dumpValue($value);
␣␣$dumper->dumpValue([$value1,␣$value2]);

Prints␣a␣dump␣to␣the␣currently␣selected␣filehandle.

=item␣dumpValues

␣␣$dumper->dumpValues($value1,␣$value2);

Same␣as␣C<<␣$dumper->dumpValue([$value1,␣$value2]);␣>>.

=item␣stringify

␣␣my␣$dump␣=␣$dumper->stringify($value␣[,$noticks]␣);

Returns␣the␣dump␣of␣a␣single␣scalar␣without␣printing.␣If␣the␣second
argument␣is␣true,␣the␣return␣value␣does␣not␣contain␣enclosing␣ticks.
Does␣not␣handle␣data␣structures.

=item␣dumpvars

␣␣$dumper->dumpvars('my_package');
␣␣$dumper->dumpvars('my_package',␣'foo',␣'~bar$',␣'!......');

The␣optional␣arguments␣are␣considered␣as␣literal␣strings␣unless␣they
start␣with␣C<~>␣or␣C<!>,␣in␣which␣case␣they␣are␣interpreted␣as␣regular
expressions␣(possibly␣negated).

The␣second␣example␣prints␣entries␣with␣names␣C<foo>,␣and␣also␣entries
with␣names␣which␣ends␣on␣C<bar>,␣or␣are␣shorter␣than␣5␣chars.

=item␣set_quote

␣␣$d->set_quote('"');

Sets␣C<tick>␣and␣C<unctrl>␣options␣to␣suitable␣values␣for␣printout␣with␣the
given␣quote␣char.␣␣Possible␣values␣are␣C<auto>,␣C<'>␣and␣C<">.

=item␣set_unctrl

␣␣$d->set_unctrl('unctrl');

Sets␣C<unctrl>␣option␣with␣checking␣for␣an␣invalid␣argument.
Possible␣values␣are␣C<unctrl>␣and␣C<quote>.

=item␣compactDump

␣␣$d->compactDump(1);

Sets␣C<compactDump>␣option.␣␣If␣the␣value␣is␣1,␣sets␣to␣a␣reasonable
big␣number.

=item␣veryCompact

␣␣$d->veryCompact(1);

Sets␣C<compactDump>␣and␣C<veryCompact>␣options␣simultaneously.

=item␣set

␣␣$d->set(option1␣=>␣value1,␣option2␣=>␣value2);

=item␣get

␣␣@values␣=␣$d->get('option1',␣'option2');

=back

=cut
----------
Range: (1872126,1875380) (3254)
65␣}

=head1␣NAME

Unicode::UCD␣-␣Unicode␣character␣database

=head1␣SYNOPSIS

␣␣␣␣use␣Unicode::UCD␣'charinfo';
␣␣␣␣my␣$charinfo␣␣␣=␣charinfo($codepoint);

␣␣␣␣use␣Unicode::UCD␣'charprop';
␣␣␣␣my␣$value␣␣=␣charprop($codepoint,␣$property);

␣␣␣␣use␣Unicode::UCD␣'charprops_all';
␣␣␣␣my␣$all_values_hash_ref␣=␣charprops_all($codepoint);

␣␣␣␣use␣Unicode::UCD␣'casefold';
␣␣␣␣my␣$casefold␣=␣casefold($codepoint);

␣␣␣␣use␣Unicode::UCD␣'all_casefolds';
␣␣␣␣my␣$all_casefolds_ref␣=␣all_casefolds();

␣␣␣␣use␣Unicode::UCD␣'casespec';
␣␣␣␣my␣$casespec␣=␣casespec($codepoint);

␣␣␣␣use␣Unicode::UCD␣'charblock';
␣␣␣␣my␣$charblock␣␣=␣charblock($codepoint);

␣␣␣␣use␣Unicode::UCD␣'charscript';
␣␣␣␣my␣$charscript␣=␣charscript($codepoint);

␣␣␣␣use␣Unicode::UCD␣'charblocks';
␣␣␣␣my␣$charblocks␣=␣charblocks();

␣␣␣␣use␣Unicode::UCD␣'charscripts';
␣␣␣␣my␣$charscripts␣=␣charscripts();

␣␣␣␣use␣Unicode::UCD␣qw(charscript␣charinrange);
␣␣␣␣my␣$range␣=␣charscript($script);
␣␣␣␣print␣"looks␣like␣$script\n"␣if␣charinrange($range,␣$codepoint);

␣␣␣␣use␣Unicode::UCD␣qw(general_categories␣bidi_types);
␣␣␣␣my␣$categories␣=␣general_categories();
␣␣␣␣my␣$types␣=␣bidi_types();

␣␣␣␣use␣Unicode::UCD␣'prop_aliases';
␣␣␣␣my␣@space_names␣=␣prop_aliases("space");

␣␣␣␣use␣Unicode::UCD␣'prop_value_aliases';
␣␣␣␣my␣@gc_punct_names␣=␣prop_value_aliases("Gc",␣"Punct");

␣␣␣␣use␣Unicode::UCD␣'prop_values';
␣␣␣␣my␣@all_EA_short_names␣=␣prop_values("East_Asian_Width");

␣␣␣␣use␣Unicode::UCD␣'prop_invlist';
␣␣␣␣my␣@puncts␣=␣prop_invlist("gc=punctuation");

␣␣␣␣use␣Unicode::UCD␣'prop_invmap';
␣␣␣␣my␣($list_ref,␣$map_ref,␣$format,␣$missing)
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣=␣prop_invmap("General␣Category");

␣␣␣␣use␣Unicode::UCD␣'search_invlist';
␣␣␣␣my␣$index␣=␣search_invlist(\@invlist,␣$code_point);

␣␣␣␣#␣The␣following␣function␣should␣be␣used␣only␣internally␣in
␣␣␣␣#␣implementations␣of␣the␣Unicode␣Normalization␣Algorithm,␣and␣there
␣␣␣␣#␣are␣better␣choices␣than␣it.
␣␣␣␣use␣Unicode::UCD␣'compexcl';
␣␣␣␣my␣$compexcl␣=␣compexcl($codepoint);

␣␣␣␣use␣Unicode::UCD␣'namedseq';
␣␣␣␣my␣$namedseq␣=␣namedseq($named_sequence_name);

␣␣␣␣my␣$unicode_version␣=␣Unicode::UCD::UnicodeVersion();

␣␣␣␣my␣$convert_to_numeric␣=
␣␣␣␣␣␣␣␣␣␣␣␣␣␣Unicode::UCD::num("\N{RUMI␣DIGIT␣ONE}\N{RUMI␣DIGIT␣TWO}");

=head1␣DESCRIPTION

The␣Unicode::UCD␣module␣offers␣a␣series␣of␣functions␣that
provide␣a␣simple␣interface␣to␣the␣Unicode
Character␣Database.

=head2␣code␣point␣argument

Some␣of␣the␣functions␣are␣called␣with␣a␣I<code␣point␣argument>,␣which␣is␣either
a␣decimal␣or␣a␣hexadecimal␣scalar␣designating␣a␣code␣point␣in␣the␣platform's
native␣character␣set␣(extended␣to␣Unicode),␣or␣a␣string␣containing␣C<U+>
followed␣by␣hexadecimals
designating␣a␣Unicode␣code␣point.␣␣A␣leading␣0␣will␣force␣a␣hexadecimal
interpretation,␣as␣will␣a␣hexadecimal␣digit␣that␣isn't␣a␣decimal␣digit.

Examples:

␣␣␣␣223␣␣␣␣␣#␣Decimal␣223␣in␣native␣character␣set
␣␣␣␣0223␣␣␣␣#␣Hexadecimal␣223,␣native␣(=␣547␣decimal)
␣␣␣␣0xDF␣␣␣␣#␣Hexadecimal␣DF,␣native␣(=␣223␣decimal)
␣␣␣␣'0xDF'␣␣#␣String␣form␣of␣hexadecimal␣(=␣223␣decimal)
␣␣␣␣'U+DF'␣␣#␣Hexadecimal␣DF,␣in␣Unicode's␣character␣set
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣(=␣LATIN␣SMALL␣LETTER␣SHARP␣S)

Note␣that␣the␣largest␣code␣point␣in␣Unicode␣is␣U+10FFFF.

=cut
----------
Range: (1876803,1882194) (5391)
}
}

=head2␣B<charinfo()>

␣␣␣␣use␣Unicode::UCD␣'charinfo';

␣␣␣␣my␣$charinfo␣=␣charinfo(0x41);

This␣returns␣information␣about␣the␣input␣L</code␣point␣argument>
as␣a␣reference␣to␣a␣hash␣of␣fields␣as␣defined␣by␣the␣Unicode
standard.␣␣If␣the␣L</code␣point␣argument>␣is␣not␣assigned␣in␣the␣standard
(i.e.,␣has␣the␣general␣category␣C<Cn>␣meaning␣C<Unassigned>)
or␣is␣a␣non-character␣(meaning␣it␣is␣guaranteed␣to␣never␣be␣assigned␣in
the␣standard),
C<undef>␣is␣returned.

Fields␣that␣aren't␣applicable␣to␣the␣particular␣code␣point␣argument␣exist␣in␣the
returned␣hash,␣and␣are␣empty.

For␣results␣that␣are␣less␣"raw"␣than␣this␣function␣returns,␣or␣to␣get␣the␣values␣for
any␣property,␣not␣just␣the␣few␣covered␣by␣this␣function,␣use␣the
L</charprop()>␣function.

The␣keys␣in␣the␣hash␣with␣the␣meanings␣of␣their␣values␣are:

=over

=item␣B<code>

the␣input␣native␣L</code␣point␣argument>␣expressed␣in␣hexadecimal,␣with
leading␣zeros
added␣if␣necessary␣to␣make␣it␣contain␣at␣least␣four␣hexdigits

=item␣B<name>

name␣of␣I<code>,␣all␣IN␣UPPER␣CASE.
Some␣control-type␣code␣points␣do␣not␣have␣names.
This␣field␣will␣be␣empty␣for␣C<Surrogate>␣and␣C<Private␣Use>␣code␣points,
and␣for␣the␣others␣without␣a␣name,
it␣will␣contain␣a␣description␣enclosed␣in␣angle␣brackets,␣like
C<E<lt>controlE<gt>>.


=item␣B<category>

The␣short␣name␣of␣the␣general␣category␣of␣I<code>.
This␣will␣match␣one␣of␣the␣keys␣in␣the␣hash␣returned␣by␣L</general_categories()>.

The␣L</prop_value_aliases()>␣function␣can␣be␣used␣to␣get␣all␣the␣synonyms
of␣the␣category␣name.

=item␣B<combining>

the␣combining␣class␣number␣for␣I<code>␣used␣in␣the␣Canonical␣Ordering␣Algorithm.
For␣Unicode␣5.1,␣this␣is␣described␣in␣Section␣3.11␣C<Canonical␣Ordering␣Behavior>
available␣at
L<http://www.unicode.org/versions/Unicode5.1.0/>

The␣L</prop_value_aliases()>␣function␣can␣be␣used␣to␣get␣all␣the␣synonyms
of␣the␣combining␣class␣number.

=item␣B<bidi>

bidirectional␣type␣of␣I<code>.
This␣will␣match␣one␣of␣the␣keys␣in␣the␣hash␣returned␣by␣L</bidi_types()>.

The␣L</prop_value_aliases()>␣function␣can␣be␣used␣to␣get␣all␣the␣synonyms
of␣the␣bidi␣type␣name.

=item␣B<decomposition>

is␣empty␣if␣I<code>␣has␣no␣decomposition;␣or␣is␣one␣or␣more␣codes
(separated␣by␣spaces)␣that,␣taken␣in␣order,␣represent␣a␣decomposition␣for
I<code>.␣␣Each␣has␣at␣least␣four␣hexdigits.
The␣codes␣may␣be␣preceded␣by␣a␣word␣enclosed␣in␣angle␣brackets,␣then␣a␣space,
like␣C<E<lt>compatE<gt>␣>,␣giving␣the␣type␣of␣decomposition

This␣decomposition␣may␣be␣an␣intermediate␣one␣whose␣components␣are␣also
decomposable.␣␣Use␣L<Unicode::Normalize>␣to␣get␣the␣final␣decomposition␣in␣one
step.

=item␣B<decimal>

if␣I<code>␣represents␣a␣decimal␣digit␣this␣is␣its␣integer␣numeric␣value

=item␣B<digit>

if␣I<code>␣represents␣some␣other␣digit-like␣number,␣this␣is␣its␣integer
numeric␣value

=item␣B<numeric>

if␣I<code>␣represents␣a␣whole␣or␣rational␣number,␣this␣is␣its␣numeric␣value.
Rational␣values␣are␣expressed␣as␣a␣string␣like␣C<1/4>.

=item␣B<mirrored>

C<Y>␣or␣C<N>␣designating␣if␣I<code>␣is␣mirrored␣in␣bidirectional␣text

=item␣B<unicode10>

name␣of␣I<code>␣in␣the␣Unicode␣1.0␣standard␣if␣one
existed␣for␣this␣code␣point␣and␣is␣different␣from␣the␣current␣name

=item␣B<comment>

As␣of␣Unicode␣6.0,␣this␣is␣always␣empty.

=item␣B<upper>

is,␣if␣non-empty,␣the␣uppercase␣mapping␣for␣I<code>␣expressed␣as␣at␣least␣four
hexdigits.␣␣This␣indicates␣that␣the␣full␣uppercase␣mapping␣is␣a␣single
character,␣and␣is␣identical␣to␣the␣simple␣(single-character␣only)␣mapping.
When␣this␣field␣is␣empty,␣it␣means␣that␣the␣simple␣uppercase␣mapping␣is
I<code>␣itself;␣you'll␣need␣some␣other␣means,␣(like␣L</charprop()>␣or
L</casespec()>␣to␣get␣the␣full␣mapping.

=item␣B<lower>

is,␣if␣non-empty,␣the␣lowercase␣mapping␣for␣I<code>␣expressed␣as␣at␣least␣four
hexdigits.␣␣This␣indicates␣that␣the␣full␣lowercase␣mapping␣is␣a␣single
character,␣and␣is␣identical␣to␣the␣simple␣(single-character␣only)␣mapping.
When␣this␣field␣is␣empty,␣it␣means␣that␣the␣simple␣lowercase␣mapping␣is
I<code>␣itself;␣you'll␣need␣some␣other␣means,␣(like␣L</charprop()>␣or
L</casespec()>␣to␣get␣the␣full␣mapping.

=item␣B<title>

is,␣if␣non-empty,␣the␣titlecase␣mapping␣for␣I<code>␣expressed␣as␣at␣least␣four
hexdigits.␣␣This␣indicates␣that␣the␣full␣titlecase␣mapping␣is␣a␣single
character,␣and␣is␣identical␣to␣the␣simple␣(single-character␣only)␣mapping.
When␣this␣field␣is␣empty,␣it␣means␣that␣the␣simple␣titlecase␣mapping␣is
I<code>␣itself;␣you'll␣need␣some␣other␣means,␣(like␣L</charprop()>␣or
L</casespec()>␣to␣get␣the␣full␣mapping.

=item␣B<BLOCK_>

the␣block␣I<code>␣belongs␣to␣(used␣in␣C<\p{Blk=...}>).
The␣L</prop_value_aliases()>␣function␣can␣be␣used␣to␣get␣all␣the␣synonyms
of␣the␣block␣name.

See␣L</Blocks␣versus␣Scripts>.

=item␣B<script>

the␣script␣I<code>␣belongs␣to.
The␣L</prop_value_aliases()>␣function␣can␣be␣used␣to␣get␣all␣the␣synonyms
of␣the␣script␣name.␣␣Note␣that␣this␣is␣the␣older␣"Script"␣property␣value,␣and
not␣the␣improved␣"Script_Extensions"␣value.

See␣L</Blocks␣versus␣Scripts>.

=back

Note␣that␣you␣cannot␣do␣(de)composition␣and␣casing␣based␣solely␣on␣the
I<decomposition>,␣I<combining>,␣I<lower>,␣I<upper>,␣and␣I<title>␣fields;␣you
will␣need␣also␣the␣L</casespec()>␣function␣and␣the␣C<Composition_Exclusion>
property.␣␣(Or␣you␣could␣just␣use␣the␣L<lc()|perlfunc/lc>,
L<uc()|perlfunc/uc>,␣and␣L<ucfirst()|perlfunc/ucfirst>␣functions,␣and␣the
L<Unicode::Normalize>␣module.)

=cut
----------
Range: (1917425,1920091) (2666)
}

=head2␣B<charprop()>

␣␣␣␣use␣Unicode::UCD␣'charprop';

␣␣␣␣print␣charprop(0x41,␣"Gc"),␣"\n";
␣␣␣␣print␣charprop(0x61,␣"General_Category"),␣"\n";

␣␣prints
␣␣␣␣Lu
␣␣␣␣Ll

This␣returns␣the␣value␣of␣the␣Unicode␣property␣given␣by␣the␣second␣parameter
for␣the␣␣L</code␣point␣argument>␣given␣by␣the␣first.

The␣passed-in␣property␣may␣be␣specified␣as␣any␣of␣the␣synonyms␣returned␣by
L</prop_aliases()>.

The␣return␣value␣is␣always␣a␣scalar,␣either␣a␣string␣or␣a␣number.␣␣For
properties␣where␣there␣are␣synonyms␣for␣the␣values,␣the␣synonym␣returned␣by
this␣function␣is␣the␣longest,␣most␣descriptive␣form,␣the␣one␣returned␣by
L</prop_value_aliases()>␣when␣called␣in␣a␣scalar␣context.␣␣Of␣course,␣you␣can
call␣L</prop_value_aliases()>␣on␣the␣result␣to␣get␣other␣synonyms.

The␣return␣values␣are␣more␣"cooked"␣than␣the␣L</charinfo()>␣ones.␣␣For
example,␣the␣C<"uc">␣property␣value␣is␣the␣actual␣string␣containing␣the␣full
uppercase␣mapping␣of␣the␣input␣code␣point.␣␣You␣have␣to␣go␣to␣extra␣trouble
with␣C<charinfo>␣to␣get␣this␣value␣from␣its␣C<upper>␣hash␣element␣when␣the
full␣mapping␣differs␣from␣the␣simple␣one.

Special␣note␣should␣be␣made␣of␣the␣return␣values␣for␣a␣few␣properties:

=over

=item␣Block

The␣value␣returned␣is␣the␣new-style␣(see␣L</Old-style␣versus␣new-style␣block
names>).

=item␣Decomposition_Mapping

Like␣L</charinfo()>,␣the␣result␣may␣be␣an␣intermediate␣decomposition␣whose
components␣are␣also␣decomposable.␣␣Use␣L<Unicode::Normalize>␣to␣get␣the␣final
decomposition␣in␣one␣step.

Unlike␣L</charinfo()>,␣this␣does␣not␣include␣the␣decomposition␣type.␣␣Use␣the
C<Decomposition_Type>␣property␣to␣get␣that.

=item␣Name_Alias

If␣the␣input␣code␣point's␣name␣has␣more␣than␣one␣synonym,␣they␣are␣returned
joined␣into␣a␣single␣comma-separated␣string.

=item␣Numeric_Value

If␣the␣result␣is␣a␣fraction,␣it␣is␣converted␣into␣a␣floating␣point␣number␣to
the␣accuracy␣of␣your␣platform.

=item␣Script_Extensions

If␣the␣result␣is␣multiple␣script␣names,␣they␣are␣returned␣joined␣into␣a␣single
comma-separated␣string.

=back

When␣called␣with␣a␣property␣that␣is␣a␣Perl␣extension␣that␣isn't␣expressible␣in
a␣compound␣form,␣this␣function␣currently␣returns␣C<undef>,␣as␣the␣only␣two
possible␣values␣are␣I<true>␣or␣I<false>␣(1␣or␣0␣I␣suppose).␣␣This␣behavior␣may
change␣in␣the␣future,␣so␣don't␣write␣code␣that␣relies␣on␣it.␣␣C<Present_In>␣is
a␣Perl␣extension␣that␣is␣expressible␣in␣a␣bipartite␣or␣compound␣form␣(for
example,␣C<\p{Present_In=4.0}>),␣so␣C<charprop>␣accepts␣it.␣␣But␣C<Any>␣is␣a
Perl␣extension␣that␣isn't␣expressible␣that␣way,␣so␣C<charprop>␣returns
C<undef>␣for␣it.␣␣Also␣C<charprop>␣returns␣C<undef>␣for␣all␣Perl␣extensions
that␣are␣internal-only.

=cut
----------
Range: (1924489,1926201) (1712)
}

=head2␣B<charblock()>

␣␣␣␣use␣Unicode::UCD␣'charblock';

␣␣␣␣my␣$charblock␣=␣charblock(0x41);
␣␣␣␣my␣$charblock␣=␣charblock(1234);
␣␣␣␣my␣$charblock␣=␣charblock(0x263a);
␣␣␣␣my␣$charblock␣=␣charblock("U+263a");

␣␣␣␣my␣$range␣␣␣␣␣=␣charblock('Armenian');

With␣a␣L</code␣point␣argument>␣C<charblock()>␣returns␣the␣I<BLOCK_>␣the␣code␣point
belongs␣to,␣e.g.␣␣C<Basic␣Latin>.␣␣The␣old-style␣block␣name␣is␣returned␣(see
L</Old-style␣versus␣new-style␣block␣names>).
The␣L</prop_value_aliases()>␣function␣can␣be␣used␣to␣get␣all␣the␣synonyms
of␣the␣block␣name.

If␣the␣code␣point␣is␣unassigned,␣this␣returns␣the␣block␣it␣would␣belong␣to␣if
it␣were␣assigned.␣␣(If␣the␣Unicode␣version␣being␣used␣is␣so␣early␣as␣to␣not
have␣blocks,␣all␣code␣points␣are␣considered␣to␣be␣in␣C<No_Block>.)

See␣also␣L</Blocks␣versus␣Scripts>.

If␣supplied␣with␣an␣argument␣that␣can't␣be␣a␣code␣point,␣C<charblock()>␣tries␣to
do␣the␣opposite␣and␣interpret␣the␣argument␣as␣an␣old-style␣block␣name.␣␣On␣an
ASCII␣platform,␣the␣return␣value␣is␣a␣I<range␣set>␣with␣one␣range:␣an
anonymous␣array␣with␣a␣single␣element␣that␣consists␣of␣another␣anonymous␣array
whose␣first␣element␣is␣the␣first␣code␣point␣in␣the␣block,␣and␣whose␣second
element␣is␣the␣final␣code␣point␣in␣the␣block.␣␣On␣an␣EBCDIC
platform,␣the␣first␣two␣Unicode␣blocks␣are␣not␣contiguous.␣␣Their␣range␣sets
are␣lists␣containing␣I<start-of-range>,␣I<end-of-range>␣code␣point␣pairs.␣␣You
can␣test␣whether␣a␣code␣point␣is␣in␣a␣range␣set␣using␣the␣L</charinrange()>
function.␣␣(To␣be␣precise,␣each␣I<range␣set>␣contains␣a␣third␣array␣element,
after␣the␣range␣boundary␣ones:␣the␣old_style␣block␣name.)

If␣the␣argument␣to␣C<charblock()>␣is␣not␣a␣known␣block,␣C<undef>␣is
returned.

=cut
----------
Range: (1936834,1938606) (1772)
}

=head2␣B<compexcl()>

WARNING:␣Unicode␣discourages␣the␣use␣of␣this␣function␣or␣any␣of␣the
alternative␣mechanisms␣listed␣in␣this␣section␣(the␣documentation␣of
C<compexcl()>),␣except␣internally␣in␣implementations␣of␣the␣Unicode
Normalization␣Algorithm.␣␣You␣should␣be␣using␣L<Unicode::Normalize>␣directly
instead␣of␣these.␣␣Using␣these␣will␣likely␣lead␣to␣half-baked␣results.

␣␣␣␣use␣Unicode::UCD␣'compexcl';

␣␣␣␣my␣$compexcl␣=␣compexcl(0x09dc);

This␣routine␣returns␣C<undef>␣if␣the␣Unicode␣version␣being␣used␣is␣so␣early
that␣it␣doesn't␣have␣this␣property.

C<compexcl()>␣is␣included␣for␣backwards
compatibility,␣but␣as␣of␣Perl␣5.12␣and␣more␣modern␣Unicode␣versions,␣for
most␣purposes␣it␣is␣probably␣more␣convenient␣to␣use␣one␣of␣the␣following
instead:

␣␣␣␣my␣$compexcl␣=␣chr(0x09dc)␣=~␣/\p{Comp_Ex};
␣␣␣␣my␣$compexcl␣=␣chr(0x09dc)␣=~␣/\p{Full_Composition_Exclusion};

or␣even

␣␣␣␣my␣$compexcl␣=␣chr(0x09dc)␣=~␣/\p{CE};
␣␣␣␣my␣$compexcl␣=␣chr(0x09dc)␣=~␣/\p{Composition_Exclusion};

The␣first␣two␣forms␣return␣B<true>␣if␣the␣L</code␣point␣argument>␣should␣not
be␣produced␣by␣composition␣normalization.␣␣For␣the␣final␣two␣forms␣to␣return
B<true>,␣it␣is␣additionally␣required␣that␣this␣fact␣not␣otherwise␣be
determinable␣from␣the␣Unicode␣data␣base.

This␣routine␣behaves␣identically␣to␣the␣final␣two␣forms.␣␣That␣is,
it␣does␣not␣return␣B<true>␣if␣the␣code␣point␣has␣a␣decomposition
consisting␣of␣another␣single␣code␣point,␣nor␣if␣its␣decomposition␣starts
with␣a␣code␣point␣whose␣combining␣class␣is␣non-zero.␣␣Code␣points␣that␣meet
either␣of␣these␣conditions␣should␣also␣not␣be␣produced␣by␣composition
normalization,␣which␣is␣probably␣why␣you␣should␣use␣the
C<Full_Composition_Exclusion>␣property␣instead,␣as␣shown␣above.

The␣routine␣returns␣B<false>␣otherwise.

=cut
----------
Range: (1939100,1943883) (4783)
$Composition_Exclusion_re
}

=head2␣B<casefold()>

␣␣␣␣use␣Unicode::UCD␣'casefold';

␣␣␣␣my␣$casefold␣=␣casefold(0xDF);
␣␣␣␣if␣(defined␣$casefold)␣{
␣␣␣␣␣␣␣␣my␣@full_fold_hex␣=␣split␣/␣/,␣$casefold->{'full'};
␣␣␣␣␣␣␣␣my␣$full_fold_string␣=
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣join␣"",␣map␣{chr(hex($_))}␣@full_fold_hex;
␣␣␣␣␣␣␣␣my␣@turkic_fold_hex␣=
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣split␣/␣/,␣($casefold->{'turkic'}␣ne␣"")
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣?␣$casefold->{'turkic'}
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣:␣$casefold->{'full'};
␣␣␣␣␣␣␣␣my␣$turkic_fold_string␣=
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣join␣"",␣map␣{chr(hex($_))}␣@turkic_fold_hex;
␣␣␣␣}
␣␣␣␣if␣(defined␣$casefold␣&&␣$casefold->{'simple'}␣ne␣"")␣{
␣␣␣␣␣␣␣␣my␣$simple_fold_hex␣=␣$casefold->{'simple'};
␣␣␣␣␣␣␣␣my␣$simple_fold_string␣=␣chr(hex($simple_fold_hex));
␣␣␣␣}

This␣returns␣the␣(almost)␣locale-independent␣case␣folding␣of␣the
character␣specified␣by␣the␣L</code␣point␣argument>.␣␣(Starting␣in␣Perl␣v5.16,
the␣core␣function␣C<fc()>␣returns␣the␣C<full>␣mapping␣(described␣below)
faster␣than␣this␣does,␣and␣for␣entire␣strings.)

If␣there␣is␣no␣case␣folding␣for␣the␣input␣code␣point,␣C<undef>␣is␣returned.

If␣there␣is␣a␣case␣folding␣for␣that␣code␣point,␣a␣reference␣to␣a␣hash
with␣the␣following␣fields␣is␣returned:

=over

=item␣B<code>

the␣input␣native␣L</code␣point␣argument>␣expressed␣in␣hexadecimal,␣with
leading␣zeros
added␣if␣necessary␣to␣make␣it␣contain␣at␣least␣four␣hexdigits

=item␣B<full>

one␣or␣more␣codes␣(separated␣by␣spaces)␣that,␣taken␣in␣order,␣give␣the
code␣points␣for␣the␣case␣folding␣for␣I<code>.
Each␣has␣at␣least␣four␣hexdigits.

=item␣B<simple>

is␣empty,␣or␣is␣exactly␣one␣code␣with␣at␣least␣four␣hexdigits␣which␣can␣be␣used
as␣an␣alternative␣case␣folding␣when␣the␣calling␣program␣cannot␣cope␣with␣the
fold␣being␣a␣sequence␣of␣multiple␣code␣points.␣␣If␣I<full>␣is␣just␣one␣code
point,␣then␣I<simple>␣equals␣I<full>.␣␣If␣there␣is␣no␣single␣code␣point␣folding
defined␣for␣I<code>,␣then␣I<simple>␣is␣the␣empty␣string.␣␣Otherwise,␣it␣is␣an
inferior,␣but␣still␣better-than-nothing␣alternative␣folding␣to␣I<full>.

=item␣B<mapping>

is␣the␣same␣as␣I<simple>␣if␣I<simple>␣is␣not␣empty,␣and␣it␣is␣the␣same␣as␣I<full>
otherwise.␣␣It␣can␣be␣considered␣to␣be␣the␣simplest␣possible␣folding␣for
I<code>.␣␣It␣is␣defined␣primarily␣for␣backwards␣compatibility.

=item␣B<status>

is␣C<C>␣(for␣C<common>)␣if␣the␣best␣possible␣fold␣is␣a␣single␣code␣point
(I<simple>␣equals␣I<full>␣equals␣I<mapping>).␣␣It␣is␣C<S>␣if␣there␣are␣distinct
folds,␣I<simple>␣and␣I<full>␣(I<mapping>␣equals␣I<simple>).␣␣And␣it␣is␣C<F>␣if
there␣is␣only␣a␣I<full>␣fold␣(I<mapping>␣equals␣I<full>;␣I<simple>␣is␣empty).
Note␣that␣this
describes␣the␣contents␣of␣I<mapping>.␣␣It␣is␣defined␣primarily␣for␣backwards
compatibility.

For␣Unicode␣versions␣between␣3.1␣and␣3.1.1␣inclusive,␣I<status>␣can␣also␣be
C<I>␣which␣is␣the␣same␣as␣C<C>␣but␣is␣a␣special␣case␣for␣dotted␣uppercase␣I␣and
dotless␣lowercase␣i:

=over

=item␣Z<>B<*>␣If␣you␣use␣this␣C<I>␣mapping

the␣result␣is␣case-insensitive,
but␣dotless␣and␣dotted␣I's␣are␣not␣distinguished

=item␣Z<>B<*>␣If␣you␣exclude␣this␣C<I>␣mapping

the␣result␣is␣not␣fully␣case-insensitive,␣but
dotless␣and␣dotted␣I's␣are␣distinguished

=back

=item␣B<turkic>

contains␣any␣special␣folding␣for␣Turkic␣languages.␣␣For␣versions␣of␣Unicode
starting␣with␣3.2,␣this␣field␣is␣empty␣unless␣I<code>␣has␣a␣different␣folding
in␣Turkic␣languages,␣in␣which␣case␣it␣is␣one␣or␣more␣codes␣(separated␣by
spaces)␣that,␣taken␣in␣order,␣give␣the␣code␣points␣for␣the␣case␣folding␣for
I<code>␣in␣those␣languages.
Each␣code␣has␣at␣least␣four␣hexdigits.
Note␣that␣this␣folding␣does␣not␣maintain␣canonical␣equivalence␣without
additional␣processing.

For␣Unicode␣versions␣between␣3.1␣and␣3.1.1␣inclusive,␣this␣field␣is␣empty␣unless
there␣is␣a
special␣folding␣for␣Turkic␣languages,␣in␣which␣case␣I<status>␣is␣C<I>,␣and
I<mapping>,␣I<full>,␣I<simple>,␣and␣I<turkic>␣are␣all␣equal.

=back

Programs␣that␣want␣complete␣generality␣and␣the␣best␣folding␣results␣should␣use
the␣folding␣contained␣in␣the␣I<full>␣field.␣␣But␣note␣that␣the␣fold␣for␣some
code␣points␣will␣be␣a␣sequence␣of␣multiple␣code␣points.

Programs␣that␣can't␣cope␣with␣the␣fold␣mapping␣being␣multiple␣code␣points␣can
use␣the␣folding␣contained␣in␣the␣I<simple>␣field,␣with␣the␣loss␣of␣some
generality.␣␣In␣Unicode␣5.1,␣about␣7%␣of␣the␣defined␣foldings␣have␣no␣single
code␣point␣folding.

The␣I<mapping>␣and␣I<status>␣fields␣are␣provided␣for␣backwards␣compatibility␣for
existing␣programs.␣␣They␣contain␣the␣same␣values␣as␣in␣previous␣versions␣of
this␣function.

Locale␣is␣not␣completely␣independent.␣␣The␣I<turkic>␣field␣contains␣results␣to
use␣when␣the␣locale␣is␣a␣Turkic␣language.

For␣more␣information␣about␣case␣mappings␣see
L<http://www.unicode.org/unicode/reports/tr21>

=cut
----------
Range: (1947903,1949739) (1836)
}

=head2␣B<all_casefolds()>


␣␣␣␣use␣Unicode::UCD␣'all_casefolds';

␣␣␣␣my␣$all_folds_ref␣=␣all_casefolds();
␣␣␣␣foreach␣my␣$char_with_casefold␣(sort␣{␣$a␣<=>␣$b␣}
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣keys␣%$all_folds_ref)
␣␣␣␣{
␣␣␣␣␣␣␣␣printf␣"%04X:",␣$char_with_casefold;
␣␣␣␣␣␣␣␣my␣$casefold␣=␣$all_folds_ref->{$char_with_casefold};

␣␣␣␣␣␣␣␣#␣Get␣folds␣for␣$char_with_casefold

␣␣␣␣␣␣␣␣my␣@full_fold_hex␣=␣split␣/␣/,␣$casefold->{'full'};
␣␣␣␣␣␣␣␣my␣$full_fold_string␣=
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣join␣"",␣map␣{chr(hex($_))}␣@full_fold_hex;
␣␣␣␣␣␣␣␣print␣"␣full=",␣join␣"␣",␣@full_fold_hex;
␣␣␣␣␣␣␣␣my␣@turkic_fold_hex␣=
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣split␣/␣/,␣($casefold->{'turkic'}␣ne␣"")
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣?␣$casefold->{'turkic'}
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣:␣$casefold->{'full'};
␣␣␣␣␣␣␣␣my␣$turkic_fold_string␣=
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣join␣"",␣map␣{chr(hex($_))}␣@turkic_fold_hex;
␣␣␣␣␣␣␣␣print␣";␣turkic=",␣join␣"␣",␣@turkic_fold_hex;
␣␣␣␣␣␣␣␣if␣(defined␣$casefold␣&&␣$casefold->{'simple'}␣ne␣"")␣{
␣␣␣␣␣␣␣␣␣␣␣␣my␣$simple_fold_hex␣=␣$casefold->{'simple'};
␣␣␣␣␣␣␣␣␣␣␣␣my␣$simple_fold_string␣=␣chr(hex($simple_fold_hex));
␣␣␣␣␣␣␣␣␣␣␣␣print␣";␣simple=$simple_fold_hex";
␣␣␣␣␣␣␣␣}
␣␣␣␣␣␣␣␣print␣"\n";
␣␣␣␣}

This␣returns␣all␣the␣case␣foldings␣in␣the␣current␣version␣of␣Unicode␣in␣the
form␣of␣a␣reference␣to␣a␣hash.␣␣Each␣key␣to␣the␣hash␣is␣the␣decimal
representation␣of␣a␣Unicode␣character␣that␣has␣a␣casefold␣to␣other␣than
itself.␣␣The␣casefold␣of␣a␣semi-colon␣is␣itself,␣so␣it␣isn't␣in␣the␣hash;
likewise␣for␣a␣lowercase␣"a",␣but␣there␣is␣an␣entry␣for␣a␣capital␣"A".␣␣The
hash␣value␣for␣each␣key␣is␣another␣hash,␣identical␣to␣what␣is␣returned␣by
L</casefold()>␣if␣called␣with␣that␣code␣point␣as␣its␣argument.␣␣So␣the␣value
C<<␣all_casefolds()->{ord("A")}'␣>>␣is␣equivalent␣to␣C<casefold(ord("A"))>;

=cut
----------
Range: (1949829,1953592) (3763)
}

=head2␣B<casespec()>

␣␣␣␣use␣Unicode::UCD␣'casespec';

␣␣␣␣my␣$casespec␣=␣casespec(0xFB00);

This␣returns␣the␣potentially␣locale-dependent␣case␣mappings␣of␣the␣L</code␣point
argument>.␣␣The␣mappings␣may␣be␣longer␣than␣a␣single␣code␣point␣(which␣the␣basic
Unicode␣case␣mappings␣as␣returned␣by␣L</charinfo()>␣never␣are).

If␣there␣are␣no␣case␣mappings␣for␣the␣L</code␣point␣argument>,␣or␣if␣all␣three
possible␣mappings␣(I<lower>,␣I<title>␣and␣I<upper>)␣result␣in␣single␣code
points␣and␣are␣locale␣independent␣and␣unconditional,␣C<undef>␣is␣returned
(which␣means␣that␣the␣case␣mappings,␣if␣any,␣for␣the␣code␣point␣are␣those
returned␣by␣L</charinfo()>).

Otherwise,␣a␣reference␣to␣a␣hash␣giving␣the␣mappings␣(or␣a␣reference␣to␣a␣hash
of␣such␣hashes,␣explained␣below)␣is␣returned␣with␣the␣following␣keys␣and␣their
meanings:

The␣keys␣in␣the␣bottom␣layer␣hash␣with␣the␣meanings␣of␣their␣values␣are:

=over

=item␣B<code>

the␣input␣native␣L</code␣point␣argument>␣expressed␣in␣hexadecimal,␣with
leading␣zeros
added␣if␣necessary␣to␣make␣it␣contain␣at␣least␣four␣hexdigits

=item␣B<lower>

one␣or␣more␣codes␣(separated␣by␣spaces)␣that,␣taken␣in␣order,␣give␣the
code␣points␣for␣the␣lower␣case␣of␣I<code>.
Each␣has␣at␣least␣four␣hexdigits.

=item␣B<title>

one␣or␣more␣codes␣(separated␣by␣spaces)␣that,␣taken␣in␣order,␣give␣the
code␣points␣for␣the␣title␣case␣of␣I<code>.
Each␣has␣at␣least␣four␣hexdigits.

=item␣B<upper>

one␣or␣more␣codes␣(separated␣by␣spaces)␣that,␣taken␣in␣order,␣give␣the
code␣points␣for␣the␣upper␣case␣of␣I<code>.
Each␣has␣at␣least␣four␣hexdigits.

=item␣B<condition>

the␣conditions␣for␣the␣mappings␣to␣be␣valid.
If␣C<undef>,␣the␣mappings␣are␣always␣valid.
When␣defined,␣this␣field␣is␣a␣list␣of␣conditions,
all␣of␣which␣must␣be␣true␣for␣the␣mappings␣to␣be␣valid.
The␣list␣consists␣of␣one␣or␣more
I<locales>␣(see␣below)
and/or␣I<contexts>␣(explained␣in␣the␣next␣paragraph),
separated␣by␣spaces.
(Other␣than␣as␣used␣to␣separate␣elements,␣spaces␣are␣to␣be␣ignored.)
Case␣distinctions␣in␣the␣condition␣list␣are␣not␣significant.
Conditions␣preceded␣by␣"NON_"␣represent␣the␣negation␣of␣the␣condition.

A␣I<context>␣is␣one␣of␣those␣defined␣in␣the␣Unicode␣standard.
For␣Unicode␣5.1,␣they␣are␣defined␣in␣Section␣3.13␣C<Default␣Case␣Operations>
available␣at
L<http://www.unicode.org/versions/Unicode5.1.0/>.
These␣are␣for␣context-sensitive␣casing.

=back

The␣hash␣described␣above␣is␣returned␣for␣locale-independent␣casing,␣where
at␣least␣one␣of␣the␣mappings␣has␣length␣longer␣than␣one.␣␣If␣C<undef>␣is
returned,␣the␣code␣point␣may␣have␣mappings,␣but␣if␣so,␣all␣are␣length␣one,
and␣are␣returned␣by␣L</charinfo()>.
Note␣that␣when␣this␣function␣does␣return␣a␣value,␣it␣will␣be␣for␣the␣complete
set␣of␣mappings␣for␣a␣code␣point,␣even␣those␣whose␣length␣is␣one.

If␣there␣are␣additional␣casing␣rules␣that␣apply␣only␣in␣certain␣locales,
an␣additional␣key␣for␣each␣will␣be␣defined␣in␣the␣returned␣hash.␣␣Each␣such␣key
will␣be␣its␣locale␣name,␣defined␣as␣a␣2-letter␣ISO␣3166␣country␣code,␣possibly
followed␣by␣a␣"_"␣and␣a␣2-letter␣ISO␣language␣code␣(possibly␣followed␣by␣a␣"_"
and␣a␣variant␣code).␣␣You␣can␣find␣the␣lists␣of␣all␣possible␣locales,␣see
L<Locale::Country>␣and␣L<Locale::Language>.
(In␣Unicode␣6.0,␣the␣only␣locales␣returned␣by␣this␣function
are␣C<lt>,␣C<tr>,␣and␣C<az>.)

Each␣locale␣key␣is␣a␣reference␣to␣a␣hash␣that␣has␣the␣form␣above,␣and␣gives
the␣casing␣rules␣for␣that␣particular␣locale,␣which␣take␣precedence␣over␣the
locale-independent␣ones␣when␣in␣that␣locale.

If␣the␣only␣casing␣for␣a␣code␣point␣is␣locale-dependent,␣then␣the␣returned
hash␣will␣not␣have␣any␣of␣the␣base␣keys,␣like␣C<code>,␣C<upper>,␣etc.,␣but
will␣contain␣only␣locale␣keys.

For␣more␣information␣about␣case␣mappings␣see
L<http://www.unicode.org/unicode/reports/tr21/>

=cut
----------
Range: (1961629,1963410) (1781)
=pod

If␣the␣string␣is␣more␣than␣one␣character,␣C<undef>␣is␣returned␣unless
all␣its␣characters␣are␣decimal␣digits␣(that␣is,␣they␣would␣match␣C<\d+>),
from␣the␣same␣script.␣␣For␣example␣if␣you␣have␣an␣ASCII␣'0'␣and␣a␣Bengali
'3',␣mixed␣together,␣they␣aren't␣considered␣a␣valid␣number,␣and␣C<undef>
is␣returned.␣␣A␣further␣restriction␣is␣that␣the␣digits␣all␣have␣to␣be␣of
the␣same␣form.␣␣A␣half-width␣digit␣mixed␣with␣a␣full-width␣one␣will
return␣C<undef>.␣␣The␣Arabic␣script␣has␣two␣sets␣of␣digits;␣␣C<num>␣will
return␣C<undef>␣unless␣all␣the␣digits␣in␣the␣string␣come␣from␣the␣same
set.␣␣In␣all␣cases,␣the␣optional␣scalar␣ref␣parameter␣is␣set␣to␣how
long␣any␣valid␣initial␣substring␣of␣digits␣is;␣hence␣it␣will␣be␣set␣to␣the
entire␣string␣length␣if␣the␣main␣return␣value␣is␣not␣C<undef>.

C<num>␣errs␣on␣the␣side␣of␣safety,␣and␣there␣may␣be␣valid␣strings␣of
decimal␣digits␣that␣it␣doesn't␣recognize.␣␣Note␣that␣Unicode␣defines
a␣number␣of␣"digit"␣characters␣that␣aren't␣"decimal␣digit"␣characters.
"Decimal␣digits"␣have␣the␣property␣that␣they␣have␣a␣positional␣value,␣i.e.,
there␣is␣a␣units␣position,␣a␣10's␣position,␣a␣100's,␣etc,␣AND␣they␣are
arranged␣in␣Unicode␣in␣blocks␣of␣10␣contiguous␣code␣points.␣␣The␣Chinese
digits,␣for␣example,␣are␣not␣in␣such␣a␣contiguous␣block,␣and␣so␣Unicode
doesn't␣view␣them␣as␣decimal␣digits,␣but␣merely␣digits,␣and␣so␣C<\d>␣will␣not
match␣them.␣␣A␣single-character␣string␣containing␣one␣of␣these␣digits␣will
have␣its␣decimal␣value␣returned␣by␣C<num>,␣but␣any␣longer␣string␣containing
only␣these␣digits␣will␣return␣C<undef>.

Strings␣of␣multiple␣sub-␣and␣superscripts␣are␣not␣recognized␣as␣numbers.␣␣You
can␣use␣either␣of␣the␣compatibility␣decompositions␣in␣Unicode::Normalize␣to
change␣these␣into␣digits,␣and␣then␣call␣C<num>␣on␣the␣result.

=cut
----------
Range: (1966186,1970302) (4116)
}

=pod

=head2␣B<prop_aliases()>

␣␣␣␣use␣Unicode::UCD␣'prop_aliases';

␣␣␣␣my␣($short_name,␣$full_name,␣@other_names)␣=␣prop_aliases("space");
␣␣␣␣my␣$same_full_name␣=␣prop_aliases("Space");␣␣␣␣␣#␣Scalar␣context
␣␣␣␣my␣($same_short_name)␣=␣prop_aliases("Space");␣␣#␣gets␣0th␣element
␣␣␣␣print␣"The␣full␣name␣is␣$full_name\n";
␣␣␣␣print␣"The␣short␣name␣is␣$short_name\n";
␣␣␣␣print␣"The␣other␣aliases␣are:␣",␣join(",␣",␣@other_names),␣"\n";

␣␣␣␣prints:
␣␣␣␣The␣full␣name␣is␣White_Space
␣␣␣␣The␣short␣name␣is␣WSpace
␣␣␣␣The␣other␣aliases␣are:␣Space

Most␣Unicode␣properties␣have␣several␣synonymous␣names.␣␣Typically,␣there␣is␣at
least␣a␣short␣name,␣convenient␣to␣type,␣and␣a␣long␣name␣that␣more␣fully
describes␣the␣property,␣and␣hence␣is␣more␣easily␣understood.

If␣you␣know␣one␣name␣for␣a␣Unicode␣property,␣you␣can␣use␣C<prop_aliases>␣to␣find
either␣the␣long␣name␣(when␣called␣in␣scalar␣context),␣or␣a␣list␣of␣all␣of␣the
names,␣somewhat␣ordered␣so␣that␣the␣short␣name␣is␣in␣the␣0th␣element,␣the␣long
name␣in␣the␣next␣element,␣and␣any␣other␣synonyms␣are␣in␣the␣remaining
elements,␣in␣no␣particular␣order.

The␣long␣name␣is␣returned␣in␣a␣form␣nicely␣capitalized,␣suitable␣for␣printing.

The␣input␣parameter␣name␣is␣loosely␣matched,␣which␣means␣that␣white␣space,
hyphens,␣and␣underscores␣are␣ignored␣(except␣for␣the␣trailing␣underscore␣in
the␣old_form␣grandfathered-in␣C<"L_">,␣which␣is␣better␣written␣as␣C<"LC">,␣and
both␣of␣which␣mean␣C<General_Category=Cased␣Letter>).

If␣the␣name␣is␣unknown,␣C<undef>␣is␣returned␣(or␣an␣empty␣list␣in␣list
context).␣␣Note␣that␣Perl␣typically␣recognizes␣property␣names␣in␣regular
expressions␣with␣an␣optional␣C<"Is_>"␣(with␣or␣without␣the␣underscore)
prefixed␣to␣them,␣such␣as␣C<\p{isgc=punct}>.␣␣This␣function␣does␣not␣recognize
those␣in␣the␣input,␣returning␣C<undef>.␣␣Nor␣are␣they␣included␣in␣the␣output
as␣possible␣synonyms.

C<prop_aliases>␣does␣know␣about␣the␣Perl␣extensions␣to␣Unicode␣properties,
such␣as␣C<Any>␣and␣C<XPosixAlpha>,␣and␣the␣single␣form␣equivalents␣to␣Unicode
properties␣such␣as␣C<XDigit>,␣C<Greek>,␣C<In_Greek>,␣and␣C<Is_Greek>.␣␣The
final␣example␣demonstrates␣that␣the␣C<"Is_">␣prefix␣is␣recognized␣for␣these
extensions;␣it␣is␣needed␣to␣resolve␣ambiguities.␣␣For␣example,
C<prop_aliases('lc')>␣returns␣the␣list␣C<(lc,␣Lowercase_Mapping)>,␣but
C<prop_aliases('islc')>␣returns␣C<(Is_LC,␣Cased_Letter)>.␣␣This␣is
because␣C<islc>␣is␣a␣Perl␣extension␣which␣is␣short␣for
C<General_Category=Cased␣Letter>.␣␣The␣lists␣returned␣for␣the␣Perl␣extensions
will␣not␣include␣the␣C<"Is_">␣prefix␣(whether␣or␣not␣the␣input␣had␣it)␣unless
needed␣to␣resolve␣ambiguities,␣as␣shown␣in␣the␣C<"islc">␣example,␣where␣the
returned␣list␣had␣one␣element␣containing␣C<"Is_">,␣and␣the␣other␣without.

It␣is␣also␣possible␣for␣the␣reverse␣to␣happen:␣␣C<prop_aliases('isc')>␣returns
the␣list␣C<(isc,␣ISO_Comment)>;␣whereas␣C<prop_aliases('c')>␣returns
C<(C,␣Other)>␣(the␣latter␣being␣a␣Perl␣extension␣meaning
C<General_Category=Other>.
L<perluniprops/Properties␣accessible␣through␣Unicode::UCD>␣lists␣the␣available
forms,␣including␣which␣ones␣are␣discouraged␣from␣use.

Those␣discouraged␣forms␣are␣accepted␣as␣input␣to␣C<prop_aliases>,␣but␣are␣not
returned␣in␣the␣lists.␣␣C<prop_aliases('isL&')>␣and␣C<prop_aliases('isL_')>,
which␣are␣old␣synonyms␣for␣C<"Is_LC">␣and␣should␣not␣be␣used␣in␣new␣code,␣are
examples␣of␣this.␣␣These␣both␣return␣C<(Is_LC,␣Cased_Letter)>.␣␣Thus␣this
function␣allows␣you␣to␣take␣a␣discouraged␣form,␣and␣find␣its␣acceptable
alternatives.␣␣The␣same␣goes␣with␣single-form␣Block␣property␣equivalences.
Only␣the␣forms␣that␣begin␣with␣C<"In_">␣are␣not␣discouraged;␣if␣you␣pass
C<prop_aliases>␣a␣discouraged␣form,␣you␣will␣get␣back␣the␣equivalent␣ones␣that
begin␣with␣C<"In_">.␣␣It␣will␣otherwise␣look␣like␣a␣new-style␣block␣name␣(see.
L</Old-style␣versus␣new-style␣block␣names>).

C<prop_aliases>␣does␣not␣know␣about␣any␣user-defined␣properties,␣and␣will
return␣C<undef>␣if␣called␣with␣one␣of␣those.␣␣Likewise␣for␣Perl␣internal
properties,␣with␣the␣exception␣of␣"Perl_Decimal_Digit"␣which␣it␣does␣know
about␣(and␣which␣is␣documented␣below␣in␣L</prop_invmap()>).

=cut
----------
Range: (1978027,1979589) (1562)
}

=pod

=head2␣B<prop_values()>

␣␣␣␣use␣Unicode::UCD␣'prop_values';

␣␣␣␣print␣"AHex␣values␣are:␣",␣join(",␣",␣prop_values("AHex")),
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣"\n";
␣␣prints:
␣␣␣␣AHex␣values␣are:␣N,␣Y

Some␣Unicode␣properties␣have␣a␣restricted␣set␣of␣legal␣values.␣␣For␣example,
all␣binary␣properties␣are␣restricted␣to␣just␣C<true>␣or␣C<false>;␣and␣there
are␣only␣a␣few␣dozen␣possible␣General␣Categories.␣␣Use␣C<prop_values>
to␣find␣out␣if␣a␣given␣property␣is␣one␣such,␣and␣if␣so,␣to␣get␣a␣list␣of␣the
values:

␣␣␣␣print␣join␣",␣",␣prop_values("NFC_Quick_Check");
␣␣prints:
␣␣␣␣M,␣N,␣Y

If␣the␣property␣doesn't␣have␣such␣a␣restricted␣set,␣C<undef>␣is␣returned.

There␣are␣usually␣several␣synonyms␣for␣each␣possible␣value.␣␣Use
L</prop_value_aliases()>␣to␣access␣those.

Case,␣white␣space,␣hyphens,␣and␣underscores␣are␣ignored␣in␣the␣input␣property
name␣(except␣for␣the␣trailing␣underscore␣in␣the␣old-form␣grandfathered-in
general␣category␣property␣value␣C<"L_">,␣which␣is␣better␣written␣as␣C<"LC">).

If␣the␣property␣name␣is␣unknown,␣C<undef>␣is␣returned.␣␣Note␣that␣Perl␣typically
recognizes␣property␣names␣in␣regular␣expressions␣with␣an␣optional␣C<"Is_>"
(with␣or␣without␣the␣underscore)␣prefixed␣to␣them,␣such␣as␣C<\p{isgc=punct}>.
This␣function␣does␣not␣recognize␣those␣in␣the␣property␣parameter,␣returning
C<undef>.

For␣the␣block␣property,␣new-style␣block␣names␣are␣returned␣(see
L</Old-style␣versus␣new-style␣block␣names>).

C<prop_values>␣does␣not␣know␣about␣any␣user-defined␣properties,␣and
will␣return␣C<undef>␣if␣called␣with␣one␣of␣those.

=cut
----------
Range: (1980422,1983385) (2963)
}

=pod

=head2␣B<prop_value_aliases()>

␣␣␣␣use␣Unicode::UCD␣'prop_value_aliases';

␣␣␣␣my␣($short_name,␣$full_name,␣@other_names)
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣=␣prop_value_aliases("Gc",␣"Punct");
␣␣␣␣my␣$same_full_name␣=␣prop_value_aliases("Gc",␣"P");␣␣␣#␣Scalar␣cntxt
␣␣␣␣my␣($same_short_name)␣=␣prop_value_aliases("Gc",␣"P");␣#␣gets␣0th
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣element
␣␣␣␣print␣"The␣full␣name␣is␣$full_name\n";
␣␣␣␣print␣"The␣short␣name␣is␣$short_name\n";
␣␣␣␣print␣"The␣other␣aliases␣are:␣",␣join(",␣",␣@other_names),␣"\n";

␣␣prints:
␣␣␣␣The␣full␣name␣is␣Punctuation
␣␣␣␣The␣short␣name␣is␣P
␣␣␣␣The␣other␣aliases␣are:␣Punct

Some␣Unicode␣properties␣have␣a␣restricted␣set␣of␣legal␣values.␣␣For␣example,
all␣binary␣properties␣are␣restricted␣to␣just␣C<true>␣or␣C<false>;␣and␣there
are␣only␣a␣few␣dozen␣possible␣General␣Categories.

You␣can␣use␣L</prop_values()>␣to␣find␣out␣if␣a␣given␣property␣is␣one␣which␣has
a␣restricted␣set␣of␣values,␣and␣if␣so,␣what␣those␣values␣are.␣␣But␣usually
each␣value␣actually␣has␣several␣synonyms.␣␣For␣example,␣in␣Unicode␣binary
properties,␣I<truth>␣can␣be␣represented␣by␣any␣of␣the␣strings␣"Y",␣"Yes",␣"T",
or␣"True";␣and␣the␣General␣Category␣"Punctuation"␣by␣that␣string,␣or␣"Punct",
or␣simply␣"P".

Like␣property␣names,␣there␣is␣typically␣at␣least␣a␣short␣name␣for␣each␣such
property-value,␣and␣a␣long␣name.␣␣If␣you␣know␣any␣name␣of␣the␣property-value
(which␣you␣can␣get␣by␣L</prop_values()>,␣you␣can␣use␣C<prop_value_aliases>()
to␣get␣the␣long␣name␣(when␣called␣in␣scalar␣context),␣or␣a␣list␣of␣all␣the
names,␣with␣the␣short␣name␣in␣the␣0th␣element,␣the␣long␣name␣in␣the␣next
element,␣and␣any␣other␣synonyms␣in␣the␣remaining␣elements,␣in␣no␣particular
order,␣except␣that␣any␣all-numeric␣synonyms␣will␣be␣last.

The␣long␣name␣is␣returned␣in␣a␣form␣nicely␣capitalized,␣suitable␣for␣printing.

Case,␣white␣space,␣hyphens,␣and␣underscores␣are␣ignored␣in␣the␣input␣parameters
(except␣for␣the␣trailing␣underscore␣in␣the␣old-form␣grandfathered-in␣general
category␣property␣value␣C<"L_">,␣which␣is␣better␣written␣as␣C<"LC">).

If␣either␣name␣is␣unknown,␣C<undef>␣is␣returned.␣␣Note␣that␣Perl␣typically
recognizes␣property␣names␣in␣regular␣expressions␣with␣an␣optional␣C<"Is_>"
(with␣or␣without␣the␣underscore)␣prefixed␣to␣them,␣such␣as␣C<\p{isgc=punct}>.
This␣function␣does␣not␣recognize␣those␣in␣the␣property␣parameter,␣returning
C<undef>.

If␣called␣with␣a␣property␣that␣doesn't␣have␣synonyms␣for␣its␣values,␣it
returns␣the␣input␣value,␣possibly␣normalized␣with␣capitalization␣and
underscores,␣but␣not␣necessarily␣checking␣that␣the␣input␣value␣is␣valid.

For␣the␣block␣property,␣new-style␣block␣names␣are␣returned␣(see
L</Old-style␣versus␣new-style␣block␣names>).

To␣find␣the␣synonyms␣for␣single-forms,␣such␣as␣C<\p{Any}>,␣use
L</prop_aliases()>␣instead.

C<prop_value_aliases>␣does␣not␣know␣about␣any␣user-defined␣properties,␣and
will␣return␣C<undef>␣if␣called␣with␣one␣of␣those.

=cut
----------
Range: (1987177,1991303) (4126)
=pod

=head2␣B<prop_invlist()>

C<prop_invlist>␣returns␣an␣inversion␣list␣(described␣below)␣that␣defines␣all␣the
code␣points␣for␣the␣binary␣Unicode␣property␣(or␣"property=value"␣pair)␣given
by␣the␣input␣parameter␣string:

␣use␣feature␣'say';
␣use␣Unicode::UCD␣'prop_invlist';
␣say␣join␣",␣",␣prop_invlist("Any");

␣prints:
␣0,␣1114112

If␣the␣input␣is␣unknown␣C<undef>␣is␣returned␣in␣scalar␣context;␣an␣empty-list
in␣list␣context.␣␣If␣the␣input␣is␣known,␣the␣number␣of␣elements␣in
the␣list␣is␣returned␣if␣called␣in␣scalar␣context.

L<perluniprops|perluniprops/Properties␣accessible␣through␣\p{}␣and␣\P{}>␣gives
the␣list␣of␣properties␣that␣this␣function␣accepts,␣as␣well␣as␣all␣the␣possible
forms␣for␣them␣(including␣with␣the␣optional␣"Is_"␣prefixes).␣␣(Except␣this
function␣doesn't␣accept␣any␣Perl-internal␣properties,␣some␣of␣which␣are␣listed
there.)␣This␣function␣uses␣the␣same␣loose␣or␣tighter␣matching␣rules␣for
resolving␣the␣input␣property's␣name␣as␣is␣done␣for␣regular␣expressions.␣␣These
are␣also␣specified␣in␣L<perluniprops|perluniprops/Properties␣accessible
through␣\p{}␣and␣\P{}>.␣␣Examples␣of␣using␣the␣"property=value"␣form␣are:

␣say␣join␣",␣",␣prop_invlist("Script_Extensions=Shavian");

␣prints:
␣66640,␣66688

␣say␣join␣",␣",␣prop_invlist("ASCII_Hex_Digit=No");

␣prints:
␣0,␣48,␣58,␣65,␣71,␣97,␣103

␣say␣join␣",␣",␣prop_invlist("ASCII_Hex_Digit=Yes");

␣prints:
␣48,␣58,␣65,␣71,␣97,␣103

Inversion␣lists␣are␣a␣compact␣way␣of␣specifying␣Unicode␣property-value
definitions.␣␣The␣0th␣item␣in␣the␣list␣is␣the␣lowest␣code␣point␣that␣has␣the
property-value.␣␣The␣next␣item␣(item␣[1])␣is␣the␣lowest␣code␣point␣beyond␣that
one␣that␣does␣NOT␣have␣the␣property-value.␣␣And␣the␣next␣item␣beyond␣that
([2])␣is␣the␣lowest␣code␣point␣beyond␣that␣one␣that␣does␣have␣the
property-value,␣and␣so␣on.␣␣Put␣another␣way,␣each␣element␣in␣the␣list␣gives
the␣beginning␣of␣a␣range␣that␣has␣the␣property-value␣(for␣even␣numbered
elements),␣or␣doesn't␣have␣the␣property-value␣(for␣odd␣numbered␣elements).
The␣name␣for␣this␣data␣structure␣stems␣from␣the␣fact␣that␣each␣element␣in␣the
list␣toggles␣(or␣inverts)␣whether␣the␣corresponding␣range␣is␣or␣isn't␣on␣the
list.

In␣the␣final␣example␣above,␣the␣first␣ASCII␣Hex␣digit␣is␣code␣point␣48,␣the
character␣"0",␣and␣all␣code␣points␣from␣it␣through␣57␣(a␣"9")␣are␣ASCII␣hex
digits.␣␣Code␣points␣58␣through␣64␣aren't,␣but␣65␣(an␣"A")␣through␣70␣(an␣"F")
are,␣as␣are␣97␣("a")␣through␣102␣("f").␣␣103␣starts␣a␣range␣of␣code␣points
that␣aren't␣ASCII␣hex␣digits.␣␣That␣range␣extends␣to␣infinity,␣which␣on␣your
computer␣can␣be␣found␣in␣the␣variable␣C<$Unicode::UCD::MAX_CP>.␣␣(This
variable␣is␣as␣close␣to␣infinity␣as␣Perl␣can␣get␣on␣your␣platform,␣and␣may␣be
too␣high␣for␣some␣operations␣to␣work;␣you␣may␣wish␣to␣use␣a␣smaller␣number␣for
your␣purposes.)

Note␣that␣the␣inversion␣lists␣returned␣by␣this␣function␣can␣possibly␣include
non-Unicode␣code␣points,␣that␣is␣anything␣above␣0x10FFFF.␣␣Unicode␣properties
are␣not␣defined␣on␣such␣code␣points.␣␣You␣might␣wish␣to␣change␣the␣output␣to
not␣include␣these.␣␣Simply␣add␣0x110000␣at␣the␣end␣of␣the␣non-empty␣returned
list␣if␣it␣isn't␣already␣that␣value;␣and␣pop␣that␣value␣if␣it␣is;␣like:

␣my␣@list␣=␣prop_invlist("foo");
␣if␣(@list)␣{
␣␣␣␣␣if␣($list[-1]␣==␣0x110000)␣{
␣␣␣␣␣␣␣␣␣pop␣@list;␣␣#␣Defeat␣the␣turning␣on␣for␣above␣Unicode
␣␣␣␣␣}
␣␣␣␣␣else␣{
␣␣␣␣␣␣␣␣␣push␣@list,␣0x110000;␣#␣Turn␣off␣for␣above␣Unicode
␣␣␣␣␣}
␣}

It␣is␣a␣simple␣matter␣to␣expand␣out␣an␣inversion␣list␣to␣a␣full␣list␣of␣all
code␣points␣that␣have␣the␣property-value:

␣my␣@invlist␣=␣prop_invlist($property_name);
␣die␣"empty"␣unless␣@invlist;
␣my␣@full_list;
␣for␣(my␣$i␣=␣0;␣$i␣<␣@invlist;␣$i␣+=␣2)␣{
␣␣␣␣my␣$upper␣=␣($i␣+␣1)␣<␣@invlist
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣?␣$invlist[$i+1]␣-␣1␣␣␣␣␣␣#␣In␣range
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣:␣$Unicode::UCD::MAX_CP;␣␣#␣To␣infinity.
␣␣␣␣for␣my␣$j␣($invlist[$i]␣..␣$upper)␣{
␣␣␣␣␣␣␣␣push␣@full_list,␣$j;
␣␣␣␣}
␣}

C<prop_invlist>␣does␣not␣know␣about␣any␣user-defined␣nor␣Perl␣internal-only
properties,␣and␣will␣return␣C<undef>␣if␣called␣with␣one␣of␣those.

The␣L</search_invlist()>␣function␣is␣provided␣for␣finding␣a␣code␣point␣within
an␣inversion␣list.

=cut
----------
Range: (1994863,2016207) (21344)
}

=pod

=head2␣B<prop_invmap()>

␣use␣Unicode::UCD␣'prop_invmap';
␣my␣($list_ref,␣$map_ref,␣$format,␣$default)
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣=␣prop_invmap("General␣Category");

C<prop_invmap>␣is␣used␣to␣get␣the␣complete␣mapping␣definition␣for␣a␣property,
in␣the␣form␣of␣an␣inversion␣map.␣␣An␣inversion␣map␣consists␣of␣two␣parallel
arrays.␣␣One␣is␣an␣ordered␣list␣of␣code␣points␣that␣mark␣range␣beginnings,␣and
the␣other␣gives␣the␣value␣(or␣mapping)␣that␣all␣code␣points␣in␣the
corresponding␣range␣have.

C<prop_invmap>␣is␣called␣with␣the␣name␣of␣the␣desired␣property.␣␣The␣name␣is
loosely␣matched,␣meaning␣that␣differences␣in␣case,␣white-space,␣hyphens,␣and
underscores␣are␣not␣meaningful␣(except␣for␣the␣trailing␣underscore␣in␣the
old-form␣grandfathered-in␣property␣C<"L_">,␣which␣is␣better␣written␣as␣C<"LC">,
or␣even␣better,␣C<"Gc=LC">).

Many␣Unicode␣properties␣have␣more␣than␣one␣name␣(or␣alias).␣␣C<prop_invmap>
understands␣all␣of␣these,␣including␣Perl␣extensions␣to␣them.␣␣Ambiguities␣are
resolved␣as␣described␣above␣for␣L</prop_aliases()>␣(except␣if␣a␣property␣has
both␣a␣complete␣mapping,␣and␣a␣binary␣C<Y>/C<N>␣mapping,␣then␣specifying␣the
property␣name␣prefixed␣by␣C<"is">␣causes␣the␣binary␣one␣to␣be␣returned).␣␣The
Perl␣internal␣property␣"Perl_Decimal_Digit,␣described␣below,␣is␣also␣accepted.
An␣empty␣list␣is␣returned␣if␣the␣property␣name␣is␣unknown.
See␣L<perluniprops/Properties␣accessible␣through␣Unicode::UCD>␣for␣the
properties␣acceptable␣as␣inputs␣to␣this␣function.

It␣is␣a␣fatal␣error␣to␣call␣this␣function␣except␣in␣list␣context.

In␣addition␣to␣the␣two␣arrays␣that␣form␣the␣inversion␣map,␣C<prop_invmap>
returns␣two␣other␣values;␣one␣is␣a␣scalar␣that␣gives␣some␣details␣as␣to␣the
format␣of␣the␣entries␣of␣the␣map␣array;␣the␣other␣is␣a␣default␣value,␣useful
in␣maps␣whose␣format␣name␣begins␣with␣the␣letter␣C<"a">,␣as␣described
L<below␣in␣its␣subsection|/a>;␣and␣for␣specialized␣purposes,␣such␣as
converting␣to␣another␣data␣structure,␣described␣at␣the␣end␣of␣this␣main
section.

This␣means␣that␣C<prop_invmap>␣returns␣a␣4␣element␣list.␣␣For␣example,

␣my␣($blocks_ranges_ref,␣$blocks_maps_ref,␣$format,␣$default)
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣=␣prop_invmap("Block");

In␣this␣call,␣the␣two␣arrays␣will␣be␣populated␣as␣shown␣below␣(for␣Unicode
6.0):

␣Index␣␣@blocks_ranges␣␣@blocks_maps
␣␣␣0␣␣␣␣␣␣␣␣0x0000␣␣␣␣␣␣Basic␣Latin
␣␣␣1␣␣␣␣␣␣␣␣0x0080␣␣␣␣␣␣Latin-1␣Supplement
␣␣␣2␣␣␣␣␣␣␣␣0x0100␣␣␣␣␣␣Latin␣Extended-A
␣␣␣3␣␣␣␣␣␣␣␣0x0180␣␣␣␣␣␣Latin␣Extended-B
␣␣␣4␣␣␣␣␣␣␣␣0x0250␣␣␣␣␣␣IPA␣Extensions
␣␣␣5␣␣␣␣␣␣␣␣0x02B0␣␣␣␣␣␣Spacing␣Modifier␣Letters
␣␣␣6␣␣␣␣␣␣␣␣0x0300␣␣␣␣␣␣Combining␣Diacritical␣Marks
␣␣␣7␣␣␣␣␣␣␣␣0x0370␣␣␣␣␣␣Greek␣and␣Coptic
␣␣␣8␣␣␣␣␣␣␣␣0x0400␣␣␣␣␣␣Cyrillic
␣␣...
␣233␣␣␣␣␣␣␣␣0x2B820␣␣␣␣␣No_Block
␣234␣␣␣␣␣␣␣␣0x2F800␣␣␣␣␣CJK␣Compatibility␣Ideographs␣Supplement
␣235␣␣␣␣␣␣␣␣0x2FA20␣␣␣␣␣No_Block
␣236␣␣␣␣␣␣␣␣0xE0000␣␣␣␣␣Tags
␣237␣␣␣␣␣␣␣␣0xE0080␣␣␣␣␣No_Block
␣238␣␣␣␣␣␣␣␣0xE0100␣␣␣␣␣Variation␣Selectors␣Supplement
␣239␣␣␣␣␣␣␣␣0xE01F0␣␣␣␣␣No_Block
␣240␣␣␣␣␣␣␣␣0xF0000␣␣␣␣␣Supplementary␣Private␣Use␣Area-A
␣241␣␣␣␣␣␣␣␣0x100000␣␣␣␣Supplementary␣Private␣Use␣Area-B
␣242␣␣␣␣␣␣␣␣0x110000␣␣␣␣No_Block

The␣first␣line␣(with␣Index␣[0])␣means␣that␣the␣value␣for␣code␣point␣0␣is␣"Basic
Latin".␣␣The␣entry␣"0x0080"␣in␣the␣@blocks_ranges␣column␣in␣the␣second␣line
means␣that␣the␣value␣from␣the␣first␣line,␣"Basic␣Latin",␣extends␣to␣all␣code
points␣in␣the␣range␣from␣0␣up␣to␣but␣not␣including␣0x0080,␣that␣is,␣through
127.␣␣In␣other␣words,␣the␣code␣points␣from␣0␣to␣127␣are␣all␣in␣the␣"Basic
Latin"␣block.␣␣Similarly,␣all␣code␣points␣in␣the␣range␣from␣0x0080␣up␣to␣(but
not␣including)␣0x0100␣are␣in␣the␣block␣named␣"Latin-1␣Supplement",␣etc.
(Notice␣that␣the␣return␣is␣the␣old-style␣block␣names;␣see␣L</Old-style␣versus
new-style␣block␣names>).

The␣final␣line␣(with␣Index␣[242])␣means␣that␣the␣value␣for␣all␣code␣points␣above
the␣legal␣Unicode␣maximum␣code␣point␣have␣the␣value␣"No_Block",␣which␣is␣the
term␣Unicode␣uses␣for␣a␣non-existing␣block.

The␣arrays␣completely␣specify␣the␣mappings␣for␣all␣possible␣code␣points.
The␣final␣element␣in␣an␣inversion␣map␣returned␣by␣this␣function␣will␣always␣be
for␣the␣range␣that␣consists␣of␣all␣the␣code␣points␣that␣aren't␣legal␣Unicode,
but␣that␣are␣expressible␣on␣the␣platform.␣␣(That␣is,␣it␣starts␣with␣code␣point
0x110000,␣the␣first␣code␣point␣above␣the␣legal␣Unicode␣maximum,␣and␣extends␣to
infinity.)␣The␣value␣for␣that␣range␣will␣be␣the␣same␣that␣any␣typical
unassigned␣code␣point␣has␣for␣the␣specified␣property.␣␣(Certain␣unassigned
code␣points␣are␣not␣"typical";␣for␣example␣the␣non-character␣code␣points,␣or
those␣in␣blocks␣that␣are␣to␣be␣written␣right-to-left.␣␣The␣above-Unicode
range's␣value␣is␣not␣based␣on␣these␣atypical␣code␣points.)␣␣It␣could␣be␣argued
that,␣instead␣of␣treating␣these␣as␣unassigned␣Unicode␣code␣points,␣the␣value
for␣this␣range␣should␣be␣C<undef>.␣␣If␣you␣wish,␣you␣can␣change␣the␣returned
arrays␣accordingly.

The␣maps␣for␣almost␣all␣properties␣are␣simple␣scalars␣that␣should␣be
interpreted␣as-is.
These␣values␣are␣those␣given␣in␣the␣Unicode-supplied␣data␣files,␣which␣may␣be
inconsistent␣as␣to␣capitalization␣and␣as␣to␣which␣synonym␣for␣a␣property-value
is␣given.␣␣The␣results␣may␣be␣normalized␣by␣using␣the␣L</prop_value_aliases()>
function.

There␣are␣exceptions␣to␣the␣simple␣scalar␣maps.␣␣Some␣properties␣have␣some
elements␣in␣their␣map␣list␣that␣are␣themselves␣lists␣of␣scalars;␣and␣some
special␣strings␣are␣returned␣that␣are␣not␣to␣be␣interpreted␣as-is.␣␣Element
[2]␣(placed␣into␣C<$format>␣in␣the␣example␣above)␣of␣the␣returned␣four␣element
list␣tells␣you␣if␣the␣map␣has␣any␣of␣these␣special␣elements␣or␣not,␣as␣follows:

=over

=item␣B<C<s>>

means␣all␣the␣elements␣of␣the␣map␣array␣are␣simple␣scalars,␣with␣no␣special
elements.␣␣Almost␣all␣properties␣are␣like␣this,␣like␣the␣C<BLOCK_>␣example
above.

=item␣B<C<sl>>

means␣that␣some␣of␣the␣map␣array␣elements␣have␣the␣form␣given␣by␣C<"s">,␣and
the␣rest␣are␣lists␣of␣scalars.␣␣For␣example,␣here␣is␣a␣portion␣of␣the␣output
of␣calling␣C<prop_invmap>()␣with␣the␣"Script␣Extensions"␣property:

␣@scripts_ranges␣␣@scripts_maps
␣␣␣␣␣␣...
␣␣␣␣␣␣0x0953␣␣␣␣␣␣Devanagari
␣␣␣␣␣␣0x0964␣␣␣␣␣␣[␣Bengali,␣Devanagari,␣Gurumukhi,␣Oriya␣]
␣␣␣␣␣␣0x0966␣␣␣␣␣␣Devanagari
␣␣␣␣␣␣0x0970␣␣␣␣␣␣Common

Here,␣the␣code␣points␣0x964␣and␣0x965␣are␣both␣used␣in␣Bengali,
Devanagari,␣Gurmukhi,␣and␣Oriya,␣but␣no␣other␣scripts.

The␣Name_Alias␣property␣is␣also␣of␣this␣form.␣␣But␣each␣scalar␣consists␣of␣two
components:␣␣1)␣the␣name,␣and␣2)␣the␣type␣of␣alias␣this␣is.␣␣They␣are
separated␣by␣a␣colon␣and␣a␣space.␣␣In␣Unicode␣6.1,␣there␣are␣several␣alias␣types:

=over

=item␣C<correction>

indicates␣that␣the␣name␣is␣a␣corrected␣form␣for␣the
original␣name␣(which␣remains␣valid)␣for␣the␣same␣code␣point.

=item␣C<control>

adds␣a␣new␣name␣for␣a␣control␣character.

=item␣C<alternate>

is␣an␣alternate␣name␣for␣a␣character

=item␣C<figment>

is␣a␣name␣for␣a␣character␣that␣has␣been␣documented␣but␣was␣never␣in␣any
actual␣standard.

=item␣C<abbreviation>

is␣a␣common␣abbreviation␣for␣a␣character

=back

The␣lists␣are␣ordered␣(roughly)␣so␣the␣most␣preferred␣names␣come␣before␣less
preferred␣ones.

For␣example,

␣@aliases_ranges␣␣␣␣␣␣␣␣@alias_maps
␣␣␣␣...
␣␣␣␣0x009E␣␣␣␣␣␣␣␣[␣'PRIVACY␣MESSAGE:␣control',␣'PM:␣abbreviation'␣]
␣␣␣␣0x009F␣␣␣␣␣␣␣␣[␣'APPLICATION␣PROGRAM␣COMMAND:␣control',
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣'APC:␣abbreviation'
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣]
␣␣␣␣0x00A0␣␣␣␣␣␣␣␣'NBSP:␣abbreviation'
␣␣␣␣0x00A1␣␣␣␣␣␣␣␣""
␣␣␣␣0x00AD␣␣␣␣␣␣␣␣'SHY:␣abbreviation'
␣␣␣␣0x00AE␣␣␣␣␣␣␣␣""
␣␣␣␣0x01A2␣␣␣␣␣␣␣␣'LATIN␣CAPITAL␣LETTER␣GHA:␣correction'
␣␣␣␣0x01A3␣␣␣␣␣␣␣␣'LATIN␣SMALL␣LETTER␣GHA:␣correction'
␣␣␣␣0x01A4␣␣␣␣␣␣␣␣""
␣␣␣␣...

A␣map␣to␣the␣empty␣string␣means␣that␣there␣is␣no␣alias␣defined␣for␣the␣code
point.

=item␣B<C<a>>

is␣like␣C<"s">␣in␣that␣all␣the␣map␣array␣elements␣are␣scalars,␣but␣here␣they␣are
restricted␣to␣all␣being␣integers,␣and␣some␣have␣to␣be␣adjusted␣(hence␣the␣name
C<"a">)␣to␣get␣the␣correct␣result.␣␣For␣example,␣in:

␣my␣($uppers_ranges_ref,␣$uppers_maps_ref,␣$format,␣$default)
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣=␣prop_invmap("Simple_Uppercase_Mapping");

the␣returned␣arrays␣look␣like␣this:

␣@$uppers_ranges_ref␣␣␣␣@$uppers_maps_ref␣␣␣Note
␣␣␣␣␣␣␣0␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣0
␣␣␣␣␣␣97␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣65␣␣␣␣␣␣␣␣␣␣'a'␣maps␣to␣'A',␣b␣=>␣B␣...
␣␣␣␣␣123␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣0
␣␣␣␣␣181␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣924␣␣␣␣␣␣␣␣␣␣MICRO␣SIGN␣=>␣Greek␣Cap␣MU
␣␣␣␣␣182␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣0
␣␣␣␣␣...

and␣C<$default>␣is␣0.

Let's␣start␣with␣the␣second␣line.␣␣It␣says␣that␣the␣uppercase␣of␣code␣point␣97
is␣65;␣or␣C<uc("a")>␣==␣"A".␣␣But␣the␣line␣is␣for␣the␣entire␣range␣of␣code
points␣97␣through␣122.␣␣To␣get␣the␣mapping␣for␣any␣code␣point␣in␣this␣range,
you␣take␣the␣offset␣it␣has␣from␣the␣beginning␣code␣point␣of␣the␣range,␣and␣add
that␣to␣the␣mapping␣for␣that␣first␣code␣point.␣␣So,␣the␣mapping␣for␣122␣("z")
is␣derived␣by␣taking␣the␣offset␣of␣122␣from␣97␣(=25)␣and␣adding␣that␣to␣65,
yielding␣90␣("z").␣␣Likewise␣for␣everything␣in␣between.

Requiring␣this␣simple␣adjustment␣allows␣the␣returned␣arrays␣to␣be
significantly␣smaller␣than␣otherwise,␣up␣to␣a␣factor␣of␣10,␣speeding␣up
searching␣through␣them.

Ranges␣that␣map␣to␣C<$default>,␣C<"0">,␣behave␣somewhat␣differently.␣␣For
these,␣each␣code␣point␣maps␣to␣itself.␣␣So,␣in␣the␣first␣line␣in␣the␣example,
S<C<ord(uc(chr(0)))>>␣is␣0,␣S<C<ord(uc(chr(1)))>>␣is␣1,␣..
S<C<ord(uc(chr(96)))>>␣is␣96.

=item␣B<C<al>>

means␣that␣some␣of␣the␣map␣array␣elements␣have␣the␣form␣given␣by␣C<"a">,␣and
the␣rest␣are␣ordered␣lists␣of␣code␣points.
For␣example,␣in:

␣my␣($uppers_ranges_ref,␣$uppers_maps_ref,␣$format,␣$default)
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣=␣prop_invmap("Uppercase_Mapping");

the␣returned␣arrays␣look␣like␣this:

␣@$uppers_ranges_ref␣␣␣␣@$uppers_maps_ref
␣␣␣␣␣␣␣0␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣0
␣␣␣␣␣␣97␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣65
␣␣␣␣␣123␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣0
␣␣␣␣␣181␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣924
␣␣␣␣␣182␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣0
␣␣␣␣␣...
␣␣␣␣0x0149␣␣␣␣␣␣␣␣␣␣␣␣␣␣[␣0x02BC␣0x004E␣]
␣␣␣␣0x014A␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣0
␣␣␣␣0x014B␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣330
␣␣␣␣␣...

This␣is␣the␣full␣Uppercase_Mapping␣property␣(as␣opposed␣to␣the
Simple_Uppercase_Mapping␣given␣in␣the␣example␣for␣format␣C<"a">).␣␣The␣only
difference␣between␣the␣two␣in␣the␣ranges␣shown␣is␣that␣the␣code␣point␣at
0x0149␣(LATIN␣SMALL␣LETTER␣N␣PRECEDED␣BY␣APOSTROPHE)␣maps␣to␣a␣string␣of␣two
characters,␣0x02BC␣(MODIFIER␣LETTER␣APOSTROPHE)␣followed␣by␣0x004E␣(LATIN
CAPITAL␣LETTER␣N).

No␣adjustments␣are␣needed␣to␣entries␣that␣are␣references␣to␣arrays;␣each␣such
entry␣will␣have␣exactly␣one␣element␣in␣its␣range,␣so␣the␣offset␣is␣always␣0.

The␣fourth␣(index␣[3])␣element␣(C<$default>)␣in␣the␣list␣returned␣for␣this
format␣is␣0.

=item␣B<C<ae>>

This␣is␣like␣C<"a">,␣but␣some␣elements␣are␣the␣empty␣string,␣and␣should␣not␣be
adjusted.
The␣one␣internal␣Perl␣property␣accessible␣by␣C<prop_invmap>␣is␣of␣this␣type:
"Perl_Decimal_Digit"␣returns␣an␣inversion␣map␣which␣gives␣the␣numeric␣values
that␣are␣represented␣by␣the␣Unicode␣decimal␣digit␣characters.␣␣Characters␣that
don't␣represent␣decimal␣digits␣map␣to␣the␣empty␣string,␣like␣so:

␣@digits␣␣␣␣@values
␣0x0000␣␣␣␣␣␣␣""
␣0x0030␣␣␣␣␣␣␣␣0
␣0x003A:␣␣␣␣␣␣""
␣0x0660:␣␣␣␣␣␣␣0
␣0x066A:␣␣␣␣␣␣""
␣0x06F0:␣␣␣␣␣␣␣0
␣0x06FA:␣␣␣␣␣␣""
␣0x07C0:␣␣␣␣␣␣␣0
␣0x07CA:␣␣␣␣␣␣""
␣0x0966:␣␣␣␣␣␣␣0
␣...

This␣means␣that␣the␣code␣points␣from␣0␣to␣0x2F␣do␣not␣represent␣decimal␣digits;
the␣code␣point␣0x30␣(DIGIT␣ZERO)␣represents␣0;␣␣code␣point␣0x31,␣(DIGIT␣ONE),
represents␣0+1-0␣=␣1;␣...␣code␣point␣0x39,␣(DIGIT␣NINE),␣represents␣0+9-0␣=␣9;
...␣code␣points␣0x3A␣through␣0x65F␣do␣not␣represent␣decimal␣digits;␣0x660
(ARABIC-INDIC␣DIGIT␣ZERO),␣represents␣0;␣...␣0x07C1␣(NKO␣DIGIT␣ONE),
represents␣0+1-0␣=␣1␣...

The␣fourth␣(index␣[3])␣element␣(C<$default>)␣in␣the␣list␣returned␣for␣this
format␣is␣the␣empty␣string.

=item␣B<C<ale>>

is␣a␣combination␣of␣the␣C<"al">␣type␣and␣the␣C<"ae">␣type.␣␣Some␣of
the␣map␣array␣elements␣have␣the␣forms␣given␣by␣C<"al">,␣and
the␣rest␣are␣the␣empty␣string.␣␣The␣property␣C<NFKC_Casefold>␣has␣this␣form.
An␣example␣slice␣is:

␣@$ranges_ref␣␣@$maps_ref␣␣␣␣␣␣␣␣␣Note
␣␣␣␣...
␣␣␣0x00AA␣␣␣␣␣␣␣97␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣FEMININE␣ORDINAL␣INDICATOR␣=>␣'a'
␣␣␣0x00AB␣␣␣␣␣␣␣␣0
␣␣␣0x00AD␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣SOFT␣HYPHEN␣=>␣""
␣␣␣0x00AE␣␣␣␣␣␣␣␣0
␣␣␣0x00AF␣␣␣␣␣[␣0x0020,␣0x0304␣]␣␣MACRON␣=>␣SPACE␣.␣COMBINING␣MACRON
␣␣␣0x00B0␣␣␣␣␣␣␣␣0
␣␣␣...

The␣fourth␣(index␣[3])␣element␣(C<$default>)␣in␣the␣list␣returned␣for␣this
format␣is␣0.

=item␣B<C<ar>>

means␣that␣all␣the␣elements␣of␣the␣map␣array␣are␣either␣rational␣numbers␣or
the␣string␣C<"NaN">,␣meaning␣"Not␣a␣Number".␣␣A␣rational␣number␣is␣either␣an
integer,␣or␣two␣integers␣separated␣by␣a␣solidus␣(C<"/">).␣␣The␣second␣integer
represents␣the␣denominator␣of␣the␣division␣implied␣by␣the␣solidus,␣and␣is
actually␣always␣positive,␣so␣it␣is␣guaranteed␣not␣to␣be␣0␣and␣to␣not␣be
signed.␣␣When␣the␣element␣is␣a␣plain␣integer␣(without␣the
solidus),␣it␣may␣need␣to␣be␣adjusted␣to␣get␣the␣correct␣value␣by␣adding␣the
offset,␣just␣as␣other␣C<"a">␣properties.␣␣No␣adjustment␣is␣needed␣for
fractions,␣as␣the␣range␣is␣guaranteed␣to␣have␣just␣a␣single␣element,␣and␣so
the␣offset␣is␣always␣0.

If␣you␣want␣to␣convert␣the␣returned␣map␣to␣entirely␣scalar␣numbers,␣you
can␣use␣something␣like␣this:

␣my␣($invlist_ref,␣$invmap_ref,␣$format)␣=␣prop_invmap($property);
␣if␣($format␣&&␣$format␣eq␣"ar")␣{
␣␣␣␣␣map␣{␣$_␣=␣eval␣$_␣if␣$_␣ne␣'NaN'␣}␣@$map_ref;
␣}

Here's␣some␣entries␣from␣the␣output␣of␣the␣property␣"Nv",␣which␣has␣format
C<"ar">.

␣@numerics_ranges␣␣@numerics_maps␣␣␣␣␣␣␣Note
␣␣␣␣␣␣␣␣0x00␣␣␣␣␣␣␣␣␣␣␣"NaN"
␣␣␣␣␣␣␣␣0x30␣␣␣␣␣␣␣␣␣␣␣␣␣0␣␣␣␣␣␣␣␣␣␣␣DIGIT␣0␣..␣DIGIT␣9
␣␣␣␣␣␣␣␣0x3A␣␣␣␣␣␣␣␣␣␣␣"NaN"
␣␣␣␣␣␣␣␣0xB2␣␣␣␣␣␣␣␣␣␣␣␣␣2␣␣␣␣␣␣␣␣␣␣␣SUPERSCRIPTs␣2␣and␣3
␣␣␣␣␣␣␣␣0xB4␣␣␣␣␣␣␣␣␣␣␣"NaN"
␣␣␣␣␣␣␣␣0xB9␣␣␣␣␣␣␣␣␣␣␣␣␣1␣␣␣␣␣␣␣␣␣␣␣SUPERSCRIPT␣1
␣␣␣␣␣␣␣␣0xBA␣␣␣␣␣␣␣␣␣␣␣"NaN"
␣␣␣␣␣␣␣␣0xBC␣␣␣␣␣␣␣␣␣␣␣␣1/4␣␣␣␣␣␣␣␣␣␣VULGAR␣FRACTION␣1/4
␣␣␣␣␣␣␣␣0xBD␣␣␣␣␣␣␣␣␣␣␣␣1/2␣␣␣␣␣␣␣␣␣␣VULGAR␣FRACTION␣1/2
␣␣␣␣␣␣␣␣0xBE␣␣␣␣␣␣␣␣␣␣␣␣3/4␣␣␣␣␣␣␣␣␣␣VULGAR␣FRACTION␣3/4
␣␣␣␣␣␣␣␣0xBF␣␣␣␣␣␣␣␣␣␣␣"NaN"
␣␣␣␣␣␣␣␣0x660␣␣␣␣␣␣␣␣␣␣␣␣0␣␣␣␣␣␣␣␣␣␣␣ARABIC-INDIC␣DIGIT␣ZERO␣..␣NINE
␣␣␣␣␣␣␣␣0x66A␣␣␣␣␣␣␣␣␣␣"NaN"

The␣fourth␣(index␣[3])␣element␣(C<$default>)␣in␣the␣list␣returned␣for␣this
format␣is␣C<"NaN">.

=item␣B<C<n>>

means␣the␣Name␣property.␣␣All␣the␣elements␣of␣the␣map␣array␣are␣simple
scalars,␣but␣some␣of␣them␣contain␣special␣strings␣that␣require␣more␣work␣to
get␣the␣actual␣name.

Entries␣such␣as:

␣CJK␣UNIFIED␣IDEOGRAPH-<code␣point>

mean␣that␣the␣name␣for␣the␣code␣point␣is␣"CJK␣UNIFIED␣IDEOGRAPH-"
with␣the␣code␣point␣(expressed␣in␣hexadecimal)␣appended␣to␣it,␣like␣"CJK
UNIFIED␣IDEOGRAPH-3403"␣(similarly␣for␣S<C<CJK␣COMPATIBILITY␣IDEOGRAPH-E<lt>code
pointE<gt>>>).

Also,␣entries␣like

␣<hangul␣syllable>

means␣that␣the␣name␣is␣algorithmically␣calculated.␣␣This␣is␣easily␣done␣by
the␣function␣L<charnames/charnames::viacode(code)>.

Note␣that␣for␣control␣characters␣(C<Gc=cc>),␣Unicode's␣data␣files␣have␣the
string␣"C<E<lt>controlE<gt>>",␣but␣the␣real␣name␣of␣each␣of␣these␣characters␣is␣the␣empty
string.␣␣This␣function␣returns␣that␣real␣name,␣the␣empty␣string.␣␣(There␣are
names␣for␣these␣characters,␣but␣they␣are␣considered␣aliases,␣not␣the␣Name
property␣name,␣and␣are␣contained␣in␣the␣C<Name_Alias>␣property.)

=item␣B<C<ad>>

means␣the␣Decomposition_Mapping␣property.␣␣This␣property␣is␣like␣C<"al">
properties,␣except␣that␣one␣of␣the␣scalar␣elements␣is␣of␣the␣form:

␣<hangul␣syllable>

This␣signifies␣that␣this␣entry␣should␣be␣replaced␣by␣the␣decompositions␣for
all␣the␣code␣points␣whose␣decomposition␣is␣algorithmically␣calculated.␣␣(All
of␣them␣are␣currently␣in␣one␣range␣and␣no␣others␣outside␣the␣range␣are␣likely
to␣ever␣be␣added␣to␣Unicode;␣the␣C<"n">␣format
has␣this␣same␣entry.)␣␣These␣can␣be␣generated␣via␣the␣function
L<Unicode::Normalize::NFD()|Unicode::Normalize>.

Note␣that␣the␣mapping␣is␣the␣one␣that␣is␣specified␣in␣the␣Unicode␣data␣files,
and␣to␣get␣the␣final␣decomposition,␣it␣may␣need␣to␣be␣applied␣recursively.
Unicode␣in␣fact␣discourages␣use␣of␣this␣property␣except␣internally␣in
implementations␣of␣the␣Unicode␣Normalization␣Algorithm.

The␣fourth␣(index␣[3])␣element␣(C<$default>)␣in␣the␣list␣returned␣for␣this
format␣is␣0.

=back

Note␣that␣a␣format␣begins␣with␣the␣letter␣"a"␣if␣and␣only␣the␣property␣it␣is
for␣requires␣adjustments␣by␣adding␣the␣offsets␣in␣multi-element␣ranges.␣␣For
all␣these␣properties,␣an␣entry␣should␣be␣adjusted␣only␣if␣the␣map␣is␣a␣scalar
which␣is␣an␣integer.␣␣That␣is,␣it␣must␣match␣the␣regular␣expression:

␣␣␣␣/␣^␣-?␣\d+␣$␣/xa

Further,␣the␣first␣element␣in␣a␣range␣never␣needs␣adjustment,␣as␣the
adjustment␣would␣be␣just␣adding␣0.

A␣binary␣search␣such␣as␣that␣provided␣by␣L</search_invlist()>,␣can␣be␣used␣to
quickly␣find␣a␣code␣point␣in␣the␣inversion␣list,␣and␣hence␣its␣corresponding
mapping.

The␣final,␣fourth␣element␣(index␣[3],␣assigned␣to␣C<$default>␣in␣the␣"block"
example)␣in␣the␣four␣element␣list␣returned␣by␣this␣function␣is␣used␣with␣the
C<"a">␣format␣types;␣it␣may␣also␣be␣useful␣for␣applications
that␣wish␣to␣convert␣the␣returned␣inversion␣map␣data␣structure␣into␣some
other,␣such␣as␣a␣hash.␣␣It␣gives␣the␣mapping␣that␣most␣code␣points␣map␣to
under␣the␣property.␣␣If␣you␣establish␣the␣convention␣that␣any␣code␣point␣not
explicitly␣listed␣in␣your␣data␣structure␣maps␣to␣this␣value,␣you␣can
potentially␣make␣your␣data␣structure␣much␣smaller.␣␣As␣you␣construct␣your␣data
structure␣from␣the␣one␣returned␣by␣this␣function,␣simply␣ignore␣those␣ranges
that␣map␣to␣this␣value.␣␣For␣example,␣to
convert␣to␣the␣data␣structure␣searchable␣by␣L</charinrange()>,␣you␣can␣follow
this␣recipe␣for␣properties␣that␣don't␣require␣adjustments:

␣my␣($list_ref,␣$map_ref,␣$format,␣$default)␣=␣prop_invmap($property);
␣my␣@range_list;

␣#␣Look␣at␣each␣element␣in␣the␣list,␣but␣the␣-2␣is␣needed␣because␣we
␣#␣look␣at␣$i+1␣in␣the␣loop,␣and␣the␣final␣element␣is␣guaranteed␣to␣map
␣#␣to␣$default␣by␣prop_invmap(),␣so␣we␣would␣skip␣it␣anyway.
␣for␣my␣$i␣(0␣..␣@$list_ref␣-␣2)␣{
␣␣␣␣next␣if␣$map_ref->[$i]␣eq␣$default;
␣␣␣␣push␣@range_list,␣[␣$list_ref->[$i],
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣$list_ref->[$i+1],
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣$map_ref->[$i]
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣];
␣}

␣print␣charinrange(\@range_list,␣$code_point),␣"\n";

With␣this,␣C<charinrange()>␣will␣return␣C<undef>␣if␣its␣input␣code␣point␣maps
to␣C<$default>.␣␣You␣can␣avoid␣this␣by␣omitting␣the␣C<next>␣statement,␣and␣adding
a␣line␣after␣the␣loop␣to␣handle␣the␣final␣element␣of␣the␣inversion␣map.

Similarly,␣this␣recipe␣can␣be␣used␣for␣properties␣that␣do␣require␣adjustments:

␣for␣my␣$i␣(0␣..␣@$list_ref␣-␣2)␣{
␣␣␣␣next␣if␣$map_ref->[$i]␣eq␣$default;

␣␣␣␣#␣prop_invmap()␣guarantees␣that␣if␣the␣mapping␣is␣to␣an␣array,␣the
␣␣␣␣#␣range␣has␣just␣one␣element,␣so␣no␣need␣to␣worry␣about␣adjustments.
␣␣␣␣if␣(ref␣$map_ref->[$i])␣{
␣␣␣␣␣␣␣␣push␣@range_list,
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣[␣$list_ref->[$i],␣$list_ref->[$i],␣$map_ref->[$i]␣];
␣␣␣␣}
␣␣␣␣else␣{␣␣#␣Otherwise␣each␣element␣is␣actually␣mapped␣to␣a␣separate
␣␣␣␣␣␣␣␣␣␣␣␣#␣value,␣so␣the␣range␣has␣to␣be␣split␣into␣single␣code␣point
␣␣␣␣␣␣␣␣␣␣␣␣#␣ranges.

␣␣␣␣␣␣␣␣my␣$adjustment␣=␣0;

␣␣␣␣␣␣␣␣#␣For␣each␣code␣point␣that␣gets␣mapped␣to␣something...
␣␣␣␣␣␣␣␣for␣my␣$j␣($list_ref->[$i]␣..␣$list_ref->[$i+1]␣-1␣)␣{

␣␣␣␣␣␣␣␣␣␣␣␣#␣...␣add␣a␣range␣consisting␣of␣just␣it␣mapping␣to␣the
␣␣␣␣␣␣␣␣␣␣␣␣#␣original␣plus␣the␣adjustment,␣which␣is␣incremented␣for␣the
␣␣␣␣␣␣␣␣␣␣␣␣#␣next␣time␣through␣the␣loop,␣as␣the␣offset␣increases␣by␣1
␣␣␣␣␣␣␣␣␣␣␣␣#␣for␣each␣element␣in␣the␣range
␣␣␣␣␣␣␣␣␣␣␣␣push␣@range_list,
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣[␣$j,␣$j,␣$map_ref->[$i]␣+␣$adjustment++␣];
␣␣␣␣␣␣␣␣}
␣␣␣␣}
␣}

Note␣that␣the␣inversion␣maps␣returned␣for␣the␣C<Case_Folding>␣and
C<Simple_Case_Folding>␣properties␣do␣not␣include␣the␣Turkic-locale␣mappings.
Use␣L</casefold()>␣for␣these.

C<prop_invmap>␣does␣not␣know␣about␣any␣user-defined␣properties,␣and␣will
return␣C<undef>␣if␣called␣with␣one␣of␣those.

The␣returned␣values␣for␣the␣Perl␣extension␣properties,␣such␣as␣C<Any>␣and
C<Greek>␣are␣somewhat␣misleading.␣␣The␣values␣are␣either␣C<"Y">␣or␣C<"N>".
All␣Unicode␣properties␣are␣bipartite,␣so␣you␣can␣actually␣use␣the␣C<"Y">␣or
C<"N>"␣in␣a␣Perl␣regular␣expression␣for␣these,␣like␣C<qr/\p{ID_Start=Y/}>␣or
C<qr/\p{Upper=N/}>.␣␣But␣the␣Perl␣extensions␣aren't␣specified␣this␣way,␣only
like␣C</qr/\p{Any}>,␣I<etc>.␣␣You␣can't␣actually␣use␣the␣C<"Y">␣and␣C<"N>"␣in
them.

=head3␣Getting␣every␣available␣name

Instead␣of␣reading␣the␣Unicode␣Database␣directly␣from␣files,␣as␣you␣were␣able
to␣do␣for␣a␣long␣time,␣you␣are␣encouraged␣to␣use␣the␣supplied␣functions.␣So,
instead␣of␣reading␣C<Name.pl>␣directly,␣which␣changed␣formats␣in␣5.32,␣and␣may
do␣so␣again␣without␣notice␣in␣the␣future␣or␣even␣disappear,␣you␣ought␣to␣use
L</prop_invmap()>␣like␣this:

␣␣my␣(%name,␣%cp,␣%cps,␣$n);
␣␣#␣All␣codepoints
␣␣foreach␣my␣$cat␣(qw(␣Name␣Name_Alias␣))␣{
␣␣␣␣␣␣my␣($codepoints,␣$names,␣$format,␣$default)␣=␣prop_invmap($cat);
␣␣␣␣␣␣#␣$format␣=>␣"n",␣$default␣=>␣""
␣␣␣␣␣␣foreach␣my␣$i␣(0␣..␣@$codepoints␣-␣2)␣{
␣␣␣␣␣␣␣␣␣␣my␣($cp,␣$n)␣=␣($codepoints->[$i],␣$names->[$i]);
␣␣␣␣␣␣␣␣␣␣#␣If␣$n␣is␣a␣ref,␣the␣same␣codepoint␣has␣multiple␣names
␣␣␣␣␣␣␣␣␣␣foreach␣my␣$name␣(ref␣$n␣?␣@$n␣:␣$n)␣{
␣␣␣␣␣␣␣␣␣␣␣␣␣␣$name{$cp}␣//=␣$name;
␣␣␣␣␣␣␣␣␣␣␣␣␣␣$cp{$name}␣//=␣$cp;
␣␣␣␣␣␣␣␣␣␣}
␣␣␣␣␣␣}
␣␣}
␣␣#␣Named␣sequences
␣␣{␣␣␣my␣%ns␣=␣namedseq();
␣␣␣␣␣␣foreach␣my␣$name␣(sort␣{␣$ns{$a}␣cmp␣$ns{$b}␣}␣keys␣%ns)␣{
␣␣␣␣␣␣␣␣␣␣$cp{$name}␣//=␣[␣map␣{␣ord␣}␣split␣""␣=>␣$ns{$name}␣];
␣␣␣␣␣␣}
␣␣}

=cut
----------
Range: (2054523,2057599) (3076)
}

=head2␣B<Blocks␣versus␣Scripts>

The␣difference␣between␣a␣block␣and␣a␣script␣is␣that␣scripts␣are␣closer
to␣the␣linguistic␣notion␣of␣a␣set␣of␣code␣points␣required␣to␣represent
languages,␣while␣block␣is␣more␣of␣an␣artifact␣of␣the␣Unicode␣code␣point
numbering␣and␣separation␣into␣blocks␣of␣consecutive␣code␣points␣(so␣far␣the
size␣of␣a␣block␣is␣some␣multiple␣of␣16,␣like␣128␣or␣256).

For␣example␣the␣Latin␣B<script>␣is␣spread␣over␣several␣B<blocks>,␣such
as␣C<Basic␣Latin>,␣C<Latin␣1␣Supplement>,␣C<Latin␣Extended-A>,␣and
C<Latin␣Extended-B>.␣␣On␣the␣other␣hand,␣the␣Latin␣script␣does␣not
contain␣all␣the␣characters␣of␣the␣C<Basic␣Latin>␣block␣(also␣known␣as
ASCII):␣it␣includes␣only␣the␣letters,␣and␣not,␣for␣example,␣the␣digits
nor␣the␣punctuation.

For␣blocks␣see␣L<http://www.unicode.org/Public/UNIDATA/Blocks.txt>

For␣scripts␣see␣UTR␣#24:␣L<http://www.unicode.org/unicode/reports/tr24/>

=head2␣B<Matching␣Scripts␣and␣Blocks>

Scripts␣are␣matched␣with␣the␣regular-expression␣construct
C<\p{...}>␣(e.g.␣C<\p{Tibetan}>␣matches␣characters␣of␣the␣Tibetan␣script),
while␣C<\p{Blk=...}>␣is␣used␣for␣blocks␣(e.g.␣C<\p{Blk=Tibetan}>␣matches
any␣of␣the␣256␣code␣points␣in␣the␣Tibetan␣block).

=head2␣Old-style␣versus␣new-style␣block␣names

Unicode␣publishes␣the␣names␣of␣blocks␣in␣two␣different␣styles,␣though␣the␣two
are␣equivalent␣under␣Unicode's␣loose␣matching␣rules.

The␣original␣style␣uses␣blanks␣and␣hyphens␣in␣the␣block␣names␣(except␣for
C<No_Block>),␣like␣so:

␣Miscellaneous␣Mathematical␣Symbols-B

The␣newer␣style␣replaces␣these␣with␣underscores,␣like␣this:

␣Miscellaneous_Mathematical_Symbols_B

This␣newer␣style␣is␣consistent␣with␣the␣values␣of␣other␣Unicode␣properties.
To␣preserve␣backward␣compatibility,␣all␣the␣functions␣in␣Unicode::UCD␣that
return␣block␣names␣(except␣as␣noted)␣return␣the␣old-style␣ones.
L</prop_value_aliases()>␣returns␣the␣new-style␣and␣can␣be␣used␣to␣convert␣from
old-style␣to␣new-style:

␣my␣$new_style␣=␣prop_values_aliases("block",␣$old_style);

Perl␣also␣has␣single-form␣extensions␣that␣refer␣to␣blocks,␣C<In_Cyrillic>,
meaning␣C<Block=Cyrillic>.␣␣These␣have␣always␣been␣written␣in␣the␣new␣style.

To␣convert␣from␣new-style␣to␣old-style,␣follow␣this␣recipe:

␣$old_style␣=␣charblock((prop_invlist("block=$new_style"))[0]);

(which␣finds␣the␣range␣of␣code␣points␣in␣the␣block␣using␣C<prop_invlist>,
gets␣the␣lower␣end␣of␣the␣range␣(0th␣element)␣and␣then␣looks␣up␣the␣old␣name
for␣its␣block␣using␣C<charblock>).

Note␣that␣starting␣in␣Unicode␣6.1,␣many␣of␣the␣block␣names␣have␣shorter
synonyms.␣␣These␣are␣always␣given␣in␣the␣new␣style.

=head2␣Use␣with␣older␣Unicode␣versions

The␣functions␣in␣this␣module␣work␣as␣well␣as␣can␣be␣expected␣when
used␣on␣earlier␣Unicode␣versions.␣␣But,␣obviously,␣they␣use␣the␣available␣data
from␣that␣Unicode␣version.␣␣For␣example,␣if␣the␣Unicode␣version␣predates␣the
definition␣of␣the␣script␣property␣(Unicode␣3.1),␣then␣any␣function␣that␣deals
with␣scripts␣is␣going␣to␣return␣C<undef>␣for␣the␣script␣portion␣of␣the␣return
value.

=head1␣AUTHOR

Jarkko␣Hietaniemi.␣␣Now␣maintained␣by␣perl5␣porters.

=cut
----------
Range: (2058708,2064056) (5348)
=pod

=head1␣NAME

Params::Check␣-␣A␣generic␣input␣parsing/checking␣mechanism.

=head1␣SYNOPSIS

␣␣␣␣use␣Params::Check␣qw[check␣allow␣last_error];

␣␣␣␣sub␣fill_personal_info␣{
␣␣␣␣␣␣␣␣my␣%hash␣=␣@_;
␣␣␣␣␣␣␣␣my␣$x;

␣␣␣␣␣␣␣␣my␣$tmpl␣=␣{
␣␣␣␣␣␣␣␣␣␣␣␣firstname␣␣␣=>␣{␣required␣␣␣=>␣1,␣defined␣=>␣1␣},
␣␣␣␣␣␣␣␣␣␣␣␣lastname␣␣␣␣=>␣{␣required␣␣␣=>␣1,␣store␣=>␣\$x␣},
␣␣␣␣␣␣␣␣␣␣␣␣gender␣␣␣␣␣␣=>␣{␣required␣␣␣=>␣1,
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣allow␣␣␣␣␣␣=>␣[qr/M/i,␣qr/F/i],
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣},
␣␣␣␣␣␣␣␣␣␣␣␣married␣␣␣␣␣=>␣{␣allow␣␣␣␣␣␣=>␣[0,1]␣},
␣␣␣␣␣␣␣␣␣␣␣␣age␣␣␣␣␣␣␣␣␣=>␣{␣default␣␣␣␣=>␣21,
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣allow␣␣␣␣␣␣=>␣qr/^\d+$/,
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣},

␣␣␣␣␣␣␣␣␣␣␣␣phone␣␣␣␣␣␣␣=>␣{␣allow␣=>␣[␣sub␣{␣return␣1␣if␣/$valid_re/␣},
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣'1-800-PERL'␣]
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣},
␣␣␣␣␣␣␣␣␣␣␣␣id_list␣␣␣␣␣=>␣{␣default␣␣␣␣␣␣␣␣=>␣[],
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣strict_type␣␣␣␣=>␣1
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣},
␣␣␣␣␣␣␣␣␣␣␣␣employer␣␣␣␣=>␣{␣default␣=>␣'NSA',␣no_override␣=>␣1␣},
␣␣␣␣␣␣␣␣};

␣␣␣␣␣␣␣␣###␣check()␣returns␣a␣hashref␣of␣parsed␣args␣on␣success␣###
␣␣␣␣␣␣␣␣my␣$parsed_args␣=␣check(␣$tmpl,␣\%hash,␣$VERBOSE␣)
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣or␣die␣qw[Could␣not␣parse␣arguments!];

␣␣␣␣␣␣␣␣...␣other␣code␣here␣...
␣␣␣␣}

␣␣␣␣my␣$ok␣=␣allow(␣$colour,␣[qw|blue␣green␣yellow|]␣);

␣␣␣␣my␣$error␣=␣Params::Check::last_error();


=head1␣DESCRIPTION

Params::Check␣is␣a␣generic␣input␣parsing/checking␣mechanism.

It␣allows␣you␣to␣validate␣input␣via␣a␣template.␣The␣only␣requirement
is␣that␣the␣arguments␣must␣be␣named.

Params::Check␣can␣do␣the␣following␣things␣for␣you:

=over␣4

=item␣*

Convert␣all␣keys␣to␣lowercase

=item␣*

Check␣if␣all␣required␣arguments␣have␣been␣provided

=item␣*

Set␣arguments␣that␣have␣not␣been␣provided␣to␣the␣default

=item␣*

Weed␣out␣arguments␣that␣are␣not␣supported␣and␣warn␣about␣them␣to␣the
user

=item␣*

Validate␣the␣arguments␣given␣by␣the␣user␣based␣on␣strings,␣regexes,
lists␣or␣even␣subroutines

=item␣*

Enforce␣type␣integrity␣if␣required

=back

Most␣of␣Params::Check's␣power␣comes␣from␣its␣template,␣which␣we'll
discuss␣below:

=head1␣Template

As␣you␣can␣see␣in␣the␣synopsis,␣based␣on␣your␣template,␣the␣arguments
provided␣will␣be␣validated.

The␣template␣can␣take␣a␣different␣set␣of␣rules␣per␣key␣that␣is␣used.

The␣following␣rules␣are␣available:

=over␣4

=item␣default

This␣is␣the␣default␣value␣if␣none␣was␣provided␣by␣the␣user.
This␣is␣also␣the␣type␣C<strict_type>␣will␣look␣at␣when␣checking␣type
integrity␣(see␣below).

=item␣required

A␣boolean␣flag␣that␣indicates␣if␣this␣argument␣was␣a␣required
argument.␣If␣marked␣as␣required␣and␣not␣provided,␣check()␣will␣fail.

=item␣strict_type

This␣does␣a␣C<ref()>␣check␣on␣the␣argument␣provided.␣The␣C<ref>␣of␣the
argument␣must␣be␣the␣same␣as␣the␣C<ref>␣of␣the␣default␣value␣for␣this
check␣to␣pass.

This␣is␣very␣useful␣if␣you␣insist␣on␣taking␣an␣array␣reference␣as
argument␣for␣example.

=item␣defined

If␣this␣template␣key␣is␣true,␣enforces␣that␣if␣this␣key␣is␣provided␣by
user␣input,␣its␣value␣is␣C<defined>.␣This␣just␣means␣that␣the␣user␣is
not␣allowed␣to␣pass␣C<undef>␣as␣a␣value␣for␣this␣key␣and␣is␣equivalent
to:
␣␣␣␣allow␣=>␣sub␣{␣defined␣$_[0]␣&&␣OTHER␣TESTS␣}

=item␣no_override

This␣allows␣you␣to␣specify␣C<constants>␣in␣your␣template.␣ie,␣they
keys␣that␣are␣not␣allowed␣to␣be␣altered␣by␣the␣user.␣It␣pretty␣much
allows␣you␣to␣keep␣all␣your␣C<configurable>␣data␣in␣one␣place;␣the
C<Params::Check>␣template.

=item␣store

This␣allows␣you␣to␣pass␣a␣reference␣to␣a␣scalar,␣in␣which␣the␣data
will␣be␣stored:

␣␣␣␣my␣$x;
␣␣␣␣my␣$args␣=␣check(foo␣=>␣{␣default␣=>␣1,␣store␣=>␣\$x␣},␣$input);

This␣is␣basically␣shorthand␣for␣saying:

␣␣␣␣my␣$args␣=␣check(␣{␣foo␣=>␣{␣default␣=>␣1␣},␣$input␣);
␣␣␣␣my␣$x␣␣␣␣=␣$args->{foo};

You␣can␣alter␣the␣global␣variable␣$Params::Check::NO_DUPLICATES␣to
control␣whether␣the␣C<store>'d␣key␣will␣still␣be␣present␣in␣your
result␣set.␣See␣the␣L<Global␣Variables>␣section␣below.

=item␣allow

A␣set␣of␣criteria␣used␣to␣validate␣a␣particular␣piece␣of␣data␣if␣it
has␣to␣adhere␣to␣particular␣rules.

See␣the␣C<allow()>␣function␣for␣details.

=back

=head1␣Functions

=head2␣check(␣\%tmpl,␣\%args,␣[$verbose]␣);

This␣function␣is␣not␣exported␣by␣default,␣so␣you'll␣have␣to␣ask␣for␣it
via:

␣␣␣␣use␣Params::Check␣qw[check];

or␣use␣its␣fully␣qualified␣name␣instead.

C<check>␣takes␣a␣list␣of␣arguments,␣as␣follows:

=over␣4

=item␣Template

This␣is␣a␣hash␣reference␣which␣contains␣a␣template␣as␣explained␣in␣the
C<SYNOPSIS>␣and␣C<Template>␣section.

=item␣Arguments

This␣is␣a␣reference␣to␣a␣hash␣of␣named␣arguments␣which␣need␣checking.

=item␣Verbose

A␣boolean␣to␣indicate␣whether␣C<check>␣should␣be␣verbose␣and␣warn
about␣what␣went␣wrong␣in␣a␣check␣or␣not.

You␣can␣enable␣this␣program␣wide␣by␣setting␣the␣package␣variable
C<$Params::Check::VERBOSE>␣to␣a␣true␣value.␣For␣details,␣see␣the
section␣on␣C<Global␣Variables>␣below.

=back

C<check>␣will␣return␣when␣it␣fails,␣or␣a␣hashref␣with␣lowercase
keys␣of␣parsed␣arguments␣when␣it␣succeeds.

So␣a␣typical␣call␣to␣check␣would␣look␣like␣this:

␣␣␣␣my␣$parsed␣=␣check(␣\%template,␣\%arguments,␣$VERBOSE␣)
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣or␣warn␣q[Arguments␣could␣not␣be␣parsed!];

A␣lot␣of␣the␣behaviour␣of␣C<check()>␣can␣be␣altered␣by␣setting
package␣variables.␣See␣the␣section␣on␣C<Global␣Variables>␣for␣details
on␣this.

=cut
----------
Range: (2073131,2076804) (3673)
=head1␣Global␣Variables

The␣behaviour␣of␣Params::Check␣can␣be␣altered␣by␣changing␣the
following␣global␣variables:

=head2␣$Params::Check::VERBOSE

This␣controls␣whether␣Params::Check␣will␣issue␣warnings␣and
explanations␣as␣to␣why␣certain␣things␣may␣have␣failed.
If␣you␣set␣it␣to␣0,␣Params::Check␣will␣not␣output␣any␣warnings.

The␣default␣is␣1␣when␣L<warnings>␣are␣enabled,␣0␣otherwise;

=head2␣$Params::Check::STRICT_TYPE

This␣works␣like␣the␣C<strict_type>␣option␣you␣can␣pass␣to␣C<check>,
which␣will␣turn␣on␣C<strict_type>␣globally␣for␣all␣calls␣to␣C<check>.

The␣default␣is␣0;

=head2␣$Params::Check::ALLOW_UNKNOWN

If␣you␣set␣this␣flag,␣unknown␣options␣will␣still␣be␣present␣in␣the
return␣value,␣rather␣than␣filtered␣out.␣This␣is␣useful␣if␣your
subroutine␣is␣only␣interested␣in␣a␣few␣arguments,␣and␣wants␣to␣pass
the␣rest␣on␣blindly␣to␣perhaps␣another␣subroutine.

The␣default␣is␣0;

=head2␣$Params::Check::STRIP_LEADING_DASHES

If␣you␣set␣this␣flag,␣all␣keys␣passed␣in␣the␣following␣manner:

␣␣␣␣function(␣-key␣=>␣'val'␣);

will␣have␣their␣leading␣dashes␣stripped.

=head2␣$Params::Check::NO_DUPLICATES

If␣set␣to␣true,␣all␣keys␣in␣the␣template␣that␣are␣marked␣as␣to␣be
stored␣in␣a␣scalar,␣will␣also␣be␣removed␣from␣the␣result␣set.

Default␣is␣false,␣meaning␣that␣when␣you␣use␣C<store>␣as␣a␣template
key,␣C<check>␣will␣put␣it␣both␣in␣the␣scalar␣you␣supplied,␣as␣well␣as
in␣the␣hashref␣it␣returns.

=head2␣$Params::Check::PRESERVE_CASE

If␣set␣to␣true,␣L<Params::Check>␣will␣no␣longer␣convert␣all␣keys␣from
the␣user␣input␣to␣lowercase,␣but␣instead␣expect␣them␣to␣be␣in␣the
case␣the␣template␣provided.␣This␣is␣useful␣when␣you␣want␣to␣use
similar␣keys␣with␣different␣casing␣in␣your␣templates.

Understand␣that␣this␣removes␣the␣case-insensitivity␣feature␣of␣this
module.

Default␣is␣0;

=head2␣$Params::Check::ONLY_ALLOW_DEFINED

If␣set␣to␣true,␣L<Params::Check>␣will␣require␣all␣values␣passed␣to␣be
C<defined>.␣If␣you␣wish␣to␣enable␣this␣on␣a␣'per␣key'␣basis,␣use␣the
template␣option␣C<defined>␣instead.

Default␣is␣0;

=head2␣$Params::Check::SANITY_CHECK_TEMPLATE

If␣set␣to␣true,␣L<Params::Check>␣will␣sanity␣check␣templates,␣validating
for␣errors␣and␣unknown␣keys.␣Although␣very␣useful␣for␣debugging,␣this
can␣be␣somewhat␣slow␣in␣hot-code␣and␣large␣loops.

To␣disable␣this␣check,␣set␣this␣variable␣to␣C<false>.

Default␣is␣1;

=head2␣$Params::Check::WARNINGS_FATAL

If␣set␣to␣true,␣L<Params::Check>␣will␣C<croak>␣when␣an␣error␣during
template␣validation␣occurs,␣rather␣than␣return␣C<false>.

Default␣is␣0;

=head2␣$Params::Check::CALLER_DEPTH

This␣global␣modifies␣the␣argument␣given␣to␣C<caller()>␣by
C<Params::Check::check()>␣and␣is␣useful␣if␣you␣have␣a␣custom␣wrapper
function␣around␣C<Params::Check::check()>.␣The␣value␣must␣be␣an
integer,␣indicating␣the␣number␣of␣wrapper␣functions␣inserted␣between
the␣real␣function␣call␣and␣C<Params::Check::check()>.

Example␣wrapper␣function,␣using␣a␣custom␣stacktrace:

␣␣␣␣sub␣check␣{
␣␣␣␣␣␣␣␣my␣($template,␣$args_in)␣=␣@_;

␣␣␣␣␣␣␣␣local␣$Params::Check::WARNINGS_FATAL␣=␣1;
␣␣␣␣␣␣␣␣local␣$Params::Check::CALLER_DEPTH␣=␣$Params::Check::CALLER_DEPTH␣+␣1;
␣␣␣␣␣␣␣␣my␣$args_out␣=␣Params::Check::check($template,␣$args_in);

␣␣␣␣␣␣␣␣my_stacktrace(Params::Check::last_error)␣unless␣$args_out;

␣␣␣␣␣␣␣␣return␣$args_out;
␣␣␣␣}

Default␣is␣0;

=head1␣Acknowledgements

Thanks␣to␣Richard␣Soderberg␣for␣his␣performance␣improvements.

=head1␣BUG␣REPORTS

Please␣report␣bugs␣or␣other␣issues␣to␣E<lt>bug-params-check@rt.cpan.orgE<gt>.

=head1␣AUTHOR

This␣module␣by␣Jos␣Boumans␣E<lt>kane@cpan.orgE<gt>.

=head1␣COPYRIGHT

This␣library␣is␣free␣software;␣you␣may␣redistribute␣and/or␣modify␣it
under␣the␣same␣terms␣as␣Perl␣itself.


=cut
----------
Range: (2242343,2243829) (1486)
qw{
␣␣␣␣context␣release
␣␣␣␣context_do
␣␣␣␣no_context
␣␣␣␣intercept␣intercept_deep
␣␣␣␣run_subtest

␣␣␣␣test2_init_done
␣␣␣␣test2_load_done
␣␣␣␣test2_load
␣␣␣␣test2_start_preload
␣␣␣␣test2_stop_preload
␣␣␣␣test2_in_preload
␣␣␣␣test2_is_testing_done

␣␣␣␣test2_set_is_end
␣␣␣␣test2_unset_is_end
␣␣␣␣test2_get_is_end

␣␣␣␣test2_pid
␣␣␣␣test2_tid
␣␣␣␣test2_stack
␣␣␣␣test2_no_wait
␣␣␣␣test2_ipc_wait_enable
␣␣␣␣test2_ipc_wait_disable
␣␣␣␣test2_ipc_wait_enabled

␣␣␣␣test2_add_uuid_via

␣␣␣␣test2_add_callback_testing_done

␣␣␣␣test2_add_callback_context_aquire
␣␣␣␣test2_add_callback_context_acquire
␣␣␣␣test2_add_callback_context_init
␣␣␣␣test2_add_callback_context_release
␣␣␣␣test2_add_callback_exit
␣␣␣␣test2_add_callback_post_load
␣␣␣␣test2_add_callback_pre_subtest
␣␣␣␣test2_list_context_aquire_callbacks
␣␣␣␣test2_list_context_acquire_callbacks
␣␣␣␣test2_list_context_init_callbacks
␣␣␣␣test2_list_context_release_callbacks
␣␣␣␣test2_list_exit_callbacks
␣␣␣␣test2_list_post_load_callbacks
␣␣␣␣test2_list_pre_subtest_callbacks

␣␣␣␣test2_ipc
␣␣␣␣test2_has_ipc
␣␣␣␣test2_ipc_disable
␣␣␣␣test2_ipc_disabled
␣␣␣␣test2_ipc_drivers
␣␣␣␣test2_ipc_add_driver
␣␣␣␣test2_ipc_polling
␣␣␣␣test2_ipc_disable_polling
␣␣␣␣test2_ipc_enable_polling
␣␣␣␣test2_ipc_get_pending
␣␣␣␣test2_ipc_set_pending
␣␣␣␣test2_ipc_get_timeout
␣␣␣␣test2_ipc_set_timeout

␣␣␣␣test2_formatter
␣␣␣␣test2_formatters
␣␣␣␣test2_formatter_add
␣␣␣␣test2_formatter_set

␣␣␣␣test2_stdout
␣␣␣␣test2_stderr
␣␣␣␣test2_reset_io
};
----------
Range: (2276978,2280495) (3517)
=pod

=encoding␣UTF-8

=head1␣NAME

Test2::Util::Facets2Legacy␣-␣Convert␣facet␣data␣to␣the␣legacy␣event␣API.

=head1␣DESCRIPTION

This␣module␣exports␣several␣subroutines␣from␣the␣older␣event␣API␣(see
L<Test2::Event>).␣These␣subroutines␣can␣be␣used␣as␣methods␣on␣any␣object␣that
provides␣a␣custom␣C<facet_data()>␣method.␣These␣subroutines␣can␣also␣be␣used␣as
functions␣that␣take␣a␣facet␣data␣hashref␣as␣arguments.

=head1␣SYNOPSIS

=head2␣AS␣METHODS

␣␣␣␣package␣My::Event;

␣␣␣␣use␣Test2::Util::Facets2Legacy␣':ALL';

␣␣␣␣sub␣facet_data␣{␣return␣{␣...␣}␣}

Then␣to␣use␣it:

␣␣␣␣my␣$e␣=␣My::Event->new(...);

␣␣␣␣my␣$causes_fail␣=␣$e->causes_fail;
␣␣␣␣my␣$summary␣␣␣␣␣=␣$e->summary;
␣␣␣␣....

=head2␣AS␣FUNCTIONS

␣␣␣␣use␣Test2::Util::Facets2Legacy␣':ALL';

␣␣␣␣my␣$f␣=␣{
␣␣␣␣␣␣␣␣assert␣=>␣{␣...␣},
␣␣␣␣␣␣␣␣info␣=>␣[{...},␣...],
␣␣␣␣␣␣␣␣control␣=>␣{...},
␣␣␣␣␣␣␣␣...
␣␣␣␣};

␣␣␣␣my␣$causes_fail␣=␣causes_fail($f);
␣␣␣␣my␣$summary␣␣␣␣␣=␣summary($f);

=head1␣NOTE␣ON␣CYCLES

When␣used␣as␣methods,␣all␣these␣subroutines␣call␣C<<␣$e->facet_data()␣>>.␣The
default␣C<facet_data()>␣method␣in␣L<Test2::Event>␣relies␣on␣the␣legacy␣methods
this␣module␣emulates␣in␣order␣to␣work.␣As␣a␣result␣of␣this␣it␣is␣very␣easy␣to
create␣infinite␣recursion␣bugs.

These␣methods␣have␣cycle␣detection␣and␣will␣throw␣an␣exception␣early␣if␣a␣cycle
is␣detected.␣C<uuid()>␣is␣currently␣the␣only␣subroutine␣in␣this␣library␣that
has␣a␣fallback␣behavior␣when␣cycles␣are␣detected.

=head1␣EXPORTS

Nothing␣is␣exported␣by␣default.␣You␣must␣specify␣which␣methods␣to␣import,␣or
use␣the␣':ALL'␣tag.

=over␣4

=item␣$bool␣=␣$e->causes_fail()

=item␣$bool␣=␣causes_fail($f)

Check␣if␣the␣event␣or␣facets␣result␣in␣a␣failing␣state.

=item␣$bool␣=␣$e->diagnostics()

=item␣$bool␣=␣diagnostics($f)

Check␣if␣the␣event␣or␣facets␣contain␣any␣diagnostics␣information.

=item␣$bool␣=␣$e->global()

=item␣$bool␣=␣global($f)

Check␣if␣the␣event␣or␣facets␣need␣to␣be␣globally␣processed.

=item␣$bool␣=␣$e->increments_count()

=item␣$bool␣=␣increments_count($f)

Check␣if␣the␣event␣or␣facets␣make␣an␣assertion.

=item␣$bool␣=␣$e->no_display()

=item␣$bool␣=␣no_display($f)

Check␣if␣the␣event␣or␣facets␣should␣be␣rendered␣or␣hidden.

=item␣($max,␣$directive,␣$reason)␣=␣$e->sets_plan()

=item␣($max,␣$directive,␣$reason)␣=␣sets_plan($f)

Check␣if␣the␣event␣or␣facets␣set␣a␣plan,␣and␣return␣the␣plan␣details.

=item␣$id␣=␣$e->subtest_id()

=item␣$id␣=␣subtest_id($f)

Get␣the␣subtest␣id,␣if␣any.

=item␣$string␣=␣$e->summary()

=item␣$string␣=␣summary($f)

Get␣the␣summary␣of␣the␣event␣or␣facets␣hash,␣if␣any.

=item␣$undef_or_int␣=␣$e->terminate()

=item␣$undef_or_int␣=␣terminate($f)

Check␣if␣the␣event␣or␣facets␣should␣result␣in␣process␣termination,␣if␣so␣the
exit␣code␣is␣returned␣(which␣could␣be␣0).␣undef␣is␣returned␣if␣no␣termination
is␣requested.

=item␣$uuid␣=␣$e->uuid()

=item␣$uuid␣=␣uuid($f)

Get␣the␣UUID␣of␣the␣facets␣or␣event.

B<Note:>␣This␣will␣fall␣back␣to␣C<<␣$e->SUPER::uuid()␣>>␣if␣a␣cycle␣is
detected␣and␣an␣event␣is␣used␣as␣the␣argument.

=back

=head1␣SOURCE

The␣source␣code␣repository␣for␣Test2␣can␣be␣found␣at
F<http://github.com/Test-More/test-more/>.

=head1␣MAINTAINERS

=over␣4

=item␣Chad␣Granum␣E<lt>exodist@cpan.orgE<gt>

=back

=head1␣AUTHORS

=over␣4

=item␣Chad␣Granum␣E<lt>exodist@cpan.orgE<gt>

=back

=head1␣COPYRIGHT

Copyright␣2020␣Chad␣Granum␣E<lt>exodist@cpan.orgE<gt>.

This␣program␣is␣free␣software;␣you␣can␣redistribute␣it␣and/or
modify␣it␣under␣the␣same␣terms␣as␣Perl␣itself.

See␣F<http://dev.perl.org/licenses/>

=cut
----------
Range: (2366040,2369069) (3029)
=pod

=encoding␣UTF-8

=head1␣NAME

Perl::OSType␣-␣Map␣Perl␣operating␣system␣names␣to␣generic␣types

=head1␣VERSION

version␣1.010

=head1␣SYNOPSIS

␣␣use␣Perl::OSType␣':all';

␣␣$current_type␣=␣os_type();
␣␣$other_type␣=␣os_type('dragonfly');␣#␣gives␣'Unix'

=head1␣DESCRIPTION

Modules␣that␣provide␣OS-specific␣behaviors␣often␣need␣to␣know␣if
the␣current␣operating␣system␣matches␣a␣more␣generic␣type␣of
operating␣systems.␣For␣example,␣'linux'␣is␣a␣type␣of␣'Unix'␣operating␣system
and␣so␣is␣'freebsd'.

This␣module␣provides␣a␣mapping␣between␣an␣operating␣system␣name␣as␣given␣by
C<$^O>␣and␣a␣more␣generic␣type.␣␣The␣initial␣version␣is␣based␣on␣the␣OS␣type
mappings␣provided␣in␣L<Module::Build>␣and␣L<ExtUtils::CBuilder>.␣␣(Thus,
Microsoft␣operating␣systems␣are␣given␣the␣type␣'Windows'␣rather␣than␣'Win32'.)

=head1␣USAGE

No␣functions␣are␣exported␣by␣default.␣The␣export␣tag␣":all"␣will␣export
all␣functions␣listed␣below.

=head2␣os_type()

␣␣$os_type␣=␣os_type();
␣␣$os_type␣=␣os_type('MSWin32');

Returns␣a␣single,␣generic␣OS␣type␣for␣a␣given␣operating␣system␣name.␣␣With␣no
arguments,␣returns␣the␣OS␣type␣for␣the␣current␣value␣of␣C<$^O>.␣␣If␣the
operating␣system␣is␣not␣recognized,␣the␣function␣will␣return␣the␣empty␣string.

=head2␣is_os_type()

␣␣$is_windows␣=␣is_os_type('Windows');
␣␣$is_unix␣␣␣␣=␣is_os_type('Unix',␣'dragonfly');

Given␣an␣OS␣type␣and␣OS␣name,␣returns␣true␣or␣false␣if␣the␣OS␣name␣is␣of␣the
given␣type.␣␣As␣with␣C<os_type>,␣it␣will␣use␣the␣current␣operating␣system␣as␣a
default␣if␣no␣OS␣name␣is␣provided.

=head1␣SEE␣ALSO

=over␣4

=item␣*

L<Devel::CheckOS>

=back

=for␣:stopwords␣cpan␣testmatrix␣url␣annocpan␣anno␣bugtracker␣rt␣cpants␣kwalitee␣diff␣irc␣mailto␣metadata␣placeholders␣metacpan

=head1␣SUPPORT

=head2␣Bugs␣/␣Feature␣Requests

Please␣report␣any␣bugs␣or␣feature␣requests␣through␣the␣issue␣tracker
at␣L<https://github.com/Perl-Toolchain-Gang/Perl-OSType/issues>.
You␣will␣be␣notified␣automatically␣of␣any␣progress␣on␣your␣issue.

=head2␣Source␣Code

This␣is␣open␣source␣software.␣␣The␣code␣repository␣is␣available␣for
public␣review␣and␣contribution␣under␣the␣terms␣of␣the␣license.

L<https://github.com/Perl-Toolchain-Gang/Perl-OSType>

␣␣git␣clone␣https://github.com/Perl-Toolchain-Gang/Perl-OSType.git

=head1␣AUTHOR

David␣Golden␣<dagolden@cpan.org>

=head1␣CONTRIBUTORS

=for␣stopwords␣Chris␣'BinGOs'␣Williams␣David␣Golden␣Graham␣Ollis␣Jonas␣B.␣Nielsen␣Owain␣G.␣Ainsworth␣Paul␣Green␣Piotr␣Roszatycki

=over␣4

=item␣*

Chris␣'BinGOs'␣Williams␣<chris@bingosnet.co.uk>

=item␣*

David␣Golden␣<xdg@xdg.me>

=item␣*

Graham␣Ollis␣<plicease@cpan.org>

=item␣*

Jonas␣B.␣Nielsen␣<jonasbn@hoarfrost.local>

=item␣*

Owain␣G.␣Ainsworth␣<oga@nicotinebsd.org>

=item␣*

Paul␣Green␣<Paul.Green@stratus.com>

=item␣*

Piotr␣Roszatycki␣<piotr.roszatycki@gmail.com>

=back

=head1␣COPYRIGHT␣AND␣LICENSE

This␣software␣is␣copyright␣(c)␣2016␣by␣David␣Golden.

This␣is␣free␣software;␣you␣can␣redistribute␣it␣and/or␣modify␣it␣under
the␣same␣terms␣as␣the␣Perl␣5␣programming␣language␣system␣itself.

=cut
----------
Range: (2417440,2422439) (4999)
=head1␣NAME

Thread::Semaphore␣-␣Thread-safe␣semaphores

=head1␣VERSION

This␣document␣describes␣Thread::Semaphore␣version␣2.13

=head1␣SYNOPSIS

␣␣␣␣use␣Thread::Semaphore;
␣␣␣␣my␣$s␣=␣Thread::Semaphore->new();
␣␣␣␣$s->down();␣␣␣#␣Also␣known␣as␣the␣semaphore␣P␣operation.
␣␣␣␣#␣The␣guarded␣section␣is␣here
␣␣␣␣$s->up();␣␣␣␣␣#␣Also␣known␣as␣the␣semaphore␣V␣operation.

␣␣␣␣#␣Decrement␣the␣semaphore␣only␣if␣it␣would␣immediately␣succeed.
␣␣␣␣if␣($s->down_nb())␣{
␣␣␣␣␣␣␣␣#␣The␣guarded␣section␣is␣here
␣␣␣␣␣␣␣␣$s->up();
␣␣␣␣}

␣␣␣␣#␣Forcefully␣decrement␣the␣semaphore␣even␣if␣its␣count␣goes␣below␣0.
␣␣␣␣$s->down_force();

␣␣␣␣#␣The␣default␣value␣for␣semaphore␣operations␣is␣1
␣␣␣␣my␣$s␣=␣Thread::Semaphore->new($initial_value);
␣␣␣␣$s->down($down_value);
␣␣␣␣$s->up($up_value);
␣␣␣␣if␣($s->down_nb($down_value))␣{
␣␣␣␣␣␣␣␣...
␣␣␣␣␣␣␣␣$s->up($up_value);
␣␣␣␣}
␣␣␣␣$s->down_force($down_value);

=head1␣DESCRIPTION

Semaphores␣provide␣a␣mechanism␣to␣regulate␣access␣to␣resources.␣␣Unlike
locks,␣semaphores␣aren't␣tied␣to␣particular␣scalars,␣and␣so␣may␣be␣used␣to
control␣access␣to␣anything␣you␣care␣to␣use␣them␣for.

Semaphores␣don't␣limit␣their␣values␣to␣zero␣and␣one,␣so␣they␣can␣be␣used␣to
control␣access␣to␣some␣resource␣that␣there␣may␣be␣more␣than␣one␣of␣(e.g.,
filehandles).␣␣Increment␣and␣decrement␣amounts␣aren't␣fixed␣at␣one␣either,
so␣threads␣can␣reserve␣or␣return␣multiple␣resources␣at␣once.

=head1␣METHODS

=over␣8

=item␣->new()

=item␣->new(NUMBER)

C<new>␣creates␣a␣new␣semaphore,␣and␣initializes␣its␣count␣to␣the␣specified
number␣(which␣must␣be␣an␣integer).␣␣If␣no␣number␣is␣specified,␣the
semaphore's␣count␣defaults␣to␣1.

=item␣->down()

=item␣->down(NUMBER)

The␣C<down>␣method␣decreases␣the␣semaphore's␣count␣by␣the␣specified␣number
(which␣must␣be␣an␣integer␣>=␣1),␣or␣by␣one␣if␣no␣number␣is␣specified.

If␣the␣semaphore's␣count␣would␣drop␣below␣zero,␣this␣method␣will␣block
until␣such␣time␣as␣the␣semaphore's␣count␣is␣greater␣than␣or␣equal␣to␣the
amount␣you're␣C<down>ing␣the␣semaphore's␣count␣by.

This␣is␣the␣semaphore␣"P␣operation"␣(the␣name␣derives␣from␣the␣Dutch
word␣"pak",␣which␣means␣"capture"␣--␣the␣semaphore␣operations␣were
named␣by␣the␣late␣Dijkstra,␣who␣was␣Dutch).

=item␣->down_nb()

=item␣->down_nb(NUMBER)

The␣C<down_nb>␣method␣attempts␣to␣decrease␣the␣semaphore's␣count␣by␣the
specified␣number␣(which␣must␣be␣an␣integer␣>=␣1),␣or␣by␣one␣if␣no␣number
is␣specified.

If␣the␣semaphore's␣count␣would␣drop␣below␣zero,␣this␣method␣will␣return
I<false>,␣and␣the␣semaphore's␣count␣remains␣unchanged.␣␣Otherwise,␣the
semaphore's␣count␣is␣decremented␣and␣this␣method␣returns␣I<true>.

=item␣->down_force()

=item␣->down_force(NUMBER)

The␣C<down_force>␣method␣decreases␣the␣semaphore's␣count␣by␣the␣specified
number␣(which␣must␣be␣an␣integer␣>=␣1),␣or␣by␣one␣if␣no␣number␣is␣specified.
This␣method␣does␣not␣block,␣and␣may␣cause␣the␣semaphore's␣count␣to␣drop
below␣zero.

=item␣->down_timed(TIMEOUT)

=item␣->down_timed(TIMEOUT,␣NUMBER)

The␣C<down_timed>␣method␣attempts␣to␣decrease␣the␣semaphore's␣count␣by␣1
or␣by␣the␣specified␣number␣within␣the␣specified␣timeout␣period␣given␣in
seconds␣(which␣must␣be␣an␣integer␣>=␣0).

If␣the␣semaphore's␣count␣would␣drop␣below␣zero,␣this␣method␣will␣block
until␣either␣the␣semaphore's␣count␣is␣greater␣than␣or␣equal␣to␣the
amount␣you're␣C<down>ing␣the␣semaphore's␣count␣by,␣or␣until␣the␣timeout␣is
reached.

If␣the␣timeout␣is␣reached,␣this␣method␣will␣return␣I<false>,␣and␣the
semaphore's␣count␣remains␣unchanged.␣␣Otherwise,␣the␣semaphore's␣count␣is
decremented␣and␣this␣method␣returns␣I<true>.

=item␣->up()

=item␣->up(NUMBER)

The␣C<up>␣method␣increases␣the␣semaphore's␣count␣by␣the␣number␣specified
(which␣must␣be␣an␣integer␣>=␣1),␣or␣by␣one␣if␣no␣number␣is␣specified.

This␣will␣unblock␣any␣thread␣that␣is␣blocked␣trying␣to␣C<down>␣the
semaphore␣if␣the␣C<up>␣raises␣the␣semaphore's␣count␣above␣the␣amount␣that
the␣C<down>␣is␣trying␣to␣decrement␣it␣by.␣␣For␣example,␣if␣three␣threads
are␣blocked␣trying␣to␣C<down>␣a␣semaphore␣by␣one,␣and␣another␣thread␣C<up>s
the␣semaphore␣by␣two,␣then␣two␣of␣the␣blocked␣threads␣(which␣two␣is
indeterminate)␣will␣become␣unblocked.

This␣is␣the␣semaphore␣"V␣operation"␣(the␣name␣derives␣from␣the␣Dutch
word␣"vrij",␣which␣means␣"release").

=back

=head1␣NOTES

Semaphores␣created␣by␣L<Thread::Semaphore>␣can␣be␣used␣in␣both␣threaded␣and
non-threaded␣applications.␣␣This␣allows␣you␣to␣write␣modules␣and␣packages
that␣potentially␣make␣use␣of␣semaphores,␣and␣that␣will␣function␣in␣either
environment.

=head1␣SEE␣ALSO

Thread::Semaphore␣on␣MetaCPAN:
L<https://metacpan.org/release/Thread-Semaphore>

Code␣repository␣for␣CPAN␣distribution:
L<https://github.com/Dual-Life/Thread-Semaphore>

L<threads>,␣L<threads::shared>

Sample␣code␣in␣the␣I<examples>␣directory␣of␣this␣distribution␣on␣CPAN.

=head1␣MAINTAINER

Jerry␣D.␣Hedden,␣S<E<lt>jdhedden␣AT␣cpan␣DOT␣orgE<gt>>

=head1␣LICENSE

This␣program␣is␣free␣software;␣you␣can␣redistribute␣it␣and/or␣modify␣it␣under
the␣same␣terms␣as␣Perl␣itself.

=cut
----------
Range: (2430148,2440128) (9980)
=head1␣NAME

Thread::Queue␣-␣Thread-safe␣queues

=head1␣VERSION

This␣document␣describes␣Thread::Queue␣version␣3.14

=head1␣SYNOPSIS

␣␣␣␣use␣strict;
␣␣␣␣use␣warnings;

␣␣␣␣use␣threads;
␣␣␣␣use␣Thread::Queue;

␣␣␣␣my␣$q␣=␣Thread::Queue->new();␣␣␣␣#␣A␣new␣empty␣queue

␣␣␣␣#␣Worker␣thread
␣␣␣␣my␣$thr␣=␣threads->create(
␣␣␣␣␣␣␣␣sub␣{
␣␣␣␣␣␣␣␣␣␣␣␣#␣Thread␣will␣loop␣until␣no␣more␣work
␣␣␣␣␣␣␣␣␣␣␣␣while␣(defined(my␣$item␣=␣$q->dequeue()))␣{
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣Do␣work␣on␣$item
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣...
␣␣␣␣␣␣␣␣␣␣␣␣}
␣␣␣␣␣␣␣␣}
␣␣␣␣);

␣␣␣␣#␣Send␣work␣to␣the␣thread
␣␣␣␣$q->enqueue($item1,␣...);
␣␣␣␣#␣Signal␣that␣there␣is␣no␣more␣work␣to␣be␣sent
␣␣␣␣$q->end();
␣␣␣␣#␣Join␣up␣with␣the␣thread␣when␣it␣finishes
␣␣␣␣$thr->join();

␣␣␣␣...

␣␣␣␣#␣Count␣of␣items␣in␣the␣queue
␣␣␣␣my␣$left␣=␣$q->pending();

␣␣␣␣#␣Non-blocking␣dequeue
␣␣␣␣if␣(defined(my␣$item␣=␣$q->dequeue_nb()))␣{
␣␣␣␣␣␣␣␣#␣Work␣on␣$item
␣␣␣␣}

␣␣␣␣#␣Blocking␣dequeue␣with␣5-second␣timeout
␣␣␣␣if␣(defined(my␣$item␣=␣$q->dequeue_timed(5)))␣{
␣␣␣␣␣␣␣␣#␣Work␣on␣$item
␣␣␣␣}

␣␣␣␣#␣Set␣a␣size␣for␣a␣queue
␣␣␣␣$q->limit␣=␣5;

␣␣␣␣#␣Get␣the␣second␣item␣in␣the␣queue␣without␣dequeuing␣anything
␣␣␣␣my␣$item␣=␣$q->peek(1);

␣␣␣␣#␣Insert␣two␣items␣into␣the␣queue␣just␣behind␣the␣head
␣␣␣␣$q->insert(1,␣$item1,␣$item2);

␣␣␣␣#␣Extract␣the␣last␣two␣items␣on␣the␣queue
␣␣␣␣my␣($item1,␣$item2)␣=␣$q->extract(-2,␣2);

=head1␣DESCRIPTION

This␣module␣provides␣thread-safe␣FIFO␣queues␣that␣can␣be␣accessed␣safely␣by
any␣number␣of␣threads.

Any␣data␣types␣supported␣by␣L<threads::shared>␣can␣be␣passed␣via␣queues:

=over

=item␣Ordinary␣scalars

=item␣Array␣refs

=item␣Hash␣refs

=item␣Scalar␣refs

=item␣Objects␣based␣on␣the␣above

=back

Ordinary␣scalars␣are␣added␣to␣queues␣as␣they␣are.

If␣not␣already␣thread-shared,␣the␣other␣complex␣data␣types␣will␣be␣cloned
(recursively,␣if␣needed,␣and␣including␣any␣C<bless>ings␣and␣read-only
settings)␣into␣thread-shared␣structures␣before␣being␣placed␣onto␣a␣queue.

For␣example,␣the␣following␣would␣cause␣L<Thread::Queue>␣to␣create␣a␣empty,
shared␣array␣reference␣via␣C<&shared([])>,␣copy␣the␣elements␣'foo',␣'bar'
and␣'baz'␣from␣C<@ary>␣into␣it,␣and␣then␣place␣that␣shared␣reference␣onto
the␣queue:

␣my␣@ary␣=␣qw/foo␣bar␣baz/;
␣$q->enqueue(\@ary);

However,␣for␣the␣following,␣the␣items␣are␣already␣shared,␣so␣their␣references
are␣added␣directly␣to␣the␣queue,␣and␣no␣cloning␣takes␣place:

␣my␣@ary␣:shared␣=␣qw/foo␣bar␣baz/;
␣$q->enqueue(\@ary);

␣my␣$obj␣=␣&shared({});
␣$$obj{'foo'}␣=␣'bar';
␣$$obj{'qux'}␣=␣99;
␣bless($obj,␣'My::Class');
␣$q->enqueue($obj);

See␣L</"LIMITATIONS">␣for␣caveats␣related␣to␣passing␣objects␣via␣queues.

=head1␣QUEUE␣CREATION

=over

=item␣->new()

Creates␣a␣new␣empty␣queue.

=item␣->new(LIST)

Creates␣a␣new␣queue␣pre-populated␣with␣the␣provided␣list␣of␣items.

=back

=head1␣BASIC␣METHODS

The␣following␣methods␣deal␣with␣queues␣on␣a␣FIFO␣basis.

=over

=item␣->enqueue(LIST)

Adds␣a␣list␣of␣items␣onto␣the␣end␣of␣the␣queue.

=item␣->dequeue()

=item␣->dequeue(COUNT)

Removes␣the␣requested␣number␣of␣items␣(default␣is␣1)␣from␣the␣head␣of␣the
queue,␣and␣returns␣them.␣␣If␣the␣queue␣contains␣fewer␣than␣the␣requested
number␣of␣items,␣then␣the␣thread␣will␣be␣blocked␣until␣the␣requisite␣number
of␣items␣are␣available␣(i.e.,␣until␣other␣threads␣C<enqueue>␣more␣items).

=item␣->dequeue_nb()

=item␣->dequeue_nb(COUNT)

Removes␣the␣requested␣number␣of␣items␣(default␣is␣1)␣from␣the␣head␣of␣the
queue,␣and␣returns␣them.␣␣If␣the␣queue␣contains␣fewer␣than␣the␣requested
number␣of␣items,␣then␣it␣immediately␣(i.e.,␣non-blocking)␣returns␣whatever
items␣there␣are␣on␣the␣queue.␣␣If␣the␣queue␣is␣empty,␣then␣C<undef>␣is
returned.

=item␣->dequeue_timed(TIMEOUT)

=item␣->dequeue_timed(TIMEOUT,␣COUNT)

Removes␣the␣requested␣number␣of␣items␣(default␣is␣1)␣from␣the␣head␣of␣the
queue,␣and␣returns␣them.␣␣If␣the␣queue␣contains␣fewer␣than␣the␣requested
number␣of␣items,␣then␣the␣thread␣will␣be␣blocked␣until␣the␣requisite␣number␣of
items␣are␣available,␣or␣until␣the␣timeout␣is␣reached.␣␣If␣the␣timeout␣is
reached,␣it␣returns␣whatever␣items␣there␣are␣on␣the␣queue,␣or␣C<undef>␣if␣the
queue␣is␣empty.

The␣timeout␣may␣be␣a␣number␣of␣seconds␣relative␣to␣the␣current␣time␣(e.g.,␣5
seconds␣from␣when␣the␣call␣is␣made),␣or␣may␣be␣an␣absolute␣timeout␣in␣I<epoch>
seconds␣the␣same␣as␣would␣be␣used␣with
L<cond_timedwait()|threads::shared/"cond_timedwait␣VARIABLE,␣ABS_TIMEOUT">.
Fractional␣seconds␣(e.g.,␣2.5␣seconds)␣are␣also␣supported␣(to␣the␣extent␣of
the␣underlying␣implementation).

If␣C<TIMEOUT>␣is␣missing,␣C<undef>,␣or␣less␣than␣or␣equal␣to␣0,␣then␣this␣call
behaves␣the␣same␣as␣C<dequeue_nb>.

=item␣->pending()

Returns␣the␣number␣of␣items␣still␣in␣the␣queue.␣␣Returns␣C<undef>␣if␣the␣queue
has␣been␣ended␣(see␣below),␣and␣there␣are␣no␣more␣items␣in␣the␣queue.

=item␣->limit

Sets␣the␣size␣of␣the␣queue.␣␣If␣set,␣calls␣to␣C<enqueue()>␣will␣block␣until
the␣number␣of␣pending␣items␣in␣the␣queue␣drops␣below␣the␣C<limit>.␣␣The
C<limit>␣does␣not␣prevent␣enqueuing␣items␣beyond␣that␣count:

␣my␣$q␣=␣Thread::Queue->new(1,␣2);
␣$q->limit␣=␣4;
␣$q->enqueue(3,␣4,␣5);␣␣␣#␣Does␣not␣block
␣$q->enqueue(6);␣␣␣␣␣␣␣␣␣#␣Blocks␣until␣at␣least␣2␣items␣are
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣dequeued
␣my␣$size␣=␣$q->limit;␣␣␣#␣Returns␣the␣current␣limit␣(may␣return
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣'undef')
␣$q->limit␣=␣0;␣␣␣␣␣␣␣␣␣␣#␣Queue␣size␣is␣now␣unlimited

Calling␣any␣of␣the␣dequeue␣methods␣with␣C<COUNT>␣greater␣than␣a␣queue's
C<limit>␣will␣generate␣an␣error.

=item␣->end()

Declares␣that␣no␣more␣items␣will␣be␣added␣to␣the␣queue.

All␣threads␣blocking␣on␣C<dequeue()>␣calls␣will␣be␣unblocked␣with␣any
remaining␣items␣in␣the␣queue␣and/or␣C<undef>␣being␣returned.␣␣Any␣subsequent
calls␣to␣C<dequeue()>␣will␣behave␣like␣C<dequeue_nb()>.

Once␣ended,␣no␣more␣items␣may␣be␣placed␣in␣the␣queue.

=back

=head1␣ADVANCED␣METHODS

The␣following␣methods␣can␣be␣used␣to␣manipulate␣items␣anywhere␣in␣a␣queue.

To␣prevent␣the␣contents␣of␣a␣queue␣from␣being␣modified␣by␣another␣thread
while␣it␣is␣being␣examined␣and/or␣changed,␣L<lock|threads::shared/"lock
VARIABLE">␣the␣queue␣inside␣a␣local␣block:

␣{
␣␣␣␣␣lock($q);␣␣␣#␣Keep␣other␣threads␣from␣changing␣the␣queue's␣contents
␣␣␣␣␣my␣$item␣=␣$q->peek();
␣␣␣␣␣if␣($item␣...)␣{
␣␣␣␣␣␣␣␣␣...
␣␣␣␣␣}
␣}
␣#␣Queue␣is␣now␣unlocked

=over

=item␣->peek()

=item␣->peek(INDEX)

Returns␣an␣item␣from␣the␣queue␣without␣dequeuing␣anything.␣␣Defaults␣to␣the
head␣of␣queue␣(at␣index␣position␣0)␣if␣no␣index␣is␣specified.␣␣Negative
index␣values␣are␣supported␣as␣with␣L<arrays|perldata/"Subscripts">␣(i.e.,␣-1
is␣the␣end␣of␣the␣queue,␣-2␣is␣next␣to␣last,␣and␣so␣on).

If␣no␣items␣exists␣at␣the␣specified␣index␣(i.e.,␣the␣queue␣is␣empty,␣or␣the
index␣is␣beyond␣the␣number␣of␣items␣on␣the␣queue),␣then␣C<undef>␣is␣returned.

Remember,␣the␣returned␣item␣is␣not␣removed␣from␣the␣queue,␣so␣manipulating␣a
C<peek>ed␣at␣reference␣affects␣the␣item␣on␣the␣queue.

=item␣->insert(INDEX,␣LIST)

Adds␣the␣list␣of␣items␣to␣the␣queue␣at␣the␣specified␣index␣position␣(0
is␣the␣head␣of␣the␣list).␣␣Any␣existing␣items␣at␣and␣beyond␣that␣position␣are
pushed␣back␣past␣the␣newly␣added␣items:

␣$q->enqueue(1,␣2,␣3,␣4);
␣$q->insert(1,␣qw/foo␣bar/);
␣#␣Queue␣now␣contains:␣␣1,␣foo,␣bar,␣2,␣3,␣4

Specifying␣an␣index␣position␣greater␣than␣the␣number␣of␣items␣in␣the␣queue
just␣adds␣the␣list␣to␣the␣end.

Negative␣index␣positions␣are␣supported:

␣$q->enqueue(1,␣2,␣3,␣4);
␣$q->insert(-2,␣qw/foo␣bar/);
␣#␣Queue␣now␣contains:␣␣1,␣2,␣foo,␣bar,␣3,␣4

Specifying␣a␣negative␣index␣position␣greater␣than␣the␣number␣of␣items␣in␣the
queue␣adds␣the␣list␣to␣the␣head␣of␣the␣queue.

=item␣->extract()

=item␣->extract(INDEX)

=item␣->extract(INDEX,␣COUNT)

Removes␣and␣returns␣the␣specified␣number␣of␣items␣(defaults␣to␣1)␣from␣the
specified␣index␣position␣in␣the␣queue␣(0␣is␣the␣head␣of␣the␣queue).␣␣When
called␣with␣no␣arguments,␣C<extract>␣operates␣the␣same␣as␣C<dequeue_nb>.

This␣method␣is␣non-blocking,␣and␣will␣return␣only␣as␣many␣items␣as␣are
available␣to␣fulfill␣the␣request:

␣$q->enqueue(1,␣2,␣3,␣4);
␣my␣$item␣␣=␣$q->extract(2)␣␣␣␣␣#␣Returns␣3
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣Queue␣now␣contains:␣␣1,␣2,␣4
␣my␣@items␣=␣$q->extract(1,␣3)␣␣#␣Returns␣(2,␣4)
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣Queue␣now␣contains:␣␣1

Specifying␣an␣index␣position␣greater␣than␣the␣number␣of␣items␣in␣the
queue␣results␣in␣C<undef>␣or␣an␣empty␣list␣being␣returned.

␣$q->enqueue('foo');
␣my␣$nada␣=␣$q->extract(3)␣␣␣␣␣␣#␣Returns␣undef
␣my␣@nada␣=␣$q->extract(1,␣3)␣␣␣#␣Returns␣()

Negative␣index␣positions␣are␣supported.␣␣Specifying␣a␣negative␣index␣position
greater␣than␣the␣number␣of␣items␣in␣the␣queue␣may␣return␣items␣from␣the␣head
of␣the␣queue␣(similar␣to␣C<dequeue_nb>)␣if␣the␣count␣overlaps␣the␣head␣of␣the
queue␣from␣the␣specified␣position␣(i.e.␣if␣queue␣size␣+␣index␣+␣count␣is
greater␣than␣zero):

␣$q->enqueue(qw/foo␣bar␣baz/);
␣my␣@nada␣=␣$q->extract(-6,␣2);␣␣#␣Returns␣()␣␣␣␣␣␣-␣(3+(-6)+2)␣<=␣0
␣my␣@some␣=␣$q->extract(-6,␣4);␣␣#␣Returns␣(foo)␣␣␣-␣(3+(-6)+4)␣>␣0
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣Queue␣now␣contains:␣␣bar,␣baz
␣my␣@rest␣=␣$q->extract(-3,␣4);␣␣#␣Returns␣(bar,␣baz)␣-
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣(2+(-3)+4)␣>␣0

=back

=head1␣NOTES

Queues␣created␣by␣L<Thread::Queue>␣can␣be␣used␣in␣both␣threaded␣and
non-threaded␣applications.

=head1␣LIMITATIONS

Passing␣objects␣on␣queues␣may␣not␣work␣if␣the␣objects'␣classes␣do␣not␣support
sharing.␣␣See␣L<threads::shared/"BUGS␣AND␣LIMITATIONS">␣for␣more.

Passing␣array/hash␣refs␣that␣contain␣objects␣may␣not␣work␣for␣Perl␣prior␣to
5.10.0.

=head1␣SEE␣ALSO

Thread::Queue␣on␣MetaCPAN:
L<https://metacpan.org/release/Thread-Queue>

Code␣repository␣for␣CPAN␣distribution:
L<https://github.com/Dual-Life/Thread-Queue>

L<threads>,␣L<threads::shared>

Sample␣code␣in␣the␣I<examples>␣directory␣of␣this␣distribution␣on␣CPAN.

=head1␣MAINTAINER

Jerry␣D.␣Hedden,␣S<E<lt>jdhedden␣AT␣cpan␣DOT␣orgE<gt>>

=head1␣LICENSE

This␣program␣is␣free␣software;␣you␣can␣redistribute␣it␣and/or␣modify␣it␣under
the␣same␣terms␣as␣Perl␣itself.

=cut
----------
Range: (2448894,2450790) (1896)
=head1␣NAME

I18N::Collate␣-␣compare␣8-bit␣scalar␣data␣according␣to␣the␣current␣locale

=head1␣SYNOPSIS

␣␣␣␣use␣I18N::Collate;
␣␣␣␣setlocale(LC_COLLATE,␣'locale-of-your-choice');
␣␣␣␣$s1␣=␣I18N::Collate->new("scalar_data_1");
␣␣␣␣$s2␣=␣I18N::Collate->new("scalar_data_2");

=head1␣DESCRIPTION

␣␣***

␣␣WARNING:␣starting␣from␣the␣Perl␣version␣5.003_06
␣␣the␣I18N::Collate␣interface␣for␣comparing␣8-bit␣scalar␣data
␣␣according␣to␣the␣current␣locale

	HAS␣BEEN␣DEPRECATED

␣␣That␣is,␣please␣do␣not␣use␣it␣anymore␣for␣any␣new␣applications
␣␣and␣please␣migrate␣the␣old␣applications␣away␣from␣it␣because␣its
␣␣functionality␣was␣integrated␣into␣the␣Perl␣core␣language␣in␣the
␣␣release␣5.003_06.

␣␣See␣the␣perllocale␣manual␣page␣for␣further␣information.

␣␣***

This␣module␣provides␣you␣with␣objects␣that␣will␣collate
according␣to␣your␣national␣character␣set,␣provided␣that␣the
POSIX␣setlocale()␣function␣is␣supported␣on␣your␣system.

You␣can␣compare␣$s1␣and␣$s2␣above␣with

␣␣␣␣$s1␣le␣$s2

to␣extract␣the␣data␣itself,␣you'll␣need␣a␣dereference:␣$$s1

This␣module␣uses␣POSIX::setlocale().␣The␣basic␣collation␣conversion␣is
done␣by␣strxfrm()␣which␣terminates␣at␣NUL␣characters␣being␣a␣decent␣C
routine.␣␣collate_xfrm()␣handles␣embedded␣NUL␣characters␣gracefully.

The␣available␣locales␣depend␣on␣your␣operating␣system;␣try␣whether
C<locale␣-a>␣shows␣them␣or␣man␣pages␣for␣"locale"␣or␣"nlsinfo"␣or␣the
direct␣approach␣C<ls␣/usr/lib/nls/loc>␣or␣C<ls␣/usr/lib/nls>␣or
C<ls␣/usr/lib/locale>.␣␣Not␣all␣the␣locales␣that␣your␣vendor␣supports
are␣necessarily␣installed:␣please␣consult␣your␣operating␣system's
documentation␣and␣possibly␣your␣local␣system␣administration.␣␣The
locale␣names␣are␣probably␣something␣like␣C<xx_XX.(ISO)?8859-N>␣or
C<xx_XX.(ISO)?8859N>,␣for␣example␣C<fr_CH.ISO8859-1>␣is␣the␣Swiss␣(CH)
variant␣of␣French␣(fr),␣ISO␣Latin␣(8859)␣1␣(-1)␣which␣is␣the␣Western
European␣character␣set.

=cut
----------
Range: (2473955,2477496) (3541)
=item␣*␣the␣function␣encode_language_tag($lang1)

This␣function,␣if␣given␣a␣language␣tag,␣returns␣an␣encoding␣of␣it␣such
that:

*␣tags␣representing␣different␣languages␣never␣get␣the␣same␣encoding.

*␣tags␣representing␣the␣same␣language␣always␣get␣the␣same␣encoding.

*␣an␣encoding␣of␣a␣formally␣valid␣language␣tag␣always␣is␣a␣string
value␣that␣is␣defined,␣has␣length,␣and␣is␣true␣if␣considered␣as␣a
boolean.

Note␣that␣the␣encoding␣itself␣is␣B<not>␣a␣formally␣valid␣language␣tag.
Note␣also␣that␣you␣cannot,␣currently,␣go␣from␣an␣encoding␣back␣to␣a
language␣tag␣that␣it's␣an␣encoding␣of.

Note␣also␣that␣you␣B<must>␣consider␣the␣encoded␣value␣as␣atomic;␣i.e.,
you␣should␣not␣consider␣it␣as␣anything␣but␣an␣opaque,␣unanalysable
string␣value.␣␣(The␣internals␣of␣the␣encoding␣method␣may␣change␣in
future␣versions,␣as␣the␣language␣tagging␣standard␣changes␣over␣time.)

C<encode_language_tag>␣returns␣undef␣if␣given␣anything␣other␣than␣a
formally␣valid␣language␣tag.

The␣reason␣C<encode_language_tag>␣exists␣is␣because␣different␣language
tags␣may␣represent␣the␣same␣language;␣this␣is␣normally␣treatable␣with
C<same_language_tag>,␣but␣consider␣this␣situation:

You␣have␣a␣data␣file␣that␣expresses␣greetings␣in␣different␣languages.
Its␣format␣is␣"[language␣tag]=[how␣to␣say␣'Hello']",␣like:

␣␣␣␣␣␣␣␣␣␣en-US=Hiho
␣␣␣␣␣␣␣␣␣␣fr=Bonjour
␣␣␣␣␣␣␣␣␣␣i-mingo=Hau'

And␣suppose␣you␣write␣a␣program␣that␣reads␣that␣file␣and␣then␣runs␣as
a␣daemon,␣answering␣client␣requests␣that␣specify␣a␣language␣tag␣and
then␣expect␣the␣string␣that␣says␣how␣to␣greet␣in␣that␣language.␣␣So␣an
interaction␣looks␣like:

␣␣␣␣␣␣␣␣␣␣greeting-client␣asks:␣␣␣␣fr
␣␣␣␣␣␣␣␣␣␣greeting-server␣answers:␣Bonjour

So␣far␣so␣good.␣␣But␣suppose␣the␣way␣you're␣implementing␣this␣is:

␣␣␣␣␣␣␣␣␣␣my␣%greetings;
␣␣␣␣␣␣␣␣␣␣die␣unless␣open(IN,␣"<",␣"in.dat");
␣␣␣␣␣␣␣␣␣␣while(<IN>)␣{
␣␣␣␣␣␣␣␣␣␣␣␣chomp;
␣␣␣␣␣␣␣␣␣␣␣␣next␣unless␣/^([^=]+)=(.+)/s;
␣␣␣␣␣␣␣␣␣␣␣␣my($lang,␣$expr)␣=␣($1,␣$2);
␣␣␣␣␣␣␣␣␣␣␣␣$greetings{$lang}␣=␣$expr;
␣␣␣␣␣␣␣␣␣␣}
␣␣␣␣␣␣␣␣␣␣close(IN);

at␣which␣point␣%greetings␣has␣the␣contents:

␣␣␣␣␣␣␣␣␣␣"en-US"␣␣␣=>␣"Hiho"
␣␣␣␣␣␣␣␣␣␣"fr"␣␣␣␣␣␣=>␣"Bonjour"
␣␣␣␣␣␣␣␣␣␣"i-mingo"␣=>␣"Hau'"

And␣suppose␣then␣that␣you␣answer␣client␣requests␣for␣language␣$wanted
by␣just␣looking␣up␣$greetings{$wanted}.

If␣the␣client␣asks␣for␣"fr",␣that␣will␣look␣up␣successfully␣in
%greetings,␣to␣the␣value␣"Bonjour".␣␣And␣if␣the␣client␣asks␣for
"i-mingo",␣that␣will␣look␣up␣successfully␣in␣%greetings,␣to␣the␣value
"Hau'".

But␣if␣the␣client␣asks␣for␣"i-Mingo"␣or␣"x-mingo",␣or␣"Fr",␣then␣the
lookup␣in␣%greetings␣fails.␣␣That's␣the␣Wrong␣Thing.

You␣could␣instead␣do␣lookups␣on␣$wanted␣with:

␣␣␣␣␣␣␣␣␣␣use␣I18N::LangTags␣qw(same_language_tag);
␣␣␣␣␣␣␣␣␣␣my␣$response␣=␣'';
␣␣␣␣␣␣␣␣␣␣foreach␣my␣$l2␣(keys␣%greetings)␣{
␣␣␣␣␣␣␣␣␣␣␣␣if(same_language_tag($wanted,␣$l2))␣{
␣␣␣␣␣␣␣␣␣␣␣␣␣␣$response␣=␣$greetings{$l2};
␣␣␣␣␣␣␣␣␣␣␣␣␣␣last;
␣␣␣␣␣␣␣␣␣␣␣␣}
␣␣␣␣␣␣␣␣␣␣}

But␣that's␣rather␣inefficient.␣␣A␣better␣way␣to␣do␣it␣is␣to␣start␣your
program␣with:

␣␣␣␣␣␣␣␣␣␣use␣I18N::LangTags␣qw(encode_language_tag);
␣␣␣␣␣␣␣␣␣␣my␣%greetings;
␣␣␣␣␣␣␣␣␣␣die␣unless␣open(IN,␣"<",␣"in.dat");
␣␣␣␣␣␣␣␣␣␣while(<IN>)␣{
␣␣␣␣␣␣␣␣␣␣␣␣chomp;
␣␣␣␣␣␣␣␣␣␣␣␣next␣unless␣/^([^=]+)=(.+)/s;
␣␣␣␣␣␣␣␣␣␣␣␣my($lang,␣$expr)␣=␣($1,␣$2);
␣␣␣␣␣␣␣␣␣␣␣␣$greetings{
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣encode_language_tag($lang)
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣}␣=␣$expr;
␣␣␣␣␣␣␣␣␣␣}
␣␣␣␣␣␣␣␣␣␣close(IN);

and␣then␣just␣answer␣client␣requests␣for␣language␣$wanted␣by␣just
looking␣up

␣␣␣␣␣␣␣␣␣␣$greetings{encode_language_tag($wanted)}

And␣that␣does␣the␣Right␣Thing.

=cut
----------
Range: (2485544,2487055) (1511)
=item␣*␣the␣function␣implicate_supers(␣...languages...␣)

This␣takes␣a␣list␣of␣strings␣(which␣are␣presumed␣to␣be␣language-tags;
strings␣that␣aren't,␣are␣ignored);␣and␣after␣each␣one,␣this␣function
inserts␣super-ordinate␣forms␣that␣don't␣already␣appear␣in␣the␣list.
The␣original␣list,␣plus␣these␣insertions,␣is␣returned.

In␣other␣words,␣it␣takes␣this:

␣␣pt-br␣de-DE␣en-US␣fr␣pt-br-janeiro

and␣returns␣this:

␣␣pt-br␣pt␣de-DE␣de␣en-US␣en␣fr␣pt-br-janeiro

This␣function␣is␣most␣useful␣in␣the␣idiom

␣␣implicate_supers(␣I18N::LangTags::Detect::detect()␣);

(See␣L<I18N::LangTags::Detect>.)


=item␣*␣the␣function␣implicate_supers_strictly(␣...languages...␣)

This␣works␣like␣C<implicate_supers>␣except␣that␣the␣implicated
forms␣are␣added␣to␣the␣end␣of␣the␣return␣list.

In␣other␣words,␣implicate_supers_strictly␣takes␣a␣list␣of␣strings
(which␣are␣presumed␣to␣be␣language-tags;␣strings␣that␣aren't,␣are
ignored)␣and␣after␣the␣whole␣given␣list,␣it␣inserts␣the␣super-ordinate␣forms␣
of␣all␣given␣tags,␣minus␣any␣tags␣that␣already␣appear␣in␣the␣input␣list.

In␣other␣words,␣it␣takes␣this:

␣␣pt-br␣de-DE␣en-US␣fr␣pt-br-janeiro

and␣returns␣this:

␣␣pt-br␣de-DE␣en-US␣fr␣pt-br-janeiro␣pt␣de␣en

The␣reason␣this␣function␣has␣"_strictly"␣in␣its␣name␣is␣that␣when
you're␣processing␣an␣Accept-Language␣list␣according␣to␣the␣RFCs,␣if
you␣interpret␣the␣RFCs␣quite␣strictly,␣then␣you␣would␣use
implicate_supers_strictly,␣but␣for␣normal␣use␣(i.e.,␣common-sense␣use,
as␣far␣as␣I'm␣concerned)␣you'd␣use␣implicate_supers.

=cut
----------
Range: (2559577,2561344) (1767)
<<'----END␣OF␣PREAMBLE----';
.de␣Sp␣\"␣Vertical␣space␣(when␣we␣can't␣use␣.PP)
.if␣t␣.sp␣.5v
.if␣n␣.sp
..
.de␣Vb␣\"␣Begin␣verbatim␣text
.ft␣@CFONT@
.nf
.ne␣\\$1
..
.de␣Ve␣\"␣End␣verbatim␣text
.ft␣R
.fi
..
.\"␣Set␣up␣some␣character␣translations␣and␣predefined␣strings.␣␣\*(--␣will
.\"␣give␣an␣unbreakable␣dash,␣\*(PI␣will␣give␣pi,␣\*(L"␣will␣give␣a␣left
.\"␣double␣quote,␣and␣\*(R"␣will␣give␣a␣right␣double␣quote.␣␣\*(C+␣will
.\"␣give␣a␣nicer␣C++.␣␣Capital␣omega␣is␣used␣to␣do␣unbreakable␣dashes␣and
.\"␣therefore␣won't␣be␣available.␣␣\*(C`␣and␣\*(C'␣expand␣to␣`'␣in␣nroff,
.\"␣nothing␣in␣troff,␣for␣use␣with␣C<>.
.tr␣\(*W-
.ds␣C+␣C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie␣n␣\{\
.␣␣␣␣ds␣--␣\(*W-
.␣␣␣␣ds␣PI␣pi
.␣␣␣␣if␣(\n(.H=4u)&(1m=24u)␣.ds␣--␣\(*W\h'-12u'\(*W\h'-12u'-\"␣diablo␣10␣pitch
.␣␣␣␣if␣(\n(.H=4u)&(1m=20u)␣.ds␣--␣\(*W\h'-12u'\(*W\h'-8u'-\"␣␣diablo␣12␣pitch
.␣␣␣␣ds␣L"␣""
.␣␣␣␣ds␣R"␣""
.␣␣␣␣ds␣C`␣@LQUOTE@
.␣␣␣␣ds␣C'␣@RQUOTE@
'br\}
.el\{\
.␣␣␣␣ds␣--␣\|\(em\|
.␣␣␣␣ds␣PI␣\(*p
.␣␣␣␣ds␣L"␣``
.␣␣␣␣ds␣R"␣''
.␣␣␣␣ds␣C`
.␣␣␣␣ds␣C'
'br\}
.\"
.\"␣Escape␣single␣quotes␣in␣literal␣strings␣from␣groff's␣Unicode␣transform.
.ie␣\n(.g␣.ds␣Aq␣\(aq
.el␣␣␣␣␣␣␣.ds␣Aq␣'
.\"
.\"␣If␣the␣F␣register␣is␣>0,␣we'll␣generate␣index␣entries␣on␣stderr␣for
.\"␣titles␣(.TH),␣headers␣(.SH),␣subsections␣(.SS),␣items␣(.Ip),␣and␣index
.\"␣entries␣marked␣with␣X<>␣in␣POD.␣␣Of␣course,␣you'll␣have␣to␣process␣the
.\"␣output␣yourself␣in␣some␣meaningful␣fashion.
.\"
.\"␣Avoid␣warning␣from␣groff␣about␣undefined␣register␣'F'.
.de␣IX
..
.nr␣rF␣0
.if␣\n(.g␣.if␣rF␣.nr␣rF␣1
.if␣(\n(rF:(\n(.g==0))␣\{\
.␣␣␣␣if␣\nF␣\{\
.␣␣␣␣␣␣␣␣de␣IX
.␣␣␣␣␣␣␣␣tm␣Index:\\$1\t\\n%\t"\\$2"
..
.␣␣␣␣␣␣␣␣if␣!\nF==2␣\{\
.␣␣␣␣␣␣␣␣␣␣␣␣nr␣%␣0
.␣␣␣␣␣␣␣␣␣␣␣␣nr␣F␣2
.␣␣␣␣␣␣␣␣\}
.␣␣␣␣\}
.\}
.rr␣rF
----END␣OF␣PREAMBLE----
----------
Range: (2561406,2563297) (1891)
<<'----END␣OF␣PREAMBLE----'
.\"
.\"␣Accent␣mark␣definitions␣(@(#)ms.acc␣1.5␣88/02/08␣SMI;␣from␣UCB␣4.2).
.\"␣Fear.␣␣Run.␣␣Save␣yourself.␣␣No␣user-serviceable␣parts.
.␣␣␣␣\"␣fudge␣factors␣for␣nroff␣and␣troff
.if␣n␣\{\
.␣␣␣␣ds␣#H␣0
.␣␣␣␣ds␣#V␣.8m
.␣␣␣␣ds␣#F␣.3m
.␣␣␣␣ds␣#[␣\f1
.␣␣␣␣ds␣#]␣\fP
.\}
.if␣t␣\{\
.␣␣␣␣ds␣#H␣((1u-(\\\\n(.fu%2u))*.13m)
.␣␣␣␣ds␣#V␣.6m
.␣␣␣␣ds␣#F␣0
.␣␣␣␣ds␣#[␣\&
.␣␣␣␣ds␣#]␣\&
.\}
.␣␣␣␣\"␣simple␣accents␣for␣nroff␣and␣troff
.if␣n␣\{\
.␣␣␣␣ds␣'␣\&
.␣␣␣␣ds␣`␣\&
.␣␣␣␣ds␣^␣\&
.␣␣␣␣ds␣,␣\&
.␣␣␣␣ds␣~␣~
.␣␣␣␣ds␣/
.\}
.if␣t␣\{\
.␣␣␣␣ds␣'␣\\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.␣␣␣␣ds␣`␣\\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.␣␣␣␣ds␣^␣\\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.␣␣␣␣ds␣,␣\\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.␣␣␣␣ds␣~␣\\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.␣␣␣␣ds␣/␣\\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.␣␣␣␣\"␣troff␣and␣(daisy-wheel)␣nroff␣accents
.ds␣:␣\\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds␣8␣\h'\*(#H'\(*b\h'-\*(#H'
.ds␣o␣\\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds␣d-␣\h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds␣D-␣D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds␣th␣\*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds␣Th␣\*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds␣ae␣a\h'-(\w'a'u*4/10)'e
.ds␣Ae␣A\h'-(\w'A'u*4/10)'E
.␣␣␣␣\"␣corrections␣for␣vroff
.if␣v␣.ds␣~␣\\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if␣v␣.ds␣^␣\\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.␣␣␣␣\"␣for␣low␣resolution␣devices␣(crt␣and␣lpr)
.if␣\n(.H>23␣.if␣\n(.V>19␣\
\{\
.␣␣␣␣ds␣:␣e
.␣␣␣␣ds␣8␣ss
.␣␣␣␣ds␣o␣a
.␣␣␣␣ds␣d-␣d\h'-1'\(ga
.␣␣␣␣ds␣D-␣D\h'-1'\(hy
.␣␣␣␣ds␣th␣\o'bp'
.␣␣␣␣ds␣Th␣\o'LP'
.␣␣␣␣ds␣ae␣ae
.␣␣␣␣ds␣Ae␣AE
.\}
.rm␣#[␣#]␣#H␣#V␣#F␣C
----END␣OF␣PREAMBLE----
#`#␣for␣cperl-mode
␣␣␣␣}
␣␣␣␣return
----------
Range: (2578263,2589647) (11384)
=head1␣NAME

Pod::Checker␣-␣check␣pod␣documents␣for␣syntax␣errors

=head1␣SYNOPSIS

␣␣use␣Pod::Checker;

␣␣$syntax_okay␣=␣podchecker($filepath,␣$outputpath,␣%options);

␣␣my␣$checker␣=␣Pod::Checker->new(%options);
␣␣$checker->parse_from_file($filepath,␣\*STDERR);

=head1␣OPTIONS/ARGUMENTS

C<$filepath>␣is␣the␣input␣POD␣to␣read␣and␣C<$outputpath>␣is
where␣to␣write␣POD␣syntax␣error␣messages.␣Either␣argument␣may␣be␣a␣scalar
indicating␣a␣file-path,␣or␣else␣a␣reference␣to␣an␣open␣filehandle.
If␣unspecified,␣the␣input-file␣it␣defaults␣to␣C<\*STDIN>,␣and
the␣output-file␣defaults␣to␣C<\*STDERR>.

=head2␣podchecker()

This␣function␣can␣take␣a␣hash␣of␣options:

=over␣4

=item␣B<-warnings>␣=E<gt>␣I<val>

Turn␣warnings␣on/off.␣I<val>␣is␣usually␣1␣for␣on,␣but␣higher␣values
trigger␣additional␣warnings.␣See␣L<"Warnings">.

=item␣B<-quiet>␣=E<gt>␣I<val>

If␣C<val>␣is␣true,␣do␣not␣print␣any␣errors/warnings.

=back

=head1␣DESCRIPTION

B<podchecker>␣will␣perform␣syntax␣checking␣of␣Perl5␣POD␣format␣documentation.

Curious/ambitious␣users␣are␣welcome␣to␣propose␣additional␣features␣they␣wish
to␣see␣in␣B<Pod::Checker>␣and␣B<podchecker>␣and␣verify␣that␣the␣checks␣are
consistent␣with␣L<perlpod>.

The␣following␣checks␣are␣currently␣performed:

=over␣4

=item␣*

Unknown␣'=xxxx'␣commands,␣unknown␣'XE<lt>...E<gt>'␣interior-sequences,
and␣unterminated␣interior␣sequences.

=item␣*

Check␣for␣proper␣balancing␣of␣C<=begin>␣and␣C<=end>.␣The␣contents␣of␣such
a␣block␣are␣generally␣ignored,␣i.e.␣no␣syntax␣checks␣are␣performed.

=item␣*

Check␣for␣proper␣nesting␣and␣balancing␣of␣C<=over>,␣C<=item>␣and␣C<=back>.

=item␣*

Check␣for␣same␣nested␣interior-sequences␣(e.g.
C<LE<lt>...LE<lt>...E<gt>...E<gt>>).

=item␣*

Check␣for␣malformed␣or␣non-existing␣entities␣C<EE<lt>...E<gt>>.

=item␣*

Check␣for␣correct␣syntax␣of␣hyperlinks␣C<LE<lt>...E<gt>>.␣See␣L<perlpod>
for␣details.

=item␣*

Check␣for␣unresolved␣document-internal␣links.␣This␣check␣may␣also␣reveal
misspelled␣links␣that␣seem␣to␣be␣internal␣links␣but␣should␣be␣links
to␣something␣else.

=back

=head1␣DIAGNOSTICS

=head2␣Errors

=over␣4

=item␣*␣empty␣=headn

A␣heading␣(C<=head1>␣or␣C<=head2>)␣without␣any␣text?␣That␣ain't␣no
heading!

=item␣*␣=over␣on␣line␣I<N>␣without␣closing␣=back

=item␣*␣You␣forgot␣a␣'=back'␣before␣'=headI<N>'

=item␣*␣=over␣is␣the␣last␣thing␣in␣the␣document?!

The␣C<=over>␣command␣does␣not␣have␣a␣corresponding␣C<=back>␣before␣the
next␣heading␣(C<=head1>␣or␣C<=head2>)␣or␣the␣end␣of␣the␣file.

=item␣*␣'=item'␣outside␣of␣any␣'=over'

=item␣*␣=back␣without␣=over

An␣C<=item>␣or␣C<=back>␣command␣has␣been␣found␣outside␣a
C<=over>/C<=back>␣block.

=item␣*␣Can't␣have␣a␣0␣in␣=over␣I<N>

You␣need␣to␣indent␣a␣strictly␣positive␣number␣of␣spaces,␣not␣0.

=item␣*␣=over␣should␣be:␣'=over'␣or␣'=over␣positive_number'

Either␣have␣an␣argumentless␣=over,␣or␣have␣its␣argument␣a␣strictly␣positive␣number.

=item␣*␣=begin␣I<TARGET>␣without␣matching␣=end␣I<TARGET>

A␣C<=begin>␣command␣was␣found␣that␣has␣no␣matching␣=end␣command.

=item␣*␣=begin␣without␣a␣target?

A␣C<=begin>␣command␣was␣found␣that␣is␣not␣followed␣by␣the␣formatter
specification.

=item␣*␣=end␣I<TARGET>␣without␣matching␣=begin.

A␣standalone␣C<=end>␣command␣was␣found.

=item␣*␣'=end'␣without␣a␣target?

'=end'␣directives␣need␣to␣have␣a␣target,␣just␣like␣=begin␣directives.

=item␣*␣'=end␣I<TARGET>'␣is␣invalid.

I<TARGET>␣needs␣to␣be␣one␣word

=item␣*␣=end␣I<CONTENT>␣doesn't␣match␣=begin␣I<TARGET>

I<CONTENT>␣needs␣to␣match␣=begin's␣I<TARGET>.

=item␣*␣=for␣without␣a␣target?

There␣is␣no␣specification␣of␣the␣formatter␣after␣the␣C<=for>␣command.

=item␣*␣unresolved␣internal␣link␣I<NAME>

The␣given␣link␣to␣I<NAME>␣does␣not␣have␣a␣matching␣node␣in␣the␣current
POD.␣This␣also␣happened␣when␣a␣single␣word␣node␣name␣is␣not␣enclosed␣in
C<"">.

=item␣*␣Unknown␣directive:␣I<CMD>

An␣invalid␣POD␣command␣has␣been␣found.␣Valid␣are␣C<=head1>,␣C<=head2>,
C<=head3>,␣C<=head4>,␣C<=over>,␣C<=item>,␣C<=back>,␣C<=begin>,␣C<=end>,
C<=for>,␣C<=pod>,␣C<=cut>

=item␣*␣Deleting␣unknown␣formatting␣code␣I<SEQ>

An␣invalid␣markup␣command␣has␣been␣encountered.␣Valid␣are:
C<BE<lt>E<gt>>,␣C<CE<lt>E<gt>>,␣C<EE<lt>E<gt>>,␣C<FE<lt>E<gt>>,
C<IE<lt>E<gt>>,␣C<LE<lt>E<gt>>,␣C<SE<lt>E<gt>>,␣C<XE<lt>E<gt>>,
C<ZE<lt>E<gt>>

=item␣*␣Unterminated␣I<SEQ>E<lt>E<gt>␣sequence

An␣unclosed␣formatting␣code

=item␣*␣An␣EE<lt>...E<gt>␣surrounding␣strange␣content

The␣I<STRING>␣found␣cannot␣be␣interpreted␣as␣a␣character␣entity.

=item␣*␣An␣empty␣EE<lt>E<gt>

=item␣*␣An␣empty␣C<<␣LE<lt>E<gt>␣>>

=item␣*␣An␣empty␣XE<lt>E<gt>

There␣needs␣to␣be␣content␣inside␣E,␣L,␣and␣X␣formatting␣codes.

=item␣*␣Spurious␣text␣after␣=pod␣/␣=cut

The␣commands␣C<=pod>␣and␣C<=cut>␣do␣not␣take␣any␣arguments.

=item␣*␣=back␣doesn't␣take␣any␣parameters,␣but␣you␣said␣=back␣I<ARGUMENT>

The␣C<=back>␣command␣does␣not␣take␣any␣arguments.

=item␣*␣=pod␣directives␣shouldn't␣be␣over␣one␣line␣long!␣␣Ignoring␣all␣I<N>␣lines␣of␣content

Self␣explanatory

=item␣*␣=cut␣found␣outside␣a␣pod␣block.

A␣'=cut'␣directive␣found␣in␣the␣middle␣of␣non-POD

=item␣*␣Invalid␣=encoding␣syntax:␣I<CONTENT>

Syntax␣error␣in␣=encoding␣directive

=back

=head2␣Warnings

These␣may␣not␣necessarily␣cause␣trouble,␣but␣indicate␣mediocre␣style.

=over␣4

=item␣*␣nested␣commands␣I<CMD>E<lt>...I<CMD>E<lt>...E<gt>...E<gt>

Two␣nested␣identical␣markup␣commands␣have␣been␣found.␣Generally␣this
does␣not␣make␣sense.

=item␣*␣multiple␣occurrences␣(I<N>)␣of␣link␣target␣I<name>

The␣POD␣file␣has␣some␣C<=item>␣and/or␣C<=head>␣commands␣that␣have
the␣same␣text.␣Potential␣hyperlinks␣to␣such␣a␣text␣cannot␣be␣unique␣then.
This␣warning␣is␣printed␣only␣with␣warning␣level␣greater␣than␣one.

=item␣*␣line␣containing␣nothing␣but␣whitespace␣in␣paragraph

There␣is␣some␣whitespace␣on␣a␣seemingly␣empty␣line.␣POD␣is␣very␣sensitive
to␣such␣things,␣so␣this␣is␣flagged.␣B<vi>␣users␣switch␣on␣the␣B<list>
option␣to␣avoid␣this␣problem.

=item␣*␣=item␣has␣no␣contents

There␣is␣a␣list␣C<=item>␣that␣has␣no␣text␣contents.␣You␣probably␣want␣to␣delete
empty␣items.

=item␣*␣You␣can't␣have␣=items␣(as␣at␣line␣I<N>)␣unless␣the␣first␣thing␣after␣the␣=over␣is␣an␣=item

A␣list␣introduced␣by␣C<=over>␣starts␣with␣a␣text␣or␣verbatim␣paragraph,
but␣continues␣with␣C<=item>s.␣Move␣the␣non-item␣paragraph␣out␣of␣the
C<=over>/C<=back>␣block.

=item␣*␣Expected␣'=item␣I<EXPECTED␣VALUE>'

=item␣*␣Expected␣'=item␣*'

=item␣*␣Possible␣=item␣type␣mismatch:␣'I<x>'␣found␣leading␣a␣supposed␣definition␣=item

A␣list␣started␣with␣e.g.␣a␣bullet-like␣C<=item>␣and␣continued␣with␣a
numbered␣one.␣This␣is␣obviously␣inconsistent.␣For␣most␣translators␣the
type␣of␣the␣I<first>␣C<=item>␣determines␣the␣type␣of␣the␣list.

=item␣*␣You␣have␣'=item␣x'␣instead␣of␣the␣expected␣'=item␣I<N>'

Erroneous␣numbering␣of␣=item␣numbers;␣they␣need␣to␣ascend␣consecutively.

=item␣*␣Unknown␣E␣content␣in␣EE<lt>I<CONTENT>E<gt>

A␣character␣entity␣was␣found␣that␣does␣not␣belong␣to␣the␣standard
ISO␣set␣or␣the␣POD␣specials␣C<verbar>␣and␣C<sol>.␣I<Currently,␣this␣warning
only␣appears␣if␣a␣character␣entity␣was␣found␣that␣does␣not␣have␣a␣Unicode
character.␣This␣should␣be␣fixed␣to␣adhere␣to␣the␣original␣warning.>

=item␣*␣empty␣=over/=back␣block

The␣list␣opened␣with␣C<=over>␣does␣not␣contain␣anything.

=item␣*␣empty␣section␣in␣previous␣paragraph

The␣previous␣section␣(introduced␣by␣a␣C<=head>␣command)␣does␣not␣contain
any␣valid␣content.␣This␣usually␣indicates␣that␣something␣is␣missing.␣Note:␣A
C<=head1>␣followed␣immediately␣by␣C<=head2>␣does␣not␣trigger␣this␣warning.

=item␣*␣Verbatim␣paragraph␣in␣NAME␣section

The␣NAME␣section␣(C<=head1␣NAME>)␣should␣consist␣of␣a␣single␣paragraph
with␣the␣script/module␣name,␣followed␣by␣a␣dash␣`-'␣and␣a␣very␣short
description␣of␣what␣the␣thing␣is␣good␣for.

=item␣*␣=headI<n>␣without␣preceding␣higher␣level

For␣example␣if␣there␣is␣a␣C<=head2>␣in␣the␣POD␣file␣prior␣to␣a
C<=head1>.

=item␣*␣A␣non-empty␣ZE<lt>E<gt>

The␣C<ZE<lt>E<gt>>␣sequence␣is␣supposed␣to␣be␣empty.␣Caveat:␣this␣issue␣is
detected␣in␣L<Pod::Simple>␣and␣will␣be␣flagged␣as␣an␣I<ERROR>␣by␣any␣client
code;␣any␣contents␣of␣C<ZE<lt>...E<gt>>␣will␣be␣disregarded,␣anyway.

=back

=head2␣Hyperlinks

There␣are␣some␣warnings␣with␣respect␣to␣malformed␣hyperlinks:

=over␣4

=item␣*␣ignoring␣leading/trailing␣whitespace␣in␣link

There␣is␣whitespace␣at␣the␣beginning␣or␣the␣end␣of␣the␣contents␣of
LE<lt>...E<gt>.

=item␣*␣alternative␣text/node␣'%s'␣contains␣non-escaped␣|␣or␣/

The␣characters␣C<|>␣and␣C</>␣are␣special␣in␣the␣LE<lt>...E<gt>␣context.
Although␣the␣hyperlink␣parser␣does␣its␣best␣to␣determine␣which␣"/"␣is
text␣and␣which␣is␣a␣delimiter␣in␣case␣of␣doubt,␣one␣ought␣to␣escape
these␣literal␣characters␣like␣this:

␣␣/␣␣␣␣␣E<sol>
␣␣|␣␣␣␣␣E<verbar>

=back

Note␣that␣the␣line␣number␣of␣the␣error/warning␣may␣refer␣to␣the␣line␣number␣of
the␣start␣of␣the␣paragraph␣in␣which␣the␣error/warning␣exists,␣not␣the␣line␣
number␣that␣the␣error/warning␣is␣on.␣This␣bug␣is␣present␣in␣errors/warnings
related␣to␣formatting␣codes.␣I<This␣should␣be␣fixed.>

=head1␣RETURN␣VALUE

B<podchecker>␣returns␣the␣number␣of␣POD␣syntax␣errors␣found␣or␣-1␣if
there␣were␣no␣POD␣commands␣at␣all␣found␣in␣the␣file.

=head1␣EXAMPLES

See␣L</SYNOPSIS>

=head1␣SCRIPTS

The␣B<podchecker>␣script␣that␣comes␣with␣this␣distribution␣is␣a␣lean␣wrapper
around␣this␣module.␣See␣the␣online␣manual␣with

␣␣podchecker␣-help
␣␣podchecker␣-man

=head1␣INTERFACE

While␣checking,␣this␣module␣collects␣document␣properties,␣e.g.␣the␣nodes
for␣hyperlinks␣(C<=headX>,␣C<=item>)␣and␣index␣entries␣(C<XE<lt>E<gt>>).
POD␣translators␣can␣use␣this␣feature␣to␣syntax-check␣and␣get␣the␣nodes␣in
a␣first␣pass␣before␣actually␣starting␣to␣convert.␣This␣is␣expensive␣in␣terms
of␣execution␣time,␣but␣allows␣for␣very␣robust␣conversions.

Since␣v1.24␣the␣B<Pod::Checker>␣module␣uses␣only␣the␣B<poderror>
method␣to␣print␣errors␣and␣warnings.␣The␣summary␣output␣(e.g.
"Pod␣syntax␣OK")␣has␣been␣dropped␣from␣the␣module␣and␣has␣been␣included␣in
B<podchecker>␣(the␣script).␣This␣allows␣users␣of␣B<Pod::Checker>␣to
control␣completely␣the␣output␣behavior.␣Users␣of␣B<podchecker>␣(the␣script)
get␣the␣well-known␣behavior.

v1.45␣inherits␣from␣L<Pod::Simple>␣as␣opposed␣to␣all␣previous␣versions
inheriting␣from␣Pod::Parser.␣Do␣B<not>␣use␣Pod::Simple's␣interface␣when
using␣Pod::Checker␣unless␣it␣is␣documented␣somewhere␣on␣this␣page.␣I
repeat,␣DO␣B<NOT>␣USE␣POD::SIMPLE'S␣INTERFACE.

The␣following␣list␣documents␣the␣overrides␣to␣Pod::Simple,␣primarily␣to
make␣L<Pod::Coverage>␣happy:

=over␣4

=item␣end_B

=item␣end_C

=item␣end_Document

=item␣end_F

=item␣end_I

=item␣end_L

=item␣end_Para

=item␣end_S

=item␣end_X

=item␣end_fcode

=item␣end_for

=item␣end_head

=item␣end_head1

=item␣end_head2

=item␣end_head3

=item␣end_head4

=item␣end_item

=item␣end_item_bullet

=item␣end_item_number

=item␣end_item_text

=item␣handle_pod_and_cut

=item␣handle_text

=item␣handle_whiteline

=item␣hyperlink

=item␣scream

=item␣start_B

=item␣start_C

=item␣start_Data

=item␣start_F

=item␣start_I

=item␣start_L

=item␣start_Para

=item␣start_S

=item␣start_Verbatim

=item␣start_X

=item␣start_fcode

=item␣start_for

=item␣start_head

=item␣start_head1

=item␣start_head2

=item␣start_head3

=item␣start_head4

=item␣start_item_bullet

=item␣start_item_number

=item␣start_item_text

=item␣start_over

=item␣start_over_block

=item␣start_over_bullet

=item␣start_over_empty

=item␣start_over_number

=item␣start_over_text

=item␣whine

=back

=cut
----------
Range: (2675356,2679073) (3717)
<<'EOCSS';
/*␣For␣accessibility␣reasons,␣never␣specify␣text␣sizes␣in␣px/pt/pc/in/cm/mm␣*/

@media␣all␣{␣.hide␣{␣display:␣none;␣}␣}

@media␣print␣{
␣␣.noprint,␣div.indexgroup,␣.backlinktop,␣.backlinkbottom␣{␣display:␣none␣}

␣␣*␣{
␣␣␣␣border-color:␣black␣!important;
␣␣␣␣color:␣black␣!important;
␣␣␣␣background-color:␣transparent␣!important;
␣␣␣␣background-image:␣none␣!important;
␣␣}

␣␣dl.superindex␣>␣dd␣␣{
␣␣␣␣word-spacing:␣.6em;
␣␣}
}

@media␣aural,␣braille,␣embossed␣{
␣␣div.indexgroup␣␣{␣display:␣none;␣}␣␣/*␣Too␣noisy,␣don't␣you␣think?␣*/
␣␣dl.superindex␣>␣dt:before␣{␣content:␣"Group␣";␣␣}
␣␣dl.superindex␣>␣dt:after␣␣{␣content:␣"␣contains:";␣}
␣␣.backlinktop␣␣␣␣a:before␣␣{␣content:␣"Back␣to␣contents";␣}
␣␣.backlinkbottom␣a:before␣␣{␣content:␣"Back␣to␣contents";␣}
}

@media␣aural␣{
␣␣dl.superindex␣>␣dt␣␣{␣pause-before:␣600ms;␣}
}

@media␣screen,␣tty,␣tv,␣projection␣{
␣␣.noscreen␣{␣display:␣none;␣}

␣␣a:link␣␣␣␣{␣color:␣#7070ff;␣text-decoration:␣underline;␣}
␣␣a:visited␣{␣color:␣#e030ff;␣text-decoration:␣underline;␣}
␣␣a:active␣␣{␣color:␣#800000;␣text-decoration:␣underline;␣}
␣␣body.contentspage␣a␣␣␣␣␣␣␣␣␣␣␣␣{␣text-decoration:␣none;␣}
␣␣a.u␣{␣color:␣#fff␣!important;␣text-decoration:␣none;␣}

␣␣body.pod␣{
␣␣␣␣margin:␣0␣5px;
␣␣␣␣color:␣␣␣␣␣␣␣␣␣␣␣␣#fff;
␣␣␣␣background-color:␣#000;
␣␣}

␣␣body.pod␣h1,␣body.pod␣h2,␣body.pod␣h3,
␣␣body.pod␣h4,␣body.pod␣h5,␣body.pod␣h6␣␣{
␣␣␣␣font-family:␣Tahoma,␣Verdana,␣Helvetica,␣Arial,␣sans-serif;
␣␣␣␣font-weight:␣normal;
␣␣␣␣margin-top:␣1.2em;
␣␣␣␣margin-bottom:␣.1em;
␣␣␣␣border-top:␣thin␣solid␣transparent;
␣␣␣␣/*␣margin-left:␣-5px;␣␣border-left:␣2px␣#7070ff␣solid;␣␣padding-left:␣3px;␣*/
␣␣}
␣␣
␣␣body.pod␣h1␣␣{␣border-top-color:␣#0a0;␣}
␣␣body.pod␣h2␣␣{␣border-top-color:␣#080;␣}
␣␣body.pod␣h3␣␣{␣border-top-color:␣#040;␣}
␣␣body.pod␣h4␣␣{␣border-top-color:␣#010;␣}
␣␣body.pod␣h5␣␣{␣border-top-color:␣#010;␣}
␣␣body.pod␣h6␣␣{␣border-top-color:␣#010;␣}

␣␣p.backlinktop␣+␣h1␣{␣border-top:␣none;␣margin-top:␣0em;␣␣}
␣␣p.backlinktop␣+␣h2␣{␣border-top:␣none;␣margin-top:␣0em;␣␣}
␣␣p.backlinktop␣+␣h3␣{␣border-top:␣none;␣margin-top:␣0em;␣␣}
␣␣p.backlinktop␣+␣h4␣{␣border-top:␣none;␣margin-top:␣0em;␣␣}
␣␣p.backlinktop␣+␣h5␣{␣border-top:␣none;␣margin-top:␣0em;␣␣}
␣␣p.backlinktop␣+␣h6␣{␣border-top:␣none;␣margin-top:␣0em;␣␣}

␣␣body.pod␣dt␣{
␣␣␣␣font-size:␣105%;␣/*␣just␣a␣wee␣bit␣more␣than␣normal␣*/
␣␣}

␣␣.indexgroup␣{␣font-size:␣80%;␣}

␣␣.backlinktop,␣␣␣.backlinkbottom␣␣␣␣{
␣␣␣␣margin-left:␣␣-5px;
␣␣␣␣margin-right:␣-5px;
␣␣␣␣background-color:␣␣␣␣␣␣␣␣␣#040;
␣␣␣␣border-top:␣␣␣␣thin␣solid␣#050;
␣␣␣␣border-bottom:␣thin␣solid␣#050;
␣␣}
␣␣
␣␣.backlinktop␣a,␣.backlinkbottom␣a␣␣{
␣␣␣␣text-decoration:␣none;
␣␣␣␣color:␣#080;
␣␣␣␣background-color:␣␣#000;
␣␣␣␣border:␣thin␣solid␣#0d0;
␣␣}
␣␣.backlinkbottom␣{␣margin-bottom:␣0;␣padding-bottom:␣0;␣}
␣␣.backlinktop␣␣␣␣{␣margin-top:␣␣␣␣0;␣padding-top:␣␣␣␣0;␣}

␣␣body.contentspage␣{
␣␣␣␣color:␣␣␣␣␣␣␣␣␣␣␣␣#fff;
␣␣␣␣background-color:␣#000;
␣␣}
␣␣
␣␣body.contentspage␣h1␣␣{
␣␣␣␣color:␣␣␣␣␣␣␣␣␣␣␣␣#0d0;
␣␣␣␣margin-left:␣1em;
␣␣␣␣margin-right:␣1em;
␣␣␣␣text-indent:␣-.9em;
␣␣␣␣font-family:␣Tahoma,␣Verdana,␣Helvetica,␣Arial,␣sans-serif;
␣␣␣␣font-weight:␣normal;
␣␣␣␣border-top:␣␣␣␣thin␣solid␣#fff;
␣␣␣␣border-bottom:␣thin␣solid␣#fff;
␣␣␣␣text-align:␣center;
␣␣}

␣␣dl.superindex␣>␣dt␣␣{
␣␣␣␣font-family:␣Tahoma,␣Verdana,␣Helvetica,␣Arial,␣sans-serif;
␣␣␣␣font-weight:␣normal;
␣␣␣␣font-size:␣90%;
␣␣␣␣margin-top:␣.45em;
␣␣␣␣/*␣margin-bottom:␣-.15em;␣*/
␣␣}
␣␣dl.superindex␣>␣dd␣␣{
␣␣␣␣word-spacing:␣.6em;␣␣␣␣/*␣most␣important␣rule␣here!␣*/
␣␣}
␣␣dl.superindex␣>␣a:link␣␣{
␣␣␣␣text-decoration:␣none;
␣␣␣␣color:␣#fff;
␣␣}

␣␣.contentsfooty␣{
␣␣␣␣border-top:␣thin␣solid␣#999;
␣␣␣␣font-size:␣90%;
␣␣}
␣␣
}

/*␣The␣End␣*/

EOCSS
----------
Range: (2679166,2681159) (1993)
<<'EOJAVASCRIPT';

//␣From␣http://www.alistapart.com/articles/alternate/

function␣setActiveStyleSheet(title)␣{
␣␣var␣i,␣a,␣main;
␣␣for(i=0␣␣;␣␣(a␣=␣document.getElementsByTagName("link")[i])␣␣;␣␣i++)␣{
␣␣␣␣if(a.getAttribute("rel").indexOf("style")␣!=␣-1␣&&␣a.getAttribute("title"))␣{
␣␣␣␣␣␣a.disabled␣=␣true;
␣␣␣␣␣␣if(a.getAttribute("title")␣==␣title)␣a.disabled␣=␣false;
␣␣␣␣}
␣␣}
}

function␣getActiveStyleSheet()␣{
␣␣var␣i,␣a;
␣␣for(i=0␣␣;␣␣(a␣=␣document.getElementsByTagName("link")[i])␣␣;␣␣i++)␣{
␣␣␣␣if(␣␣␣a.getAttribute("rel").indexOf("style")␣!=␣-1
␣␣␣␣␣␣␣&&␣a.getAttribute("title")
␣␣␣␣␣␣␣&&␣!a.disabled
␣␣␣␣␣␣␣)␣return␣a.getAttribute("title");
␣␣}
␣␣return␣null;
}

function␣getPreferredStyleSheet()␣{
␣␣var␣i,␣a;
␣␣for(i=0␣␣;␣␣(a␣=␣document.getElementsByTagName("link")[i])␣␣;␣␣i++)␣{
␣␣␣␣if(␣␣␣a.getAttribute("rel").indexOf("style")␣!=␣-1
␣␣␣␣␣␣␣&&␣a.getAttribute("rel").indexOf("alt")␣==␣-1
␣␣␣␣␣␣␣&&␣a.getAttribute("title")
␣␣␣␣␣␣␣)␣return␣a.getAttribute("title");
␣␣}
␣␣return␣null;
}

function␣createCookie(name,value,days)␣{
␣␣if␣(days)␣{
␣␣␣␣var␣date␣=␣new␣Date();
␣␣␣␣date.setTime(date.getTime()+(days*24*60*60*1000));
␣␣␣␣var␣expires␣=␣";␣expires="+date.toGMTString();
␣␣}
␣␣else␣expires␣=␣"";
␣␣document.cookie␣=␣name+"="+value+expires+";␣path=/";
}

function␣readCookie(name)␣{
␣␣var␣nameEQ␣=␣name␣+␣"=";
␣␣var␣ca␣=␣document.cookie.split(';');
␣␣for(var␣i=0␣␣;␣␣i␣<␣ca.length␣␣;␣␣i++)␣{
␣␣␣␣var␣c␣=␣ca[i];
␣␣␣␣while␣(c.charAt(0)=='␣')␣c␣=␣c.substring(1,c.length);
␣␣␣␣if␣(c.indexOf(nameEQ)␣==␣0)␣return␣c.substring(nameEQ.length,c.length);
␣␣}
␣␣return␣null;
}

window.onload␣=␣function(e)␣{
␣␣var␣cookie␣=␣readCookie("style");
␣␣var␣title␣=␣cookie␣?␣cookie␣:␣getPreferredStyleSheet();
␣␣setActiveStyleSheet(title);
}

window.onunload␣=␣function(e)␣{
␣␣var␣title␣=␣getActiveStyleSheet();
␣␣createCookie("style",␣title,␣365);
}

var␣cookie␣=␣readCookie("style");
var␣title␣=␣cookie␣?␣cookie␣:␣getPreferredStyleSheet();
setActiveStyleSheet(title);

//␣The␣End

EOJAVASCRIPT
----------
Range: (2805677,2809838) (4161)
=head1␣METHODS

Pod::Simple::XHTML␣offers␣a␣number␣of␣methods␣that␣modify␣the␣format␣of
the␣HTML␣output.␣Call␣these␣after␣creating␣the␣parser␣object,␣but␣before
the␣call␣to␣C<parse_file>:

␣␣my␣$parser␣=␣Pod::PseudoPod::HTML->new();
␣␣$parser->set_optional_param("value");
␣␣$parser->parse_file($file);

=head2␣perldoc_url_prefix

In␣turning␣L<Foo::Bar>␣into␣http://whatever/Foo%3a%3aBar,␣what
to␣put␣before␣the␣"Foo%3a%3aBar".␣The␣default␣value␣is
"https://metacpan.org/pod/".

=head2␣perldoc_url_postfix

What␣to␣put␣after␣"Foo%3a%3aBar"␣in␣the␣URL.␣This␣option␣is␣not␣set␣by
default.

=head2␣man_url_prefix

In␣turning␣C<<␣L<crontab(5)>␣>>␣into␣http://whatever/man/1/crontab,␣what
to␣put␣before␣the␣"1/crontab".␣The␣default␣value␣is
"http://man.he.net/man".

=head2␣man_url_postfix

What␣to␣put␣after␣"1/crontab"␣in␣the␣URL.␣This␣option␣is␣not␣set␣by␣default.

=head2␣title_prefix,␣title_postfix

What␣to␣put␣before␣and␣after␣the␣title␣in␣the␣head.␣The␣values␣should
already␣be␣&-escaped.

=head2␣html_css

␣␣$parser->html_css('path/to/style.css');

The␣URL␣or␣relative␣path␣of␣a␣CSS␣file␣to␣include.␣This␣option␣is␣not
set␣by␣default.

=head2␣html_javascript

The␣URL␣or␣relative␣path␣of␣a␣JavaScript␣file␣to␣pull␣in.␣This␣option␣is
not␣set␣by␣default.

=head2␣html_doctype

A␣document␣type␣tag␣for␣the␣file.␣This␣option␣is␣not␣set␣by␣default.

=head2␣html_charset

The␣character␣set␣to␣declare␣in␣the␣Content-Type␣meta␣tag␣created␣by␣default
for␣C<html_header_tags>.␣Note␣that␣this␣option␣will␣be␣ignored␣if␣the␣value␣of
C<html_header_tags>␣is␣changed.␣Defaults␣to␣"ISO-8859-1".

=head2␣html_header_tags

Additional␣arbitrary␣HTML␣tags␣for␣the␣header␣of␣the␣document.␣The
default␣value␣is␣just␣a␣content␣type␣header␣tag:

␣␣<meta␣http-equiv="Content-Type"␣content="text/html;␣charset=ISO-8859-1">

Add␣additional␣meta␣tags␣here,␣or␣blocks␣of␣inline␣CSS␣or␣JavaScript
(wrapped␣in␣the␣appropriate␣tags).

=head3␣html_encode_chars

A␣string␣containing␣all␣characters␣that␣should␣be␣encoded␣as␣HTML␣entities,
specified␣using␣the␣regular␣expression␣character␣class␣syntax␣(what␣you␣find
within␣brackets␣in␣regular␣expressions).␣This␣value␣will␣be␣passed␣as␣the
second␣argument␣to␣the␣C<encode_entities>␣function␣of␣L<HTML::Entities>.␣If
L<HTML::Entities>␣is␣not␣installed,␣then␣any␣characters␣other␣than␣C<&<>"'>
will␣be␣encoded␣numerically.

=head2␣html_h_level

This␣is␣the␣level␣of␣HTML␣"Hn"␣element␣to␣which␣a␣Pod␣"head1"␣corresponds.␣␣For
example,␣if␣C<html_h_level>␣is␣set␣to␣2,␣a␣head1␣will␣produce␣an␣H2,␣a␣head2
will␣produce␣an␣H3,␣and␣so␣on.

=head2␣default_title

Set␣a␣default␣title␣for␣the␣page␣if␣no␣title␣can␣be␣determined␣from␣the
content.␣The␣value␣of␣this␣string␣should␣already␣be␣&-escaped.

=head2␣force_title

Force␣a␣title␣for␣the␣page␣(don't␣try␣to␣determine␣it␣from␣the␣content).
The␣value␣of␣this␣string␣should␣already␣be␣&-escaped.

=head2␣html_header,␣html_footer

Set␣the␣HTML␣output␣at␣the␣beginning␣and␣end␣of␣each␣file.␣The␣default
header␣includes␣a␣title,␣a␣doctype␣tag␣(if␣C<html_doctype>␣is␣set),␣a
content␣tag␣(customized␣by␣C<html_header_tags>),␣a␣tag␣for␣a␣CSS␣file
(if␣C<html_css>␣is␣set),␣and␣a␣tag␣for␣a␣Javascript␣file␣(if
C<html_javascript>␣is␣set).␣The␣default␣footer␣simply␣closes␣the␣C<html>
and␣C<body>␣tags.

The␣options␣listed␣above␣customize␣parts␣of␣the␣default␣header,␣but
setting␣C<html_header>␣or␣C<html_footer>␣completely␣overrides␣the
built-in␣header␣or␣footer.␣These␣may␣be␣useful␣if␣you␣want␣to␣use
template␣tags␣instead␣of␣literal␣HTML␣headers␣and␣footers␣or␣are
integrating␣converted␣POD␣pages␣in␣a␣larger␣website.

If␣you␣want␣no␣headers␣or␣footers␣output␣in␣the␣HTML,␣set␣these␣options
to␣the␣empty␣string.

=head2␣index

Whether␣to␣add␣a␣table-of-contents␣at␣the␣top␣of␣each␣page␣(called␣an
index␣for␣the␣sake␣of␣tradition).

=head2␣anchor_items

Whether␣to␣anchor␣every␣definition␣C<=item>␣directive.␣This␣needs␣to␣be
enabled␣if␣you␣want␣to␣be␣able␣to␣link␣to␣specific␣C<=item>␣directives,␣which
are␣output␣as␣C<<␣<dt>␣>>␣elements.␣Disabled␣by␣default.

=head2␣backlink

Whether␣to␣turn␣every␣=head1␣directive␣into␣a␣link␣pointing␣to␣the␣top␣
of␣the␣page␣(specifically,␣the␣opening␣body␣tag).

=cut
----------
Range: (2811688,2813821) (2133)
=head2␣handle_text

This␣method␣handles␣the␣body␣of␣text␣within␣any␣element:␣it's␣the␣body
of␣a␣paragraph,␣or␣everything␣between␣a␣"=begin"␣tag␣and␣the
corresponding␣"=end"␣tag,␣or␣the␣text␣within␣an␣L␣entity,␣etc.␣You␣would
want␣to␣override␣this␣if␣you␣are␣adding␣a␣custom␣element␣type␣that␣does
more␣than␣just␣display␣formatted␣text.␣Perhaps␣adding␣a␣way␣to␣generate
HTML␣tables␣from␣an␣extended␣version␣of␣POD.

So,␣let's␣say␣you␣want␣to␣add␣a␣custom␣element␣called␣'foo'.␣In␣your
subclass's␣C<new>␣method,␣after␣calling␣C<SUPER::new>␣you'd␣call:

␣␣$new->accept_targets_as_text(␣'foo'␣);

Then␣override␣the␣C<start_for>␣method␣in␣the␣subclass␣to␣check␣for␣when
"$flags->{'target'}"␣is␣equal␣to␣'foo'␣and␣set␣a␣flag␣that␣marks␣that
you're␣in␣a␣foo␣block␣(maybe␣"$self->{'in_foo'}␣=␣1").␣Then␣override␣the
C<handle_text>␣method␣to␣check␣for␣the␣flag,␣and␣pass␣$text␣to␣your
custom␣subroutine␣to␣construct␣the␣HTML␣output␣for␣'foo'␣elements,
something␣like:

␣␣sub␣handle_text␣{
␣␣␣␣␣␣my␣($self,␣$text)␣=␣@_;
␣␣␣␣␣␣if␣($self->{'in_foo'})␣{
␣␣␣␣␣␣␣␣␣␣$self->{'scratch'}␣.=␣build_foo_html($text);
␣␣␣␣␣␣␣␣␣␣return;
␣␣␣␣␣␣}
␣␣␣␣␣␣$self->SUPER::handle_text($text);
␣␣}

=head2␣handle_code

This␣method␣handles␣the␣body␣of␣text␣that␣is␣marked␣up␣to␣be␣code.
You␣might␣for␣instance␣override␣this␣to␣plug␣in␣a␣syntax␣highlighter.
The␣base␣implementation␣just␣escapes␣the␣text.

The␣callback␣methods␣C<start_code>␣and␣C<end_code>␣emits␣the␣C<code>␣tags
before␣and␣after␣C<handle_code>␣is␣invoked,␣so␣you␣might␣want␣to␣override␣these
together␣with␣C<handle_code>␣if␣this␣wrapping␣isn't␣suitable.

Note␣that␣the␣code␣might␣be␣broken␣into␣multiple␣segments␣if␣there␣are
nested␣formatting␣codes␣inside␣a␣C<<␣CE<lt>...>␣>>␣sequence.␣␣In␣between␣the
calls␣to␣C<handle_code>␣other␣markup␣tags␣might␣have␣been␣emitted␣in␣that
case.␣␣The␣same␣is␣true␣for␣verbatim␣sections␣if␣the␣C<codes_in_verbatim>
option␣is␣turned␣on.

=head2␣accept_targets_as_html

This␣method␣behaves␣like␣C<accept_targets_as_text>,␣but␣also␣marks␣the␣region
as␣one␣whose␣content␣should␣be␣emitted␣literally,␣without␣HTML␣entity␣escaping
or␣wrapping␣in␣a␣C<div>␣element.

=cut
----------
Range: (2881204,2885273) (4069)
=head1␣NAME

Pod::Html␣-␣module␣to␣convert␣pod␣files␣to␣HTML

=head1␣SYNOPSIS

␣␣␣␣use␣Pod::Html;
␣␣␣␣pod2html([options]);

=head1␣DESCRIPTION

Converts␣files␣from␣pod␣format␣(see␣L<perlpod>)␣to␣HTML␣format.␣␣It
can␣automatically␣generate␣indexes␣and␣cross-references,␣and␣it␣keeps
a␣cache␣of␣things␣it␣knows␣how␣to␣cross-reference.

=head1␣FUNCTIONS

=head2␣pod2html

␣␣␣␣pod2html("pod2html",
␣␣␣␣␣␣␣␣␣␣␣␣␣"--podpath=lib:ext:pod:vms",
␣␣␣␣␣␣␣␣␣␣␣␣␣"--podroot=/usr/src/perl",
␣␣␣␣␣␣␣␣␣␣␣␣␣"--htmlroot=/perl/nmanual",
␣␣␣␣␣␣␣␣␣␣␣␣␣"--recurse",
␣␣␣␣␣␣␣␣␣␣␣␣␣"--infile=foo.pod",
␣␣␣␣␣␣␣␣␣␣␣␣␣"--outfile=/perl/nmanual/foo.html");

pod2html␣takes␣the␣following␣arguments:

=over␣4

=item␣backlink

␣␣␣␣--backlink

Turns␣every␣C<head1>␣heading␣into␣a␣link␣back␣to␣the␣top␣of␣the␣page.
By␣default,␣no␣backlinks␣are␣generated.

=item␣cachedir

␣␣␣␣--cachedir=name

Creates␣the␣directory␣cache␣in␣the␣given␣directory.

=item␣css

␣␣␣␣--css=stylesheet

Specify␣the␣URL␣of␣a␣cascading␣style␣sheet.␣␣Also␣disables␣all␣HTML/CSS
C<style>␣attributes␣that␣are␣output␣by␣default␣(to␣avoid␣conflicts).

=item␣flush

␣␣␣␣--flush

Flushes␣the␣directory␣cache.

=item␣header

␣␣␣␣--header
␣␣␣␣--noheader

Creates␣header␣and␣footer␣blocks␣containing␣the␣text␣of␣the␣C<NAME>
section.␣␣By␣default,␣no␣headers␣are␣generated.

=item␣help

␣␣␣␣--help

Displays␣the␣usage␣message.

=item␣htmldir

␣␣␣␣--htmldir=name

Sets␣the␣directory␣to␣which␣all␣cross␣references␣in␣the␣resulting
html␣file␣will␣be␣relative.␣Not␣passing␣this␣causes␣all␣links␣to␣be
absolute␣since␣this␣is␣the␣value␣that␣tells␣Pod::Html␣the␣root␣of␣the␣
documentation␣tree.

Do␣not␣use␣this␣and␣--htmlroot␣in␣the␣same␣call␣to␣pod2html;␣they␣are
mutually␣exclusive.

=item␣htmlroot

␣␣␣␣--htmlroot=name

Sets␣the␣base␣URL␣for␣the␣HTML␣files.␣␣When␣cross-references␣are␣made,
the␣HTML␣root␣is␣prepended␣to␣the␣URL.

Do␣not␣use␣this␣if␣relative␣links␣are␣desired:␣use␣--htmldir␣instead.

Do␣not␣pass␣both␣this␣and␣--htmldir␣to␣pod2html;␣they␣are␣mutually
exclusive.

=item␣index

␣␣␣␣--index
␣␣␣␣--noindex

Generate␣an␣index␣at␣the␣top␣of␣the␣HTML␣file.␣␣This␣is␣the␣default
behaviour.

=item␣infile

␣␣␣␣--infile=name

Specify␣the␣pod␣file␣to␣convert.␣␣Input␣is␣taken␣from␣STDIN␣if␣no
infile␣is␣specified.

=item␣outfile

␣␣␣␣--outfile=name

Specify␣the␣HTML␣file␣to␣create.␣␣Output␣goes␣to␣STDOUT␣if␣no␣outfile
is␣specified.

=item␣poderrors

␣␣␣␣--poderrors
␣␣␣␣--nopoderrors

Include␣a␣"POD␣ERRORS"␣section␣in␣the␣outfile␣if␣there␣were␣any␣POD␣
errors␣in␣the␣infile.␣This␣section␣is␣included␣by␣default.

=item␣podpath

␣␣␣␣--podpath=name:...:name

Specify␣which␣subdirectories␣of␣the␣podroot␣contain␣pod␣files␣whose
HTML␣converted␣forms␣can␣be␣linked␣to␣in␣cross␣references.

=item␣podroot

␣␣␣␣--podroot=name

Specify␣the␣base␣directory␣for␣finding␣library␣pods.␣Default␣is␣the
current␣working␣directory.

=item␣quiet

␣␣␣␣--quiet
␣␣␣␣--noquiet

Don't␣display␣I<mostly␣harmless>␣warning␣messages.␣␣These␣messages
will␣be␣displayed␣by␣default.␣␣But␣this␣is␣not␣the␣same␣as␣C<verbose>
mode.

=item␣recurse

␣␣␣␣--recurse
␣␣␣␣--norecurse

Recurse␣into␣subdirectories␣specified␣in␣podpath␣(default␣behaviour).

=item␣title

␣␣␣␣--title=title

Specify␣the␣title␣of␣the␣resulting␣HTML␣file.

=item␣verbose

␣␣␣␣--verbose
␣␣␣␣--noverbose

Display␣progress␣messages.␣␣By␣default,␣they␣won't␣be␣displayed.

=back

=head2␣htmlify

␣␣␣␣htmlify($heading);

Converts␣a␣pod␣section␣specification␣to␣a␣suitable␣section␣specification
for␣HTML.␣Note␣that␣we␣keep␣spaces␣and␣special␣characters␣except
C<",␣?>␣(Netscape␣problem)␣and␣the␣hyphen␣(writer's␣problem...).

=head2␣anchorify

␣␣␣␣anchorify(@heading);

Similar␣to␣C<htmlify()>,␣but␣turns␣non-alphanumerics␣into␣underscores.␣␣Note
that␣C<anchorify()>␣is␣not␣exported␣by␣default.

=head1␣ENVIRONMENT

Uses␣C<$Config{pod2html}>␣to␣setup␣default␣options.

=head1␣AUTHOR

Marc␣Green,␣E<lt>marcgreen@cpan.orgE<gt>.␣

Original␣version␣by␣Tom␣Christiansen,␣E<lt>tchrist@perl.comE<gt>.

=head1␣SEE␣ALSO

L<perlpod>

=head1␣COPYRIGHT

This␣program␣is␣distributed␣under␣the␣Artistic␣License.

=cut
----------
Range: (2893998,2896061) (2063)
<<END_OF_USAGE;
Usage:␣␣$0␣--help␣--htmldir=<name>␣--htmlroot=<URL>
␣␣␣␣␣␣␣␣␣␣␣--infile=<name>␣--outfile=<name>
␣␣␣␣␣␣␣␣␣␣␣--podpath=<name>:...:<name>␣--podroot=<name>
␣␣␣␣␣␣␣␣␣␣␣--cachedir=<name>␣--flush␣--recurse␣--norecurse
␣␣␣␣␣␣␣␣␣␣␣--quiet␣--noquiet␣--verbose␣--noverbose
␣␣␣␣␣␣␣␣␣␣␣--index␣--noindex␣--backlink␣--nobacklink
␣␣␣␣␣␣␣␣␣␣␣--header␣--noheader␣--poderrors␣--nopoderrors
␣␣␣␣␣␣␣␣␣␣␣--css=<URL>␣--title=<name>

␣␣--[no]backlink␣␣-␣turn␣=head1␣directives␣into␣links␣pointing␣to␣the␣top␣of
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣the␣page␣(off␣by␣default).
␣␣--cachedir␣␣␣␣␣␣-␣directory␣for␣the␣directory␣cache␣files.
␣␣--css␣␣␣␣␣␣␣␣␣␣␣-␣stylesheet␣URL
␣␣--flush␣␣␣␣␣␣␣␣␣-␣flushes␣the␣directory␣cache.
␣␣--[no]header␣␣␣␣-␣produce␣block␣header/footer␣(default␣is␣no␣headers).
␣␣--help␣␣␣␣␣␣␣␣␣␣-␣prints␣this␣message.
␣␣--htmldir␣␣␣␣␣␣␣-␣directory␣for␣resulting␣HTML␣files.
␣␣--htmlroot␣␣␣␣␣␣-␣http-server␣base␣directory␣from␣which␣all␣relative␣paths
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣in␣podpath␣stem␣(default␣is␣/).
␣␣--[no]index␣␣␣␣␣-␣generate␣an␣index␣at␣the␣top␣of␣the␣resulting␣html
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣(default␣behaviour).
␣␣--infile␣␣␣␣␣␣␣␣-␣filename␣for␣the␣pod␣to␣convert␣(input␣taken␣from␣stdin
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣by␣default).
␣␣--outfile␣␣␣␣␣␣␣-␣filename␣for␣the␣resulting␣html␣file␣(output␣sent␣to
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣stdout␣by␣default).
␣␣--[no]poderrors␣-␣include␣a␣POD␣ERRORS␣section␣in␣the␣output␣if␣there␣were␣
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣any␣POD␣errors␣in␣the␣input␣(default␣behavior).
␣␣--podpath␣␣␣␣␣␣␣-␣colon-separated␣list␣of␣directories␣containing␣library
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣pods␣(empty␣by␣default).
␣␣--podroot␣␣␣␣␣␣␣-␣filesystem␣base␣directory␣from␣which␣all␣relative␣paths
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣in␣podpath␣stem␣(default␣is␣.).
␣␣--[no]quiet␣␣␣␣␣-␣suppress␣some␣benign␣warning␣messages␣(default␣is␣off).
␣␣--[no]recurse␣␣␣-␣recurse␣on␣those␣subdirectories␣listed␣in␣podpath
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣(default␣behaviour).
␣␣--title␣␣␣␣␣␣␣␣␣-␣title␣that␣will␣appear␣in␣resulting␣html␣file.
␣␣--[no]verbose␣␣␣-␣self-explanatory␣(off␣by␣default).

END_OF_USAGE
----------
Range: (3061800,3063875) (2075)
<<EOF␣);
perldoc␣[options]␣PageName|ModuleName|ProgramName|URL...
perldoc␣[options]␣-f␣BuiltinFunction
perldoc␣[options]␣-q␣FAQRegex
perldoc␣[options]␣-v␣PerlVariable

Options:
␣␣␣␣-h␣␣␣Display␣this␣help␣message
␣␣␣␣-V␣␣␣Report␣version
␣␣␣␣-r␣␣␣Recursive␣search␣(slow)
␣␣␣␣-i␣␣␣Ignore␣case
␣␣␣␣-t␣␣␣Display␣pod␣using␣pod2text␣instead␣of␣Pod::Man␣and␣groff
␣␣␣␣␣␣␣␣␣␣␣␣␣(-t␣is␣the␣default␣on␣win32␣unless␣-n␣is␣specified)
␣␣␣␣-u␣␣␣Display␣unformatted␣pod␣text
␣␣␣␣-m␣␣␣Display␣module's␣file␣in␣its␣entirety
␣␣␣␣-n␣␣␣Specify␣replacement␣for␣groff
␣␣␣␣-l␣␣␣Display␣the␣module's␣file␣name
␣␣␣␣-U␣␣␣Don't␣attempt␣to␣drop␣privs␣for␣security
␣␣␣␣-F␣␣␣Arguments␣are␣file␣names,␣not␣modules␣(implies␣-U)
␣␣␣␣-D␣␣␣Verbosely␣describe␣what's␣going␣on
␣␣␣␣-T␣␣␣Send␣output␣to␣STDOUT␣without␣any␣pager
␣␣␣␣-d␣output_filename_to_send_to
␣␣␣␣-o␣output_format_name
␣␣␣␣-M␣FormatterModuleNameToUse
␣␣␣␣-w␣formatter_option:option_value
␣␣␣␣-L␣translation_code␣␣␣Choose␣doc␣translation␣(if␣any)
␣␣␣␣-X␣␣␣Use␣index␣if␣present␣(looks␣for␣pod.idx␣at␣$Config{archlib})
␣␣␣␣-q␣␣␣Search␣the␣text␣of␣questions␣(not␣answers)␣in␣perlfaq[1-9]
␣␣␣␣-f␣␣␣Search␣Perl␣built-in␣functions
␣␣␣␣-a␣␣␣Search␣Perl␣API
␣␣␣␣-v␣␣␣Search␣predefined␣Perl␣variables

PageName|ModuleName|ProgramName|URL...
␣␣␣␣␣␣␣␣␣is␣the␣name␣of␣a␣piece␣of␣documentation␣that␣you␣want␣to␣look␣at.␣You
␣␣␣␣␣␣␣␣␣may␣either␣give␣a␣descriptive␣name␣of␣the␣page␣(as␣in␣the␣case␣of
␣␣␣␣␣␣␣␣␣`perlfunc')␣the␣name␣of␣a␣module,␣either␣like␣`Term::Info'␣or␣like
␣␣␣␣␣␣␣␣␣`Term/Info',␣or␣the␣name␣of␣a␣program,␣like␣`perldoc',␣or␣a␣URL
␣␣␣␣␣␣␣␣␣starting␣with␣http(s).

BuiltinFunction
␣␣␣␣␣␣␣␣␣is␣the␣name␣of␣a␣perl␣function.␣␣Will␣extract␣documentation␣from
␣␣␣␣␣␣␣␣␣`perlfunc'␣or␣`perlop'.

FAQRegex
␣␣␣␣␣␣␣␣␣is␣a␣regex.␣Will␣search␣perlfaq[1-9]␣for␣and␣extract␣any
␣␣␣␣␣␣␣␣␣questions␣that␣match.

Any␣switches␣in␣the␣PERLDOC␣environment␣variable␣will␣be␣used␣before␣the
command␣line␣arguments.␣␣The␣optional␣pod␣index␣file␣contains␣a␣list␣of
filenames,␣one␣per␣line.
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣[Perldoc␣v$VERSION]
EOF
----------
Range: (3120002,3124796) (4794)
=head1␣NAME

encoding::warnings␣-␣Warn␣on␣implicit␣encoding␣conversions

=head1␣VERSION

This␣document␣describes␣version␣0.13␣of␣encoding::warnings,␣released
June␣20,␣2016.

=head1␣NOTICE

As␣of␣Perl␣5.26.0,␣this␣module␣has␣no␣effect.␣␣The␣internal␣Perl␣feature
that␣was␣used␣to␣implement␣this␣module␣has␣been␣removed.␣␣In␣recent␣years,
much␣work␣has␣been␣done␣on␣the␣Perl␣core␣to␣eliminate␣discrepancies␣in␣the
treatment␣of␣upgraded␣versus␣downgraded␣strings.␣␣In␣addition,␣the
L<encoding>␣pragma,␣which␣caused␣many␣of␣the␣problems,␣is␣no␣longer
supported.␣␣Thus,␣the␣warnings␣this␣module␣produced␣are␣no␣longer
necessary.

Hence,␣if␣you␣load␣this␣module␣on␣Perl␣5.26.0,␣you␣will␣get␣one␣warning
that␣the␣module␣is␣no␣longer␣supported;␣and␣the␣module␣will␣do␣nothing
thereafter.

=head1␣SYNOPSIS

␣␣␣␣use␣encoding::warnings;␣#␣or␣'FATAL'␣to␣raise␣fatal␣exceptions

␣␣␣␣utf8::encode($a␣=␣chr(20000));␣␣#␣a␣byte-string␣(raw␣bytes)
␣␣␣␣$b␣=␣chr(20000);		␣␣␣␣#␣a␣unicode-string␣(wide␣characters)

␣␣␣␣#␣"Bytes␣implicitly␣upgraded␣into␣wide␣characters␣as␣iso-8859-1"
␣␣␣␣$c␣=␣$a␣.␣$b;

=head1␣DESCRIPTION

=head2␣Overview␣of␣the␣problem

By␣default,␣there␣is␣a␣fundamental␣asymmetry␣in␣Perl's␣unicode␣model:
implicit␣upgrading␣from␣byte-strings␣to␣unicode-strings␣assumes␣that
they␣were␣encoded␣in␣I<ISO␣8859-1␣(Latin-1)>,␣but␣unicode-strings␣are
downgraded␣with␣UTF-8␣encoding.␣␣This␣happens␣because␣the␣first␣256
codepoints␣in␣Unicode␣happens␣to␣agree␣with␣Latin-1.␣␣

However,␣this␣silent␣upgrading␣can␣easily␣cause␣problems,␣if␣you␣happen
to␣mix␣unicode␣strings␣with␣non-Latin1␣data␣--␣i.e.␣byte-strings␣encoded
in␣UTF-8␣or␣other␣encodings.␣␣The␣error␣will␣not␣manifest␣until␣the
combined␣string␣is␣written␣to␣output,␣at␣which␣time␣it␣would␣be␣impossible
to␣see␣where␣did␣the␣silent␣upgrading␣occur.

=head2␣Detecting␣the␣problem

This␣module␣simplifies␣the␣process␣of␣diagnosing␣such␣problems.␣␣Just␣put
this␣line␣on␣top␣of␣your␣main␣program:

␣␣␣␣use␣encoding::warnings;

Afterwards,␣implicit␣upgrading␣of␣high-bit␣bytes␣will␣raise␣a␣warning.
Ex.:␣C<Bytes␣implicitly␣upgraded␣into␣wide␣characters␣as␣iso-8859-1␣at
-␣line␣7>.

However,␣strings␣composed␣purely␣of␣ASCII␣code␣points␣(C<0x00>..C<0x7F>)
will␣I<not>␣trigger␣this␣warning.

You␣can␣also␣make␣the␣warnings␣fatal␣by␣importing␣this␣module␣as:

␣␣␣␣use␣encoding::warnings␣'FATAL';

=head2␣Solving␣the␣problem

Most␣of␣the␣time,␣this␣warning␣occurs␣when␣a␣byte-string␣is␣concatenated
with␣a␣unicode-string.␣␣There␣are␣a␣number␣of␣ways␣to␣solve␣it:

=over␣4

=item␣*␣Upgrade␣both␣sides␣to␣unicode-strings

If␣your␣program␣does␣not␣need␣compatibility␣for␣Perl␣5.6␣and␣earlier,
the␣recommended␣approach␣is␣to␣apply␣appropriate␣IO␣disciplines,␣so␣all
data␣in␣your␣program␣become␣unicode-strings.␣␣See␣L<encoding>,␣L<open>␣and
L<perlfunc/binmode>␣for␣how.

=item␣*␣Downgrade␣both␣sides␣to␣byte-strings

The␣other␣way␣works␣too,␣especially␣if␣you␣are␣sure␣that␣all␣your␣data
are␣under␣the␣same␣encoding,␣or␣if␣compatibility␣with␣older␣versions
of␣Perl␣is␣desired.

You␣may␣downgrade␣strings␣with␣C<Encode::encode>␣and␣C<utf8::encode>.
See␣L<Encode>␣and␣L<utf8>␣for␣details.

=item␣*␣Specify␣the␣encoding␣for␣implicit␣byte-string␣upgrading

If␣you␣are␣confident␣that␣all␣byte-strings␣will␣be␣in␣a␣specific
encoding␣like␣UTF-8,␣I<and>␣need␣not␣support␣older␣versions␣of␣Perl,
use␣the␣C<encoding>␣pragma:

␣␣␣␣use␣encoding␣'utf8';

Similarly,␣this␣will␣silence␣warnings␣from␣this␣module,␣and␣preserve␣the
default␣behaviour:

␣␣␣␣use␣encoding␣'iso-8859-1';

However,␣note␣that␣C<use␣encoding>␣actually␣had␣three␣distinct␣effects:

=over␣4

=item␣*␣PerlIO␣layers␣for␣B<STDIN>␣and␣B<STDOUT>

This␣is␣similar␣to␣what␣L<open>␣pragma␣does.

=item␣*␣Literal␣conversions

This␣turns␣I<all>␣literal␣string␣in␣your␣program␣into␣unicode-strings
(equivalent␣to␣a␣C<use␣utf8>),␣by␣decoding␣them␣using␣the␣specified
encoding.

=item␣*␣Implicit␣upgrading␣for␣byte-strings

This␣will␣silence␣warnings␣from␣this␣module,␣as␣shown␣above.

=back

Because␣literal␣conversions␣also␣work␣on␣empty␣strings,␣it␣may␣surprise
some␣people:

␣␣␣␣use␣encoding␣'big5';

␣␣␣␣my␣$byte_string␣=␣pack("C*",␣0xA4,␣0x40);
␣␣␣␣print␣length␣$a;	#␣2␣here.
␣␣␣␣$a␣.=␣"";		#␣concatenating␣with␣a␣unicode␣string...
␣␣␣␣print␣length␣$a;	#␣1␣here!

In␣other␣words,␣do␣not␣C<use␣encoding>␣unless␣you␣are␣certain␣that␣the
program␣will␣not␣deal␣with␣any␣raw,␣8-bit␣binary␣data␣at␣all.

However,␣the␣C<Filter␣=E<gt>␣1>␣flavor␣of␣C<use␣encoding>␣will␣I<not>
affect␣implicit␣upgrading␣for␣byte-strings,␣and␣is␣thus␣incapable␣of
silencing␣warnings␣from␣this␣module.␣␣See␣L<encoding>␣for␣more␣details.

=back

=head1␣CAVEATS

For␣Perl␣5.9.4␣or␣later,␣this␣module's␣effect␣is␣lexical.

For␣Perl␣versions␣prior␣to␣5.9.4,␣this␣module␣affects␣the␣whole␣script,
instead␣of␣inside␣its␣lexical␣block.

=cut
----------
Range: (3198890,3200406) (1516)
}



=item␣C<dirname>
X<dirname>

This␣function␣is␣provided␣for␣compatibility␣with␣the␣Unix␣shell
command␣C<dirname(1)>␣and␣has␣inherited␣some␣of␣its␣quirks.␣␣In␣spite␣of
its␣name␣it␣does␣B<NOT>␣always␣return␣the␣directory␣name␣as␣you␣might
expect.␣␣To␣be␣safe,␣if␣you␣want␣the␣directory␣name␣of␣a␣path␣use
C<fileparse()>.

Only␣on␣VMS␣(where␣there␣is␣no␣ambiguity␣between␣the␣file␣and␣directory
portions␣of␣a␣path)␣and␣AmigaOS␣(possibly␣due␣to␣an␣implementation␣quirk␣in
this␣module)␣does␣C<dirname()>␣work␣like␣C<fileparse($path)>,␣returning␣just␣the
$dirs.

␣␣␣␣#␣On␣VMS␣and␣AmigaOS
␣␣␣␣my␣$dirs␣=␣dirname($path);

When␣using␣Unix␣or␣MSDOS␣syntax␣this␣emulates␣the␣C<dirname(1)>␣shell␣function
which␣is␣subtly␣different␣from␣how␣C<fileparse()>␣works.␣␣It␣returns␣all␣but
the␣last␣level␣of␣a␣file␣path␣even␣if␣the␣last␣level␣is␣clearly␣a␣directory.
In␣effect,␣it␣is␣not␣returning␣the␣directory␣portion␣but␣simply␣the␣path␣one
level␣up␣acting␣like␣C<chop()>␣for␣file␣paths.

Also␣unlike␣C<fileparse()>,␣C<dirname()>␣does␣not␣include␣a␣trailing␣slash␣on
its␣returned␣path.

␣␣␣␣#␣returns␣/foo/bar.␣␣fileparse()␣would␣return␣/foo/bar/
␣␣␣␣dirname("/foo/bar/baz");

␣␣␣␣#␣also␣returns␣/foo/bar␣despite␣the␣fact␣that␣baz␣is␣clearly␣a␣
␣␣␣␣#␣directory.␣␣fileparse()␣would␣return␣/foo/bar/baz/
␣␣␣␣dirname("/foo/bar/baz/");

␣␣␣␣#␣returns␣'.'.␣␣fileparse()␣would␣return␣'foo/'
␣␣␣␣dirname("foo/");

Under␣VMS,␣if␣there␣is␣no␣directory␣information␣in␣the␣$path,␣then␣the
current␣default␣device␣and␣directory␣is␣used.

=cut
----------
Range: (3203247,3207865) (4618)
=head1␣SEE␣ALSO

L<dirname(1)>,␣L<basename(1)>,␣L<File::Spec>
package␣File::Fetch;

use␣strict;
use␣FileHandle;
use␣File::Temp;
use␣File::Copy;
use␣File::Spec;
use␣File::Spec::Unix;
use␣File::Basename␣␣␣␣␣␣␣␣␣␣␣␣␣␣qw[dirname];

use␣Cwd␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣qw[cwd];
use␣Carp␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣qw[carp];
use␣IPC::Cmd␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣qw[can_run␣run␣QUOTE];
use␣File::Path␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣qw[mkpath];
use␣File::Temp␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣qw[tempdir];
use␣Params::Check␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣qw[check];
use␣Module::Load::Conditional␣␣␣qw[can_load];
use␣Locale::Maketext::Simple␣␣␣␣Style␣=>␣'gettext';

use␣vars␣␣␣␣qw[␣$VERBOSE␣$PREFER_BIN␣$FROM_EMAIL␣$USER_AGENT
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣$BLACKLIST␣$METHOD_FAIL␣$VERSION␣$METHODS
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣$FTP_PASSIVE␣$TIMEOUT␣$DEBUG␣$WARN␣$FORCEIPV4
␣␣␣␣␣␣␣␣␣␣␣␣];

$VERSION␣␣␣␣␣␣␣␣=␣'1.00';
$VERSION␣␣␣␣␣␣␣␣=␣eval␣$VERSION;␣␣␣␣#␣avoid␣warnings␣with␣development␣releases
$PREFER_BIN␣␣␣␣␣=␣0;␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣XXX␣TODO␣implement
$FROM_EMAIL␣␣␣␣␣=␣'File-Fetch@example.com';
$USER_AGENT␣␣␣␣␣=␣"File::Fetch/$VERSION";
$BLACKLIST␣␣␣␣␣␣=␣[qw|ftp|];
push␣@$BLACKLIST,␣qw|lftp|␣if␣$^O␣eq␣'dragonfly'␣||␣$^O␣eq␣'hpux';
$METHOD_FAIL␣␣␣␣=␣{␣};
$FTP_PASSIVE␣␣␣␣=␣1;
$TIMEOUT␣␣␣␣␣␣␣␣=␣0;
$DEBUG␣␣␣␣␣␣␣␣␣␣=␣0;
$WARN␣␣␣␣␣␣␣␣␣␣␣=␣1;
$FORCEIPV4␣␣␣␣␣␣=␣0;

###␣methods␣available␣to␣fetch␣the␣file␣depending␣on␣the␣scheme
$METHODS␣=␣{
␣␣␣␣http␣␣␣␣=>␣[␣qw|lwp␣httptiny␣wget␣curl␣lftp␣fetch␣httplite␣lynx␣iosock|␣],
␣␣␣␣https␣␣␣=>␣[␣qw|lwp␣wget␣curl|␣],
␣␣␣␣ftp␣␣␣␣␣=>␣[␣qw|lwp␣netftp␣wget␣curl␣lftp␣fetch␣ncftp␣ftp|␣],
␣␣␣␣file␣␣␣␣=>␣[␣qw|lwp␣lftp␣file|␣],
␣␣␣␣rsync␣␣␣=>␣[␣qw|rsync|␣],
␣␣␣␣git␣␣␣␣␣=>␣[␣qw|git|␣],
};

###␣silly␣warnings␣###
local␣$Params::Check::VERBOSE␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣=␣1;
local␣$Params::Check::VERBOSE␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣=␣1;
local␣$Module::Load::Conditional::VERBOSE␣␣␣=␣0;
local␣$Module::Load::Conditional::VERBOSE␣␣␣=␣0;

###␣see␣what␣OS␣we␣are␣on,␣important␣for␣file://␣uris␣###
use␣constant␣ON_WIN␣␣␣␣␣=>␣($^O␣eq␣'MSWin32');
use␣constant␣ON_VMS␣␣␣␣␣=>␣($^O␣eq␣'VMS');
use␣constant␣ON_UNIX␣␣␣␣=>␣(!ON_WIN);
use␣constant␣HAS_VOL␣␣␣␣=>␣(ON_WIN);
use␣constant␣HAS_SHARE␣␣=>␣(ON_WIN);
use␣constant␣HAS_FETCH␣␣=>␣(␣$^O␣=~␣m!^(freebsd|netbsd|dragonfly)$!␣);

=pod

=head1␣NAME

File::Fetch␣-␣A␣generic␣file␣fetching␣mechanism

=head1␣SYNOPSIS

␣␣␣␣use␣File::Fetch;

␣␣␣␣###␣build␣a␣File::Fetch␣object␣###
␣␣␣␣my␣$ff␣=␣File::Fetch->new(uri␣=>␣'http://some.where.com/dir/a.txt');

␣␣␣␣###␣fetch␣the␣uri␣to␣cwd()␣###
␣␣␣␣my␣$where␣=␣$ff->fetch()␣or␣die␣$ff->error;

␣␣␣␣###␣fetch␣the␣uri␣to␣/tmp␣###
␣␣␣␣my␣$where␣=␣$ff->fetch(␣to␣=>␣'/tmp'␣);

␣␣␣␣###␣parsed␣bits␣from␣the␣uri␣###
␣␣␣␣$ff->uri;
␣␣␣␣$ff->scheme;
␣␣␣␣$ff->host;
␣␣␣␣$ff->path;
␣␣␣␣$ff->file;

=head1␣DESCRIPTION

File::Fetch␣is␣a␣generic␣file␣fetching␣mechanism.

It␣allows␣you␣to␣fetch␣any␣file␣pointed␣to␣by␣a␣C<ftp>,␣C<http>,
C<file>,␣C<git>␣or␣C<rsync>␣uri␣by␣a␣number␣of␣different␣means.

See␣the␣C<HOW␣IT␣WORKS>␣section␣further␣down␣for␣details.

=head1␣ACCESSORS

A␣C<File::Fetch>␣object␣has␣the␣following␣accessors

=over␣4

=item␣$ff->uri

The␣uri␣you␣passed␣to␣the␣constructor

=item␣$ff->scheme

The␣scheme␣from␣the␣uri␣(like␣'file',␣'http',␣etc)

=item␣$ff->host

The␣hostname␣in␣the␣uri.␣␣Will␣be␣empty␣if␣host␣was␣originally
'localhost'␣for␣a␣'file://'␣url.

=item␣$ff->vol

On␣operating␣systems␣with␣the␣concept␣of␣a␣volume␣the␣second␣element
of␣a␣file://␣is␣considered␣to␣the␣be␣volume␣specification␣for␣the␣file.
Thus␣on␣Win32␣this␣routine␣returns␣the␣volume,␣on␣other␣operating
systems␣this␣returns␣nothing.

On␣Windows␣this␣value␣may␣be␣empty␣if␣the␣uri␣is␣to␣a␣network␣share,␣in
which␣case␣the␣'share'␣property␣will␣be␣defined.␣Additionally,␣volume
specifications␣that␣use␣'|'␣as␣':'␣will␣be␣converted␣on␣read␣to␣use␣':'.

On␣VMS,␣which␣has␣a␣volume␣concept,␣this␣field␣will␣be␣empty␣because␣VMS
file␣specifications␣are␣converted␣to␣absolute␣UNIX␣format␣and␣the␣volume
information␣is␣transparently␣included.

=item␣$ff->share

On␣systems␣with␣the␣concept␣of␣a␣network␣share␣(currently␣only␣Windows)␣returns
the␣sharename␣from␣a␣file:////␣url.␣␣On␣other␣operating␣systems␣returns␣empty.

=item␣$ff->path

The␣path␣from␣the␣uri,␣will␣be␣at␣least␣a␣single␣'/'.

=item␣$ff->file

The␣name␣of␣the␣remote␣file.␣For␣the␣local␣file␣name,␣the
result␣of␣$ff->output_file␣will␣be␣used.

=item␣$ff->file_default

The␣name␣of␣the␣default␣local␣file,␣that␣$ff->output_file␣falls␣back␣to␣if
it␣would␣otherwise␣return␣no␣filename.␣For␣example␣when␣fetching␣a␣URI␣like
http://www.abc.net.au/␣the␣contents␣retrieved␣may␣be␣from␣a␣remote␣file␣called
'index.html'.␣The␣default␣value␣of␣this␣attribute␣is␣literally␣'file_default'.

=cut
----------
Range: (3244364,3250400) (6036)
=pod

=head1␣HOW␣IT␣WORKS

File::Fetch␣is␣able␣to␣fetch␣a␣variety␣of␣uris,␣by␣using␣several
external␣programs␣and␣modules.

Below␣is␣a␣mapping␣of␣what␣utilities␣will␣be␣used␣in␣what␣order
for␣what␣schemes,␣if␣available:

␣␣␣␣file␣␣␣␣=>␣LWP,␣lftp,␣file
␣␣␣␣http␣␣␣␣=>␣LWP,␣HTTP::Tiny,␣wget,␣curl,␣lftp,␣fetch,␣HTTP::Lite,␣lynx,␣iosock
␣␣␣␣ftp␣␣␣␣␣=>␣LWP,␣Net::FTP,␣wget,␣curl,␣lftp,␣fetch,␣ncftp,␣ftp
␣␣␣␣rsync␣␣␣=>␣rsync
␣␣␣␣git␣␣␣␣␣=>␣git

If␣you'd␣like␣to␣disable␣the␣use␣of␣one␣or␣more␣of␣these␣utilities
and/or␣modules,␣see␣the␣C<$BLACKLIST>␣variable␣further␣down.

If␣a␣utility␣or␣module␣isn't␣available,␣it␣will␣be␣marked␣in␣a␣cache
(see␣the␣C<$METHOD_FAIL>␣variable␣further␣down),␣so␣it␣will␣not␣be
tried␣again.␣The␣C<fetch>␣method␣will␣only␣fail␣when␣all␣options␣are
exhausted,␣and␣it␣was␣not␣able␣to␣retrieve␣the␣file.

The␣C<fetch>␣utility␣is␣available␣on␣FreeBSD.␣NetBSD␣and␣Dragonfly␣BSD
may␣also␣have␣it␣from␣C<pkgsrc>.␣We␣only␣check␣for␣C<fetch>␣on␣those
three␣platforms.

C<iosock>␣is␣a␣very␣limited␣L<IO::Socket::INET>␣based␣mechanism␣for
retrieving␣C<http>␣schemed␣urls.␣It␣doesn't␣follow␣redirects␣for␣instance.

C<git>␣only␣supports␣C<git://>␣style␣urls.

A␣special␣note␣about␣fetching␣files␣from␣an␣ftp␣uri:

By␣default,␣all␣ftp␣connections␣are␣done␣in␣passive␣mode.␣To␣change
that,␣see␣the␣C<$FTP_PASSIVE>␣variable␣further␣down.

Furthermore,␣ftp␣uris␣only␣support␣anonymous␣connections,␣so␣no
named␣user/password␣pair␣can␣be␣passed␣along.

C</bin/ftp>␣is␣blacklisted␣by␣default;␣see␣the␣C<$BLACKLIST>␣variable
further␣down.

=head1␣GLOBAL␣VARIABLES

The␣behaviour␣of␣File::Fetch␣can␣be␣altered␣by␣changing␣the␣following
global␣variables:

=head2␣$File::Fetch::FROM_EMAIL

This␣is␣the␣email␣address␣that␣will␣be␣sent␣as␣your␣anonymous␣ftp
password.

Default␣is␣C<File-Fetch@example.com>.

=head2␣$File::Fetch::USER_AGENT

This␣is␣the␣useragent␣as␣C<LWP>␣will␣report␣it.

Default␣is␣C<File::Fetch/$VERSION>.

=head2␣$File::Fetch::FTP_PASSIVE

This␣variable␣controls␣whether␣the␣environment␣variable␣C<FTP_PASSIVE>
and␣any␣passive␣switches␣to␣commandline␣tools␣will␣be␣set␣to␣true.

Default␣value␣is␣1.

Note:␣When␣$FTP_PASSIVE␣is␣true,␣C<ncftp>␣will␣not␣be␣used␣to␣fetch
files,␣since␣passive␣mode␣can␣only␣be␣set␣interactively␣for␣this␣binary

=head2␣$File::Fetch::TIMEOUT

When␣set,␣controls␣the␣network␣timeout␣(counted␣in␣seconds).

Default␣value␣is␣0.

=head2␣$File::Fetch::WARN

This␣variable␣controls␣whether␣errors␣encountered␣internally␣by
C<File::Fetch>␣should␣be␣C<carp>'d␣or␣not.

Set␣to␣false␣to␣silence␣warnings.␣Inspect␣the␣output␣of␣the␣C<error()>
method␣manually␣to␣see␣what␣went␣wrong.

Defaults␣to␣C<true>.

=head2␣$File::Fetch::DEBUG

This␣enables␣debugging␣output␣when␣calling␣commandline␣utilities␣to
fetch␣files.
This␣also␣enables␣C<Carp::longmess>␣errors,␣instead␣of␣the␣regular
C<carp>␣errors.

Good␣for␣tracking␣down␣why␣things␣don't␣work␣with␣your␣particular
setup.

Default␣is␣0.

=head2␣$File::Fetch::BLACKLIST

This␣is␣an␣array␣ref␣holding␣blacklisted␣modules/utilities␣for␣fetching
files␣with.

To␣disallow␣the␣use␣of,␣for␣example,␣C<LWP>␣and␣C<Net::FTP>,␣you␣could
set␣$File::Fetch::BLACKLIST␣to:

␣␣␣␣$File::Fetch::BLACKLIST␣=␣[qw|lwp␣netftp|]

The␣default␣blacklist␣is␣[qw|ftp|],␣as␣C</bin/ftp>␣is␣rather␣unreliable.

See␣the␣note␣on␣C<MAPPING>␣below.

=head2␣$File::Fetch::METHOD_FAIL

This␣is␣a␣hashref␣registering␣what␣modules/utilities␣were␣known␣to␣fail
for␣fetching␣files␣(mostly␣because␣they␣weren't␣installed).

You␣can␣reset␣this␣cache␣by␣assigning␣an␣empty␣hashref␣to␣it,␣or
individually␣remove␣keys.

See␣the␣note␣on␣C<MAPPING>␣below.

=head1␣MAPPING


Here's␣a␣quick␣mapping␣for␣the␣utilities/modules,␣and␣their␣names␣for
the␣$BLACKLIST,␣$METHOD_FAIL␣and␣other␣internal␣functions.

␣␣␣␣LWP␣␣␣␣␣␣␣␣␣=>␣lwp
␣␣␣␣HTTP::Lite␣␣=>␣httplite
␣␣␣␣HTTP::Tiny␣␣=>␣httptiny
␣␣␣␣Net::FTP␣␣␣␣=>␣netftp
␣␣␣␣wget␣␣␣␣␣␣␣␣=>␣wget
␣␣␣␣lynx␣␣␣␣␣␣␣␣=>␣lynx
␣␣␣␣ncftp␣␣␣␣␣␣␣=>␣ncftp
␣␣␣␣ftp␣␣␣␣␣␣␣␣␣=>␣ftp
␣␣␣␣curl␣␣␣␣␣␣␣␣=>␣curl
␣␣␣␣rsync␣␣␣␣␣␣␣=>␣rsync
␣␣␣␣lftp␣␣␣␣␣␣␣␣=>␣lftp
␣␣␣␣fetch␣␣␣␣␣␣␣=>␣fetch
␣␣␣␣IO::Socket␣␣=>␣iosock

=head1␣FREQUENTLY␣ASKED␣QUESTIONS

=head2␣So␣how␣do␣I␣use␣a␣proxy␣with␣File::Fetch?

C<File::Fetch>␣currently␣only␣supports␣proxies␣with␣LWP::UserAgent.
You␣will␣need␣to␣set␣your␣environment␣variables␣accordingly.␣For
example,␣to␣use␣an␣ftp␣proxy:

␣␣␣␣$ENV{ftp_proxy}␣=␣'foo.com';

Refer␣to␣the␣LWP::UserAgent␣manpage␣for␣more␣details.

=head2␣I␣used␣'lynx'␣to␣fetch␣a␣file,␣but␣its␣contents␣is␣all␣wrong!

C<lynx>␣can␣only␣fetch␣remote␣files␣by␣dumping␣its␣contents␣to␣C<STDOUT>,
which␣we␣in␣turn␣capture.␣If␣that␣content␣is␣a␣'custom'␣error␣file
(like,␣say,␣a␣C<404␣handler>),␣you␣will␣get␣that␣contents␣instead.

Sadly,␣C<lynx>␣doesn't␣support␣any␣options␣to␣return␣a␣different␣exit
code␣on␣non-C<200␣OK>␣status,␣giving␣us␣no␣way␣to␣tell␣the␣difference
between␣a␣'successful'␣fetch␣and␣a␣custom␣error␣page.

Therefor,␣we␣recommend␣to␣only␣use␣C<lynx>␣as␣a␣last␣resort.␣This␣is
why␣it␣is␣at␣the␣back␣of␣our␣list␣of␣methods␣to␣try␣as␣well.

=head2␣Files␣I'm␣trying␣to␣fetch␣have␣reserved␣characters␣or␣non-ASCII␣characters␣in␣them.␣What␣do␣I␣do?

C<File::Fetch>␣is␣relatively␣smart␣about␣things.␣When␣trying␣to␣write
a␣file␣to␣disk,␣it␣removes␣the␣C<query␣parameters>␣(see␣the
C<output_file>␣method␣for␣details)␣from␣the␣file␣name␣before␣creating
it.␣In␣most␣cases␣this␣suffices.

If␣you␣have␣any␣other␣characters␣you␣need␣to␣escape,␣please␣install
the␣C<URI::Escape>␣module␣from␣CPAN,␣and␣pre-encode␣your␣URI␣before
passing␣it␣to␣C<File::Fetch>.␣You␣can␣read␣about␣the␣details␣of␣URIs
and␣URI␣encoding␣here:

␣␣http://www.faqs.org/rfcs/rfc2396.html

=head1␣TODO

=over␣4

=item␣Implement␣$PREFER_BIN

To␣indicate␣to␣rather␣use␣commandline␣tools␣than␣modules

=back

=head1␣BUG␣REPORTS

Please␣report␣bugs␣or␣other␣issues␣to␣E<lt>bug-file-fetch@rt.cpan.org<gt>.

=head1␣AUTHOR

This␣module␣by␣Jos␣Boumans␣E<lt>kane@cpan.orgE<gt>.

=head1␣COPYRIGHT

This␣library␣is␣free␣software;␣you␣may␣redistribute␣and/or␣modify␣it
under␣the␣same␣terms␣as␣Perl␣itself.


=cut
----------
Range: (3345248,3352561) (7313)
=head1␣NAME

AutoSplit␣-␣split␣a␣package␣for␣autoloading

=head1␣SYNOPSIS

␣autosplit($file,␣$dir,␣$keep,␣$check,␣$modtime);

␣autosplit_lib_modules(@modules);

=head1␣DESCRIPTION

This␣function␣will␣split␣up␣your␣program␣into␣files␣that␣the␣AutoLoader
module␣can␣handle.␣It␣is␣used␣by␣both␣the␣standard␣perl␣libraries␣and␣by
the␣MakeMaker␣utility,␣to␣automatically␣configure␣libraries␣for␣autoloading.

The␣C<autosplit>␣interface␣splits␣the␣specified␣file␣into␣a␣hierarchy␣
rooted␣at␣the␣directory␣C<$dir>.␣It␣creates␣directories␣as␣needed␣to␣reflect
class␣hierarchy,␣and␣creates␣the␣file␣F<autosplit.ix>.␣This␣file␣acts␣as
both␣forward␣declaration␣of␣all␣package␣routines,␣and␣as␣timestamp␣for␣the
last␣update␣of␣the␣hierarchy.

The␣remaining␣three␣arguments␣to␣C<autosplit>␣govern␣other␣options␣to
the␣autosplitter.

=over␣2

=item␣$keep

If␣the␣third␣argument,␣I<$keep>,␣is␣false,␣then␣any
pre-existing␣C<*.al>␣files␣in␣the␣autoload␣directory␣are␣removed␣if
they␣are␣no␣longer␣part␣of␣the␣module␣(obsoleted␣functions).
$keep␣defaults␣to␣0.

=item␣$check

The
fourth␣argument,␣I<$check>,␣instructs␣C<autosplit>␣to␣check␣the␣module
currently␣being␣split␣to␣ensure␣that␣it␣includes␣a␣C<use>
specification␣for␣the␣AutoLoader␣module,␣and␣skips␣the␣module␣if
AutoLoader␣is␣not␣detected.
$check␣defaults␣to␣1.

=item␣$modtime

Lastly,␣the␣I<$modtime>␣argument␣specifies
that␣C<autosplit>␣is␣to␣check␣the␣modification␣time␣of␣the␣module
against␣that␣of␣the␣C<autosplit.ix>␣file,␣and␣only␣split␣the␣module␣if
it␣is␣newer.
$modtime␣defaults␣to␣1.

=back

Typical␣use␣of␣AutoSplit␣in␣the␣perl␣MakeMaker␣utility␣is␣via␣the␣command-line
with:

␣perl␣-e␣'use␣AutoSplit;␣autosplit($ARGV[0],␣$ARGV[1],␣0,␣1,␣1)'

Defined␣as␣a␣Make␣macro,␣it␣is␣invoked␣with␣file␣and␣directory␣arguments;
C<autosplit>␣will␣split␣the␣specified␣file␣into␣the␣specified␣directory␣and
delete␣obsolete␣C<.al>␣files,␣after␣checking␣first␣that␣the␣module␣does␣use
the␣AutoLoader,␣and␣ensuring␣that␣the␣module␣is␣not␣already␣currently␣split
in␣its␣current␣form␣(the␣modtime␣test).

The␣C<autosplit_lib_modules>␣form␣is␣used␣in␣the␣building␣of␣perl.␣It␣takes
as␣input␣a␣list␣of␣files␣(modules)␣that␣are␣assumed␣to␣reside␣in␣a␣directory
B<lib>␣relative␣to␣the␣current␣directory.␣Each␣file␣is␣sent␣to␣the␣
autosplitter␣one␣at␣a␣time,␣to␣be␣split␣into␣the␣directory␣B<lib/auto>.

In␣both␣usages␣of␣the␣autosplitter,␣only␣subroutines␣defined␣following␣the
perl␣I<__END__>␣token␣are␣split␣out␣into␣separate␣files.␣Some
routines␣may␣be␣placed␣prior␣to␣this␣marker␣to␣force␣their␣immediate␣loading
and␣parsing.

=head2␣Multiple␣packages

As␣of␣version␣1.01␣of␣the␣AutoSplit␣module␣it␣is␣possible␣to␣have
multiple␣packages␣within␣a␣single␣file.␣Both␣of␣the␣following␣cases
are␣supported:

␣␣␣package␣NAME;
␣␣␣__END__
␣␣␣sub␣AAA␣{␣...␣}
␣␣␣package␣NAME::option1;
␣␣␣sub␣BBB␣{␣...␣}
␣␣␣package␣NAME::option2;
␣␣␣sub␣BBB␣{␣...␣}

␣␣␣package␣NAME;
␣␣␣__END__
␣␣␣sub␣AAA␣{␣...␣}
␣␣␣sub␣NAME::option1::BBB␣{␣...␣}
␣␣␣sub␣NAME::option2::BBB␣{␣...␣}

=head1␣DIAGNOSTICS

C<AutoSplit>␣will␣inform␣the␣user␣if␣it␣is␣necessary␣to␣create␣the
top-level␣directory␣specified␣in␣the␣invocation.␣It␣is␣preferred␣that
the␣script␣or␣installation␣process␣that␣invokes␣C<AutoSplit>␣have
created␣the␣full␣directory␣path␣ahead␣of␣time.␣This␣warning␣may
indicate␣that␣the␣module␣is␣being␣split␣into␣an␣incorrect␣path.

C<AutoSplit>␣will␣warn␣the␣user␣of␣all␣subroutines␣whose␣name␣causes
potential␣file␣naming␣conflicts␣on␣machines␣with␣drastically␣limited
(8␣characters␣or␣less)␣file␣name␣length.␣Since␣the␣subroutine␣name␣is
used␣as␣the␣file␣name,␣these␣warnings␣can␣aid␣in␣portability␣to␣such
systems.

Warnings␣are␣issued␣and␣the␣file␣skipped␣if␣C<AutoSplit>␣cannot␣locate
either␣the␣I<__END__>␣marker␣or␣a␣"package␣Name;"-style␣specification.

C<AutoSplit>␣will␣also␣emit␣general␣diagnostics␣for␣inability␣to
create␣directories␣or␣files.

=head1␣AUTHOR

C<AutoSplit>␣is␣maintained␣by␣the␣perl5-porters.␣Please␣direct
any␣questions␣to␣the␣canonical␣mailing␣list.␣Anything␣that
is␣applicable␣to␣the␣CPAN␣release␣can␣be␣sent␣to␣its␣maintainer,
though.

Author␣and␣Maintainer:␣The␣Perl5-Porters␣<perl5-porters@perl.org>

Maintainer␣of␣the␣CPAN␣release:␣Steffen␣Mueller␣<smueller@cpan.org>

=head1␣COPYRIGHT␣AND␣LICENSE

This␣package␣has␣been␣part␣of␣the␣perl␣core␣since␣the␣first␣release
of␣perl5.␣It␣has␣been␣released␣separately␣to␣CPAN␣so␣older␣installations
can␣benefit␣from␣bug␣fixes.

This␣package␣has␣the␣same␣copyright␣and␣license␣as␣the␣perl␣core:

␣␣␣␣␣␣␣␣␣␣␣␣␣Copyright␣(C)␣1993,␣1994,␣1995,␣1996,␣1997,␣1998,␣1999,
␣␣␣␣␣␣␣␣2000,␣2001,␣2002,␣2003,␣2004,␣2005,␣2006,␣2007,␣2008
␣␣␣␣␣␣␣␣by␣Larry␣Wall␣and␣others
␣␣␣␣
			␣␣␣␣All␣rights␣reserved.
␣␣␣␣
␣␣␣␣This␣program␣is␣free␣software;␣you␣can␣redistribute␣it␣and/or␣modify
␣␣␣␣it␣under␣the␣terms␣of␣either:
␣␣␣␣
	a)␣the␣GNU␣General␣Public␣License␣as␣published␣by␣the␣Free
	Software␣Foundation;␣either␣version␣1,␣or␣(at␣your␣option)␣any
	later␣version,␣or
␣␣␣␣
	b)␣the␣"Artistic␣License"␣which␣comes␣with␣this␣Kit.
␣␣␣␣
␣␣␣␣This␣program␣is␣distributed␣in␣the␣hope␣that␣it␣will␣be␣useful,
␣␣␣␣but␣WITHOUT␣ANY␣WARRANTY;␣without␣even␣the␣implied␣warranty␣of
␣␣␣␣MERCHANTABILITY␣or␣FITNESS␣FOR␣A␣PARTICULAR␣PURPOSE.␣␣See␣either
␣␣␣␣the␣GNU␣General␣Public␣License␣or␣the␣Artistic␣License␣for␣more␣details.
␣␣␣␣
␣␣␣␣You␣should␣have␣received␣a␣copy␣of␣the␣Artistic␣License␣with␣this
␣␣␣␣Kit,␣in␣the␣file␣named␣"Artistic".␣␣If␣not,␣I'll␣be␣glad␣to␣provide␣one.
␣␣␣␣
␣␣␣␣You␣should␣also␣have␣received␣a␣copy␣of␣the␣GNU␣General␣Public␣License
␣␣␣␣along␣with␣this␣program␣in␣the␣file␣named␣"Copying".␣If␣not,␣write␣to␣the␣
␣␣␣␣Free␣Software␣Foundation,␣Inc.,␣59␣Temple␣Place,␣Suite␣330,␣Boston,␣MA␣
␣␣␣␣02111-1307,␣USA␣or␣visit␣their␣web␣page␣on␣the␣internet␣at
␣␣␣␣http://www.gnu.org/copyleft/gpl.html.
␣␣␣␣
␣␣␣␣For␣those␣of␣you␣that␣choose␣to␣use␣the␣GNU␣General␣Public␣License,
␣␣␣␣my␣interpretation␣of␣the␣GNU␣General␣Public␣License␣is␣that␣no␣Perl
␣␣␣␣script␣falls␣under␣the␣terms␣of␣the␣GPL␣unless␣you␣explicitly␣put
␣␣␣␣said␣script␣under␣the␣terms␣of␣the␣GPL␣yourself.␣␣Furthermore,␣any
␣␣␣␣object␣code␣linked␣with␣perl␣does␣not␣automatically␣fall␣under␣the
␣␣␣␣terms␣of␣the␣GPL,␣provided␣such␣object␣code␣only␣adds␣definitions
␣␣␣␣of␣subroutines␣and␣variables,␣and␣does␣not␣otherwise␣impair␣the
␣␣␣␣resulting␣interpreter␣from␣executing␣any␣standard␣Perl␣script.␣␣I
␣␣␣␣consider␣linking␣in␣C␣subroutines␣in␣this␣manner␣to␣be␣the␣moral
␣␣␣␣equivalent␣of␣defining␣subroutines␣in␣the␣Perl␣language␣itself.␣␣You
␣␣␣␣may␣sell␣such␣an␣object␣file␣as␣proprietary␣provided␣that␣you␣provide
␣␣␣␣or␣offer␣to␣provide␣the␣Perl␣source,␣as␣specified␣by␣the␣GNU␣General
␣␣␣␣Public␣License.␣␣(This␣is␣merely␣an␣alternate␣way␣of␣specifying␣input
␣␣␣␣to␣the␣program.)␣␣You␣may␣also␣sell␣a␣binary␣produced␣by␣the␣dumping␣of
␣␣␣␣a␣running␣Perl␣script␣that␣belongs␣to␣you,␣provided␣that␣you␣provide␣or
␣␣␣␣offer␣to␣provide␣the␣Perl␣source␣as␣specified␣by␣the␣GPL.␣␣(The
␣␣␣␣fact␣that␣a␣Perl␣interpreter␣and␣your␣code␣are␣in␣the␣same␣binary␣file
␣␣␣␣is,␣in␣this␣case,␣a␣form␣of␣mere␣aggregation.)␣␣This␣is␣my␣interpretation
␣␣␣␣of␣the␣GPL.␣␣If␣you␣still␣have␣concerns␣or␣difficulties␣understanding
␣␣␣␣my␣intent,␣feel␣free␣to␣contact␣me.␣␣Of␣course,␣the␣Artistic␣License
␣␣␣␣spells␣all␣this␣out␣for␣your␣protection,␣so␣you␣may␣prefer␣to␣use␣that.

=cut
----------
Range: (3364265,3367639) (3374)
=head1␣NAME

vmsish␣-␣Perl␣pragma␣to␣control␣VMS-specific␣language␣features

=head1␣SYNOPSIS

␣␣␣␣use␣vmsish;

␣␣␣␣use␣vmsish␣'status';	#␣or␣'$?'
␣␣␣␣use␣vmsish␣'exit';
␣␣␣␣use␣vmsish␣'time';

␣␣␣␣use␣vmsish␣'hushed';
␣␣␣␣no␣vmsish␣'hushed';
␣␣␣␣vmsish::hushed($hush);

␣␣␣␣use␣vmsish;
␣␣␣␣no␣vmsish␣'time';

=head1␣DESCRIPTION

If␣no␣import␣list␣is␣supplied,␣all␣possible␣VMS-specific␣features␣are
assumed.␣␣Currently,␣there␣are␣four␣VMS-specific␣features␣available:
'status'␣(a.k.a␣'$?'),␣'exit',␣'time'␣and␣'hushed'.

If␣you're␣not␣running␣VMS,␣this␣module␣does␣nothing.

=over␣6

=item␣C<vmsish␣status>

This␣makes␣C<$?>␣and␣C<system>␣return␣the␣native␣VMS␣exit␣status
instead␣of␣emulating␣the␣POSIX␣exit␣status.

=item␣C<vmsish␣exit>

This␣makes␣C<exit␣1>␣produce␣a␣successful␣exit␣(with␣status␣SS$_NORMAL),
instead␣of␣emulating␣UNIX␣exit(),␣which␣considers␣C<exit␣1>␣to␣indicate
an␣error.␣␣As␣with␣the␣CRTL's␣exit()␣function,␣C<exit␣0>␣is␣also␣mapped
to␣an␣exit␣status␣of␣SS$_NORMAL,␣and␣any␣other␣argument␣to␣exit()␣is
used␣directly␣as␣Perl's␣exit␣status.

=item␣C<vmsish␣time>

This␣makes␣all␣times␣relative␣to␣the␣local␣time␣zone,␣instead␣of␣the
default␣of␣Universal␣Time␣(a.k.a␣Greenwich␣Mean␣Time,␣or␣GMT).

=item␣C<vmsish␣hushed>

This␣suppresses␣printing␣of␣VMS␣status␣messages␣to␣SYS$OUTPUT␣and
SYS$ERROR␣if␣Perl␣terminates␣with␣an␣error␣status,␣and␣allows
programs␣that␣are␣expecting␣"unix-style"␣Perl␣to␣avoid␣having␣to␣parse
VMS␣error␣messages.␣␣It␣does␣not␣suppress␣any␣messages␣from␣Perl
itself,␣just␣the␣messages␣generated␣by␣DCL␣after␣Perl␣exits.␣␣The␣DCL
symbol␣$STATUS␣will␣still␣have␣the␣termination␣status,␣but␣with␣a
high-order␣bit␣set:

EXAMPLE:
␣␣␣␣$␣perl␣-e"exit␣44;"␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣Non-hushed␣error␣exit
␣␣␣␣%SYSTEM-F-ABORT,␣abort␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣DCL␣message
␣␣␣␣$␣show␣sym␣$STATUS
␣␣␣␣␣␣$STATUS␣==␣"%X0000002C"

␣␣␣␣$␣perl␣-e"use␣vmsish␣qw(hushed);␣exit␣44;"␣␣␣Hushed␣error␣exit
␣␣␣␣$␣show␣sym␣$STATUS
␣␣␣␣␣␣$STATUS␣==␣"%X1000002C"

The␣'hushed'␣flag␣has␣a␣global␣scope␣during␣compilation:␣the␣exit()␣or
die()␣commands␣that␣are␣compiled␣after␣'vmsish␣hushed'␣will␣be␣hushed
when␣they␣are␣executed.␣␣Doing␣a␣"no␣vmsish␣'hushed'"␣turns␣off␣the
hushed␣flag.

The␣status␣of␣the␣hushed␣flag␣also␣affects␣output␣of␣VMS␣error
messages␣from␣compilation␣errors.␣␣␣Again,␣you␣still␣get␣the␣Perl
error␣message␣(and␣the␣code␣in␣$STATUS)

EXAMPLE:
␣␣␣␣use␣vmsish␣'hushed';␣␣␣␣#␣turn␣on␣hushed␣flag
␣␣␣␣use␣Carp;␣␣␣␣␣␣␣␣␣␣#␣Carp␣compiled␣hushed
␣␣␣␣exit␣44;␣␣␣␣␣␣␣␣␣␣␣#␣will␣be␣hushed
␣␣␣␣croak('I␣die');␣␣␣␣#␣will␣be␣hushed
␣␣␣␣no␣vmsish␣'hushed';␣␣␣␣␣#␣turn␣off␣hushed␣flag
␣␣␣␣exit␣44;␣␣␣␣␣␣␣␣␣␣␣#␣will␣not␣be␣hushed
␣␣␣␣croak('I␣die2'):␣␣␣#␣WILL␣be␣hushed,␣croak␣was␣compiled␣hushed

You␣can␣also␣control␣the␣'hushed'␣flag␣at␣run-time,␣using␣the␣built-in
routine␣vmsish::hushed().␣␣Without␣argument,␣it␣returns␣the␣hushed␣status.
Since␣vmsish::hushed␣is␣built-in,␣you␣do␣not␣need␣to␣"use␣vmsish"␣to␣call
it.

EXAMPLE:
␣␣␣␣if␣($quiet_exit)␣{
␣␣␣␣␣␣␣␣vmsish::hushed(1);
␣␣␣␣}␣
␣␣␣␣print␣"Sssshhhh...I'm␣hushed...\n"␣if␣vmsish::hushed();
␣␣␣␣exit␣44;

Note␣that␣an␣exit()␣or␣die()␣that␣is␣compiled␣'hushed'␣because␣of␣"use
vmsish"␣is␣not␣un-hushed␣by␣calling␣vmsish::hushed(0)␣at␣runtime.

The␣messages␣from␣error␣exits␣from␣inside␣the␣Perl␣core␣are␣generally
more␣serious,␣and␣are␣not␣suppressed.

=back

See␣L<perlmod/Perl␣Modules>.

=cut
----------
Range: (3413027,3453423) (40396)
=head1␣NAME

Getopt::Long␣-␣Extended␣processing␣of␣command␣line␣options

=head1␣SYNOPSIS

␣␣use␣Getopt::Long;
␣␣my␣$data␣␣␣=␣"file.dat";
␣␣my␣$length␣=␣24;
␣␣my␣$verbose;
␣␣GetOptions␣("length=i"␣=>␣\$length,␣␣␣␣#␣numeric
␣␣␣␣␣␣␣␣␣␣␣␣␣␣"file=s"␣␣␣=>␣\$data,␣␣␣␣␣␣#␣string
␣␣␣␣␣␣␣␣␣␣␣␣␣␣"verbose"␣␣=>␣\$verbose)␣␣␣#␣flag
␣␣or␣die("Error␣in␣command␣line␣arguments\n");

=head1␣DESCRIPTION

The␣Getopt::Long␣module␣implements␣an␣extended␣getopt␣function␣called
GetOptions().␣It␣parses␣the␣command␣line␣from␣C<@ARGV>,␣recognizing
and␣removing␣specified␣options␣and␣their␣possible␣values.

This␣function␣adheres␣to␣the␣POSIX␣syntax␣for␣command
line␣options,␣with␣GNU␣extensions.␣In␣general,␣this␣means␣that␣options
have␣long␣names␣instead␣of␣single␣letters,␣and␣are␣introduced␣with␣a
double␣dash␣"--".␣Support␣for␣bundling␣of␣command␣line␣options,␣as␣was
the␣case␣with␣the␣more␣traditional␣single-letter␣approach,␣is␣provided
but␣not␣enabled␣by␣default.

=head1␣Command␣Line␣Options,␣an␣Introduction

Command␣line␣operated␣programs␣traditionally␣take␣their␣arguments␣from
the␣command␣line,␣for␣example␣filenames␣or␣other␣information␣that␣the
program␣needs␣to␣know.␣Besides␣arguments,␣these␣programs␣often␣take
command␣line␣I<options>␣as␣well.␣Options␣are␣not␣necessary␣for␣the
program␣to␣work,␣hence␣the␣name␣'option',␣but␣are␣used␣to␣modify␣its
default␣behaviour.␣For␣example,␣a␣program␣could␣do␣its␣job␣quietly,
but␣with␣a␣suitable␣option␣it␣could␣provide␣verbose␣information␣about
what␣it␣did.

Command␣line␣options␣come␣in␣several␣flavours.␣Historically,␣they␣are
preceded␣by␣a␣single␣dash␣C<->,␣and␣consist␣of␣a␣single␣letter.

␣␣␣␣-l␣-a␣-c

Usually,␣these␣single-character␣options␣can␣be␣bundled:

␣␣␣␣-lac

Options␣can␣have␣values,␣the␣value␣is␣placed␣after␣the␣option
character.␣Sometimes␣with␣whitespace␣in␣between,␣sometimes␣not:

␣␣␣␣-s␣24␣-s24

Due␣to␣the␣very␣cryptic␣nature␣of␣these␣options,␣another␣style␣was
developed␣that␣used␣long␣names.␣So␣instead␣of␣a␣cryptic␣C<-l>␣one
could␣use␣the␣more␣descriptive␣C<--long>.␣To␣distinguish␣between␣a
bundle␣of␣single-character␣options␣and␣a␣long␣one,␣two␣dashes␣are␣used
to␣precede␣the␣option␣name.␣Early␣implementations␣of␣long␣options␣used
a␣plus␣C<+>␣instead.␣Also,␣option␣values␣could␣be␣specified␣either
like

␣␣␣␣--size=24

or

␣␣␣␣--size␣24

The␣C<+>␣form␣is␣now␣obsolete␣and␣strongly␣deprecated.

=head1␣Getting␣Started␣with␣Getopt::Long

Getopt::Long␣is␣the␣Perl5␣successor␣of␣C<newgetopt.pl>.␣This␣was␣the
first␣Perl␣module␣that␣provided␣support␣for␣handling␣the␣new␣style␣of
command␣line␣options,␣in␣particular␣long␣option␣names,␣hence␣the␣Perl5
name␣Getopt::Long.␣This␣module␣also␣supports␣single-character␣options
and␣bundling.

To␣use␣Getopt::Long␣from␣a␣Perl␣program,␣you␣must␣include␣the
following␣line␣in␣your␣Perl␣program:

␣␣␣␣use␣Getopt::Long;

This␣will␣load␣the␣core␣of␣the␣Getopt::Long␣module␣and␣prepare␣your
program␣for␣using␣it.␣Most␣of␣the␣actual␣Getopt::Long␣code␣is␣not
loaded␣until␣you␣really␣call␣one␣of␣its␣functions.

In␣the␣default␣configuration,␣options␣names␣may␣be␣abbreviated␣to
uniqueness,␣case␣does␣not␣matter,␣and␣a␣single␣dash␣is␣sufficient,
even␣for␣long␣option␣names.␣Also,␣options␣may␣be␣placed␣between
non-option␣arguments.␣See␣L<Configuring␣Getopt::Long>␣for␣more
details␣on␣how␣to␣configure␣Getopt::Long.

=head2␣Simple␣options

The␣most␣simple␣options␣are␣the␣ones␣that␣take␣no␣values.␣Their␣mere
presence␣on␣the␣command␣line␣enables␣the␣option.␣Popular␣examples␣are:

␣␣␣␣--all␣--verbose␣--quiet␣--debug

Handling␣simple␣options␣is␣straightforward:

␣␣␣␣my␣$verbose␣=␣'';	#␣option␣variable␣with␣default␣value␣(false)
␣␣␣␣my␣$all␣=␣'';	#␣option␣variable␣with␣default␣value␣(false)
␣␣␣␣GetOptions␣('verbose'␣=>␣\$verbose,␣'all'␣=>␣\$all);

The␣call␣to␣GetOptions()␣parses␣the␣command␣line␣arguments␣that␣are
present␣in␣C<@ARGV>␣and␣sets␣the␣option␣variable␣to␣the␣value␣C<1>␣if
the␣option␣did␣occur␣on␣the␣command␣line.␣Otherwise,␣the␣option
variable␣is␣not␣touched.␣Setting␣the␣option␣value␣to␣true␣is␣often
called␣I<enabling>␣the␣option.

The␣option␣name␣as␣specified␣to␣the␣GetOptions()␣function␣is␣called
the␣option␣I<specification>.␣Later␣we'll␣see␣that␣this␣specification
can␣contain␣more␣than␣just␣the␣option␣name.␣The␣reference␣to␣the
variable␣is␣called␣the␣option␣I<destination>.

GetOptions()␣will␣return␣a␣true␣value␣if␣the␣command␣line␣could␣be
processed␣successfully.␣Otherwise,␣it␣will␣write␣error␣messages␣using
die()␣and␣warn(),␣and␣return␣a␣false␣result.

=head2␣A␣little␣bit␣less␣simple␣options

Getopt::Long␣supports␣two␣useful␣variants␣of␣simple␣options:
I<negatable>␣options␣and␣I<incremental>␣options.

A␣negatable␣option␣is␣specified␣with␣an␣exclamation␣mark␣C<!>␣after␣the
option␣name:

␣␣␣␣my␣$verbose␣=␣'';	#␣option␣variable␣with␣default␣value␣(false)
␣␣␣␣GetOptions␣('verbose!'␣=>␣\$verbose);

Now,␣using␣C<--verbose>␣on␣the␣command␣line␣will␣enable␣C<$verbose>,
as␣expected.␣But␣it␣is␣also␣allowed␣to␣use␣C<--noverbose>,␣which␣will
disable␣C<$verbose>␣by␣setting␣its␣value␣to␣C<0>.␣Using␣a␣suitable
default␣value,␣the␣program␣can␣find␣out␣whether␣C<$verbose>␣is␣false
by␣default,␣or␣disabled␣by␣using␣C<--noverbose>.

An␣incremental␣option␣is␣specified␣with␣a␣plus␣C<+>␣after␣the
option␣name:

␣␣␣␣my␣$verbose␣=␣'';	#␣option␣variable␣with␣default␣value␣(false)
␣␣␣␣GetOptions␣('verbose+'␣=>␣\$verbose);

Using␣C<--verbose>␣on␣the␣command␣line␣will␣increment␣the␣value␣of
C<$verbose>.␣This␣way␣the␣program␣can␣keep␣track␣of␣how␣many␣times␣the
option␣occurred␣on␣the␣command␣line.␣For␣example,␣each␣occurrence␣of
C<--verbose>␣could␣increase␣the␣verbosity␣level␣of␣the␣program.

=head2␣Mixing␣command␣line␣option␣with␣other␣arguments

Usually␣programs␣take␣command␣line␣options␣as␣well␣as␣other␣arguments,
for␣example,␣file␣names.␣It␣is␣good␣practice␣to␣always␣specify␣the
options␣first,␣and␣the␣other␣arguments␣last.␣Getopt::Long␣will,
however,␣allow␣the␣options␣and␣arguments␣to␣be␣mixed␣and␣'filter␣out'
all␣the␣options␣before␣passing␣the␣rest␣of␣the␣arguments␣to␣the
program.␣To␣stop␣Getopt::Long␣from␣processing␣further␣arguments,
insert␣a␣double␣dash␣C<-->␣on␣the␣command␣line:

␣␣␣␣--size␣24␣--␣--all

In␣this␣example,␣C<--all>␣will␣I<not>␣be␣treated␣as␣an␣option,␣but
passed␣to␣the␣program␣unharmed,␣in␣C<@ARGV>.

=head2␣Options␣with␣values

For␣options␣that␣take␣values␣it␣must␣be␣specified␣whether␣the␣option
value␣is␣required␣or␣not,␣and␣what␣kind␣of␣value␣the␣option␣expects.

Three␣kinds␣of␣values␣are␣supported:␣integer␣numbers,␣floating␣point
numbers,␣and␣strings.

If␣the␣option␣value␣is␣required,␣Getopt::Long␣will␣take␣the
command␣line␣argument␣that␣follows␣the␣option␣and␣assign␣this␣to␣the
option␣variable.␣If,␣however,␣the␣option␣value␣is␣specified␣as
optional,␣this␣will␣only␣be␣done␣if␣that␣value␣does␣not␣look␣like␣a
valid␣command␣line␣option␣itself.

␣␣␣␣my␣$tag␣=␣'';	#␣option␣variable␣with␣default␣value
␣␣␣␣GetOptions␣('tag=s'␣=>␣\$tag);

In␣the␣option␣specification,␣the␣option␣name␣is␣followed␣by␣an␣equals
sign␣C<=>␣and␣the␣letter␣C<s>.␣The␣equals␣sign␣indicates␣that␣this
option␣requires␣a␣value.␣The␣letter␣C<s>␣indicates␣that␣this␣value␣is
an␣arbitrary␣string.␣Other␣possible␣value␣types␣are␣C<i>␣for␣integer
values,␣and␣C<f>␣for␣floating␣point␣values.␣Using␣a␣colon␣C<:>␣instead
of␣the␣equals␣sign␣indicates␣that␣the␣option␣value␣is␣optional.␣In
this␣case,␣if␣no␣suitable␣value␣is␣supplied,␣string␣valued␣options␣get
an␣empty␣string␣C<''>␣assigned,␣while␣numeric␣options␣are␣set␣to␣C<0>.

=head2␣Options␣with␣multiple␣values

Options␣sometimes␣take␣several␣values.␣For␣example,␣a␣program␣could
use␣multiple␣directories␣to␣search␣for␣library␣files:

␣␣␣␣--library␣lib/stdlib␣--library␣lib/extlib

To␣accomplish␣this␣behaviour,␣simply␣specify␣an␣array␣reference␣as␣the
destination␣for␣the␣option:

␣␣␣␣GetOptions␣("library=s"␣=>␣\@libfiles);

Alternatively,␣you␣can␣specify␣that␣the␣option␣can␣have␣multiple
values␣by␣adding␣a␣"@",␣and␣pass␣a␣reference␣to␣a␣scalar␣as␣the
destination:

␣␣␣␣GetOptions␣("library=s@"␣=>␣\$libfiles);

Used␣with␣the␣example␣above,␣C<@libfiles>␣c.q.␣C<@$libfiles>␣would
contain␣two␣strings␣upon␣completion:␣C<"lib/stdlib">␣and
C<"lib/extlib">,␣in␣that␣order.␣It␣is␣also␣possible␣to␣specify␣that
only␣integer␣or␣floating␣point␣numbers␣are␣acceptable␣values.

Often␣it␣is␣useful␣to␣allow␣comma-separated␣lists␣of␣values␣as␣well␣as
multiple␣occurrences␣of␣the␣options.␣This␣is␣easy␣using␣Perl's␣split()
and␣join()␣operators:

␣␣␣␣GetOptions␣("library=s"␣=>␣\@libfiles);
␣␣␣␣@libfiles␣=␣split(/,/,join(',',@libfiles));

Of␣course,␣it␣is␣important␣to␣choose␣the␣right␣separator␣string␣for
each␣purpose.

Warning:␣What␣follows␣is␣an␣experimental␣feature.

Options␣can␣take␣multiple␣values␣at␣once,␣for␣example

␣␣␣␣--coordinates␣52.2␣16.4␣--rgbcolor␣255␣255␣149

This␣can␣be␣accomplished␣by␣adding␣a␣repeat␣specifier␣to␣the␣option
specification.␣Repeat␣specifiers␣are␣very␣similar␣to␣the␣C<{...}>
repeat␣specifiers␣that␣can␣be␣used␣with␣regular␣expression␣patterns.
For␣example,␣the␣above␣command␣line␣would␣be␣handled␣as␣follows:

␣␣␣␣GetOptions('coordinates=f{2}'␣=>␣\@coor,␣'rgbcolor=i{3}'␣=>␣\@color);

The␣destination␣for␣the␣option␣must␣be␣an␣array␣or␣array␣reference.

It␣is␣also␣possible␣to␣specify␣the␣minimal␣and␣maximal␣number␣of
arguments␣an␣option␣takes.␣C<foo=s{2,4}>␣indicates␣an␣option␣that
takes␣at␣least␣two␣and␣at␣most␣4␣arguments.␣C<foo=s{1,}>␣indicates␣one
or␣more␣values;␣C<foo:s{,}>␣indicates␣zero␣or␣more␣option␣values.

=head2␣Options␣with␣hash␣values

If␣the␣option␣destination␣is␣a␣reference␣to␣a␣hash,␣the␣option␣will
take,␣as␣value,␣strings␣of␣the␣form␣I<key>C<=>I<value>.␣The␣value␣will
be␣stored␣with␣the␣specified␣key␣in␣the␣hash.

␣␣␣␣GetOptions␣("define=s"␣=>␣\%defines);

Alternatively␣you␣can␣use:

␣␣␣␣GetOptions␣("define=s%"␣=>␣\$defines);

When␣used␣with␣command␣line␣options:

␣␣␣␣--define␣os=linux␣--define␣vendor=redhat

the␣hash␣C<%defines>␣(or␣C<%$defines>)␣will␣contain␣two␣keys,␣C<"os">
with␣value␣C<"linux">␣and␣C<"vendor">␣with␣value␣C<"redhat">.␣It␣is
also␣possible␣to␣specify␣that␣only␣integer␣or␣floating␣point␣numbers
are␣acceptable␣values.␣The␣keys␣are␣always␣taken␣to␣be␣strings.

=head2␣User-defined␣subroutines␣to␣handle␣options

Ultimate␣control␣over␣what␣should␣be␣done␣when␣(actually:␣each␣time)
an␣option␣is␣encountered␣on␣the␣command␣line␣can␣be␣achieved␣by
designating␣a␣reference␣to␣a␣subroutine␣(or␣an␣anonymous␣subroutine)
as␣the␣option␣destination.␣When␣GetOptions()␣encounters␣the␣option,␣it
will␣call␣the␣subroutine␣with␣two␣or␣three␣arguments.␣The␣first
argument␣is␣the␣name␣of␣the␣option.␣(Actually,␣it␣is␣an␣object␣that
stringifies␣to␣the␣name␣of␣the␣option.)␣For␣a␣scalar␣or␣array␣destination,
the␣second␣argument␣is␣the␣value␣to␣be␣stored.␣For␣a␣hash␣destination,
the␣second␣argument␣is␣the␣key␣to␣the␣hash,␣and␣the␣third␣argument
the␣value␣to␣be␣stored.␣It␣is␣up␣to␣the␣subroutine␣to␣store␣the␣value,
or␣do␣whatever␣it␣thinks␣is␣appropriate.

A␣trivial␣application␣of␣this␣mechanism␣is␣to␣implement␣options␣that
are␣related␣to␣each␣other.␣For␣example:

␣␣␣␣my␣$verbose␣=␣'';	#␣option␣variable␣with␣default␣value␣(false)
␣␣␣␣GetOptions␣('verbose'␣=>␣\$verbose,
	␣␣␣␣␣␣␣␣'quiet'␣␣␣=>␣sub␣{␣$verbose␣=␣0␣});

Here␣C<--verbose>␣and␣C<--quiet>␣control␣the␣same␣variable
C<$verbose>,␣but␣with␣opposite␣values.

If␣the␣subroutine␣needs␣to␣signal␣an␣error,␣it␣should␣call␣die()␣with
the␣desired␣error␣message␣as␣its␣argument.␣GetOptions()␣will␣catch␣the
die(),␣issue␣the␣error␣message,␣and␣record␣that␣an␣error␣result␣must
be␣returned␣upon␣completion.

If␣the␣text␣of␣the␣error␣message␣starts␣with␣an␣exclamation␣mark␣C<!>
it␣is␣interpreted␣specially␣by␣GetOptions().␣There␣is␣currently␣one
special␣command␣implemented:␣C<die("!FINISH")>␣will␣cause␣GetOptions()
to␣stop␣processing␣options,␣as␣if␣it␣encountered␣a␣double␣dash␣C<-->.

Here␣is␣an␣example␣of␣how␣to␣access␣the␣option␣name␣and␣value␣from␣within
a␣subroutine:

␣␣␣␣GetOptions␣('opt=i'␣=>␣\&handler);
␣␣␣␣sub␣handler␣{
␣␣␣␣␣␣␣␣my␣($opt_name,␣$opt_value)␣=␣@_;
␣␣␣␣␣␣␣␣print("Option␣name␣is␣$opt_name␣and␣value␣is␣$opt_value\n");
␣␣␣␣}

=head2␣Options␣with␣multiple␣names

Often␣it␣is␣user␣friendly␣to␣supply␣alternate␣mnemonic␣names␣for
options.␣For␣example␣C<--height>␣could␣be␣an␣alternate␣name␣for
C<--length>.␣Alternate␣names␣can␣be␣included␣in␣the␣option
specification,␣separated␣by␣vertical␣bar␣C<|>␣characters.␣To␣implement
the␣above␣example:

␣␣␣␣GetOptions␣('length|height=f'␣=>␣\$length);

The␣first␣name␣is␣called␣the␣I<primary>␣name,␣the␣other␣names␣are
called␣I<aliases>.␣When␣using␣a␣hash␣to␣store␣options,␣the␣key␣will
always␣be␣the␣primary␣name.

Multiple␣alternate␣names␣are␣possible.

=head2␣Case␣and␣abbreviations

Without␣additional␣configuration,␣GetOptions()␣will␣ignore␣the␣case␣of
option␣names,␣and␣allow␣the␣options␣to␣be␣abbreviated␣to␣uniqueness.

␣␣␣␣GetOptions␣('length|height=f'␣=>␣\$length,␣"head"␣=>␣\$head);

This␣call␣will␣allow␣C<--l>␣and␣C<--L>␣for␣the␣length␣option,␣but
requires␣a␣least␣C<--hea>␣and␣C<--hei>␣for␣the␣head␣and␣height␣options.

=head2␣Summary␣of␣Option␣Specifications

Each␣option␣specifier␣consists␣of␣two␣parts:␣the␣name␣specification
and␣the␣argument␣specification.

The␣name␣specification␣contains␣the␣name␣of␣the␣option,␣optionally
followed␣by␣a␣list␣of␣alternative␣names␣separated␣by␣vertical␣bar
characters.

␣␣␣␣length	␣␣␣␣␣␣option␣name␣is␣"length"
␣␣␣␣length|size|l␣␣␣␣␣name␣is␣"length",␣aliases␣are␣"size"␣and␣"l"

The␣argument␣specification␣is␣optional.␣If␣omitted,␣the␣option␣is
considered␣boolean,␣a␣value␣of␣1␣will␣be␣assigned␣when␣the␣option␣is
used␣on␣the␣command␣line.

The␣argument␣specification␣can␣be

=over␣4

=item␣!

The␣option␣does␣not␣take␣an␣argument␣and␣may␣be␣negated␣by␣prefixing
it␣with␣"no"␣or␣"no-".␣E.g.␣C<"foo!">␣will␣allow␣C<--foo>␣(a␣value␣of
1␣will␣be␣assigned)␣as␣well␣as␣C<--nofoo>␣and␣C<--no-foo>␣(a␣value␣of
0␣will␣be␣assigned).␣If␣the␣option␣has␣aliases,␣this␣applies␣to␣the
aliases␣as␣well.

Using␣negation␣on␣a␣single␣letter␣option␣when␣bundling␣is␣in␣effect␣is
pointless␣and␣will␣result␣in␣a␣warning.

=item␣+

The␣option␣does␣not␣take␣an␣argument␣and␣will␣be␣incremented␣by␣1
every␣time␣it␣appears␣on␣the␣command␣line.␣E.g.␣C<"more+">,␣when␣used
with␣C<--more␣--more␣--more>,␣will␣increment␣the␣value␣three␣times,
resulting␣in␣a␣value␣of␣3␣(provided␣it␣was␣0␣or␣undefined␣at␣first).

The␣C<+>␣specifier␣is␣ignored␣if␣the␣option␣destination␣is␣not␣a␣scalar.

=item␣=␣I<type>␣[␣I<desttype>␣]␣[␣I<repeat>␣]

The␣option␣requires␣an␣argument␣of␣the␣given␣type.␣Supported␣types
are:

=over␣4

=item␣s

String.␣An␣arbitrary␣sequence␣of␣characters.␣It␣is␣valid␣for␣the
argument␣to␣start␣with␣C<->␣or␣C<-->.

=item␣i

Integer.␣An␣optional␣leading␣plus␣or␣minus␣sign,␣followed␣by␣a
sequence␣of␣digits.

=item␣o

Extended␣integer,␣Perl␣style.␣This␣can␣be␣either␣an␣optional␣leading
plus␣or␣minus␣sign,␣followed␣by␣a␣sequence␣of␣digits,␣or␣an␣octal
string␣(a␣zero,␣optionally␣followed␣by␣'0',␣'1',␣..␣'7'),␣or␣a
hexadecimal␣string␣(C<0x>␣followed␣by␣'0'␣..␣'9',␣'a'␣..␣'f',␣case
insensitive),␣or␣a␣binary␣string␣(C<0b>␣followed␣by␣a␣series␣of␣'0'
and␣'1').

=item␣f

Real␣number.␣For␣example␣C<3.14>,␣C<-6.23E24>␣and␣so␣on.

=back

The␣I<desttype>␣can␣be␣C<@>␣or␣C<%>␣to␣specify␣that␣the␣option␣is
list␣or␣a␣hash␣valued.␣This␣is␣only␣needed␣when␣the␣destination␣for
the␣option␣value␣is␣not␣otherwise␣specified.␣It␣should␣be␣omitted␣when
not␣needed.

The␣I<repeat>␣specifies␣the␣number␣of␣values␣this␣option␣takes␣per
occurrence␣on␣the␣command␣line.␣It␣has␣the␣format␣C<{>␣[␣I<min>␣]␣[␣C<,>␣[␣I<max>␣]␣]␣C<}>.

I<min>␣denotes␣the␣minimal␣number␣of␣arguments.␣It␣defaults␣to␣1␣for
options␣with␣C<=>␣and␣to␣0␣for␣options␣with␣C<:>,␣see␣below.␣Note␣that
I<min>␣overrules␣the␣C<=>␣/␣C<:>␣semantics.

I<max>␣denotes␣the␣maximum␣number␣of␣arguments.␣It␣must␣be␣at␣least
I<min>.␣If␣I<max>␣is␣omitted,␣I<but␣the␣comma␣is␣not>,␣there␣is␣no
upper␣bound␣to␣the␣number␣of␣argument␣values␣taken.

=item␣:␣I<type>␣[␣I<desttype>␣]

Like␣C<=>,␣but␣designates␣the␣argument␣as␣optional.
If␣omitted,␣an␣empty␣string␣will␣be␣assigned␣to␣string␣values␣options,
and␣the␣value␣zero␣to␣numeric␣options.

Note␣that␣if␣a␣string␣argument␣starts␣with␣C<->␣or␣C<-->,␣it␣will␣be
considered␣an␣option␣on␣itself.

=item␣:␣I<number>␣[␣I<desttype>␣]

Like␣C<:i>,␣but␣if␣the␣value␣is␣omitted,␣the␣I<number>␣will␣be␣assigned.

=item␣:␣+␣[␣I<desttype>␣]

Like␣C<:i>,␣but␣if␣the␣value␣is␣omitted,␣the␣current␣value␣for␣the
option␣will␣be␣incremented.

=back

=head1␣Advanced␣Possibilities

=head2␣Object␣oriented␣interface

Getopt::Long␣can␣be␣used␣in␣an␣object␣oriented␣way␣as␣well:

␣␣␣␣use␣Getopt::Long;
␣␣␣␣$p␣=␣Getopt::Long::Parser->new;
␣␣␣␣$p->configure(...configuration␣options...);
␣␣␣␣if␣($p->getoptions(...options␣descriptions...))␣...
␣␣␣␣if␣($p->getoptionsfromarray(␣\@array,␣...options␣descriptions...))␣...

Configuration␣options␣can␣be␣passed␣to␣the␣constructor:

␣␣␣␣$p␣=␣new␣Getopt::Long::Parser
␣␣␣␣␣␣␣␣␣␣␣␣␣config␣=>␣[...configuration␣options...];

=head2␣Callback␣object

In␣version␣2.37␣the␣first␣argument␣to␣the␣callback␣function␣was
changed␣from␣string␣to␣object.␣This␣was␣done␣to␣make␣room␣for
extensions␣and␣more␣detailed␣control.␣The␣object␣stringifies␣to␣the
option␣name␣so␣this␣change␣should␣not␣introduce␣compatibility
problems.

The␣callback␣object␣has␣the␣following␣methods:

=over

=item␣name

The␣name␣of␣the␣option,␣unabbreviated.␣For␣an␣option␣with␣multiple
names␣it␣return␣the␣first␣(canonical)␣name.

=item␣given

The␣name␣of␣the␣option␣as␣actually␣used,␣unabbreveated.

=back

=head2␣Thread␣Safety

Getopt::Long␣is␣thread␣safe␣when␣using␣ithreads␣as␣of␣Perl␣5.8.␣␣It␣is
I<not>␣thread␣safe␣when␣using␣the␣older␣(experimental␣and␣now
obsolete)␣threads␣implementation␣that␣was␣added␣to␣Perl␣5.005.

=head2␣Documentation␣and␣help␣texts

Getopt::Long␣encourages␣the␣use␣of␣Pod::Usage␣to␣produce␣help
messages.␣For␣example:

␣␣␣␣use␣Getopt::Long;
␣␣␣␣use␣Pod::Usage;

␣␣␣␣my␣$man␣=␣0;
␣␣␣␣my␣$help␣=␣0;

␣␣␣␣GetOptions('help|?'␣=>␣\$help,␣man␣=>␣\$man)␣or␣pod2usage(2);
␣␣␣␣pod2usage(1)␣if␣$help;
␣␣␣␣pod2usage(-exitval␣=>␣0,␣-verbose␣=>␣2)␣if␣$man;

␣␣␣␣__END__

␣␣␣␣=head1␣NAME

␣␣␣␣sample␣-␣Using␣Getopt::Long␣and␣Pod::Usage

␣␣␣␣=head1␣SYNOPSIS

␣␣␣␣sample␣[options]␣[file␣...]

␣␣␣␣␣Options:
␣␣␣␣␣␣␣-help␣␣␣␣␣␣␣␣␣␣␣␣brief␣help␣message
␣␣␣␣␣␣␣-man␣␣␣␣␣␣␣␣␣␣␣␣␣full␣documentation

␣␣␣␣=head1␣OPTIONS

␣␣␣␣=over␣8

␣␣␣␣=item␣B<-help>

␣␣␣␣Print␣a␣brief␣help␣message␣and␣exits.

␣␣␣␣=item␣B<-man>

␣␣␣␣Prints␣the␣manual␣page␣and␣exits.

␣␣␣␣=back

␣␣␣␣=head1␣DESCRIPTION

␣␣␣␣B<This␣program>␣will␣read␣the␣given␣input␣file(s)␣and␣do␣something
␣␣␣␣useful␣with␣the␣contents␣thereof.

␣␣␣␣=cut

See␣L<Pod::Usage>␣for␣details.

=head2␣Parsing␣options␣from␣an␣arbitrary␣array

By␣default,␣GetOptions␣parses␣the␣options␣that␣are␣present␣in␣the
global␣array␣C<@ARGV>.␣A␣special␣entry␣C<GetOptionsFromArray>␣can␣be
used␣to␣parse␣options␣from␣an␣arbitrary␣array.

␣␣␣␣use␣Getopt::Long␣qw(GetOptionsFromArray);
␣␣␣␣$ret␣=␣GetOptionsFromArray(\@myopts,␣...);

When␣used␣like␣this,␣options␣and␣their␣possible␣values␣are␣removed
from␣C<@myopts>,␣the␣global␣C<@ARGV>␣is␣not␣touched␣at␣all.

The␣following␣two␣calls␣behave␣identically:

␣␣␣␣$ret␣=␣GetOptions(␣...␣);
␣␣␣␣$ret␣=␣GetOptionsFromArray(\@ARGV,␣...␣);

This␣also␣means␣that␣a␣first␣argument␣hash␣reference␣now␣becomes␣the
second␣argument:

␣␣␣␣$ret␣=␣GetOptions(\%opts,␣...␣);
␣␣␣␣$ret␣=␣GetOptionsFromArray(\@ARGV,␣\%opts,␣...␣);

=head2␣Parsing␣options␣from␣an␣arbitrary␣string

A␣special␣entry␣C<GetOptionsFromString>␣can␣be␣used␣to␣parse␣options
from␣an␣arbitrary␣string.

␣␣␣␣use␣Getopt::Long␣qw(GetOptionsFromString);
␣␣␣␣$ret␣=␣GetOptionsFromString($string,␣...);

The␣contents␣of␣the␣string␣are␣split␣into␣arguments␣using␣a␣call␣to
C<Text::ParseWords::shellwords>.␣As␣with␣C<GetOptionsFromArray>,␣the
global␣C<@ARGV>␣is␣not␣touched.

It␣is␣possible␣that,␣upon␣completion,␣not␣all␣arguments␣in␣the␣string
have␣been␣processed.␣C<GetOptionsFromString>␣will,␣when␣called␣in␣list
context,␣return␣both␣the␣return␣status␣and␣an␣array␣reference␣to␣any
remaining␣arguments:

␣␣␣␣($ret,␣$args)␣=␣GetOptionsFromString($string,␣...␣);

If␣any␣arguments␣remain,␣and␣C<GetOptionsFromString>␣was␣not␣called␣in
list␣context,␣a␣message␣will␣be␣given␣and␣C<GetOptionsFromString>␣will
return␣failure.

As␣with␣GetOptionsFromArray,␣a␣first␣argument␣hash␣reference␣now
becomes␣the␣second␣argument.␣See␣the␣next␣section.

=head2␣Storing␣options␣values␣in␣a␣hash

Sometimes,␣for␣example␣when␣there␣are␣a␣lot␣of␣options,␣having␣a
separate␣variable␣for␣each␣of␣them␣can␣be␣cumbersome.␣GetOptions()
supports,␣as␣an␣alternative␣mechanism,␣storing␣options␣values␣in␣a
hash.

To␣obtain␣this,␣a␣reference␣to␣a␣hash␣must␣be␣passed␣I<as␣the␣first
argument>␣to␣GetOptions().␣For␣each␣option␣that␣is␣specified␣on␣the
command␣line,␣the␣option␣value␣will␣be␣stored␣in␣the␣hash␣with␣the
option␣name␣as␣key.␣Options␣that␣are␣not␣actually␣used␣on␣the␣command
line␣will␣not␣be␣put␣in␣the␣hash,␣on␣other␣words,
C<exists($h{option})>␣(or␣defined())␣can␣be␣used␣to␣test␣if␣an␣option
was␣used.␣The␣drawback␣is␣that␣warnings␣will␣be␣issued␣if␣the␣program
runs␣under␣C<use␣strict>␣and␣uses␣C<$h{option}>␣without␣testing␣with
exists()␣or␣defined()␣first.

␣␣␣␣my␣%h␣=␣();
␣␣␣␣GetOptions␣(\%h,␣'length=i');	#␣will␣store␣in␣$h{length}

For␣options␣that␣take␣list␣or␣hash␣values,␣it␣is␣necessary␣to␣indicate
this␣by␣appending␣an␣C<@>␣or␣C<%>␣sign␣after␣the␣type:

␣␣␣␣GetOptions␣(\%h,␣'colours=s@');	#␣will␣push␣to␣@{$h{colours}}

To␣make␣things␣more␣complicated,␣the␣hash␣may␣contain␣references␣to
the␣actual␣destinations,␣for␣example:

␣␣␣␣my␣$len␣=␣0;
␣␣␣␣my␣%h␣=␣('length'␣=>␣\$len);
␣␣␣␣GetOptions␣(\%h,␣'length=i');	#␣will␣store␣in␣$len

This␣example␣is␣fully␣equivalent␣with:

␣␣␣␣my␣$len␣=␣0;
␣␣␣␣GetOptions␣('length=i'␣=>␣\$len);	#␣will␣store␣in␣$len

Any␣mixture␣is␣possible.␣For␣example,␣the␣most␣frequently␣used␣options
could␣be␣stored␣in␣variables␣while␣all␣other␣options␣get␣stored␣in␣the
hash:

␣␣␣␣my␣$verbose␣=␣0;			#␣frequently␣referred
␣␣␣␣my␣$debug␣=␣0;			#␣frequently␣referred
␣␣␣␣my␣%h␣=␣('verbose'␣=>␣\$verbose,␣'debug'␣=>␣\$debug);
␣␣␣␣GetOptions␣(\%h,␣'verbose',␣'debug',␣'filter',␣'size=i');
␣␣␣␣if␣(␣$verbose␣)␣{␣...␣}
␣␣␣␣if␣(␣exists␣$h{filter}␣)␣{␣...␣option␣'filter'␣was␣specified␣...␣}

=head2␣Bundling

With␣bundling␣it␣is␣possible␣to␣set␣several␣single-character␣options
at␣once.␣For␣example␣if␣C<a>,␣C<v>␣and␣C<x>␣are␣all␣valid␣options,

␣␣␣␣-vax

will␣set␣all␣three.

Getopt::Long␣supports␣three␣styles␣of␣bundling.␣To␣enable␣bundling,␣a
call␣to␣Getopt::Long::Configure␣is␣required.

The␣simplest␣style␣of␣bundling␣can␣be␣enabled␣with:

␣␣␣␣Getopt::Long::Configure␣("bundling");

Configured␣this␣way,␣single-character␣options␣can␣be␣bundled␣but␣long
options␣(and␣any␣of␣their␣auto-abbreviated␣shortened␣forms)␣B<must>
always␣start␣with␣a␣double␣dash␣C<-->␣to␣avoid␣ambiguity.␣For␣example,
when␣C<vax>,␣C<a>,␣C<v>␣and␣C<x>␣are␣all␣valid␣options,

␣␣␣␣-vax

will␣set␣C<a>,␣C<v>␣and␣C<x>,␣but

␣␣␣␣--vax

will␣set␣C<vax>.

The␣second␣style␣of␣bundling␣lifts␣this␣restriction.␣It␣can␣be␣enabled
with:

␣␣␣␣Getopt::Long::Configure␣("bundling_override");

Now,␣C<-vax>␣will␣set␣the␣option␣C<vax>.

In␣all␣of␣the␣above␣cases,␣option␣values␣may␣be␣inserted␣in␣the
bundle.␣For␣example:

␣␣␣␣-h24w80

is␣equivalent␣to

␣␣␣␣-h␣24␣-w␣80

A␣third␣style␣of␣bundling␣allows␣only␣values␣to␣be␣bundled␣with
options.␣It␣can␣be␣enabled␣with:

␣␣␣␣Getopt::Long::Configure␣("bundling_values");

Now,␣C<-h24>␣will␣set␣the␣option␣C<h>␣to␣C<24>,␣but␣option␣bundles
like␣C<-vxa>␣and␣C<-h24w80>␣are␣flagged␣as␣errors.

Enabling␣C<bundling_values>␣will␣disable␣the␣other␣two␣styles␣of
bundling.

When␣configured␣for␣bundling,␣single-character␣options␣are␣matched
case␣sensitive␣while␣long␣options␣are␣matched␣case␣insensitive.␣To
have␣the␣single-character␣options␣matched␣case␣insensitive␣as␣well,
use:

␣␣␣␣Getopt::Long::Configure␣("bundling",␣"ignorecase_always");

It␣goes␣without␣saying␣that␣bundling␣can␣be␣quite␣confusing.

=head2␣The␣lonesome␣dash

Normally,␣a␣lone␣dash␣C<->␣on␣the␣command␣line␣will␣not␣be␣considered
an␣option.␣Option␣processing␣will␣terminate␣(unless␣"permute"␣is
configured)␣and␣the␣dash␣will␣be␣left␣in␣C<@ARGV>.

It␣is␣possible␣to␣get␣special␣treatment␣for␣a␣lone␣dash.␣This␣can␣be
achieved␣by␣adding␣an␣option␣specification␣with␣an␣empty␣name,␣for
example:

␣␣␣␣GetOptions␣(''␣=>␣\$stdio);

A␣lone␣dash␣on␣the␣command␣line␣will␣now␣be␣a␣legal␣option,␣and␣using
it␣will␣set␣variable␣C<$stdio>.

=head2␣Argument␣callback

A␣special␣option␣'name'␣C<<␣<>␣>>␣can␣be␣used␣to␣designate␣a␣subroutine
to␣handle␣non-option␣arguments.␣When␣GetOptions()␣encounters␣an
argument␣that␣does␣not␣look␣like␣an␣option,␣it␣will␣immediately␣call␣this
subroutine␣and␣passes␣it␣one␣parameter:␣the␣argument␣name.

For␣example:

␣␣␣␣my␣$width␣=␣80;
␣␣␣␣sub␣process␣{␣...␣}
␣␣␣␣GetOptions␣('width=i'␣=>␣\$width,␣'<>'␣=>␣\&process);

When␣applied␣to␣the␣following␣command␣line:

␣␣␣␣arg1␣--width=72␣arg2␣--width=60␣arg3

This␣will␣call
C<process("arg1")>␣while␣C<$width>␣is␣C<80>,
C<process("arg2")>␣while␣C<$width>␣is␣C<72>,␣and
C<process("arg3")>␣while␣C<$width>␣is␣C<60>.

This␣feature␣requires␣configuration␣option␣B<permute>,␣see␣section
L<Configuring␣Getopt::Long>.

=head1␣Configuring␣Getopt::Long

Getopt::Long␣can␣be␣configured␣by␣calling␣subroutine
Getopt::Long::Configure().␣This␣subroutine␣takes␣a␣list␣of␣quoted
strings,␣each␣specifying␣a␣configuration␣option␣to␣be␣enabled,␣e.g.
C<ignore_case>.␣To␣disable,␣prefix␣with␣C<no>␣or␣C<no_>,␣e.g.
C<no_ignore_case>.␣Case␣does␣not␣matter.␣Multiple␣calls␣to␣Configure()
are␣possible.

Alternatively,␣as␣of␣version␣2.24,␣the␣configuration␣options␣may␣be
passed␣together␣with␣the␣C<use>␣statement:

␣␣␣␣use␣Getopt::Long␣qw(:config␣no_ignore_case␣bundling);

The␣following␣options␣are␣available:

=over␣12

=item␣default

This␣option␣causes␣all␣configuration␣options␣to␣be␣reset␣to␣their
default␣values.

=item␣posix_default

This␣option␣causes␣all␣configuration␣options␣to␣be␣reset␣to␣their
default␣values␣as␣if␣the␣environment␣variable␣POSIXLY_CORRECT␣had
been␣set.

=item␣auto_abbrev

Allow␣option␣names␣to␣be␣abbreviated␣to␣uniqueness.
Default␣is␣enabled␣unless␣environment␣variable
POSIXLY_CORRECT␣has␣been␣set,␣in␣which␣case␣C<auto_abbrev>␣is␣disabled.

=item␣getopt_compat

Allow␣C<+>␣to␣start␣options.
Default␣is␣enabled␣unless␣environment␣variable
POSIXLY_CORRECT␣has␣been␣set,␣in␣which␣case␣C<getopt_compat>␣is␣disabled.

=item␣gnu_compat

C<gnu_compat>␣controls␣whether␣C<--opt=>␣is␣allowed,␣and␣what␣it␣should
do.␣Without␣C<gnu_compat>,␣C<--opt=>␣gives␣an␣error.␣With␣C<gnu_compat>,
C<--opt=>␣will␣give␣option␣C<opt>␣and␣empty␣value.
This␣is␣the␣way␣GNU␣getopt_long()␣does␣it.

Note␣that␣C<--opt␣value>␣is␣still␣accepted,␣even␣though␣GNU
getopt_long()␣doesn't.

=item␣gnu_getopt

This␣is␣a␣short␣way␣of␣setting␣C<gnu_compat>␣C<bundling>␣C<permute>
C<no_getopt_compat>.␣With␣C<gnu_getopt>,␣command␣line␣handling␣should␣be
reasonably␣compatible␣with␣GNU␣getopt_long().

=item␣require_order

Whether␣command␣line␣arguments␣are␣allowed␣to␣be␣mixed␣with␣options.
Default␣is␣disabled␣unless␣environment␣variable
POSIXLY_CORRECT␣has␣been␣set,␣in␣which␣case␣C<require_order>␣is␣enabled.

See␣also␣C<permute>,␣which␣is␣the␣opposite␣of␣C<require_order>.

=item␣permute

Whether␣command␣line␣arguments␣are␣allowed␣to␣be␣mixed␣with␣options.
Default␣is␣enabled␣unless␣environment␣variable
POSIXLY_CORRECT␣has␣been␣set,␣in␣which␣case␣C<permute>␣is␣disabled.
Note␣that␣C<permute>␣is␣the␣opposite␣of␣C<require_order>.

If␣C<permute>␣is␣enabled,␣this␣means␣that

␣␣␣␣--foo␣arg1␣--bar␣arg2␣arg3

is␣equivalent␣to

␣␣␣␣--foo␣--bar␣arg1␣arg2␣arg3

If␣an␣argument␣callback␣routine␣is␣specified,␣C<@ARGV>␣will␣always␣be
empty␣upon␣successful␣return␣of␣GetOptions()␣since␣all␣options␣have␣been
processed.␣The␣only␣exception␣is␣when␣C<-->␣is␣used:

␣␣␣␣--foo␣arg1␣--bar␣arg2␣--␣arg3

This␣will␣call␣the␣callback␣routine␣for␣arg1␣and␣arg2,␣and␣then
terminate␣GetOptions()␣leaving␣C<"arg3">␣in␣C<@ARGV>.

If␣C<require_order>␣is␣enabled,␣options␣processing
terminates␣when␣the␣first␣non-option␣is␣encountered.

␣␣␣␣--foo␣arg1␣--bar␣arg2␣arg3

is␣equivalent␣to

␣␣␣␣--foo␣--␣arg1␣--bar␣arg2␣arg3

If␣C<pass_through>␣is␣also␣enabled,␣options␣processing␣will␣terminate
at␣the␣first␣unrecognized␣option,␣or␣non-option,␣whichever␣comes
first.

=item␣bundling␣(default:␣disabled)

Enabling␣this␣option␣will␣allow␣single-character␣options␣to␣be
bundled.␣To␣distinguish␣bundles␣from␣long␣option␣names,␣long␣options
(and␣any␣of␣their␣auto-abbreviated␣shortened␣forms)␣I<must>␣be
introduced␣with␣C<-->␣and␣bundles␣with␣C<->.

Note␣that,␣if␣you␣have␣options␣C<a>,␣C<l>␣and␣C<all>,␣and
auto_abbrev␣enabled,␣possible␣arguments␣and␣option␣settings␣are:

␣␣␣␣using␣argument␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣sets␣option(s)
␣␣␣␣------------------------------------------
␣␣␣␣-a,␣--a␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣a
␣␣␣␣-l,␣--l␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣l
␣␣␣␣-al,␣-la,␣-ala,␣-all,...␣␣␣␣␣a,␣l
␣␣␣␣--al,␣--all␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣all

The␣surprising␣part␣is␣that␣C<--a>␣sets␣option␣C<a>␣(due␣to␣auto
completion),␣not␣C<all>.

Note:␣disabling␣C<bundling>␣also␣disables␣C<bundling_override>.

=item␣bundling_override␣(default:␣disabled)

If␣C<bundling_override>␣is␣enabled,␣bundling␣is␣enabled␣as␣with
C<bundling>␣but␣now␣long␣option␣names␣override␣option␣bundles.

Note:␣disabling␣C<bundling_override>␣also␣disables␣C<bundling>.

B<Note:>␣Using␣option␣bundling␣can␣easily␣lead␣to␣unexpected␣results,
especially␣when␣mixing␣long␣options␣and␣bundles.␣Caveat␣emptor.

=item␣ignore_case␣␣(default:␣enabled)

If␣enabled,␣case␣is␣ignored␣when␣matching␣option␣names.␣If,␣however,
bundling␣is␣enabled␣as␣well,␣single␣character␣options␣will␣be␣treated
case-sensitive.

With␣C<ignore_case>,␣option␣specifications␣for␣options␣that␣only
differ␣in␣case,␣e.g.,␣C<"foo">␣and␣C<"Foo">,␣will␣be␣flagged␣as
duplicates.

Note:␣disabling␣C<ignore_case>␣also␣disables␣C<ignore_case_always>.

=item␣ignore_case_always␣(default:␣disabled)

When␣bundling␣is␣in␣effect,␣case␣is␣ignored␣on␣single-character
options␣also.

Note:␣disabling␣C<ignore_case_always>␣also␣disables␣C<ignore_case>.

=item␣auto_version␣(default:disabled)

Automatically␣provide␣support␣for␣the␣B<--version>␣option␣if
the␣application␣did␣not␣specify␣a␣handler␣for␣this␣option␣itself.

Getopt::Long␣will␣provide␣a␣standard␣version␣message␣that␣includes␣the
program␣name,␣its␣version␣(if␣$main::VERSION␣is␣defined),␣and␣the
versions␣of␣Getopt::Long␣and␣Perl.␣The␣message␣will␣be␣written␣to
standard␣output␣and␣processing␣will␣terminate.

C<auto_version>␣will␣be␣enabled␣if␣the␣calling␣program␣explicitly
specified␣a␣version␣number␣higher␣than␣2.32␣in␣the␣C<use>␣or
C<require>␣statement.

=item␣auto_help␣(default:disabled)

Automatically␣provide␣support␣for␣the␣B<--help>␣and␣B<-?>␣options␣if
the␣application␣did␣not␣specify␣a␣handler␣for␣this␣option␣itself.

Getopt::Long␣will␣provide␣a␣help␣message␣using␣module␣L<Pod::Usage>.␣The
message,␣derived␣from␣the␣SYNOPSIS␣POD␣section,␣will␣be␣written␣to
standard␣output␣and␣processing␣will␣terminate.

C<auto_help>␣will␣be␣enabled␣if␣the␣calling␣program␣explicitly
specified␣a␣version␣number␣higher␣than␣2.32␣in␣the␣C<use>␣or
C<require>␣statement.

=item␣pass_through␣(default:␣disabled)

With␣C<pass_through>␣anything␣that␣is␣unknown,␣ambiguous␣or␣supplied␣with
an␣invalid␣option␣will␣not␣be␣flagged␣as␣an␣error.␣Instead␣the␣unknown
option(s)␣will␣be␣passed␣to␣the␣catchall␣C<<␣<>␣>>␣if␣present,␣otherwise
through␣to␣C<@ARGV>.␣This␣makes␣it␣possible␣to␣write␣wrapper␣scripts␣that
process␣only␣part␣of␣the␣user␣supplied␣command␣line␣arguments,␣and␣pass␣the
remaining␣options␣to␣some␣other␣program.

If␣C<require_order>␣is␣enabled,␣options␣processing␣will␣terminate␣at␣the
first␣unrecognized␣option,␣or␣non-option,␣whichever␣comes␣first␣and␣all
remaining␣arguments␣are␣passed␣to␣C<@ARGV>␣instead␣of␣the␣catchall
C<<␣<>␣>>␣if␣present.␣␣However,␣if␣C<permute>␣is␣enabled␣instead,␣results
can␣become␣confusing.

Note␣that␣the␣options␣terminator␣(default␣C<-->),␣if␣present,␣will
also␣be␣passed␣through␣in␣C<@ARGV>.

=item␣prefix

The␣string␣that␣starts␣options.␣If␣a␣constant␣string␣is␣not
sufficient,␣see␣C<prefix_pattern>.

=item␣prefix_pattern

A␣Perl␣pattern␣that␣identifies␣the␣strings␣that␣introduce␣options.
Default␣is␣C<--|-|\+>␣unless␣environment␣variable
POSIXLY_CORRECT␣has␣been␣set,␣in␣which␣case␣it␣is␣C<--|->.

=item␣long_prefix_pattern

A␣Perl␣pattern␣that␣allows␣the␣disambiguation␣of␣long␣and␣short
prefixes.␣Default␣is␣C<-->.

Typically␣you␣only␣need␣to␣set␣this␣if␣you␣are␣using␣nonstandard
prefixes␣and␣want␣some␣or␣all␣of␣them␣to␣have␣the␣same␣semantics␣as
'--'␣does␣under␣normal␣circumstances.

For␣example,␣setting␣prefix_pattern␣to␣C<--|-|\+|\/>␣and
long_prefix_pattern␣to␣C<--|\/>␣would␣add␣Win32␣style␣argument
handling.

=item␣debug␣(default:␣disabled)

Enable␣debugging␣output.

=back

=head1␣Exportable␣Methods

=over

=item␣VersionMessage

This␣subroutine␣provides␣a␣standard␣version␣message.␣Its␣argument␣can␣be:

=over␣4

=item␣*

A␣string␣containing␣the␣text␣of␣a␣message␣to␣print␣I<before>␣printing
the␣standard␣message.

=item␣*

A␣numeric␣value␣corresponding␣to␣the␣desired␣exit␣status.

=item␣*

A␣reference␣to␣a␣hash.

=back

If␣more␣than␣one␣argument␣is␣given␣then␣the␣entire␣argument␣list␣is
assumed␣to␣be␣a␣hash.␣␣If␣a␣hash␣is␣supplied␣(either␣as␣a␣reference␣or
as␣a␣list)␣it␣should␣contain␣one␣or␣more␣elements␣with␣the␣following
keys:

=over␣4

=item␣C<-message>

=item␣C<-msg>

The␣text␣of␣a␣message␣to␣print␣immediately␣prior␣to␣printing␣the
program's␣usage␣message.

=item␣C<-exitval>

The␣desired␣exit␣status␣to␣pass␣to␣the␣B<exit()>␣function.
This␣should␣be␣an␣integer,␣or␣else␣the␣string␣"NOEXIT"␣to
indicate␣that␣control␣should␣simply␣be␣returned␣without
terminating␣the␣invoking␣process.

=item␣C<-output>

A␣reference␣to␣a␣filehandle,␣or␣the␣pathname␣of␣a␣file␣to␣which␣the
usage␣message␣should␣be␣written.␣The␣default␣is␣C<\*STDERR>␣unless␣the
exit␣value␣is␣less␣than␣2␣(in␣which␣case␣the␣default␣is␣C<\*STDOUT>).

=back

You␣cannot␣tie␣this␣routine␣directly␣to␣an␣option,␣e.g.:

␣␣␣␣GetOptions("version"␣=>␣\&VersionMessage);

Use␣this␣instead:

␣␣␣␣GetOptions("version"␣=>␣sub␣{␣VersionMessage()␣});

=item␣HelpMessage

This␣subroutine␣produces␣a␣standard␣help␣message,␣derived␣from␣the
program's␣POD␣section␣SYNOPSIS␣using␣L<Pod::Usage>.␣It␣takes␣the␣same
arguments␣as␣VersionMessage().␣In␣particular,␣you␣cannot␣tie␣it
directly␣to␣an␣option,␣e.g.:

␣␣␣␣GetOptions("help"␣=>␣\&HelpMessage);

Use␣this␣instead:

␣␣␣␣GetOptions("help"␣=>␣sub␣{␣HelpMessage()␣});

=back

=head1␣Return␣values␣and␣Errors

Configuration␣errors␣and␣errors␣in␣the␣option␣definitions␣are
signalled␣using␣die()␣and␣will␣terminate␣the␣calling␣program␣unless
the␣call␣to␣Getopt::Long::GetOptions()␣was␣embedded␣in␣C<eval␣{␣...
}>,␣or␣die()␣was␣trapped␣using␣C<$SIG{__DIE__}>.

GetOptions␣returns␣true␣to␣indicate␣success.
It␣returns␣false␣when␣the␣function␣detected␣one␣or␣more␣errors␣during
option␣parsing.␣These␣errors␣are␣signalled␣using␣warn()␣and␣can␣be
trapped␣with␣C<$SIG{__WARN__}>.

=head1␣Legacy

The␣earliest␣development␣of␣C<newgetopt.pl>␣started␣in␣1990,␣with␣Perl
version␣4.␣As␣a␣result,␣its␣development,␣and␣the␣development␣of
Getopt::Long,␣has␣gone␣through␣several␣stages.␣Since␣backward
compatibility␣has␣always␣been␣extremely␣important,␣the␣current␣version
of␣Getopt::Long␣still␣supports␣a␣lot␣of␣constructs␣that␣nowadays␣are
no␣longer␣necessary␣or␣otherwise␣unwanted.␣This␣section␣describes
briefly␣some␣of␣these␣'features'.

=head2␣Default␣destinations

When␣no␣destination␣is␣specified␣for␣an␣option,␣GetOptions␣will␣store
the␣resultant␣value␣in␣a␣global␣variable␣named␣C<opt_>I<XXX>,␣where
I<XXX>␣is␣the␣primary␣name␣of␣this␣option.␣When␣a␣program␣executes
under␣C<use␣strict>␣(recommended),␣these␣variables␣must␣be
pre-declared␣with␣our()␣or␣C<use␣vars>.

␣␣␣␣our␣$opt_length␣=␣0;
␣␣␣␣GetOptions␣('length=i');	#␣will␣store␣in␣$opt_length

To␣yield␣a␣usable␣Perl␣variable,␣characters␣that␣are␣not␣part␣of␣the
syntax␣for␣variables␣are␣translated␣to␣underscores.␣For␣example,
C<--fpp-struct-return>␣will␣set␣the␣variable
C<$opt_fpp_struct_return>.␣Note␣that␣this␣variable␣resides␣in␣the
namespace␣of␣the␣calling␣program,␣not␣necessarily␣C<main>.␣For
example:

␣␣␣␣GetOptions␣("size=i",␣"sizes=i@");

with␣command␣line␣"-size␣10␣-sizes␣24␣-sizes␣48"␣will␣perform␣the
equivalent␣of␣the␣assignments

␣␣␣␣$opt_size␣=␣10;
␣␣␣␣@opt_sizes␣=␣(24,␣48);

=head2␣Alternative␣option␣starters

A␣string␣of␣alternative␣option␣starter␣characters␣may␣be␣passed␣as␣the
first␣argument␣(or␣the␣first␣argument␣after␣a␣leading␣hash␣reference
argument).

␣␣␣␣my␣$len␣=␣0;
␣␣␣␣GetOptions␣('/',␣'length=i'␣=>␣$len);

Now␣the␣command␣line␣may␣look␣like:

␣␣␣␣/length␣24␣--␣arg

Note␣that␣to␣terminate␣options␣processing␣still␣requires␣a␣double␣dash
C<-->.

GetOptions()␣will␣not␣interpret␣a␣leading␣C<<␣"<>"␣>>␣as␣option␣starters
if␣the␣next␣argument␣is␣a␣reference.␣To␣force␣C<<␣"<"␣>>␣and␣C<<␣">"␣>>␣as
option␣starters,␣use␣C<<␣"><"␣>>.␣Confusing?␣Well,␣B<using␣a␣starter
argument␣is␣strongly␣deprecated>␣anyway.

=head2␣Configuration␣variables

Previous␣versions␣of␣Getopt::Long␣used␣variables␣for␣the␣purpose␣of
configuring.␣Although␣manipulating␣these␣variables␣still␣work,␣it␣is
strongly␣encouraged␣to␣use␣the␣C<Configure>␣routine␣that␣was␣introduced
in␣version␣2.17.␣Besides,␣it␣is␣much␣easier.

=head1␣Tips␣and␣Techniques

=head2␣Pushing␣multiple␣values␣in␣a␣hash␣option

Sometimes␣you␣want␣to␣combine␣the␣best␣of␣hashes␣and␣arrays.␣For
example,␣the␣command␣line:

␣␣--list␣add=first␣--list␣add=second␣--list␣add=third

where␣each␣successive␣'list␣add'␣option␣will␣push␣the␣value␣of␣add
into␣array␣ref␣$list->{'add'}.␣The␣result␣would␣be␣like

␣␣$list->{add}␣=␣[qw(first␣second␣third)];

This␣can␣be␣accomplished␣with␣a␣destination␣routine:

␣␣GetOptions('list=s%'␣=>
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣sub␣{␣push(@{$list{$_[1]}},␣$_[2])␣});

=head1␣Troubleshooting

=head2␣GetOptions␣does␣not␣return␣a␣false␣result␣when␣an␣option␣is␣not␣supplied

That's␣why␣they're␣called␣'options'.

=head2␣GetOptions␣does␣not␣split␣the␣command␣line␣correctly

The␣command␣line␣is␣not␣split␣by␣GetOptions,␣but␣by␣the␣command␣line
interpreter␣(CLI).␣On␣Unix,␣this␣is␣the␣shell.␣On␣Windows,␣it␣is
COMMAND.COM␣or␣CMD.EXE.␣Other␣operating␣systems␣have␣other␣CLIs.

It␣is␣important␣to␣know␣that␣these␣CLIs␣may␣behave␣different␣when␣the
command␣line␣contains␣special␣characters,␣in␣particular␣quotes␣or
backslashes.␣For␣example,␣with␣Unix␣shells␣you␣can␣use␣single␣quotes
(C<'>)␣and␣double␣quotes␣(C<">)␣to␣group␣words␣together.␣The␣following
alternatives␣are␣equivalent␣on␣Unix:

␣␣␣␣"two␣words"
␣␣␣␣'two␣words'
␣␣␣␣two\␣words

In␣case␣of␣doubt,␣insert␣the␣following␣statement␣in␣front␣of␣your␣Perl
program:

␣␣␣␣print␣STDERR␣(join("|",@ARGV),"\n");

to␣verify␣how␣your␣CLI␣passes␣the␣arguments␣to␣the␣program.

=head2␣Undefined␣subroutine␣&main::GetOptions␣called

Are␣you␣running␣Windows,␣and␣did␣you␣write

␣␣␣␣use␣GetOpt::Long;

(note␣the␣capital␣'O')?

=head2␣How␣do␣I␣put␣a␣"-?"␣option␣into␣a␣Getopt::Long?

You␣can␣only␣obtain␣this␣using␣an␣alias,␣and␣Getopt::Long␣of␣at␣least
version␣2.13.

␣␣␣␣use␣Getopt::Long;
␣␣␣␣GetOptions␣("help|?");␣␣␣␣#␣-help␣and␣-?␣will␣both␣set␣$opt_help

Other␣characters␣that␣can't␣appear␣in␣Perl␣identifiers␣are␣also
supported␣in␣aliases␣with␣Getopt::Long␣of␣at␣version␣2.39.␣Note␣that
the␣characters␣C<!>,␣C<|>,␣C<+>,␣C<=>,␣and␣C<:>␣can␣only␣appear␣as␣the
first␣(or␣only)␣character␣of␣an␣alias.

As␣of␣version␣2.32␣Getopt::Long␣provides␣auto-help,␣a␣quick␣and␣easy␣way
to␣add␣the␣options␣--help␣and␣-?␣to␣your␣program,␣and␣handle␣them.

See␣C<auto_help>␣in␣section␣L<Configuring␣Getopt::Long>.

=head1␣AUTHOR

Johan␣Vromans␣<jvromans@squirrel.nl>

=head1␣COPYRIGHT␣AND␣DISCLAIMER

This␣program␣is␣Copyright␣1990,2015␣by␣Johan␣Vromans.
This␣program␣is␣free␣software;␣you␣can␣redistribute␣it␣and/or
modify␣it␣under␣the␣terms␣of␣the␣Perl␣Artistic␣License␣or␣the
GNU␣General␣Public␣License␣as␣published␣by␣the␣Free␣Software
Foundation;␣either␣version␣2␣of␣the␣License,␣or␣(at␣your␣option)␣any
later␣version.

This␣program␣is␣distributed␣in␣the␣hope␣that␣it␣will␣be␣useful,
but␣WITHOUT␣ANY␣WARRANTY;␣without␣even␣the␣implied␣warranty␣of
MERCHANTABILITY␣or␣FITNESS␣FOR␣A␣PARTICULAR␣PURPOSE.␣␣See␣the
GNU␣General␣Public␣License␣for␣more␣details.

If␣you␣do␣not␣have␣a␣copy␣of␣the␣GNU␣General␣Public␣License␣write␣to
the␣Free␣Software␣Foundation,␣Inc.,␣675␣Mass␣Ave,␣Cambridge,
MA␣02139,␣USA.

=cut
----------
Range: (3453493,3457011) (3518)
=head1␣NAME

Getopt::Std␣-␣Process␣single-character␣switches␣with␣switch␣clustering

=head1␣SYNOPSIS

␣␣␣␣use␣Getopt::Std;

␣␣␣␣getopts('oif:');␣␣#␣-o␣&␣-i␣are␣boolean␣flags,␣-f␣takes␣an␣argument
		␣␣␣␣␣␣#␣Sets␣$opt_*␣as␣a␣side␣effect.
␣␣␣␣getopts('oif:',␣\%opts);␣␣#␣options␣as␣above.␣Values␣in␣%opts
␣␣␣␣getopt('oDI');␣␣␣␣#␣-o,␣-D␣&␣-I␣take␣arg.
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣Sets␣$opt_*␣as␣a␣side␣effect.
␣␣␣␣getopt('oDI',␣\%opts);␣␣␣␣#␣-o,␣-D␣&␣-I␣take␣arg.␣␣Values␣in␣%opts

=head1␣DESCRIPTION

The␣C<getopts()>␣function␣processes␣single-character␣switches␣with␣switch
clustering.␣␣Pass␣one␣argument␣which␣is␣a␣string␣containing␣all␣switches␣to␣be
recognized.␣␣For␣each␣switch␣found,␣if␣an␣argument␣is␣expected␣and␣provided,
C<getopts()>␣sets␣C<$opt_x>␣(where␣C<x>␣is␣the␣switch␣name)␣to␣the␣value␣of
the␣argument.␣␣If␣an␣argument␣is␣expected␣but␣none␣is␣provided,␣C<$opt_x>␣is
set␣to␣an␣undefined␣value.␣␣If␣a␣switch␣does␣not␣take␣an␣argument,␣C<$opt_x>
is␣set␣to␣C<1>.

Switches␣which␣take␣an␣argument␣don't␣care␣whether␣there␣is␣a␣space␣between
the␣switch␣and␣the␣argument.␣␣If␣unspecified␣switches␣are␣found␣on␣the
command-line,␣the␣user␣will␣be␣warned␣that␣an␣unknown␣option␣was␣given.

The␣C<getopts()>␣function␣returns␣true␣unless␣an␣invalid␣option␣was␣found.

The␣C<getopt()>␣function␣is␣similar,␣but␣its␣argument␣is␣a␣string␣containing
all␣switches␣that␣take␣an␣argument.␣␣If␣no␣argument␣is␣provided␣for␣a␣switch,
say,␣C<y>,␣the␣corresponding␣C<$opt_y>␣will␣be␣set␣to␣an␣undefined␣value.
Unspecified␣switches␣are␣silently␣accepted.␣␣Use␣of␣C<getopt()>␣is␣not
recommended.

Note␣that,␣if␣your␣code␣is␣running␣under␣the␣recommended␣C<use␣strict
vars>␣pragma,␣you␣will␣need␣to␣declare␣these␣package␣variables
with␣C<our>:

␣␣␣␣our($opt_x,␣$opt_y);

For␣those␣of␣you␣who␣don't␣like␣additional␣global␣variables␣being␣created,
C<getopt()>␣and␣C<getopts()>␣will␣also␣accept␣a␣hash␣reference␣as␣an␣optional
second␣argument.␣␣Hash␣keys␣will␣be␣C<x>␣(where␣C<x>␣is␣the␣switch␣name)␣with
key␣values␣the␣value␣of␣the␣argument␣or␣C<1>␣if␣no␣argument␣is␣specified.

To␣allow␣programs␣to␣process␣arguments␣that␣look␣like␣switches,␣but␣aren't,
both␣functions␣will␣stop␣processing␣switches␣when␣they␣see␣the␣argument
C<-->.␣␣The␣C<-->␣will␣be␣removed␣from␣@ARGV.

=head1␣C<--help>␣and␣C<--version>

If␣C<->␣is␣not␣a␣recognized␣switch␣letter,␣getopts()␣supports␣arguments
C<--help>␣and␣C<--version>.␣␣If␣C<main::HELP_MESSAGE()>␣and/or
C<main::VERSION_MESSAGE()>␣are␣defined,␣they␣are␣called;␣the␣arguments␣are
the␣output␣file␣handle,␣the␣name␣of␣option-processing␣package,␣its␣version,
and␣the␣switches␣string.␣␣If␣the␣subroutines␣are␣not␣defined,␣an␣attempt␣is
made␣to␣generate␣intelligent␣messages;␣for␣best␣results,␣define␣$main::VERSION.

If␣embedded␣documentation␣(in␣pod␣format,␣see␣L<perlpod>)␣is␣detected
in␣the␣script,␣C<--help>␣will␣also␣show␣how␣to␣access␣the␣documentation.

Note␣that␣due␣to␣excessive␣paranoia,␣if␣$Getopt::Std::STANDARD_HELP_VERSION
isn't␣true␣(the␣default␣is␣false),␣then␣the␣messages␣are␣printed␣on␣STDERR,
and␣the␣processing␣continues␣after␣the␣messages␣are␣printed.␣␣This␣being
the␣opposite␣of␣the␣standard-conforming␣behaviour,␣it␣is␣strongly␣recommended
to␣set␣$Getopt::Std::STANDARD_HELP_VERSION␣to␣true.

One␣can␣change␣the␣output␣file␣handle␣of␣the␣messages␣by␣setting
$Getopt::Std::OUTPUT_HELP_VERSION.␣␣One␣can␣print␣the␣messages␣of␣C<--help>
(without␣the␣C<Usage:>␣line)␣and␣C<--version>␣by␣calling␣functions␣help_mess()
and␣version_mess()␣with␣the␣switches␣string␣as␣an␣argument.

=cut
----------
Range: (3468882,3470527) (1645)
use␣B␣qw(class␣main_root␣main_start␣main_cv␣svref_2object␣opnumber␣perlstring
	␣OPf_WANT␣OPf_WANT_VOID␣OPf_WANT_SCALAR␣OPf_WANT_LIST
	␣OPf_KIDS␣OPf_REF␣OPf_STACKED␣OPf_SPECIAL␣OPf_MOD␣OPf_PARENS
	␣OPpLVAL_INTRO␣OPpOUR_INTRO␣OPpENTERSUB_AMPER␣OPpSLICE␣OPpKVSLICE
␣␣␣␣␣␣␣␣␣OPpCONST_BARE
	␣OPpTRANS_SQUASH␣OPpTRANS_DELETE␣OPpTRANS_COMPLEMENT␣OPpTARGET_MY
	␣OPpEXISTS_SUB␣OPpSORT_NUMERIC␣OPpSORT_INTEGER␣OPpREPEAT_DOLIST
	␣OPpSORT_REVERSE␣OPpMULTIDEREF_EXISTS␣OPpMULTIDEREF_DELETE
␣␣␣␣␣␣␣␣␣OPpSPLIT_ASSIGN␣OPpSPLIT_LEX
␣␣␣␣␣␣␣␣␣OPpPADHV_ISKEYS␣OPpRV2HV_ISKEYS
␣␣␣␣␣␣␣␣␣OPpCONCAT_NESTED
␣␣␣␣␣␣␣␣␣OPpMULTICONCAT_APPEND␣OPpMULTICONCAT_STRINGIFY␣OPpMULTICONCAT_FAKE
␣␣␣␣␣␣␣␣␣OPpTRUEBOOL␣OPpINDEX_BOOLNEG
	␣SVf_IOK␣SVf_NOK␣SVf_ROK␣SVf_POK␣SVpad_OUR␣SVf_FAKE␣SVs_RMG␣SVs_SMG
	␣SVs_PADTMP␣SVpad_TYPED
␣␣␣␣␣␣␣␣␣CVf_METHOD␣CVf_LVALUE
	␣PMf_KEEP␣PMf_GLOBAL␣PMf_CONTINUE␣PMf_EVAL␣PMf_ONCE
	␣PMf_MULTILINE␣PMf_SINGLELINE␣PMf_FOLD␣PMf_EXTENDED␣PMf_EXTENDED_MORE
	␣PADNAMEt_OUTER
␣␣␣␣␣␣␣␣MDEREF_reload
␣␣␣␣␣␣␣␣MDEREF_AV_pop_rv2av_aelem
␣␣␣␣␣␣␣␣MDEREF_AV_gvsv_vivify_rv2av_aelem
␣␣␣␣␣␣␣␣MDEREF_AV_padsv_vivify_rv2av_aelem
␣␣␣␣␣␣␣␣MDEREF_AV_vivify_rv2av_aelem
␣␣␣␣␣␣␣␣MDEREF_AV_padav_aelem
␣␣␣␣␣␣␣␣MDEREF_AV_gvav_aelem
␣␣␣␣␣␣␣␣MDEREF_HV_pop_rv2hv_helem
␣␣␣␣␣␣␣␣MDEREF_HV_gvsv_vivify_rv2hv_helem
␣␣␣␣␣␣␣␣MDEREF_HV_padsv_vivify_rv2hv_helem
␣␣␣␣␣␣␣␣MDEREF_HV_vivify_rv2hv_helem
␣␣␣␣␣␣␣␣MDEREF_HV_padhv_helem
␣␣␣␣␣␣␣␣MDEREF_HV_gvhv_helem
␣␣␣␣␣␣␣␣MDEREF_ACTION_MASK
␣␣␣␣␣␣␣␣MDEREF_INDEX_none
␣␣␣␣␣␣␣␣MDEREF_INDEX_const
␣␣␣␣␣␣␣␣MDEREF_INDEX_padsv
␣␣␣␣␣␣␣␣MDEREF_INDEX_gvsv
␣␣␣␣␣␣␣␣MDEREF_INDEX_MASK
␣␣␣␣␣␣␣␣MDEREF_FLAG_last
␣␣␣␣␣␣␣␣MDEREF_MASK
␣␣␣␣␣␣␣␣MDEREF_SHIFT
␣␣␣␣);
----------
Range: (3620389,3622884) (2495)
/^(?:scalar|pushmark|wantarray|const|gvsv|gv|padsv|rv2gv
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣|rv2sv|av2arylen|anoncode|prototype|srefgen|ref|bless
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣|regcmaybe|regcreset|regcomp|qr|subst|substcont|trans
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣|transr|sassign|chop|schop|chomp|schomp|defined|undef
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣|study|pos|preinc|i_preinc|predec|i_predec|postinc
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣|i_postinc|postdec|i_postdec|pow|multiply|i_multiply
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣|divide|i_divide|modulo|i_modulo|add|i_add|subtract
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣|i_subtract|concat|multiconcat|stringify|left_shift|right_shift|lt
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣|i_lt|gt|i_gt|le|i_le|ge|i_ge|eq|i_eq|ne|i_ne|ncmp|i_ncmp
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣|slt|sgt|sle|sge|seq|sne|scmp|[sn]?bit_(?:and|x?or)|negate
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣|i_negate|not|[sn]?complement|smartmatch|atan2|sin|cos
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣|rand|srand|exp|log|sqrt|int|hex|oct|abs|length|substr
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣|vec|index|rindex|sprintf|formline|ord|chr|crypt|ucfirst
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣|lcfirst|uc|lc|quotemeta|aelemfast|aelem|exists|helem
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣|pack|join|anonlist|anonhash|push|pop|shift|unshift|xor
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣|andassign|orassign|dorassign|warn|die|reset|nextstate
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣|dbstate|unstack|last|next|redo|dump|goto|exit|open|close
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣|pipe_op|fileno|umask|binmode|tie|untie|tied|dbmopen
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣|dbmclose|select|getc|read|enterwrite|prtf|print|say
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣|sysopen|sysseek|sysread|syswrite|eof|tell|seek|truncate
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣|fcntl|ioctl|flock|send|recv|socket|sockpair|bind|connect
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣|listen|accept|shutdown|gsockopt|ssockopt|getsockname
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣|getpeername|ftrread|ftrwrite|ftrexec|fteread|ftewrite
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣|fteexec|ftis|ftsize|ftmtime|ftatime|ftctime|ftrowned
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣|fteowned|ftzero|ftsock|ftchr|ftblk|ftfile|ftdir|ftpipe
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣|ftsuid|ftsgid|ftsvtx|ftlink|fttty|fttext|ftbinary|chdir
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣|chown|chroot|unlink|chmod|utime|rename|link|symlink
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣|readlink|mkdir|rmdir|open_dir|telldir|seekdir|rewinddir
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣|closedir|fork|wait|waitpid|system|exec|kill|getppid
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣|getpgrp|setpgrp|getpriority|setpriority|time|alarm|sleep
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣|shmget|shmctl|shmread|shmwrite|msgget|msgctl|msgsnd
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣|msgrcv|semop|semget|semctl|hintseval|shostent|snetent
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣|sprotoent|sservent|ehostent|enetent|eprotoent|eservent
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣|spwent|epwent|sgrent|egrent|getlogin|syscall|lock|runcv
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣|fc)\z/x
}

sub␣pp_entersub␣{
----------
Range: (3668466,3671394) (2928)
=head1␣NAME

B::Op_private␣-␣OP␣op_private␣flag␣definitions

=head1␣SYNOPSIS

␣␣␣␣use␣B::Op_private;

␣␣␣␣#␣flag␣details␣for␣bit␣7␣of␣OP_AELEM's␣op_private:
␣␣␣␣my␣$name␣␣=␣$B::Op_private::bits{aelem}{7};␣#␣OPpLVAL_INTRO
␣␣␣␣my␣$value␣=␣$B::Op_private::defines{$name};␣#␣128
␣␣␣␣my␣$label␣=␣$B::Op_private::labels{$name};␣␣#␣LVINTRO

␣␣␣␣#␣the␣bit␣field␣at␣bits␣5..6␣of␣OP_AELEM's␣op_private:
␣␣␣␣my␣$bf␣␣=␣$B::Op_private::bits{aelem}{6};
␣␣␣␣my␣$mask␣=␣$bf->{bitmask};␣#␣etc

=head1␣DESCRIPTION

This␣module␣provides␣four␣global␣hashes:

␣␣␣␣%B::Op_private::bits
␣␣␣␣%B::Op_private::defines
␣␣␣␣%B::Op_private::labels
␣␣␣␣%B::Op_private::ops_using

which␣contain␣information␣about␣the␣per-op␣meanings␣of␣the␣bits␣in␣the
op_private␣field.

=head2␣C<%bits>

This␣is␣indexed␣by␣op␣name␣and␣then␣bit␣number␣(0..7).␣For␣single␣bit␣flags,
it␣returns␣the␣name␣of␣the␣define␣(if␣any)␣for␣that␣bit:

␣␣␣$B::Op_private::bits{aelem}{7}␣eq␣'OPpLVAL_INTRO';

For␣bit␣fields,␣it␣returns␣a␣hash␣ref␣containing␣details␣about␣the␣field.
The␣same␣reference␣will␣be␣returned␣for␣all␣bit␣positions␣that␣make
up␣the␣bit␣field;␣so␣for␣example␣these␣both␣return␣the␣same␣hash␣ref:

␣␣␣␣$bitfield␣=␣$B::Op_private::bits{aelem}{5};
␣␣␣␣$bitfield␣=␣$B::Op_private::bits{aelem}{6};

The␣general␣format␣of␣this␣hash␣ref␣is

␣␣␣␣{
␣␣␣␣␣␣␣␣#␣The␣bit␣range␣and␣mask;␣these␣are␣always␣present.
␣␣␣␣␣␣␣␣bitmin␣␣␣␣␣␣␣␣=>␣5,
␣␣␣␣␣␣␣␣bitmax␣␣␣␣␣␣␣␣=>␣6,
␣␣␣␣␣␣␣␣bitmask␣␣␣␣␣␣␣=>␣0x60,

␣␣␣␣␣␣␣␣#␣(The␣remaining␣keys␣are␣optional)

␣␣␣␣␣␣␣␣#␣The␣names␣of␣any␣defines␣that␣were␣requested:
␣␣␣␣␣␣␣␣mask_def␣␣␣␣␣␣=>␣'OPpFOO_MASK',
␣␣␣␣␣␣␣␣baseshift_def␣=>␣'OPpFOO_SHIFT',
␣␣␣␣␣␣␣␣bitcount_def␣␣=>␣'OPpFOO_BITS',

␣␣␣␣␣␣␣␣#␣If␣present,␣Concise␣etc␣will␣display␣the␣value␣with␣a␣'FOO='
␣␣␣␣␣␣␣␣#␣prefix.␣If␣it␣equals␣'-',␣then␣Concise␣will␣treat␣the␣bit
␣␣␣␣␣␣␣␣#␣field␣as␣raw␣bits␣and␣not␣try␣to␣interpret␣it.
␣␣␣␣␣␣␣␣label␣␣␣␣␣␣␣␣␣=>␣'FOO',

␣␣␣␣␣␣␣␣#␣If␣present,␣specifies␣the␣names␣of␣some␣defines␣and␣the
␣␣␣␣␣␣␣␣#␣display␣labels␣that␣are␣used␣to␣assign␣meaning␣to␣particu-
␣␣␣␣␣␣␣␣#␣lar␣integer␣values␣within␣the␣bit␣field;␣e.g.␣3␣is␣dis-
␣␣␣␣␣␣␣␣#␣played␣as␣'C'.
␣␣␣␣␣␣␣␣enum␣␣␣␣␣␣␣␣␣␣=>␣[␣qw(
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣1␣␣␣OPpFOO_A␣␣A
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣2␣␣␣OPpFOO_B␣␣B
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣3␣␣␣OPpFOO_C␣␣C
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣)],

␣␣␣␣};


=head2␣C<%defines>

This␣gives␣the␣value␣of␣every␣C<OPp>␣define,␣e.g.

␣␣␣␣$B::Op_private::defines{OPpLVAL_INTRO}␣==␣128;

=head2␣C<%labels>

This␣gives␣the␣short␣display␣label␣for␣each␣define,␣as␣used␣by␣C<B::Concise>
and␣C<perl␣-Dx>,␣e.g.

␣␣␣␣$B::Op_private::labels{OPpLVAL_INTRO}␣eq␣'LVINTRO';

If␣the␣label␣equals␣'-',␣then␣Concise␣will␣treat␣the␣bit␣as␣a␣raw␣bit␣and
not␣try␣to␣display␣it␣symbolically.

=head2␣C<%ops_using>

For␣each␣define,␣this␣gives␣a␣reference␣to␣an␣array␣of␣op␣names␣that␣use
the␣flag.

␣␣␣␣@ops_using_lvintro␣=␣@{␣$B::Op_private::ops_using{OPp_LVAL_INTRO}␣};

=cut
----------
Range: (3760655,3763735) (3080)
=head1␣NAME

integer␣-␣Perl␣pragma␣to␣use␣integer␣arithmetic␣instead␣of␣floating␣point

=head1␣SYNOPSIS

␣␣␣␣use␣integer;
␣␣␣␣$x␣=␣10/3;
␣␣␣␣#␣$x␣is␣now␣3,␣not␣3.33333333333333333

=head1␣DESCRIPTION

This␣tells␣the␣compiler␣to␣use␣integer␣operations␣from␣here␣to␣the␣end
of␣the␣enclosing␣BLOCK.␣␣On␣many␣machines,␣this␣doesn't␣matter␣a␣great
deal␣for␣most␣computations,␣but␣on␣those␣without␣floating␣point
hardware,␣it␣can␣make␣a␣big␣difference␣in␣performance.

Note␣that␣this␣only␣affects␣how␣most␣of␣the␣arithmetic␣and␣relational
B<operators>␣handle␣their␣operands␣and␣results,␣and␣B<not>␣how␣all
numbers␣everywhere␣are␣treated.␣␣Specifically,␣C<use␣integer;>␣has␣the
effect␣that␣before␣computing␣the␣results␣of␣the␣arithmetic␣operators
(+,␣-,␣*,␣/,␣%,␣+=,␣-=,␣*=,␣/=,␣%=,␣and␣unary␣minus),␣the␣comparison
operators␣(<,␣<=,␣>,␣>=,␣==,␣!=,␣<=>),␣and␣the␣bitwise␣operators␣(|,␣&,
^,␣<<,␣>>,␣|=,␣&=,␣^=,␣<<=,␣>>=),␣the␣operands␣have␣their␣fractional
portions␣truncated␣(or␣floored),␣and␣the␣result␣will␣have␣its
fractional␣portion␣truncated␣as␣well.␣␣In␣addition,␣the␣range␣of
operands␣and␣results␣is␣restricted␣to␣that␣of␣familiar␣two's␣complement
integers,␣i.e.,␣-(2**31)␣..␣(2**31-1)␣on␣32-bit␣architectures,␣and
-(2**63)␣..␣(2**63-1)␣on␣64-bit␣architectures.␣␣For␣example,␣this␣code

␣␣␣␣use␣integer;
␣␣␣␣$x␣=␣5.8;
␣␣␣␣$y␣=␣2.5;
␣␣␣␣$z␣=␣2.7;
␣␣␣␣$a␣=␣2**31␣-␣1;␣␣#␣Largest␣positive␣integer␣on␣32-bit␣machines
␣␣␣␣$,␣=␣",␣";
␣␣␣␣print␣$x,␣-$x,␣$x+$y,␣$x-$y,␣$x/$y,␣$x*$y,␣$y==$z,␣$a,␣$a+1;

will␣print:␣␣5.8,␣-5,␣7,␣3,␣2,␣10,␣1,␣2147483647,␣-2147483648

Note␣that␣$x␣is␣still␣printed␣as␣having␣its␣true␣non-integer␣value␣of
5.8␣since␣it␣wasn't␣operated␣on.␣␣And␣note␣too␣the␣wrap-around␣from␣the
largest␣positive␣integer␣to␣the␣largest␣negative␣one.␣␣␣Also,␣arguments
passed␣to␣functions␣and␣the␣values␣returned␣by␣them␣are␣B<not>␣affected
by␣C<use␣integer;>.␣␣E.g.,

␣␣␣␣srand(1.5);
␣␣␣␣$,␣=␣",␣";
␣␣␣␣print␣sin(.5),␣cos(.5),␣atan2(1,2),␣sqrt(2),␣rand(10);

will␣give␣the␣same␣result␣with␣or␣without␣C<use␣integer;>␣␣The␣power
operator␣C<**>␣is␣also␣not␣affected,␣so␣that␣2␣**␣.5␣is␣always␣the
square␣root␣of␣2.␣␣Now,␣it␣so␣happens␣that␣the␣pre-␣and␣post-␣increment
and␣decrement␣operators,␣++␣and␣--,␣are␣not␣affected␣by␣C<use␣integer;>
either.␣␣Some␣may␣rightly␣consider␣this␣to␣be␣a␣bug␣--␣but␣at␣least␣it's
a␣long-standing␣one.

Finally,␣C<use␣integer;>␣also␣has␣an␣additional␣affect␣on␣the␣bitwise
operators.␣␣Normally,␣the␣operands␣and␣results␣are␣treated␣as
B<unsigned>␣integers,␣but␣with␣C<use␣integer;>␣the␣operands␣and␣results
are␣B<signed>.␣␣This␣means,␣among␣other␣things,␣that␣~0␣is␣-1,␣and␣-2␣&
-5␣is␣-6.

Internally,␣native␣integer␣arithmetic␣(as␣provided␣by␣your␣C␣compiler)
is␣used.␣␣This␣means␣that␣Perl's␣own␣semantics␣for␣arithmetic
operations␣may␣not␣be␣preserved.␣␣One␣common␣source␣of␣trouble␣is␣the
modulus␣of␣negative␣numbers,␣which␣Perl␣does␣one␣way,␣but␣your␣hardware
may␣do␣another.

␣␣␣␣%␣perl␣-le␣'print␣(4␣%␣-3)'
␣␣␣␣-2
␣␣␣␣%␣perl␣-Minteger␣-le␣'print␣(4␣%␣-3)'
␣␣␣␣1

See␣L<perlmodlib/"Pragmatic␣Modules">,␣L<perlop/"Integer␣Arithmetic">

=cut
----------
Range: (3804031,3814369) (10338)
=head1␣NAME

autodie::hints␣-␣Provide␣hints␣about␣user␣subroutines␣to␣autodie

=head1␣SYNOPSIS

␣␣␣␣package␣Your::Module;

␣␣␣␣our␣%DOES␣=␣(␣'autodie::hints::provider'␣=>␣1␣);

␣␣␣␣sub␣AUTODIE_HINTS␣{
␣␣␣␣␣␣␣␣return␣{
␣␣␣␣␣␣␣␣␣␣␣␣foo␣=>␣{␣scalar␣=>␣HINTS,␣list␣=>␣SOME_HINTS␣},
␣␣␣␣␣␣␣␣␣␣␣␣bar␣=>␣{␣scalar␣=>␣HINTS,␣list␣=>␣MORE_HINTS␣},
␣␣␣␣␣␣␣␣}
␣␣␣␣}

␣␣␣␣#␣Later,␣in␣your␣main␣program...

␣␣␣␣use␣Your::Module␣qw(foo␣bar);
␣␣␣␣use␣autodie␣␣␣␣␣␣qw(:default␣foo␣bar);

␣␣␣␣foo();␣␣␣␣␣␣␣␣␣#␣succeeds␣or␣dies␣based␣on␣scalar␣hints

␣␣␣␣#␣Alternatively,␣hints␣can␣be␣set␣on␣subroutines␣we've
␣␣␣␣#␣imported.

␣␣␣␣use␣autodie::hints;
␣␣␣␣use␣Some::Module␣qw(think_positive);

␣␣␣␣BEGIN␣{
␣␣␣␣␣␣␣␣autodie::hints->set_hints_for(
␣␣␣␣␣␣␣␣␣␣␣␣\&think_positive,
␣␣␣␣␣␣␣␣␣␣␣␣{
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣fail␣=>␣sub␣{␣$_[0]␣<=␣0␣}
␣␣␣␣␣␣␣␣␣␣␣␣}
␣␣␣␣␣␣␣␣)
␣␣␣␣}
␣␣␣␣use␣autodie␣qw(think_positive);

␣␣␣␣think_positive(...);␣␣␣␣#␣Returns␣positive␣or␣dies.


=head1␣DESCRIPTION

=head2␣Introduction

The␣L<autodie>␣pragma␣is␣very␣smart␣when␣it␣comes␣to␣working␣with
Perl's␣built-in␣functions.␣␣The␣behaviour␣for␣these␣functions␣are
fixed,␣and␣C<autodie>␣knows␣exactly␣how␣they␣try␣to␣signal␣failure.

But␣what␣about␣user-defined␣subroutines␣from␣modules?␣␣If␣you␣use
C<autodie>␣on␣a␣user-defined␣subroutine␣then␣it␣assumes␣the␣following
behaviour␣to␣demonstrate␣failure:

=over

=item␣*

A␣false␣value,␣in␣scalar␣context

=item␣*␣

An␣empty␣list,␣in␣list␣context

=item␣*

A␣list␣containing␣a␣single␣undef,␣in␣list␣context

=back

All␣other␣return␣values␣(including␣the␣list␣of␣the␣single␣zero,␣and␣the
list␣containing␣a␣single␣empty␣string)␣are␣considered␣successful.␣␣However,
real-world␣code␣isn't␣always␣that␣easy.␣␣Perhaps␣the␣code␣you're␣working
with␣returns␣a␣string␣containing␣the␣word␣"FAIL"␣upon␣failure,␣or␣a
two␣element␣list␣containing␣C<(undef,␣"human␣error␣message")>.␣␣To␣make
autodie␣work␣with␣these␣sorts␣of␣subroutines,␣we␣have
the␣I<hinting␣interface>.

The␣hinting␣interface␣allows␣I<hints>␣to␣be␣provided␣to␣C<autodie>
on␣how␣it␣should␣detect␣failure␣from␣user-defined␣subroutines.␣␣While
these␣I<can>␣be␣provided␣by␣the␣end-user␣of␣C<autodie>,␣they␣are␣ideally
written␣into␣the␣module␣itself,␣or␣into␣a␣helper␣module␣or␣sub-class
of␣C<autodie>␣itself.

=head2␣What␣are␣hints?

A␣I<hint>␣is␣a␣subroutine␣or␣value␣that␣is␣checked␣against␣the
return␣value␣of␣an␣autodying␣subroutine.␣␣If␣the␣match␣returns␣true,
C<autodie>␣considers␣the␣subroutine␣to␣have␣failed.

If␣the␣hint␣provided␣is␣a␣subroutine,␣then␣C<autodie>␣will␣pass
the␣complete␣return␣value␣to␣that␣subroutine.␣␣If␣the␣hint␣is
any␣other␣value,␣then␣C<autodie>␣will␣smart-match␣against␣the
value␣provided.␣␣In␣Perl␣5.8.x␣there␣is␣no␣smart-match␣operator,␣and␣as␣such
only␣subroutine␣hints␣are␣supported␣in␣these␣versions.

Hints␣can␣be␣provided␣for␣both␣scalar␣and␣list␣contexts.␣␣Note
that␣an␣autodying␣subroutine␣will␣never␣see␣a␣void␣context,␣as
C<autodie>␣always␣needs␣to␣capture␣the␣return␣value␣for␣examination.
Autodying␣subroutines␣called␣in␣void␣context␣act␣as␣if␣they're␣called
in␣a␣scalar␣context,␣but␣their␣return␣value␣is␣discarded␣after␣it
has␣been␣checked.

=head2␣Example␣hints

Hints␣may␣consist␣of␣subroutine␣references,␣objects␣overloading
smart-match,␣regular␣expressions,␣and␣depending␣on␣Perl␣version␣possibly
other␣things.␣␣You␣can␣specify␣different␣hints␣for␣how
failure␣should␣be␣identified␣in␣scalar␣and␣list␣contexts.

These␣examples␣apply␣for␣use␣in␣the␣C<AUTODIE_HINTS>␣subroutine␣and␣when
calling␣C<<␣autodie::hints->set_hints_for()␣>>.

The␣most␣common␣context-specific␣hints␣are:

␣␣␣␣␣␣␣␣#␣Scalar␣failures␣always␣return␣undef:
␣␣␣␣␣␣␣␣␣␣␣␣{␣␣scalar␣=>␣sub␣{␣!defined($_[0])␣}␣␣}

␣␣␣␣␣␣␣␣#␣Scalar␣failures␣return␣any␣false␣value␣[default␣expectation]:
␣␣␣␣␣␣␣␣␣␣␣␣{␣␣scalar␣=>␣sub␣{␣!␣$_[0]␣}␣␣}

␣␣␣␣␣␣␣␣#␣Scalar␣failures␣always␣return␣zero␣explicitly:
␣␣␣␣␣␣␣␣␣␣␣␣{␣␣scalar␣=>␣sub␣{␣defined($_[0])␣&&␣$_[0]␣eq␣'0'␣}␣␣}

␣␣␣␣␣␣␣␣#␣List␣failures␣always␣return␣an␣empty␣list:
␣␣␣␣␣␣␣␣␣␣␣␣{␣␣list␣=>␣sub␣{␣!@_␣}␣␣}

␣␣␣␣␣␣␣␣#␣List␣failures␣return␣()␣or␣(undef)␣[default␣expectation]:
␣␣␣␣␣␣␣␣␣␣␣␣{␣␣list␣=>␣sub␣{␣!␣@_␣||␣@_␣==␣1␣&&␣!defined␣$_[0]␣}␣␣}

␣␣␣␣␣␣␣␣#␣List␣failures␣return␣()␣or␣a␣single␣false␣value:
␣␣␣␣␣␣␣␣␣␣␣␣{␣␣list␣=>␣sub␣{␣!␣@_␣||␣@_␣==␣1␣&&␣!$_[0]␣}␣␣}

␣␣␣␣␣␣␣␣#␣List␣failures␣return␣(undef,␣"some␣string")
␣␣␣␣␣␣␣␣␣␣␣␣{␣␣list␣=>␣sub␣{␣@_␣==␣2␣&&␣!defined␣$_[0]␣}␣␣}

␣␣␣␣␣␣␣␣#␣Unsuccessful␣foo()␣returns␣'FAIL'␣or␣'_FAIL'␣in␣scalar␣context,
␣␣␣␣␣␣␣␣#␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣returns␣(-1)␣in␣list␣context...
␣␣␣␣␣␣␣␣autodie::hints->set_hints_for(
␣␣␣␣␣␣␣␣␣␣␣␣\&foo,
␣␣␣␣␣␣␣␣␣␣␣␣{
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣scalar␣=>␣qr/^␣_?␣FAIL␣$/xms,
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣list␣␣␣=>␣sub␣{␣@_␣==␣1␣&&␣$_[0]␣eq␣-1␣},
␣␣␣␣␣␣␣␣␣␣␣␣}
␣␣␣␣␣␣␣␣);

␣␣␣␣␣␣␣␣#␣Unsuccessful␣foo()␣returns␣0␣in␣all␣contexts...
␣␣␣␣␣␣␣␣autodie::hints->set_hints_for(
␣␣␣␣␣␣␣␣␣␣␣␣\&foo,
␣␣␣␣␣␣␣␣␣␣␣␣{
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣scalar␣=>␣sub␣{␣defined($_[0])␣&&␣$_[0]␣==␣0␣},
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣list␣␣␣=>␣sub␣{␣@_␣==␣1␣&&␣defined($_[0])␣&&␣$_[0]␣==␣0␣},
␣␣␣␣␣␣␣␣␣␣␣␣}
␣␣␣␣␣␣␣␣);

This␣"in␣all␣contexts"␣construction␣is␣very␣common,␣and␣can␣be
abbreviated,␣using␣the␣'fail'␣key.␣␣This␣sets␣both␣the␣C<scalar>
and␣C<list>␣hints␣to␣the␣same␣value:

␣␣␣␣␣␣␣␣#␣Unsuccessful␣foo()␣returns␣0␣in␣all␣contexts...
␣␣␣␣␣␣␣␣autodie::hints->set_hints_for(
␣␣␣␣␣␣␣␣␣␣␣␣\&foo,
␣␣␣␣␣␣␣␣␣␣␣␣{
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣fail␣=>␣sub␣{␣@_␣==␣1␣and␣defined␣$_[0]␣and␣$_[0]␣==␣0␣}
␣␣␣␣␣␣␣␣␣␣␣␣}
	);

␣␣␣␣␣␣␣␣#␣Unsuccessful␣think_positive()␣returns␣negative␣number␣on␣failure...
␣␣␣␣␣␣␣␣autodie::hints->set_hints_for(
␣␣␣␣␣␣␣␣␣␣␣␣\&think_positive,
␣␣␣␣␣␣␣␣␣␣␣␣{
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣fail␣=>␣sub␣{␣$_[0]␣<␣0␣}
␣␣␣␣␣␣␣␣␣␣␣␣}
	);

␣␣␣␣␣␣␣␣#␣Unsuccessful␣my_system()␣returns␣non-zero␣on␣failure...
␣␣␣␣␣␣␣␣autodie::hints->set_hints_for(
␣␣␣␣␣␣␣␣␣␣␣␣\&my_system,
␣␣␣␣␣␣␣␣␣␣␣␣{
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣fail␣=>␣sub␣{␣$_[0]␣!=␣0␣}
␣␣␣␣␣␣␣␣␣␣␣␣}
	);

=head1␣Manually␣setting␣hints␣from␣within␣your␣program

If␣you␣are␣using␣a␣module␣which␣returns␣something␣special␣on␣failure,␣then
you␣can␣manually␣create␣hints␣for␣each␣of␣the␣desired␣subroutines.␣␣Once
the␣hints␣are␣specified,␣they␣are␣available␣for␣all␣files␣and␣modules␣loaded
thereafter,␣thus␣you␣can␣move␣this␣work␣into␣a␣module␣and␣it␣will␣still
work.

	use␣Some::Module␣qw(foo␣bar);
	use␣autodie::hints;

	autodie::hints->set_hints_for(
		\&foo,
		{
			scalar␣=>␣SCALAR_HINT,
			list␣␣␣=>␣LIST_HINT,
		}
	);
	autodie::hints->set_hints_for(
		\&bar,
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣{␣fail␣=>␣SOME_HINT,␣}
	);

It␣is␣possible␣to␣pass␣either␣a␣subroutine␣reference␣(recommended)␣or␣a␣fully
qualified␣subroutine␣name␣as␣the␣first␣argument.␣␣This␣means␣you␣can␣set␣hints
on␣modules␣that␣I<might>␣get␣loaded:

	use␣autodie::hints;
	autodie::hints->set_hints_for(
		'Some::Module:bar',␣{␣fail␣=>␣SCALAR_HINT,␣}
	);

This␣technique␣is␣most␣useful␣when␣you␣have␣a␣project␣that␣uses␣a
lot␣of␣third-party␣modules.␣␣You␣can␣define␣all␣your␣possible␣hints
in␣one-place.␣␣This␣can␣even␣be␣in␣a␣sub-class␣of␣autodie.␣␣For
example:

␣␣␣␣␣␣␣␣package␣my::autodie;

␣␣␣␣␣␣␣␣use␣parent␣qw(autodie);
␣␣␣␣␣␣␣␣use␣autodie::hints;

␣␣␣␣␣␣␣␣autodie::hints->set_hints_for(...);

␣␣␣␣␣␣␣␣1;

You␣can␣now␣C<use␣my::autodie>,␣which␣will␣work␣just␣like␣the␣standard
C<autodie>,␣but␣is␣now␣aware␣of␣any␣hints␣that␣you've␣set.

=head1␣Adding␣hints␣to␣your␣module

C<autodie>␣provides␣a␣passive␣interface␣to␣allow␣you␣to␣declare␣hints␣for
your␣module.␣␣These␣hints␣will␣be␣found␣and␣used␣by␣C<autodie>␣if␣it
is␣loaded,␣but␣otherwise␣have␣no␣effect␣(or␣dependencies)␣without␣autodie.
To␣set␣these,␣your␣module␣needs␣to␣declare␣that␣it␣I<does>␣the
C<autodie::hints::provider>␣role.␣␣This␣can␣be␣done␣by␣writing␣your
own␣C<DOES>␣method,␣using␣a␣system␣such␣as␣C<Class::DOES>␣to␣handle
the␣heavy-lifting␣for␣you,␣or␣declaring␣a␣C<%DOES>␣package␣variable
with␣a␣C<autodie::hints::provider>␣key␣and␣a␣corresponding␣true␣value.

Note␣that␣checking␣for␣a␣C<%DOES>␣hash␣is␣an␣C<autodie>-only
short-cut.␣␣Other␣modules␣do␣not␣use␣this␣mechanism␣for␣checking
roles,␣although␣you␣can␣use␣the␣C<Class::DOES>␣module␣from␣the
CPAN␣to␣allow␣it.

In␣addition,␣you␣must␣define␣a␣C<AUTODIE_HINTS>␣subroutine␣that␣returns
a␣hash-reference␣containing␣the␣hints␣for␣your␣subroutines:

␣␣␣␣␣␣␣␣package␣Your::Module;

␣␣␣␣␣␣␣␣#␣We␣can␣use␣the␣Class::DOES␣from␣the␣CPAN␣to␣declare␣adherence
␣␣␣␣␣␣␣␣#␣to␣a␣role.

␣␣␣␣␣␣␣␣use␣Class::DOES␣'autodie::hints::provider'␣=>␣1;

␣␣␣␣␣␣␣␣#␣Alternatively,␣we␣can␣declare␣the␣role␣in␣%DOES.␣␣Note␣that
␣␣␣␣␣␣␣␣#␣this␣is␣an␣autodie␣specific␣optimisation,␣although␣Class::DOES
␣␣␣␣␣␣␣␣#␣can␣be␣used␣to␣promote␣this␣to␣a␣true␣role␣declaration.

␣␣␣␣␣␣␣␣our␣%DOES␣=␣(␣'autodie::hints::provider'␣=>␣1␣);

␣␣␣␣␣␣␣␣#␣Finally,␣we␣must␣define␣the␣hints␣themselves.

	sub␣AUTODIE_HINTS␣{
	␣␣␣␣return␣{
	␣␣␣␣␣␣␣␣foo␣=>␣{␣scalar␣=>␣HINTS,␣list␣=>␣SOME_HINTS␣},
	␣␣␣␣␣␣␣␣bar␣=>␣{␣scalar␣=>␣HINTS,␣list␣=>␣MORE_HINTS␣},
	␣␣␣␣␣␣␣␣baz␣=>␣{␣fail␣=>␣HINTS␣},
	␣␣␣␣}
	}

This␣allows␣your␣code␣to␣set␣hints␣without␣relying␣on␣C<autodie>␣and
C<autodie::hints>␣being␣loaded,␣or␣even␣installed.␣␣In␣this␣way␣your
code␣can␣do␣the␣right␣thing␣when␣C<autodie>␣is␣installed,␣but␣does␣not
need␣to␣depend␣upon␣it␣to␣function.

=head1␣Insisting␣on␣hints

When␣a␣user-defined␣subroutine␣is␣wrapped␣by␣C<autodie>,␣it␣will
use␣hints␣if␣they␣are␣available,␣and␣otherwise␣reverts␣to␣the
I<default␣behaviour>␣described␣in␣the␣introduction␣of␣this␣document.
This␣can␣be␣problematic␣if␣we␣expect␣a␣hint␣to␣exist,␣but␣(for
whatever␣reason)␣it␣has␣not␣been␣loaded.

We␣can␣ask␣autodie␣to␣I<insist>␣that␣a␣hint␣be␣used␣by␣prefixing
an␣exclamation␣mark␣to␣the␣start␣of␣the␣subroutine␣name.␣␣A␣lone
exclamation␣mark␣indicates␣that␣I<all>␣subroutines␣after␣it␣must
have␣hints␣declared.

	#␣foo()␣and␣bar()␣must␣have␣their␣hints␣defined
	use␣autodie␣qw(␣!foo␣!bar␣baz␣);

	#␣Everything␣must␣have␣hints␣(recommended).
	use␣autodie␣qw(␣!␣foo␣bar␣baz␣);

	#␣bar()␣and␣baz()␣must␣have␣their␣hints␣defined
	use␣autodie␣qw(␣foo␣!␣bar␣baz␣);

␣␣␣␣␣␣␣␣#␣Enable␣autodie␣for␣all␣of␣Perl's␣supported␣built-ins,
␣␣␣␣␣␣␣␣#␣as␣well␣as␣for␣foo(),␣bar()␣and␣baz().␣␣Everything␣must
␣␣␣␣␣␣␣␣#␣have␣hints.
␣␣␣␣␣␣␣␣use␣autodie␣qw(␣!␣:all␣foo␣bar␣baz␣);

If␣hints␣are␣not␣available␣for␣the␣specified␣subroutines,␣this␣will␣cause␣a
compile-time␣error.␣␣Insisting␣on␣hints␣for␣Perl's␣built-in␣functions
(eg,␣C<open>␣and␣C<close>)␣is␣always␣successful.

Insisting␣on␣hints␣is␣I<strongly>␣recommended.

=cut
----------
Range: (3863864,3867376) (3512)
=head1␣SYNOPSIS

␣␣␣␣use␣TAP::Parser::Scheduler;

=head1␣DESCRIPTION

=head1␣METHODS

=head2␣Class␣Methods

=head3␣C<new>

␣␣␣␣my␣$sched␣=␣TAP::Parser::Scheduler->new(tests␣=>␣\@tests);
␣␣␣␣my␣$sched␣=␣TAP::Parser::Scheduler->new(
␣␣␣␣␣␣␣␣tests␣=>␣[␣['t/test_name.t','Test␣Description'],␣...␣],
␣␣␣␣␣␣␣␣rules␣=>␣\%rules,
␣␣␣␣);

Given␣'tests'␣and␣optional␣'rules'␣as␣input,␣returns␣a␣new
C<TAP::Parser::Scheduler>␣object.␣␣Each␣member␣of␣C<@tests>␣should␣be␣either␣a
a␣test␣file␣name,␣or␣a␣two␣element␣arrayref,␣where␣the␣first␣element␣is␣a␣test
file␣name,␣and␣the␣second␣element␣is␣a␣test␣description.␣By␣default,␣we'll␣use
the␣test␣name␣as␣the␣description.

The␣optional␣C<rules>␣attribute␣provides␣direction␣on␣which␣tests␣should␣be␣run
in␣parallel␣and␣which␣should␣be␣run␣sequentially.␣If␣no␣rule␣data␣structure␣is
provided,␣a␣default␣data␣structure␣is␣used␣which␣makes␣every␣test␣eligible␣to
be␣run␣in␣parallel:

␣␣␣␣{␣par␣=>␣'**'␣},

The␣rules␣data␣structure␣is␣documented␣more␣in␣the␣next␣section.

=head2␣Rules␣data␣structure

The␣"C<rules>"␣data␣structure␣is␣the␣the␣heart␣of␣the␣scheduler.␣It␣allows␣you
to␣express␣simple␣rules␣like␣"run␣all␣tests␣in␣sequence"␣or␣"run␣all␣tests␣in
parallel␣except␣these␣five␣tests.".␣However,␣the␣rules␣structure␣also␣supports
glob-style␣pattern␣matching␣and␣recursive␣definitions,␣so␣you␣can␣also␣express
arbitarily␣complicated␣patterns.

The␣rule␣must␣only␣have␣one␣top␣level␣key:␣either␣'par'␣for␣"parallel"␣or␣'seq'
for␣"sequence".

Values␣must␣be␣either␣strings␣with␣possible␣glob-style␣matching,␣or␣arrayrefs
of␣strings␣or␣hashrefs␣which␣follow␣this␣pattern␣recursively.

Every␣element␣in␣an␣arrayref␣directly␣below␣a␣'par'␣key␣is␣eligible␣to␣be␣run
in␣parallel,␣while␣vavalues␣directly␣below␣a␣'seq'␣key␣must␣be␣run␣in␣sequence.

=head3␣Rules␣examples

Here␣are␣some␣examples:

␣␣␣␣#␣All␣tests␣be␣run␣in␣parallel␣(the␣default␣rule)
␣␣␣␣{␣par␣=>␣'**'␣},

␣␣␣␣#␣Run␣all␣tests␣in␣sequence,␣except␣those␣starting␣with␣"p"
␣␣␣␣{␣par␣=>␣'t/p*.t'␣},

␣␣␣␣#␣Run␣all␣tests␣in␣parallel,␣except␣those␣starting␣with␣"p"
␣␣␣␣{
␣␣␣␣␣␣␣␣seq␣=>␣[
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣{␣seq␣=>␣'t/p*.t'␣},
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣{␣par␣=>␣'**'␣␣␣␣␣},
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣],
␣␣␣␣}

␣␣␣␣#␣Run␣some␣␣startup␣tests␣in␣sequence,␣then␣some␣parallel␣tests␣then␣some
␣␣␣␣#␣teardown␣tests␣in␣sequence.
␣␣␣␣{
␣␣␣␣␣␣␣␣seq␣=>␣[
␣␣␣␣␣␣␣␣␣␣␣␣{␣seq␣=>␣'t/startup/*.t'␣},
␣␣␣␣␣␣␣␣␣␣␣␣{␣par␣=>␣['t/a/*.t','t/b/*.t','t/c/*.t'],␣}
␣␣␣␣␣␣␣␣␣␣␣␣{␣seq␣=>␣'t/shutdown/*.t'␣},
␣␣␣␣␣␣␣␣],
␣␣␣␣},


=head3␣Rules␣resolution

=over␣4

=item␣*␣By␣default,␣all␣tests␣are␣eligible␣to␣be␣run␣in␣parallel.␣Specifying␣any␣of␣your␣own␣rules␣removes␣this␣one.

=item␣*␣"First␣match␣wins".␣The␣first␣rule␣that␣matches␣a␣test␣will␣be␣the␣one␣that␣applies.

=item␣*␣Any␣test␣which␣does␣not␣match␣a␣rule␣will␣be␣run␣in␣sequence␣at␣the␣end␣of␣the␣run.

=item␣*␣The␣existence␣of␣a␣rule␣does␣not␣imply␣selecting␣a␣test.␣You␣must␣still␣specify␣the␣tests␣to␣run.

=item␣*␣Specifying␣a␣rule␣to␣allow␣tests␣to␣run␣in␣parallel␣does␣not␣make␣the␣run␣in␣parallel.␣You␣still␣need␣specify␣the␣number␣of␣parallel␣C<jobs>␣in␣your␣Harness␣object.

=back

=head3␣Glob-style␣pattern␣matching␣for␣rules

We␣implement␣our␣own␣glob-style␣pattern␣matching.␣Here␣are␣the␣patterns␣it␣supports:

␣␣␣␣**␣is␣any␣number␣of␣characters,␣including␣/,␣within␣a␣pathname
␣␣␣␣*␣is␣zero␣or␣more␣characters␣within␣a␣filename/directory␣name
␣␣␣␣?␣is␣exactly␣one␣character␣within␣a␣filename/directory␣name
␣␣␣␣{foo,bar,baz}␣is␣any␣of␣foo,␣bar␣or␣baz.
␣␣␣␣\␣is␣an␣escape␣character

=cut
----------
Range: (3911086,3913637) (2551)
=head1␣TAP␣GRAMMAR

B<NOTE:>␣␣This␣grammar␣is␣slightly␣out␣of␣date.␣␣There's␣still␣some␣discussion
about␣it␣and␣a␣new␣one␣will␣be␣provided␣when␣we␣have␣things␣better␣defined.

The␣L<TAP::Parser>␣does␣not␣use␣a␣formal␣grammar␣because␣TAP␣is␣essentially␣a
stream-based␣protocol.␣␣In␣fact,␣it's␣quite␣legal␣to␣have␣an␣infinite␣stream.
For␣the␣same␣reason␣that␣we␣don't␣apply␣regexes␣to␣streams,␣we're␣not␣using␣a
formal␣grammar␣here.␣␣Instead,␣we␣parse␣the␣TAP␣in␣lines.

For␣purposes␣for␣forward␣compatibility,␣any␣result␣which␣does␣not␣match␣the
following␣grammar␣is␣currently␣referred␣to␣as
L<TAP::Parser::Result::Unknown>.␣␣It␣is␣I<not>␣a␣parse␣error.

A␣formal␣grammar␣would␣look␣similar␣to␣the␣following:

␣(*
␣␣␣␣␣For␣the␣time␣being,␣I'm␣cheating␣on␣the␣EBNF␣by␣allowing
␣␣␣␣␣certain␣terms␣to␣be␣defined␣by␣POSIX␣character␣classes␣by
␣␣␣␣␣using␣the␣following␣syntax:

␣␣␣␣␣␣␣digit␣::=␣[:digit:]

␣␣␣␣␣As␣far␣as␣I␣am␣aware,␣that's␣not␣valid␣EBNF.␣␣Sue␣me.␣␣I
␣␣␣␣␣didn't␣know␣how␣to␣write␣"char"␣otherwise␣(Unicode␣issues).
␣␣␣␣␣Suggestions␣welcome.
␣*)

␣tap␣␣␣␣␣␣␣␣␣␣␣␣::=␣version?␣{␣comment␣|␣unknown␣}␣leading_plan␣lines
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣|
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣lines␣trailing_plan␣{comment}

␣version␣␣␣␣␣␣␣␣::=␣'TAP␣version␣'␣positiveInteger␣{positiveInteger}␣"\n"

␣leading_plan␣␣␣::=␣plan␣skip_directive?␣"\n"

␣trailing_plan␣␣::=␣plan␣"\n"

␣plan␣␣␣␣␣␣␣␣␣␣␣::=␣'1..'␣nonNegativeInteger

␣lines␣␣␣␣␣␣␣␣␣␣::=␣line␣{line}

␣line␣␣␣␣␣␣␣␣␣␣␣::=␣(comment␣|␣test␣|␣unknown␣|␣bailout␣)␣"\n"

␣test␣␣␣␣␣␣␣␣␣␣␣::=␣status␣positiveInteger?␣description?␣directive?

␣status␣␣␣␣␣␣␣␣␣::=␣'not␣'?␣'ok␣'

␣description␣␣␣␣::=␣(character␣-␣(digit␣|␣'#'))␣{character␣-␣'#'}

␣directive␣␣␣␣␣␣::=␣todo_directive␣|␣skip_directive

␣todo_directive␣::=␣hash_mark␣'TODO'␣'␣'␣{character}

␣skip_directive␣::=␣hash_mark␣'SKIP'␣'␣'␣{character}

␣comment␣␣␣␣␣␣␣␣::=␣hash_mark␣{character}

␣hash_mark␣␣␣␣␣␣::=␣'#'␣{'␣'}

␣bailout␣␣␣␣␣␣␣␣::=␣'Bail␣out!'␣{character}

␣unknown␣␣␣␣␣␣␣␣::=␣{␣(character␣-␣"\n")␣}

␣(*␣POSIX␣character␣classes␣and␣other␣terminals␣*)

␣digit␣␣␣␣␣␣␣␣␣␣␣␣␣␣::=␣[:digit:]
␣character␣␣␣␣␣␣␣␣␣␣::=␣([:print:]␣-␣"\n")
␣positiveInteger␣␣␣␣::=␣(␣digit␣-␣'0'␣)␣{digit}
␣nonNegativeInteger␣::=␣digit␣{digit}

=head1␣SUBCLASSING

Please␣see␣L<TAP::Parser/SUBCLASSING>␣for␣a␣subclassing␣overview.

If␣you␣I<really>␣want␣to␣subclass␣L<TAP::Parser>'s␣grammar␣the␣best␣thing␣to
do␣is␣read␣through␣the␣code.␣␣There's␣no␣easy␣way␣of␣summarizing␣it␣here.

=head1␣SEE␣ALSO

L<TAP::Object>,
L<TAP::Parser>,
L<TAP::Parser::Iterator>,
L<TAP::Parser::Result>,

=cut
----------
Range: (3979077,3981080) (2003)
3␣}

=head1␣METHODS

=head2␣Class␣Methods

=head3␣C<new>

␣my␣%args␣=␣(
␣␣␣␣verbose␣=>␣1,
␣)
␣my␣$harness␣=␣TAP::Formatter::Console->new(␣\%args␣);

The␣constructor␣returns␣a␣new␣C<TAP::Formatter::Console>␣object.␣If
a␣L<TAP::Harness>␣is␣created␣with␣no␣C<formatter>␣a
C<TAP::Formatter::Console>␣is␣automatically␣created.␣If␣any␣of␣the
following␣options␣were␣given␣to␣TAP::Harness->new␣they␣well␣be␣passed␣to
this␣constructor␣which␣accepts␣an␣optional␣hashref␣whose␣allowed␣keys␣are:

=over␣4

=item␣*␣C<verbosity>

Set␣the␣verbosity␣level.

=item␣*␣C<verbose>

Printing␣individual␣test␣results␣to␣STDOUT.

=item␣*␣C<timer>

Append␣run␣time␣for␣each␣test␣to␣output.␣Uses␣L<Time::HiRes>␣if␣available.

=item␣*␣C<failures>

Show␣test␣failures␣(this␣is␣a␣no-op␣if␣C<verbose>␣is␣selected).

=item␣*␣C<comments>

Show␣test␣comments␣(this␣is␣a␣no-op␣if␣C<verbose>␣is␣selected).

=item␣*␣C<quiet>

Suppressing␣some␣test␣output␣(mostly␣failures␣while␣tests␣are␣running).

=item␣*␣C<really_quiet>

Suppressing␣everything␣but␣the␣tests␣summary.

=item␣*␣C<silent>

Suppressing␣all␣output.

=item␣*␣C<errors>

If␣parse␣errors␣are␣found␣in␣the␣TAP␣output,␣a␣note␣of␣this␣will␣be␣made
in␣the␣summary␣report.␣␣To␣see␣all␣of␣the␣parse␣errors,␣set␣this␣argument␣to
true:

␣␣errors␣=>␣1

=item␣*␣C<directives>

If␣set␣to␣a␣true␣value,␣only␣test␣results␣with␣directives␣will␣be␣displayed.
This␣overrides␣other␣settings␣such␣as␣C<verbose>,␣C<failures>,␣or␣C<comments>.

=item␣*␣C<stdout>

A␣filehandle␣for␣catching␣standard␣output.

=item␣*␣C<color>

If␣defined␣specifies␣whether␣color␣output␣is␣desired.␣If␣C<color>␣is␣not
defined␣it␣will␣default␣to␣color␣output␣if␣color␣support␣is␣available␣on
the␣current␣platform␣and␣output␣is␣not␣being␣redirected.

=item␣*␣C<jobs>

The␣number␣of␣concurrent␣jobs␣this␣formatter␣will␣handle.

=item␣*␣C<show_count>

Boolean␣value.␣␣If␣false,␣disables␣the␣C<X/Y>␣test␣count␣which␣shows␣up␣while
tests␣are␣running.

=back

Any␣keys␣for␣which␣the␣value␣is␣C<undef>␣will␣be␣ignored.

=cut
----------
Range: (3991518,3999091) (7573)
=head1␣METHODS

=head2␣Class␣Methods

=head3␣C<new>

␣my␣%args␣=␣(
␣␣␣␣verbosity␣=>␣1,
␣␣␣␣lib␣␣␣␣␣=>␣[␣'lib',␣'blib/lib',␣'blib/arch'␣],
␣)
␣my␣$harness␣=␣TAP::Harness->new(␣\%args␣);

The␣constructor␣returns␣a␣new␣C<TAP::Harness>␣object.␣It␣accepts␣an
optional␣hashref␣whose␣allowed␣keys␣are:

=over␣4

=item␣*␣C<verbosity>

Set␣the␣verbosity␣level:

␣␣␣␣␣1␣␣␣verbose␣␣␣␣␣␣␣␣Print␣individual␣test␣results␣to␣STDOUT.
␣␣␣␣␣0␣␣␣normal
␣␣␣␣-1␣␣␣quiet␣␣␣␣␣␣␣␣␣␣Suppress␣some␣test␣output␣(mostly␣failures␣
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣while␣tests␣are␣running).
␣␣␣␣-2␣␣␣really␣quiet␣␣␣Suppress␣everything␣but␣the␣tests␣summary.
␣␣␣␣-3␣␣␣silent␣␣␣␣␣␣␣␣␣Suppress␣everything.

=item␣*␣C<timer>

Append␣run␣time␣for␣each␣test␣to␣output.␣Uses␣L<Time::HiRes>␣if
available.

=item␣*␣C<failures>

Show␣test␣failures␣(this␣is␣a␣no-op␣if␣C<verbose>␣is␣selected).

=item␣*␣C<comments>

Show␣test␣comments␣(this␣is␣a␣no-op␣if␣C<verbose>␣is␣selected).

=item␣*␣C<show_count>

Update␣the␣running␣test␣count␣during␣testing.

=item␣*␣C<normalize>

Set␣to␣a␣true␣value␣to␣normalize␣the␣TAP␣that␣is␣emitted␣in␣verbose␣modes.

=item␣*␣C<lib>

Accepts␣a␣scalar␣value␣or␣array␣ref␣of␣scalar␣values␣indicating␣which
paths␣to␣allowed␣libraries␣should␣be␣included␣if␣Perl␣tests␣are
executed.␣Naturally,␣this␣only␣makes␣sense␣in␣the␣context␣of␣tests
written␣in␣Perl.

=item␣*␣C<switches>

Accepts␣a␣scalar␣value␣or␣array␣ref␣of␣scalar␣values␣indicating␣which
switches␣should␣be␣included␣if␣Perl␣tests␣are␣executed.␣Naturally,␣this
only␣makes␣sense␣in␣the␣context␣of␣tests␣written␣in␣Perl.

=item␣*␣C<test_args>

A␣reference␣to␣an␣C<@INC>␣style␣array␣of␣arguments␣to␣be␣passed␣to␣each
test␣program.

␣␣test_args␣=>␣['foo',␣'bar'],

if␣you␣want␣to␣pass␣different␣arguments␣to␣each␣test␣then␣you␣should
pass␣a␣hash␣of␣arrays,␣keyed␣by␣the␣alias␣for␣each␣test:

␣␣test_args␣=>␣{
␣␣␣␣my_test␣␣␣␣=>␣['foo',␣'bar'],
␣␣␣␣other_test␣=>␣['baz'],
␣␣}

=item␣*␣C<color>

Attempt␣to␣produce␣color␣output.

=item␣*␣C<exec>

Typically,␣Perl␣tests␣are␣run␣through␣this.␣However,␣anything␣which
spits␣out␣TAP␣is␣fine.␣You␣can␣use␣this␣argument␣to␣specify␣the␣name␣of
the␣program␣(and␣optional␣switches)␣to␣run␣your␣tests␣with:

␣␣exec␣=>␣['/usr/bin/ruby',␣'-w']

You␣can␣also␣pass␣a␣subroutine␣reference␣in␣order␣to␣determine␣and
return␣the␣proper␣program␣to␣run␣based␣on␣a␣given␣test␣script.␣The
subroutine␣reference␣should␣expect␣the␣TAP::Harness␣object␣itself␣as␣the
first␣argument,␣and␣the␣file␣name␣as␣the␣second␣argument.␣It␣should
return␣an␣array␣reference␣containing␣the␣command␣to␣be␣run␣and␣including
the␣test␣file␣name.␣It␣can␣also␣simply␣return␣C<undef>,␣in␣which␣case
TAP::Harness␣will␣fall␣back␣on␣executing␣the␣test␣script␣in␣Perl:

␣␣␣␣exec␣=>␣sub␣{
␣␣␣␣␣␣␣␣my␣(␣$harness,␣$test_file␣)␣=␣@_;

␣␣␣␣␣␣␣␣#␣Let␣Perl␣tests␣run.
␣␣␣␣␣␣␣␣return␣undef␣if␣$test_file␣=~␣/[.]t$/;
␣␣␣␣␣␣␣␣return␣[␣qw(␣/usr/bin/ruby␣-w␣),␣$test_file␣]
␣␣␣␣␣␣␣␣␣␣if␣$test_file␣=~␣/[.]rb$/;
␣␣␣␣␣␣}

If␣the␣subroutine␣returns␣a␣scalar␣with␣a␣newline␣or␣a␣filehandle,␣it
will␣be␣interpreted␣as␣raw␣TAP␣or␣as␣a␣TAP␣stream,␣respectively.

=item␣*␣C<merge>

If␣C<merge>␣is␣true␣the␣harness␣will␣create␣parsers␣that␣merge␣STDOUT
and␣STDERR␣together␣for␣any␣processes␣they␣start.

=item␣*␣C<sources>

I<NEW␣to␣3.18>.

If␣set,␣C<sources>␣must␣be␣a␣hashref␣containing␣the␣names␣of␣the
L<TAP::Parser::SourceHandler>s␣to␣load␣and/or␣configure.␣␣The␣values␣are␣a
hash␣of␣configuration␣that␣will␣be␣accessible␣to␣the␣source␣handlers␣via
L<TAP::Parser::Source/config_for>.

For␣example:

␣␣sources␣=>␣{
␣␣␣␣Perl␣=>␣{␣exec␣=>␣'/path/to/custom/perl'␣},
␣␣␣␣File␣=>␣{␣extensions␣=>␣[␣'.tap',␣'.txt'␣]␣},
␣␣␣␣MyCustom␣=>␣{␣some␣=>␣'config'␣},
␣␣}

The␣C<sources>␣parameter␣affects␣how␣C<source>,␣C<tap>␣and␣C<exec>␣parameters
are␣handled.

For␣more␣details,␣see␣the␣C<sources>␣parameter␣in␣L<TAP::Parser/new>,
L<TAP::Parser::Source>,␣and␣L<TAP::Parser::IteratorFactory>.

=item␣*␣C<aggregator_class>

The␣name␣of␣the␣class␣to␣use␣to␣aggregate␣test␣results.␣The␣default␣is
L<TAP::Parser::Aggregator>.

=item␣*␣C<version>

I<NEW␣to␣3.22>.

Assume␣this␣TAP␣version␣for␣L<TAP::Parser>␣instead␣of␣default␣TAP
version␣12.

=item␣*␣C<formatter_class>

The␣name␣of␣the␣class␣to␣use␣to␣format␣output.␣The␣default␣is
L<TAP::Formatter::Console>,␣or␣L<TAP::Formatter::File>␣if␣the␣output
isn't␣a␣TTY.

=item␣*␣C<multiplexer_class>

The␣name␣of␣the␣class␣to␣use␣to␣multiplex␣tests␣during␣parallel␣testing.
The␣default␣is␣L<TAP::Parser::Multiplexer>.

=item␣*␣C<parser_class>

The␣name␣of␣the␣class␣to␣use␣to␣parse␣TAP.␣The␣default␣is
L<TAP::Parser>.

=item␣*␣C<scheduler_class>

The␣name␣of␣the␣class␣to␣use␣to␣schedule␣test␣execution.␣The␣default␣is
L<TAP::Parser::Scheduler>.

=item␣*␣C<formatter>

If␣set␣C<formatter>␣must␣be␣an␣object␣that␣is␣capable␣of␣formatting␣the
TAP␣output.␣See␣L<TAP::Formatter::Console>␣for␣an␣example.

=item␣*␣C<errors>

If␣parse␣errors␣are␣found␣in␣the␣TAP␣output,␣a␣note␣of␣this␣will␣be
made␣in␣the␣summary␣report.␣To␣see␣all␣of␣the␣parse␣errors,␣set␣this
argument␣to␣true:

␣␣errors␣=>␣1

=item␣*␣C<directives>

If␣set␣to␣a␣true␣value,␣only␣test␣results␣with␣directives␣will␣be
displayed.␣This␣overrides␣other␣settings␣such␣as␣C<verbose>␣or
C<failures>.

=item␣*␣C<ignore_exit>

If␣set␣to␣a␣true␣value␣instruct␣C<TAP::Parser>␣to␣ignore␣exit␣and␣wait
status␣from␣test␣scripts.

=item␣*␣C<jobs>

The␣maximum␣number␣of␣parallel␣tests␣to␣run␣at␣any␣time.␣␣Which␣tests
can␣be␣run␣in␣parallel␣is␣controlled␣by␣C<rules>.␣␣The␣default␣is␣to
run␣only␣one␣test␣at␣a␣time.

=item␣*␣C<rules>

A␣reference␣to␣a␣hash␣of␣rules␣that␣control␣which␣tests␣may␣be␣executed␣in
parallel.␣If␣no␣rules␣are␣declared␣and␣L<CPAN::Meta::YAML>␣is␣available,
C<TAP::Harness>␣attempts␣to␣load␣rules␣from␣a␣YAML␣file␣specified␣by␣the
C<rulesfile>␣parameter.␣If␣no␣rules␣file␣exists,␣the␣default␣is␣for␣all
tests␣to␣be␣eligible␣to␣be␣run␣in␣parallel.

Here␣some␣simple␣examples.␣For␣the␣full␣details␣of␣the␣data␣structure
and␣the␣related␣glob-style␣pattern␣matching,␣see
L<TAP::Parser::Scheduler/"Rules␣data␣structure">.

␣␣␣␣#␣Run␣all␣tests␣in␣sequence,␣except␣those␣starting␣with␣"p"
␣␣␣␣$harness->rules({
␣␣␣␣␣␣␣␣par␣=>␣'t/p*.t'
␣␣␣␣});

␣␣␣␣#␣Equivalent␣YAML␣file
␣␣␣␣---
␣␣␣␣par:␣t/p*.t

␣␣␣␣#␣Run␣all␣tests␣in␣parallel,␣except␣those␣starting␣with␣"p"
␣␣␣␣$harness->rules({
␣␣␣␣␣␣␣␣seq␣=>␣[
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣{␣seq␣=>␣'t/p*.t'␣},
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣{␣par␣=>␣'**'␣␣␣␣␣},
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣],
␣␣␣␣});

␣␣␣␣#␣Equivalent␣YAML␣file
␣␣␣␣---
␣␣␣␣seq:
␣␣␣␣␣␣␣␣-␣seq:␣t/p*.t
␣␣␣␣␣␣␣␣-␣par:␣**

␣␣␣␣#␣Run␣some␣␣startup␣tests␣in␣sequence,␣then␣some␣parallel␣tests␣than␣some
␣␣␣␣#␣teardown␣tests␣in␣sequence.
␣␣␣␣$harness->rules({
␣␣␣␣␣␣␣␣seq␣=>␣[
␣␣␣␣␣␣␣␣␣␣␣␣{␣seq␣=>␣'t/startup/*.t'␣},
␣␣␣␣␣␣␣␣␣␣␣␣{␣par␣=>␣['t/a/*.t','t/b/*.t','t/c/*.t'],␣}
␣␣␣␣␣␣␣␣␣␣␣␣{␣seq␣=>␣'t/shutdown/*.t'␣},
␣␣␣␣␣␣␣␣],

␣␣␣␣});

␣␣␣␣#␣Equivalent␣YAML␣file
␣␣␣␣---
␣␣␣␣seq:
␣␣␣␣␣␣␣␣-␣seq:␣t/startup/*.t
␣␣␣␣␣␣␣␣-␣par:
␣␣␣␣␣␣␣␣␣␣␣␣-␣t/a/*.t
␣␣␣␣␣␣␣␣␣␣␣␣-␣t/b/*.t
␣␣␣␣␣␣␣␣␣␣␣␣-␣t/c/*.t
␣␣␣␣␣␣␣␣-␣seq:␣t/shutdown/*.t

This␣is␣an␣experimental␣feature␣and␣the␣interface␣may␣change.

=item␣*␣C<rulesfiles>

This␣specifies␣where␣to␣find␣a␣YAML␣file␣of␣test␣scheduling␣rules.␣␣If␣not
provided,␣it␣looks␣for␣a␣default␣file␣to␣use.␣␣It␣first␣checks␣for␣a␣file␣given
in␣the␣C<HARNESS_RULESFILE>␣environment␣variable,␣then␣it␣checks␣for
F<testrules.yml>␣and␣then␣F<t/testrules.yml>.

=item␣*␣C<stdout>

A␣filehandle␣for␣catching␣standard␣output.

=item␣*␣C<trap>

Attempt␣to␣print␣summary␣information␣if␣run␣is␣interrupted␣by
SIGINT␣(Ctrl-C).

=back

Any␣keys␣for␣which␣the␣value␣is␣C<undef>␣will␣be␣ignored.

=cut
----------
Range: (4006885,4008745) (1860)
}

=head3␣C<aggregate_tests>

␣␣$harness->aggregate_tests(␣$aggregate,␣@tests␣);

Run␣the␣named␣tests␣and␣display␣a␣summary␣of␣result.␣Tests␣will␣be␣run
in␣the␣order␣found.

Test␣results␣will␣be␣added␣to␣the␣supplied␣L<TAP::Parser::Aggregator>.
C<aggregate_tests>␣may␣be␣called␣multiple␣times␣to␣run␣several␣sets␣of
tests.␣Multiple␣C<Test::Harness>␣instances␣may␣be␣used␣to␣pass␣results
to␣a␣single␣aggregator␣so␣that␣different␣parts␣of␣a␣complex␣test␣suite
may␣be␣run␣using␣different␣C<TAP::Harness>␣settings.␣This␣is␣useful,␣for
example,␣in␣the␣case␣where␣some␣tests␣should␣run␣in␣parallel␣but␣others
are␣unsuitable␣for␣parallel␣execution.

␣␣␣␣my␣$formatter␣␣␣=␣TAP::Formatter::Console->new;
␣␣␣␣my␣$ser_harness␣=␣TAP::Harness->new(␣{␣formatter␣=>␣$formatter␣}␣);
␣␣␣␣my␣$par_harness␣=␣TAP::Harness->new(
␣␣␣␣␣␣␣␣{␣␣␣formatter␣=>␣$formatter,
␣␣␣␣␣␣␣␣␣␣␣␣jobs␣␣␣␣␣␣=>␣9
␣␣␣␣␣␣␣␣}
␣␣␣␣);
␣␣␣␣my␣$aggregator␣=␣TAP::Parser::Aggregator->new;

␣␣␣␣$aggregator->start();
␣␣␣␣$ser_harness->aggregate_tests(␣$aggregator,␣@ser_tests␣);
␣␣␣␣$par_harness->aggregate_tests(␣$aggregator,␣@par_tests␣);
␣␣␣␣$aggregator->stop();
␣␣␣␣$formatter->summary($aggregator);

Note␣that␣for␣simpler␣testing␣requirements␣it␣will␣often␣be␣possible␣to
replace␣the␣above␣code␣with␣a␣single␣call␣to␣C<runtests>.

Each␣element␣of␣the␣C<@tests>␣array␣is␣either:

=over

=item␣*␣the␣source␣name␣of␣a␣test␣to␣run

=item␣*␣a␣reference␣to␣a␣[␣source␣name,␣display␣name␣]␣array

=back

In␣the␣case␣of␣a␣perl␣test␣suite,␣typically␣I<source␣names>␣are␣simply␣the␣file
names␣of␣the␣test␣scripts␣to␣run.

When␣you␣supply␣a␣separate␣display␣name␣it␣becomes␣possible␣to␣run␣a
test␣more␣than␣once;␣the␣display␣name␣is␣effectively␣the␣alias␣by␣which
the␣test␣is␣known␣inside␣the␣harness.␣The␣harness␣doesn't␣care␣if␣it
runs␣the␣same␣test␣more␣than␣once␣when␣each␣invocation␣uses␣a
different␣name.

=cut
----------
Range: (4016912,4019835) (2923)
=head1␣NAME

TAP::Harness::Env␣-␣Parsing␣harness␣related␣environmental␣variables␣where␣appropriate

=head1␣VERSION

Version␣3.43

=head1␣SYNOPSIS

␣my␣$harness␣=␣TAP::Harness::Env->create(\%extra_args)

=head1␣DESCRIPTION

This␣module␣implements␣the␣environmental␣variables␣that␣L<Test::Harness>␣uses␣with␣TAP::Harness,␣and␣instantiates␣the␣appropriate␣class␣with␣the␣appropriate␣arguments.

=head1␣METHODS

=over␣4

=item␣*␣create(␣\%args␣)

This␣function␣reads␣the␣environment␣and␣generates␣an␣appropriate␣argument␣hash␣from␣it.␣If␣given␣any␣arguments␣in␣C<%extra_args>,␣these␣will␣override␣the␣environmental␣defaults.␣In␣accepts␣C<harness_class>␣(which␣defaults␣to␣C<TAP::Harness>),␣and␣any␣argument␣the␣harness␣class␣accepts.

=back

=head1␣ENVIRONMENTAL␣VARIABLES

=over␣4

=item␣C<HARNESS_PERL_SWITCHES>

Setting␣this␣adds␣perl␣command␣line␣switches␣to␣each␣test␣file␣run.

For␣example,␣C<HARNESS_PERL_SWITCHES=-T>␣will␣turn␣on␣taint␣mode.
C<HARNESS_PERL_SWITCHES=-MDevel::Cover>␣will␣run␣C<Devel::Cover>␣for
each␣test.

=item␣C<HARNESS_VERBOSE>

If␣true,␣C<TAP::Harness>␣will␣output␣the␣verbose␣results␣of␣running
its␣tests.

=item␣C<HARNESS_SUBCLASS>

Specifies␣a␣TAP::Harness␣subclass␣to␣be␣used␣in␣place␣of␣TAP::Harness.

=item␣C<HARNESS_OPTIONS>

Provide␣additional␣options␣to␣the␣harness.␣Currently␣supported␣options␣are:

=over

=item␣C<<␣j<n>␣>>

Run␣<n>␣(default␣9)␣parallel␣jobs.

=item␣C<<␣c␣>>

Try␣to␣color␣output.␣See␣L<TAP::Formatter::Base/"new">.

=item␣C<<␣a<file.tgz>␣>>

Will␣use␣L<TAP::Harness::Archive>␣as␣the␣harness␣class,␣and␣save␣the␣TAP␣to
C<file.tgz>

=item␣C<<␣fPackage-With-Dashes␣>>

Set␣the␣formatter_class␣of␣the␣harness␣being␣run.␣Since␣the␣C<HARNESS_OPTIONS>
is␣seperated␣by␣C<:>,␣we␣use␣C<->␣instead.

=back

Multiple␣options␣may␣be␣separated␣by␣colons:

␣␣␣␣HARNESS_OPTIONS=j9:c␣make␣test

=item␣C<HARNESS_TIMER>

Setting␣this␣to␣true␣will␣make␣the␣harness␣display␣the␣number␣of
milliseconds␣each␣test␣took.␣␣You␣can␣also␣use␣F<prove>'s␣C<--timer>
switch.

=item␣C<HARNESS_COLOR>

Attempt␣to␣produce␣color␣output.

=item␣C<HARNESS_IGNORE_EXIT>

If␣set␣to␣a␣true␣value␣instruct␣C<TAP::Parser>␣to␣ignore␣exit␣and␣wait
status␣from␣test␣scripts.

=back
package␣TAP::Parser;

use␣strict;
use␣warnings;

use␣TAP::Parser::Grammar␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣();
use␣TAP::Parser::Result␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣();
use␣TAP::Parser::ResultFactory␣␣␣␣␣␣␣␣␣␣␣␣␣();
use␣TAP::Parser::Source␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣();
use␣TAP::Parser::Iterator␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣();
use␣TAP::Parser::IteratorFactory␣␣␣␣␣␣␣␣␣␣␣();
use␣TAP::Parser::SourceHandler::Executable␣();
use␣TAP::Parser::SourceHandler::Perl␣␣␣␣␣␣␣();
use␣TAP::Parser::SourceHandler::File␣␣␣␣␣␣␣();
use␣TAP::Parser::SourceHandler::RawTAP␣␣␣␣␣();
use␣TAP::Parser::SourceHandler::Handle␣␣␣␣␣();

use␣Carp␣qw(␣confess␣);

use␣base␣'TAP::Base';

=encoding␣utf8

=head1␣NAME

TAP::Parser␣-␣Parse␣L<TAP|Test::Harness::TAP>␣output

=head1␣VERSION

Version␣3.43

=cut
----------
Range: (4020622,4026402) (5780)
=head1␣SYNOPSIS

␣␣␣␣use␣TAP::Parser;

␣␣␣␣my␣$parser␣=␣TAP::Parser->new(␣{␣source␣=>␣$source␣}␣);

␣␣␣␣while␣(␣my␣$result␣=␣$parser->next␣)␣{
␣␣␣␣␣␣␣␣print␣$result->as_string;
␣␣␣␣}

=head1␣DESCRIPTION

C<TAP::Parser>␣is␣designed␣to␣produce␣a␣proper␣parse␣of␣TAP␣output.␣For
an␣example␣of␣how␣to␣run␣tests␣through␣this␣module,␣see␣the␣simple
harnesses␣C<examples/>.

There's␣a␣wiki␣dedicated␣to␣the␣Test␣Anything␣Protocol:

L<http://testanything.org>

It␣includes␣the␣TAP::Parser␣Cookbook:

L<http://testanything.org/testing-with-tap/perl/tap::parser-cookbook.html>

=head1␣METHODS

=head2␣Class␣Methods

=head3␣C<new>

␣my␣$parser␣=␣TAP::Parser->new(\%args);

Returns␣a␣new␣C<TAP::Parser>␣object.

The␣arguments␣should␣be␣a␣hashref␣with␣I<one>␣of␣the␣following␣keys:

=over␣4

=item␣*␣C<source>

I<CHANGED␣in␣3.18>

This␣is␣the␣preferred␣method␣of␣passing␣input␣to␣the␣constructor.

The␣C<source>␣is␣used␣to␣create␣a␣L<TAP::Parser::Source>␣that␣is␣passed␣to␣the
L</iterator_factory_class>␣which␣in␣turn␣figures␣out␣how␣to␣handle␣the␣source␣and
creates␣a␣<TAP::Parser::Iterator>␣for␣it.␣␣The␣iterator␣is␣used␣by␣the␣parser␣to
read␣in␣the␣TAP␣stream.

To␣configure␣the␣I<IteratorFactory>␣use␣the␣C<sources>␣parameter␣below.

Note␣that␣C<source>,␣C<tap>␣and␣C<exec>␣are␣I<mutually␣exclusive>.

=item␣*␣C<tap>

I<CHANGED␣in␣3.18>

The␣value␣should␣be␣the␣complete␣TAP␣output.

The␣I<tap>␣is␣used␣to␣create␣a␣L<TAP::Parser::Source>␣that␣is␣passed␣to␣the
L</iterator_factory_class>␣which␣in␣turn␣figures␣out␣how␣to␣handle␣the␣source␣and
creates␣a␣<TAP::Parser::Iterator>␣for␣it.␣␣The␣iterator␣is␣used␣by␣the␣parser␣to
read␣in␣the␣TAP␣stream.

To␣configure␣the␣I<IteratorFactory>␣use␣the␣C<sources>␣parameter␣below.

Note␣that␣C<source>,␣C<tap>␣and␣C<exec>␣are␣I<mutually␣exclusive>.

=item␣*␣C<exec>

Must␣be␣passed␣an␣array␣reference.

The␣I<exec>␣array␣ref␣is␣used␣to␣create␣a␣L<TAP::Parser::Source>␣that␣is␣passed
to␣the␣L</iterator_factory_class>␣which␣in␣turn␣figures␣out␣how␣to␣handle␣the
source␣and␣creates␣a␣<TAP::Parser::Iterator>␣for␣it.␣␣The␣iterator␣is␣used␣by
the␣parser␣to␣read␣in␣the␣TAP␣stream.

By␣default␣the␣L<TAP::Parser::SourceHandler::Executable>␣class␣will␣create␣a
L<TAP::Parser::Iterator::Process>␣object␣to␣handle␣the␣source.␣␣This␣passes␣the
array␣reference␣strings␣as␣command␣arguments␣to␣L<IPC::Open3::open3|IPC::Open3>:

␣exec␣=>␣[␣'/usr/bin/ruby',␣'t/my_test.rb'␣]

If␣any␣C<test_args>␣are␣given␣they␣will␣be␣appended␣to␣the␣end␣of␣the␣command
argument␣list.

To␣configure␣the␣I<IteratorFactory>␣use␣the␣C<sources>␣parameter␣below.

Note␣that␣C<source>,␣C<tap>␣and␣C<exec>␣are␣I<mutually␣exclusive>.

=back

The␣following␣keys␣are␣optional.

=over␣4

=item␣*␣C<sources>

I<NEW␣to␣3.18>.

If␣set,␣C<sources>␣must␣be␣a␣hashref␣containing␣the␣names␣of␣the
L<TAP::Parser::SourceHandler>s␣to␣load␣and/or␣configure.␣␣The␣values␣are␣a
hash␣of␣configuration␣that␣will␣be␣accessible␣to␣the␣source␣handlers␣via
L<TAP::Parser::Source/config_for>.

For␣example:

␣␣sources␣=>␣{
␣␣␣␣Perl␣=>␣{␣exec␣=>␣'/path/to/custom/perl'␣},
␣␣␣␣File␣=>␣{␣extensions␣=>␣[␣'.tap',␣'.txt'␣]␣},
␣␣␣␣MyCustom␣=>␣{␣some␣=>␣'config'␣},
␣␣}

This␣will␣cause␣C<TAP::Parser>␣to␣pass␣custom␣configuration␣to␣two␣of␣the␣built-
in␣source␣handlers␣-␣L<TAP::Parser::SourceHandler::Perl>,
L<TAP::Parser::SourceHandler::File>␣-␣and␣attempt␣to␣load␣the␣C<MyCustom>
class.␣␣See␣L<TAP::Parser::IteratorFactory/load_handlers>␣for␣more␣detail.

The␣C<sources>␣parameter␣affects␣how␣C<source>,␣C<tap>␣and␣C<exec>␣parameters
are␣handled.

See␣L<TAP::Parser::IteratorFactory>,␣L<TAP::Parser::SourceHandler>␣and␣subclasses␣for
more␣details.

=item␣*␣C<callback>

If␣present,␣each␣callback␣corresponding␣to␣a␣given␣result␣type␣will␣be␣called
with␣the␣result␣as␣the␣argument␣if␣the␣C<run>␣method␣is␣used:

␣my␣%callbacks␣=␣(
␣␣␣␣␣test␣␣␣␣=>␣\&test_callback,
␣␣␣␣␣plan␣␣␣␣=>␣\&plan_callback,
␣␣␣␣␣comment␣=>␣\&comment_callback,
␣␣␣␣␣bailout␣=>␣\&bailout_callback,
␣␣␣␣␣unknown␣=>␣\&unknown_callback,
␣);

␣my␣$aggregator␣=␣TAP::Parser::Aggregator->new;
␣for␣my␣$file␣(␣@test_files␣)␣{
␣␣␣␣␣my␣$parser␣=␣TAP::Parser->new(
␣␣␣␣␣␣␣␣␣{
␣␣␣␣␣␣␣␣␣␣␣␣␣source␣␣␣␣=>␣$file,
␣␣␣␣␣␣␣␣␣␣␣␣␣callbacks␣=>␣\%callbacks,
␣␣␣␣␣␣␣␣␣}
␣␣␣␣␣);
␣␣␣␣␣$parser->run;
␣␣␣␣␣$aggregator->add(␣$file,␣$parser␣);
␣}

=item␣*␣C<switches>

If␣using␣a␣Perl␣file␣as␣a␣source,␣optional␣switches␣may␣be␣passed␣which␣will
be␣used␣when␣invoking␣the␣perl␣executable.

␣my␣$parser␣=␣TAP::Parser->new(␣{
␣␣␣␣␣source␣␣␣=>␣$test_file,
␣␣␣␣␣switches␣=>␣[␣'-Ilib'␣],
␣}␣);

=item␣*␣C<test_args>

Used␣in␣conjunction␣with␣the␣C<source>␣and␣C<exec>␣option␣to␣supply␣a␣reference
to␣an␣C<@ARGV>␣style␣array␣of␣arguments␣to␣pass␣to␣the␣test␣program.

=item␣*␣C<spool>

If␣passed␣a␣filehandle␣will␣write␣a␣copy␣of␣all␣parsed␣TAP␣to␣that␣handle.

=item␣*␣C<merge>

If␣false,␣STDERR␣is␣not␣captured␣(though␣it␣is␣'relayed'␣to␣keep␣it
somewhat␣synchronized␣with␣STDOUT.)

If␣true,␣STDERR␣and␣STDOUT␣are␣the␣same␣filehandle.␣␣This␣may␣cause
breakage␣if␣STDERR␣contains␣anything␣resembling␣TAP␣format,␣but␣does
allow␣exact␣synchronization.

Subtleties␣of␣this␣behavior␣may␣be␣platform-dependent␣and␣may␣change␣in
the␣future.

=item␣*␣C<grammar_class>

This␣option␣was␣introduced␣to␣let␣you␣easily␣customize␣which␣I<grammar>␣class
the␣parser␣should␣use.␣␣It␣defaults␣to␣L<TAP::Parser::Grammar>.

See␣also␣L</make_grammar>.

=item␣*␣C<result_factory_class>

This␣option␣was␣introduced␣to␣let␣you␣easily␣customize␣which␣I<result>
factory␣class␣the␣parser␣should␣use.␣␣It␣defaults␣to
L<TAP::Parser::ResultFactory>.

See␣also␣L</make_result>.

=item␣*␣C<iterator_factory_class>

I<CHANGED␣in␣3.18>

This␣option␣was␣introduced␣to␣let␣you␣easily␣customize␣which␣I<iterator>
factory␣class␣the␣parser␣should␣use.␣␣It␣defaults␣to
L<TAP::Parser::IteratorFactory>.

=back

=cut
----------
Range: (4032796,4040092) (7296)
}
}

=head1␣INDIVIDUAL␣RESULTS

If␣you've␣read␣this␣far␣in␣the␣docs,␣you've␣seen␣this:

␣␣␣␣while␣(␣my␣$result␣=␣$parser->next␣)␣{
␣␣␣␣␣␣␣␣print␣$result->as_string;
␣␣␣␣}

Each␣result␣returned␣is␣a␣L<TAP::Parser::Result>␣subclass,␣referred␣to␣as
I<result␣types>.

=head2␣Result␣types

Basically,␣you␣fetch␣individual␣results␣from␣the␣TAP.␣␣The␣six␣types,␣with
examples␣of␣each,␣are␣as␣follows:

=over␣4

=item␣*␣Version

␣TAP␣version␣12

=item␣*␣Plan

␣1..42

=item␣*␣Pragma

␣pragma␣+strict

=item␣*␣Test

␣ok␣3␣-␣We␣should␣start␣with␣some␣foobar!

=item␣*␣Comment

␣#␣Hope␣we␣don't␣use␣up␣the␣foobar.

=item␣*␣Bailout

␣Bail␣out!␣␣We␣ran␣out␣of␣foobar!

=item␣*␣Unknown

␣...␣yo,␣this␣ain't␣TAP!␣...

=back

Each␣result␣fetched␣is␣a␣result␣object␣of␣a␣different␣type.␣␣There␣are␣common
methods␣to␣each␣result␣object␣and␣different␣types␣may␣have␣methods␣unique␣to
their␣type.␣␣Sometimes␣a␣type␣method␣may␣be␣overridden␣in␣a␣subclass,␣but␣its
use␣is␣guaranteed␣to␣be␣identical.

=head2␣Common␣type␣methods

=head3␣C<type>

Returns␣the␣type␣of␣result,␣such␣as␣C<comment>␣or␣C<test>.

=head3␣C<as_string>

Prints␣a␣string␣representation␣of␣the␣token.␣␣This␣might␣not␣be␣the␣exact
output,␣however.␣␣Tests␣will␣have␣test␣numbers␣added␣if␣not␣present,␣TODO␣and
SKIP␣directives␣will␣be␣capitalized␣and,␣in␣general,␣things␣will␣be␣cleaned
up.␣␣If␣you␣need␣the␣original␣text␣for␣the␣token,␣see␣the␣C<raw>␣method.

=head3␣␣C<raw>

Returns␣the␣original␣line␣of␣text␣which␣was␣parsed.

=head3␣C<is_plan>

Indicates␣whether␣or␣not␣this␣is␣the␣test␣plan␣line.

=head3␣C<is_test>

Indicates␣whether␣or␣not␣this␣is␣a␣test␣line.

=head3␣C<is_comment>

Indicates␣whether␣or␣not␣this␣is␣a␣comment.␣Comments␣will␣generally␣only
appear␣in␣the␣TAP␣stream␣if␣STDERR␣is␣merged␣to␣STDOUT.␣See␣the
C<merge>␣option.

=head3␣C<is_bailout>

Indicates␣whether␣or␣not␣this␣is␣bailout␣line.

=head3␣C<is_yaml>

Indicates␣whether␣or␣not␣the␣current␣item␣is␣a␣YAML␣block.

=head3␣C<is_unknown>

Indicates␣whether␣or␣not␣the␣current␣line␣could␣be␣parsed.

=head3␣C<is_ok>

␣␣if␣(␣$result->is_ok␣)␣{␣...␣}

Reports␣whether␣or␣not␣a␣given␣result␣has␣passed.␣␣Anything␣which␣is␣B<not>␣a
test␣result␣returns␣true.␣␣This␣is␣merely␣provided␣as␣a␣convenient␣shortcut
which␣allows␣you␣to␣do␣this:

␣my␣$parser␣=␣TAP::Parser->new(␣{␣source␣=>␣$source␣}␣);
␣while␣(␣my␣$result␣=␣$parser->next␣)␣{
␣␣␣␣␣#␣only␣print␣failing␣results
␣␣␣␣␣print␣$result->as_string␣unless␣$result->is_ok;
␣}

=head2␣C<plan>␣methods

␣if␣(␣$result->is_plan␣)␣{␣...␣}

If␣the␣above␣evaluates␣as␣true,␣the␣following␣methods␣will␣be␣available␣on␣the
C<$result>␣object.

=head3␣C<plan>

␣␣if␣(␣$result->is_plan␣)␣{
␣␣␣␣␣print␣$result->plan;
␣␣}

This␣is␣merely␣a␣synonym␣for␣C<as_string>.

=head3␣C<directive>

␣my␣$directive␣=␣$result->directive;

If␣a␣SKIP␣directive␣is␣included␣with␣the␣plan,␣this␣method␣will␣return␣it.

␣1..0␣#␣SKIP:␣why␣bother?

=head3␣C<explanation>

␣my␣$explanation␣=␣$result->explanation;

If␣a␣SKIP␣directive␣was␣included␣with␣the␣plan,␣this␣method␣will␣return␣the
explanation,␣if␣any.

=head2␣C<pragma>␣methods

␣if␣(␣$result->is_pragma␣)␣{␣...␣}

If␣the␣above␣evaluates␣as␣true,␣the␣following␣methods␣will␣be␣available␣on␣the
C<$result>␣object.

=head3␣C<pragmas>

Returns␣a␣list␣of␣pragmas␣each␣of␣which␣is␣a␣+␣or␣-␣followed␣by␣the
pragma␣name.

=head2␣C<comment>␣methods

␣if␣(␣$result->is_comment␣)␣{␣...␣}

If␣the␣above␣evaluates␣as␣true,␣the␣following␣methods␣will␣be␣available␣on␣the
C<$result>␣object.

=head3␣C<comment>

␣␣if␣(␣$result->is_comment␣)␣{
␣␣␣␣␣␣my␣$comment␣=␣$result->comment;
␣␣␣␣␣␣print␣"I␣have␣something␣to␣say:␣␣$comment";
␣␣}

=head2␣C<bailout>␣methods

␣if␣(␣$result->is_bailout␣)␣{␣...␣}

If␣the␣above␣evaluates␣as␣true,␣the␣following␣methods␣will␣be␣available␣on␣the
C<$result>␣object.

=head3␣C<explanation>

␣␣if␣(␣$result->is_bailout␣)␣{
␣␣␣␣␣␣my␣$explanation␣=␣$result->explanation;
␣␣␣␣␣␣print␣"We␣bailed␣out␣because␣($explanation)";
␣␣}

If,␣and␣only␣if,␣a␣token␣is␣a␣bailout␣token,␣you␣can␣get␣an␣"explanation"␣via
this␣method.␣␣The␣explanation␣is␣the␣text␣after␣the␣mystical␣"Bail␣out!"␣words
which␣appear␣in␣the␣tap␣output.

=head2␣C<unknown>␣methods

␣if␣(␣$result->is_unknown␣)␣{␣...␣}

There␣are␣no␣unique␣methods␣for␣unknown␣results.

=head2␣C<test>␣methods

␣if␣(␣$result->is_test␣)␣{␣...␣}

If␣the␣above␣evaluates␣as␣true,␣the␣following␣methods␣will␣be␣available␣on␣the
C<$result>␣object.

=head3␣C<ok>

␣␣my␣$ok␣=␣$result->ok;

Returns␣the␣literal␣text␣of␣the␣C<ok>␣or␣C<not␣ok>␣status.

=head3␣C<number>

␣␣my␣$test_number␣=␣$result->number;

Returns␣the␣number␣of␣the␣test,␣even␣if␣the␣original␣TAP␣output␣did␣not␣supply
that␣number.

=head3␣C<description>

␣␣my␣$description␣=␣$result->description;

Returns␣the␣description␣of␣the␣test,␣if␣any.␣␣This␣is␣the␣portion␣after␣the
test␣number␣but␣before␣the␣directive.

=head3␣C<directive>

␣␣my␣$directive␣=␣$result->directive;

Returns␣either␣C<TODO>␣or␣C<SKIP>␣if␣either␣directive␣was␣present␣for␣a␣test
line.

=head3␣C<explanation>

␣␣my␣$explanation␣=␣$result->explanation;

If␣a␣test␣had␣either␣a␣C<TODO>␣or␣C<SKIP>␣directive,␣this␣method␣will␣return
the␣accompanying␣explanation,␣if␣present.

␣␣not␣ok␣17␣-␣'Pigs␣can␣fly'␣#␣TODO␣not␣enough␣acid

For␣the␣above␣line,␣the␣explanation␣is␣I<not␣enough␣acid>.

=head3␣C<is_ok>

␣␣if␣(␣$result->is_ok␣)␣{␣...␣}

Returns␣a␣boolean␣value␣indicating␣whether␣or␣not␣the␣test␣passed.␣␣Remember
that␣for␣TODO␣tests,␣the␣test␣always␣passes.

B<Note:>␣␣this␣was␣formerly␣C<passed>.␣␣The␣latter␣method␣is␣deprecated␣and
will␣issue␣a␣warning.

=head3␣C<is_actual_ok>

␣␣if␣(␣$result->is_actual_ok␣)␣{␣...␣}

Returns␣a␣boolean␣value␣indicating␣whether␣or␣not␣the␣test␣passed,␣regardless
of␣its␣TODO␣status.

B<Note:>␣␣this␣was␣formerly␣C<actual_passed>.␣␣The␣latter␣method␣is␣deprecated
and␣will␣issue␣a␣warning.

=head3␣C<is_unplanned>

␣␣if␣(␣$test->is_unplanned␣)␣{␣...␣}

If␣a␣test␣number␣is␣greater␣than␣the␣number␣of␣planned␣tests,␣this␣method␣will
return␣true.␣␣Unplanned␣tests␣will␣I<always>␣return␣false␣for␣C<is_ok>,
regardless␣of␣whether␣or␣not␣the␣test␣C<has_todo>␣(see
L<TAP::Parser::Result::Test>␣for␣more␣information␣about␣this).

=head3␣C<has_skip>

␣␣if␣(␣$result->has_skip␣)␣{␣...␣}

Returns␣a␣boolean␣value␣indicating␣whether␣or␣not␣this␣test␣had␣a␣SKIP
directive.

=head3␣C<has_todo>

␣␣if␣(␣$result->has_todo␣)␣{␣...␣}

Returns␣a␣boolean␣value␣indicating␣whether␣or␣not␣this␣test␣had␣a␣TODO
directive.

Note␣that␣TODO␣tests␣I<always>␣pass.␣␣If␣you␣need␣to␣know␣whether␣or␣not
they␣really␣passed,␣check␣the␣C<is_actual_ok>␣method.

=head3␣C<in_todo>

␣␣if␣(␣$parser->in_todo␣)␣{␣...␣}

True␣while␣the␣most␣recent␣result␣was␣a␣TODO.␣Becomes␣true␣before␣the
TODO␣result␣is␣returned␣and␣stays␣true␣until␣just␣before␣the␣next␣non-
TODO␣test␣is␣returned.

=head1␣TOTAL␣RESULTS

After␣parsing␣the␣TAP,␣there␣are␣many␣methods␣available␣to␣let␣you␣dig␣through
the␣results␣and␣determine␣what␣is␣meaningful␣to␣you.

=head2␣Individual␣Results

These␣results␣refer␣to␣individual␣tests␣which␣are␣run.

=head3␣C<passed>

␣my␣@passed␣=␣$parser->passed;␣#␣the␣test␣numbers␣which␣passed
␣my␣$passed␣=␣$parser->passed;␣#␣the␣number␣of␣tests␣which␣passed

This␣method␣lets␣you␣know␣which␣(or␣how␣many)␣tests␣passed.␣␣If␣a␣test␣failed
but␣had␣a␣TODO␣directive,␣it␣will␣be␣counted␣as␣a␣passed␣test.

=cut
----------
Range: (4046759,4048280) (1521)
@_␣)␣}

=head3␣C<parse_errors>

␣my␣@errors␣=␣$parser->parse_errors;␣#␣the␣parser␣errors
␣my␣$errors␣=␣$parser->parse_errors;␣#␣the␣number␣of␣parser_errors

Fortunately,␣all␣TAP␣output␣is␣perfect.␣␣In␣the␣event␣that␣it␣is␣not,␣this
method␣will␣return␣parser␣errors.␣␣Note␣that␣a␣junk␣line␣which␣the␣parser␣does
not␣recognize␣is␣C<not>␣an␣error.␣␣This␣allows␣this␣parser␣to␣handle␣future
versions␣of␣TAP.␣␣The␣following␣are␣all␣TAP␣errors␣reported␣by␣the␣parser:

=over␣4

=item␣*␣Misplaced␣plan

The␣plan␣(for␣example,␣'1..5'),␣must␣only␣come␣at␣the␣beginning␣or␣end␣of␣the
TAP␣output.

=item␣*␣No␣plan

Gotta␣have␣a␣plan!

=item␣*␣More␣than␣one␣plan

␣1..3
␣ok␣1␣-␣input␣file␣opened
␣not␣ok␣2␣-␣first␣line␣of␣the␣input␣valid␣#␣todo␣some␣data
␣ok␣3␣read␣the␣rest␣of␣the␣file
␣1..3

Right.␣␣Very␣funny.␣␣Don't␣do␣that.

=item␣*␣Test␣numbers␣out␣of␣sequence

␣1..3
␣ok␣1␣-␣input␣file␣opened
␣not␣ok␣2␣-␣first␣line␣of␣the␣input␣valid␣#␣todo␣some␣data
␣ok␣2␣read␣the␣rest␣of␣the␣file

That␣last␣test␣line␣above␣should␣have␣the␣number␣'3'␣instead␣of␣'2'.

Note␣that␣it's␣perfectly␣acceptable␣for␣some␣lines␣to␣have␣test␣numbers␣and
others␣to␣not␣have␣them.␣␣However,␣when␣a␣test␣number␣is␣found,␣it␣must␣be␣in
sequence.␣␣The␣following␣is␣also␣an␣error:

␣1..3
␣ok␣1␣-␣input␣file␣opened
␣not␣ok␣-␣first␣line␣of␣the␣input␣valid␣#␣todo␣some␣data
␣ok␣2␣read␣the␣rest␣of␣the␣file

But␣this␣is␣not:

␣1..3
␣ok␣␣-␣input␣file␣opened
␣not␣ok␣-␣first␣line␣of␣the␣input␣valid␣#␣todo␣some␣data
␣ok␣3␣read␣the␣rest␣of␣the␣file

=back

=cut
----------
Range: (4060897,4071295) (10398)
=head1␣CALLBACKS

As␣mentioned␣earlier,␣a␣"callback"␣key␣may␣be␣added␣to␣the
C<TAP::Parser>␣constructor.␣If␣present,␣each␣callback␣corresponding␣to␣a
given␣result␣type␣will␣be␣called␣with␣the␣result␣as␣the␣argument␣if␣the
C<run>␣method␣is␣used.␣The␣callback␣is␣expected␣to␣be␣a␣subroutine
reference␣(or␣anonymous␣subroutine)␣which␣is␣invoked␣with␣the␣parser
result␣as␣its␣argument.

␣my␣%callbacks␣=␣(
␣␣␣␣␣test␣␣␣␣=>␣\&test_callback,
␣␣␣␣␣plan␣␣␣␣=>␣\&plan_callback,
␣␣␣␣␣comment␣=>␣\&comment_callback,
␣␣␣␣␣bailout␣=>␣\&bailout_callback,
␣␣␣␣␣unknown␣=>␣\&unknown_callback,
␣);

␣my␣$aggregator␣=␣TAP::Parser::Aggregator->new;
␣for␣my␣$file␣(␣@test_files␣)␣{
␣␣␣␣␣my␣$parser␣=␣TAP::Parser->new(
␣␣␣␣␣␣␣␣␣{
␣␣␣␣␣␣␣␣␣␣␣␣␣source␣␣␣␣=>␣$file,
␣␣␣␣␣␣␣␣␣␣␣␣␣callbacks␣=>␣\%callbacks,
␣␣␣␣␣␣␣␣␣}
␣␣␣␣␣);
␣␣␣␣␣$parser->run;
␣␣␣␣␣$aggregator->add(␣$file,␣$parser␣);
␣}

Callbacks␣may␣also␣be␣added␣like␣this:

␣$parser->callback(␣test␣=>␣\&test_callback␣);
␣$parser->callback(␣plan␣=>␣\&plan_callback␣);

The␣following␣keys␣allowed␣for␣callbacks.␣These␣keys␣are␣case-sensitive.

=over␣4

=item␣*␣C<test>

Invoked␣if␣C<<␣$result->is_test␣>>␣returns␣true.

=item␣*␣C<version>

Invoked␣if␣C<<␣$result->is_version␣>>␣returns␣true.

=item␣*␣C<plan>

Invoked␣if␣C<<␣$result->is_plan␣>>␣returns␣true.

=item␣*␣C<comment>

Invoked␣if␣C<<␣$result->is_comment␣>>␣returns␣true.

=item␣*␣C<bailout>

Invoked␣if␣C<<␣$result->is_unknown␣>>␣returns␣true.

=item␣*␣C<yaml>

Invoked␣if␣C<<␣$result->is_yaml␣>>␣returns␣true.

=item␣*␣C<unknown>

Invoked␣if␣C<<␣$result->is_unknown␣>>␣returns␣true.

=item␣*␣C<ELSE>

If␣a␣result␣does␣not␣have␣a␣callback␣defined␣for␣it,␣this␣callback␣will
be␣invoked.␣Thus,␣if␣all␣of␣the␣previous␣result␣types␣are␣specified␣as
callbacks,␣this␣callback␣will␣I<never>␣be␣invoked.

=item␣*␣C<ALL>

This␣callback␣will␣always␣be␣invoked␣and␣this␣will␣happen␣for␣each
result␣after␣one␣of␣the␣above␣callbacks␣is␣invoked.␣␣For␣example,␣if
L<Term::ANSIColor>␣is␣loaded,␣you␣could␣use␣the␣following␣to␣color␣your
test␣output:

␣my␣%callbacks␣=␣(
␣␣␣␣␣test␣=>␣sub␣{
␣␣␣␣␣␣␣␣␣my␣$test␣=␣shift;
␣␣␣␣␣␣␣␣␣if␣(␣$test->is_ok␣&&␣not␣$test->directive␣)␣{
␣␣␣␣␣␣␣␣␣␣␣␣␣#␣normal␣passing␣test
␣␣␣␣␣␣␣␣␣␣␣␣␣print␣color␣'green';
␣␣␣␣␣␣␣␣␣}
␣␣␣␣␣␣␣␣␣elsif␣(␣!$test->is_ok␣)␣{␣␣␣␣#␣even␣if␣it's␣TODO
␣␣␣␣␣␣␣␣␣␣␣␣␣print␣color␣'white␣on_red';
␣␣␣␣␣␣␣␣␣}
␣␣␣␣␣␣␣␣␣elsif␣(␣$test->has_skip␣)␣{
␣␣␣␣␣␣␣␣␣␣␣␣␣print␣color␣'white␣on_blue';

␣␣␣␣␣␣␣␣␣}
␣␣␣␣␣␣␣␣␣elsif␣(␣$test->has_todo␣)␣{
␣␣␣␣␣␣␣␣␣␣␣␣␣print␣color␣'white';
␣␣␣␣␣␣␣␣␣}
␣␣␣␣␣},
␣␣␣␣␣ELSE␣=>␣sub␣{
␣␣␣␣␣␣␣␣␣#␣plan,␣comment,␣and␣so␣on␣(anything␣which␣isn't␣a␣test␣line)
␣␣␣␣␣␣␣␣␣print␣color␣'black␣on_white';
␣␣␣␣␣},
␣␣␣␣␣ALL␣=>␣sub␣{
␣␣␣␣␣␣␣␣␣#␣now␣print␣them
␣␣␣␣␣␣␣␣␣print␣shift->as_string;
␣␣␣␣␣␣␣␣␣print␣color␣'reset';
␣␣␣␣␣␣␣␣␣print␣"\n";
␣␣␣␣␣},
␣);

=item␣*␣C<EOF>

Invoked␣when␣there␣are␣no␣more␣lines␣to␣be␣parsed.␣Since␣there␣is␣no
accompanying␣L<TAP::Parser::Result>␣object␣the␣C<TAP::Parser>␣object␣is
passed␣instead.

=back

=head1␣TAP␣GRAMMAR

If␣you're␣looking␣for␣an␣EBNF␣grammar,␣see␣L<TAP::Parser::Grammar>.

=head1␣BACKWARDS␣COMPATIBILITY

The␣Perl-QA␣list␣attempted␣to␣ensure␣backwards␣compatibility␣with
L<Test::Harness>.␣␣However,␣there␣are␣some␣minor␣differences.

=head2␣Differences

=over␣4

=item␣*␣TODO␣plans

A␣little-known␣feature␣of␣L<Test::Harness>␣is␣that␣it␣supported␣TODO
lists␣in␣the␣plan:

␣1..2␣todo␣2
␣ok␣1␣-␣We␣have␣liftoff
␣not␣ok␣2␣-␣Anti-gravity␣device␣activated

Under␣L<Test::Harness>,␣test␣number␣2␣would␣I<pass>␣because␣it␣was
listed␣as␣a␣TODO␣test␣on␣the␣plan␣line.␣However,␣we␣are␣not␣aware␣of
anyone␣actually␣using␣this␣feature␣and␣hard-coding␣test␣numbers␣is
discouraged␣because␣it's␣very␣easy␣to␣add␣a␣test␣and␣break␣the␣test
number␣sequence.␣This␣makes␣test␣suites␣very␣fragile.␣Instead,␣the
following␣should␣be␣used:

␣1..2
␣ok␣1␣-␣We␣have␣liftoff
␣not␣ok␣2␣-␣Anti-gravity␣device␣activated␣#␣TODO

=item␣*␣'Missing'␣tests

It␣rarely␣happens,␣but␣sometimes␣a␣harness␣might␣encounter
'missing␣tests:

␣ok␣1
␣ok␣2
␣ok␣15
␣ok␣16
␣ok␣17

L<Test::Harness>␣would␣report␣tests␣3-14␣as␣having␣failed.␣For␣the
C<TAP::Parser>,␣these␣tests␣are␣not␣considered␣failed␣because␣they've
never␣run.␣They're␣reported␣as␣parse␣failures␣(tests␣out␣of␣sequence).

=back

=head1␣SUBCLASSING

If␣you␣find␣you␣need␣to␣provide␣custom␣functionality␣(as␣you␣would␣have␣using
L<Test::Harness::Straps>),␣you're␣in␣luck:␣C<TAP::Parser>␣and␣friends␣are
designed␣to␣be␣easily␣plugged-into␣and/or␣subclassed.

Before␣you␣start,␣it's␣important␣to␣know␣a␣few␣things:

=over␣2

=item␣1

All␣C<TAP::*>␣objects␣inherit␣from␣L<TAP::Object>.

=item␣2

Many␣C<TAP::*>␣classes␣have␣a␣I<SUBCLASSING>␣section␣to␣guide␣you.

=item␣3

Note␣that␣C<TAP::Parser>␣is␣designed␣to␣be␣the␣central␣"maker"␣-␣ie:␣it␣is
responsible␣for␣creating␣most␣new␣objects␣in␣the␣C<TAP::Parser::*>␣namespace.

This␣makes␣it␣possible␣for␣you␣to␣have␣a␣single␣point␣of␣configuring␣what
subclasses␣should␣be␣used,␣which␣means␣that␣in␣many␣cases␣you'll␣find
you␣only␣need␣to␣sub-class␣one␣of␣the␣parser's␣components.

The␣exception␣to␣this␣rule␣are␣I<SourceHandlers>␣&␣I<Iterators>,␣but␣those␣are
both␣created␣with␣customizable␣I<IteratorFactory>.

=item␣4

By␣subclassing,␣you␣may␣end␣up␣overriding␣undocumented␣methods.␣␣That's␣not
a␣bad␣thing␣per␣se,␣but␣be␣forewarned␣that␣undocumented␣methods␣may␣change
without␣warning␣from␣one␣release␣to␣the␣next␣-␣we␣cannot␣guarantee␣backwards
compatibility.␣␣If␣any␣I<documented>␣method␣needs␣changing,␣it␣will␣be
deprecated␣first,␣and␣changed␣in␣a␣later␣release.

=back

=head2␣Parser␣Components

=head3␣Sources

A␣TAP␣parser␣consumes␣input␣from␣a␣single␣I<raw␣source>␣of␣TAP,␣which␣could␣come
from␣anywhere␣(a␣file,␣an␣executable,␣a␣database,␣an␣IO␣handle,␣a␣URI,␣etc..).
The␣source␣gets␣bundled␣up␣in␣a␣L<TAP::Parser::Source>␣object␣which␣gathers␣some
meta␣data␣about␣it.␣␣The␣parser␣then␣uses␣a␣L<TAP::Parser::IteratorFactory>␣to
determine␣which␣L<TAP::Parser::SourceHandler>␣to␣use␣to␣turn␣the␣raw␣source
into␣a␣stream␣of␣TAP␣by␣way␣of␣L</Iterators>.

If␣you␣simply␣want␣C<TAP::Parser>␣to␣handle␣a␣new␣source␣of␣TAP␣you␣probably
don't␣need␣to␣subclass␣C<TAP::Parser>␣itself.␣␣Rather,␣you'll␣need␣to␣create␣a
new␣L<TAP::Parser::SourceHandler>␣class,␣and␣just␣plug␣it␣into␣the␣parser␣using
the␣I<sources>␣param␣to␣L</new>.␣␣Before␣you␣start␣writing␣one,␣read␣through
L<TAP::Parser::IteratorFactory>␣to␣get␣a␣feel␣for␣how␣the␣system␣works␣first.

If␣you␣find␣you␣really␣need␣to␣use␣your␣own␣iterator␣factory␣you␣can␣still␣do
so␣without␣sub-classing␣C<TAP::Parser>␣by␣setting␣L</iterator_factory_class>.

If␣you␣just␣need␣to␣customize␣the␣objects␣on␣creation,␣subclass␣L<TAP::Parser>
and␣override␣L</make_iterator_factory>.

Note␣that␣C<make_source>␣&␣C<make_perl_source>␣have␣been␣I<DEPRECATED>␣and
are␣now␣removed.

=head3␣Iterators

A␣TAP␣parser␣uses␣I<iterators>␣to␣loop␣through␣the␣I<stream>␣of␣TAP␣read␣in
from␣the␣I<source>␣it␣was␣given.␣␣There␣are␣a␣few␣types␣of␣Iterators␣available
by␣default,␣all␣sub-classes␣of␣L<TAP::Parser::Iterator>.␣␣Choosing␣which
iterator␣to␣use␣is␣the␣responsibility␣of␣the␣I<iterator␣factory>,␣though␣it
simply␣delegates␣to␣the␣I<Source␣Handler>␣it␣uses.

If␣you're␣writing␣your␣own␣L<TAP::Parser::SourceHandler>,␣you␣may␣need␣to
create␣your␣own␣iterators␣too.␣␣If␣so␣you'll␣need␣to␣subclass
L<TAP::Parser::Iterator>.

Note␣that␣L</make_iterator>␣has␣been␣I<DEPRECATED>␣and␣is␣now␣removed.

=head3␣Results

A␣TAP␣parser␣creates␣L<TAP::Parser::Result>s␣as␣it␣iterates␣through␣the
input␣I<stream>.␣␣There␣are␣quite␣a␣few␣result␣types␣available;␣choosing
which␣class␣to␣use␣is␣the␣responsibility␣of␣the␣I<result␣factory>.

To␣create␣your␣own␣result␣types␣you␣have␣two␣options:

=over␣2

=item␣option␣1

Subclass␣L<TAP::Parser::Result>␣and␣register␣your␣new␣result␣type/class␣with
the␣default␣L<TAP::Parser::ResultFactory>.

=item␣option␣2

Subclass␣L<TAP::Parser::ResultFactory>␣itself␣and␣implement␣your␣own
L<TAP::Parser::Result>␣creation␣logic.␣␣Then␣you'll␣need␣to␣customize␣the
class␣used␣by␣your␣parser␣by␣setting␣the␣C<result_factory_class>␣parameter.
See␣L</new>␣for␣more␣details.

=back

If␣you␣need␣to␣customize␣the␣objects␣on␣creation,␣subclass␣L<TAP::Parser>␣and
override␣L</make_result>.

=head3␣Grammar

L<TAP::Parser::Grammar>␣is␣the␣heart␣of␣the␣parser.␣␣It␣tokenizes␣the␣TAP
input␣I<stream>␣and␣produces␣results.␣␣If␣you␣need␣to␣customize␣its␣behaviour
you␣should␣probably␣familiarize␣yourself␣with␣the␣source␣first.␣␣Enough
lecturing.

Subclass␣L<TAP::Parser::Grammar>␣and␣customize␣your␣parser␣by␣setting␣the
C<grammar_class>␣parameter.␣␣See␣L</new>␣for␣more␣details.

If␣you␣need␣to␣customize␣the␣objects␣on␣creation,␣subclass␣L<TAP::Parser>␣and
override␣L</make_grammar>

=head1␣ACKNOWLEDGMENTS

All␣of␣the␣following␣have␣helped.␣Bug␣reports,␣patches,␣(im)moral
support,␣or␣just␣words␣of␣encouragement␣have␣all␣been␣forthcoming.

=over␣4

=item␣*␣Michael␣Schwern

=item␣*␣Andy␣Lester

=item␣*␣chromatic

=item␣*␣GEOFFR

=item␣*␣Shlomi␣Fish

=item␣*␣Torsten␣Schoenfeld

=item␣*␣Jerry␣Gay

=item␣*␣Aristotle

=item␣*␣Adam␣Kennedy

=item␣*␣Yves␣Orton

=item␣*␣Adrian␣Howard

=item␣*␣Sean␣&␣Lil

=item␣*␣Andreas␣J.␣Koenig

=item␣*␣Florian␣Ragwitz

=item␣*␣Corion

=item␣*␣Mark␣Stosberg

=item␣*␣Matt␣Kraai

=item␣*␣David␣Wheeler

=item␣*␣Alex␣Vandiver

=item␣*␣Cosimo␣Streppone

=item␣*␣Ville␣Skyttä

=back

=head1␣AUTHORS

Curtis␣"Ovid"␣Poe␣<ovid@cpan.org>

Andy␣Armstong␣<andy@hexten.net>

Eric␣Wilhelm␣@␣<ewilhelm␣at␣cpan␣dot␣org>

Michael␣Peters␣<mpeters␣at␣plusthree␣dot␣com>

Leif␣Eriksen␣<leif␣dot␣eriksen␣at␣bigpond␣dot␣com>

Steve␣Purkis␣<spurkis@cpan.org>

Nicholas␣Clark␣<nick@ccl4.org>

Lee␣Johnson␣<notfadeaway␣at␣btinternet␣dot␣com>

Philippe␣Bruhat␣<book@cpan.org>

=head1␣BUGS

Please␣report␣any␣bugs␣or␣feature␣requests␣to
C<bug-test-harness@rt.cpan.org>,␣or␣through␣the␣web␣interface␣at
L<http://rt.cpan.org/NoAuth/ReportBug.html?Queue=Test-Harness>.
We␣will␣be␣notified,␣and␣then␣you'll␣automatically␣be␣notified␣of
progress␣on␣your␣bug␣as␣we␣make␣changes.

Obviously,␣bugs␣which␣include␣patches␣are␣best.␣If␣you␣prefer,␣you␣can
patch␣against␣bleed␣by␣via␣anonymous␣checkout␣of␣the␣latest␣version:

␣git␣clone␣git://github.com/Perl-Toolchain-Gang/Test-Harness.git

=head1␣COPYRIGHT␣&␣LICENSE

Copyright␣2006-2008␣Curtis␣"Ovid"␣Poe,␣all␣rights␣reserved.

This␣program␣is␣free␣software;␣you␣can␣redistribute␣it␣and/or␣modify␣it
under␣the␣same␣terms␣as␣Perl␣itself.

=cut
----------
Range: (4188752,4191412) (2660)
=head1␣NAME

FileCache␣-␣keep␣more␣files␣open␣than␣the␣system␣permits

=head1␣SYNOPSIS

␣␣␣␣no␣strict␣'refs';

␣␣␣␣use␣FileCache;
␣␣␣␣#␣or
␣␣␣␣use␣FileCache␣maxopen␣=>␣16;

␣␣␣␣cacheout␣$mode,␣$path;
␣␣␣␣#␣or
␣␣␣␣cacheout␣$path;
␣␣␣␣print␣$path␣@data;

␣␣␣␣$fh␣=␣cacheout␣$mode,␣$path;
␣␣␣␣#␣or
␣␣␣␣$fh␣=␣cacheout␣$path;
␣␣␣␣print␣$fh␣@data;

=head1␣DESCRIPTION

The␣C<cacheout>␣function␣will␣make␣sure␣that␣there's␣a␣filehandle␣open
for␣reading␣or␣writing␣available␣as␣the␣pathname␣you␣give␣it.␣It
automatically␣closes␣and␣re-opens␣files␣if␣you␣exceed␣your␣system's
maximum␣number␣of␣file␣descriptors,␣or␣the␣suggested␣maximum␣I<maxopen>.

=over

=item␣cacheout␣EXPR

The␣1-argument␣form␣of␣cacheout␣will␣open␣a␣file␣for␣writing␣(C<<␣'>'␣>>)
on␣it's␣first␣use,␣and␣appending␣(C<<<␣'>>'␣>>>)␣thereafter.

Returns␣EXPR␣on␣success␣for␣convenience.␣You␣may␣neglect␣the
return␣value␣and␣manipulate␣EXPR␣as␣the␣filehandle␣directly␣if␣you␣prefer.

=item␣cacheout␣MODE,␣EXPR

The␣2-argument␣form␣of␣cacheout␣will␣use␣the␣supplied␣mode␣for␣the␣initial
and␣subsequent␣openings.␣Most␣valid␣modes␣for␣3-argument␣C<open>␣are␣supported
namely;␣C<<␣'>'␣>>,␣C<<␣'+>'␣>>,␣C<<␣'<'␣>>,␣C<<␣'<+'␣>>,␣C<<<␣'>>'␣>>>,
C<␣'|-'␣>␣and␣C<␣'-|'␣>

To␣pass␣supplemental␣arguments␣to␣a␣program␣opened␣with␣C<␣'|-'␣>␣or␣C<␣'-|'␣>
append␣them␣to␣the␣command␣string␣as␣you␣would␣system␣EXPR.

Returns␣EXPR␣on␣success␣for␣convenience.␣You␣may␣neglect␣the
return␣value␣and␣manipulate␣EXPR␣as␣the␣filehandle␣directly␣if␣you␣prefer.

=back

=head1␣CAVEATS

While␣it␣is␣permissible␣to␣C<close>␣a␣FileCache␣managed␣file,
do␣not␣do␣so␣if␣you␣are␣calling␣C<FileCache::cacheout>␣from␣a␣package␣other
than␣which␣it␣was␣imported,␣or␣with␣another␣module␣which␣overrides␣C<close>.
If␣you␣must,␣use␣C<FileCache::cacheout_close>.

Although␣FileCache␣can␣be␣used␣with␣piped␣opens␣('-|'␣or␣'|-')␣doing␣so␣is
strongly␣discouraged.␣␣If␣FileCache␣finds␣it␣necessary␣to␣close␣and␣then␣reopen
a␣pipe,␣the␣command␣at␣the␣far␣end␣of␣the␣pipe␣will␣be␣reexecuted␣-␣the␣results
of␣performing␣IO␣on␣FileCache'd␣pipes␣is␣unlikely␣to␣be␣what␣you␣expect.␣␣The
ability␣to␣use␣FileCache␣on␣pipes␣may␣be␣removed␣in␣a␣future␣release.

FileCache␣does␣not␣store␣the␣current␣file␣offset␣if␣it␣finds␣it␣necessary␣to
close␣a␣file.␣␣When␣the␣file␣is␣reopened,␣the␣offset␣will␣be␣as␣specified␣by␣the
original␣C<open>␣file␣mode.␣␣This␣could␣be␣construed␣to␣be␣a␣bug.

The␣module␣functionality␣relies␣on␣symbolic␣references,␣so␣things␣will␣break
under␣'use␣strict'␣unless␣'no␣strict␣"refs"'␣is␣also␣specified.

=head1␣BUGS

F<sys/param.h>␣lies␣with␣its␣C<NOFILE>␣define␣on␣some␣systems,
so␣you␣may␣have␣to␣set␣I<maxopen>␣yourself.

=cut
----------
Range: (4196399,4198420) (2021)
=head1␣NAME

C<IO::Socket::IP>␣-␣Family-neutral␣IP␣socket␣supporting␣both␣IPv4␣and␣IPv6

=head1␣SYNOPSIS

␣use␣IO::Socket::IP;

␣my␣$sock␣=␣IO::Socket::IP->new(
␣␣␣␣PeerHost␣=>␣"www.google.com",
␣␣␣␣PeerPort␣=>␣"http",
␣␣␣␣Type␣␣␣␣␣=>␣SOCK_STREAM,
␣)␣or␣die␣"Cannot␣construct␣socket␣-␣$@";

␣my␣$familyname␣=␣(␣$sock->sockdomain␣==␣PF_INET6␣)␣?␣"IPv6"␣:
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣(␣$sock->sockdomain␣==␣PF_INET␣␣)␣?␣"IPv4"␣:
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣"unknown";

␣printf␣"Connected␣to␣google␣via␣%s\n",␣$familyname;

=head1␣DESCRIPTION

This␣module␣provides␣a␣protocol-independent␣way␣to␣use␣IPv4␣and␣IPv6␣sockets,
intended␣as␣a␣replacement␣for␣L<IO::Socket::INET>.␣Most␣constructor␣arguments
and␣methods␣are␣provided␣in␣a␣backward-compatible␣way.␣For␣a␣list␣of␣known
differences,␣see␣the␣C<IO::Socket::INET>␣INCOMPATIBILITES␣section␣below.

It␣uses␣the␣C<getaddrinfo(3)>␣function␣to␣convert␣hostnames␣and␣service␣names
or␣port␣numbers␣into␣sets␣of␣possible␣addresses␣to␣connect␣to␣or␣listen␣on.
This␣allows␣it␣to␣work␣for␣IPv6␣where␣the␣system␣supports␣it,␣while␣still
falling␣back␣to␣IPv4-only␣on␣systems␣which␣don't.

=head1␣REPLACING␣C<IO::Socket>␣DEFAULT␣BEHAVIOUR

By␣placing␣C<-register>␣in␣the␣import␣list␣to␣C<IO::Socket::IP>,␣it␣will
register␣itself␣with␣L<IO::Socket>␣as␣the␣class␣that␣handles␣C<PF_INET>.␣It
will␣also␣ask␣to␣handle␣C<PF_INET6>␣as␣well,␣provided␣that␣constant␣is
available.

Changing␣C<IO::Socket>'s␣default␣behaviour␣means␣that␣calling␣the
C<IO::Socket>␣constructor␣with␣either␣C<PF_INET>␣or␣C<PF_INET6>␣as␣the
C<Domain>␣parameter␣will␣yield␣an␣C<IO::Socket::IP>␣object.

␣use␣IO::Socket::IP␣-register;

␣my␣$sock␣=␣IO::Socket->new(
␣␣␣␣Domain␣␣␣␣=>␣PF_INET6,
␣␣␣␣LocalHost␣=>␣"::1",
␣␣␣␣Listen␣␣␣␣=>␣1,
␣)␣or␣die␣"Cannot␣create␣socket␣-␣$@\n";

␣print␣"Created␣a␣socket␣of␣type␣"␣.␣ref($sock)␣.␣"\n";

Note␣that␣C<-register>␣is␣a␣global␣setting␣that␣applies␣to␣the␣entire␣program;
it␣cannot␣be␣applied␣only␣for␣certain␣callers,␣removed,␣or␣limited␣by␣lexical
scope.

=cut
----------
Range: (4199382,4206277) (6895)
=head2␣new

␣␣␣$sock␣=␣IO::Socket::IP->new(␣%args␣)

Creates␣a␣new␣C<IO::Socket::IP>␣object,␣containing␣a␣newly␣created␣socket
handle␣according␣to␣the␣named␣arguments␣passed.␣The␣recognised␣arguments␣are:

=over␣8

=item␣PeerHost␣=>␣STRING

=item␣PeerService␣=>␣STRING

Hostname␣and␣service␣name␣for␣the␣peer␣to␣C<connect()>␣to.␣The␣service␣name
may␣be␣given␣as␣a␣port␣number,␣as␣a␣decimal␣string.

=item␣PeerAddr␣=>␣STRING

=item␣PeerPort␣=>␣STRING

For␣symmetry␣with␣the␣accessor␣methods␣and␣compatibility␣with
C<IO::Socket::INET>,␣these␣are␣accepted␣as␣synonyms␣for␣C<PeerHost>␣and
C<PeerService>␣respectively.

=item␣PeerAddrInfo␣=>␣ARRAY

Alternate␣form␣of␣specifying␣the␣peer␣to␣C<connect()>␣to.␣This␣should␣be␣an
array␣of␣the␣form␣returned␣by␣C<Socket::getaddrinfo>.

This␣parameter␣takes␣precedence␣over␣the␣C<Peer*>,␣C<Family>,␣C<Type>␣and
C<Proto>␣arguments.

=item␣LocalHost␣=>␣STRING

=item␣LocalService␣=>␣STRING

Hostname␣and␣service␣name␣for␣the␣local␣address␣to␣C<bind()>␣to.

=item␣LocalAddr␣=>␣STRING

=item␣LocalPort␣=>␣STRING

For␣symmetry␣with␣the␣accessor␣methods␣and␣compatibility␣with
C<IO::Socket::INET>,␣these␣are␣accepted␣as␣synonyms␣for␣C<LocalHost>␣and
C<LocalService>␣respectively.

=item␣LocalAddrInfo␣=>␣ARRAY

Alternate␣form␣of␣specifying␣the␣local␣address␣to␣C<bind()>␣to.␣This␣should␣be
an␣array␣of␣the␣form␣returned␣by␣C<Socket::getaddrinfo>.

This␣parameter␣takes␣precedence␣over␣the␣C<Local*>,␣C<Family>,␣C<Type>␣and
C<Proto>␣arguments.

=item␣Family␣=>␣INT

The␣address␣family␣to␣pass␣to␣C<getaddrinfo>␣(e.g.␣C<AF_INET>,␣C<AF_INET6>).
Normally␣this␣will␣be␣left␣undefined,␣and␣C<getaddrinfo>␣will␣search␣using␣any
address␣family␣supported␣by␣the␣system.

=item␣Type␣=>␣INT

The␣socket␣type␣to␣pass␣to␣C<getaddrinfo>␣(e.g.␣C<SOCK_STREAM>,
C<SOCK_DGRAM>).␣Normally␣defined␣by␣the␣caller;␣if␣left␣undefined
C<getaddrinfo>␣may␣attempt␣to␣infer␣the␣type␣from␣the␣service␣name.

=item␣Proto␣=>␣STRING␣or␣INT

The␣IP␣protocol␣to␣use␣for␣the␣socket␣(e.g.␣C<'tcp'>,␣C<IPPROTO_TCP>,
C<'udp'>,C<IPPROTO_UDP>).␣Normally␣this␣will␣be␣left␣undefined,␣and␣either
C<getaddrinfo>␣or␣the␣kernel␣will␣choose␣an␣appropriate␣value.␣May␣be␣given
either␣in␣string␣name␣or␣numeric␣form.

=item␣GetAddrInfoFlags␣=>␣INT

More␣flags␣to␣pass␣to␣the␣C<getaddrinfo()>␣function.␣If␣not␣supplied,␣a
default␣of␣C<AI_ADDRCONFIG>␣will␣be␣used.

These␣flags␣will␣be␣combined␣with␣C<AI_PASSIVE>␣if␣the␣C<Listen>␣argument␣is
given.␣For␣more␣information␣see␣the␣documentation␣about␣C<getaddrinfo()>␣in
the␣L<Socket>␣module.

=item␣Listen␣=>␣INT

If␣defined,␣puts␣the␣socket␣into␣listening␣mode␣where␣new␣connections␣can␣be
accepted␣using␣the␣C<accept>␣method.␣The␣value␣given␣is␣used␣as␣the
C<listen(2)>␣queue␣size.

=item␣ReuseAddr␣=>␣BOOL

If␣true,␣set␣the␣C<SO_REUSEADDR>␣sockopt

=item␣ReusePort␣=>␣BOOL

If␣true,␣set␣the␣C<SO_REUSEPORT>␣sockopt␣(not␣all␣OSes␣implement␣this␣sockopt)

=item␣Broadcast␣=>␣BOOL

If␣true,␣set␣the␣C<SO_BROADCAST>␣sockopt

=item␣Sockopts␣=>␣ARRAY

An␣optional␣array␣of␣other␣socket␣options␣to␣apply␣after␣the␣three␣listed
above.␣The␣value␣is␣an␣ARRAY␣containing␣2-␣or␣3-element␣ARRAYrefs.␣Each␣inner
array␣relates␣to␣a␣single␣option,␣giving␣the␣level␣and␣option␣name,␣and␣an
optional␣value.␣If␣the␣value␣element␣is␣missing,␣it␣will␣be␣given␣the␣value␣of
a␣platform-sized␣integer␣1␣constant␣(i.e.␣suitable␣to␣enable␣most␣of␣the
common␣boolean␣options).

For␣example,␣both␣options␣given␣below␣are␣equivalent␣to␣setting␣C<ReuseAddr>.

␣Sockopts␣=>␣[
␣␣␣␣[␣SOL_SOCKET,␣SO_REUSEADDR␣],
␣␣␣␣[␣SOL_SOCKET,␣SO_REUSEADDR,␣pack(␣"i",␣1␣)␣],
␣]

=item␣V6Only␣=>␣BOOL

If␣defined,␣set␣the␣C<IPV6_V6ONLY>␣sockopt␣when␣creating␣C<PF_INET6>␣sockets
to␣the␣given␣value.␣If␣true,␣a␣listening-mode␣socket␣will␣only␣listen␣on␣the
C<AF_INET6>␣addresses;␣if␣false␣it␣will␣also␣accept␣connections␣from
C<AF_INET>␣addresses.

If␣not␣defined,␣the␣socket␣option␣will␣not␣be␣changed,␣and␣default␣value␣set
by␣the␣operating␣system␣will␣apply.␣For␣repeatable␣behaviour␣across␣platforms
it␣is␣recommended␣this␣value␣always␣be␣defined␣for␣listening-mode␣sockets.

Note␣that␣not␣all␣platforms␣support␣disabling␣this␣option.␣Some,␣at␣least
OpenBSD␣and␣MirBSD,␣will␣fail␣with␣C<EINVAL>␣if␣you␣attempt␣to␣disable␣it.
To␣determine␣whether␣it␣is␣possible␣to␣disable,␣you␣may␣use␣the␣class␣method

␣if(␣IO::Socket::IP->CAN_DISABLE_V6ONLY␣)␣{
␣␣␣␣...
␣}
␣else␣{
␣␣␣␣...
␣}

If␣your␣platform␣does␣not␣support␣disabling␣this␣option␣but␣you␣still␣want␣to
listen␣for␣both␣C<AF_INET>␣and␣C<AF_INET6>␣connections␣you␣will␣have␣to␣create
two␣listening␣sockets,␣one␣bound␣to␣each␣protocol.

=item␣MultiHomed

This␣C<IO::Socket::INET>-style␣argument␣is␣ignored,␣except␣if␣it␣is␣defined
but␣false.␣See␣the␣C<IO::Socket::INET>␣INCOMPATIBILITES␣section␣below.

However,␣the␣behaviour␣it␣enables␣is␣always␣performed␣by␣C<IO::Socket::IP>.

=item␣Blocking␣=>␣BOOL

If␣defined␣but␣false,␣the␣socket␣will␣be␣set␣to␣non-blocking␣mode.␣Otherwise
it␣will␣default␣to␣blocking␣mode.␣See␣the␣NON-BLOCKING␣section␣below␣for␣more
detail.

=item␣Timeout␣=>␣NUM

If␣defined,␣gives␣a␣maximum␣time␣in␣seconds␣to␣block␣per␣C<connect()>␣call
when␣in␣blocking␣mode.␣If␣missing,␣no␣timeout␣is␣applied␣other␣than␣that
provided␣by␣the␣underlying␣operating␣system.␣When␣in␣non-blocking␣mode␣this
parameter␣is␣ignored.

Note␣that␣if␣the␣hostname␣resolves␣to␣multiple␣address␣candidates,␣the␣same
timeout␣will␣apply␣to␣each␣connection␣attempt␣individually,␣rather␣than␣to␣the
operation␣as␣a␣whole.␣Further␣note␣that␣the␣timeout␣does␣not␣apply␣to␣the
initial␣hostname␣resolve␣operation,␣if␣connecting␣by␣hostname.

This␣behviour␣is␣copied␣inspired␣by␣C<IO::Socket::INET>;␣for␣more␣fine␣grained
control␣over␣connection␣timeouts,␣consider␣performing␣a␣nonblocking␣connect
directly.

=back

If␣neither␣C<Type>␣nor␣C<Proto>␣hints␣are␣provided,␣a␣default␣of
C<SOCK_STREAM>␣and␣C<IPPROTO_TCP>␣respectively␣will␣be␣set,␣to␣maintain
compatibility␣with␣C<IO::Socket::INET>.␣Other␣named␣arguments␣that␣are␣not
recognised␣are␣ignored.

If␣neither␣C<Family>␣nor␣any␣hosts␣or␣addresses␣are␣passed,␣nor␣any
C<*AddrInfo>,␣then␣the␣constructor␣has␣no␣information␣on␣which␣to␣decide␣a
socket␣family␣to␣create.␣In␣this␣case,␣it␣performs␣a␣C<getaddinfo>␣call␣with
the␣C<AI_ADDRCONFIG>␣flag,␣no␣host␣name,␣and␣a␣service␣name␣of␣C<"0">,␣and
uses␣the␣family␣of␣the␣first␣returned␣result.

If␣the␣constructor␣fails,␣it␣will␣set␣C<$@>␣to␣an␣appropriate␣error␣message;
this␣may␣be␣from␣C<$!>␣or␣it␣may␣be␣some␣other␣string;␣not␣every␣failure
necessarily␣has␣an␣associated␣C<errno>␣value.

=head2␣new␣(one␣arg)

␣␣␣$sock␣=␣IO::Socket::IP->new(␣$peeraddr␣)

As␣a␣special␣case,␣if␣the␣constructor␣is␣passed␣a␣single␣argument␣(as
opposed␣to␣an␣even-sized␣list␣of␣key/value␣pairs),␣it␣is␣taken␣to␣be␣the␣value
of␣the␣C<PeerAddr>␣parameter.␣This␣is␣parsed␣in␣the␣same␣way,␣according␣to␣the
behaviour␣given␣in␣the␣C<PeerHost>␣AND␣C<LocalHost>␣PARSING␣section␣below.

=cut
----------
Range: (4226146,4229001) (2855)
}

=head1␣NON-BLOCKING

If␣the␣constructor␣is␣passed␣a␣defined␣but␣false␣value␣for␣the␣C<Blocking>
argument␣then␣the␣socket␣is␣put␣into␣non-blocking␣mode.␣When␣in␣non-blocking
mode,␣the␣socket␣will␣not␣be␣set␣up␣by␣the␣time␣the␣constructor␣returns,
because␣the␣underlying␣C<connect(2)>␣syscall␣would␣otherwise␣have␣to␣block.

The␣non-blocking␣behaviour␣is␣an␣extension␣of␣the␣C<IO::Socket::INET>␣API,
unique␣to␣C<IO::Socket::IP>,␣because␣the␣former␣does␣not␣support␣multi-homed
non-blocking␣connect.

When␣using␣non-blocking␣mode,␣the␣caller␣must␣repeatedly␣check␣for
writeability␣on␣the␣filehandle␣(for␣instance␣using␣C<select>␣or␣C<IO::Poll>).
Each␣time␣the␣filehandle␣is␣ready␣to␣write,␣the␣C<connect>␣method␣must␣be
called,␣with␣no␣arguments.␣Note␣that␣some␣operating␣systems,␣most␣notably
C<MSWin32>␣do␣not␣report␣a␣C<connect()>␣failure␣using␣write-ready;␣so␣you␣must
also␣C<select()>␣for␣exceptional␣status.

While␣C<connect>␣returns␣false,␣the␣value␣of␣C<$!>␣indicates␣whether␣it␣should
be␣tried␣again␣(by␣being␣set␣to␣the␣value␣C<EINPROGRESS>,␣or␣C<EWOULDBLOCK>␣on
MSWin32),␣or␣whether␣a␣permanent␣error␣has␣occurred␣(e.g.␣C<ECONNREFUSED>).

Once␣the␣socket␣has␣been␣connected␣to␣the␣peer,␣C<connect>␣will␣return␣true
and␣the␣socket␣will␣now␣be␣ready␣to␣use.

Note␣that␣calls␣to␣the␣platform's␣underlying␣C<getaddrinfo(3)>␣function␣may
block.␣If␣C<IO::Socket::IP>␣has␣to␣perform␣this␣lookup,␣the␣constructor␣will
block␣even␣when␣in␣non-blocking␣mode.

To␣avoid␣this␣blocking␣behaviour,␣the␣caller␣should␣pass␣in␣the␣result␣of␣such
a␣lookup␣using␣the␣C<PeerAddrInfo>␣or␣C<LocalAddrInfo>␣arguments.␣This␣can␣be
achieved␣by␣using␣L<Net::LibAsyncNS>,␣or␣the␣C<getaddrinfo(3)>␣function␣can␣be
called␣in␣a␣child␣process.

␣use␣IO::Socket::IP;
␣use␣Errno␣qw(␣EINPROGRESS␣EWOULDBLOCK␣);

␣my␣@peeraddrinfo␣=␣...␣#␣Caller␣must␣obtain␣the␣getaddinfo␣result␣here

␣my␣$socket␣=␣IO::Socket::IP->new(
␣␣␣␣PeerAddrInfo␣=>␣\@peeraddrinfo,
␣␣␣␣Blocking␣␣␣␣␣=>␣0,
␣)␣or␣die␣"Cannot␣construct␣socket␣-␣$@";

␣while(␣!$socket->connect␣and␣(␣$!␣==␣EINPROGRESS␣||␣$!␣==␣EWOULDBLOCK␣)␣)␣{
␣␣␣␣my␣$wvec␣=␣'';
␣␣␣␣vec(␣$wvec,␣fileno␣$socket,␣1␣)␣=␣1;
␣␣␣␣my␣$evec␣=␣'';
␣␣␣␣vec(␣$evec,␣fileno␣$socket,␣1␣)␣=␣1;

␣␣␣␣select(␣undef,␣$wvec,␣$evec,␣undef␣)␣or␣die␣"Cannot␣select␣-␣$!";
␣}

␣die␣"Cannot␣connect␣-␣$!"␣if␣$!;

␣...

The␣example␣above␣uses␣C<select()>,␣but␣any␣similar␣mechanism␣should␣work
analogously.␣C<IO::Socket::IP>␣takes␣care␣when␣creating␣new␣socket␣filehandles
to␣preserve␣the␣actual␣file␣descriptor␣number,␣so␣such␣techniques␣as␣C<poll>
or␣C<epoll>␣should␣be␣transparent␣to␣its␣reallocation␣of␣a␣different␣socket
underneath,␣perhaps␣in␣order␣to␣switch␣protocol␣family␣between␣C<PF_INET>␣and
C<PF_INET6>.

For␣another␣example␣using␣C<IO::Poll>␣and␣C<Net::LibAsyncNS>,␣see␣the
F<examples/nonblocking_libasyncns.pl>␣file␣in␣the␣module␣distribution.

=cut
----------
Range: (4229003,4231013) (2010)
=head1␣C<PeerHost>␣AND␣C<LocalHost>␣PARSING

To␣support␣the␣C<IO::Socket::INET>␣API,␣the␣host␣and␣port␣information␣may␣be
passed␣in␣a␣single␣string␣rather␣than␣as␣two␣separate␣arguments.

If␣either␣C<LocalHost>␣or␣C<PeerHost>␣(or␣their␣C<...Addr>␣synonyms)␣have␣any
of␣the␣following␣special␣forms␣then␣special␣parsing␣is␣applied.

The␣value␣of␣the␣C<...Host>␣argument␣will␣be␣split␣to␣give␣both␣the␣hostname
and␣port␣(or␣service␣name):

␣hostname.example.org:http␣␣␣␣#␣Host␣name
␣192.0.2.1:80␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣IPv4␣address
␣[2001:db8::1]:80␣␣␣␣␣␣␣␣␣␣␣␣␣#␣IPv6␣address

In␣each␣case,␣the␣port␣or␣service␣name␣(e.g.␣C<80>)␣is␣passed␣as␣the
C<LocalService>␣or␣C<PeerService>␣argument.

Either␣of␣C<LocalService>␣or␣C<PeerService>␣(or␣their␣C<...Port>␣synonyms)␣can
be␣either␣a␣service␣name,␣a␣decimal␣number,␣or␣a␣string␣containing␣both␣a
service␣name␣and␣number,␣in␣a␣form␣such␣as

␣http(80)

In␣this␣case,␣the␣name␣(C<http>)␣will␣be␣tried␣first,␣but␣if␣the␣resolver␣does
not␣understand␣it␣then␣the␣port␣number␣(C<80>)␣will␣be␣used␣instead.

If␣the␣C<...Host>␣argument␣is␣in␣this␣special␣form␣and␣the␣corresponding
C<...Service>␣or␣C<...Port>␣argument␣is␣also␣defined,␣the␣one␣parsed␣from
the␣C<...Host>␣argument␣will␣take␣precedence␣and␣the␣other␣will␣be␣ignored.

=head2␣split_addr

␣␣␣(␣$host,␣$port␣)␣=␣IO::Socket::IP->split_addr(␣$addr␣)

Utility␣method␣that␣provides␣the␣parsing␣functionality␣described␣above.
Returns␣a␣2-element␣list,␣containing␣either␣the␣split␣hostname␣and␣port
description␣if␣it␣could␣be␣parsed,␣or␣the␣given␣address␣and␣C<undef>␣if␣it␣was
not␣recognised.

␣IO::Socket::IP->split_addr(␣"hostname:http"␣)
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣(␣"hostname",␣␣"http"␣)

␣IO::Socket::IP->split_addr(␣"192.0.2.1:80"␣)
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣(␣"192.0.2.1",␣"80"␣␣␣)

␣IO::Socket::IP->split_addr(␣"[2001:db8::1]:80"␣)
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣(␣"2001:db8::1",␣"80"␣)

␣IO::Socket::IP->split_addr(␣"something.else"␣)
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣(␣"something.else",␣undef␣)

=cut
----------
Range: (4232702,4234454) (1752)
}

=head1␣C<IO::Socket::INET>␣INCOMPATIBILITES

=over␣4

=item␣*

The␣behaviour␣enabled␣by␣C<MultiHomed>␣is␣in␣fact␣implemented␣by
C<IO::Socket::IP>␣as␣it␣is␣required␣to␣correctly␣support␣searching␣for␣a
useable␣address␣from␣the␣results␣of␣the␣C<getaddrinfo(3)>␣call.␣The
constructor␣will␣ignore␣the␣value␣of␣this␣argument,␣except␣if␣it␣is␣defined
but␣false.␣An␣exception␣is␣thrown␣in␣this␣case,␣because␣that␣would␣request␣it
disable␣the␣C<getaddrinfo(3)>␣search␣behaviour␣in␣the␣first␣place.

=item␣*

C<IO::Socket::IP>␣implements␣both␣the␣C<Blocking>␣and␣C<Timeout>␣parameters,
but␣it␣implements␣the␣interaction␣of␣both␣in␣a␣different␣way.

In␣C<::INET>,␣supplying␣a␣timeout␣overrides␣the␣non-blocking␣behaviour,
meaning␣that␣the␣C<connect()>␣operation␣will␣still␣block␣despite␣that␣the
caller␣asked␣for␣a␣non-blocking␣socket.␣This␣is␣not␣explicitly␣specified␣in
its␣documentation,␣nor␣does␣this␣author␣believe␣that␣is␣a␣useful␣behaviour␣-
it␣appears␣to␣come␣from␣a␣quirk␣of␣implementation.

In␣C<::IP>␣therefore,␣the␣C<Blocking>␣parameter␣takes␣precedence␣-␣if␣a
non-blocking␣socket␣is␣requested,␣no␣operation␣will␣block.␣The␣C<Timeout>
parameter␣here␣simply␣defines␣the␣maximum␣time␣that␣a␣blocking␣C<connect()>
call␣will␣wait,␣if␣it␣blocks␣at␣all.

In␣order␣to␣specifically␣obtain␣the␣"blocking␣connect␣then␣non-blocking␣send
and␣receive"␣behaviour␣of␣specifying␣this␣combination␣of␣options␣to␣C<::INET>
when␣using␣C<::IP>,␣perform␣first␣a␣blocking␣connect,␣then␣afterwards␣turn␣the
socket␣into␣nonblocking␣mode.

␣my␣$sock␣=␣IO::Socket::IP->new(
␣␣␣␣PeerHost␣=>␣$peer,
␣␣␣␣Timeout␣=>␣20,
␣)␣or␣die␣"Cannot␣connect␣-␣$@";

␣$sock->blocking(␣0␣);

This␣code␣will␣behave␣identically␣under␣both␣C<IO::Socket::INET>␣and
C<IO::Socket::IP>.

=back

=cut
----------
Range: (4234918,4241966) (7048)
=head1␣NAME

IO::Zlib␣-␣IO::␣style␣interface␣to␣L<Compress::Zlib>

=head1␣SYNOPSIS

With␣any␣version␣of␣Perl␣5␣you␣can␣use␣the␣basic␣OO␣interface:

␣␣␣␣use␣IO::Zlib;

␣␣␣␣$fh␣=␣new␣IO::Zlib;
␣␣␣␣if␣($fh->open("file.gz",␣"rb"))␣{
␣␣␣␣␣␣␣␣print␣<$fh>;
␣␣␣␣␣␣␣␣$fh->close;
␣␣␣␣}

␣␣␣␣$fh␣=␣IO::Zlib->new("file.gz",␣"wb9");
␣␣␣␣if␣(defined␣$fh)␣{
␣␣␣␣␣␣␣␣print␣$fh␣"bar\n";
␣␣␣␣␣␣␣␣$fh->close;
␣␣␣␣}

␣␣␣␣$fh␣=␣IO::Zlib->new("file.gz",␣"rb");
␣␣␣␣if␣(defined␣$fh)␣{
␣␣␣␣␣␣␣␣print␣<$fh>;
␣␣␣␣␣␣␣␣undef␣$fh;␣␣␣␣␣␣␣#␣automatically␣closes␣the␣file
␣␣␣␣}

With␣Perl␣5.004␣you␣can␣also␣use␣the␣TIEHANDLE␣interface␣to␣access
compressed␣files␣just␣like␣ordinary␣files:

␣␣␣␣use␣IO::Zlib;

␣␣␣␣tie␣*FILE,␣'IO::Zlib',␣"file.gz",␣"wb";
␣␣␣␣print␣FILE␣"line␣1\nline2\n";

␣␣␣␣tie␣*FILE,␣'IO::Zlib',␣"file.gz",␣"rb";
␣␣␣␣while␣(<FILE>)␣{␣print␣"LINE:␣",␣$_␣};

=head1␣DESCRIPTION

C<IO::Zlib>␣provides␣an␣IO::␣style␣interface␣to␣L<Compress::Zlib>␣and
hence␣to␣gzip/zlib␣compressed␣files.␣It␣provides␣many␣of␣the␣same␣methods
as␣the␣L<IO::Handle>␣interface.

Starting␣from␣IO::Zlib␣version␣1.02,␣IO::Zlib␣can␣also␣use␣an
external␣F<gzip>␣command.␣␣The␣default␣behaviour␣is␣to␣try␣to␣use
an␣external␣F<gzip>␣if␣no␣C<Compress::Zlib>␣can␣be␣loaded,␣unless
explicitly␣disabled␣by

␣␣␣␣use␣IO::Zlib␣qw(:gzip_external␣0);

If␣explicitly␣enabled␣by

␣␣␣␣use␣IO::Zlib␣qw(:gzip_external␣1);

then␣the␣external␣F<gzip>␣is␣used␣B<instead>␣of␣C<Compress::Zlib>.

=head1␣CONSTRUCTOR

=over␣4

=item␣new␣(␣[ARGS]␣)

Creates␣an␣C<IO::Zlib>␣object.␣If␣it␣receives␣any␣parameters,␣they␣are
passed␣to␣the␣method␣C<open>;␣if␣the␣open␣fails,␣the␣object␣is␣destroyed.
Otherwise,␣it␣is␣returned␣to␣the␣caller.

=back

=head1␣OBJECT␣METHODS

=over␣4

=item␣open␣(␣FILENAME,␣MODE␣)

C<open>␣takes␣two␣arguments.␣The␣first␣is␣the␣name␣of␣the␣file␣to␣open
and␣the␣second␣is␣the␣open␣mode.␣The␣mode␣can␣be␣anything␣acceptable␣to
L<Compress::Zlib>␣and␣by␣extension␣anything␣acceptable␣to␣I<zlib>␣(that
basically␣means␣POSIX␣fopen()␣style␣mode␣strings␣plus␣an␣optional␣number
to␣indicate␣the␣compression␣level).

=item␣opened

Returns␣true␣if␣the␣object␣currently␣refers␣to␣a␣opened␣file.

=item␣close

Close␣the␣file␣associated␣with␣the␣object␣and␣disassociate
the␣file␣from␣the␣handle.
Done␣automatically␣on␣destroy.

=item␣getc

Return␣the␣next␣character␣from␣the␣file,␣or␣undef␣if␣none␣remain.

=item␣getline

Return␣the␣next␣line␣from␣the␣file,␣or␣undef␣on␣end␣of␣string.
Can␣safely␣be␣called␣in␣an␣array␣context.
Currently␣ignores␣$/␣($INPUT_RECORD_SEPARATOR␣or␣$RS␣when␣L<English>
is␣in␣use)␣and␣treats␣lines␣as␣delimited␣by␣"\n".

=item␣getlines

Get␣all␣remaining␣lines␣from␣the␣file.
It␣will␣croak()␣if␣accidentally␣called␣in␣a␣scalar␣context.

=item␣print␣(␣ARGS...␣)

Print␣ARGS␣to␣the␣␣file.

=item␣read␣(␣BUF,␣NBYTES,␣[OFFSET]␣)

Read␣some␣bytes␣from␣the␣file.
Returns␣the␣number␣of␣bytes␣actually␣read,␣0␣on␣end-of-file,␣undef␣on␣error.

=item␣eof

Returns␣true␣if␣the␣handle␣is␣currently␣positioned␣at␣end␣of␣file?

=item␣seek␣(␣OFFSET,␣WHENCE␣)

Seek␣to␣a␣given␣position␣in␣the␣stream.
Not␣yet␣supported.

=item␣tell

Return␣the␣current␣position␣in␣the␣stream,␣as␣a␣numeric␣offset.
Not␣yet␣supported.

=item␣setpos␣(␣POS␣)

Set␣the␣current␣position,␣using␣the␣opaque␣value␣returned␣by␣C<getpos()>.
Not␣yet␣supported.

=item␣getpos␣(␣POS␣)

Return␣the␣current␣position␣in␣the␣string,␣as␣an␣opaque␣object.
Not␣yet␣supported.

=back

=head1␣USING␣THE␣EXTERNAL␣GZIP

If␣the␣external␣F<gzip>␣is␣used,␣the␣following␣C<open>s␣are␣used:

␣␣␣␣open(FH,␣"gzip␣-dc␣$filename␣|")␣␣#␣for␣read␣opens
␣␣␣␣open(FH,␣"␣|␣gzip␣>␣$filename")␣␣␣#␣for␣write␣opens

You␣can␣modify␣the␣'commands'␣for␣example␣to␣hardwire
an␣absolute␣path␣by␣e.g.

␣␣␣␣use␣IO::Zlib␣':gzip_read_open'␣␣=>␣'/some/where/gunzip␣-c␣%s␣|';
␣␣␣␣use␣IO::Zlib␣':gzip_write_open'␣=>␣'|␣/some/where/gzip.exe␣>␣%s';

The␣C<%s>␣is␣expanded␣to␣be␣the␣filename␣(C<sprintf>␣is␣used,␣so␣be
careful␣to␣escape␣any␣other␣C<%>␣signs).␣␣The␣'commands'␣are␣checked
for␣sanity␣-␣they␣must␣contain␣the␣C<%s>,␣and␣the␣read␣open␣must␣end
with␣the␣pipe␣sign,␣and␣the␣write␣open␣must␣begin␣with␣the␣pipe␣sign.

=head1␣CLASS␣METHODS

=over␣4

=item␣has_Compress_Zlib

Returns␣true␣if␣C<Compress::Zlib>␣is␣available.␣␣Note␣that␣this␣does
not␣mean␣that␣C<Compress::Zlib>␣is␣being␣used:␣see␣L</gzip_external>
and␣L<gzip_used>.

=item␣gzip_external

Undef␣if␣an␣external␣F<gzip>␣B<can>␣be␣used␣if␣C<Compress::Zlib>␣is
not␣available␣(see␣L</has_Compress_Zlib>),␣true␣if␣an␣external␣F<gzip>
is␣explicitly␣used,␣false␣if␣an␣external␣F<gzip>␣must␣not␣be␣used.
See␣L</gzip_used>.

=item␣gzip_used

True␣if␣an␣external␣F<gzip>␣is␣being␣used,␣false␣if␣not.

=item␣gzip_read_open

Return␣the␣'command'␣being␣used␣for␣opening␣a␣file␣for␣reading␣using␣an
external␣F<gzip>.

=item␣gzip_write_open

Return␣the␣'command'␣being␣used␣for␣opening␣a␣file␣for␣writing␣using␣an
external␣F<gzip>.

=back

=head1␣DIAGNOSTICS

=over␣4

=item␣IO::Zlib::getlines:␣must␣be␣called␣in␣list␣context

If␣you␣want␣read␣lines,␣you␣must␣read␣in␣list␣context.

=item␣IO::Zlib::gzopen_external:␣mode␣'...'␣is␣illegal

Use␣only␣modes␣'rb'␣or␣'wb'␣or␣/wb[1-9]/.

=item␣IO::Zlib::import:␣'...'␣is␣illegal

The␣known␣import␣symbols␣are␣the␣C<:gzip_external>,␣C<:gzip_read_open>,
and␣C<:gzip_write_open>.␣␣Anything␣else␣is␣not␣recognized.

=item␣IO::Zlib::import:␣':gzip_external'␣requires␣an␣argument

The␣C<:gzip_external>␣requires␣one␣boolean␣argument.

=item␣IO::Zlib::import:␣'gzip_read_open'␣requires␣an␣argument

The␣C<:gzip_external>␣requires␣one␣string␣argument.

=item␣IO::Zlib::import:␣'gzip_read'␣'...'␣is␣illegal

The␣C<:gzip_read_open>␣argument␣must␣end␣with␣the␣pipe␣sign␣(|)
and␣have␣the␣C<%s>␣for␣the␣filename.␣␣See␣L</"USING␣THE␣EXTERNAL␣GZIP">.

=item␣IO::Zlib::import:␣'gzip_write_open'␣requires␣an␣argument

The␣C<:gzip_external>␣requires␣one␣string␣argument.

=item␣IO::Zlib::import:␣'gzip_write_open'␣'...'␣is␣illegal

The␣C<:gzip_write_open>␣argument␣must␣begin␣with␣the␣pipe␣sign␣(|)
and␣have␣the␣C<%s>␣for␣the␣filename.␣␣An␣output␣redirect␣(>)␣is␣also
often␣a␣good␣idea,␣depending␣on␣your␣operating␣system␣shell␣syntax.
See␣L</"USING␣THE␣EXTERNAL␣GZIP">.

=item␣IO::Zlib::import:␣no␣Compress::Zlib␣and␣no␣external␣gzip

Given␣that␣we␣failed␣to␣load␣C<Compress::Zlib>␣and␣that␣the␣use␣of
␣an␣external␣F<gzip>␣was␣disabled,␣IO::Zlib␣has␣not␣much␣chance␣of␣working.

=item␣IO::Zlib::open:␣needs␣a␣filename

No␣filename,␣no␣open.

=item␣IO::Zlib::READ:␣NBYTES␣must␣be␣specified

We␣must␣know␣how␣much␣to␣read.

=item␣IO::Zlib::WRITE:␣too␣long␣LENGTH

The␣LENGTH␣must␣be␣less␣than␣or␣equal␣to␣the␣buffer␣size.

=back

=head1␣SEE␣ALSO

L<perlfunc>,
L<perlop/"I/O␣Operators">,
L<IO::Handle>,
L<Compress::Zlib>

=head1␣HISTORY

Created␣by␣Tom␣Hughes␣E<lt>F<tom@compton.nu>E<gt>.

Support␣for␣external␣gzip␣added␣by␣Jarkko␣Hietaniemi␣E<lt>F<jhi@iki.fi>E<gt>.

=head1␣COPYRIGHT

Copyright␣(c)␣1998-2004␣Tom␣Hughes␣E<lt>F<tom@compton.nu>E<gt>.
All␣rights␣reserved.␣This␣program␣is␣free␣software;␣you␣can␣redistribute
it␣and/or␣modify␣it␣under␣the␣same␣terms␣as␣Perl␣itself.

=cut
----------
Range: (4477692,4479894) (2202)
=pod

=head1␣NAME

IPC::Cmd␣-␣finding␣and␣running␣system␣commands␣made␣easy

=head1␣SYNOPSIS

␣␣␣␣use␣IPC::Cmd␣qw[can_run␣run␣run_forked];

␣␣␣␣my␣$full_path␣=␣can_run('wget')␣or␣warn␣'wget␣is␣not␣installed!';

␣␣␣␣###␣commands␣can␣be␣arrayrefs␣or␣strings␣###
␣␣␣␣my␣$cmd␣=␣"$full_path␣-b␣theregister.co.uk";
␣␣␣␣my␣$cmd␣=␣[$full_path,␣'-b',␣'theregister.co.uk'];

␣␣␣␣###␣in␣scalar␣context␣###
␣␣␣␣my␣$buffer;
␣␣␣␣if(␣scalar␣run(␣command␣=>␣$cmd,
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣verbose␣=>␣0,
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣buffer␣␣=>␣\$buffer,
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣timeout␣=>␣20␣)
␣␣␣␣)␣{
␣␣␣␣␣␣␣␣print␣"fetched␣webpage␣successfully:␣$buffer\n";
␣␣␣␣}


␣␣␣␣###␣in␣list␣context␣###
␣␣␣␣my(␣$success,␣$error_message,␣$full_buf,␣$stdout_buf,␣$stderr_buf␣)␣=
␣␣␣␣␣␣␣␣␣␣␣␣run(␣command␣=>␣$cmd,␣verbose␣=>␣0␣);

␣␣␣␣if(␣$success␣)␣{
␣␣␣␣␣␣␣␣print␣"this␣is␣what␣the␣command␣printed:\n";
␣␣␣␣␣␣␣␣print␣join␣"",␣@$full_buf;
␣␣␣␣}

␣␣␣␣###␣run_forked␣example␣###
␣␣␣␣my␣$result␣=␣run_forked("$full_path␣-q␣-O␣-␣theregister.co.uk",␣{'timeout'␣=>␣20});
␣␣␣␣if␣($result->{'exit_code'}␣eq␣0␣&&␣!$result->{'timeout'})␣{
␣␣␣␣␣␣␣␣print␣"this␣is␣what␣wget␣returned:\n";
␣␣␣␣␣␣␣␣print␣$result->{'stdout'};
␣␣␣␣}

␣␣␣␣###␣check␣for␣features
␣␣␣␣print␣"IPC::Open3␣available:␣"␣␣.␣IPC::Cmd->can_use_ipc_open3;
␣␣␣␣print␣"IPC::Run␣available:␣"␣␣␣␣.␣IPC::Cmd->can_use_ipc_run;
␣␣␣␣print␣"Can␣capture␣buffer:␣"␣␣␣␣.␣IPC::Cmd->can_capture_buffer;

␣␣␣␣###␣don't␣have␣IPC::Cmd␣be␣verbose,␣ie␣don't␣print␣to␣stdout␣or
␣␣␣␣###␣stderr␣when␣running␣commands␣--␣default␣is␣'0'
␣␣␣␣$IPC::Cmd::VERBOSE␣=␣0;


=head1␣DESCRIPTION

IPC::Cmd␣allows␣you␣to␣run␣commands␣platform␣independently,
interactively␣if␣desired,␣but␣have␣them␣still␣work.

The␣C<can_run>␣function␣can␣tell␣you␣if␣a␣certain␣binary␣is␣installed
and␣if␣so␣where,␣whereas␣the␣C<run>␣function␣can␣actually␣execute␣any
of␣the␣commands␣you␣give␣it␣and␣give␣you␣a␣clear␣return␣value,␣as␣well
as␣adhere␣to␣your␣verbosity␣settings.

=head1␣CLASS␣METHODS

=head2␣$ipc_run_version␣=␣IPC::Cmd->can_use_ipc_run(␣[VERBOSE]␣)

Utility␣function␣that␣tells␣you␣if␣C<IPC::Run>␣is␣available.
If␣the␣C<verbose>␣flag␣is␣passed,␣it␣will␣print␣diagnostic␣messages
if␣L<IPC::Run>␣can␣not␣be␣found␣or␣loaded.

=cut
----------
Range: (4483197,4486110) (2913)
}

=head2␣$ok␣|␣($ok,␣$err,␣$full_buf,␣$stdout_buff,␣$stderr_buff)␣=␣run(␣command␣=>␣COMMAND,␣[verbose␣=>␣BOOL,␣buffer␣=>␣\$SCALAR,␣timeout␣=>␣DIGIT]␣);

C<run>␣takes␣4␣arguments:

=over␣4

=item␣command

This␣is␣the␣command␣to␣execute.␣It␣may␣be␣either␣a␣string␣or␣an␣array
reference.
This␣is␣a␣required␣argument.

See␣L<"Caveats">␣for␣remarks␣on␣how␣commands␣are␣parsed␣and␣their
limitations.

=item␣verbose

This␣controls␣whether␣all␣output␣of␣a␣command␣should␣also␣be␣printed
to␣STDOUT/STDERR␣or␣should␣only␣be␣trapped␣in␣buffers␣(NOTE:␣buffers
require␣L<IPC::Run>␣to␣be␣installed,␣or␣your␣system␣able␣to␣work␣with
L<IPC::Open3>).

It␣will␣default␣to␣the␣global␣setting␣of␣C<$IPC::Cmd::VERBOSE>,
which␣by␣default␣is␣0.

=item␣buffer

This␣will␣hold␣all␣the␣output␣of␣a␣command.␣It␣needs␣to␣be␣a␣reference
to␣a␣scalar.
Note␣that␣this␣will␣hold␣both␣the␣STDOUT␣and␣STDERR␣messages,␣and␣you
have␣no␣way␣of␣telling␣which␣is␣which.
If␣you␣require␣this␣distinction,␣run␣the␣C<run>␣command␣in␣list␣context
and␣inspect␣the␣individual␣buffers.

Of␣course,␣this␣requires␣that␣the␣underlying␣call␣supports␣buffers.␣See
the␣note␣on␣buffers␣above.

=item␣timeout

Sets␣the␣maximum␣time␣the␣command␣is␣allowed␣to␣run␣before␣aborting,
using␣the␣built-in␣C<alarm()>␣call.␣If␣the␣timeout␣is␣triggered,␣the
C<errorcode>␣in␣the␣return␣value␣will␣be␣set␣to␣an␣object␣of␣the
C<IPC::Cmd::TimeOut>␣class.␣See␣the␣L<"error␣message">␣section␣below␣for
details.

Defaults␣to␣C<0>,␣meaning␣no␣timeout␣is␣set.

=back

C<run>␣will␣return␣a␣simple␣C<true>␣or␣C<false>␣when␣called␣in␣scalar
context.
In␣list␣context,␣you␣will␣be␣returned␣a␣list␣of␣the␣following␣items:

=over␣4

=item␣success

A␣simple␣boolean␣indicating␣if␣the␣command␣executed␣without␣errors␣or
not.

=item␣error␣message

If␣the␣first␣element␣of␣the␣return␣value␣(C<success>)␣was␣0,␣then␣some
error␣occurred.␣This␣second␣element␣is␣the␣error␣message␣the␣command
you␣requested␣exited␣with,␣if␣available.␣This␣is␣generally␣a␣pretty
printed␣value␣of␣C<$?>␣or␣C<$@>.␣See␣C<perldoc␣perlvar>␣for␣details␣on
what␣they␣can␣contain.
If␣the␣error␣was␣a␣timeout,␣the␣C<error␣message>␣will␣be␣prefixed␣with
the␣string␣C<IPC::Cmd::TimeOut>,␣the␣timeout␣class.

=item␣full_buffer

This␣is␣an␣array␣reference␣containing␣all␣the␣output␣the␣command
generated.
Note␣that␣buffers␣are␣only␣available␣if␣you␣have␣L<IPC::Run>␣installed,
or␣if␣your␣system␣is␣able␣to␣work␣with␣L<IPC::Open3>␣--␣see␣below).
Otherwise,␣this␣element␣will␣be␣C<undef>.

=item␣out_buffer

This␣is␣an␣array␣reference␣containing␣all␣the␣output␣sent␣to␣STDOUT␣the
command␣generated.␣The␣notes␣from␣L<"full_buffer">␣apply.

=item␣error_buffer

This␣is␣an␣arrayreference␣containing␣all␣the␣output␣sent␣to␣STDERR␣the
command␣generated.␣The␣notes␣from␣L<"full_buffer">␣apply.


=back

See␣the␣L<"HOW␣IT␣WORKS">␣section␣below␣to␣see␣how␣C<IPC::Cmd>␣decides
what␣modules␣or␣function␣calls␣to␣use␣when␣issuing␣a␣command.

=cut
----------
Range: (4495894,4499817) (3923)
}
}

=head2␣$hashref␣=␣run_forked(␣COMMAND,␣{␣child_stdin␣=>␣SCALAR,␣timeout␣=>␣DIGIT,␣stdout_handler␣=>␣CODEREF,␣stderr_handler␣=>␣CODEREF}␣);

C<run_forked>␣is␣used␣to␣execute␣some␣program␣or␣a␣coderef,
optionally␣feed␣it␣with␣some␣input,␣get␣its␣return␣code
and␣output␣(both␣stdout␣and␣stderr␣into␣separate␣buffers).
In␣addition,␣it␣allows␣to␣terminate␣the␣program
if␣it␣takes␣too␣long␣to␣finish.

The␣important␣and␣distinguishing␣feature␣of␣run_forked
is␣execution␣timeout␣which␣at␣first␣seems␣to␣be
quite␣a␣simple␣task␣but␣if␣you␣think
that␣the␣program␣which␣you're␣spawning
might␣spawn␣some␣children␣itself␣(which
in␣their␣turn␣could␣do␣the␣same␣and␣so␣on)
it␣turns␣out␣to␣be␣not␣a␣simple␣issue.

C<run_forked>␣is␣designed␣to␣survive␣and
successfully␣terminate␣almost␣any␣long␣running␣task,
even␣a␣fork␣bomb␣in␣case␣your␣system␣has␣the␣resources
to␣survive␣during␣given␣timeout.

This␣is␣achieved␣by␣creating␣separate␣watchdog␣process
which␣spawns␣the␣specified␣program␣in␣a␣separate
process␣session␣and␣supervises␣it:␣optionally
feeds␣it␣with␣input,␣stores␣its␣exit␣code,
stdout␣and␣stderr,␣terminates␣it␣in␣case
it␣runs␣longer␣than␣specified.

Invocation␣requires␣the␣command␣to␣be␣executed␣or␣a␣coderef␣and␣optionally␣a␣hashref␣of␣options:

=over

=item␣C<timeout>

Specify␣in␣seconds␣how␣long␣to␣run␣the␣command␣before␣it␣is␣killed␣with␣SIG_KILL␣(9),
which␣effectively␣terminates␣it␣and␣all␣of␣its␣children␣(direct␣or␣indirect).

=item␣C<child_stdin>

Specify␣some␣text␣that␣will␣be␣passed␣into␣the␣C<STDIN>␣of␣the␣executed␣program.

=item␣C<stdout_handler>

Coderef␣of␣a␣subroutine␣to␣call␣when␣a␣portion␣of␣data␣is␣received␣on
STDOUT␣from␣the␣executing␣program.

=item␣C<stderr_handler>

Coderef␣of␣a␣subroutine␣to␣call␣when␣a␣portion␣of␣data␣is␣received␣on
STDERR␣from␣the␣executing␣program.

=item␣C<wait_loop_callback>

Coderef␣of␣a␣subroutine␣to␣call␣inside␣of␣the␣main␣waiting␣loop
(while␣C<run_forked>␣waits␣for␣the␣external␣to␣finish␣or␣fail).
It␣is␣useful␣to␣stop␣running␣external␣process␣before␣it␣ends
by␣itself,␣e.g.

␣␣my␣$r␣=␣run_forked("some␣external␣command",␣{
	␣␣'wait_loop_callback'␣=>␣sub␣{
␣␣␣␣␣␣␣␣␣␣if␣(condition)␣{
␣␣␣␣␣␣␣␣␣␣␣␣␣␣kill(1,␣$$);
␣␣␣␣␣␣␣␣␣␣}
	␣␣},
	␣␣'terminate_on_signal'␣=>␣'HUP',
	␣␣});

Combined␣with␣C<stdout_handler>␣and␣C<stderr_handler>␣allows␣terminating
external␣command␣based␣on␣its␣output.␣Could␣also␣be␣used␣as␣a␣timer
without␣engaging␣with␣L<alarm>␣(signals).

Remember␣that␣this␣code␣could␣be␣called␣every␣millisecond␣(depending
on␣the␣output␣which␣external␣command␣generates),␣so␣try␣to␣make␣it
as␣lightweight␣as␣possible.

=item␣C<discard_output>

Discards␣the␣buffering␣of␣the␣standard␣output␣and␣standard␣errors␣for␣return␣by␣run_forked().
With␣this␣option␣you␣have␣to␣use␣the␣std*_handlers␣to␣read␣what␣the␣command␣outputs.
Useful␣for␣commands␣that␣send␣a␣lot␣of␣output.

=item␣C<terminate_on_parent_sudden_death>

Enable␣this␣option␣if␣you␣wish␣all␣spawned␣processes␣to␣be␣killed␣if␣the␣initially␣spawned
process␣(the␣parent)␣is␣killed␣or␣dies␣without␣waiting␣for␣child␣processes.

=back

C<run_forked>␣will␣return␣a␣HASHREF␣with␣the␣following␣keys:

=over

=item␣C<exit_code>

The␣exit␣code␣of␣the␣executed␣program.

=item␣C<timeout>

The␣number␣of␣seconds␣the␣program␣ran␣for␣before␣being␣terminated,␣or␣0␣if␣no␣timeout␣occurred.

=item␣C<stdout>

Holds␣the␣standard␣output␣of␣the␣executed␣command␣(or␣empty␣string␣if
there␣was␣no␣STDOUT␣output␣or␣if␣C<discard_output>␣was␣used;␣it's␣always␣defined!)

=item␣C<stderr>

Holds␣the␣standard␣error␣of␣the␣executed␣command␣(or␣empty␣string␣if
there␣was␣no␣STDERR␣output␣or␣if␣C<discard_output>␣was␣used;␣it's␣always␣defined!)

=item␣C<merged>

Holds␣the␣standard␣output␣and␣error␣of␣the␣executed␣command␣merged␣into␣one␣stream
(or␣empty␣string␣if␣there␣was␣no␣output␣at␣all␣or␣if␣C<discard_output>␣was␣used;␣it's␣always␣defined!)

=item␣C<err_msg>

Holds␣some␣explanation␣in␣the␣case␣of␣an␣error.

=back

=cut
----------
Range: (4537293,4540769) (3476)
=head1␣NAME

IPC::Open2␣-␣open␣a␣process␣for␣both␣reading␣and␣writing␣using␣open2()

=head1␣SYNOPSIS

␣␣␣␣use␣IPC::Open2;

␣␣␣␣my␣$pid␣=␣open2(my␣$chld_out,␣my␣$chld_in,
␣␣␣␣␣␣'some',␣'cmd',␣'and',␣'args');
␣␣␣␣#␣or␣passing␣the␣command␣through␣the␣shell
␣␣␣␣my␣$pid␣=␣open2(my␣$chld_out,␣my␣$chld_in,␣'some␣cmd␣and␣args');

␣␣␣␣#␣read␣from␣parent␣STDIN␣and␣write␣to␣already␣open␣handle
␣␣␣␣open␣my␣$outfile,␣'>',␣'outfile.txt'␣or␣die␣"open␣failed:␣$!";
␣␣␣␣my␣$pid␣=␣open2($outfile,␣'<&STDIN',␣'some',␣'cmd',␣'and',␣'args');

␣␣␣␣#␣read␣from␣already␣open␣handle␣and␣write␣to␣parent␣STDOUT
␣␣␣␣open␣my␣$infile,␣'<',␣'infile.txt'␣or␣die␣"open␣failed:␣$!";
␣␣␣␣my␣$pid␣=␣open2('>&STDOUT',␣$infile,␣'some',␣'cmd',␣'and',␣'args');

␣␣␣␣#␣reap␣zombie␣and␣retrieve␣exit␣status
␣␣␣␣waitpid(␣$pid,␣0␣);
␣␣␣␣my␣$child_exit_status␣=␣$?␣>>␣8;

=head1␣DESCRIPTION

The␣open2()␣function␣runs␣the␣given␣command␣and␣connects␣$chld_out␣for
reading␣and␣$chld_in␣for␣writing.␣␣It's␣what␣you␣think␣should␣work␣
when␣you␣try

␣␣␣␣my␣$pid␣=␣open(my␣$fh,␣"|cmd␣args|");

The␣$chld_in␣filehandle␣will␣have␣autoflush␣turned␣on.

If␣$chld_out␣is␣a␣string␣(that␣is,␣a␣bareword␣filehandle␣rather␣than␣a␣glob
or␣a␣reference)␣and␣it␣begins␣with␣C<<␣>&␣>>,␣then␣the␣child␣will␣send␣output
directly␣to␣that␣file␣handle.␣␣If␣$chld_in␣is␣a␣string␣that␣begins␣with
C<<␣<&␣>>,␣then␣$chld_in␣will␣be␣closed␣in␣the␣parent,␣and␣the␣child␣will
read␣from␣it␣directly.␣␣In␣both␣cases,␣there␣will␣be␣a␣L<dup(2)>␣instead␣of␣a
L<pipe(2)>␣made.

If␣either␣reader␣or␣writer␣is␣the␣empty␣string␣or␣undefined,␣this␣will␣be
replaced␣by␣an␣autogenerated␣filehandle.␣␣If␣so,␣you␣must␣pass␣a␣valid␣lvalue
in␣the␣parameter␣slot␣so␣it␣can␣be␣overwritten␣in␣the␣caller,␣or
an␣exception␣will␣be␣raised.

open2()␣returns␣the␣process␣ID␣of␣the␣child␣process.␣␣It␣doesn't␣return␣on
failure:␣it␣just␣raises␣an␣exception␣matching␣C</^open2:/>.␣␣However,
C<exec>␣failures␣in␣the␣child␣are␣not␣detected.␣␣You'll␣have␣to
trap␣SIGPIPE␣yourself.

open2()␣does␣not␣wait␣for␣and␣reap␣the␣child␣process␣after␣it␣exits.
Except␣for␣short␣programs␣where␣it's␣acceptable␣to␣let␣the␣operating␣system
take␣care␣of␣this,␣you␣need␣to␣do␣this␣yourself.␣␣This␣is␣normally␣as
simple␣as␣calling␣C<waitpid␣$pid,␣0>␣when␣you're␣done␣with␣the␣process.
Failing␣to␣do␣this␣can␣result␣in␣an␣accumulation␣of␣defunct␣or␣"zombie"
processes.␣␣See␣L<perlfunc/waitpid>␣for␣more␣information.

This␣whole␣affair␣is␣quite␣dangerous,␣as␣you␣may␣block␣forever.␣␣It
assumes␣it's␣going␣to␣talk␣to␣something␣like␣L<bc(1)>,␣both␣writing
to␣it␣and␣reading␣from␣it.␣␣This␣is␣presumably␣safe␣because␣you
"know"␣that␣commands␣like␣L<bc(1)>␣will␣read␣a␣line␣at␣a␣time␣and
output␣a␣line␣at␣a␣time.␣␣Programs␣like␣L<sort(1)>␣that␣read␣their
entire␣input␣stream␣first,␣however,␣are␣quite␣apt␣to␣cause␣deadlock.

The␣big␣problem␣with␣this␣approach␣is␣that␣if␣you␣don't␣have␣control␣
over␣source␣code␣being␣run␣in␣the␣child␣process,␣you␣can't␣control
what␣it␣does␣with␣pipe␣buffering.␣␣Thus␣you␣can't␣just␣open␣a␣pipe␣to
C<cat␣-v>␣and␣continually␣read␣and␣write␣a␣line␣from␣it.

The␣L<IO::Pty>␣and␣L<Expect>␣modules␣from␣CPAN␣can␣help␣with␣this,␣as
they␣provide␣a␣real␣tty␣(well,␣a␣pseudo-tty,␣actually),␣which␣gets␣you
back␣to␣line␣buffering␣in␣the␣invoked␣command␣again.

=head1␣WARNING␣

The␣order␣of␣arguments␣differs␣from␣that␣of␣open3().

=head1␣SEE␣ALSO

See␣L<IPC::Open3>␣for␣an␣alternative␣that␣handles␣STDERR␣as␣well.␣␣This
function␣is␣really␣just␣a␣wrapper␣around␣open3().

=cut
----------
Range: (4541680,4546087) (4407)
=head1␣NAME

IPC::Open3␣-␣open␣a␣process␣for␣reading,␣writing,␣and␣error␣handling␣using␣open3()

=head1␣SYNOPSIS

␣␣␣␣use␣Symbol␣'gensym';␣#␣vivify␣a␣separate␣handle␣for␣STDERR
␣␣␣␣my␣$pid␣=␣open3(my␣$chld_in,␣my␣$chld_out,␣my␣$chld_err␣=␣gensym,
		␣␣␣␣'some',␣'cmd',␣'and',␣'args');
␣␣␣␣#␣or␣pass␣the␣command␣through␣the␣shell
␣␣␣␣my␣$pid␣=␣open3(my␣$chld_in,␣my␣$chld_out,␣my␣$chld_err␣=␣gensym,
		␣␣␣␣'some␣cmd␣and␣args');

␣␣␣␣#␣read␣from␣parent␣STDIN
␣␣␣␣#␣send␣STDOUT␣and␣STDERR␣to␣already␣open␣handle
␣␣␣␣open␣my␣$outfile,␣'>>',␣'output.txt'␣or␣die␣"open␣failed:␣$!";
␣␣␣␣my␣$pid␣=␣open3('<&STDIN',␣$outfile,␣undef,
		␣␣␣␣'some',␣'cmd',␣'and',␣'args');

␣␣␣␣#␣write␣to␣parent␣STDOUT␣and␣STDERR
␣␣␣␣my␣$pid␣=␣open3(my␣$chld_in,␣'>&STDOUT',␣'>&STDERR',
		␣␣␣␣'some',␣'cmd',␣'and',␣'args');

␣␣␣␣#␣reap␣zombie␣and␣retrieve␣exit␣status
␣␣␣␣waitpid(␣$pid,␣0␣);
␣␣␣␣my␣$child_exit_status␣=␣$?␣>>␣8;

=head1␣DESCRIPTION

Extremely␣similar␣to␣open2(),␣open3()␣spawns␣the␣given␣command␣and
connects␣$chld_out␣for␣reading␣from␣the␣child,␣$chld_in␣for␣writing␣to
the␣child,␣and␣$chld_err␣for␣errors.␣␣If␣$chld_err␣is␣false,␣or␣the
same␣file␣descriptor␣as␣$chld_out,␣then␣STDOUT␣and␣STDERR␣of␣the␣child
are␣on␣the␣same␣filehandle.␣␣This␣means␣that␣an␣autovivified␣lexical
cannot␣be␣used␣for␣the␣STDERR␣filehandle,␣but␣gensym␣from␣L<Symbol>␣can
be␣used␣to␣vivify␣a␣new␣glob␣reference,␣see␣L</SYNOPSIS>.␣␣The␣$chld_in
will␣have␣autoflush␣turned␣on.

If␣$chld_in␣begins␣with␣C<<␣<&␣>>,␣then␣$chld_in␣will␣be␣closed␣in␣the
parent,␣and␣the␣child␣will␣read␣from␣it␣directly.␣␣If␣$chld_out␣or
$chld_err␣begins␣with␣C<<␣>&␣>>,␣then␣the␣child␣will␣send␣output
directly␣to␣that␣filehandle.␣␣In␣both␣cases,␣there␣will␣be␣a␣L<dup(2)>
instead␣of␣a␣L<pipe(2)>␣made.

If␣either␣reader␣or␣writer␣is␣the␣empty␣string␣or␣undefined,␣this␣will
be␣replaced␣by␣an␣autogenerated␣filehandle.␣␣If␣so,␣you␣must␣pass␣a
valid␣lvalue␣in␣the␣parameter␣slot␣so␣it␣can␣be␣overwritten␣in␣the
caller,␣or␣an␣exception␣will␣be␣raised.

The␣filehandles␣may␣also␣be␣integers,␣in␣which␣case␣they␣are␣understood
as␣file␣descriptors.

open3()␣returns␣the␣process␣ID␣of␣the␣child␣process.␣␣It␣doesn't␣return␣on
failure:␣it␣just␣raises␣an␣exception␣matching␣C</^open3:/>.␣␣However,
C<exec>␣failures␣in␣the␣child␣(such␣as␣no␣such␣file␣or␣permission␣denied),
are␣just␣reported␣to␣$chld_err␣under␣Windows␣and␣OS/2,␣as␣it␣is␣not␣possible
to␣trap␣them.

If␣the␣child␣process␣dies␣for␣any␣reason,␣the␣next␣write␣to␣$chld_in␣is
likely␣to␣generate␣a␣SIGPIPE␣in␣the␣parent,␣which␣is␣fatal␣by␣default.
So␣you␣may␣wish␣to␣handle␣this␣signal.

Note␣if␣you␣specify␣C<->␣as␣the␣command,␣in␣an␣analogous␣fashion␣to
C<open(my␣$fh,␣"-|")>␣the␣child␣process␣will␣just␣be␣the␣forked␣Perl
process␣rather␣than␣an␣external␣command.␣␣This␣feature␣isn't␣yet
supported␣on␣Win32␣platforms.

open3()␣does␣not␣wait␣for␣and␣reap␣the␣child␣process␣after␣it␣exits.
Except␣for␣short␣programs␣where␣it's␣acceptable␣to␣let␣the␣operating␣system
take␣care␣of␣this,␣you␣need␣to␣do␣this␣yourself.␣␣This␣is␣normally␣as
simple␣as␣calling␣C<waitpid␣$pid,␣0>␣when␣you're␣done␣with␣the␣process.
Failing␣to␣do␣this␣can␣result␣in␣an␣accumulation␣of␣defunct␣or␣"zombie"
processes.␣␣See␣L<perlfunc/waitpid>␣for␣more␣information.

If␣you␣try␣to␣read␣from␣the␣child's␣stdout␣writer␣and␣their␣stderr
writer,␣you'll␣have␣problems␣with␣blocking,␣which␣means␣you'll␣want
to␣use␣select()␣or␣L<IO::Select>,␣which␣means␣you'd␣best␣use
sysread()␣instead␣of␣readline()␣for␣normal␣stuff.

This␣is␣very␣dangerous,␣as␣you␣may␣block␣forever.␣␣It␣assumes␣it's
going␣to␣talk␣to␣something␣like␣L<bc(1)>,␣both␣writing␣to␣it␣and␣reading
from␣it.␣␣This␣is␣presumably␣safe␣because␣you␣"know"␣that␣commands
like␣L<bc(1)>␣will␣read␣a␣line␣at␣a␣time␣and␣output␣a␣line␣at␣a␣time.
Programs␣like␣L<sort(1)>␣that␣read␣their␣entire␣input␣stream␣first,
however,␣are␣quite␣apt␣to␣cause␣deadlock.

The␣big␣problem␣with␣this␣approach␣is␣that␣if␣you␣don't␣have␣control
over␣source␣code␣being␣run␣in␣the␣child␣process,␣you␣can't␣control
what␣it␣does␣with␣pipe␣buffering.␣␣Thus␣you␣can't␣just␣open␣a␣pipe␣to
C<cat␣-v>␣and␣continually␣read␣and␣write␣a␣line␣from␣it.

=head1␣See␣Also

=over␣4

=item␣L<IPC::Open2>

Like␣Open3␣but␣without␣STDERR␣capture.

=item␣L<IPC::Run>

This␣is␣a␣CPAN␣module␣that␣has␣better␣error␣handling␣and␣more␣facilities
than␣Open3.

=back

=head1␣WARNING

The␣order␣of␣arguments␣differs␣from␣that␣of␣open2().

=cut
----------
Range: (4615350,4618533) (3183)
}

=pod

=head1␣NAME

Module::Load::Conditional␣-␣Looking␣up␣module␣information␣/␣loading␣at␣runtime

=head1␣SYNOPSIS

␣␣␣␣use␣Module::Load::Conditional␣qw[can_load␣check_install␣requires];


␣␣␣␣my␣$use_list␣=␣{
␣␣␣␣␣␣␣␣␣␣␣␣CPANPLUS␣␣␣␣␣␣␣␣=>␣0.05,
␣␣␣␣␣␣␣␣␣␣␣␣LWP␣␣␣␣␣␣␣␣␣␣␣␣␣=>␣5.60,
␣␣␣␣␣␣␣␣␣␣␣␣'Test::More'␣␣␣␣=>␣undef,
␣␣␣␣};

␣␣␣␣print␣can_load(␣modules␣=>␣$use_list␣)
␣␣␣␣␣␣␣␣␣␣␣␣?␣'all␣modules␣loaded␣successfully'
␣␣␣␣␣␣␣␣␣␣␣␣:␣'failed␣to␣load␣required␣modules';


␣␣␣␣my␣$rv␣=␣check_install(␣module␣=>␣'LWP',␣version␣=>␣5.60␣)
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣or␣print␣'LWP␣is␣not␣installed!';

␣␣␣␣print␣'LWP␣up␣to␣date'␣if␣$rv->{uptodate};
␣␣␣␣print␣"LWP␣version␣is␣$rv->{version}\n";
␣␣␣␣print␣"LWP␣is␣installed␣as␣file␣$rv->{file}\n";


␣␣␣␣print␣"LWP␣requires␣the␣following␣modules␣to␣be␣installed:\n";
␣␣␣␣print␣join␣"\n",␣requires('LWP');

␣␣␣␣###␣allow␣M::L::C␣to␣peek␣in␣your␣%INC␣rather␣than␣just
␣␣␣␣###␣scanning␣@INC
␣␣␣␣$Module::Load::Conditional::CHECK_INC_HASH␣=␣1;

␣␣␣␣###␣reset␣the␣'can_load'␣cache
␣␣␣␣undef␣$Module::Load::Conditional::CACHE;

␣␣␣␣###␣don't␣have␣Module::Load::Conditional␣issue␣warnings␣--
␣␣␣␣###␣default␣is␣'1'
␣␣␣␣$Module::Load::Conditional::VERBOSE␣=␣0;

␣␣␣␣###␣The␣last␣error␣that␣happened␣during␣a␣call␣to␣'can_load'
␣␣␣␣my␣$err␣=␣$Module::Load::Conditional::ERROR;


=head1␣DESCRIPTION

Module::Load::Conditional␣provides␣simple␣ways␣to␣query␣and␣possibly␣load␣any␣of
the␣modules␣you␣have␣installed␣on␣your␣system␣during␣runtime.

It␣is␣able␣to␣load␣multiple␣modules␣at␣once␣or␣none␣at␣all␣if␣one␣of
them␣was␣not␣able␣to␣load.␣It␣also␣takes␣care␣of␣any␣error␣checking
and␣so␣forth.

=head1␣Methods

=head2␣$href␣=␣check_install(␣module␣=>␣NAME␣[,␣version␣=>␣VERSION,␣verbose␣=>␣BOOL␣]␣);

C<check_install>␣allows␣you␣to␣verify␣if␣a␣certain␣module␣is␣installed
or␣not.␣You␣may␣call␣it␣with␣the␣following␣arguments:

=over␣4

=item␣module

The␣name␣of␣the␣module␣you␣wish␣to␣verify␣--␣this␣is␣a␣required␣key

=item␣version

The␣version␣this␣module␣needs␣to␣be␣--␣this␣is␣optional

=item␣verbose

Whether␣or␣not␣to␣be␣verbose␣about␣what␣it␣is␣doing␣--␣it␣will␣default
to␣$Module::Load::Conditional::VERBOSE

=back

It␣will␣return␣undef␣if␣it␣was␣not␣able␣to␣find␣where␣the␣module␣was
installed,␣or␣a␣hash␣reference␣with␣the␣following␣keys␣if␣it␣was␣able
to␣find␣the␣file:

=over␣4

=item␣file

Full␣path␣to␣the␣file␣that␣contains␣the␣module

=item␣dir

Directory,␣or␣more␣exact␣the␣C<@INC>␣entry,␣where␣the␣module␣was
loaded␣from.

=item␣version

The␣version␣number␣of␣the␣installed␣module␣-␣this␣will␣be␣C<undef>␣if
the␣module␣had␣no␣(or␣unparsable)␣version␣number,␣or␣if␣the␣variable
C<$Module::Load::Conditional::FIND_VERSION>␣was␣set␣to␣true.
(See␣the␣C<GLOBAL␣VARIABLES>␣section␣below␣for␣details)

=item␣uptodate

A␣boolean␣value␣indicating␣whether␣or␣not␣the␣module␣was␣found␣to␣be
at␣least␣the␣version␣you␣specified.␣If␣you␣did␣not␣specify␣a␣version,
uptodate␣will␣always␣be␣true␣if␣the␣module␣was␣found.
If␣no␣parsable␣version␣was␣found␣in␣the␣module,␣uptodate␣will␣also␣be
true,␣since␣C<check_install>␣had␣no␣way␣to␣verify␣clearly.

See␣also␣C<$Module::Load::Conditional::DEPRECATED>,␣which␣affects
the␣outcome␣of␣this␣value.

=back

=cut
----------
Range: (4624613,4626197) (1584)
}

=head2␣$bool␣=␣can_load(␣modules␣=>␣{␣NAME␣=>␣VERSION␣[,NAME␣=>␣VERSION]␣},␣[verbose␣=>␣BOOL,␣nocache␣=>␣BOOL,␣autoload␣=>␣BOOL]␣)

C<can_load>␣will␣take␣a␣list␣of␣modules,␣optionally␣with␣version
numbers␣and␣determine␣if␣it␣is␣able␣to␣load␣them.␣If␣it␣can␣load␣*ALL*
of␣them,␣it␣will.␣If␣one␣or␣more␣are␣unloadable,␣none␣will␣be␣loaded.

This␣is␣particularly␣useful␣if␣you␣have␣More␣Than␣One␣Way␣(tm)␣to
solve␣a␣problem␣in␣a␣program,␣and␣only␣wish␣to␣continue␣down␣a␣path
if␣all␣modules␣could␣be␣loaded,␣and␣not␣load␣them␣if␣they␣couldn't.

This␣function␣uses␣the␣C<load>␣function␣or␣the␣C<autoload_remote>␣function
from␣Module::Load␣under␣the␣hood.

C<can_load>␣takes␣the␣following␣arguments:

=over␣4

=item␣modules

This␣is␣a␣hashref␣of␣module/version␣pairs.␣The␣version␣indicates␣the
minimum␣version␣to␣load.␣If␣no␣version␣is␣provided,␣any␣version␣is
assumed␣to␣be␣good␣enough.

=item␣verbose

This␣controls␣whether␣warnings␣should␣be␣printed␣if␣a␣module␣failed
to␣load.
The␣default␣is␣to␣use␣the␣value␣of␣$Module::Load::Conditional::VERBOSE.

=item␣nocache

C<can_load>␣keeps␣its␣results␣in␣a␣cache,␣so␣it␣will␣not␣load␣the
same␣module␣twice,␣nor␣will␣it␣attempt␣to␣load␣a␣module␣that␣has
already␣failed␣to␣load␣before.␣By␣default,␣C<can_load>␣will␣check␣its
cache,␣but␣you␣can␣override␣that␣by␣setting␣C<nocache>␣to␣true.

=item␣autoload

This␣controls␣whether␣imports␣the␣functions␣of␣a␣loaded␣modules␣to␣the␣caller␣package.␣The␣default␣is␣no␣importing␣any␣functions.

See␣the␣C<autoload>␣function␣and␣the␣C<autoload_remote>␣function␣from␣L<Module::Load>␣for␣details.

=cut
----------
Range: (5500340,5502412) (2072)
1␣}␣qw/
␣␣␣␣␣␣␣␣␣␣␣␣Archive::Extract
␣␣␣␣␣␣␣␣␣␣␣␣B::Lint
␣␣␣␣␣␣␣␣␣␣␣␣B::Lint::Debug
␣␣␣␣␣␣␣␣␣␣␣␣CPANPLUS
␣␣␣␣␣␣␣␣␣␣␣␣CPANPLUS::Backend
␣␣␣␣␣␣␣␣␣␣␣␣CPANPLUS::Backend::RV
␣␣␣␣␣␣␣␣␣␣␣␣CPANPLUS::Config
␣␣␣␣␣␣␣␣␣␣␣␣CPANPLUS::Config::HomeEnv
␣␣␣␣␣␣␣␣␣␣␣␣CPANPLUS::Configure
␣␣␣␣␣␣␣␣␣␣␣␣CPANPLUS::Configure::Setup
␣␣␣␣␣␣␣␣␣␣␣␣CPANPLUS::Dist
␣␣␣␣␣␣␣␣␣␣␣␣CPANPLUS::Dist::Autobundle
␣␣␣␣␣␣␣␣␣␣␣␣CPANPLUS::Dist::Base
␣␣␣␣␣␣␣␣␣␣␣␣CPANPLUS::Dist::Build
␣␣␣␣␣␣␣␣␣␣␣␣CPANPLUS::Dist::Build::Constants
␣␣␣␣␣␣␣␣␣␣␣␣CPANPLUS::Dist::MM
␣␣␣␣␣␣␣␣␣␣␣␣CPANPLUS::Dist::Sample
␣␣␣␣␣␣␣␣␣␣␣␣CPANPLUS::Error
␣␣␣␣␣␣␣␣␣␣␣␣CPANPLUS::Internals
␣␣␣␣␣␣␣␣␣␣␣␣CPANPLUS::Internals::Constants
␣␣␣␣␣␣␣␣␣␣␣␣CPANPLUS::Internals::Constants::Report
␣␣␣␣␣␣␣␣␣␣␣␣CPANPLUS::Internals::Extract
␣␣␣␣␣␣␣␣␣␣␣␣CPANPLUS::Internals::Fetch
␣␣␣␣␣␣␣␣␣␣␣␣CPANPLUS::Internals::Report
␣␣␣␣␣␣␣␣␣␣␣␣CPANPLUS::Internals::Search
␣␣␣␣␣␣␣␣␣␣␣␣CPANPLUS::Internals::Source
␣␣␣␣␣␣␣␣␣␣␣␣CPANPLUS::Internals::Source::Memory
␣␣␣␣␣␣␣␣␣␣␣␣CPANPLUS::Internals::Source::SQLite
␣␣␣␣␣␣␣␣␣␣␣␣CPANPLUS::Internals::Source::SQLite::Tie
␣␣␣␣␣␣␣␣␣␣␣␣CPANPLUS::Internals::Utils
␣␣␣␣␣␣␣␣␣␣␣␣CPANPLUS::Internals::Utils::Autoflush
␣␣␣␣␣␣␣␣␣␣␣␣CPANPLUS::Module
␣␣␣␣␣␣␣␣␣␣␣␣CPANPLUS::Module::Author
␣␣␣␣␣␣␣␣␣␣␣␣CPANPLUS::Module::Author::Fake
␣␣␣␣␣␣␣␣␣␣␣␣CPANPLUS::Module::Checksums
␣␣␣␣␣␣␣␣␣␣␣␣CPANPLUS::Module::Fake
␣␣␣␣␣␣␣␣␣␣␣␣CPANPLUS::Module::Signature
␣␣␣␣␣␣␣␣␣␣␣␣CPANPLUS::Selfupdate
␣␣␣␣␣␣␣␣␣␣␣␣CPANPLUS::Shell
␣␣␣␣␣␣␣␣␣␣␣␣CPANPLUS::Shell::Classic
␣␣␣␣␣␣␣␣␣␣␣␣CPANPLUS::Shell::Default
␣␣␣␣␣␣␣␣␣␣␣␣CPANPLUS::Shell::Default::Plugins::CustomSource
␣␣␣␣␣␣␣␣␣␣␣␣CPANPLUS::Shell::Default::Plugins::Remote
␣␣␣␣␣␣␣␣␣␣␣␣CPANPLUS::Shell::Default::Plugins::Source
␣␣␣␣␣␣␣␣␣␣␣␣Devel::InnerPackage
␣␣␣␣␣␣␣␣␣␣␣␣File::CheckTree
␣␣␣␣␣␣␣␣␣␣␣␣Log::Message
␣␣␣␣␣␣␣␣␣␣␣␣Log::Message::Config
␣␣␣␣␣␣␣␣␣␣␣␣Log::Message::Handlers
␣␣␣␣␣␣␣␣␣␣␣␣Log::Message::Item
␣␣␣␣␣␣␣␣␣␣␣␣Log::Message::Simple
␣␣␣␣␣␣␣␣␣␣␣␣Module::Pluggable
␣␣␣␣␣␣␣␣␣␣␣␣Module::Pluggable::Object
␣␣␣␣␣␣␣␣␣␣␣␣Object::Accessor
␣␣␣␣␣␣␣␣␣␣␣␣Term::UI
␣␣␣␣␣␣␣␣␣␣␣␣Term::UI::History
␣␣␣␣␣␣␣␣␣␣␣␣Text::Soundex
␣␣␣␣␣␣␣␣/},
----------
Range: (5503150,5505251) (2101)
1␣}␣qw/
␣␣␣␣␣␣␣␣␣␣␣␣Archive::Extract
␣␣␣␣␣␣␣␣␣␣␣␣B::Lint
␣␣␣␣␣␣␣␣␣␣␣␣B::Lint::Debug
␣␣␣␣␣␣␣␣␣␣␣␣CPANPLUS
␣␣␣␣␣␣␣␣␣␣␣␣CPANPLUS::Backend
␣␣␣␣␣␣␣␣␣␣␣␣CPANPLUS::Backend::RV
␣␣␣␣␣␣␣␣␣␣␣␣CPANPLUS::Config
␣␣␣␣␣␣␣␣␣␣␣␣CPANPLUS::Config::HomeEnv
␣␣␣␣␣␣␣␣␣␣␣␣CPANPLUS::Configure
␣␣␣␣␣␣␣␣␣␣␣␣CPANPLUS::Configure::Setup
␣␣␣␣␣␣␣␣␣␣␣␣CPANPLUS::Dist
␣␣␣␣␣␣␣␣␣␣␣␣CPANPLUS::Dist::Autobundle
␣␣␣␣␣␣␣␣␣␣␣␣CPANPLUS::Dist::Base
␣␣␣␣␣␣␣␣␣␣␣␣CPANPLUS::Dist::Build
␣␣␣␣␣␣␣␣␣␣␣␣CPANPLUS::Dist::Build::Constants
␣␣␣␣␣␣␣␣␣␣␣␣CPANPLUS::Dist::MM
␣␣␣␣␣␣␣␣␣␣␣␣CPANPLUS::Dist::Sample
␣␣␣␣␣␣␣␣␣␣␣␣CPANPLUS::Error
␣␣␣␣␣␣␣␣␣␣␣␣CPANPLUS::Internals
␣␣␣␣␣␣␣␣␣␣␣␣CPANPLUS::Internals::Constants
␣␣␣␣␣␣␣␣␣␣␣␣CPANPLUS::Internals::Constants::Report
␣␣␣␣␣␣␣␣␣␣␣␣CPANPLUS::Internals::Extract
␣␣␣␣␣␣␣␣␣␣␣␣CPANPLUS::Internals::Fetch
␣␣␣␣␣␣␣␣␣␣␣␣CPANPLUS::Internals::Report
␣␣␣␣␣␣␣␣␣␣␣␣CPANPLUS::Internals::Search
␣␣␣␣␣␣␣␣␣␣␣␣CPANPLUS::Internals::Source
␣␣␣␣␣␣␣␣␣␣␣␣CPANPLUS::Internals::Source::Memory
␣␣␣␣␣␣␣␣␣␣␣␣CPANPLUS::Internals::Source::SQLite
␣␣␣␣␣␣␣␣␣␣␣␣CPANPLUS::Internals::Source::SQLite::Tie
␣␣␣␣␣␣␣␣␣␣␣␣CPANPLUS::Internals::Utils
␣␣␣␣␣␣␣␣␣␣␣␣CPANPLUS::Internals::Utils::Autoflush
␣␣␣␣␣␣␣␣␣␣␣␣CPANPLUS::Module
␣␣␣␣␣␣␣␣␣␣␣␣CPANPLUS::Module::Author
␣␣␣␣␣␣␣␣␣␣␣␣CPANPLUS::Module::Author::Fake
␣␣␣␣␣␣␣␣␣␣␣␣CPANPLUS::Module::Checksums
␣␣␣␣␣␣␣␣␣␣␣␣CPANPLUS::Module::Fake
␣␣␣␣␣␣␣␣␣␣␣␣CPANPLUS::Module::Signature
␣␣␣␣␣␣␣␣␣␣␣␣CPANPLUS::Selfupdate
␣␣␣␣␣␣␣␣␣␣␣␣CPANPLUS::Shell
␣␣␣␣␣␣␣␣␣␣␣␣CPANPLUS::Shell::Classic
␣␣␣␣␣␣␣␣␣␣␣␣CPANPLUS::Shell::Default
␣␣␣␣␣␣␣␣␣␣␣␣CPANPLUS::Shell::Default::Plugins::CustomSource
␣␣␣␣␣␣␣␣␣␣␣␣CPANPLUS::Shell::Default::Plugins::Remote
␣␣␣␣␣␣␣␣␣␣␣␣CPANPLUS::Shell::Default::Plugins::Source
␣␣␣␣␣␣␣␣␣␣␣␣Devel::InnerPackage
␣␣␣␣␣␣␣␣␣␣␣␣File::CheckTree
␣␣␣␣␣␣␣␣␣␣␣␣Log::Message
␣␣␣␣␣␣␣␣␣␣␣␣Log::Message::Config
␣␣␣␣␣␣␣␣␣␣␣␣Log::Message::Handlers
␣␣␣␣␣␣␣␣␣␣␣␣Log::Message::Item
␣␣␣␣␣␣␣␣␣␣␣␣Log::Message::Simple
␣␣␣␣␣␣␣␣␣␣␣␣Module::Pluggable
␣␣␣␣␣␣␣␣␣␣␣␣Module::Pluggable::Object
␣␣␣␣␣␣␣␣␣␣␣␣Object::Accessor
␣␣␣␣␣␣␣␣␣␣␣␣Pod::LaTeX
␣␣␣␣␣␣␣␣␣␣␣␣Term::UI
␣␣␣␣␣␣␣␣␣␣␣␣Term::UI::History
␣␣␣␣␣␣␣␣␣␣␣␣Text::Soundex
␣␣␣␣␣␣␣␣/}
␣␣␣␣},
----------
Range: (5601139,5604149) (3010)
=pod

=head1␣NAME

Module::CoreList::Utils␣-␣what␣utilities␣shipped␣with␣versions␣of␣perl

=head1␣SYNOPSIS

␣use␣Module::CoreList::Utils;

␣print␣$Module::CoreList::Utils::utilities{5.009003}{ptar};␣#␣prints␣1

␣print␣Module::CoreList::Utils->first_release('corelist');
␣#␣prints␣5.008009

␣print␣Module::CoreList::Utils->first_release_by_date('corelist');
␣#␣prints␣5.009002

=head1␣DESCRIPTION

Module::CoreList::Utils␣provides␣information␣on␣which␣core␣and␣dual-life␣utilities␣shipped
with␣each␣version␣of␣L<perl>.

It␣provides␣a␣number␣of␣mechanisms␣for␣querying␣this␣information.

There␣is␣a␣functional␣programming␣API␣available␣for␣programmers␣to␣query
information.

Programmers␣may␣also␣query␣the␣contained␣hash␣structure␣to␣find␣relevant
information.

=head1␣FUNCTIONS␣API

These␣are␣the␣functions␣that␣are␣available,␣they␣may␣either␣be␣called␣as␣functions␣or␣class␣methods:

␣␣Module::CoreList::Utils::first_release('corelist');␣#␣as␣a␣function

␣␣Module::CoreList::Utils->first_release('corelist');␣#␣class␣method

=over

=item␣C<utilities>

Requires␣a␣perl␣version␣as␣an␣argument,␣returns␣a␣list␣of␣utilities␣that␣shipped␣with
that␣version␣of␣perl,␣or␣undef/empty␣list␣if␣that␣perl␣doesn't␣exist.

=item␣C<first_release(␣UTILITY␣)>

Requires␣a␣UTILITY␣name␣as␣an␣argument,␣returns␣the␣perl␣version␣when␣that␣utility␣first
appeared␣in␣core␣as␣ordered␣by␣perl␣version␣number␣or␣undef␣(␣in␣scalar␣context␣)
or␣an␣empty␣list␣(␣in␣list␣context␣)␣if␣that␣utility␣is␣not␣in␣core.

=item␣C<first_release_by_date(␣UTILITY␣)>

Requires␣a␣UTILITY␣name␣as␣an␣argument,␣returns␣the␣perl␣version␣when␣that␣utility␣first
appeared␣in␣core␣as␣ordered␣by␣release␣date␣or␣undef␣(␣in␣scalar␣context␣)
or␣an␣empty␣list␣(␣in␣list␣context␣)␣if␣that␣utility␣is␣not␣in␣core.

=item␣C<removed_from(␣UTILITY␣)>

Takes␣a␣UTILITY␣name␣as␣an␣argument,␣returns␣the␣first␣perl␣version␣where␣that␣utility
was␣removed␣from␣core.␣Returns␣undef␣if␣the␣given␣utility␣was␣never␣in␣core␣or␣remains
in␣core.

=item␣C<removed_from_by_date(␣UTILITY␣)>

Takes␣a␣UTILITY␣name␣as␣an␣argument,␣returns␣the␣first␣perl␣version␣by␣release␣date␣where␣that
utility␣was␣removed␣from␣core.␣Returns␣undef␣if␣the␣given␣utility␣was␣never␣in␣core␣or␣remains
in␣core.

=back

=head1␣DATA␣STRUCTURES

These␣are␣the␣hash␣data␣structures␣that␣are␣available:

=over

=item␣C<%Module::CoreList::Utils::utilities>

A␣hash␣of␣hashes␣that␣is␣keyed␣on␣perl␣version␣as␣indicated
in␣$].␣␣The␣second␣level␣hash␣is␣utility␣/␣defined␣pairs.

=back

=head1␣AUTHOR

Chris␣C<BinGOs>␣Williams␣<chris@bingosnet.co.uk>

Currently␣maintained␣by␣the␣perl␣5␣porters␣E<lt>perl5-porters@perl.orgE<gt>.

This␣module␣is␣the␣result␣of␣archaeology␣undertaken␣during␣QA␣Hackathon
in␣Lancaster,␣April␣2013.

=head1␣LICENSE

Copyright␣(C)␣2013␣Chris␣Williams.␣␣All␣Rights␣Reserved.

This␣module␣is␣free␣software;␣you␣can␣redistribute␣it␣and/or␣modify␣it
under␣the␣same␣terms␣as␣Perl␣itself.

=head1␣SEE␣ALSO

L<corelist>,␣L<Module::CoreList>,␣L<perl>,␣L<http://perlpunks.de/corelist>

=cut
----------
Range: (5620891,5646892) (26001)
=head1␣NAME

Memoize␣-␣Make␣functions␣faster␣by␣trading␣space␣for␣time

=head1␣SYNOPSIS

␣␣␣␣␣␣␣␣#␣This␣is␣the␣documentation␣for␣Memoize␣1.03
	use␣Memoize;
	memoize('slow_function');
	slow_function(arguments);␣␣␣␣#␣Is␣faster␣than␣it␣was␣before


This␣is␣normally␣all␣you␣need␣to␣know.␣␣However,␣many␣options␣are␣available:

	memoize(function,␣options...);

Options␣include:

	NORMALIZER␣=>␣function
	INSTALL␣=>␣new_name

	SCALAR_CACHE␣=>␣'MEMORY'
␣␣␣␣␣␣␣␣SCALAR_CACHE␣=>␣['HASH',␣\%cache_hash␣]
	SCALAR_CACHE␣=>␣'FAULT'
	SCALAR_CACHE␣=>␣'MERGE'

	LIST_CACHE␣=>␣'MEMORY'
␣␣␣␣␣␣␣␣LIST_CACHE␣=>␣['HASH',␣\%cache_hash␣]
	LIST_CACHE␣=>␣'FAULT'
	LIST_CACHE␣=>␣'MERGE'

=head1␣DESCRIPTION

`Memoizing'␣a␣function␣makes␣it␣faster␣by␣trading␣space␣for␣time.␣␣It
does␣this␣by␣caching␣the␣return␣values␣of␣the␣function␣in␣a␣table.
If␣you␣call␣the␣function␣again␣with␣the␣same␣arguments,␣C<memoize>
jumps␣in␣and␣gives␣you␣the␣value␣out␣of␣the␣table,␣instead␣of␣letting
the␣function␣compute␣the␣value␣all␣over␣again.

Here␣is␣an␣extreme␣example.␣␣Consider␣the␣Fibonacci␣sequence,␣defined
by␣the␣following␣function:

	#␣Compute␣Fibonacci␣numbers
	sub␣fib␣{
	␣␣my␣$n␣=␣shift;
	␣␣return␣$n␣if␣$n␣<␣2;
	␣␣fib($n-1)␣+␣fib($n-2);
	}

This␣function␣is␣very␣slow.␣␣Why?␣␣To␣compute␣fib(14),␣it␣first␣wants
to␣compute␣fib(13)␣and␣fib(12),␣and␣add␣the␣results.␣␣But␣to␣compute
fib(13),␣it␣first␣has␣to␣compute␣fib(12)␣and␣fib(11),␣and␣then␣it
comes␣back␣and␣computes␣fib(12)␣all␣over␣again␣even␣though␣the␣answer
is␣the␣same.␣␣And␣both␣of␣the␣times␣that␣it␣wants␣to␣compute␣fib(12),
it␣has␣to␣compute␣fib(11)␣from␣scratch,␣and␣then␣it␣has␣to␣do␣it
again␣each␣time␣it␣wants␣to␣compute␣fib(13).␣␣This␣function␣does␣so
much␣recomputing␣of␣old␣results␣that␣it␣takes␣a␣really␣long␣time␣to
run---fib(14)␣makes␣1,200␣extra␣recursive␣calls␣to␣itself,␣to␣compute
and␣recompute␣things␣that␣it␣already␣computed.

This␣function␣is␣a␣good␣candidate␣for␣memoization.␣␣If␣you␣memoize␣the
`fib'␣function␣above,␣it␣will␣compute␣fib(14)␣exactly␣once,␣the␣first
time␣it␣needs␣to,␣and␣then␣save␣the␣result␣in␣a␣table.␣␣Then␣if␣you
ask␣for␣fib(14)␣again,␣it␣gives␣you␣the␣result␣out␣of␣the␣table.
While␣computing␣fib(14),␣instead␣of␣computing␣fib(12)␣twice,␣it␣does
it␣once;␣the␣second␣time␣it␣needs␣the␣value␣it␣gets␣it␣from␣the␣table.
It␣doesn't␣compute␣fib(11)␣four␣times;␣it␣computes␣it␣once,␣getting␣it
from␣the␣table␣the␣next␣three␣times.␣␣Instead␣of␣making␣1,200
recursive␣calls␣to␣`fib',␣it␣makes␣15.␣␣This␣makes␣the␣function␣about
150␣times␣faster.

You␣could␣do␣the␣memoization␣yourself,␣by␣rewriting␣the␣function,␣like
this:

	#␣Compute␣Fibonacci␣numbers,␣memoized␣version
	{␣my␣@fib;
␣␣	␣␣sub␣fib␣{
	␣␣␣␣my␣$n␣=␣shift;
	␣␣␣␣return␣$fib[$n]␣if␣defined␣$fib[$n];
	␣␣␣␣return␣$fib[$n]␣=␣$n␣if␣$n␣<␣2;
	␣␣␣␣$fib[$n]␣=␣fib($n-1)␣+␣fib($n-2);
	␣␣}
␣␣␣␣␣␣␣␣}

Or␣you␣could␣use␣this␣module,␣like␣this:

	use␣Memoize;
	memoize('fib');

	#␣Rest␣of␣the␣fib␣function␣just␣like␣the␣original␣version.

This␣makes␣it␣easy␣to␣turn␣memoizing␣on␣and␣off.

Here's␣an␣even␣simpler␣example:␣I␣wrote␣a␣simple␣ray␣tracer;␣the
program␣would␣look␣in␣a␣certain␣direction,␣figure␣out␣what␣it␣was
looking␣at,␣and␣then␣convert␣the␣`color'␣value␣(typically␣a␣string
like␣`red')␣of␣that␣object␣to␣a␣red,␣green,␣and␣blue␣pixel␣value,␣like
this:

␣␣␣␣for␣($direction␣=␣0;␣$direction␣<␣300;␣$direction++)␣{
␣␣␣␣␣␣#␣Figure␣out␣which␣object␣is␣in␣direction␣$direction
␣␣␣␣␣␣$color␣=␣$object->{color};
␣␣␣␣␣␣($r,␣$g,␣$b)␣=␣@{&ColorToRGB($color)};
␣␣␣␣␣␣...
␣␣␣␣}

Since␣there␣are␣relatively␣few␣objects␣in␣a␣picture,␣there␣are␣only␣a
few␣colors,␣which␣get␣looked␣up␣over␣and␣over␣again.␣␣Memoizing
C<ColorToRGB>␣sped␣up␣the␣program␣by␣several␣percent.

=head1␣DETAILS

This␣module␣exports␣exactly␣one␣function,␣C<memoize>.␣␣The␣rest␣of␣the
functions␣in␣this␣package␣are␣None␣of␣Your␣Business.

You␣should␣say

	memoize(function)

where␣C<function>␣is␣the␣name␣of␣the␣function␣you␣want␣to␣memoize,␣or
a␣reference␣to␣it.␣␣C<memoize>␣returns␣a␣reference␣to␣the␣new,
memoized␣version␣of␣the␣function,␣or␣C<undef>␣on␣a␣non-fatal␣error.
At␣present,␣there␣are␣no␣non-fatal␣errors,␣but␣there␣might␣be␣some␣in
the␣future.

If␣C<function>␣was␣the␣name␣of␣a␣function,␣then␣C<memoize>␣hides␣the
old␣version␣and␣installs␣the␣new␣memoized␣version␣under␣the␣old␣name,
so␣that␣C<&function(...)>␣actually␣invokes␣the␣memoized␣version.

=head1␣OPTIONS

There␣are␣some␣optional␣options␣you␣can␣pass␣to␣C<memoize>␣to␣change
the␣way␣it␣behaves␣a␣little.␣␣To␣supply␣options,␣invoke␣C<memoize>
like␣this:

	memoize(function,␣NORMALIZER␣=>␣function,
			␣␣INSTALL␣=>␣newname,
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣SCALAR_CACHE␣=>␣option,
	␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣LIST_CACHE␣=>␣option
			␣);

Each␣of␣these␣options␣is␣optional;␣you␣can␣include␣some,␣all,␣or␣none
of␣them.

=head2␣INSTALL

If␣you␣supply␣a␣function␣name␣with␣C<INSTALL>,␣memoize␣will␣install
the␣new,␣memoized␣version␣of␣the␣function␣under␣the␣name␣you␣give.
For␣example,␣

	memoize('fib',␣INSTALL␣=>␣'fastfib')

installs␣the␣memoized␣version␣of␣C<fib>␣as␣C<fastfib>;␣without␣the
C<INSTALL>␣option␣it␣would␣have␣replaced␣the␣old␣C<fib>␣with␣the
memoized␣version.␣␣

To␣prevent␣C<memoize>␣from␣installing␣the␣memoized␣version␣anywhere,␣use
C<INSTALL␣=E<gt>␣undef>.

=head2␣NORMALIZER

Suppose␣your␣function␣looks␣like␣this:

	#␣Typical␣call:␣f('aha!',␣A␣=>␣11,␣B␣=>␣12);
	sub␣f␣{
	␣␣my␣$a␣=␣shift;
	␣␣my␣%hash␣=␣@_;
	␣␣$hash{B}␣||=␣2;␣␣#␣B␣defaults␣to␣2
	␣␣$hash{C}␣||=␣7;␣␣#␣C␣defaults␣to␣7

	␣␣#␣Do␣something␣with␣$a,␣%hash
	}

Now,␣the␣following␣calls␣to␣your␣function␣are␣all␣completely␣equivalent:

	f(OUCH);
	f(OUCH,␣B␣=>␣2);
	f(OUCH,␣C␣=>␣7);
	f(OUCH,␣B␣=>␣2,␣C␣=>␣7);
	f(OUCH,␣C␣=>␣7,␣B␣=>␣2);
	(etc.)

However,␣unless␣you␣tell␣C<Memoize>␣that␣these␣calls␣are␣equivalent,
it␣will␣not␣know␣that,␣and␣it␣will␣compute␣the␣values␣for␣these
invocations␣of␣your␣function␣separately,␣and␣store␣them␣separately.

To␣prevent␣this,␣supply␣a␣C<NORMALIZER>␣function␣that␣turns␣the
program␣arguments␣into␣a␣string␣in␣a␣way␣that␣equivalent␣arguments
turn␣into␣the␣same␣string.␣␣A␣C<NORMALIZER>␣function␣for␣C<f>␣above
might␣look␣like␣this:

	sub␣normalize_f␣{
	␣␣my␣$a␣=␣shift;
	␣␣my␣%hash␣=␣@_;
	␣␣$hash{B}␣||=␣2;
	␣␣$hash{C}␣||=␣7;

	␣␣join(',',␣$a,␣map␣($_␣=>␣$hash{$_})␣sort␣keys␣%hash);
	}

Each␣of␣the␣argument␣lists␣above␣comes␣out␣of␣the␣C<normalize_f>
function␣looking␣exactly␣the␣same,␣like␣this:

	OUCH,B,2,C,7

You␣would␣tell␣C<Memoize>␣to␣use␣this␣normalizer␣this␣way:

	memoize('f',␣NORMALIZER␣=>␣'normalize_f');

C<memoize>␣knows␣that␣if␣the␣normalized␣version␣of␣the␣arguments␣is
the␣same␣for␣two␣argument␣lists,␣then␣it␣can␣safely␣look␣up␣the␣value
that␣it␣computed␣for␣one␣argument␣list␣and␣return␣it␣as␣the␣result␣of
calling␣the␣function␣with␣the␣other␣argument␣list,␣even␣if␣the
argument␣lists␣look␣different.

The␣default␣normalizer␣just␣concatenates␣the␣arguments␣with␣character
28␣in␣between.␣␣(In␣ASCII,␣this␣is␣called␣FS␣or␣control-\.)␣␣This
always␣works␣correctly␣for␣functions␣with␣only␣one␣string␣argument,
and␣also␣when␣the␣arguments␣never␣contain␣character␣28.␣␣However,␣it
can␣confuse␣certain␣argument␣lists:

	normalizer("a\034",␣"b")
	normalizer("a",␣"\034b")
	normalizer("a\034\034b")

for␣example.

Since␣hash␣keys␣are␣strings,␣the␣default␣normalizer␣will␣not
distinguish␣between␣C<undef>␣and␣the␣empty␣string.␣␣It␣also␣won't␣work
when␣the␣function's␣arguments␣are␣references.␣␣For␣example,␣consider␣a
function␣C<g>␣which␣gets␣two␣arguments:␣A␣number,␣and␣a␣reference␣to
an␣array␣of␣numbers:

	g(13,␣[1,2,3,4,5,6,7]);

The␣default␣normalizer␣will␣turn␣this␣into␣something␣like
C<"13\034ARRAY(0x436c1f)">.␣␣That␣would␣be␣all␣right,␣except␣that␣a
subsequent␣array␣of␣numbers␣might␣be␣stored␣at␣a␣different␣location
even␣though␣it␣contains␣the␣same␣data.␣␣If␣this␣happens,␣C<Memoize>
will␣think␣that␣the␣arguments␣are␣different,␣even␣though␣they␣are
equivalent.␣␣In␣this␣case,␣a␣normalizer␣like␣this␣is␣appropriate:

	sub␣normalize␣{␣join␣'␣',␣$_[0],␣@{$_[1]}␣}

For␣the␣example␣above,␣this␣produces␣the␣key␣"13␣1␣2␣3␣4␣5␣6␣7".

Another␣use␣for␣normalizers␣is␣when␣the␣function␣depends␣on␣data␣other
than␣those␣in␣its␣arguments.␣␣Suppose␣you␣have␣a␣function␣which
returns␣a␣value␣which␣depends␣on␣the␣current␣hour␣of␣the␣day:

	sub␣on_duty␣{
␣␣␣␣␣␣␣␣␣␣my␣($problem_type)␣=␣@_;
	␣␣my␣$hour␣=␣(localtime)[2];
␣␣␣␣␣␣␣␣␣␣open␣my␣$fh,␣"$DIR/$problem_type"␣or␣die...;
␣␣␣␣␣␣␣␣␣␣my␣$line;
␣␣␣␣␣␣␣␣␣␣while␣($hour--␣>␣0)
␣␣␣␣␣␣␣␣␣␣␣␣$line␣=␣<$fh>;
␣␣␣␣␣␣␣␣␣␣}␣
	␣␣return␣$line;
	}

At␣10:23,␣this␣function␣generates␣the␣10th␣line␣of␣a␣data␣file;␣at
3:45␣PM␣it␣generates␣the␣15th␣line␣instead.␣␣By␣default,␣C<Memoize>
will␣only␣see␣the␣$problem_type␣argument.␣␣To␣fix␣this,␣include␣the
current␣hour␣in␣the␣normalizer:

␣␣␣␣␣␣␣␣sub␣normalize␣{␣join␣'␣',␣(localtime)[2],␣@_␣}

The␣calling␣context␣of␣the␣function␣(scalar␣or␣list␣context)␣is
propagated␣to␣the␣normalizer.␣␣This␣means␣that␣if␣the␣memoized
function␣will␣treat␣its␣arguments␣differently␣in␣list␣context␣than␣it
would␣in␣scalar␣context,␣you␣can␣have␣the␣normalizer␣function␣select
its␣behavior␣based␣on␣the␣results␣of␣C<wantarray>.␣␣Even␣if␣called␣in
a␣list␣context,␣a␣normalizer␣should␣still␣return␣a␣single␣string.

=head2␣C<SCALAR_CACHE>,␣C<LIST_CACHE>

Normally,␣C<Memoize>␣caches␣your␣function's␣return␣values␣into␣an
ordinary␣Perl␣hash␣variable.␣␣However,␣you␣might␣like␣to␣have␣the
values␣cached␣on␣the␣disk,␣so␣that␣they␣persist␣from␣one␣run␣of␣your
program␣to␣the␣next,␣or␣you␣might␣like␣to␣associate␣some␣other
interesting␣semantics␣with␣the␣cached␣values.

There's␣a␣slight␣complication␣under␣the␣hood␣of␣C<Memoize>:␣There␣are
actually␣I<two>␣caches,␣one␣for␣scalar␣values␣and␣one␣for␣list␣values.
When␣your␣function␣is␣called␣in␣scalar␣context,␣its␣return␣value␣is
cached␣in␣one␣hash,␣and␣when␣your␣function␣is␣called␣in␣list␣context,
its␣value␣is␣cached␣in␣the␣other␣hash.␣␣You␣can␣control␣the␣caching
behavior␣of␣both␣contexts␣independently␣with␣these␣options.

The␣argument␣to␣C<LIST_CACHE>␣or␣C<SCALAR_CACHE>␣must␣either␣be␣one␣of
the␣following␣four␣strings:

	MEMORY
	FAULT
	MERGE
␣␣␣␣␣␣␣␣HASH

or␣else␣it␣must␣be␣a␣reference␣to␣an␣array␣whose␣first␣element␣is␣one␣of
these␣four␣strings,␣such␣as␣C<[HASH,␣arguments...]>.

=over␣4

=item␣C<MEMORY>

C<MEMORY>␣means␣that␣return␣values␣from␣the␣function␣will␣be␣cached␣in
an␣ordinary␣Perl␣hash␣variable.␣␣The␣hash␣variable␣will␣not␣persist
after␣the␣program␣exits.␣␣This␣is␣the␣default.

=item␣C<HASH>

C<HASH>␣allows␣you␣to␣specify␣that␣a␣particular␣hash␣that␣you␣supply
will␣be␣used␣as␣the␣cache.␣␣You␣can␣tie␣this␣hash␣beforehand␣to␣give
it␣any␣behavior␣you␣want.

A␣tied␣hash␣can␣have␣any␣semantics␣at␣all.␣␣It␣is␣typically␣tied␣to␣an
on-disk␣database,␣so␣that␣cached␣values␣are␣stored␣in␣the␣database␣and
retrieved␣from␣it␣again␣when␣needed,␣and␣the␣disk␣file␣typically
persists␣after␣your␣program␣has␣exited.␣␣See␣C<perltie>␣for␣more
complete␣details␣about␣C<tie>.

A␣typical␣example␣is:

␣␣␣␣␣␣␣␣use␣DB_File;
␣␣␣␣␣␣␣␣tie␣my␣%cache␣=>␣'DB_File',␣$filename,␣O_RDWR|O_CREAT,␣0666;
␣␣␣␣␣␣␣␣memoize␣'function',␣SCALAR_CACHE␣=>␣[HASH␣=>␣\%cache];

This␣has␣the␣effect␣of␣storing␣the␣cache␣in␣a␣C<DB_File>␣database
whose␣name␣is␣in␣C<$filename>.␣␣The␣cache␣will␣persist␣after␣the
program␣has␣exited.␣␣Next␣time␣the␣program␣runs,␣it␣will␣find␣the
cache␣already␣populated␣from␣the␣previous␣run␣of␣the␣program.␣␣Or␣you
can␣forcibly␣populate␣the␣cache␣by␣constructing␣a␣batch␣program␣that
runs␣in␣the␣background␣and␣populates␣the␣cache␣file.␣␣Then␣when␣you
come␣to␣run␣your␣real␣program␣the␣memoized␣function␣will␣be␣fast
because␣all␣its␣results␣have␣been␣precomputed.

Another␣reason␣to␣use␣C<HASH>␣is␣to␣provide␣your␣own␣hash␣variable.
You␣can␣then␣inspect␣or␣modify␣the␣contents␣of␣the␣hash␣to␣gain␣finer
control␣over␣the␣cache␣management.

=item␣C<TIE>

This␣option␣is␣no␣longer␣supported.␣␣It␣is␣still␣documented␣only␣to
aid␣in␣the␣debugging␣of␣old␣programs␣that␣use␣it.␣␣Old␣programs␣should
be␣converted␣to␣use␣the␣C<HASH>␣option␣instead.

␣␣␣␣␣␣␣␣memoize␣...␣['TIE',␣PACKAGE,␣ARGS...]

is␣merely␣a␣shortcut␣for

␣␣␣␣␣␣␣␣require␣PACKAGE;
	{␣tie␣my␣%cache,␣PACKAGE,␣ARGS...;
␣␣␣␣␣␣␣␣␣␣memoize␣...␣[HASH␣=>␣\%cache];
␣␣␣␣␣␣␣␣}

=item␣C<FAULT>

C<FAULT>␣means␣that␣you␣never␣expect␣to␣call␣the␣function␣in␣scalar
(or␣list)␣context,␣and␣that␣if␣C<Memoize>␣detects␣such␣a␣call,␣it
should␣abort␣the␣program.␣␣The␣error␣message␣is␣one␣of

	`foo'␣function␣called␣in␣forbidden␣list␣context␣at␣line␣...
	`foo'␣function␣called␣in␣forbidden␣scalar␣context␣at␣line␣...

=item␣C<MERGE>

C<MERGE>␣normally␣means␣that␣the␣memoized␣function␣does␣not
distinguish␣between␣list␣and␣sclar␣context,␣and␣that␣return␣values␣in
both␣contexts␣should␣be␣stored␣together.␣␣Both␣C<LIST_CACHE␣=E<gt>
MERGE>␣and␣C<SCALAR_CACHE␣=E<gt>␣MERGE>␣mean␣the␣same␣thing.

Consider␣this␣function:

	sub␣complicated␣{
␣␣␣␣␣␣␣␣␣␣#␣...␣time-consuming␣calculation␣of␣$result
␣␣␣␣␣␣␣␣␣␣return␣$result;
␣␣␣␣␣␣␣␣}

The␣C<complicated>␣function␣will␣return␣the␣same␣numeric␣C<$result>
regardless␣of␣whether␣it␣is␣called␣in␣list␣or␣in␣scalar␣context.

Normally,␣the␣following␣code␣will␣result␣in␣two␣calls␣to␣C<complicated>,␣even
if␣C<complicated>␣is␣memoized:

␣␣␣␣$x␣=␣complicated(142);
␣␣␣␣($y)␣=␣complicated(142);
␣␣␣␣$z␣=␣complicated(142);

The␣first␣call␣will␣cache␣the␣result,␣say␣37,␣in␣the␣scalar␣cache;␣the
second␣will␣cach␣the␣list␣C<(37)>␣in␣the␣list␣cache.␣␣The␣third␣call
doesn't␣call␣the␣real␣C<complicated>␣function;␣it␣gets␣the␣value␣37
from␣the␣scalar␣cache.

Obviously,␣the␣second␣call␣to␣C<complicated>␣is␣a␣waste␣of␣time,␣and
storing␣its␣return␣value␣is␣a␣waste␣of␣space.␣␣Specifying␣C<LIST_CACHE
=E<gt>␣MERGE>␣will␣make␣C<memoize>␣use␣the␣same␣cache␣for␣scalar␣and
list␣context␣return␣values,␣so␣that␣the␣second␣call␣uses␣the␣scalar
cache␣that␣was␣populated␣by␣the␣first␣call.␣␣C<complicated>␣ends␣up
being␣called␣only␣once,␣and␣both␣subsequent␣calls␣return␣C<3>␣from␣the
cache,␣regardless␣of␣the␣calling␣context.

=head3␣List␣values␣in␣scalar␣context

Consider␣this␣function:

␣␣␣␣sub␣iota␣{␣return␣reverse␣(1..$_[0])␣}

This␣function␣normally␣returns␣a␣list.␣␣Suppose␣you␣memoize␣it␣and
merge␣the␣caches:

␣␣␣␣memoize␣'iota',␣SCALAR_CACHE␣=>␣'MERGE';

␣␣␣␣@i7␣=␣iota(7);
␣␣␣␣$i7␣=␣iota(7);

Here␣the␣first␣call␣caches␣the␣list␣(1,2,3,4,5,6,7).␣␣The␣second␣call
does␣not␣really␣make␣sense.␣C<Memoize>␣cannot␣guess␣what␣behavior
C<iota>␣should␣have␣in␣scalar␣context␣without␣actually␣calling␣it␣in
scalar␣context.␣␣Normally␣C<Memoize>␣I<would>␣call␣C<iota>␣in␣scalar
context␣and␣cache␣the␣result,␣but␣the␣C<SCALAR_CACHE␣=E<gt>␣'MERGE'>
option␣says␣not␣to␣do␣that,␣but␣to␣use␣the␣cache␣list-context␣value
instead.␣But␣it␣cannot␣return␣a␣list␣of␣seven␣elements␣in␣a␣scalar
context.␣In␣this␣case␣C<$i7>␣will␣receive␣the␣B<first␣element>␣of␣the
cached␣list␣value,␣namely␣7.

=head3␣Merged␣disk␣caches

Another␣use␣for␣C<MERGE>␣is␣when␣you␣want␣both␣kinds␣of␣return␣values
stored␣in␣the␣same␣disk␣file;␣this␣saves␣you␣from␣having␣to␣deal␣with
two␣disk␣files␣instead␣of␣one.␣␣You␣can␣use␣a␣normalizer␣function␣to
keep␣the␣two␣sets␣of␣return␣values␣separate.␣␣For␣example:

␣␣␣␣␣␣␣␣tie␣my␣%cache␣=>␣'MLDBM',␣'DB_File',␣$filename,␣...;

	memoize␣'myfunc',
	␣␣NORMALIZER␣=>␣'n',
	␣␣SCALAR_CACHE␣=>␣[HASH␣=>␣\%cache],
	␣␣LIST_CACHE␣=>␣'MERGE',
	;

	sub␣n␣{
	␣␣my␣$context␣=␣wantarray()␣?␣'L'␣:␣'S';
	␣␣#␣...␣now␣compute␣the␣hash␣key␣from␣the␣arguments␣...
	␣␣$hashkey␣=␣"$context:$hashkey";
	}

This␣normalizer␣function␣will␣store␣scalar␣context␣return␣values␣in
the␣disk␣file␣under␣keys␣that␣begin␣with␣C<S:>,␣and␣list␣context
return␣values␣under␣keys␣that␣begin␣with␣C<L:>.

=back

=head1␣OTHER␣FACILITIES

=head2␣C<unmemoize>

There's␣an␣C<unmemoize>␣function␣that␣you␣can␣import␣if␣you␣want␣to.
Why␣would␣you␣want␣to?␣␣Here's␣an␣example:␣Suppose␣you␣have␣your␣cache
tied␣to␣a␣DBM␣file,␣and␣you␣want␣to␣make␣sure␣that␣the␣cache␣is
written␣out␣to␣disk␣if␣someone␣interrupts␣the␣program.␣␣If␣the␣program
exits␣normally,␣this␣will␣happen␣anyway,␣but␣if␣someone␣types
control-C␣or␣something␣then␣the␣program␣will␣terminate␣immediately
without␣synchronizing␣the␣database.␣␣So␣what␣you␣can␣do␣instead␣is

␣␣␣␣$SIG{INT}␣=␣sub␣{␣unmemoize␣'function'␣};

C<unmemoize>␣accepts␣a␣reference␣to,␣or␣the␣name␣of␣a␣previously
memoized␣function,␣and␣undoes␣whatever␣it␣did␣to␣provide␣the␣memoized
version␣in␣the␣first␣place,␣including␣making␣the␣name␣refer␣to␣the
unmemoized␣version␣if␣appropriate.␣␣It␣returns␣a␣reference␣to␣the
unmemoized␣version␣of␣the␣function.

If␣you␣ask␣it␣to␣unmemoize␣a␣function␣that␣was␣never␣memoized,␣it
croaks.

=head2␣C<flush_cache>

C<flush_cache(function)>␣will␣flush␣out␣the␣caches,␣discarding␣I<all>
the␣cached␣data.␣␣The␣argument␣may␣be␣a␣function␣name␣or␣a␣reference
to␣a␣function.␣␣For␣finer␣control␣over␣when␣data␣is␣discarded␣or
expired,␣see␣the␣documentation␣for␣C<Memoize::Expire>,␣included␣in
this␣package.

Note␣that␣if␣the␣cache␣is␣a␣tied␣hash,␣C<flush_cache>␣will␣attempt␣to
invoke␣the␣C<CLEAR>␣method␣on␣the␣hash.␣␣If␣there␣is␣no␣C<CLEAR>
method,␣this␣will␣cause␣a␣run-time␣error.

An␣alternative␣approach␣to␣cache␣flushing␣is␣to␣use␣the␣C<HASH>␣option
(see␣above)␣to␣request␣that␣C<Memoize>␣use␣a␣particular␣hash␣variable
as␣its␣cache.␣␣Then␣you␣can␣examine␣or␣modify␣the␣hash␣at␣any␣time␣in
any␣way␣you␣desire.␣␣You␣may␣flush␣the␣cache␣by␣using␣C<%hash␣=␣()>.␣

=head1␣CAVEATS

Memoization␣is␣not␣a␣cure-all:

=over␣4

=item␣*

Do␣not␣memoize␣a␣function␣whose␣behavior␣depends␣on␣program
state␣other␣than␣its␣own␣arguments,␣such␣as␣global␣variables,␣the␣time
of␣day,␣or␣file␣input.␣␣These␣functions␣will␣not␣produce␣correct
results␣when␣memoized.␣␣For␣a␣particularly␣easy␣example:

	sub␣f␣{
	␣␣time;
	}

This␣function␣takes␣no␣arguments,␣and␣as␣far␣as␣C<Memoize>␣is
concerned,␣it␣always␣returns␣the␣same␣result.␣␣C<Memoize>␣is␣wrong,␣of
course,␣and␣the␣memoized␣version␣of␣this␣function␣will␣call␣C<time>␣once
to␣get␣the␣current␣time,␣and␣it␣will␣return␣that␣same␣time
every␣time␣you␣call␣it␣after␣that.

=item␣*

Do␣not␣memoize␣a␣function␣with␣side␣effects.

	sub␣f␣{
	␣␣my␣($a,␣$b)␣=␣@_;
␣␣␣␣␣␣␣␣␣␣my␣$s␣=␣$a␣+␣$b;
	␣␣print␣"$a␣+␣$b␣=␣$s.\n";
	}

This␣function␣accepts␣two␣arguments,␣adds␣them,␣and␣prints␣their␣sum.
Its␣return␣value␣is␣the␣numuber␣of␣characters␣it␣printed,␣but␣you
probably␣didn't␣care␣about␣that.␣␣But␣C<Memoize>␣doesn't␣understand
that.␣␣If␣you␣memoize␣this␣function,␣you␣will␣get␣the␣result␣you
expect␣the␣first␣time␣you␣ask␣it␣to␣print␣the␣sum␣of␣2␣and␣3,␣but
subsequent␣calls␣will␣return␣1␣(the␣return␣value␣of
C<print>)␣without␣actually␣printing␣anything.

=item␣*

Do␣not␣memoize␣a␣function␣that␣returns␣a␣data␣structure␣that␣is
modified␣by␣its␣caller.

Consider␣these␣functions:␣␣C<getusers>␣returns␣a␣list␣of␣users␣somehow,
and␣then␣C<main>␣throws␣away␣the␣first␣user␣on␣the␣list␣and␣prints␣the
rest:

	sub␣main␣{
	␣␣my␣$userlist␣=␣getusers();
	␣␣shift␣@$userlist;
	␣␣foreach␣$u␣(@$userlist)␣{
	␣␣␣␣print␣"User␣$u\n";
	␣␣}
	}

	sub␣getusers␣{
	␣␣my␣@users;
	␣␣#␣Do␣something␣to␣get␣a␣list␣of␣users;
	␣␣\@users;␣␣#␣Return␣reference␣to␣list.
	}

If␣you␣memoize␣C<getusers>␣here,␣it␣will␣work␣right␣exactly␣once.␣␣The
reference␣to␣the␣users␣list␣will␣be␣stored␣in␣the␣memo␣table.␣␣C<main>
will␣discard␣the␣first␣element␣from␣the␣referenced␣list.␣␣The␣next
time␣you␣invoke␣C<main>,␣C<Memoize>␣will␣not␣call␣C<getusers>;␣it␣will
just␣return␣the␣same␣reference␣to␣the␣same␣list␣it␣got␣last␣time.␣␣But
this␣time␣the␣list␣has␣already␣had␣its␣head␣removed;␣C<main>␣will
erroneously␣remove␣another␣element␣from␣it.␣␣The␣list␣will␣get␣shorter
and␣shorter␣every␣time␣you␣call␣C<main>.

Similarly,␣this:

	$u1␣=␣getusers();␣␣␣␣
	$u2␣=␣getusers();␣␣␣␣
	pop␣@$u1;

will␣modify␣$u2␣as␣well␣as␣$u1,␣because␣both␣variables␣are␣references
to␣the␣same␣array.␣␣Had␣C<getusers>␣not␣been␣memoized,␣$u1␣and␣$u2
would␣have␣referred␣to␣different␣arrays.

=item␣*␣

Do␣not␣memoize␣a␣very␣simple␣function.

Recently␣someone␣mentioned␣to␣me␣that␣the␣Memoize␣module␣made␣his
program␣run␣slower␣instead␣of␣faster.␣␣It␣turned␣out␣that␣he␣was
memoizing␣the␣following␣function:

␣␣␣␣sub␣square␣{
␣␣␣␣␣␣$_[0]␣*␣$_[0];
␣␣␣␣}

I␣pointed␣out␣that␣C<Memoize>␣uses␣a␣hash,␣and␣that␣looking␣up␣a
number␣in␣the␣hash␣is␣necessarily␣going␣to␣take␣a␣lot␣longer␣than␣a
single␣multiplication.␣␣There␣really␣is␣no␣way␣to␣speed␣up␣the
C<square>␣function.

Memoization␣is␣not␣magical.

=back

=head1␣PERSISTENT␣CACHE␣SUPPORT

You␣can␣tie␣the␣cache␣tables␣to␣any␣sort␣of␣tied␣hash␣that␣you␣want
to,␣as␣long␣as␣it␣supports␣C<TIEHASH>,␣C<FETCH>,␣C<STORE>,␣and
C<EXISTS>.␣␣For␣example,

␣␣␣␣␣␣␣␣tie␣my␣%cache␣=>␣'GDBM_File',␣$filename,␣O_RDWR|O_CREAT,␣0666;
␣␣␣␣␣␣␣␣memoize␣'function',␣SCALAR_CACHE␣=>␣[HASH␣=>␣\%cache];

works␣just␣fine.␣␣For␣some␣storage␣methods,␣you␣need␣a␣little␣glue.

C<SDBM_File>␣doesn't␣supply␣an␣C<EXISTS>␣method,␣so␣included␣in␣this
package␣is␣a␣glue␣module␣called␣C<Memoize::SDBM_File>␣which␣does
provide␣one.␣␣Use␣this␣instead␣of␣plain␣C<SDBM_File>␣to␣store␣your
cache␣table␣on␣disk␣in␣an␣C<SDBM_File>␣database:

␣␣␣␣␣␣␣␣tie␣my␣%cache␣=>␣'Memoize::SDBM_File',␣$filename,␣O_RDWR|O_CREAT,␣0666;
␣␣␣␣␣␣␣␣memoize␣'function',␣SCALAR_CACHE␣=>␣[HASH␣=>␣\%cache];

C<NDBM_File>␣has␣the␣same␣problem␣and␣the␣same␣solution.␣␣(Use
C<Memoize::NDBM_File␣instead␣of␣plain␣NDBM_File.>)

C<Storable>␣isn't␣a␣tied␣hash␣class␣at␣all.␣␣You␣can␣use␣it␣to␣store␣a
hash␣to␣disk␣and␣retrieve␣it␣again,␣but␣you␣can't␣modify␣the␣hash␣while
it's␣on␣the␣disk.␣␣So␣if␣you␣want␣to␣store␣your␣cache␣table␣in␣a
C<Storable>␣database,␣use␣C<Memoize::Storable>,␣which␣puts␣a␣hashlike
front-end␣onto␣C<Storable>.␣␣The␣hash␣table␣is␣actually␣kept␣in
memory,␣and␣is␣loaded␣from␣your␣C<Storable>␣file␣at␣the␣time␣you
memoize␣the␣function,␣and␣stored␣back␣at␣the␣time␣you␣unmemoize␣the
function␣(or␣when␣your␣program␣exits):

␣␣␣␣␣␣␣␣tie␣my␣%cache␣=>␣'Memoize::Storable',␣$filename;
	memoize␣'function',␣SCALAR_CACHE␣=>␣[HASH␣=>␣\%cache];

␣␣␣␣␣␣␣␣tie␣my␣%cache␣=>␣'Memoize::Storable',␣$filename,␣'nstore';
	memoize␣'function',␣SCALAR_CACHE␣=>␣[HASH␣=>␣\%cache];

Include␣the␣`nstore'␣option␣to␣have␣the␣C<Storable>␣database␣written
in␣`network␣order'.␣␣(See␣L<Storable>␣for␣more␣details␣about␣this.)

The␣C<flush_cache()>␣function␣will␣raise␣a␣run-time␣error␣unless␣the
tied␣package␣provides␣a␣C<CLEAR>␣method.

=head1␣EXPIRATION␣SUPPORT

See␣Memoize::Expire,␣which␣is␣a␣plug-in␣module␣that␣adds␣expiration
functionality␣to␣Memoize.␣␣If␣you␣don't␣like␣the␣kinds␣of␣policies
that␣Memoize::Expire␣implements,␣it␣is␣easy␣to␣write␣your␣own␣plug-in
module␣to␣implement␣whatever␣policy␣you␣desire.␣␣Memoize␣comes␣with
several␣examples.␣␣An␣expiration␣manager␣that␣implements␣a␣LRU␣policy
is␣available␣on␣CPAN␣as␣Memoize::ExpireLRU.

=head1␣BUGS

The␣test␣suite␣is␣much␣better,␣but␣always␣needs␣improvement.

There␣is␣some␣problem␣with␣the␣way␣C<goto␣&f>␣works␣under␣threaded
Perl,␣perhaps␣because␣of␣the␣lexical␣scoping␣of␣C<@_>.␣␣This␣is␣a␣bug
in␣Perl,␣and␣until␣it␣is␣resolved,␣memoized␣functions␣will␣see␣a
slightly␣different␣C<caller()>␣and␣will␣perform␣a␣little␣more␣slowly
on␣threaded␣perls␣than␣unthreaded␣perls.

Some␣versions␣of␣C<DB_File>␣won't␣let␣you␣store␣data␣under␣a␣key␣of
length␣0.␣␣That␣means␣that␣if␣you␣have␣a␣function␣C<f>␣which␣you
memoized␣and␣the␣cache␣is␣in␣a␣C<DB_File>␣database,␣then␣the␣value␣of
C<f()>␣(C<f>␣called␣with␣no␣arguments)␣will␣not␣be␣memoized.␣␣If␣this
is␣a␣big␣problem,␣you␣can␣supply␣a␣normalizer␣function␣that␣prepends
C<"x">␣to␣every␣key.

=head1␣MAILING␣LIST

To␣join␣a␣very␣low-traffic␣mailing␣list␣for␣announcements␣about
C<Memoize>,␣send␣an␣empty␣note␣to␣C<mjd-perl-memoize-request@plover.com>.

=head1␣AUTHOR

Mark-Jason␣Dominus␣(C<mjd-perl-memoize+@plover.com>),␣Plover␣Systems␣co.

See␣the␣C<Memoize.pm>␣Page␣at␣http://perl.plover.com/Memoize/
for␣news␣and␣upgrades.␣␣Near␣this␣page,␣at
http://perl.plover.com/MiniMemoize/␣there␣is␣an␣article␣about
memoization␣and␣about␣the␣internals␣of␣Memoize␣that␣appeared␣in␣The
Perl␣Journal,␣issue␣#13.␣␣(This␣article␣is␣also␣included␣in␣the
Memoize␣distribution␣as␣`article.html'.)

The␣author's␣book␣I<Higher-Order␣Perl>␣(2005,␣ISBN␣1558607013,␣published
by␣Morgan␣Kaufmann)␣discusses␣memoization␣(and␣many␣other␣
topics)␣in␣tremendous␣detail.␣It␣is␣available␣on-line␣for␣free.
For␣more␣information,␣visit␣http://hop.perl.plover.com/␣.

To␣join␣a␣mailing␣list␣for␣announcements␣about␣C<Memoize>,␣send␣an
empty␣message␣to␣C<mjd-perl-memoize-request@plover.com>.␣␣This␣mailing
list␣is␣for␣announcements␣only␣and␣has␣extremely␣low␣traffic---fewer␣than
two␣messages␣per␣year.

=head1␣COPYRIGHT␣AND␣LICENSE

Copyright␣1998,␣1999,␣2000,␣2001,␣2012␣␣by␣Mark␣Jason␣Dominus

This␣library␣is␣free␣software;␣you␣may␣redistribute␣it␣and/or␣modify
it␣under␣the␣same␣terms␣as␣Perl␣itself.

=head1␣THANK␣YOU

Many␣thanks␣to␣Florian␣Ragwitz␣for␣administration␣and␣packaging
assistance,␣to␣John␣Tromp␣for␣bug␣reports,␣to␣Jonathan␣Roy␣for␣bug␣reports
and␣suggestions,␣to␣Michael␣Schwern␣for␣other␣bug␣reports␣and␣patches,
to␣Mike␣Cariaso␣for␣helping␣me␣to␣figure␣out␣the␣Right␣Thing␣to␣Do
About␣Expiration,␣to␣Joshua␣Gerth,␣Joshua␣Chamas,␣Jonathan␣Roy
(again),␣Mark␣D.␣Anderson,␣and␣Andrew␣Johnson␣for␣more␣suggestions
about␣expiration,␣to␣Brent␣Powers␣for␣the␣Memoize::ExpireLRU␣module,
to␣Ariel␣Scolnicov␣for␣delightful␣messages␣about␣the␣Fibonacci
function,␣to␣Dion␣Almaer␣for␣thought-provoking␣suggestions␣about␣the
default␣normalizer,␣to␣Walt␣Mankowski␣and␣Kurt␣Starsinic␣for␣much␣help
investigating␣problems␣under␣threaded␣Perl,␣to␣Alex␣Dudkevich␣for
reporting␣the␣bug␣in␣prototyped␣functions␣and␣for␣checking␣my␣patch,
to␣Tony␣Bass␣for␣many␣helpful␣suggestions,␣to␣Jonathan␣Roy␣(again)␣for
finding␣a␣use␣for␣C<unmemoize()>,␣to␣Philippe␣Verdret␣for␣enlightening
discussion␣of␣C<Hook::PrePostCall>,␣to␣Nat␣Torkington␣for␣advice␣I
ignored,␣to␣Chris␣Nandor␣for␣portability␣advice,␣to␣Randal␣Schwartz
for␣suggesting␣the␣'C<flush_cache>␣function,␣and␣to␣Jenda␣Krynicky␣for
being␣a␣light␣in␣the␣world.

Special␣thanks␣to␣Jarkko␣Hietaniemi,␣the␣5.8.0␣pumpking,␣for␣including
this␣module␣in␣the␣core␣and␣for␣his␣patient␣and␣helpful␣guidance
during␣the␣integration␣process.

=cut
----------
Range: (5772993,5777477) (4484)
=pod

=encoding␣UTF-8

=head1␣NAME

CPAN::Meta::Prereqs␣-␣a␣set␣of␣distribution␣prerequisites␣by␣phase␣and␣type

=head1␣VERSION

version␣2.150010

=head1␣DESCRIPTION

A␣CPAN::Meta::Prereqs␣object␣represents␣the␣prerequisites␣for␣a␣CPAN
distribution␣or␣one␣of␣its␣optional␣features.␣␣Each␣set␣of␣prereqs␣is
organized␣by␣phase␣and␣type,␣as␣described␣in␣L<CPAN::Meta::Prereqs>.

=head1␣METHODS

=head2␣new

␣␣my␣$prereq␣=␣CPAN::Meta::Prereqs->new(␣\%prereq_spec␣);

This␣method␣returns␣a␣new␣set␣of␣Prereqs.␣␣The␣input␣should␣look␣like␣the
contents␣of␣the␣C<prereqs>␣field␣described␣in␣L<CPAN::Meta::Spec>,␣meaning
something␣more␣or␣less␣like␣this:

␣␣my␣$prereq␣=␣CPAN::Meta::Prereqs->new({
␣␣␣␣runtime␣=>␣{
␣␣␣␣␣␣requires␣=>␣{
␣␣␣␣␣␣␣␣'Some::Module'␣=>␣'1.234',
␣␣␣␣␣␣␣␣...,
␣␣␣␣␣␣},
␣␣␣␣␣␣...,
␣␣␣␣},
␣␣␣␣...,
␣␣});

You␣can␣also␣construct␣an␣empty␣set␣of␣prereqs␣with:

␣␣my␣$prereqs␣=␣CPAN::Meta::Prereqs->new;

This␣empty␣set␣of␣prereqs␣is␣useful␣for␣accumulating␣new␣prereqs␣before␣finally
dumping␣the␣whole␣set␣into␣a␣structure␣or␣string.

=head2␣requirements_for

␣␣my␣$requirements␣=␣$prereqs->requirements_for(␣$phase,␣$type␣);

This␣method␣returns␣a␣L<CPAN::Meta::Requirements>␣object␣for␣the␣given
phase/type␣combination.␣␣If␣no␣prerequisites␣are␣registered␣for␣that
combination,␣a␣new␣CPAN::Meta::Requirements␣object␣will␣be␣returned,␣and␣it␣may
be␣added␣to␣as␣needed.

If␣C<$phase>␣or␣C<$type>␣are␣undefined␣or␣otherwise␣invalid,␣an␣exception␣will
be␣raised.

=head2␣phases

␣␣my␣@phases␣=␣$prereqs->phases;

This␣method␣returns␣the␣list␣of␣all␣phases␣currently␣populated␣in␣the␣prereqs
object,␣suitable␣for␣iterating.

=head2␣types_in

␣␣my␣@runtime_types␣=␣$prereqs->types_in('runtime');

This␣method␣returns␣the␣list␣of␣all␣types␣currently␣populated␣in␣the␣prereqs
object␣for␣the␣provided␣phase,␣suitable␣for␣iterating.

=head2␣with_merged_prereqs

␣␣my␣$new_prereqs␣=␣$prereqs->with_merged_prereqs(␣$other_prereqs␣);

␣␣my␣$new_prereqs␣=␣$prereqs->with_merged_prereqs(␣\@other_prereqs␣);

This␣method␣returns␣a␣new␣CPAN::Meta::Prereqs␣objects␣in␣which␣all␣the
other␣prerequisites␣given␣are␣merged␣into␣the␣current␣set.␣␣This␣is␣primarily
provided␣for␣combining␣a␣distribution's␣core␣prereqs␣with␣the␣prereqs␣of␣one␣of
its␣optional␣features.

The␣new␣prereqs␣object␣has␣no␣ties␣to␣the␣originals,␣and␣altering␣it␣further
will␣not␣alter␣them.

=head2␣merged_requirements

␣␣␣␣my␣$new_reqs␣=␣$prereqs->merged_requirements(␣\@phases,␣\@types␣);
␣␣␣␣my␣$new_reqs␣=␣$prereqs->merged_requirements(␣\@phases␣);
␣␣␣␣my␣$new_reqs␣=␣$prereqs->merged_requirements();

This␣method␣joins␣together␣all␣requirements␣across␣a␣number␣of␣phases
and␣types␣into␣a␣new␣L<CPAN::Meta::Requirements>␣object.␣␣If␣arguments
are␣omitted,␣it␣defaults␣to␣"runtime",␣"build"␣and␣"test"␣for␣phases
and␣"requires"␣and␣"recommends"␣for␣types.

=head2␣as_string_hash

This␣method␣returns␣a␣hashref␣containing␣structures␣suitable␣for␣dumping␣into␣a
distmeta␣data␣structure.␣␣It␣is␣made␣up␣of␣hashes␣and␣strings,␣only;␣there␣will
be␣no␣Prereqs,␣CPAN::Meta::Requirements,␣or␣C<version>␣objects␣inside␣it.

=head2␣is_finalized

This␣method␣returns␣true␣if␣the␣set␣of␣prereqs␣has␣been␣marked␣"finalized,"␣and
cannot␣be␣altered.

=head2␣finalize

Calling␣C<finalize>␣on␣a␣Prereqs␣object␣will␣close␣it␣for␣further␣modification.
Attempting␣to␣make␣any␣changes␣that␣would␣actually␣alter␣the␣prereqs␣will
result␣in␣an␣exception␣being␣thrown.

=head2␣clone

␣␣my␣$cloned_prereqs␣=␣$prereqs->clone;

This␣method␣returns␣a␣Prereqs␣object␣that␣is␣identical␣to␣the␣original␣object,
but␣can␣be␣altered␣without␣affecting␣the␣original␣object.␣␣Finalization␣does
not␣survive␣cloning,␣meaning␣that␣you␣may␣clone␣a␣finalized␣set␣of␣prereqs␣and
then␣modify␣the␣clone.

=head1␣BUGS

Please␣report␣any␣bugs␣or␣feature␣using␣the␣CPAN␣Request␣Tracker.
Bugs␣can␣be␣submitted␣through␣the␣web␣interface␣at
L<http://rt.cpan.org/Dist/Display.html?Queue=CPAN-Meta>

When␣submitting␣a␣bug␣or␣request,␣please␣include␣a␣test-file␣or␣a␣patch␣to␣an
existing␣test-file␣that␣illustrates␣the␣bug␣or␣desired␣feature.

=head1␣AUTHORS

=over␣4

=item␣*

David␣Golden␣<dagolden@cpan.org>

=item␣*

Ricardo␣Signes␣<rjbs@cpan.org>

=item␣*

Adam␣Kennedy␣<adamk@cpan.org>

=back

=head1␣COPYRIGHT␣AND␣LICENSE

This␣software␣is␣copyright␣(c)␣2010␣by␣David␣Golden,␣Ricardo␣Signes,␣Adam␣Kennedy␣and␣Contributors.

This␣is␣free␣software;␣you␣can␣redistribute␣it␣and/or␣modify␣it␣under
the␣same␣terms␣as␣the␣Perl␣5␣programming␣language␣system␣itself.

=cut
----------
Range: (5823581,5827437) (3856)
=pod

=encoding␣UTF-8

=head1␣NAME

CPAN::Meta::Converter␣-␣Convert␣CPAN␣distribution␣metadata␣structures

=head1␣VERSION

version␣2.150010

=head1␣SYNOPSIS

␣␣my␣$struct␣=␣decode_json_file('META.json');

␣␣my␣$cmc␣=␣CPAN::Meta::Converter->new(␣$struct␣);

␣␣my␣$new_struct␣=␣$cmc->convert(␣version␣=>␣"2"␣);

=head1␣DESCRIPTION

This␣module␣converts␣CPAN␣Meta␣structures␣from␣one␣form␣to␣another.␣␣The
primary␣use␣is␣to␣convert␣older␣structures␣to␣the␣most␣modern␣version␣of
the␣specification,␣but␣other␣transformations␣may␣be␣implemented␣in␣the
future␣as␣needed.␣␣(E.g.␣stripping␣all␣custom␣fields␣or␣stripping␣all
optional␣fields.)

=head1␣METHODS

=head2␣new

␣␣my␣$cmc␣=␣CPAN::Meta::Converter->new(␣$struct␣);

The␣constructor␣should␣be␣passed␣a␣valid␣metadata␣structure␣but␣invalid
structures␣are␣accepted.␣␣If␣no␣meta-spec␣version␣is␣provided,␣version␣1.0␣will
be␣assumed.

Optionally,␣you␣can␣provide␣a␣C<default_version>␣argument␣after␣C<$struct>:

␣␣my␣$cmc␣=␣CPAN::Meta::Converter->new(␣$struct,␣default_version␣=>␣"1.4"␣);

This␣is␣only␣needed␣when␣converting␣a␣metadata␣fragment␣that␣does␣not␣include␣a
C<meta-spec>␣field.

=head2␣convert

␣␣my␣$new_struct␣=␣$cmc->convert(␣version␣=>␣"2"␣);

Returns␣a␣new␣hash␣reference␣with␣the␣metadata␣converted␣to␣a␣different␣form.
C<convert>␣will␣die␣if␣any␣conversion/standardization␣still␣results␣in␣an
invalid␣structure.

Valid␣parameters␣include:

=over

=item␣*

C<version>␣--␣Indicates␣the␣desired␣specification␣version␣(e.g.␣"1.0",␣"1.1"␣...␣"1.4",␣"2").
Defaults␣to␣the␣latest␣version␣of␣the␣CPAN␣Meta␣Spec.

=back

Conversion␣proceeds␣through␣each␣version␣in␣turn.␣␣For␣example,␣a␣version␣1.2
structure␣might␣be␣converted␣to␣1.3␣then␣1.4␣then␣finally␣to␣version␣2.␣The
conversion␣process␣attempts␣to␣clean-up␣simple␣errors␣and␣standardize␣data.
For␣example,␣if␣C<author>␣is␣given␣as␣a␣scalar,␣it␣will␣converted␣to␣an␣array
reference␣containing␣the␣item.␣(Converting␣a␣structure␣to␣its␣own␣version␣will
also␣clean-up␣and␣standardize.)

When␣data␣are␣cleaned␣and␣standardized,␣missing␣or␣invalid␣fields␣will␣be
replaced␣with␣sensible␣defaults␣when␣possible.␣␣This␣may␣be␣lossy␣or␣imprecise.
For␣example,␣some␣badly␣structured␣META.yml␣files␣on␣CPAN␣have␣prerequisite
modules␣listed␣as␣both␣keys␣and␣values:

␣␣requires␣=>␣{␣'Foo::Bar'␣=>␣'Bam::Baz'␣}

These␣would␣be␣split␣and␣each␣converted␣to␣a␣prerequisite␣with␣a␣minimum
version␣of␣zero.

When␣some␣mandatory␣fields␣are␣missing␣or␣invalid,␣the␣conversion␣will␣attempt
to␣provide␣a␣sensible␣default␣or␣will␣fill␣them␣with␣a␣value␣of␣'unknown'.␣␣For
example␣a␣missing␣or␣unrecognized␣C<license>␣field␣will␣result␣in␣a␣C<license>
field␣of␣'unknown'.␣␣Fields␣that␣may␣get␣an␣'unknown'␣include:

=over␣4

=item␣*

abstract

=item␣*

author

=item␣*

license

=back

=head2␣upgrade_fragment

␣␣my␣$new_struct␣=␣$cmc->upgrade_fragment;

Returns␣a␣new␣hash␣reference␣with␣the␣metadata␣converted␣to␣the␣latest␣version
of␣the␣CPAN␣Meta␣Spec.␣␣No␣validation␣is␣done␣on␣the␣result␣--␣you␣must
validate␣after␣merging␣fragments␣into␣a␣complete␣metadata␣document.

Available␣since␣version␣2.141170.

=head1␣BUGS

Please␣report␣any␣bugs␣or␣feature␣using␣the␣CPAN␣Request␣Tracker.
Bugs␣can␣be␣submitted␣through␣the␣web␣interface␣at
L<http://rt.cpan.org/Dist/Display.html?Queue=CPAN-Meta>

When␣submitting␣a␣bug␣or␣request,␣please␣include␣a␣test-file␣or␣a␣patch␣to␣an
existing␣test-file␣that␣illustrates␣the␣bug␣or␣desired␣feature.

=head1␣AUTHORS

=over␣4

=item␣*

David␣Golden␣<dagolden@cpan.org>

=item␣*

Ricardo␣Signes␣<rjbs@cpan.org>

=item␣*

Adam␣Kennedy␣<adamk@cpan.org>

=back

=head1␣COPYRIGHT␣AND␣LICENSE

This␣software␣is␣copyright␣(c)␣2010␣by␣David␣Golden,␣Ricardo␣Signes,␣Adam␣Kennedy␣and␣Contributors.

This␣is␣free␣software;␣you␣can␣redistribute␣it␣and/or␣modify␣it␣under
the␣same␣terms␣as␣the␣Perl␣5␣programming␣language␣system␣itself.

=cut
----------
Range: (5852633,5854355) (1722)
=pod

=encoding␣UTF-8

=head1␣NAME

CPAN::Meta::YAML␣-␣Read␣and␣write␣a␣subset␣of␣YAML␣for␣CPAN␣Meta␣files

=head1␣VERSION

version␣0.018

=head1␣SYNOPSIS

␣␣␣␣use␣CPAN::Meta::YAML;

␣␣␣␣#␣reading␣a␣META␣file
␣␣␣␣open␣$fh,␣"<:utf8",␣"META.yml";
␣␣␣␣$yaml_text␣=␣do␣{␣local␣$/;␣<$fh>␣};
␣␣␣␣$yaml␣=␣CPAN::Meta::YAML->read_string($yaml_text)
␣␣␣␣␣␣or␣die␣CPAN::Meta::YAML->errstr;

␣␣␣␣#␣finding␣the␣metadata
␣␣␣␣$meta␣=␣$yaml->[0];

␣␣␣␣#␣writing␣a␣META␣file
␣␣␣␣$yaml_text␣=␣$yaml->write_string
␣␣␣␣␣␣or␣die␣CPAN::Meta::YAML->errstr;
␣␣␣␣open␣$fh,␣">:utf8",␣"META.yml";
␣␣␣␣print␣$fh␣$yaml_text;

=head1␣DESCRIPTION

This␣module␣implements␣a␣subset␣of␣the␣YAML␣specification␣for␣use␣in␣reading
and␣writing␣CPAN␣metadata␣files␣like␣F<META.yml>␣and␣F<MYMETA.yml>.␣␣It␣should
not␣be␣used␣for␣any␣other␣general␣YAML␣parsing␣or␣generation␣task.

NOTE:␣F<META.yml>␣(and␣F<MYMETA.yml>)␣files␣should␣be␣UTF-8␣encoded.␣␣Users␣are
responsible␣for␣proper␣encoding␣and␣decoding.␣␣In␣particular,␣the␣C<read>␣and
C<write>␣methods␣do␣B<not>␣support␣UTF-8␣and␣should␣not␣be␣used.

=head1␣SUPPORT

This␣module␣is␣currently␣derived␣from␣L<YAML::Tiny>␣by␣Adam␣Kennedy.␣␣If
there␣are␣bugs␣in␣how␣it␣parses␣a␣particular␣META.yml␣file,␣please␣file
a␣bug␣report␣in␣the␣YAML::Tiny␣bugtracker:
L<https://github.com/Perl-Toolchain-Gang/YAML-Tiny/issues>

=head1␣SEE␣ALSO

L<YAML::Tiny>,␣L<YAML>,␣L<YAML::XS>

=head1␣AUTHORS

=over␣4

=item␣*

Adam␣Kennedy␣<adamk@cpan.org>

=item␣*

David␣Golden␣<dagolden@cpan.org>

=back

=head1␣COPYRIGHT␣AND␣LICENSE

This␣software␣is␣copyright␣(c)␣2010␣by␣Adam␣Kennedy.

This␣is␣free␣software;␣you␣can␣redistribute␣it␣and/or␣modify␣it␣under
the␣same␣terms␣as␣the␣Perl␣5␣programming␣language␣system␣itself.

=cut
----------
Range: (5885732,5887519) (1787)
=pod

=encoding␣UTF-8

=head1␣NAME

CPAN::Meta::Feature␣-␣an␣optional␣feature␣provided␣by␣a␣CPAN␣distribution

=head1␣VERSION

version␣2.150010

=head1␣DESCRIPTION

A␣CPAN::Meta::Feature␣object␣describes␣an␣optional␣feature␣offered␣by␣a␣CPAN
distribution␣and␣specified␣in␣the␣distribution's␣F<META.json>␣(or␣F<META.yml>)
file.

For␣the␣most␣part,␣this␣class␣will␣only␣be␣used␣when␣operating␣on␣the␣result␣of
the␣C<feature>␣or␣C<features>␣methods␣on␣a␣L<CPAN::Meta>␣object.

=head1␣METHODS

=head2␣new

␣␣my␣$feature␣=␣CPAN::Meta::Feature->new(␣$identifier␣=>␣\%spec␣);

This␣returns␣a␣new␣Feature␣object.␣␣The␣C<%spec>␣argument␣to␣the␣constructor
should␣be␣the␣same␣as␣the␣value␣of␣the␣C<optional_feature>␣entry␣in␣the
distmeta.␣␣It␣must␣contain␣entries␣for␣C<description>␣and␣C<prereqs>.

=head2␣identifier

This␣method␣returns␣the␣feature's␣identifier.

=head2␣description

This␣method␣returns␣the␣feature's␣long␣description.

=head2␣prereqs

This␣method␣returns␣the␣feature's␣prerequisites␣as␣a␣L<CPAN::Meta::Prereqs>
object.

=head1␣BUGS

Please␣report␣any␣bugs␣or␣feature␣using␣the␣CPAN␣Request␣Tracker.
Bugs␣can␣be␣submitted␣through␣the␣web␣interface␣at
L<http://rt.cpan.org/Dist/Display.html?Queue=CPAN-Meta>

When␣submitting␣a␣bug␣or␣request,␣please␣include␣a␣test-file␣or␣a␣patch␣to␣an
existing␣test-file␣that␣illustrates␣the␣bug␣or␣desired␣feature.

=head1␣AUTHORS

=over␣4

=item␣*

David␣Golden␣<dagolden@cpan.org>

=item␣*

Ricardo␣Signes␣<rjbs@cpan.org>

=item␣*

Adam␣Kennedy␣<adamk@cpan.org>

=back

=head1␣COPYRIGHT␣AND␣LICENSE

This␣software␣is␣copyright␣(c)␣2010␣by␣David␣Golden,␣Ricardo␣Signes,␣Adam␣Kennedy␣and␣Contributors.

This␣is␣free␣software;␣you␣can␣redistribute␣it␣and/or␣modify␣it␣under
the␣same␣terms␣as␣the␣Perl␣5␣programming␣language␣system␣itself.

=cut
----------
Range: (5916935,5921409) (4474)
=pod

=encoding␣UTF-8

=head1␣NAME

CPAN::Meta::Validator␣-␣validate␣CPAN␣distribution␣metadata␣structures

=head1␣VERSION

version␣2.150010

=head1␣SYNOPSIS

␣␣my␣$struct␣=␣decode_json_file('META.json');

␣␣my␣$cmv␣=␣CPAN::Meta::Validator->new(␣$struct␣);

␣␣unless␣(␣$cmv->is_valid␣)␣{
␣␣␣␣my␣$msg␣=␣"Invalid␣META␣structure.␣␣Errors␣found:\n";
␣␣␣␣$msg␣.=␣join(␣"\n",␣$cmv->errors␣);
␣␣␣␣die␣$msg;
␣␣}

=head1␣DESCRIPTION

This␣module␣validates␣a␣CPAN␣Meta␣structure␣against␣the␣version␣of␣the
the␣specification␣claimed␣in␣the␣C<meta-spec>␣field␣of␣the␣structure.

=head1␣METHODS

=head2␣new

␣␣my␣$cmv␣=␣CPAN::Meta::Validator->new(␣$struct␣)

The␣constructor␣must␣be␣passed␣a␣metadata␣structure.

=head2␣is_valid

␣␣if␣(␣$cmv->is_valid␣)␣{
␣␣␣␣...
␣␣}

Returns␣a␣boolean␣value␣indicating␣whether␣the␣metadata␣provided
is␣valid.

=head2␣errors

␣␣warn(␣join␣"\n",␣$cmv->errors␣);

Returns␣a␣list␣of␣errors␣seen␣during␣validation.

=begin␣:internals

=head2␣Check␣Methods

=over

=item␣*

check_map($spec,$data)

Checks␣whether␣a␣map␣(or␣hash)␣part␣of␣the␣data␣structure␣conforms␣to␣the
appropriate␣specification␣definition.

=item␣*

check_list($spec,$data)

Checks␣whether␣a␣list␣(or␣array)␣part␣of␣the␣data␣structure␣conforms␣to
the␣appropriate␣specification␣definition.

=item␣*

=back

=head2␣Validator␣Methods

=over

=item␣*

header($self,$key,$value)

Validates␣that␣the␣header␣is␣valid.

Note:␣No␣longer␣used␣as␣we␣now␣read␣the␣data␣structure,␣not␣the␣file.

=item␣*

url($self,$key,$value)

Validates␣that␣a␣given␣value␣is␣in␣an␣acceptable␣URL␣format

=item␣*

urlspec($self,$key,$value)

Validates␣that␣the␣URL␣to␣a␣META␣specification␣is␣a␣known␣one.

=item␣*

string_or_undef($self,$key,$value)

Validates␣that␣the␣value␣is␣either␣a␣string␣or␣an␣undef␣value.␣Bit␣of␣a
catchall␣function␣for␣parts␣of␣the␣data␣structure␣that␣are␣completely␣user
defined.

=item␣*

string($self,$key,$value)

Validates␣that␣a␣string␣exists␣for␣the␣given␣key.

=item␣*

file($self,$key,$value)

Validate␣that␣a␣file␣is␣passed␣for␣the␣given␣key.␣This␣may␣be␣made␣more
thorough␣in␣the␣future.␣For␣now␣it␣acts␣like␣\&string.

=item␣*

exversion($self,$key,$value)

Validates␣a␣list␣of␣versions,␣e.g.␣'<=␣5,␣>=2,␣==3,␣!=4,␣>1,␣<6,␣0'.

=item␣*

version($self,$key,$value)

Validates␣a␣single␣version␣string.␣Versions␣of␣the␣type␣'5.8.8'␣and␣'0.00_00'
are␣both␣valid.␣A␣leading␣'v'␣like␣'v1.2.3'␣is␣also␣valid.

=item␣*

boolean($self,$key,$value)

Validates␣for␣a␣boolean␣value:␣a␣defined␣value␣that␣is␣either␣"1"␣or␣"0"␣or
stringifies␣to␣those␣values.

=item␣*

license($self,$key,$value)

Validates␣that␣a␣value␣is␣given␣for␣the␣license.␣Returns␣1␣if␣an␣known␣license
type,␣or␣2␣if␣a␣value␣is␣given␣but␣the␣license␣type␣is␣not␣a␣recommended␣one.

=item␣*

custom_1($self,$key,$value)

Validates␣that␣the␣given␣key␣is␣in␣CamelCase,␣to␣indicate␣a␣user␣defined
keyword␣and␣only␣has␣characters␣in␣the␣class␣[-_a-zA-Z].␣␣In␣version␣1.X
of␣the␣spec,␣this␣was␣only␣explicitly␣stated␣for␣'resources'.

=item␣*

custom_2($self,$key,$value)

Validates␣that␣the␣given␣key␣begins␣with␣'x_'␣or␣'X_',␣to␣indicate␣a␣user
defined␣keyword␣and␣only␣has␣characters␣in␣the␣class␣[-_a-zA-Z]

=item␣*

identifier($self,$key,$value)

Validates␣that␣key␣is␣in␣an␣acceptable␣format␣for␣the␣META␣specification,
for␣an␣identifier,␣i.e.␣any␣that␣matches␣the␣regular␣expression
qr/[a-z][a-z_]/i.

=item␣*

module($self,$key,$value)

Validates␣that␣a␣given␣key␣is␣in␣an␣acceptable␣module␣name␣format,␣e.g.
'Test::CPAN::Meta::Version'.

=back

=end␣:internals

=for␣Pod::Coverage␣anything␣boolean␣check_list␣custom_1␣custom_2␣exversion␣file
identifier␣license␣module␣phase␣relation␣release_status␣string␣string_or_undef
url␣urlspec␣version␣header␣check_map

=head1␣BUGS

Please␣report␣any␣bugs␣or␣feature␣using␣the␣CPAN␣Request␣Tracker.
Bugs␣can␣be␣submitted␣through␣the␣web␣interface␣at
L<http://rt.cpan.org/Dist/Display.html?Queue=CPAN-Meta>

When␣submitting␣a␣bug␣or␣request,␣please␣include␣a␣test-file␣or␣a␣patch␣to␣an
existing␣test-file␣that␣illustrates␣the␣bug␣or␣desired␣feature.

=head1␣AUTHORS

=over␣4

=item␣*

David␣Golden␣<dagolden@cpan.org>

=item␣*

Ricardo␣Signes␣<rjbs@cpan.org>

=item␣*

Adam␣Kennedy␣<adamk@cpan.org>

=back

=head1␣COPYRIGHT␣AND␣LICENSE

This␣software␣is␣copyright␣(c)␣2010␣by␣David␣Golden,␣Ricardo␣Signes,␣Adam␣Kennedy␣and␣Contributors.

This␣is␣free␣software;␣you␣can␣redistribute␣it␣and/or␣modify␣it␣under
the␣same␣terms␣as␣the␣Perl␣5␣programming␣language␣system␣itself.

=cut
----------
Range: (6146111,6158685) (12574)
=pod

=encoding␣UTF-8

=head1␣NAME

CPAN::Meta␣-␣the␣distribution␣metadata␣for␣a␣CPAN␣dist

=head1␣VERSION

version␣2.150010

=head1␣SYNOPSIS

␣␣␣␣use␣v5.10;
␣␣␣␣use␣strict;
␣␣␣␣use␣warnings;
␣␣␣␣use␣CPAN::Meta;
␣␣␣␣use␣Module::Load;

␣␣␣␣my␣$meta␣=␣CPAN::Meta->load_file('META.json');

␣␣␣␣printf␣"testing␣requirements␣for␣%s␣version␣%s\n",
␣␣␣␣$meta->name,
␣␣␣␣$meta->version;

␣␣␣␣my␣$prereqs␣=␣$meta->effective_prereqs;

␣␣␣␣for␣my␣$phase␣(␣qw/configure␣runtime␣build␣test/␣)␣{
␣␣␣␣␣␣␣␣say␣"Requirements␣for␣$phase:";
␣␣␣␣␣␣␣␣my␣$reqs␣=␣$prereqs->requirements_for($phase,␣"requires");
␣␣␣␣␣␣␣␣for␣my␣$module␣(␣sort␣$reqs->required_modules␣)␣{
␣␣␣␣␣␣␣␣␣␣␣␣my␣$status;
␣␣␣␣␣␣␣␣␣␣␣␣if␣(␣eval␣{␣load␣$module␣unless␣$module␣eq␣'perl';␣1␣}␣)␣{
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣my␣$version␣=␣$module␣eq␣'perl'␣?␣$]␣:␣$module->VERSION;
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣$status␣=␣$reqs->accepts_module($module,␣$version)
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣?␣"$version␣ok"␣:␣"$version␣not␣ok";
␣␣␣␣␣␣␣␣␣␣␣␣}␣else␣{
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣$status␣=␣"missing"
␣␣␣␣␣␣␣␣␣␣␣␣};
␣␣␣␣␣␣␣␣␣␣␣␣say␣"␣␣$module␣($status)";
␣␣␣␣␣␣␣␣}
␣␣␣␣}

=head1␣DESCRIPTION

Software␣distributions␣released␣to␣the␣CPAN␣include␣a␣F<META.json>␣or,␣for
older␣distributions,␣F<META.yml>,␣which␣describes␣the␣distribution,␣its
contents,␣and␣the␣requirements␣for␣building␣and␣installing␣the␣distribution.
The␣data␣structure␣stored␣in␣the␣F<META.json>␣file␣is␣described␣in
L<CPAN::Meta::Spec>.

CPAN::Meta␣provides␣a␣simple␣class␣to␣represent␣this␣distribution␣metadata␣(or
I<distmeta>),␣along␣with␣some␣helpful␣methods␣for␣interrogating␣that␣data.

The␣documentation␣below␣is␣only␣for␣the␣methods␣of␣the␣CPAN::Meta␣object.␣␣For
information␣on␣the␣meaning␣of␣individual␣fields,␣consult␣the␣spec.

=head1␣METHODS

=head2␣new

␣␣my␣$meta␣=␣CPAN::Meta->new($distmeta_struct,␣\%options);

Returns␣a␣valid␣CPAN::Meta␣object␣or␣dies␣if␣the␣supplied␣metadata␣hash
reference␣fails␣to␣validate.␣␣Older-format␣metadata␣will␣be␣up-converted␣to
version␣2␣if␣they␣validate␣against␣the␣original␣stated␣specification.

It␣takes␣an␣optional␣hashref␣of␣options.␣Valid␣options␣include:

=over

=item␣*

lazy_validation␣--␣if␣true,␣new␣will␣attempt␣to␣convert␣the␣given␣metadata
to␣version␣2␣before␣attempting␣to␣validate␣it.␣␣This␣means␣than␣any
fixable␣errors␣will␣be␣handled␣by␣CPAN::Meta::Converter␣before␣validation.
(Note␣that␣this␣might␣result␣in␣invalid␣optional␣data␣being␣silently
dropped.)␣␣The␣default␣is␣false.

=back

=head2␣create

␣␣my␣$meta␣=␣CPAN::Meta->create($distmeta_struct,␣\%options);

This␣is␣same␣as␣C<new()>,␣except␣that␣C<generated_by>␣and␣C<meta-spec>␣fields
will␣be␣generated␣if␣not␣provided.␣␣This␣means␣the␣metadata␣structure␣is
assumed␣to␣otherwise␣follow␣the␣latest␣L<CPAN::Meta::Spec>.

=head2␣load_file

␣␣my␣$meta␣=␣CPAN::Meta->load_file($distmeta_file,␣\%options);

Given␣a␣pathname␣to␣a␣file␣containing␣metadata,␣this␣deserializes␣the␣file
according␣to␣its␣file␣suffix␣and␣constructs␣a␣new␣C<CPAN::Meta>␣object,␣just
like␣C<new()>.␣␣It␣will␣die␣if␣the␣deserialized␣version␣fails␣to␣validate
against␣its␣stated␣specification␣version.

It␣takes␣the␣same␣options␣as␣C<new()>␣but␣C<lazy_validation>␣defaults␣to
true.

=head2␣load_yaml_string

␣␣my␣$meta␣=␣CPAN::Meta->load_yaml_string($yaml,␣\%options);

This␣method␣returns␣a␣new␣CPAN::Meta␣object␣using␣the␣first␣document␣in␣the
given␣YAML␣string.␣␣In␣other␣respects␣it␣is␣identical␣to␣C<load_file()>.

=head2␣load_json_string

␣␣my␣$meta␣=␣CPAN::Meta->load_json_string($json,␣\%options);

This␣method␣returns␣a␣new␣CPAN::Meta␣object␣using␣the␣structure␣represented␣by
the␣given␣JSON␣string.␣␣In␣other␣respects␣it␣is␣identical␣to␣C<load_file()>.

=head2␣load_string

␣␣my␣$meta␣=␣CPAN::Meta->load_string($string,␣\%options);

If␣you␣don't␣know␣if␣a␣string␣contains␣YAML␣or␣JSON,␣this␣method␣will␣use
L<Parse::CPAN::Meta>␣to␣guess.␣␣In␣other␣respects␣it␣is␣identical␣to
C<load_file()>.

=head2␣save

␣␣$meta->save($distmeta_file,␣\%options);

Serializes␣the␣object␣as␣JSON␣and␣writes␣it␣to␣the␣given␣file.␣␣The␣only␣valid
option␣is␣C<version>,␣which␣defaults␣to␣'2'.␣On␣Perl␣5.8.1␣or␣later,␣the␣file
is␣saved␣with␣UTF-8␣encoding.

For␣C<version>␣2␣(or␣higher),␣the␣filename␣should␣end␣in␣'.json'.␣␣L<JSON::PP>
is␣the␣default␣JSON␣backend.␣Using␣another␣JSON␣backend␣requires␣L<JSON>␣2.5␣or
later␣and␣you␣must␣set␣the␣C<$ENV{PERL_JSON_BACKEND}>␣to␣a␣supported␣alternate
backend␣like␣L<JSON::XS>.

For␣C<version>␣less␣than␣2,␣the␣filename␣should␣end␣in␣'.yml'.
L<CPAN::Meta::Converter>␣is␣used␣to␣generate␣an␣older␣metadata␣structure,␣which
is␣serialized␣to␣YAML.␣␣CPAN::Meta::YAML␣is␣the␣default␣YAML␣backend.␣␣You␣may
set␣the␣C<$ENV{PERL_YAML_BACKEND}>␣to␣a␣supported␣alternative␣backend,␣though
this␣is␣not␣recommended␣due␣to␣subtle␣incompatibilities␣between␣YAML␣parsers␣on
CPAN.

=head2␣meta_spec_version

This␣method␣returns␣the␣version␣part␣of␣the␣C<meta_spec>␣entry␣in␣the␣distmeta
structure.␣␣It␣is␣equivalent␣to:

␣␣$meta->meta_spec->{version};

=head2␣effective_prereqs

␣␣my␣$prereqs␣=␣$meta->effective_prereqs;

␣␣my␣$prereqs␣=␣$meta->effective_prereqs(␣\@feature_identifiers␣);

This␣method␣returns␣a␣L<CPAN::Meta::Prereqs>␣object␣describing␣all␣the
prereqs␣for␣the␣distribution.␣␣If␣an␣arrayref␣of␣feature␣identifiers␣is␣given,
the␣prereqs␣for␣the␣identified␣features␣are␣merged␣together␣with␣the
distribution's␣core␣prereqs␣before␣the␣CPAN::Meta::Prereqs␣object␣is␣returned.

=head2␣should_index_file

␣␣...␣if␣$meta->should_index_file(␣$filename␣);

This␣method␣returns␣true␣if␣the␣given␣file␣should␣be␣indexed.␣␣It␣decides␣this
by␣checking␣the␣C<file>␣and␣C<directory>␣keys␣in␣the␣C<no_index>␣property␣of
the␣distmeta␣structure.␣Note␣that␣neither␣the␣version␣format␣nor
C<release_status>␣are␣considered.

C<$filename>␣should␣be␣given␣in␣unix␣format.

=head2␣should_index_package

␣␣...␣if␣$meta->should_index_package(␣$package␣);

This␣method␣returns␣true␣if␣the␣given␣package␣should␣be␣indexed.␣␣It␣decides
this␣by␣checking␣the␣C<package>␣and␣C<namespace>␣keys␣in␣the␣C<no_index>
property␣of␣the␣distmeta␣structure.␣Note␣that␣neither␣the␣version␣format␣nor
C<release_status>␣are␣considered.

=head2␣features

␣␣my␣@feature_objects␣=␣$meta->features;

This␣method␣returns␣a␣list␣of␣L<CPAN::Meta::Feature>␣objects,␣one␣for␣each
optional␣feature␣described␣by␣the␣distribution's␣metadata.

=head2␣feature

␣␣my␣$feature_object␣=␣$meta->feature(␣$identifier␣);

This␣method␣returns␣a␣L<CPAN::Meta::Feature>␣object␣for␣the␣optional␣feature
with␣the␣given␣identifier.␣␣If␣no␣feature␣with␣that␣identifier␣exists,␣an
exception␣will␣be␣raised.

=head2␣as_struct

␣␣my␣$copy␣=␣$meta->as_struct(␣\%options␣);

This␣method␣returns␣a␣deep␣copy␣of␣the␣object's␣metadata␣as␣an␣unblessed␣hash
reference.␣␣It␣takes␣an␣optional␣hashref␣of␣options.␣␣If␣the␣hashref␣contains
a␣C<version>␣argument,␣the␣copied␣metadata␣will␣be␣converted␣to␣the␣version
of␣the␣specification␣and␣returned.␣␣For␣example:

␣␣my␣$old_spec␣=␣$meta->as_struct(␣{version␣=>␣"1.4"}␣);

=head2␣as_string

␣␣my␣$string␣=␣$meta->as_string(␣\%options␣);

This␣method␣returns␣a␣serialized␣copy␣of␣the␣object's␣metadata␣as␣a␣character
string.␣␣(The␣strings␣are␣B<not>␣UTF-8␣encoded.)␣␣It␣takes␣an␣optional␣hashref
of␣options.␣␣If␣the␣hashref␣contains␣a␣C<version>␣argument,␣the␣copied␣metadata
will␣be␣converted␣to␣the␣version␣of␣the␣specification␣and␣returned.␣␣For
example:

␣␣my␣$string␣=␣$meta->as_string(␣{version␣=>␣"1.4"}␣);

For␣C<version>␣greater␣than␣or␣equal␣to␣2,␣the␣string␣will␣be␣serialized␣as
JSON.␣␣For␣C<version>␣less␣than␣2,␣the␣string␣will␣be␣serialized␣as␣YAML.␣␣In
both␣cases,␣the␣same␣rules␣are␣followed␣as␣in␣the␣C<save()>␣method␣for␣choosing
a␣serialization␣backend.

The␣serialized␣structure␣will␣include␣a␣C<x_serialization_backend>␣entry␣giving
the␣package␣and␣version␣used␣to␣serialize.␣␣Any␣existing␣key␣in␣the␣given
C<$meta>␣object␣will␣be␣clobbered.

=head1␣STRING␣DATA

The␣following␣methods␣return␣a␣single␣value,␣which␣is␣the␣value␣for␣the
corresponding␣entry␣in␣the␣distmeta␣structure.␣␣Values␣should␣be␣either␣undef
or␣strings.

=over␣4

=item␣*

abstract

=item␣*

description

=item␣*

dynamic_config

=item␣*

generated_by

=item␣*

name

=item␣*

release_status

=item␣*

version

=back

=head1␣LIST␣DATA

These␣methods␣return␣lists␣of␣string␣values,␣which␣might␣be␣represented␣in␣the
distmeta␣structure␣as␣arrayrefs␣or␣scalars:

=over␣4

=item␣*

authors

=item␣*

keywords

=item␣*

licenses

=back

The␣C<authors>␣and␣C<licenses>␣methods␣may␣also␣be␣called␣as␣C<author>␣and
C<license>,␣respectively,␣to␣match␣the␣field␣name␣in␣the␣distmeta␣structure.

=head1␣MAP␣DATA

These␣readers␣return␣hashrefs␣of␣arbitrary␣unblessed␣data␣structures,␣each
described␣more␣fully␣in␣the␣specification:

=over␣4

=item␣*

meta_spec

=item␣*

resources

=item␣*

provides

=item␣*

no_index

=item␣*

prereqs

=item␣*

optional_features

=back

=head1␣CUSTOM␣DATA

A␣list␣of␣custom␣keys␣are␣available␣from␣the␣C<custom_keys>␣method␣and
particular␣keys␣may␣be␣retrieved␣with␣the␣C<custom>␣method.

␣␣say␣$meta->custom($_)␣for␣$meta->custom_keys;

If␣a␣custom␣key␣refers␣to␣a␣data␣structure,␣a␣deep␣clone␣is␣returned.

=for␣Pod::Coverage␣TO_JSON␣abstract␣author␣authors␣custom␣custom_keys␣description␣dynamic_config
generated_by␣keywords␣license␣licenses␣meta_spec␣name␣no_index
optional_features␣prereqs␣provides␣release_status␣resources␣version

=head1␣BUGS

Please␣report␣any␣bugs␣or␣feature␣using␣the␣CPAN␣Request␣Tracker.
Bugs␣can␣be␣submitted␣through␣the␣web␣interface␣at
L<http://rt.cpan.org/Dist/Display.html?Queue=CPAN-Meta>

When␣submitting␣a␣bug␣or␣request,␣please␣include␣a␣test-file␣or␣a␣patch␣to␣an
existing␣test-file␣that␣illustrates␣the␣bug␣or␣desired␣feature.

=head1␣SEE␣ALSO

=over␣4

=item␣*

L<CPAN::Meta::Converter>

=item␣*

L<CPAN::Meta::Validator>

=back

=for␣:stopwords␣cpan␣testmatrix␣url␣annocpan␣anno␣bugtracker␣rt␣cpants␣kwalitee␣diff␣irc␣mailto␣metadata␣placeholders␣metacpan

=head1␣SUPPORT

=head2␣Bugs␣/␣Feature␣Requests

Please␣report␣any␣bugs␣or␣feature␣requests␣through␣the␣issue␣tracker
at␣L<https://github.com/Perl-Toolchain-Gang/CPAN-Meta/issues>.
You␣will␣be␣notified␣automatically␣of␣any␣progress␣on␣your␣issue.

=head2␣Source␣Code

This␣is␣open␣source␣software.␣␣The␣code␣repository␣is␣available␣for
public␣review␣and␣contribution␣under␣the␣terms␣of␣the␣license.

L<https://github.com/Perl-Toolchain-Gang/CPAN-Meta>

␣␣git␣clone␣https://github.com/Perl-Toolchain-Gang/CPAN-Meta.git

=head1␣AUTHORS

=over␣4

=item␣*

David␣Golden␣<dagolden@cpan.org>

=item␣*

Ricardo␣Signes␣<rjbs@cpan.org>

=item␣*

Adam␣Kennedy␣<adamk@cpan.org>

=back

=head1␣CONTRIBUTORS

=for␣stopwords␣Ansgar␣Burchardt␣Avar␣Arnfjord␣Bjarmason␣Benjamin␣Noggle␣Christopher␣J.␣Madsen␣Chuck␣Adams␣Cory␣G␣Watson␣Damyan␣Ivanov␣David␣Golden␣Eric␣Wilhelm␣Graham␣Knop␣Gregor␣Hermann␣Karen␣Etheridge␣Kenichi␣Ishigaki␣Kent␣Fredric␣Ken␣Williams␣Lars␣Dieckow␣Leon␣Timmermans␣majensen␣Mark␣Fowler␣Matt␣S␣Trout␣Michael␣G.␣Schwern␣Mohammad␣Anwar␣mohawk2␣moznion␣Niko␣Tyni␣Olaf␣Alders␣Olivier␣Mengué␣Randy␣Sims␣Tomohiro␣Hosaka

=over␣4

=item␣*

Ansgar␣Burchardt␣<ansgar@cpan.org>

=item␣*

Avar␣Arnfjord␣Bjarmason␣<avar@cpan.org>

=item␣*

Benjamin␣Noggle␣<agwind@users.noreply.github.com>

=item␣*

Christopher␣J.␣Madsen␣<cjm@cpan.org>

=item␣*

Chuck␣Adams␣<cja987@gmail.com>

=item␣*

Cory␣G␣Watson␣<gphat@cpan.org>

=item␣*

Damyan␣Ivanov␣<dam@cpan.org>

=item␣*

David␣Golden␣<xdg@xdg.me>

=item␣*

Eric␣Wilhelm␣<ewilhelm@cpan.org>

=item␣*

Graham␣Knop␣<haarg@haarg.org>

=item␣*

Gregor␣Hermann␣<gregoa@debian.org>

=item␣*

Karen␣Etheridge␣<ether@cpan.org>

=item␣*

Kenichi␣Ishigaki␣<ishigaki@cpan.org>

=item␣*

Kent␣Fredric␣<kentfredric@gmail.com>

=item␣*

Ken␣Williams␣<kwilliams@cpan.org>

=item␣*

Lars␣Dieckow␣<daxim@cpan.org>

=item␣*

Leon␣Timmermans␣<leont@cpan.org>

=item␣*

majensen␣<maj@fortinbras.us>

=item␣*

Mark␣Fowler␣<markf@cpan.org>

=item␣*

Matt␣S␣Trout␣<mst@shadowcat.co.uk>

=item␣*

Michael␣G.␣Schwern␣<mschwern@cpan.org>

=item␣*

Mohammad␣S␣Anwar␣<mohammad.anwar@yahoo.com>

=item␣*

mohawk2␣<mohawk2@users.noreply.github.com>

=item␣*

moznion␣<moznion@gmail.com>

=item␣*

Niko␣Tyni␣<ntyni@debian.org>

=item␣*

Olaf␣Alders␣<olaf@wundersolutions.com>

=item␣*

Olivier␣Mengué␣<dolmen@cpan.org>

=item␣*

Randy␣Sims␣<randys@thepierianspring.org>

=item␣*

Tomohiro␣Hosaka␣<bokutin@bokut.in>

=back

=head1␣COPYRIGHT␣AND␣LICENSE

This␣software␣is␣copyright␣(c)␣2010␣by␣David␣Golden,␣Ricardo␣Signes,␣Adam␣Kennedy␣and␣Contributors.

This␣is␣free␣software;␣you␣can␣redistribute␣it␣and/or␣modify␣it␣under
the␣same␣terms␣as␣the␣Perl␣5␣programming␣language␣system␣itself.

=cut
----------
Range: (6331932,6353557) (21625)
<<'=back';

=over␣2

=item␣allow_installing_module_downgrades

The␣CPAN␣shell␣can␣watch␣the␣C<blib/>␣directories␣that␣are␣built␣up
before␣running␣C<make␣test>␣to␣determine␣whether␣the␣current
distribution␣will␣end␣up␣with␣modules␣being␣overwritten␣with␣decreasing␣module␣version␣numbers.␣It
can␣then␣let␣the␣build␣of␣this␣distro␣fail␣when␣it␣discovers␣a
downgrade.

Do␣you␣want␣to␣allow␣installing␣distros␣with␣decreasing␣module
versions␣compared␣to␣what␣you␣have␣installed␣(yes,␣no,␣ask/yes,
ask/no)?

=item␣allow_installing_outdated_dists

The␣CPAN␣shell␣can␣watch␣the␣C<blib/>␣directories␣that␣are␣built␣up
before␣running␣C<make␣test>␣to␣determine␣whether␣the␣current
distribution␣contains␣modules␣that␣are␣indexed␣with␣a␣distro␣with␣a
higher␣distro-version␣number␣than␣the␣current␣one.␣It␣can
then␣let␣the␣build␣of␣this␣distro␣fail␣when␣it␣would␣not␣represent␣the
most␣up-to-date␣version␣of␣the␣distro.

Note:␣choosing␣anything␣but␣'yes'␣for␣this␣option␣will␣need
CPAN::DistnameInfo␣being␣installed␣for␣taking␣effect.

Do␣you␣want␣to␣allow␣installing␣distros␣that␣are␣not␣indexed␣as␣the
highest␣distro-version␣for␣all␣contained␣modules␣(yes,␣no,␣ask/yes,
ask/no)?

=item␣auto_commit

Normally␣CPAN.pm␣keeps␣config␣variables␣in␣memory␣and␣changes␣need␣to
be␣saved␣in␣a␣separate␣'o␣conf␣commit'␣command␣to␣make␣them␣permanent
between␣sessions.␣If␣you␣set␣the␣'auto_commit'␣option␣to␣true,␣changes
to␣a␣config␣variable␣are␣always␣automatically␣committed␣to␣disk.

Always␣commit␣changes␣to␣config␣variables␣to␣disk?

=item␣build_cache

CPAN.pm␣can␣limit␣the␣size␣of␣the␣disk␣area␣for␣keeping␣the␣build
directories␣with␣all␣the␣intermediate␣files.

Cache␣size␣for␣build␣directory␣(in␣MB)?

=item␣build_dir

Directory␣where␣the␣build␣process␣takes␣place?

=item␣build_dir_reuse

Until␣version␣1.88␣CPAN.pm␣never␣trusted␣the␣contents␣of␣the␣build_dir
directory␣between␣sessions.␣Since␣1.88_58␣CPAN.pm␣has␣a␣YAML-based
mechanism␣that␣makes␣it␣possible␣to␣share␣the␣contents␣of␣the
build_dir/␣directory␣between␣different␣sessions␣with␣the␣same␣version
of␣perl.␣People␣who␣prefer␣to␣test␣things␣several␣days␣before
installing␣will␣like␣this␣feature␣because␣it␣saves␣a␣lot␣of␣time.

If␣you␣say␣yes␣to␣the␣following␣question,␣CPAN␣will␣try␣to␣store
enough␣information␣about␣the␣build␣process␣so␣that␣it␣can␣pick␣up␣in
future␣sessions␣at␣the␣same␣state␣of␣affairs␣as␣it␣left␣a␣previous
session.

Store␣and␣re-use␣state␣information␣about␣distributions␣between
CPAN.pm␣sessions?

=item␣build_requires_install_policy

When␣a␣module␣declares␣another␣one␣as␣a␣'build_requires'␣prerequisite
this␣means␣that␣the␣other␣module␣is␣only␣needed␣for␣building␣or
testing␣the␣module␣but␣need␣not␣be␣installed␣permanently.␣In␣this␣case
you␣may␣wish␣to␣install␣that␣other␣module␣nonetheless␣or␣just␣keep␣it
in␣the␣'build_dir'␣directory␣to␣have␣it␣available␣only␣temporarily.
Installing␣saves␣time␣on␣future␣installations␣but␣makes␣the␣perl
installation␣bigger.

You␣can␣choose␣if␣you␣want␣to␣always␣install␣(yes),␣never␣install␣(no)
or␣be␣always␣asked.␣In␣the␣latter␣case␣you␣can␣set␣the␣default␣answer
for␣the␣question␣to␣yes␣(ask/yes)␣or␣no␣(ask/no).

Policy␣on␣installing␣'build_requires'␣modules␣(yes,␣no,␣ask/yes,
ask/no)?

=item␣cache_metadata

To␣considerably␣speed␣up␣the␣initial␣CPAN␣shell␣startup,␣it␣is
possible␣to␣use␣Storable␣to␣create␣a␣cache␣of␣metadata.␣If␣Storable␣is
not␣available,␣the␣normal␣index␣mechanism␣will␣be␣used.

Note:␣this␣mechanism␣is␣not␣used␣when␣use_sqlite␣is␣on␣and␣SQLLite␣is
running.

Cache␣metadata␣(yes/no)?

=item␣check_sigs

CPAN␣packages␣can␣be␣digitally␣signed␣by␣authors␣and␣thus␣verified
with␣the␣security␣provided␣by␣strong␣cryptography.␣The␣exact␣mechanism
is␣defined␣in␣the␣Module::Signature␣module.␣While␣this␣is␣generally
considered␣a␣good␣thing,␣it␣is␣not␣always␣convenient␣to␣the␣end␣user
to␣install␣modules␣that␣are␣signed␣incorrectly␣or␣where␣the␣key␣of␣the
author␣is␣not␣available␣or␣where␣some␣prerequisite␣for
Module::Signature␣has␣a␣bug␣and␣so␣on.

With␣the␣check_sigs␣parameter␣you␣can␣turn␣signature␣checking␣on␣and
off.␣The␣default␣is␣off␣for␣now␣because␣the␣whole␣tool␣chain␣for␣the
functionality␣is␣not␣yet␣considered␣mature␣by␣some.␣The␣author␣of
CPAN.pm␣would␣recommend␣setting␣it␣to␣true␣most␣of␣the␣time␣and
turning␣it␣off␣only␣if␣it␣turns␣out␣to␣be␣annoying.

Note␣that␣if␣you␣do␣not␣have␣Module::Signature␣installed,␣no␣signature
checks␣will␣be␣performed␣at␣all.

Always␣try␣to␣check␣and␣verify␣signatures␣if␣a␣SIGNATURE␣file␣is␣in
the␣package␣and␣Module::Signature␣is␣installed␣(yes/no)?

=item␣cleanup_after_install

Users␣who␣install␣modules␣and␣do␣not␣intend␣to␣look␣back,␣can␣free
occupied␣disk␣space␣quickly␣by␣letting␣CPAN.pm␣cleanup␣each␣build
directory␣immediately␣after␣a␣successful␣install.

Remove␣build␣directory␣after␣a␣successful␣install?␣(yes/no)?

=item␣colorize_output

When␣you␣have␣Term::ANSIColor␣installed,␣you␣can␣turn␣on␣colorized
output␣to␣have␣some␣visual␣differences␣between␣normal␣CPAN.pm␣output,
warnings,␣debugging␣output,␣and␣the␣output␣of␣the␣modules␣being
installed.␣Set␣your␣favorite␣colors␣after␣some␣experimenting␣with␣the
Term::ANSIColor␣module.

Please␣note␣that␣on␣Windows␣platforms␣colorized␣output␣also␣requires
the␣Win32::Console::ANSI␣module.

Do␣you␣want␣to␣turn␣on␣colored␣output?

=item␣colorize_print

Color␣for␣normal␣output?

=item␣colorize_warn

Color␣for␣warnings?

=item␣colorize_debug

Color␣for␣debugging␣messages?

=item␣commandnumber_in_prompt

The␣prompt␣of␣the␣cpan␣shell␣can␣contain␣the␣current␣command␣number
for␣easier␣tracking␣of␣the␣session␣or␣be␣a␣plain␣string.

Do␣you␣want␣the␣command␣number␣in␣the␣prompt␣(yes/no)?

=item␣connect_to_internet_ok

If␣you␣have␣never␣defined␣your␣own␣C<urllist>␣in␣your␣configuration
then␣C<CPAN.pm>␣will␣be␣hesitant␣to␣use␣the␣built␣in␣default␣sites␣for
downloading.␣It␣will␣ask␣you␣once␣per␣session␣if␣a␣connection␣to␣the
internet␣is␣OK␣and␣only␣if␣you␣say␣yes,␣it␣will␣try␣to␣connect.␣But␣to
avoid␣this␣question,␣you␣can␣choose␣your␣favorite␣download␣sites␣once
and␣get␣away␣with␣it.␣Or,␣if␣you␣have␣no␣favorite␣download␣sites
answer␣yes␣to␣the␣following␣question.

If␣no␣urllist␣has␣been␣chosen␣yet,␣would␣you␣prefer␣CPAN.pm␣to␣connect
to␣the␣built-in␣default␣sites␣without␣asking?␣(yes/no)?

=item␣ftp_passive

Shall␣we␣always␣set␣the␣FTP_PASSIVE␣environment␣variable␣when␣dealing
with␣ftp␣download␣(yes/no)?

=item␣ftpstats_period

Statistics␣about␣downloads␣are␣truncated␣by␣size␣and␣period
simultaneously.

How␣many␣days␣shall␣we␣keep␣statistics␣about␣downloads?

=item␣ftpstats_size

Statistics␣about␣downloads␣are␣truncated␣by␣size␣and␣period
simultaneously.␣Setting␣this␣to␣zero␣or␣negative␣disables␣download
statistics.

How␣many␣items␣shall␣we␣keep␣in␣the␣statistics␣about␣downloads?

=item␣getcwd

CPAN.pm␣changes␣the␣current␣working␣directory␣often␣and␣needs␣to
determine␣its␣own␣current␣working␣directory.␣Per␣default␣it␣uses
Cwd::cwd␣but␣if␣this␣doesn't␣work␣on␣your␣system␣for␣some␣reason,
alternatives␣can␣be␣configured␣according␣to␣the␣following␣table:

␣␣␣␣cwd␣␣␣␣␣␣␣␣␣Cwd::cwd
␣␣␣␣getcwd␣␣␣␣␣␣Cwd::getcwd
␣␣␣␣fastcwd␣␣␣␣␣Cwd::fastcwd
␣␣␣␣getdcwd␣␣␣␣␣Cwd::getdcwd
␣␣␣␣backtickcwd␣external␣command␣cwd

Preferred␣method␣for␣determining␣the␣current␣working␣directory?

=item␣halt_on_failure

Normally,␣CPAN.pm␣continues␣processing␣the␣full␣list␣of␣targets␣and
dependencies,␣even␣if␣one␣of␣them␣fails.␣␣However,␣you␣can␣specify
that␣CPAN␣should␣halt␣after␣the␣first␣failure.␣␣(Note␣that␣optional
recommended␣or␣suggested␣modules␣that␣fail␣will␣not␣cause␣a␣halt.)

Do␣you␣want␣to␣halt␣on␣failure␣(yes/no)?

=item␣histfile

If␣you␣have␣one␣of␣the␣readline␣packages␣(Term::ReadLine::Perl,
Term::ReadLine::Gnu,␣possibly␣others)␣installed,␣the␣interactive␣CPAN
shell␣will␣have␣history␣support.␣The␣next␣two␣questions␣deal␣with␣the
filename␣of␣the␣history␣file␣and␣with␣its␣size.␣If␣you␣do␣not␣want␣to
set␣this␣variable,␣please␣hit␣SPACE␣ENTER␣to␣the␣following␣question.

File␣to␣save␣your␣history?

=item␣histsize

Number␣of␣lines␣to␣save?

=item␣inactivity_timeout

Sometimes␣you␣may␣wish␣to␣leave␣the␣processes␣run␣by␣CPAN␣alone
without␣caring␣about␣them.␣Because␣the␣Makefile.PL␣or␣the␣Build.PL
sometimes␣contains␣question␣you're␣expected␣to␣answer,␣you␣can␣set␣a
timer␣that␣will␣kill␣a␣'perl␣Makefile.PL'␣process␣after␣the␣specified
time␣in␣seconds.

If␣you␣set␣this␣value␣to␣0,␣these␣processes␣will␣wait␣forever.␣This␣is
the␣default␣and␣recommended␣setting.

Timeout␣for␣inactivity␣during␣{Makefile,Build}.PL?

=item␣index_expire

The␣CPAN␣indexes␣are␣usually␣rebuilt␣once␣or␣twice␣per␣hour,␣but␣the
typical␣CPAN␣mirror␣mirrors␣only␣once␣or␣twice␣per␣day.␣Depending␣on
the␣quality␣of␣your␣mirror␣and␣your␣desire␣to␣be␣on␣the␣bleeding␣edge,
you␣may␣want␣to␣set␣the␣following␣value␣to␣more␣or␣less␣than␣one␣day
(which␣is␣the␣default).␣It␣determines␣after␣how␣many␣days␣CPAN.pm
downloads␣new␣indexes.

Let␣the␣index␣expire␣after␣how␣many␣days?

=item␣inhibit_startup_message

When␣the␣CPAN␣shell␣is␣started␣it␣normally␣displays␣a␣greeting␣message
that␣contains␣the␣running␣version␣and␣the␣status␣of␣readline␣support.

Do␣you␣want␣to␣turn␣this␣message␣off?

=item␣keep_source_where

Unless␣you␣are␣accessing␣the␣CPAN␣on␣your␣filesystem␣via␣a␣file:␣URL,
CPAN.pm␣needs␣to␣keep␣the␣source␣files␣it␣downloads␣somewhere.␣Please
supply␣a␣directory␣where␣the␣downloaded␣files␣are␣to␣be␣kept.

Download␣target␣directory?

=item␣load_module_verbosity

When␣CPAN.pm␣loads␣a␣module␣it␣needs␣for␣some␣optional␣feature,␣it
usually␣reports␣about␣module␣name␣and␣version.␣Choose␣'v'␣to␣get␣this
message,␣'none'␣to␣suppress␣it.

Verbosity␣level␣for␣loading␣modules␣(none␣or␣v)?

=item␣makepl_arg

Every␣Makefile.PL␣is␣run␣by␣perl␣in␣a␣separate␣process.␣Likewise␣we
run␣'make'␣and␣'make␣install'␣in␣separate␣processes.␣If␣you␣have
any␣parameters␣(e.g.␣PREFIX,␣UNINST␣or␣the␣like)␣you␣want␣to
pass␣to␣the␣calls,␣please␣specify␣them␣here.

If␣you␣don't␣understand␣this␣question,␣just␣press␣ENTER.

Typical␣frequently␣used␣settings:

␣␣␣␣PREFIX=~/perl␣␣␣␣#␣non-root␣users␣(please␣see␣manual␣for␣more␣hints)

Parameters␣for␣the␣'perl␣Makefile.PL'␣command?

=item␣make_arg

Parameters␣for␣the␣'make'␣command?␣Typical␣frequently␣used␣setting:

␣␣␣␣-j3␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣dual␣processor␣system␣(on␣GNU␣make)

Your␣choice:

=item␣make_install_arg

Parameters␣for␣the␣'make␣install'␣command?
Typical␣frequently␣used␣setting:

␣␣␣␣UNINST=1␣␣␣␣␣␣␣␣␣#␣to␣always␣uninstall␣potentially␣conflicting␣files
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣(but␣do␣NOT␣use␣with␣local::lib␣or␣INSTALL_BASE)

Your␣choice:

=item␣make_install_make_command

Do␣you␣want␣to␣use␣a␣different␣make␣command␣for␣'make␣install'?
Cautious␣people␣will␣probably␣prefer:

␣␣␣␣su␣root␣-c␣make
␣or
␣␣␣␣sudo␣make
␣or
␣␣␣␣/path1/to/sudo␣-u␣admin_account␣/path2/to/make

or␣some␣such.␣Your␣choice:

=item␣mbuildpl_arg

A␣Build.PL␣is␣run␣by␣perl␣in␣a␣separate␣process.␣Likewise␣we␣run
'./Build'␣and␣'./Build␣install'␣in␣separate␣processes.␣If␣you␣have␣any
parameters␣you␣want␣to␣pass␣to␣the␣calls,␣please␣specify␣them␣here.

Typical␣frequently␣used␣settings:

␣␣␣␣--install_base␣/home/xxx␣␣␣␣␣␣␣␣␣␣␣␣␣#␣different␣installation␣directory

Parameters␣for␣the␣'perl␣Build.PL'␣command?

=item␣mbuild_arg

Parameters␣for␣the␣'./Build'␣command?␣Setting␣might␣be:

␣␣␣␣--extra_linker_flags␣-L/usr/foo/lib␣␣#␣non-standard␣library␣location

Your␣choice:

=item␣mbuild_install_arg

Parameters␣for␣the␣'./Build␣install'␣command?␣Typical␣frequently␣used
setting:

␣␣␣␣--uninst␣1␣␣␣␣␣␣␣#␣uninstall␣conflicting␣files
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣(but␣do␣NOT␣use␣with␣local::lib␣or␣INSTALL_BASE)

Your␣choice:

=item␣mbuild_install_build_command

Do␣you␣want␣to␣use␣a␣different␣command␣for␣'./Build␣install'?␣Sudo
users␣will␣probably␣prefer:

␣␣␣␣su␣root␣-c␣./Build
␣or
␣␣␣␣sudo␣./Build
␣or
␣␣␣␣/path1/to/sudo␣-u␣admin_account␣./Build

or␣some␣such.␣Your␣choice:

=item␣pager

What␣is␣your␣favorite␣pager␣program?

=item␣prefer_installer

When␣you␣have␣Module::Build␣installed␣and␣a␣module␣comes␣with␣both␣a
Makefile.PL␣and␣a␣Build.PL,␣which␣shall␣have␣precedence?

The␣main␣two␣standard␣installer␣modules␣are␣the␣old␣and␣well
established␣ExtUtils::MakeMaker␣(for␣short:␣EUMM)␣which␣uses␣the
Makefile.PL.␣And␣the␣next␣generation␣installer␣Module::Build␣(MB)
which␣works␣with␣the␣Build.PL␣(and␣often␣comes␣with␣a␣Makefile.PL
too).␣If␣a␣module␣comes␣only␣with␣one␣of␣the␣two␣we␣will␣use␣that␣one
but␣if␣both␣are␣supplied␣then␣a␣decision␣must␣be␣made␣between␣EUMM␣and
MB.␣See␣also␣http://rt.cpan.org/Ticket/Display.html?id=29235␣for␣a
discussion␣about␣the␣right␣default.

Or,␣as␣a␣third␣option␣you␣can␣choose␣RAND␣which␣will␣make␣a␣random
decision␣(something␣regular␣CPAN␣testers␣will␣enjoy).

In␣case␣you␣can␣choose␣between␣running␣a␣Makefile.PL␣or␣a␣Build.PL,
which␣installer␣would␣you␣prefer␣(EUMM␣or␣MB␣or␣RAND)?

=item␣prefs_dir

CPAN.pm␣can␣store␣customized␣build␣environments␣based␣on␣regular
expressions␣for␣distribution␣names.␣These␣are␣YAML␣files␣where␣the
default␣options␣for␣CPAN.pm␣and␣the␣environment␣can␣be␣overridden␣and
dialog␣sequences␣can␣be␣stored␣that␣can␣later␣be␣executed␣by␣an
Expect.pm␣object.␣The␣CPAN.pm␣distribution␣comes␣with␣some␣prefab␣YAML
files␣that␣cover␣sample␣distributions␣that␣can␣be␣used␣as␣blueprints
to␣store␣your␣own␣prefs.␣Please␣check␣out␣the␣distroprefs/␣directory␣of
the␣CPAN.pm␣distribution␣to␣get␣a␣quick␣start␣into␣the␣prefs␣system.

Directory␣where␣to␣store␣default␣options/environment/dialogs␣for
building␣modules␣that␣need␣some␣customization?

=item␣prerequisites_policy

The␣CPAN␣module␣can␣detect␣when␣a␣module␣which␣you␣are␣trying␣to␣build
depends␣on␣prerequisites.␣If␣this␣happens,␣it␣can␣build␣the
prerequisites␣for␣you␣automatically␣('follow'),␣ask␣you␣for
confirmation␣('ask'),␣or␣just␣ignore␣them␣('ignore').␣␣Choosing
'follow'␣also␣sets␣PERL_AUTOINSTALL␣and␣PERL_EXTUTILS_AUTOINSTALL␣for
"--defaultdeps"␣if␣not␣already␣set.

Please␣set␣your␣policy␣to␣one␣of␣the␣three␣values.

Policy␣on␣building␣prerequisites␣(follow,␣ask␣or␣ignore)?

=item␣randomize_urllist

CPAN.pm␣can␣introduce␣some␣randomness␣when␣using␣hosts␣for␣download
that␣are␣configured␣in␣the␣urllist␣parameter.␣Enter␣a␣numeric␣value
between␣0␣and␣1␣to␣indicate␣how␣often␣you␣want␣to␣let␣CPAN.pm␣try␣a
random␣host␣from␣the␣urllist.␣A␣value␣of␣one␣specifies␣to␣always␣use␣a
random␣host␣as␣the␣first␣try.␣A␣value␣of␣zero␣means␣no␣randomness␣at
all.␣Anything␣in␣between␣specifies␣how␣often,␣on␣average,␣a␣random
host␣should␣be␣tried␣first.

Randomize␣parameter

=item␣recommends_policy

(Experimental␣feature!)␣Some␣CPAN␣modules␣recommend␣additional,␣optional␣dependencies.␣␣These␣should
generally␣be␣installed␣except␣in␣resource␣constrained␣environments.␣␣When␣this
policy␣is␣true,␣recommended␣modules␣will␣be␣included␣with␣required␣modules.

Include␣recommended␣modules?

=item␣scan_cache

By␣default,␣each␣time␣the␣CPAN␣module␣is␣started,␣cache␣scanning␣is
performed␣to␣keep␣the␣cache␣size␣in␣sync␣('atstart').␣Alternatively,
scanning␣and␣cleanup␣can␣happen␣when␣CPAN␣exits␣('atexit').␣To␣prevent
any␣cache␣cleanup,␣answer␣'never'.

Perform␣cache␣scanning␣('atstart',␣'atexit'␣or␣'never')?

=item␣shell

What␣is␣your␣favorite␣shell?

=item␣show_unparsable_versions

During␣the␣'r'␣command␣CPAN.pm␣finds␣modules␣without␣version␣number.
When␣the␣command␣finishes,␣it␣prints␣a␣report␣about␣this.␣If␣you
want␣this␣report␣to␣be␣very␣verbose,␣say␣yes␣to␣the␣following
variable.

Show␣all␣individual␣modules␣that␣have␣no␣$VERSION?

=item␣show_upload_date

The␣'d'␣and␣the␣'m'␣command␣normally␣only␣show␣you␣information␣they
have␣in␣their␣in-memory␣database␣and␣thus␣will␣never␣connect␣to␣the
internet.␣If␣you␣set␣the␣'show_upload_date'␣variable␣to␣true,␣'m'␣and
'd'␣will␣additionally␣show␣you␣the␣upload␣date␣of␣the␣module␣or
distribution.␣Per␣default␣this␣feature␣is␣off␣because␣it␣may␣require␣a
net␣connection␣to␣get␣at␣the␣upload␣date.

Always␣try␣to␣show␣upload␣date␣with␣'d'␣and␣'m'␣command␣(yes/no)?

=item␣show_zero_versions

During␣the␣'r'␣command␣CPAN.pm␣finds␣modules␣with␣a␣version␣number␣of
zero.␣When␣the␣command␣finishes,␣it␣prints␣a␣report␣about␣this.␣If␣you
want␣this␣report␣to␣be␣very␣verbose,␣say␣yes␣to␣the␣following
variable.

Show␣all␣individual␣modules␣that␣have␣a␣$VERSION␣of␣zero?

=item␣suggests_policy

(Experimental␣feature!)␣Some␣CPAN␣modules␣suggest␣additional,␣optional␣dependencies.␣␣These␣'suggest'
dependencies␣provide␣enhanced␣operation.␣␣When␣this␣policy␣is␣true,␣suggested
modules␣will␣be␣included␣with␣required␣modules.

Include␣suggested␣modules?

=item␣tar_verbosity

When␣CPAN.pm␣uses␣the␣tar␣command,␣which␣switch␣for␣the␣verbosity
shall␣be␣used?␣Choose␣'none'␣for␣quiet␣operation,␣'v'␣for␣file
name␣listing,␣'vv'␣for␣full␣listing.

Tar␣command␣verbosity␣level␣(none␣or␣v␣or␣vv)?

=item␣term_is_latin

The␣next␣option␣deals␣with␣the␣charset␣(a.k.a.␣character␣set)␣your
terminal␣supports.␣In␣general,␣CPAN␣is␣English␣speaking␣territory,␣so
the␣charset␣does␣not␣matter␣much␣but␣some␣CPAN␣have␣names␣that␣are
outside␣the␣ASCII␣range.␣If␣your␣terminal␣supports␣UTF-8,␣you␣should
say␣no␣to␣the␣next␣question.␣If␣it␣expects␣ISO-8859-1␣(also␣known␣as
LATIN1)␣then␣you␣should␣say␣yes.␣If␣it␣supports␣neither,␣your␣answer
does␣not␣matter␣because␣you␣will␣not␣be␣able␣to␣read␣the␣names␣of␣some
authors␣anyway.␣If␣you␣answer␣no,␣names␣will␣be␣output␣in␣UTF-8.

Your␣terminal␣expects␣ISO-8859-1␣(yes/no)?

=item␣term_ornaments

When␣using␣Term::ReadLine,␣you␣can␣turn␣ornaments␣on␣so␣that␣your
input␣stands␣out␣against␣the␣output␣from␣CPAN.pm.

Do␣you␣want␣to␣turn␣ornaments␣on?

=item␣test_report

The␣goal␣of␣the␣CPAN␣Testers␣project␣(http://testers.cpan.org/)␣is␣to
test␣as␣many␣CPAN␣packages␣as␣possible␣on␣as␣many␣platforms␣as
possible.␣␣This␣provides␣valuable␣feedback␣to␣module␣authors␣and
potential␣users␣to␣identify␣bugs␣or␣platform␣compatibility␣issues␣and
improves␣the␣overall␣quality␣and␣value␣of␣CPAN.

One␣way␣you␣can␣contribute␣is␣to␣send␣test␣results␣for␣each␣module
that␣you␣install.␣␣If␣you␣install␣the␣CPAN::Reporter␣module,␣you␣have
the␣option␣to␣automatically␣generate␣and␣deliver␣test␣reports␣to␣CPAN
Testers␣whenever␣you␣run␣tests␣on␣a␣CPAN␣package.

See␣the␣CPAN::Reporter␣documentation␣for␣additional␣details␣and
configuration␣settings.␣␣If␣your␣firewall␣blocks␣outgoing␣traffic,
you␣may␣need␣to␣configure␣CPAN::Reporter␣before␣sending␣reports.

Generate␣test␣reports␣if␣CPAN::Reporter␣is␣installed␣(yes/no)?

=item␣perl5lib_verbosity

When␣CPAN.pm␣extends␣@INC␣via␣PERL5LIB,␣it␣prints␣a␣list␣of
directories␣added␣(or␣a␣summary␣of␣how␣many␣directories␣are
added).␣␣Choose␣'v'␣to␣get␣this␣message,␣'none'␣to␣suppress␣it.

Verbosity␣level␣for␣PERL5LIB␣changes␣(none␣or␣v)?

=item␣prefer_external_tar

Per␣default␣all␣untar␣operations␣are␣done␣with␣the␣perl␣module
Archive::Tar;␣by␣setting␣this␣variable␣to␣true␣the␣external␣tar
command␣is␣used␣if␣available;␣on␣Unix␣this␣is␣usually␣preferred
because␣they␣have␣a␣reliable␣and␣fast␣gnutar␣implementation.

Use␣the␣external␣tar␣program␣instead␣of␣Archive::Tar?

=item␣trust_test_report_history

When␣a␣distribution␣has␣already␣been␣tested␣by␣CPAN::Reporter␣on
this␣machine,␣CPAN␣can␣skip␣the␣test␣phase␣and␣just␣rely␣on␣the
test␣report␣history␣instead.

Note␣that␣this␣will␣not␣apply␣to␣distributions␣that␣failed␣tests
because␣of␣missing␣dependencies.␣␣Also,␣tests␣can␣be␣run
regardless␣of␣the␣history␣using␣"force".

Do␣you␣want␣to␣rely␣on␣the␣test␣report␣history␣(yes/no)?

=item␣urllist_ping_external

When␣automatic␣selection␣of␣the␣nearest␣cpan␣mirrors␣is␣performed,
turn␣on␣the␣use␣of␣the␣external␣ping␣via␣Net::Ping::External.␣This␣is
recommended␣in␣the␣case␣the␣local␣network␣has␣a␣transparent␣proxy.

Do␣you␣want␣to␣use␣the␣external␣ping␣command␣when␣autoselecting
mirrors?

=item␣urllist_ping_verbose

When␣automatic␣selection␣of␣the␣nearest␣cpan␣mirrors␣is␣performed,
this␣option␣can␣be␣used␣to␣turn␣on␣verbosity␣during␣the␣selection
process.

Do␣you␣want␣to␣see␣verbosity␣turned␣on␣when␣autoselecting␣mirrors?

=item␣use_prompt_default

When␣this␣is␣true,␣CPAN␣will␣set␣PERL_MM_USE_DEFAULT␣to␣a␣true
value.␣␣This␣causes␣ExtUtils::MakeMaker␣(and␣compatible)␣prompts
to␣use␣default␣values␣instead␣of␣stopping␣to␣prompt␣you␣to␣answer
questions.␣It␣also␣sets␣NONINTERACTIVE_TESTING␣to␣a␣true␣value␣to
signal␣more␣generally␣that␣distributions␣should␣not␣try␣to
interact␣with␣you.

Do␣you␣want␣to␣use␣prompt␣defaults␣(yes/no)?

=item␣use_sqlite

CPAN::SQLite␣is␣a␣layer␣between␣the␣index␣files␣that␣are␣downloaded
from␣the␣CPAN␣and␣CPAN.pm␣that␣speeds␣up␣metadata␣queries␣and␣reduces
memory␣consumption␣of␣CPAN.pm␣considerably.

Use␣CPAN::SQLite␣if␣available?␣(yes/no)?

=item␣version_timeout

This␣timeout␣prevents␣CPAN␣from␣hanging␣when␣trying␣to␣parse␣a
pathologically␣coded␣$VERSION␣from␣a␣module.

The␣default␣is␣15␣seconds.␣␣If␣you␣set␣this␣value␣to␣0,␣no␣timeout
will␣occur,␣but␣this␣is␣not␣recommended.

Timeout␣for␣parsing␣module␣versions?

=item␣yaml_load_code

Both␣YAML.pm␣and␣YAML::Syck␣are␣capable␣of␣deserialising␣code.␣As␣this
requires␣a␣string␣eval,␣which␣might␣be␣a␣security␣risk,␣you␣can␣use
this␣option␣to␣enable␣or␣disable␣the␣deserialisation␣of␣code␣via
CPAN::DeferredCode.␣(Note:␣This␣does␣not␣work␣under␣perl␣5.6)

Do␣you␣want␣to␣enable␣code␣deserialisation␣(yes/no)?

=item␣yaml_module

At␣the␣time␣of␣this␣writing␣(2009-03)␣there␣are␣three␣YAML
implementations␣working:␣YAML,␣YAML::Syck,␣and␣YAML::XS.␣The␣latter
two␣are␣faster␣but␣need␣a␣C␣compiler␣installed␣on␣your␣system.␣There
may␣be␣more␣alternative␣YAML␣conforming␣modules.␣When␣I␣tried␣two
other␣players,␣YAML::Tiny␣and␣YAML::Perl,␣they␣seemed␣not␣powerful
enough␣to␣work␣with␣CPAN.pm.␣This␣may␣have␣changed␣in␣the␣meantime.

Which␣YAML␣implementation␣would␣you␣prefer?

=back
----------
Range: (6958306,6961003) (2697)
=head1␣NAME

Symbol␣-␣manipulate␣Perl␣symbols␣and␣their␣names

=head1␣SYNOPSIS

␣␣␣␣use␣Symbol;

␣␣␣␣$sym␣=␣gensym;
␣␣␣␣open($sym,␣'<',␣"filename");
␣␣␣␣$_␣=␣<$sym>;
␣␣␣␣#␣etc.

␣␣␣␣ungensym␣$sym;␣␣␣␣␣␣#␣no␣effect

␣␣␣␣#␣replace␣*FOO{IO}␣handle␣but␣not␣$FOO,␣%FOO,␣etc.
␣␣␣␣*FOO␣=␣geniosym;

␣␣␣␣print␣qualify("x"),␣"\n";␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣"main::x"
␣␣␣␣print␣qualify("x",␣"FOO"),␣"\n";␣␣␣␣␣␣␣#␣"FOO::x"
␣␣␣␣print␣qualify("BAR::x"),␣"\n";␣␣␣␣␣␣␣␣␣#␣"BAR::x"
␣␣␣␣print␣qualify("BAR::x",␣"FOO"),␣"\n";␣␣#␣"BAR::x"
␣␣␣␣print␣qualify("STDOUT",␣"FOO"),␣"\n";␣␣#␣"main::STDOUT"␣(global)
␣␣␣␣print␣qualify(\*x),␣"\n";␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣returns␣\*x
␣␣␣␣print␣qualify(\*x,␣"FOO"),␣"\n";␣␣␣␣␣␣␣#␣returns␣\*x

␣␣␣␣use␣strict␣refs;
␣␣␣␣print␣{␣qualify_to_ref␣$fh␣}␣"foo!\n";
␣␣␣␣$ref␣=␣qualify_to_ref␣$name,␣$pkg;

␣␣␣␣use␣Symbol␣qw(delete_package);
␣␣␣␣delete_package('Foo::Bar');
␣␣␣␣print␣"deleted\n"␣unless␣exists␣$Foo::{'Bar::'};

=head1␣DESCRIPTION

C<Symbol::gensym>␣creates␣an␣anonymous␣glob␣and␣returns␣a␣reference
to␣it.␣␣Such␣a␣glob␣reference␣can␣be␣used␣as␣a␣file␣or␣directory
handle.

For␣backward␣compatibility␣with␣older␣implementations␣that␣didn't
support␣anonymous␣globs,␣C<Symbol::ungensym>␣is␣also␣provided.
But␣it␣doesn't␣do␣anything.

C<Symbol::geniosym>␣creates␣an␣anonymous␣IO␣handle.␣␣This␣can␣be
assigned␣into␣an␣existing␣glob␣without␣affecting␣the␣non-IO␣portions
of␣the␣glob.

C<Symbol::qualify>␣turns␣unqualified␣symbol␣names␣into␣qualified
variable␣names␣(e.g.␣"myvar"␣-E<gt>␣"MyPackage::myvar").␣␣If␣it␣is␣given␣a
second␣parameter,␣C<qualify>␣uses␣it␣as␣the␣default␣package;
otherwise,␣it␣uses␣the␣package␣of␣its␣caller.␣␣Regardless,␣global
variable␣names␣(e.g.␣"STDOUT",␣"ENV",␣"SIG")␣are␣always␣qualified␣with
"main::".

Qualification␣applies␣only␣to␣symbol␣names␣(strings).␣␣References␣are
left␣unchanged␣under␣the␣assumption␣that␣they␣are␣glob␣references,
which␣are␣qualified␣by␣their␣nature.

C<Symbol::qualify_to_ref>␣is␣just␣like␣C<Symbol::qualify>␣except␣that␣it
returns␣a␣glob␣ref␣rather␣than␣a␣symbol␣name,␣so␣you␣can␣use␣the␣result
even␣if␣C<use␣strict␣'refs'>␣is␣in␣effect.

C<Symbol::delete_package>␣wipes␣out␣a␣whole␣package␣namespace.␣␣Note
this␣routine␣is␣not␣exported␣by␣default--you␣may␣want␣to␣import␣it
explicitly.

=head1␣BUGS

C<Symbol::delete_package>␣is␣a␣bit␣too␣powerful.␣It␣undefines␣every␣symbol␣that
lives␣in␣the␣specified␣package.␣Since␣perl,␣for␣performance␣reasons,␣does␣not
perform␣a␣symbol␣table␣lookup␣each␣time␣a␣function␣is␣called␣or␣a␣global
variable␣is␣accessed,␣some␣code␣that␣has␣already␣been␣loaded␣and␣that␣makes␣use
of␣symbols␣in␣package␣C<Foo>␣may␣stop␣working␣after␣you␣delete␣C<Foo>,␣even␣if
you␣reload␣the␣C<Foo>␣module␣afterwards.

=cut
----------
Range: (6965304,6971617) (6313)
=head1␣NAME

Term::ReadLine␣-␣Perl␣interface␣to␣various␣C<readline>␣packages.
If␣no␣real␣package␣is␣found,␣substitutes␣stubs␣instead␣of␣basic␣functions.

=head1␣SYNOPSIS

␣␣use␣Term::ReadLine;
␣␣my␣$term␣=␣Term::ReadLine->new('Simple␣Perl␣calc');
␣␣my␣$prompt␣=␣"Enter␣your␣arithmetic␣expression:␣";
␣␣my␣$OUT␣=␣$term->OUT␣||␣\*STDOUT;
␣␣while␣(␣defined␣($_␣=␣$term->readline($prompt))␣)␣{
␣␣␣␣my␣$res␣=␣eval($_);
␣␣␣␣warn␣$@␣if␣$@;
␣␣␣␣print␣$OUT␣$res,␣"\n"␣unless␣$@;
␣␣␣␣$term->addhistory($_)␣if␣/\S/;
␣␣}

=head1␣DESCRIPTION

This␣package␣is␣just␣a␣front␣end␣to␣some␣other␣packages.␣It's␣a␣stub␣to
set␣up␣a␣common␣interface␣to␣the␣various␣ReadLine␣implementations␣found␣on
CPAN␣(under␣the␣C<Term::ReadLine::*>␣namespace).

=head1␣Minimal␣set␣of␣supported␣functions

All␣the␣supported␣functions␣should␣be␣called␣as␣methods,␣i.e.,␣either␣as␣

␣␣$term␣=␣Term::ReadLine->new('name');

or␣as␣

␣␣$term->addhistory('row');

where␣$term␣is␣a␣return␣value␣of␣Term::ReadLine-E<gt>new().

=over␣12

=item␣C<ReadLine>

returns␣the␣actual␣package␣that␣executes␣the␣commands.␣Among␣possible
values␣are␣C<Term::ReadLine::Gnu>,␣C<Term::ReadLine::Perl>,
C<Term::ReadLine::Stub>.

=item␣C<new>

returns␣the␣handle␣for␣subsequent␣calls␣to␣following
functions.␣Argument␣is␣the␣name␣of␣the␣application.␣Optionally␣can␣be
followed␣by␣two␣arguments␣for␣C<IN>␣and␣C<OUT>␣filehandles.␣These
arguments␣should␣be␣globs.

=item␣C<readline>

gets␣an␣input␣line,␣I<possibly>␣with␣actual␣C<readline>
support.␣Trailing␣newline␣is␣removed.␣Returns␣C<undef>␣on␣C<EOF>.

=item␣C<addhistory>

adds␣the␣line␣to␣the␣history␣of␣input,␣from␣where␣it␣can␣be␣used␣if
the␣actual␣C<readline>␣is␣present.

=item␣C<IN>,␣C<OUT>

return␣the␣filehandles␣for␣input␣and␣output␣or␣C<undef>␣if␣C<readline>
input␣and␣output␣cannot␣be␣used␣for␣Perl.

=item␣C<MinLine>

If␣argument␣is␣specified,␣it␣is␣an␣advice␣on␣minimal␣size␣of␣line␣to
be␣included␣into␣history.␣␣C<undef>␣means␣do␣not␣include␣anything␣into
history.␣Returns␣the␣old␣value.

=item␣C<findConsole>

returns␣an␣array␣with␣two␣strings␣that␣give␣most␣appropriate␣names␣for
files␣for␣input␣and␣output␣using␣conventions␣C<"E<lt>$in">,␣C<"E<gt>out">.

The␣strings␣returned␣may␣not␣be␣useful␣for␣3-argument␣open().

=item␣Attribs

returns␣a␣reference␣to␣a␣hash␣which␣describes␣internal␣configuration
of␣the␣package.␣Names␣of␣keys␣in␣this␣hash␣conform␣to␣standard
conventions␣with␣the␣leading␣C<rl_>␣stripped.

=item␣C<Features>

Returns␣a␣reference␣to␣a␣hash␣with␣keys␣being␣features␣present␣in
current␣implementation.␣Several␣optional␣features␣are␣used␣in␣the
minimal␣interface:␣C<appname>␣should␣be␣present␣if␣the␣first␣argument
to␣C<new>␣is␣recognized,␣and␣C<minline>␣should␣be␣present␣if
C<MinLine>␣method␣is␣not␣dummy.␣␣C<autohistory>␣should␣be␣present␣if
lines␣are␣put␣into␣history␣automatically␣(maybe␣subject␣to
C<MinLine>),␣and␣C<addhistory>␣if␣C<addhistory>␣method␣is␣not␣dummy.

If␣C<Features>␣method␣reports␣a␣feature␣C<attribs>␣as␣present,␣the
method␣C<Attribs>␣is␣not␣dummy.

=back

=head1␣Additional␣supported␣functions

Actually␣C<Term::ReadLine>␣can␣use␣some␣other␣package,␣that␣will
support␣a␣richer␣set␣of␣commands.

All␣these␣commands␣are␣callable␣via␣method␣interface␣and␣have␣names
which␣conform␣to␣standard␣conventions␣with␣the␣leading␣C<rl_>␣stripped.

The␣stub␣package␣included␣with␣the␣perl␣distribution␣allows␣some
additional␣methods:␣

=over␣12

=item␣C<tkRunning>

makes␣Tk␣event␣loop␣run␣when␣waiting␣for␣user␣input␣(i.e.,␣during
C<readline>␣method).

=item␣C<event_loop>

Registers␣call-backs␣to␣wait␣for␣user␣input␣(i.e.,␣during␣C<readline>
method).␣␣This␣supersedes␣tkRunning.

The␣first␣call-back␣registered␣is␣the␣call␣back␣for␣waiting.␣␣It␣is
expected␣that␣the␣callback␣will␣call␣the␣current␣event␣loop␣until
there␣is␣something␣waiting␣to␣get␣on␣the␣input␣filehandle.␣␣The␣parameter
passed␣in␣is␣the␣return␣value␣of␣the␣second␣call␣back.

The␣second␣call-back␣registered␣is␣the␣call␣back␣for␣registration.␣␣The
input␣filehandle␣(often␣STDIN,␣but␣not␣necessarily)␣will␣be␣passed␣in.

For␣example,␣with␣AnyEvent:

␣␣$term->event_loop(sub␣{
␣␣␣␣my␣$data␣=␣shift;
␣␣␣␣$data->[1]␣=␣AE::cv();
␣␣␣␣$data->[1]->recv();
␣␣},␣sub␣{
␣␣␣␣my␣$fh␣=␣shift;
␣␣␣␣my␣$data␣=␣[];
␣␣␣␣$data->[0]␣=␣AE::io($fh,␣0,␣sub␣{␣$data->[1]->send()␣});
␣␣␣␣$data;
␣␣});

The␣second␣call-back␣is␣optional␣if␣the␣call␣back␣is␣registered␣prior␣to
the␣call␣to␣$term-E<gt>readline.

Deregistration␣is␣done␣in␣this␣case␣by␣calling␣event_loop␣with␣C<undef>
as␣its␣parameter:

␣␣␣␣$term->event_loop(undef);

This␣will␣cause␣the␣data␣array␣ref␣to␣be␣removed,␣allowing␣normal␣garbage
collection␣to␣clean␣it␣up.␣␣With␣AnyEvent,␣that␣will␣cause␣$data->[0]␣to
be␣cleaned␣up,␣and␣AnyEvent␣will␣automatically␣cancel␣the␣watcher␣at␣that
time.␣␣If␣another␣loop␣requires␣more␣than␣that␣to␣clean␣up␣a␣file␣watcher,
that␣will␣be␣up␣to␣the␣caller␣to␣handle.

=item␣C<ornaments>

makes␣the␣command␣line␣stand␣out␣by␣using␣termcap␣data.␣␣The␣argument
to␣C<ornaments>␣should␣be␣0,␣1,␣or␣a␣string␣of␣a␣form
C<"aa,bb,cc,dd">.␣␣Four␣components␣of␣this␣string␣should␣be␣names␣of
I<terminal␣capacities>,␣first␣two␣will␣be␣issued␣to␣make␣the␣prompt
standout,␣last␣two␣to␣make␣the␣input␣line␣standout.

=item␣C<newTTY>

takes␣two␣arguments␣which␣are␣input␣filehandle␣and␣output␣filehandle.
Switches␣to␣use␣these␣filehandles.

=back

One␣can␣check␣whether␣the␣currently␣loaded␣ReadLine␣package␣supports
these␣methods␣by␣checking␣for␣corresponding␣C<Features>.

=head1␣EXPORTS

None

=head1␣ENVIRONMENT

The␣environment␣variable␣C<PERL_RL>␣governs␣which␣ReadLine␣clone␣is
loaded.␣If␣the␣value␣is␣false,␣a␣dummy␣interface␣is␣used.␣If␣the␣value
is␣true,␣it␣should␣be␣tail␣of␣the␣name␣of␣the␣package␣to␣use,␣such␣as
C<Perl>␣or␣C<Gnu>.␣␣

As␣a␣special␣case,␣if␣the␣value␣of␣this␣variable␣is␣space-separated,
the␣tail␣might␣be␣used␣to␣disable␣the␣ornaments␣by␣setting␣the␣tail␣to
be␣C<o=0>␣or␣C<ornaments=0>.␣␣The␣head␣should␣be␣as␣described␣above,␣say

If␣the␣variable␣is␣not␣set,␣or␣if␣the␣head␣of␣space-separated␣list␣is
empty,␣the␣best␣available␣package␣is␣loaded.

␣␣export␣"PERL_RL=Perl␣o=0"␣#␣Use␣Perl␣ReadLine␣sans␣ornaments
␣␣export␣"PERL_RL=␣o=0"␣␣␣␣␣#␣Use␣best␣available␣ReadLine␣sans␣ornaments

(Note␣that␣processing␣of␣C<PERL_RL>␣for␣ornaments␣is␣in␣the␣discretion␣of␣the␣
particular␣used␣C<Term::ReadLine::*>␣package).

=cut
----------
Range: (7004715,7006703) (1988)
}

=over␣4

=item␣B<Tgetent>

Returns␣a␣blessed␣object␣reference␣which␣the␣user␣can
then␣use␣to␣send␣the␣control␣strings␣to␣the␣terminal␣using␣B<Tputs>
and␣B<Tgoto>.

The␣function␣extracts␣the␣entry␣of␣the␣specified␣terminal
type␣I<TERM>␣(defaults␣to␣the␣environment␣variable␣I<TERM>)␣from␣the
database.

It␣will␣look␣in␣the␣environment␣for␣a␣I<TERMCAP>␣variable.␣␣If
found,␣and␣the␣value␣does␣not␣begin␣with␣a␣slash,␣and␣the␣terminal
type␣name␣is␣the␣same␣as␣the␣environment␣string␣I<TERM>,␣the
I<TERMCAP>␣string␣is␣used␣instead␣of␣reading␣a␣termcap␣file.␣␣If
it␣does␣begin␣with␣a␣slash,␣the␣string␣is␣used␣as␣a␣path␣name␣of
the␣termcap␣file␣to␣search.␣␣If␣I<TERMCAP>␣does␣not␣begin␣with␣a
slash␣and␣name␣is␣different␣from␣I<TERM>,␣B<Tgetent>␣searches␣the
files␣F<$HOME/.termcap>,␣F</etc/termcap>,␣and␣F</usr/share/misc/termcap>,
in␣that␣order,␣unless␣the␣environment␣variable␣I<TERMPATH>␣exists,
in␣which␣case␣it␣specifies␣a␣list␣of␣file␣pathnames␣(separated␣by
spaces␣or␣colons)␣to␣be␣searched␣B<instead>.␣␣Whenever␣multiple
files␣are␣searched␣and␣a␣tc␣field␣occurs␣in␣the␣requested␣entry,
the␣entry␣it␣names␣must␣be␣found␣in␣the␣same␣file␣or␣one␣of␣the
succeeding␣files.␣␣If␣there␣is␣a␣C<:tc=...:>␣in␣the␣I<TERMCAP>
environment␣variable␣string␣it␣will␣continue␣the␣search␣in␣the
files␣as␣above.

The␣extracted␣termcap␣entry␣is␣available␣in␣the␣object
as␣C<$self-E<gt>{TERMCAP}>.

It␣takes␣a␣hash␣reference␣as␣an␣argument␣with␣two␣optional␣keys:

=over␣2

=item␣OSPEED

The␣terminal␣output␣bit␣rate␣(often␣mistakenly␣called␣the␣baud␣rate)
for␣this␣terminal␣-␣if␣not␣set␣a␣warning␣will␣be␣generated
and␣it␣will␣be␣defaulted␣to␣9600.␣␣I<OSPEED>␣can␣be␣specified␣as
either␣a␣POSIX␣termios/SYSV␣termio␣speeds␣(where␣9600␣equals␣9600)␣or
an␣old␣DSD-style␣speed␣(␣where␣13␣equals␣9600).


=item␣TERM

The␣terminal␣type␣whose␣termcap␣entry␣will␣be␣used␣-␣if␣not␣supplied␣it␣will
default␣to␣$ENV{TERM}:␣if␣that␣is␣not␣set␣then␣B<Tgetent>␣will␣croak.

=back

It␣calls␣C<croak>␣on␣failure.

=cut
----------
Range: (7025960,7031560) (5600)
=head1␣NAME

Tie::Hash,␣Tie::StdHash,␣Tie::ExtraHash␣-␣base␣class␣definitions␣for␣tied␣hashes

=head1␣SYNOPSIS

␣␣␣␣package␣NewHash;
␣␣␣␣require␣Tie::Hash;

␣␣␣␣@ISA␣=␣qw(Tie::Hash);

␣␣␣␣sub␣DELETE␣{␣...␣}		#␣Provides␣needed␣method
␣␣␣␣sub␣CLEAR␣{␣...␣}		#␣Overrides␣inherited␣method


␣␣␣␣package␣NewStdHash;
␣␣␣␣require␣Tie::Hash;

␣␣␣␣@ISA␣=␣qw(Tie::StdHash);

␣␣␣␣#␣All␣methods␣provided␣by␣default,␣define
␣␣␣␣#␣only␣those␣needing␣overrides
␣␣␣␣#␣Accessors␣access␣the␣storage␣in␣%{$_[0]};
␣␣␣␣#␣TIEHASH␣should␣return␣a␣reference␣to␣the␣actual␣storage
␣␣␣␣sub␣DELETE␣{␣...␣}

␣␣␣␣package␣NewExtraHash;
␣␣␣␣require␣Tie::Hash;

␣␣␣␣@ISA␣=␣qw(Tie::ExtraHash);

␣␣␣␣#␣All␣methods␣provided␣by␣default,␣define␣
␣␣␣␣#␣only␣those␣needing␣overrides
␣␣␣␣#␣Accessors␣access␣the␣storage␣in␣%{$_[0][0]};
␣␣␣␣#␣TIEHASH␣should␣return␣an␣array␣reference␣with␣the␣first␣element
␣␣␣␣#␣being␣the␣reference␣to␣the␣actual␣storage␣
␣␣␣␣sub␣DELETE␣{␣
␣␣␣␣␣␣$_[0][1]->('del',␣$_[0][0],␣$_[1]);␣#␣Call␣the␣report␣writer
␣␣␣␣␣␣delete␣$_[0][0]->{$_[1]};		␣␣#␣␣$_[0]->SUPER::DELETE($_[1])
␣␣␣␣}


␣␣␣␣package␣main;

␣␣␣␣tie␣%new_hash,␣'NewHash';
␣␣␣␣tie␣%new_std_hash,␣'NewStdHash';
␣␣␣␣tie␣%new_extra_hash,␣'NewExtraHash',
	sub␣{warn␣"Doing␣\U$_[1]\E␣of␣$_[2].\n"};

=head1␣DESCRIPTION

This␣module␣provides␣some␣skeletal␣methods␣for␣hash-tying␣classes.␣See
L<perltie>␣for␣a␣list␣of␣the␣functions␣required␣in␣order␣to␣tie␣a␣hash
to␣a␣package.␣The␣basic␣B<Tie::Hash>␣package␣provides␣a␣C<new>␣method,␣as␣well
as␣methods␣C<TIEHASH>,␣C<EXISTS>␣and␣C<CLEAR>.␣The␣B<Tie::StdHash>␣and
B<Tie::ExtraHash>␣packages
provide␣most␣methods␣for␣hashes␣described␣in␣L<perltie>␣(the␣exceptions
are␣C<UNTIE>␣and␣C<DESTROY>).␣␣They␣cause␣tied␣hashes␣to␣behave␣exactly␣like␣standard␣hashes,
and␣allow␣for␣selective␣overwriting␣of␣methods.␣␣B<Tie::Hash>␣grandfathers␣the
C<new>␣method:␣it␣is␣used␣if␣C<TIEHASH>␣is␣not␣defined
in␣the␣case␣a␣class␣forgets␣to␣include␣a␣C<TIEHASH>␣method.

For␣developers␣wishing␣to␣write␣their␣own␣tied␣hashes,␣the␣required␣methods
are␣briefly␣defined␣below.␣See␣the␣L<perltie>␣section␣for␣more␣detailed
descriptive,␣as␣well␣as␣example␣code:

=over␣4

=item␣TIEHASH␣classname,␣LIST

The␣method␣invoked␣by␣the␣command␣C<tie␣%hash,␣classname>.␣Associates␣a␣new
hash␣instance␣with␣the␣specified␣class.␣C<LIST>␣would␣represent␣additional
arguments␣(along␣the␣lines␣of␣L<AnyDBM_File>␣and␣compatriots)␣needed␣to
complete␣the␣association.

=item␣STORE␣this,␣key,␣value

Store␣datum␣I<value>␣into␣I<key>␣for␣the␣tied␣hash␣I<this>.

=item␣FETCH␣this,␣key

Retrieve␣the␣datum␣in␣I<key>␣for␣the␣tied␣hash␣I<this>.

=item␣FIRSTKEY␣this

Return␣the␣first␣key␣in␣the␣hash.

=item␣NEXTKEY␣this,␣lastkey

Return␣the␣next␣key␣in␣the␣hash.

=item␣EXISTS␣this,␣key

Verify␣that␣I<key>␣exists␣with␣the␣tied␣hash␣I<this>.

The␣B<Tie::Hash>␣implementation␣is␣a␣stub␣that␣simply␣croaks.

=item␣DELETE␣this,␣key

Delete␣the␣key␣I<key>␣from␣the␣tied␣hash␣I<this>.

=item␣CLEAR␣this

Clear␣all␣values␣from␣the␣tied␣hash␣I<this>.

=item␣SCALAR␣this

Returns␣what␣evaluating␣the␣hash␣in␣scalar␣context␣yields.

B<Tie::Hash>␣does␣not␣implement␣this␣method␣(but␣B<Tie::StdHash>
and␣B<Tie::ExtraHash>␣do).

=back

=head1␣Inheriting␣from␣B<Tie::StdHash>

The␣accessor␣methods␣assume␣that␣the␣actual␣storage␣for␣the␣data␣in␣the␣tied
hash␣is␣in␣the␣hash␣referenced␣by␣C<tied(%tiedhash)>.␣␣Thus␣overwritten
C<TIEHASH>␣method␣should␣return␣a␣hash␣reference,␣and␣the␣remaining␣methods
should␣operate␣on␣the␣hash␣referenced␣by␣the␣first␣argument:

␣␣package␣ReportHash;
␣␣our␣@ISA␣=␣'Tie::StdHash';

␣␣sub␣TIEHASH␣␣{
␣␣␣␣my␣$storage␣=␣bless␣{},␣shift;
␣␣␣␣warn␣"New␣ReportHash␣created,␣stored␣in␣$storage.\n";
␣␣␣␣$storage
␣␣}
␣␣sub␣STORE␣␣␣␣{
␣␣␣␣warn␣"Storing␣data␣with␣key␣$_[1]␣at␣$_[0].\n";
␣␣␣␣$_[0]{$_[1]}␣=␣$_[2]
␣␣}


=head1␣Inheriting␣from␣B<Tie::ExtraHash>

The␣accessor␣methods␣assume␣that␣the␣actual␣storage␣for␣the␣data␣in␣the␣tied
hash␣is␣in␣the␣hash␣referenced␣by␣C<(tied(%tiedhash))-E<gt>[0]>.␣␣Thus␣overwritten
C<TIEHASH>␣method␣should␣return␣an␣array␣reference␣with␣the␣first
element␣being␣a␣hash␣reference,␣and␣the␣remaining␣methods␣should␣operate␣on␣the
hash␣C<<␣%{␣$_[0]->[0]␣}␣>>:

␣␣package␣ReportHash;
␣␣our␣@ISA␣=␣'Tie::ExtraHash';

␣␣sub␣TIEHASH␣␣{
␣␣␣␣my␣$class␣=␣shift;
␣␣␣␣my␣$storage␣=␣bless␣[{},␣@_],␣$class;
␣␣␣␣warn␣"New␣ReportHash␣created,␣stored␣in␣$storage.\n";
␣␣␣␣$storage;
␣␣}
␣␣sub␣STORE␣␣␣␣{
␣␣␣␣warn␣"Storing␣data␣with␣key␣$_[1]␣at␣$_[0].\n";
␣␣␣␣$_[0][0]{$_[1]}␣=␣$_[2]
␣␣}

The␣default␣C<TIEHASH>␣method␣stores␣"extra"␣arguments␣to␣tie()␣starting
from␣offset␣1␣in␣the␣array␣referenced␣by␣C<tied(%tiedhash)>;␣this␣is␣the
same␣storage␣algorithm␣as␣in␣TIEHASH␣subroutine␣above.␣␣Hence,␣a␣typical
package␣inheriting␣from␣B<Tie::ExtraHash>␣does␣not␣need␣to␣overwrite␣this
method.

=head1␣C<SCALAR>,␣C<UNTIE>␣and␣C<DESTROY>

The␣methods␣C<UNTIE>␣and␣C<DESTROY>␣are␣not␣defined␣in␣B<Tie::Hash>,
B<Tie::StdHash>,␣or␣B<Tie::ExtraHash>.␣␣Tied␣hashes␣do␣not␣require
presence␣of␣these␣methods,␣but␣if␣defined,␣the␣methods␣will␣be␣called␣in
proper␣time,␣see␣L<perltie>.

C<SCALAR>␣is␣only␣defined␣in␣B<Tie::StdHash>␣and␣B<Tie::ExtraHash>.

If␣needed,␣these␣methods␣should␣be␣defined␣by␣the␣package␣inheriting␣from
B<Tie::Hash>,␣B<Tie::StdHash>,␣or␣B<Tie::ExtraHash>.␣See␣L<perltie/"SCALAR">
to␣find␣out␣what␣happens␣when␣C<SCALAR>␣does␣not␣exist.

=head1␣MORE␣INFORMATION

The␣packages␣relating␣to␣various␣DBM-related␣implementations␣(F<DB_File>,
F<NDBM_File>,␣etc.)␣show␣examples␣of␣general␣tied␣hashes,␣as␣does␣the
L<Config>␣module.␣While␣these␣do␣not␣utilize␣B<Tie::Hash>,␣they␣serve␣as
good␣working␣examples.

=cut
----------
Range: (7090017,7092804) (2787)
=head1␣NAME

Tie::Scalar,␣Tie::StdScalar␣-␣base␣class␣definitions␣for␣tied␣scalars

=head1␣SYNOPSIS

␣␣␣␣package␣NewScalar;
␣␣␣␣require␣Tie::Scalar;

␣␣␣␣@ISA␣=␣qw(Tie::Scalar);

␣␣␣␣sub␣FETCH␣{␣...␣}		#␣Provide␣a␣needed␣method
␣␣␣␣sub␣TIESCALAR␣{␣...␣}	#␣Overrides␣inherited␣method


␣␣␣␣package␣NewStdScalar;
␣␣␣␣require␣Tie::Scalar;

␣␣␣␣@ISA␣=␣qw(Tie::StdScalar);

␣␣␣␣#␣All␣methods␣provided␣by␣default,␣so␣define
␣␣␣␣#␣only␣what␣needs␣be␣overridden
␣␣␣␣sub␣FETCH␣{␣...␣}


␣␣␣␣package␣main;

␣␣␣␣tie␣$new_scalar,␣'NewScalar';
␣␣␣␣tie␣$new_std_scalar,␣'NewStdScalar';

=head1␣DESCRIPTION

This␣module␣provides␣some␣skeletal␣methods␣for␣scalar-tying␣classes.␣See
L<perltie>␣for␣a␣list␣of␣the␣functions␣required␣in␣tying␣a␣scalar␣to␣a
package.␣The␣basic␣B<Tie::Scalar>␣package␣provides␣a␣C<new>␣method,␣as␣well
as␣methods␣C<TIESCALAR>,␣C<FETCH>␣and␣C<STORE>.␣The␣B<Tie::StdScalar>
package␣provides␣all␣the␣methods␣specified␣in␣␣L<perltie>.␣It␣inherits␣from
B<Tie::Scalar>␣and␣causes␣scalars␣tied␣to␣it␣to␣behave␣exactly␣like␣the
built-in␣scalars,␣allowing␣for␣selective␣overloading␣of␣methods.␣The␣C<new>
method␣is␣provided␣as␣a␣means␣of␣grandfathering,␣for␣classes␣that␣forget␣to
provide␣their␣own␣C<TIESCALAR>␣method.

For␣developers␣wishing␣to␣write␣their␣own␣tied-scalar␣classes,␣the␣methods
are␣summarized␣below.␣The␣L<perltie>␣section␣not␣only␣documents␣these,␣but
has␣sample␣code␣as␣well:

=over␣4

=item␣TIESCALAR␣classname,␣LIST

The␣method␣invoked␣by␣the␣command␣C<tie␣$scalar,␣classname>.␣Associates␣a␣new
scalar␣instance␣with␣the␣specified␣class.␣C<LIST>␣would␣represent␣additional
arguments␣(along␣the␣lines␣of␣L<AnyDBM_File>␣and␣compatriots)␣needed␣to
complete␣the␣association.

=item␣FETCH␣this

Retrieve␣the␣value␣of␣the␣tied␣scalar␣referenced␣by␣I<this>.

=item␣STORE␣this,␣value

Store␣data␣I<value>␣in␣the␣tied␣scalar␣referenced␣by␣I<this>.

=item␣DESTROY␣this

Free␣the␣storage␣associated␣with␣the␣tied␣scalar␣referenced␣by␣I<this>.
This␣is␣rarely␣needed,␣as␣Perl␣manages␣its␣memory␣quite␣well.␣But␣the
option␣exists,␣should␣a␣class␣wish␣to␣perform␣specific␣actions␣upon␣the
destruction␣of␣an␣instance.

=back

=head2␣Tie::Scalar␣vs␣Tie::StdScalar

C<<␣Tie::Scalar␣>>␣provides␣all␣the␣necessary␣methods,␣but␣one␣should␣realize
they␣do␣not␣do␣anything␣useful.␣Calling␣C<<␣Tie::Scalar::FETCH␣>>␣or␣
C<<␣Tie::Scalar::STORE␣>>␣results␣in␣a␣(trappable)␣croak.␣And␣if␣you␣inherit
from␣C<<␣Tie::Scalar␣>>,␣you␣I<must>␣provide␣either␣a␣C<<␣new␣>>␣or␣a
C<<␣TIESCALAR␣>>␣method.␣

If␣you␣are␣looking␣for␣a␣class␣that␣does␣everything␣for␣you␣that␣you␣don't
define␣yourself,␣use␣the␣C<<␣Tie::StdScalar␣>>␣class,␣not␣the
C<<␣Tie::Scalar␣>>␣one.

=head1␣MORE␣INFORMATION

The␣L<perltie>␣section␣uses␣a␣good␣example␣of␣tying␣scalars␣by␣associating
process␣IDs␣with␣priority.

=cut
----------
Range: (7094358,7096912) (2554)
=head1␣NAME

Tie::Handle␣-␣base␣class␣definitions␣for␣tied␣handles

=head1␣SYNOPSIS

␣␣␣␣package␣NewHandle;
␣␣␣␣require␣Tie::Handle;

␣␣␣␣@ISA␣=␣qw(Tie::Handle);

␣␣␣␣sub␣READ␣{␣...␣}		#␣Provide␣a␣needed␣method
␣␣␣␣sub␣TIEHANDLE␣{␣...␣}	#␣Overrides␣inherited␣method


␣␣␣␣package␣main;

␣␣␣␣tie␣*FH,␣'NewHandle';

=head1␣DESCRIPTION

This␣module␣provides␣some␣skeletal␣methods␣for␣handle-tying␣classes.␣See
L<perltie>␣for␣a␣list␣of␣the␣functions␣required␣in␣tying␣a␣handle␣to␣a␣package.
The␣basic␣B<Tie::Handle>␣package␣provides␣a␣C<new>␣method,␣as␣well␣as␣methods
C<TIEHANDLE>,␣C<PRINT>,␣C<PRINTF>␣and␣C<GETC>.␣

For␣developers␣wishing␣to␣write␣their␣own␣tied-handle␣classes,␣the␣methods
are␣summarized␣below.␣The␣L<perltie>␣section␣not␣only␣documents␣these,␣but
has␣sample␣code␣as␣well:

=over␣4

=item␣TIEHANDLE␣classname,␣LIST

The␣method␣invoked␣by␣the␣command␣C<tie␣*glob,␣classname>.␣Associates␣a␣new
glob␣instance␣with␣the␣specified␣class.␣C<LIST>␣would␣represent␣additional
arguments␣(along␣the␣lines␣of␣L<AnyDBM_File>␣and␣compatriots)␣needed␣to
complete␣the␣association.

=item␣WRITE␣this,␣scalar,␣length,␣offset

Write␣I<length>␣bytes␣of␣data␣from␣I<scalar>␣starting␣at␣I<offset>.

=item␣PRINT␣this,␣LIST

Print␣the␣values␣in␣I<LIST>

=item␣PRINTF␣this,␣format,␣LIST

Print␣the␣values␣in␣I<LIST>␣using␣I<format>

=item␣READ␣this,␣scalar,␣length,␣offset

Read␣I<length>␣bytes␣of␣data␣into␣I<scalar>␣starting␣at␣I<offset>.

=item␣READLINE␣this

Read␣a␣single␣line

=item␣GETC␣this

Get␣a␣single␣character

=item␣CLOSE␣this

Close␣the␣handle

=item␣OPEN␣this,␣filename

(Re-)open␣the␣handle

=item␣BINMODE␣this

Specify␣content␣is␣binary

=item␣EOF␣this

Test␣for␣end␣of␣file.

=item␣TELL␣this

Return␣position␣in␣the␣file.

=item␣SEEK␣this,␣offset,␣whence

Position␣the␣file.

Test␣for␣end␣of␣file.

=item␣DESTROY␣this

Free␣the␣storage␣associated␣with␣the␣tied␣handle␣referenced␣by␣I<this>.
This␣is␣rarely␣needed,␣as␣Perl␣manages␣its␣memory␣quite␣well.␣But␣the
option␣exists,␣should␣a␣class␣wish␣to␣perform␣specific␣actions␣upon␣the
destruction␣of␣an␣instance.

=back

=head1␣MORE␣INFORMATION

The␣L<perltie>␣section␣contains␣an␣example␣of␣tying␣handles.

=head1␣COMPATIBILITY

This␣version␣of␣Tie::Handle␣is␣neither␣related␣to␣nor␣compatible␣with
the␣Tie::Handle␣(3.0)␣module␣available␣on␣CPAN.␣It␣was␣due␣to␣an
accident␣that␣two␣modules␣with␣the␣same␣name␣appeared.␣The␣namespace
clash␣has␣been␣cleared␣in␣favor␣of␣this␣module␣that␣comes␣with␣the
perl␣core␣in␣September␣2000␣and␣accordingly␣the␣version␣number␣has
been␣bumped␣up␣to␣4.0.

=cut
----------
Range: (7114202,7116793) (2591)
=head1␣NAME

Tie::Memoize␣-␣add␣data␣to␣hash␣when␣needed

=head1␣SYNOPSIS

␣␣require␣Tie::Memoize;
␣␣tie␣%hash,␣'Tie::Memoize',
␣␣␣␣␣␣\&fetch,			#␣The␣rest␣is␣optional
␣␣␣␣␣␣$DATA,␣\&exists,
␣␣␣␣␣␣{%ini_value},␣{%ini_existence};

=head1␣DESCRIPTION

This␣package␣allows␣a␣tied␣hash␣to␣autoload␣its␣values␣on␣the␣first␣access,
and␣to␣use␣the␣cached␣value␣on␣the␣following␣accesses.

Only␣read-accesses␣(via␣fetching␣the␣value␣or␣C<exists>)␣result␣in␣calls␣to
the␣functions;␣the␣modify-accesses␣are␣performed␣as␣on␣a␣normal␣hash.

The␣required␣arguments␣during␣C<tie>␣are␣the␣hash,␣the␣package,␣and
the␣reference␣to␣the␣C<FETCH>ing␣function.␣␣The␣optional␣arguments␣are
an␣arbitrary␣scalar␣$data,␣the␣reference␣to␣the␣C<EXISTS>␣function,
and␣initial␣values␣of␣the␣hash␣and␣of␣the␣existence␣cache.

Both␣the␣C<FETCH>ing␣function␣and␣the␣C<EXISTS>␣functions␣have␣the
same␣signature:␣the␣arguments␣are␣C<$key,␣$data>;␣$data␣is␣the␣same
value␣as␣given␣as␣argument␣during␣tie()ing.␣␣Both␣functions␣should
return␣an␣empty␣list␣if␣the␣value␣does␣not␣exist.␣␣If␣C<EXISTS>
function␣is␣different␣from␣the␣C<FETCH>ing␣function,␣it␣should␣return
a␣TRUE␣value␣on␣success.␣␣The␣C<FETCH>ing␣function␣should␣return␣the
intended␣value␣if␣the␣key␣is␣valid.

=head1␣Inheriting␣from␣B<Tie::Memoize>

The␣structure␣of␣the␣tied()␣data␣is␣an␣array␣reference␣with␣elements

␣␣0:␣␣cache␣of␣known␣values
␣␣1:␣␣cache␣of␣known␣existence␣of␣keys
␣␣2:␣␣FETCH␣␣function
␣␣3:␣␣EXISTS␣function
␣␣4:␣␣$data

The␣rest␣is␣for␣internal␣usage␣of␣this␣package.␣␣In␣particular,␣if
TIEHASH␣is␣overwritten,␣it␣should␣call␣SUPER::TIEHASH.

=head1␣EXAMPLE

␣␣sub␣slurp␣{
␣␣␣␣my␣($key,␣$dir)␣=␣shift;
␣␣␣␣open␣my␣$h,␣'<',␣"$dir/$key"␣or␣return;
␣␣␣␣local␣$/;␣<$h>			#␣slurp␣it␣all
␣␣}
␣␣sub␣exists␣{␣my␣($key,␣$dir)␣=␣shift;␣return␣-f␣"$dir/$key"␣}

␣␣tie␣%hash,␣'Tie::Memoize',␣\&slurp,␣$directory,␣\&exists,
␣␣␣␣␣␣{␣fake_file1␣=>␣$content1,␣fake_file2␣=>␣$content2␣},
␣␣␣␣␣␣{␣pretend_does_not_exists␣=>␣0,␣known_to_exist␣=>␣1␣};

This␣example␣treats␣the␣slightly␣modified␣contents␣of␣$directory␣as␣a
hash.␣␣The␣modifications␣are␣that␣the␣keys␣F<fake_file1>␣and
F<fake_file2>␣fetch␣values␣$content1␣and␣$content2,␣and
F<pretend_does_not_exists>␣will␣never␣be␣accessed.␣␣Additionally,␣the
existence␣of␣F<known_to_exist>␣is␣never␣checked␣(so␣if␣it␣does␣not
exists␣when␣its␣content␣is␣needed,␣the␣user␣of␣%hash␣may␣be␣confused).

=head1␣BUGS

FIRSTKEY␣and␣NEXTKEY␣methods␣go␣through␣the␣keys␣which␣were␣already␣read,
not␣all␣the␣possible␣keys␣of␣the␣hash.

=head1␣AUTHOR

Ilya␣Zakharevich␣L<mailto:perl-module-hash-memoize@ilyaz.org>.

=cut
----------
Range: (7117068,7119284) (2216)
=head1␣NAME

FindBin␣-␣Locate␣directory␣of␣original␣perl␣script

=head1␣SYNOPSIS

␣use␣FindBin;
␣use␣lib␣"$FindBin::Bin/../lib";

␣or

␣use␣FindBin␣qw($Bin);
␣use␣lib␣"$Bin/../lib";

=head1␣DESCRIPTION

Locates␣the␣full␣path␣to␣the␣script␣bin␣directory␣to␣allow␣the␣use
of␣paths␣relative␣to␣the␣bin␣directory.

This␣allows␣a␣user␣to␣setup␣a␣directory␣tree␣for␣some␣software␣with
directories␣C<<␣<root>/bin␣>>␣and␣C<<␣<root>/lib␣>>,␣and␣then␣the␣above
example␣will␣allow␣the␣use␣of␣modules␣in␣the␣lib␣directory␣without␣knowing
where␣the␣software␣tree␣is␣installed.

If␣perl␣is␣invoked␣using␣the␣B<-e>␣option␣or␣the␣perl␣script␣is␣read␣from
C<STDIN>␣then␣FindBin␣sets␣both␣C<$Bin>␣and␣C<$RealBin>␣to␣the␣current
directory.

=head1␣EXPORTABLE␣VARIABLES

␣$Bin␣␣␣␣␣␣␣␣␣-␣path␣to␣bin␣directory␣from␣where␣script␣was␣invoked
␣$Script␣␣␣␣␣␣-␣basename␣of␣script␣from␣which␣perl␣was␣invoked
␣$RealBin␣␣␣␣␣-␣$Bin␣with␣all␣links␣resolved
␣$RealScript␣␣-␣$Script␣with␣all␣links␣resolved

=head1␣KNOWN␣ISSUES

If␣there␣are␣two␣modules␣using␣C<FindBin>␣from␣different␣directories
under␣the␣same␣interpreter,␣this␣won't␣work.␣Since␣C<FindBin>␣uses␣a
C<BEGIN>␣block,␣it'll␣be␣executed␣only␣once,␣and␣only␣the␣first␣caller
will␣get␣it␣right.␣This␣is␣a␣problem␣under␣mod_perl␣and␣other␣persistent
Perl␣environments,␣where␣you␣shouldn't␣use␣this␣module.␣Which␣also␣means
that␣you␣should␣avoid␣using␣C<FindBin>␣in␣modules␣that␣you␣plan␣to␣put
on␣CPAN.␣To␣make␣sure␣that␣C<FindBin>␣will␣work␣is␣to␣call␣the␣C<again>
function:

␣␣use␣FindBin;
␣␣FindBin::again();␣#␣or␣FindBin->again;

In␣former␣versions␣of␣FindBin␣there␣was␣no␣C<again>␣function.␣The
workaround␣was␣to␣force␣the␣C<BEGIN>␣block␣to␣be␣executed␣again:

␣␣delete␣$INC{'FindBin.pm'};
␣␣require␣FindBin;

=head1␣AUTHORS

FindBin␣is␣supported␣as␣part␣of␣the␣core␣perl␣distribution.␣Please␣send␣bug
reports␣to␣E<lt>F<perlbug@perl.org>E<gt>␣using␣the␣perlbug␣program
included␣with␣perl.

Graham␣Barr␣E<lt>F<gbarr@pobox.com>E<gt>
Nick␣Ing-Simmons␣E<lt>F<nik@tiuk.ti.com>E<gt>

=head1␣COPYRIGHT

Copyright␣(c)␣1995␣Graham␣Barr␣&␣Nick␣Ing-Simmons.␣All␣rights␣reserved.
This␣program␣is␣free␣software;␣you␣can␣redistribute␣it␣and/or␣modify␣it
under␣the␣same␣terms␣as␣Perl␣itself.

=cut
----------
Range: (7199452,7206004) (6552)
=head1␣NAME

App::Cpan␣-␣easily␣interact␣with␣CPAN␣from␣the␣command␣line

=head1␣SYNOPSIS

	#␣with␣arguments␣and␣no␣switches,␣installs␣specified␣modules
	cpan␣module_name␣[␣module_name␣...␣]

	#␣with␣switches,␣installs␣modules␣with␣extra␣behavior
	cpan␣[-cfFimtTw]␣module_name␣[␣module_name␣...␣]

	#␣use␣local::lib
	cpan␣-I␣module_name␣[␣module_name␣...␣]

	#␣one␣time␣mirror␣override␣for␣faster␣mirrors
	cpan␣-p␣...

	#␣with␣just␣the␣dot,␣install␣from␣the␣distribution␣in␣the
	#␣current␣directory
	cpan␣.

	#␣without␣arguments,␣starts␣CPAN.pm␣shell
	cpan

	#␣without␣arguments,␣but␣some␣switches
	cpan␣[-ahpruvACDLOPX]

=head1␣DESCRIPTION

This␣script␣provides␣a␣command␣interface␣(not␣a␣shell)␣to␣CPAN.␣At␣the
moment␣it␣uses␣CPAN.pm␣to␣do␣the␣work,␣but␣it␣is␣not␣a␣one-shot␣command
runner␣for␣CPAN.pm.

=head2␣Options

=over␣4

=item␣-a

Creates␣a␣CPAN.pm␣autobundle␣with␣CPAN::Shell->autobundle.

=item␣-A␣module␣[␣module␣...␣]

Shows␣the␣primary␣maintainers␣for␣the␣specified␣modules.

=item␣-c␣module

Runs␣a␣`make␣clean`␣in␣the␣specified␣module's␣directories.

=item␣-C␣module␣[␣module␣...␣]

Show␣the␣F<Changes>␣files␣for␣the␣specified␣modules

=item␣-D␣module␣[␣module␣...␣]

Show␣the␣module␣details.␣This␣prints␣one␣line␣for␣each␣out-of-date␣module
(meaning,␣modules␣locally␣installed␣but␣have␣newer␣versions␣on␣CPAN).
Each␣line␣has␣three␣columns:␣module␣name,␣local␣version,␣and␣CPAN
version.

=item␣-f

Force␣the␣specified␣action,␣when␣it␣normally␣would␣have␣failed.␣Use␣this
to␣install␣a␣module␣even␣if␣its␣tests␣fail.␣When␣you␣use␣this␣option,
-i␣is␣not␣optional␣for␣installing␣a␣module␣when␣you␣need␣to␣force␣it:

	%␣cpan␣-f␣-i␣Module::Foo

=item␣-F

Turn␣off␣CPAN.pm's␣attempts␣to␣lock␣anything.␣You␣should␣be␣careful␣with
this␣since␣you␣might␣end␣up␣with␣multiple␣scripts␣trying␣to␣muck␣in␣the
same␣directory.␣This␣isn't␣so␣much␣of␣a␣concern␣if␣you're␣loading␣a␣special
config␣with␣C<-j>,␣and␣that␣config␣sets␣up␣its␣own␣work␣directories.

=item␣-g␣module␣[␣module␣...␣]

Downloads␣to␣the␣current␣directory␣the␣latest␣distribution␣of␣the␣module.

=item␣-G␣module␣[␣module␣...␣]

UNIMPLEMENTED

Download␣to␣the␣current␣directory␣the␣latest␣distribution␣of␣the
modules,␣unpack␣each␣distribution,␣and␣create␣a␣git␣repository␣for␣each
distribution.

If␣you␣want␣this␣feature,␣check␣out␣Yanick␣Champoux's␣C<Git::CPAN::Patch>
distribution.

=item␣-h

Print␣a␣help␣message␣and␣exit.␣When␣you␣specify␣C<-h>,␣it␣ignores␣all
of␣the␣other␣options␣and␣arguments.

=item␣-i␣module␣[␣module␣...␣]

Install␣the␣specified␣modules.␣With␣no␣other␣switches,␣this␣switch
is␣implied.

=item␣-I

Load␣C<local::lib>␣(think␣like␣C<-I>␣for␣loading␣lib␣paths).␣Too␣bad
C<-l>␣was␣already␣taken.

=item␣-j␣Config.pm

Load␣the␣file␣that␣has␣the␣CPAN␣configuration␣data.␣This␣should␣have␣the
same␣format␣as␣the␣standard␣F<CPAN/Config.pm>␣file,␣which␣defines
C<$CPAN::Config>␣as␣an␣anonymous␣hash.

If␣the␣file␣does␣not␣exist,␣C<cpan>␣dies.

=item␣-J

Dump␣the␣configuration␣in␣the␣same␣format␣that␣CPAN.pm␣uses.␣This␣is␣useful
for␣checking␣the␣configuration␣as␣well␣as␣using␣the␣dump␣as␣a␣starting␣point
for␣a␣new,␣custom␣configuration.

=item␣-l

List␣all␣installed␣modules␣with␣their␣versions

=item␣-L␣author␣[␣author␣...␣]

List␣the␣modules␣by␣the␣specified␣authors.

=item␣-m

Make␣the␣specified␣modules.

=item␣-M␣mirror1,mirror2,...

A␣comma-separated␣list␣of␣mirrors␣to␣use␣for␣just␣this␣run.␣The␣C<-P>
option␣can␣find␣them␣for␣you␣automatically.

=item␣-n

Do␣a␣dry␣run,␣but␣don't␣actually␣install␣anything.␣(unimplemented)

=item␣-O

Show␣the␣out-of-date␣modules.

=item␣-p

Ping␣the␣configured␣mirrors␣and␣print␣a␣report

=item␣-P

Find␣the␣best␣mirrors␣you␣could␣be␣using␣and␣use␣them␣for␣the␣current
session.

=item␣-r

Recompiles␣dynamically␣loaded␣modules␣with␣CPAN::Shell->recompile.

=item␣-s

Drop␣in␣the␣CPAN.pm␣shell.␣This␣command␣does␣this␣automatically␣if␣you␣don't
specify␣any␣arguments.

=item␣-t␣module␣[␣module␣...␣]

Run␣a␣`make␣test`␣on␣the␣specified␣modules.

=item␣-T

Do␣not␣test␣modules.␣Simply␣install␣them.

=item␣-u

Upgrade␣all␣installed␣modules.␣Blindly␣doing␣this␣can␣really␣break␣things,
so␣keep␣a␣backup.

=item␣-v

Print␣the␣script␣version␣and␣CPAN.pm␣version␣then␣exit.

=item␣-V

Print␣detailed␣information␣about␣the␣cpan␣client.

=item␣-w

UNIMPLEMENTED

Turn␣on␣cpan␣warnings.␣This␣checks␣various␣things,␣like␣directory␣permissions,
and␣tells␣you␣about␣problems␣you␣might␣have.

=item␣-x␣module␣[␣module␣...␣]

Find␣close␣matches␣to␣the␣named␣modules␣that␣you␣think␣you␣might␣have
mistyped.␣This␣requires␣the␣optional␣installation␣of␣Text::Levenshtein␣or
Text::Levenshtein::Damerau.

=item␣-X

Dump␣all␣the␣namespaces␣to␣standard␣output.

=back

=head2␣Examples

	#␣print␣a␣help␣message
	cpan␣-h

	#␣print␣the␣version␣numbers
	cpan␣-v

	#␣create␣an␣autobundle
	cpan␣-a

	#␣recompile␣modules
	cpan␣-r

	#␣upgrade␣all␣installed␣modules
	cpan␣-u

	#␣install␣modules␣(␣sole␣-i␣is␣optional␣)
	cpan␣-i␣Netscape::Booksmarks␣Business::ISBN

	#␣force␣install␣modules␣(␣must␣use␣-i␣)
	cpan␣-fi␣CGI::Minimal␣URI

	#␣install␣modules␣but␣without␣testing␣them
	cpan␣-Ti␣CGI::Minimal␣URI

=head2␣Environment␣variables

There␣are␣several␣components␣in␣CPAN.pm␣that␣use␣environment␣variables.
The␣build␣tools,␣L<ExtUtils::MakeMaker>␣and␣L<Module::Build>␣use␣some,
while␣others␣matter␣to␣the␣levels␣above␣them.␣Some␣of␣these␣are␣specified
by␣the␣Perl␣Toolchain␣Gang:

Lancaster␣Concensus:␣L<https://github.com/Perl-Toolchain-Gang/toolchain-site/blob/master/lancaster-consensus.md>

Oslo␣Concensus:␣L<https://github.com/Perl-Toolchain-Gang/toolchain-site/blob/master/oslo-consensus.md>

=over␣4

=item␣NONINTERACTIVE_TESTING

Assume␣no␣one␣is␣paying␣attention␣and␣skips␣prompts␣for␣distributions
that␣do␣that␣correctly.␣C<cpan(1)>␣sets␣this␣to␣C<1>␣unless␣it␣already
has␣a␣value␣(even␣if␣that␣value␣is␣false).

=item␣PERL_MM_USE_DEFAULT

Use␣the␣default␣answer␣for␣a␣prompted␣questions.␣C<cpan(1)>␣sets␣this
to␣C<1>␣unless␣it␣already␣has␣a␣value␣(even␣if␣that␣value␣is␣false).

=item␣CPAN_OPTS

As␣with␣C<PERL5OPT>,␣a␣string␣of␣additional␣C<cpan(1)>␣options␣to
add␣to␣those␣you␣specify␣on␣the␣command␣line.

=item␣CPANSCRIPT_LOGLEVEL

The␣log␣level␣to␣use,␣with␣either␣the␣embedded,␣minimal␣logger␣or
L<Log::Log4perl>␣if␣it␣is␣installed.␣Possible␣values␣are␣the␣same␣as
the␣C<Log::Log4perl>␣levels:␣C<TRACE>,␣C<DEBUG>,␣C<INFO>,␣C<WARN>,
C<ERROR>,␣and␣C<FATAL>.␣The␣default␣is␣C<INFO>.

=item␣GIT_COMMAND

The␣path␣to␣the␣C<git>␣binary␣to␣use␣for␣the␣Git␣features.␣The␣default
is␣C</usr/local/bin/git>.

=back

=head2␣Methods

=over␣4

=cut
----------
Range: (7238429,7240079) (1650)
=back

=head1␣EXIT␣VALUES

The␣script␣exits␣with␣zero␣if␣it␣thinks␣that␣everything␣worked,␣or␣a
positive␣number␣if␣it␣thinks␣that␣something␣failed.␣Note,␣however,␣that
in␣some␣cases␣it␣has␣to␣divine␣a␣failure␣by␣the␣output␣of␣things␣it␣does
not␣control.␣For␣now,␣the␣exit␣codes␣are␣vague:

	1	An␣unknown␣error

	2	The␣was␣an␣external␣problem

	4	There␣was␣an␣internal␣problem␣with␣the␣script

	8	A␣module␣failed␣to␣install

=head1␣TO␣DO

*␣There␣is␣initial␣support␣for␣Log4perl␣if␣it␣is␣available,␣but␣I
haven't␣gone␣through␣everything␣to␣make␣the␣NullLogger␣work␣out
correctly␣if␣Log4perl␣is␣not␣installed.

*␣When␣I␣capture␣CPAN.pm␣output,␣I␣need␣to␣check␣for␣errors␣and
report␣them␣to␣the␣user.

*␣Warnings␣switch

*␣Check␣then␣exit

=head1␣BUGS

*␣none␣noted

=head1␣SEE␣ALSO

L<CPAN>,␣L<App::cpanminus>

=head1␣SOURCE␣AVAILABILITY

This␣code␣is␣in␣Github␣in␣the␣CPAN.pm␣repository:

	https://github.com/andk/cpanpm

The␣source␣used␣to␣be␣tracked␣separately␣in␣another␣GitHub␣repo,
but␣the␣canonical␣source␣is␣now␣in␣the␣above␣repo.

=head1␣CREDITS

Japheth␣Cleaver␣added␣the␣bits␣to␣allow␣a␣forced␣install␣(C<-f>).

Jim␣Brandt␣suggest␣and␣provided␣the␣initial␣implementation␣for␣the
up-to-date␣and␣Changes␣features.

Adam␣Kennedy␣pointed␣out␣that␣C<exit()>␣causes␣problems␣on␣Windows
where␣this␣script␣ends␣up␣with␣a␣.bat␣extension

David␣Golden␣helps␣integrate␣this␣into␣the␣C<CPAN.pm>␣repos.

Jim␣Keenan␣fixed␣up␣various␣issues␣with␣_download

=head1␣AUTHOR

brian␣d␣foy,␣C<<␣<bdfoy@cpan.org>␣>>

=head1␣COPYRIGHT

Copyright␣(c)␣2001-2018,␣brian␣d␣foy,␣All␣Rights␣Reserved.

You␣may␣redistribute␣this␣under␣the␣same␣terms␣as␣Perl␣itself.

=cut
----------
Range: (7256743,7273709) (16966)
=head1␣NAME

feature␣-␣Perl␣pragma␣to␣enable␣new␣features

=head1␣SYNOPSIS

␣␣␣␣use␣feature␣qw(fc␣say);

␣␣␣␣#␣Without␣the␣"use␣feature"␣above,␣this␣code␣would␣not␣be␣able␣to␣find
␣␣␣␣#␣the␣built-ins␣"say"␣or␣"fc":
␣␣␣␣say␣"The␣case-folded␣version␣of␣$x␣is:␣"␣.␣fc␣$x;


␣␣␣␣#␣set␣features␣to␣match␣the␣:5.10␣bundle,␣which␣may␣turn␣off␣or␣on
␣␣␣␣#␣multiple␣features␣(see␣below)
␣␣␣␣use␣feature␣':5.10';


␣␣␣␣#␣implicitly␣loads␣:5.10␣feature␣bundle
␣␣␣␣use␣v5.10;

=head1␣DESCRIPTION

It␣is␣usually␣impossible␣to␣add␣new␣syntax␣to␣Perl␣without␣breaking
some␣existing␣programs.␣␣This␣pragma␣provides␣a␣way␣to␣minimize␣that
risk.␣New␣syntactic␣constructs,␣or␣new␣semantic␣meanings␣to␣older
constructs,␣can␣be␣enabled␣by␣C<use␣feature␣'foo'>,␣and␣will␣be␣parsed
only␣when␣the␣appropriate␣feature␣pragma␣is␣in␣scope.␣␣(Nevertheless,␣the
C<CORE::>␣prefix␣provides␣access␣to␣all␣Perl␣keywords,␣regardless␣of␣this
pragma.)

=head2␣Lexical␣effect

Like␣other␣pragmas␣(C<use␣strict>,␣for␣example),␣features␣have␣a␣lexical
effect.␣␣C<use␣feature␣qw(foo)>␣will␣only␣make␣the␣feature␣"foo"␣available
from␣that␣point␣to␣the␣end␣of␣the␣enclosing␣block.

␣␣␣␣{
␣␣␣␣␣␣␣␣use␣feature␣'say';
␣␣␣␣␣␣␣␣say␣"say␣is␣available␣here";
␣␣␣␣}
␣␣␣␣print␣"But␣not␣here.\n";

=head2␣C<no␣feature>

Features␣can␣also␣be␣turned␣off␣by␣using␣C<no␣feature␣"foo">.␣␣This␣too
has␣lexical␣effect.

␣␣␣␣use␣feature␣'say';
␣␣␣␣say␣"say␣is␣available␣here";
␣␣␣␣{
␣␣␣␣␣␣␣␣no␣feature␣'say';
␣␣␣␣␣␣␣␣print␣"But␣not␣here.\n";
␣␣␣␣}
␣␣␣␣say␣"Yet␣it␣is␣here.";

C<no␣feature>␣with␣no␣features␣specified␣will␣reset␣to␣the␣default␣group.␣␣To
disable␣I<all>␣features␣(an␣unusual␣request!)␣use␣C<no␣feature␣':all'>.

=head1␣AVAILABLE␣FEATURES

=head2␣The␣'say'␣feature

C<use␣feature␣'say'>␣tells␣the␣compiler␣to␣enable␣the␣Raku-inspired
C<say>␣function.

See␣L<perlfunc/say>␣for␣details.

This␣feature␣is␣available␣starting␣with␣Perl␣5.10.

=head2␣The␣'state'␣feature

C<use␣feature␣'state'>␣tells␣the␣compiler␣to␣enable␣C<state>
variables.

See␣L<perlsub/"Persistent␣Private␣Variables">␣for␣details.

This␣feature␣is␣available␣starting␣with␣Perl␣5.10.

=head2␣The␣'switch'␣feature

B<WARNING>:␣This␣feature␣is␣still␣experimental␣and␣the␣implementation␣may
change␣or␣be␣removed␣in␣future␣versions␣of␣Perl.␣␣For␣this␣reason,␣Perl␣will
warn␣when␣you␣use␣the␣feature,␣unless␣you␣have␣explicitly␣disabled␣the␣warning:

␣␣␣␣no␣warnings␣"experimental::smartmatch";

C<use␣feature␣'switch'>␣tells␣the␣compiler␣to␣enable␣the␣Raku
given/when␣construct.

See␣L<perlsyn/"Switch␣Statements">␣for␣details.

This␣feature␣is␣available␣starting␣with␣Perl␣5.10.

=head2␣The␣'unicode_strings'␣feature

C<use␣feature␣'unicode_strings'>␣tells␣the␣compiler␣to␣use␣Unicode␣rules
in␣all␣string␣operations␣executed␣within␣its␣scope␣(unless␣they␣are␣also
within␣the␣scope␣of␣either␣C<use␣locale>␣or␣C<use␣bytes>).␣␣The␣same␣applies
to␣all␣regular␣expressions␣compiled␣within␣the␣scope,␣even␣if␣executed␣outside
it.␣␣It␣does␣not␣change␣the␣internal␣representation␣of␣strings,␣but␣only␣how
they␣are␣interpreted.

C<no␣feature␣'unicode_strings'>␣tells␣the␣compiler␣to␣use␣the␣traditional
Perl␣rules␣wherein␣the␣native␣character␣set␣rules␣is␣used␣unless␣it␣is
clear␣to␣Perl␣that␣Unicode␣is␣desired.␣␣This␣can␣lead␣to␣some␣surprises
when␣the␣behavior␣suddenly␣changes.␣␣(See
L<perlunicode/The␣"Unicode␣Bug">␣for␣details.)␣␣For␣this␣reason,␣if␣you␣are
potentially␣using␣Unicode␣in␣your␣program,␣the
C<use␣feature␣'unicode_strings'>␣subpragma␣is␣B<strongly>␣recommended.

This␣feature␣is␣available␣starting␣with␣Perl␣5.12;␣was␣almost␣fully
implemented␣in␣Perl␣5.14;␣and␣extended␣in␣Perl␣5.16␣to␣cover␣C<quotemeta>;
was␣extended␣further␣in␣Perl␣5.26␣to␣cover␣L<the␣range
operator|perlop/Range␣Operators>;␣and␣was␣extended␣again␣in␣Perl␣5.28␣to
cover␣L<special-cased␣whitespace␣splitting|perlfunc/split>.

=head2␣The␣'unicode_eval'␣and␣'evalbytes'␣features

Together,␣these␣two␣features␣are␣intended␣to␣replace␣the␣legacy␣string
C<eval>␣function,␣which␣behaves␣problematically␣in␣some␣instances.␣␣They␣are
available␣starting␣with␣Perl␣5.16,␣and␣are␣enabled␣by␣default␣by␣a
S<C<use␣5.16>>␣or␣higher␣declaration.

C<unicode_eval>␣changes␣the␣behavior␣of␣plain␣string␣C<eval>␣to␣work␣more
consistently,␣especially␣in␣the␣Unicode␣world.␣␣Certain␣(mis)behaviors
couldn't␣be␣changed␣without␣breaking␣some␣things␣that␣had␣come␣to␣rely␣on
them,␣so␣the␣feature␣can␣be␣enabled␣and␣disabled.␣␣Details␣are␣at
L<perlfunc/Under␣the␣"unicode_eval"␣feature>.

C<evalbytes>␣is␣like␣string␣C<eval>,␣but␣operating␣on␣a␣byte␣stream␣that␣is
not␣UTF-8␣encoded.␣␣Details␣are␣at␣L<perlfunc/evalbytes␣EXPR>.␣␣Without␣a
S<C<use␣feature␣'evalbytes'>>␣nor␣a␣S<C<use␣v5.16>>␣(or␣higher)␣declaration␣in
the␣current␣scope,␣you␣can␣still␣access␣it␣by␣instead␣writing
C<CORE::evalbytes>.

=head2␣The␣'current_sub'␣feature

This␣provides␣the␣C<__SUB__>␣token␣that␣returns␣a␣reference␣to␣the␣current
subroutine␣or␣C<undef>␣outside␣of␣a␣subroutine.

This␣feature␣is␣available␣starting␣with␣Perl␣5.16.

=head2␣The␣'array_base'␣feature

This␣feature␣supported␣the␣legacy␣C<$[>␣variable.␣␣See␣L<perlvar/$[>.
It␣was␣on␣by␣default␣but␣disabled␣under␣C<use␣v5.16>␣(see
L</IMPLICIT␣LOADING>,␣below)␣and␣unavailable␣since␣perl␣5.30.

This␣feature␣is␣available␣under␣this␣name␣starting␣with␣Perl␣5.16.␣␣In
previous␣versions,␣it␣was␣simply␣on␣all␣the␣time,␣and␣this␣pragma␣knew
nothing␣about␣it.

=head2␣The␣'fc'␣feature

C<use␣feature␣'fc'>␣tells␣the␣compiler␣to␣enable␣the␣C<fc>␣function,
which␣implements␣Unicode␣casefolding.

See␣L<perlfunc/fc>␣for␣details.

This␣feature␣is␣available␣from␣Perl␣5.16␣onwards.

=head2␣The␣'lexical_subs'␣feature

In␣Perl␣versions␣prior␣to␣5.26,␣this␣feature␣enabled
declaration␣of␣subroutines␣via␣C<my␣sub␣foo>,␣C<state␣sub␣foo>
and␣C<our␣sub␣foo>␣syntax.␣␣See␣L<perlsub/Lexical␣Subroutines>␣for␣details.

This␣feature␣is␣available␣from␣Perl␣5.18␣onwards.␣␣From␣Perl␣5.18␣to␣5.24,
it␣was␣classed␣as␣experimental,␣and␣Perl␣emitted␣a␣warning␣for␣its
usage,␣except␣when␣explicitly␣disabled:

␣␣no␣warnings␣"experimental::lexical_subs";

As␣of␣Perl␣5.26,␣use␣of␣this␣feature␣no␣longer␣triggers␣a␣warning,␣though
the␣C<experimental::lexical_subs>␣warning␣category␣still␣exists␣(for
compatibility␣with␣code␣that␣disables␣it).␣␣In␣addition,␣this␣syntax␣is
not␣only␣no␣longer␣experimental,␣but␣it␣is␣enabled␣for␣all␣Perl␣code,
regardless␣of␣what␣feature␣declarations␣are␣in␣scope.

=head2␣The␣'postderef'␣and␣'postderef_qq'␣features

The␣'postderef_qq'␣feature␣extends␣the␣applicability␣of␣L<postfix
dereference␣syntax|perlref/Postfix␣Dereference␣Syntax>␣so␣that␣postfix␣array
and␣scalar␣dereference␣are␣available␣in␣double-quotish␣interpolations.␣For
example,␣it␣makes␣the␣following␣two␣statements␣equivalent:

␣␣my␣$s␣=␣"[@{␣$h->{a}␣}]";
␣␣my␣$s␣=␣"[$h->{a}->@*]";

This␣feature␣is␣available␣from␣Perl␣5.20␣onwards.␣In␣Perl␣5.20␣and␣5.22,␣it
was␣classed␣as␣experimental,␣and␣Perl␣emitted␣a␣warning␣for␣its
usage,␣except␣when␣explicitly␣disabled:

␣␣no␣warnings␣"experimental::postderef";

As␣of␣Perl␣5.24,␣use␣of␣this␣feature␣no␣longer␣triggers␣a␣warning,␣though
the␣C<experimental::postderef>␣warning␣category␣still␣exists␣(for
compatibility␣with␣code␣that␣disables␣it).

The␣'postderef'␣feature␣was␣used␣in␣Perl␣5.20␣and␣Perl␣5.22␣to␣enable
postfix␣dereference␣syntax␣outside␣double-quotish␣interpolations.␣In␣those
versions,␣using␣it␣triggered␣the␣C<experimental::postderef>␣warning␣in␣the
same␣way␣as␣the␣'postderef_qq'␣feature␣did.␣As␣of␣Perl␣5.24,␣this␣syntax␣is
not␣only␣no␣longer␣experimental,␣but␣it␣is␣enabled␣for␣all␣Perl␣code,
regardless␣of␣what␣feature␣declarations␣are␣in␣scope.

=head2␣The␣'signatures'␣feature

B<WARNING>:␣This␣feature␣is␣still␣experimental␣and␣the␣implementation␣may
change␣or␣be␣removed␣in␣future␣versions␣of␣Perl.␣␣For␣this␣reason,␣Perl␣will
warn␣when␣you␣use␣the␣feature,␣unless␣you␣have␣explicitly␣disabled␣the␣warning:

␣␣␣␣no␣warnings␣"experimental::signatures";

This␣enables␣unpacking␣of␣subroutine␣arguments␣into␣lexical␣variables
by␣syntax␣such␣as

␣␣␣␣sub␣foo␣($left,␣$right)␣{
	return␣$left␣+␣$right;
␣␣␣␣}

See␣L<perlsub/Signatures>␣for␣details.

This␣feature␣is␣available␣from␣Perl␣5.20␣onwards.

=head2␣The␣'refaliasing'␣feature

B<WARNING>:␣This␣feature␣is␣still␣experimental␣and␣the␣implementation␣may
change␣or␣be␣removed␣in␣future␣versions␣of␣Perl.␣␣For␣this␣reason,␣Perl␣will
warn␣when␣you␣use␣the␣feature,␣unless␣you␣have␣explicitly␣disabled␣the␣warning:

␣␣␣␣no␣warnings␣"experimental::refaliasing";

This␣enables␣aliasing␣via␣assignment␣to␣references:

␣␣␣␣\$a␣=␣\$b;␣#␣$a␣and␣$b␣now␣point␣to␣the␣same␣scalar
␣␣␣␣\@a␣=␣\@b;␣#␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣to␣the␣same␣array
␣␣␣␣\%a␣=␣\%b;
␣␣␣␣\&a␣=␣\&b;
␣␣␣␣foreach␣\%hash␣(@array_of_hash_refs)␣{
␣␣␣␣␣␣␣␣...
␣␣␣␣}

See␣L<perlref/Assigning␣to␣References>␣for␣details.

This␣feature␣is␣available␣from␣Perl␣5.22␣onwards.

=head2␣The␣'bitwise'␣feature

This␣makes␣the␣four␣standard␣bitwise␣operators␣(C<&␣|␣^␣~>)␣treat␣their
operands␣consistently␣as␣numbers,␣and␣introduces␣four␣new␣dotted␣operators
(C<&.␣|.␣^.␣~.>)␣that␣treat␣their␣operands␣consistently␣as␣strings.␣␣The
same␣applies␣to␣the␣assignment␣variants␣(C<&=␣|=␣^=␣&.=␣|.=␣^.=>).

See␣L<perlop/Bitwise␣String␣Operators>␣for␣details.

This␣feature␣is␣available␣from␣Perl␣5.22␣onwards.␣␣Starting␣in␣Perl␣5.28,
C<use␣v5.28>␣will␣enable␣the␣feature.␣␣Before␣5.28,␣it␣was␣still
experimental␣and␣would␣emit␣a␣warning␣in␣the␣"experimental::bitwise"
category.

=head2␣The␣'declared_refs'␣feature

B<WARNING>:␣This␣feature␣is␣still␣experimental␣and␣the␣implementation␣may
change␣or␣be␣removed␣in␣future␣versions␣of␣Perl.␣␣For␣this␣reason,␣Perl␣will
warn␣when␣you␣use␣the␣feature,␣unless␣you␣have␣explicitly␣disabled␣the␣warning:

␣␣␣␣no␣warnings␣"experimental::declared_refs";

This␣allows␣a␣reference␣to␣a␣variable␣to␣be␣declared␣with␣C<my>,␣C<state>,
our␣C<our>,␣or␣localized␣with␣C<local>.␣␣It␣is␣intended␣mainly␣for␣use␣in
conjunction␣with␣the␣"refaliasing"␣feature.␣␣See␣L<perlref/Declaring␣a
Reference␣to␣a␣Variable>␣for␣examples.

This␣feature␣is␣available␣from␣Perl␣5.26␣onwards.

=head2␣The␣'isa'␣feature

B<WARNING>:␣This␣feature␣is␣still␣experimental␣and␣the␣implementation␣may
change␣or␣be␣removed␣in␣future␣versions␣of␣Perl.␣␣For␣this␣reason,␣Perl␣will
warn␣when␣you␣use␣the␣feature,␣unless␣you␣have␣explicitly␣disabled␣the␣warning:

␣␣␣␣no␣warnings␣"experimental::isa";

This␣allows␣the␣use␣of␣the␣C<isa>␣infix␣operator,␣which␣tests␣whether␣the
scalar␣given␣by␣the␣left␣operand␣is␣an␣object␣of␣the␣class␣given␣by␣the
right␣operand.␣See␣L<perlop/Class␣Instance␣Operator>␣for␣more␣details.

This␣feature␣is␣available␣from␣Perl␣5.32␣onwards.

=head2␣The␣'indirect'␣feature

This␣feature␣allows␣the␣use␣of␣L<indirect␣object
syntax|perlobj/Indirect␣Object␣Syntax>␣for␣method␣calls,␣e.g.␣␣C<new
Foo␣1,␣2;>.␣It␣is␣enabled␣by␣default,␣but␣can␣be␣turned␣off␣to
disallow␣indirect␣object␣syntax.

This␣feature␣is␣available␣under␣this␣name␣from␣Perl␣5.32␣onwards.␣In
previous␣versions,␣it␣was␣simply␣on␣all␣the␣time.␣␣To␣disallow␣(or
warn␣on)␣indirect␣object␣syntax␣on␣older␣Perls,␣see␣the␣L<indirect>
CPAN␣module.

=head2␣The␣'multidimensional'␣feature

This␣feature␣enables␣multidimensional␣array␣emulation,␣a␣perl␣4␣(or
earlier)␣feature␣that␣was␣used␣to␣emulate␣multidimensional␣arrays␣with
hashes.␣␣This␣works␣by␣converting␣code␣like␣C<<␣$foo{$x,␣$y}␣>>␣into
C<<␣$foo{join($;,␣$x,␣$y)}␣>>.␣␣It␣is␣enabled␣by␣default,␣but␣can␣be
turned␣off␣to␣disable␣multidimensional␣array␣emulation.

When␣this␣feature␣is␣disabled␣the␣syntax␣that␣is␣normally␣replaced
will␣report␣a␣compilation␣error.

This␣feature␣is␣available␣under␣this␣name␣from␣Perl␣5.34␣onwards.␣In
previous␣versions,␣it␣was␣simply␣on␣all␣the␣time.

You␣can␣use␣the␣L<multidimensional>␣module␣on␣CPAN␣to␣disable
multidimensional␣array␣emulation␣for␣older␣versions␣of␣Perl.

=head2␣The␣'bareword_filehandles'␣feature.

This␣feature␣enables␣bareword␣filehandles␣for␣builtin␣functions
operations,␣a␣generally␣discouraged␣practice.␣␣It␣is␣enabled␣by
default,␣but␣can␣be␣turned␣off␣to␣disable␣bareword␣filehandles,␣except
for␣the␣exceptions␣listed␣below.

The␣perl␣built-in␣filehandles␣C<STDIN>,␣C<STDOUT>,␣C<STDERR>,␣C<DATA>,
C<ARGV>,␣C<ARGVOUT>␣and␣the␣special␣C<_>␣are␣always␣enabled.

This␣feature␣is␣enabled␣under␣this␣name␣from␣Perl␣5.34␣onwards.␣␣In
previous␣versions␣it␣was␣simply␣on␣all␣the␣time.

You␣can␣use␣the␣L<bareword::filehandles>␣module␣on␣CPAN␣to␣disable
bareword␣filehandles␣for␣older␣versions␣of␣perl.

=head2␣The␣'try'␣feature.

B<WARNING>:␣This␣feature␣is␣still␣experimental␣and␣the␣implementation␣may
change␣or␣be␣removed␣in␣future␣versions␣of␣Perl.␣␣For␣this␣reason,␣Perl␣will
warn␣when␣you␣use␣the␣feature,␣unless␣you␣have␣explicitly␣disabled␣the␣warning:

␣␣␣␣no␣warnings␣"experimental::try";

This␣feature␣enables␣the␣C<try>␣and␣C<catch>␣syntax,␣which␣allows␣exception
handling,␣where␣exceptions␣thrown␣from␣the␣body␣of␣the␣block␣introduced␣with
C<try>␣are␣caught␣by␣executing␣the␣body␣of␣the␣C<catch>␣block.

For␣more␣information,␣see␣L<perlsyn/"Try␣Catch␣Exception␣Handling">.

=head1␣FEATURE␣BUNDLES

It's␣possible␣to␣load␣multiple␣features␣together,␣using
a␣I<feature␣bundle>.␣␣The␣name␣of␣a␣feature␣bundle␣is␣prefixed␣with
a␣colon,␣to␣distinguish␣it␣from␣an␣actual␣feature.

␣␣use␣feature␣":5.10";

The␣following␣feature␣bundles␣are␣available:

␣␣bundle␣␣␣␣features␣included
␣␣---------␣-----------------
␣␣:default␣␣indirect␣multidimensional
␣␣␣␣␣␣␣␣␣␣␣␣bareword_filehandles

␣␣:5.10␣␣␣␣␣bareword_filehandles␣indirect
␣␣␣␣␣␣␣␣␣␣␣␣multidimensional␣say␣state␣switch

␣␣:5.12␣␣␣␣␣bareword_filehandles␣indirect
␣␣␣␣␣␣␣␣␣␣␣␣multidimensional␣say␣state␣switch
␣␣␣␣␣␣␣␣␣␣␣␣unicode_strings

␣␣:5.14␣␣␣␣␣bareword_filehandles␣indirect
␣␣␣␣␣␣␣␣␣␣␣␣multidimensional␣say␣state␣switch
␣␣␣␣␣␣␣␣␣␣␣␣unicode_strings

␣␣:5.16␣␣␣␣␣bareword_filehandles␣current_sub␣evalbytes
␣␣␣␣␣␣␣␣␣␣␣␣fc␣indirect␣multidimensional␣say␣state
␣␣␣␣␣␣␣␣␣␣␣␣switch␣unicode_eval␣unicode_strings

␣␣:5.18␣␣␣␣␣bareword_filehandles␣current_sub␣evalbytes
␣␣␣␣␣␣␣␣␣␣␣␣fc␣indirect␣multidimensional␣say␣state
␣␣␣␣␣␣␣␣␣␣␣␣switch␣unicode_eval␣unicode_strings

␣␣:5.20␣␣␣␣␣bareword_filehandles␣current_sub␣evalbytes
␣␣␣␣␣␣␣␣␣␣␣␣fc␣indirect␣multidimensional␣say␣state
␣␣␣␣␣␣␣␣␣␣␣␣switch␣unicode_eval␣unicode_strings

␣␣:5.22␣␣␣␣␣bareword_filehandles␣current_sub␣evalbytes
␣␣␣␣␣␣␣␣␣␣␣␣fc␣indirect␣multidimensional␣say␣state
␣␣␣␣␣␣␣␣␣␣␣␣switch␣unicode_eval␣unicode_strings

␣␣:5.24␣␣␣␣␣bareword_filehandles␣current_sub␣evalbytes
␣␣␣␣␣␣␣␣␣␣␣␣fc␣indirect␣multidimensional␣postderef_qq
␣␣␣␣␣␣␣␣␣␣␣␣say␣state␣switch␣unicode_eval
␣␣␣␣␣␣␣␣␣␣␣␣unicode_strings

␣␣:5.26␣␣␣␣␣bareword_filehandles␣current_sub␣evalbytes
␣␣␣␣␣␣␣␣␣␣␣␣fc␣indirect␣multidimensional␣postderef_qq
␣␣␣␣␣␣␣␣␣␣␣␣say␣state␣switch␣unicode_eval
␣␣␣␣␣␣␣␣␣␣␣␣unicode_strings

␣␣:5.28␣␣␣␣␣bareword_filehandles␣bitwise␣current_sub
␣␣␣␣␣␣␣␣␣␣␣␣evalbytes␣fc␣indirect␣multidimensional
␣␣␣␣␣␣␣␣␣␣␣␣postderef_qq␣say␣state␣switch␣unicode_eval
␣␣␣␣␣␣␣␣␣␣␣␣unicode_strings

␣␣:5.30␣␣␣␣␣bareword_filehandles␣bitwise␣current_sub
␣␣␣␣␣␣␣␣␣␣␣␣evalbytes␣fc␣indirect␣multidimensional
␣␣␣␣␣␣␣␣␣␣␣␣postderef_qq␣say␣state␣switch␣unicode_eval
␣␣␣␣␣␣␣␣␣␣␣␣unicode_strings

␣␣:5.32␣␣␣␣␣bareword_filehandles␣bitwise␣current_sub
␣␣␣␣␣␣␣␣␣␣␣␣evalbytes␣fc␣indirect␣multidimensional
␣␣␣␣␣␣␣␣␣␣␣␣postderef_qq␣say␣state␣switch␣unicode_eval
␣␣␣␣␣␣␣␣␣␣␣␣unicode_strings

␣␣:5.34␣␣␣␣␣bareword_filehandles␣bitwise␣current_sub
␣␣␣␣␣␣␣␣␣␣␣␣evalbytes␣fc␣indirect␣multidimensional
␣␣␣␣␣␣␣␣␣␣␣␣postderef_qq␣say␣state␣switch␣unicode_eval
␣␣␣␣␣␣␣␣␣␣␣␣unicode_strings

The␣C<:default>␣bundle␣represents␣the␣feature␣set␣that␣is␣enabled␣before
any␣C<use␣feature>␣or␣C<no␣feature>␣declaration.

Specifying␣sub-versions␣such␣as␣the␣C<0>␣in␣C<5.14.0>␣in␣feature␣bundles␣has
no␣effect.␣␣Feature␣bundles␣are␣guaranteed␣to␣be␣the␣same␣for␣all␣sub-versions.

␣␣use␣feature␣":5.14.0";␣␣␣␣#␣same␣as␣":5.14"
␣␣use␣feature␣":5.14.1";␣␣␣␣#␣same␣as␣":5.14"

=head1␣IMPLICIT␣LOADING

Instead␣of␣loading␣feature␣bundles␣by␣name,␣it␣is␣easier␣to␣let␣Perl␣do
implicit␣loading␣of␣a␣feature␣bundle␣for␣you.

There␣are␣two␣ways␣to␣load␣the␣C<feature>␣pragma␣implicitly:

=over␣4

=item␣*

By␣using␣the␣C<-E>␣switch␣on␣the␣Perl␣command-line␣instead␣of␣C<-e>.
That␣will␣enable␣the␣feature␣bundle␣for␣that␣version␣of␣Perl␣in␣the
main␣compilation␣unit␣(that␣is,␣the␣one-liner␣that␣follows␣C<-E>).

=item␣*

By␣explicitly␣requiring␣a␣minimum␣Perl␣version␣number␣for␣your␣program,␣with
the␣C<use␣VERSION>␣construct.␣␣That␣is,

␣␣␣␣use␣v5.10.0;

will␣do␣an␣implicit

␣␣␣␣no␣feature␣':all';
␣␣␣␣use␣feature␣':5.10';

and␣so␣on.␣␣Note␣how␣the␣trailing␣sub-version
is␣automatically␣stripped␣from␣the
version.

But␣to␣avoid␣portability␣warnings␣(see␣L<perlfunc/use>),␣you␣may␣prefer:

␣␣␣␣use␣5.010;

with␣the␣same␣effect.

If␣the␣required␣version␣is␣older␣than␣Perl␣5.10,␣the␣":default"␣feature
bundle␣is␣automatically␣loaded␣instead.

Unlike␣C<use␣feature␣":5.12">,␣saying␣C<use␣v5.12>␣(or␣any␣higher␣version)
also␣does␣the␣equivalent␣of␣C<use␣strict>;␣see␣L<perlfunc/use>␣for␣details.

=back

=cut
----------
Range: (7275834,7281746) (5912)
=head1␣NAME

diagnostics,␣splain␣-␣produce␣verbose␣warning␣diagnostics

=head1␣SYNOPSIS

Using␣the␣C<diagnostics>␣pragma:

␣␣␣␣use␣diagnostics;
␣␣␣␣use␣diagnostics␣-verbose;

␣␣␣␣enable␣␣diagnostics;
␣␣␣␣disable␣diagnostics;

Using␣the␣C<splain>␣standalone␣filter␣program:

␣␣␣␣perl␣program␣2>diag.out
␣␣␣␣splain␣[-v]␣[-p]␣diag.out

Using␣diagnostics␣to␣get␣stack␣traces␣from␣a␣misbehaving␣script:

␣␣␣␣perl␣-Mdiagnostics=-traceonly␣my_script.pl

=head1␣DESCRIPTION

=head2␣The␣C<diagnostics>␣Pragma

This␣module␣extends␣the␣terse␣diagnostics␣normally␣emitted␣by␣both␣the
perl␣compiler␣and␣the␣perl␣interpreter␣(from␣running␣perl␣with␣a␣-w␣
switch␣or␣C<use␣warnings>),␣augmenting␣them␣with␣the␣more
explicative␣and␣endearing␣descriptions␣found␣in␣L<perldiag>.␣␣Like␣the
other␣pragmata,␣it␣affects␣the␣compilation␣phase␣of␣your␣program␣rather
than␣merely␣the␣execution␣phase.

To␣use␣in␣your␣program␣as␣a␣pragma,␣merely␣invoke

␣␣␣␣use␣diagnostics;

at␣the␣start␣(or␣near␣the␣start)␣of␣your␣program.␣␣(Note␣
that␣this␣I<does>␣enable␣perl's␣B<-w>␣flag.)␣␣Your␣whole
compilation␣will␣then␣be␣subject(ed␣:-)␣to␣the␣enhanced␣diagnostics.
These␣still␣go␣out␣B<STDERR>.

Due␣to␣the␣interaction␣between␣runtime␣and␣compiletime␣issues,
and␣because␣it's␣probably␣not␣a␣very␣good␣idea␣anyway,
you␣may␣not␣use␣C<no␣diagnostics>␣to␣turn␣them␣off␣at␣compiletime.
However,␣you␣may␣control␣their␣behaviour␣at␣runtime␣using␣the␣
disable()␣and␣enable()␣methods␣to␣turn␣them␣off␣and␣on␣respectively.

The␣B<-verbose>␣flag␣first␣prints␣out␣the␣L<perldiag>␣introduction␣before
any␣other␣diagnostics.␣␣The␣$diagnostics::PRETTY␣variable␣can␣generate␣nicer
escape␣sequences␣for␣pagers.

Warnings␣dispatched␣from␣perl␣itself␣(or␣more␣accurately,␣those␣that␣match
descriptions␣found␣in␣L<perldiag>)␣are␣only␣displayed␣once␣(no␣duplicate
descriptions).␣␣User␣code␣generated␣warnings␣a␣la␣warn()␣are␣unaffected,
allowing␣duplicate␣user␣messages␣to␣be␣displayed.

This␣module␣also␣adds␣a␣stack␣trace␣to␣the␣error␣message␣when␣perl␣dies.
This␣is␣useful␣for␣pinpointing␣what
caused␣the␣death.␣␣The␣B<-traceonly>␣(or
just␣B<-t>)␣flag␣turns␣off␣the␣explanations␣of␣warning␣messages␣leaving␣just
the␣stack␣traces.␣␣So␣if␣your␣script␣is␣dieing,␣run␣it␣again␣with

␣␣perl␣-Mdiagnostics=-traceonly␣my_bad_script

to␣see␣the␣call␣stack␣at␣the␣time␣of␣death.␣␣By␣supplying␣the␣B<-warntrace>
(or␣just␣B<-w>)␣flag,␣any␣warnings␣emitted␣will␣also␣come␣with␣a␣stack
trace.

=head2␣The␣I<splain>␣Program

While␣apparently␣a␣whole␣nuther␣program,␣I<splain>␣is␣actually␣nothing
more␣than␣a␣link␣to␣the␣(executable)␣F<diagnostics.pm>␣module,␣as␣well␣as
a␣link␣to␣the␣F<diagnostics.pod>␣documentation.␣␣The␣B<-v>␣flag␣is␣like
the␣C<use␣diagnostics␣-verbose>␣directive.
The␣B<-p>␣flag␣is␣like␣the
$diagnostics::PRETTY␣variable.␣␣Since␣you're␣post-processing␣with␣
I<splain>,␣there's␣no␣sense␣in␣being␣able␣to␣enable()␣or␣disable()␣processing.

Output␣from␣I<splain>␣is␣directed␣to␣B<STDOUT>,␣unlike␣the␣pragma.

=head1␣EXAMPLES

The␣following␣file␣is␣certain␣to␣trigger␣a␣few␣errors␣at␣both
runtime␣and␣compiletime:

␣␣␣␣use␣diagnostics;
␣␣␣␣print␣NOWHERE␣"nothing\n";
␣␣␣␣print␣STDERR␣"\n\tThis␣message␣should␣be␣unadorned.\n";
␣␣␣␣warn␣"\tThis␣is␣a␣user␣warning";
␣␣␣␣print␣"\nDIAGNOSTIC␣TESTER:␣Please␣enter␣a␣<CR>␣here:␣";
␣␣␣␣my␣$a,␣$b␣=␣scalar␣<STDIN>;
␣␣␣␣print␣"\n";
␣␣␣␣print␣$x/$y;

If␣you␣prefer␣to␣run␣your␣program␣first␣and␣look␣at␣its␣problem
afterwards,␣do␣this:

␣␣␣␣perl␣-w␣test.pl␣2>test.out
␣␣␣␣./splain␣<␣test.out

Note␣that␣this␣is␣not␣in␣general␣possible␣in␣shells␣of␣more␣dubious␣heritage,␣
as␣the␣theoretical␣

␣␣␣␣(perl␣-w␣test.pl␣>/dev/tty)␣>&␣test.out
␣␣␣␣./splain␣<␣test.out

Because␣you␣just␣moved␣the␣existing␣B<stdout>␣to␣somewhere␣else.

If␣you␣don't␣want␣to␣modify␣your␣source␣code,␣but␣still␣have␣on-the-fly
warnings,␣do␣this:

␣␣␣␣exec␣3>&1;␣perl␣-w␣test.pl␣2>&1␣1>&3␣3>&-␣|␣splain␣1>&2␣3>&-␣

Nifty,␣eh?

If␣you␣want␣to␣control␣warnings␣on␣the␣fly,␣do␣something␣like␣this.
Make␣sure␣you␣do␣the␣C<use>␣first,␣or␣you␣won't␣be␣able␣to␣get
at␣the␣enable()␣or␣disable()␣methods.

␣␣␣␣use␣diagnostics;␣#␣checks␣entire␣compilation␣phase␣
	print␣"\ntime␣for␣1st␣bogus␣diags:␣SQUAWKINGS\n";
	print␣BOGUS1␣'nada';
	print␣"done␣with␣1st␣bogus\n";

␣␣␣␣disable␣diagnostics;␣#␣only␣turns␣off␣runtime␣warnings
	print␣"\ntime␣for␣2nd␣bogus:␣(squelched)\n";
	print␣BOGUS2␣'nada';
	print␣"done␣with␣2nd␣bogus\n";

␣␣␣␣enable␣diagnostics;␣#␣turns␣back␣on␣runtime␣warnings
	print␣"\ntime␣for␣3rd␣bogus:␣SQUAWKINGS\n";
	print␣BOGUS3␣'nada';
	print␣"done␣with␣3rd␣bogus\n";

␣␣␣␣disable␣diagnostics;
	print␣"\ntime␣for␣4th␣bogus:␣(squelched)\n";
	print␣BOGUS4␣'nada';
	print␣"done␣with␣4th␣bogus\n";

=head1␣INTERNALS

Diagnostic␣messages␣derive␣from␣the␣F<perldiag.pod>␣file␣when␣available␣at
runtime.␣␣Otherwise,␣they␣may␣be␣embedded␣in␣the␣file␣itself␣when␣the
splain␣package␣is␣built.␣␣␣See␣the␣F<Makefile>␣for␣details.

If␣an␣extant␣$SIG{__WARN__}␣handler␣is␣discovered,␣it␣will␣continue
to␣be␣honored,␣but␣only␣after␣the␣diagnostics::splainthis()␣function␣
(the␣module's␣$SIG{__WARN__}␣interceptor)␣has␣had␣its␣way␣with␣your
warnings.

There␣is␣a␣$diagnostics::DEBUG␣variable␣you␣may␣set␣if␣you're␣desperately
curious␣what␣sorts␣of␣things␣are␣being␣intercepted.

␣␣␣␣BEGIN␣{␣$diagnostics::DEBUG␣=␣1␣}␣


=head1␣BUGS

Not␣being␣able␣to␣say␣"no␣diagnostics"␣is␣annoying,␣but␣may␣not␣be
insurmountable.

The␣C<-pretty>␣directive␣is␣called␣too␣late␣to␣affect␣matters.
You␣have␣to␣do␣this␣instead,␣and␣I<before>␣you␣load␣the␣module.

␣␣␣␣BEGIN␣{␣$diagnostics::PRETTY␣=␣1␣}␣

I␣could␣start␣up␣faster␣by␣delaying␣compilation␣until␣it␣should␣be
needed,␣but␣this␣gets␣a␣"panic:␣top_level"␣when␣using␣the␣pragma␣form
in␣Perl␣5.001e.

While␣it's␣true␣that␣this␣documentation␣is␣somewhat␣subserious,␣if␣you␣use
a␣program␣named␣I<splain>,␣you␣should␣expect␣a␣bit␣of␣whimsy.

=head1␣AUTHOR

Tom␣Christiansen␣<F<tchrist@mox.perl.com>>,␣25␣June␣1995.

=cut
----------
Range: (7326740,7328214) (1474)
}

=back

In␣addition␣to␣the␣six␣exported␣functions␣there␣exists␣one
function␣that␣can␣only␣be␣accessed␣with␣a␣fully␣qualified␣function
call.

=over␣4

=item␣color

When␣C<test_test>␣is␣called␣and␣the␣output␣that␣your␣tests␣generate
does␣not␣match␣that␣which␣you␣declared,␣C<test_test>␣will␣print␣out
debug␣information␣showing␣the␣two␣conflicting␣versions.␣␣As␣this
output␣itself␣is␣debug␣information␣it␣can␣be␣confusing␣which␣part␣of
the␣output␣is␣from␣C<test_test>␣and␣which␣was␣the␣original␣output␣from
your␣original␣tests.␣␣Also,␣it␣may␣be␣hard␣to␣spot␣things␣like
extraneous␣whitespace␣at␣the␣end␣of␣lines␣that␣may␣cause␣your␣test␣to
fail␣even␣though␣the␣output␣looks␣similar.

To␣assist␣you␣C<test_test>␣can␣colour␣the␣background␣of␣the␣debug
information␣to␣disambiguate␣the␣different␣types␣of␣output.␣The␣debug
output␣will␣have␣its␣background␣coloured␣green␣and␣red.␣␣The␣green
part␣represents␣the␣text␣which␣is␣the␣same␣between␣the␣executed␣and
actual␣output,␣the␣red␣shows␣which␣part␣differs.

The␣C<color>␣function␣determines␣if␣colouring␣should␣occur␣or␣not.
Passing␣it␣a␣true␣or␣false␣value␣will␣enable␣or␣disable␣colouring
respectively,␣and␣the␣function␣called␣with␣no␣argument␣will␣return␣the
current␣setting.

To␣enable␣colouring␣from␣the␣command␣line,␣you␣can␣use␣the
L<Text::Builder::Tester::Color>␣module␣like␣so:

␣␣␣perl␣-Mlib=Text::Builder::Tester::Color␣test.t

Or␣by␣including␣the␣L<Test::Builder::Tester::Color>␣module␣directly␣in
the␣PERL5LIB.

=cut
----------
Range: (7328278,7330075) (1797)
}

=back

=head1␣BUGS

Test::Builder::Tester␣does␣not␣handle␣plans␣well.␣It␣has␣never␣done␣anything
special␣with␣plans.␣This␣means␣that␣plans␣from␣outside␣Test::Builder::Tester
will␣effect␣Test::Builder::Tester,␣worse␣plans␣when␣using␣Test::Builder::Tester
will␣effect␣overall␣testing.␣At␣this␣point␣there␣are␣no␣plans␣to␣fix␣this␣bug
as␣people␣have␣come␣to␣depend␣on␣it,␣and␣Test::Builder::Tester␣is␣now
discouraged␣in␣favor␣of␣C<Test2::API::intercept()>.␣See
L<https://github.com/Test-More/test-more/issues/667>

Calls␣C<<␣Test::Builder->no_ending␣>>␣turning␣off␣the␣ending␣tests.
This␣is␣needed␣as␣otherwise␣it␣will␣trip␣out␣because␣we've␣run␣more
tests␣than␣we␣strictly␣should␣have␣and␣it'll␣register␣any␣failures␣we
had␣that␣we␣were␣testing␣for␣as␣real␣failures.

The␣color␣function␣doesn't␣work␣unless␣L<Term::ANSIColor>␣is
compatible␣with␣your␣terminal.␣Additionally,␣L<Win32::Console::ANSI>
must␣be␣installed␣on␣windows␣platforms␣for␣color␣output.

Bugs␣(and␣requests␣for␣new␣features)␣can␣be␣reported␣to␣the␣author
though␣GitHub:
L<https://github.com/Test-More/test-more/issues>

=head1␣AUTHOR

Copyright␣Mark␣Fowler␣E<lt>mark@twoshortplanks.comE<gt>␣2002,␣2004.

Some␣code␣taken␣from␣L<Test::More>␣and␣L<Test::Catch>,␣written␣by
Michael␣G␣Schwern␣E<lt>schwern@pobox.comE<gt>.␣␣Hence,␣those␣parts
Copyright␣Micheal␣G␣Schwern␣2001.␣␣Used␣and␣distributed␣with
permission.

This␣program␣is␣free␣software;␣you␣can␣redistribute␣it
and/or␣modify␣it␣under␣the␣same␣terms␣as␣Perl␣itself.

=head1␣MAINTAINERS

=over␣4

=item␣Chad␣Granum␣E<lt>exodist@cpan.orgE<gt>

=back

=head1␣NOTES

Thanks␣to␣Richard␣Clamp␣E<lt>richardc@unixbeard.netE<gt>␣for␣letting
me␣use␣his␣testing␣system␣to␣try␣this␣module␣out␣on.

=head1␣SEE␣ALSO

L<Test::Builder>,␣L<Test::Builder::Tester::Color>,␣L<Test::More>.

=cut
----------
Range: (7334638,7336191) (1553)
=head1␣NAME

Test::Builder::Module␣-␣Base␣class␣for␣test␣modules

=head1␣SYNOPSIS

␣␣#␣Emulates␣Test::Simple
␣␣package␣Your::Module;

␣␣my␣$CLASS␣=␣__PACKAGE__;

␣␣use␣parent␣'Test::Builder::Module';
␣␣@EXPORT␣=␣qw(ok);

␣␣sub␣ok␣($;$)␣{
␣␣␣␣␣␣my␣$tb␣=␣$CLASS->builder;
␣␣␣␣␣␣return␣$tb->ok(@_);
␣␣}
␣␣
␣␣1;


=head1␣DESCRIPTION

This␣is␣a␣superclass␣for␣L<Test::Builder>-based␣modules.␣␣It␣provides␣a
handful␣of␣common␣functionality␣and␣a␣method␣of␣getting␣at␣the␣underlying
L<Test::Builder>␣object.


=head2␣Importing

Test::Builder::Module␣is␣a␣subclass␣of␣L<Exporter>␣which␣means␣your
module␣is␣also␣a␣subclass␣of␣Exporter.␣␣@EXPORT,␣@EXPORT_OK,␣etc...
all␣act␣normally.

A␣few␣methods␣are␣provided␣to␣do␣the␣C<<␣use␣Your::Module␣tests␣=>␣23␣>>␣part
for␣you.

=head3␣import

Test::Builder::Module␣provides␣an␣C<import()>␣method␣which␣acts␣in␣the
same␣basic␣way␣as␣L<Test::More>'s,␣setting␣the␣plan␣and␣controlling
exporting␣of␣functions␣and␣variables.␣␣This␣allows␣your␣module␣to␣set
the␣plan␣independent␣of␣L<Test::More>.

All␣arguments␣passed␣to␣C<import()>␣are␣passed␣onto␣
C<<␣Your::Module->builder->plan()␣>>␣with␣the␣exception␣of␣
C<<␣import␣=>[qw(things␣to␣import)]␣>>.

␣␣␣␣use␣Your::Module␣import␣=>␣[qw(this␣that)],␣tests␣=>␣23;

says␣to␣import␣the␣functions␣C<this()>␣and␣C<that()>␣as␣well␣as␣set␣the␣plan
to␣be␣23␣tests.

C<import()>␣also␣sets␣the␣C<exported_to()>␣attribute␣of␣your␣builder␣to␣be
the␣caller␣of␣the␣C<import()>␣function.

Additional␣behaviors␣can␣be␣added␣to␣your␣C<import()>␣method␣by␣overriding
C<import_extra()>.

=cut
----------
Range: (7349786,7351433) (1647)
}

=head2␣execute_tests(␣tests␣=>␣\@test_files,␣out␣=>␣\*FH␣)

Runs␣all␣the␣given␣C<@test_files>␣(just␣like␣C<runtests()>)␣but
doesn't␣generate␣the␣final␣report.␣␣During␣testing,␣progress
information␣will␣be␣written␣to␣the␣currently␣selected␣output
filehandle␣(usually␣C<STDOUT>),␣or␣to␣the␣filehandle␣given␣by␣the
C<out>␣parameter.␣␣The␣I<out>␣is␣optional.

Returns␣a␣list␣of␣two␣values,␣C<$total>␣and␣C<$failed>,␣describing␣the
results.␣␣C<$total>␣is␣a␣hash␣ref␣summary␣of␣all␣the␣tests␣run.␣␣Its
keys␣and␣values␣are␣this:

␣␣␣␣bonus␣␣␣␣␣␣␣␣␣␣␣Number␣of␣individual␣todo␣tests␣unexpectedly␣passed
␣␣␣␣max␣␣␣␣␣␣␣␣␣␣␣␣␣Number␣of␣individual␣tests␣ran
␣␣␣␣ok␣␣␣␣␣␣␣␣␣␣␣␣␣␣Number␣of␣individual␣tests␣passed
␣␣␣␣sub_skipped␣␣␣␣␣Number␣of␣individual␣tests␣skipped
␣␣␣␣todo␣␣␣␣␣␣␣␣␣␣␣␣Number␣of␣individual␣todo␣tests

␣␣␣␣files␣␣␣␣␣␣␣␣␣␣␣Number␣of␣test␣files␣ran
␣␣␣␣good␣␣␣␣␣␣␣␣␣␣␣␣Number␣of␣test␣files␣passed
␣␣␣␣bad␣␣␣␣␣␣␣␣␣␣␣␣␣Number␣of␣test␣files␣failed
␣␣␣␣tests␣␣␣␣␣␣␣␣␣␣␣Number␣of␣test␣files␣originally␣given
␣␣␣␣skipped␣␣␣␣␣␣␣␣␣Number␣of␣test␣files␣skipped

If␣C<<␣$total->{bad}␣==␣0␣>>␣and␣C<<␣$total->{max}␣>␣0␣>>,␣you've
got␣a␣successful␣test.

C<$failed>␣is␣a␣hash␣ref␣of␣all␣the␣test␣scripts␣that␣failed.␣␣Each␣key
is␣the␣name␣of␣a␣test␣script,␣each␣value␣is␣another␣hash␣representing
how␣that␣script␣failed.␣␣Its␣keys␣are␣these:

␣␣␣␣name␣␣␣␣␣␣␣␣Name␣of␣the␣test␣which␣failed
␣␣␣␣estat␣␣␣␣␣␣␣Script's␣exit␣value
␣␣␣␣wstat␣␣␣␣␣␣␣Script's␣wait␣status
␣␣␣␣max␣␣␣␣␣␣␣␣␣Number␣of␣individual␣tests
␣␣␣␣failed␣␣␣␣␣␣Number␣which␣failed
␣␣␣␣canon␣␣␣␣␣␣␣List␣of␣tests␣which␣failed␣(as␣string).

C<$failed>␣should␣be␣empty␣if␣everything␣passed.

=cut
----------
Range: (7351631,7353453) (1822)
=head1␣NAME

Test::Simple␣-␣Basic␣utilities␣for␣writing␣tests.

=head1␣SYNOPSIS

␣␣use␣Test::Simple␣tests␣=>␣1;

␣␣ok(␣$foo␣eq␣$bar,␣'foo␣is␣bar'␣);


=head1␣DESCRIPTION

**␣If␣you␣are␣unfamiliar␣with␣testing␣B<read␣L<Test::Tutorial>␣first!>␣**

This␣is␣an␣extremely␣simple,␣extremely␣basic␣module␣for␣writing␣tests
suitable␣for␣CPAN␣modules␣and␣other␣pursuits.␣␣If␣you␣wish␣to␣do␣more
complicated␣testing,␣use␣the␣Test::More␣module␣(a␣drop-in␣replacement
for␣this␣one).

The␣basic␣unit␣of␣Perl␣testing␣is␣the␣ok.␣␣For␣each␣thing␣you␣want␣to
test␣your␣program␣will␣print␣out␣an␣"ok"␣or␣"not␣ok"␣to␣indicate␣pass
or␣fail.␣␣You␣do␣this␣with␣the␣C<ok()>␣function␣(see␣below).

The␣only␣other␣constraint␣is␣you␣must␣pre-declare␣how␣many␣tests␣you
plan␣to␣run.␣␣This␣is␣in␣case␣something␣goes␣horribly␣wrong␣during␣the
test␣and␣your␣test␣program␣aborts,␣or␣skips␣a␣test␣or␣whatever.␣␣You
do␣this␣like␣so:

␣␣␣␣use␣Test::Simple␣tests␣=>␣23;

You␣must␣have␣a␣plan.


=over␣4

=item␣B<ok>

␣␣ok(␣$foo␣eq␣$bar,␣$name␣);
␣␣ok(␣$foo␣eq␣$bar␣);

C<ok()>␣is␣given␣an␣expression␣(in␣this␣case␣C<$foo␣eq␣$bar>).␣␣If␣it's
true,␣the␣test␣passed.␣␣If␣it's␣false,␣it␣didn't.␣␣That's␣about␣it.

C<ok()>␣prints␣out␣either␣"ok"␣or␣"not␣ok"␣along␣with␣a␣test␣number␣(it
keeps␣track␣of␣that␣for␣you).

␣␣#␣This␣produces␣"ok␣1␣-␣Hell␣not␣yet␣frozen␣over"␣(or␣not␣ok)
␣␣ok(␣get_temperature($hell)␣>␣0,␣'Hell␣not␣yet␣frozen␣over'␣);

If␣you␣provide␣a␣$name,␣that␣will␣be␣printed␣along␣with␣the␣"ok/not
ok"␣to␣make␣it␣easier␣to␣find␣your␣test␣when␣if␣fails␣(just␣search␣for
the␣name).␣␣It␣also␣makes␣it␣easier␣for␣the␣next␣guy␣to␣understand
what␣your␣test␣is␣for.␣␣It's␣highly␣recommended␣you␣use␣test␣names.

All␣tests␣are␣run␣in␣scalar␣context.␣␣So␣this:

␣␣␣␣ok(␣@stuff,␣'I␣have␣some␣stuff'␣);

will␣do␣what␣you␣mean␣(fail␣if␣stuff␣is␣empty)

=cut
----------
Range: (7353566,7357925) (4359)
}

=back

Test::Simple␣will␣start␣by␣printing␣number␣of␣tests␣run␣in␣the␣form
"1..M"␣(so␣"1..5"␣means␣you're␣going␣to␣run␣5␣tests).␣␣This␣strange
format␣lets␣L<Test::Harness>␣know␣how␣many␣tests␣you␣plan␣on␣running␣in
case␣something␣goes␣horribly␣wrong.

If␣all␣your␣tests␣passed,␣Test::Simple␣will␣exit␣with␣zero␣(which␣is
normal).␣␣If␣anything␣failed␣it␣will␣exit␣with␣how␣many␣failed.␣␣If
you␣run␣less␣(or␣more)␣tests␣than␣you␣planned,␣the␣missing␣(or␣extras)
will␣be␣considered␣failures.␣␣If␣no␣tests␣were␣ever␣run␣Test::Simple
will␣throw␣a␣warning␣and␣exit␣with␣255.␣␣If␣the␣test␣died,␣even␣after
having␣successfully␣completed␣all␣its␣tests,␣it␣will␣still␣be
considered␣a␣failure␣and␣will␣exit␣with␣255.

So␣the␣exit␣codes␣are...

␣␣␣␣0␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣all␣tests␣successful
␣␣␣␣255␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣test␣died␣or␣all␣passed␣but␣wrong␣#␣of␣tests␣run
␣␣␣␣any␣other␣number␣␣␣␣how␣many␣failed␣(including␣missing␣or␣extras)

If␣you␣fail␣more␣than␣254␣tests,␣it␣will␣be␣reported␣as␣254.

This␣module␣is␣by␣no␣means␣trying␣to␣be␣a␣complete␣testing␣system.
It's␣just␣to␣get␣you␣started.␣␣Once␣you're␣off␣the␣ground␣its
recommended␣you␣look␣at␣L<Test::More>.


=head1␣EXAMPLE

Here's␣an␣example␣of␣a␣simple␣.t␣file␣for␣the␣fictional␣Film␣module.

␣␣␣␣use␣Test::Simple␣tests␣=>␣5;

␣␣␣␣use␣Film;␣␣#␣What␣you're␣testing.

␣␣␣␣my␣$btaste␣=␣Film->new({␣Title␣␣␣␣=>␣'Bad␣Taste',
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣Director␣=>␣'Peter␣Jackson',
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣Rating␣␣␣=>␣'R',
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣NumExplodingSheep␣=>␣1
␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣});
␣␣␣␣ok(␣defined($btaste)␣&&␣ref␣$btaste␣eq␣'Film',␣␣␣␣␣'new()␣works'␣);

␣␣␣␣ok(␣$btaste->Title␣␣␣␣␣␣eq␣'Bad␣Taste',␣␣␣␣␣'Title()␣get'␣␣␣␣);
␣␣␣␣ok(␣$btaste->Director␣␣␣eq␣'Peter␣Jackson',␣'Director()␣get'␣);
␣␣␣␣ok(␣$btaste->Rating␣␣␣␣␣eq␣'R',␣␣␣␣␣␣␣␣␣␣␣␣␣'Rating()␣get'␣␣␣);
␣␣␣␣ok(␣$btaste->NumExplodingSheep␣==␣1,␣␣␣␣␣␣␣␣'NumExplodingSheep()␣get'␣);

It␣will␣produce␣output␣like␣this:

␣␣␣␣1..5
␣␣␣␣ok␣1␣-␣new()␣works
␣␣␣␣ok␣2␣-␣Title()␣get
␣␣␣␣ok␣3␣-␣Director()␣get
␣␣␣␣not␣ok␣4␣-␣Rating()␣get
␣␣␣␣#␣␣␣Failed␣test␣'Rating()␣get'
␣␣␣␣#␣␣␣in␣t/film.t␣at␣line␣14.
␣␣␣␣ok␣5␣-␣NumExplodingSheep()␣get
␣␣␣␣#␣Looks␣like␣you␣failed␣1␣tests␣of␣5

Indicating␣the␣Film::Rating()␣method␣is␣broken.


=head1␣CAVEATS

Test::Simple␣will␣only␣report␣a␣maximum␣of␣254␣failures␣in␣its␣exit
code.␣␣If␣this␣is␣a␣problem,␣you␣probably␣have␣a␣huge␣test␣script.
Split␣it␣into␣multiple␣files.␣␣(Otherwise␣blame␣the␣Unix␣folks␣for
using␣an␣unsigned␣short␣integer␣as␣the␣exit␣status).

Because␣VMS's␣exit␣codes␣are␣much,␣much␣different␣than␣the␣rest␣of␣the
universe,␣and␣perl␣does␣horrible␣mangling␣to␣them␣that␣gets␣in␣my␣way,
it␣works␣like␣this␣on␣VMS.

␣␣␣␣0␣␣␣␣␣SS$_NORMAL␣␣␣␣␣␣␣␣all␣tests␣successful
␣␣␣␣4␣␣␣␣␣SS$_ABORT␣␣␣␣␣␣␣␣␣something␣went␣wrong

Unfortunately,␣I␣can't␣differentiate␣any␣further.


=head1␣NOTES

Test::Simple␣is␣B<explicitly>␣tested␣all␣the␣way␣back␣to␣perl␣5.6.0.

Test::Simple␣is␣thread-safe␣in␣perl␣5.8.1␣and␣up.

=head1␣HISTORY

This␣module␣was␣conceived␣while␣talking␣with␣Tony␣Bowden␣in␣his
kitchen␣one␣night␣about␣the␣problems␣I␣was␣having␣writing␣some␣really
complicated␣feature␣into␣the␣new␣Testing␣module.␣␣He␣observed␣that␣the
main␣problem␣is␣not␣dealing␣with␣these␣edge␣cases␣but␣that␣people␣hate
to␣write␣tests␣B<at␣all>.␣␣What␣was␣needed␣was␣a␣dead␣simple␣module
that␣took␣all␣the␣hard␣work␣out␣of␣testing␣and␣was␣really,␣really␣easy
to␣learn.␣␣Paul␣Johnson␣simultaneously␣had␣this␣idea␣(unfortunately,
he␣wasn't␣in␣Tony's␣kitchen).␣␣This␣is␣it.


=head1␣SEE␣ALSO

=over␣4

=item␣L<Test::More>

More␣testing␣functions!␣␣Once␣you␣outgrow␣Test::Simple,␣look␣at
L<Test::More>.␣␣Test::Simple␣is␣100%␣forward␣compatible␣with␣L<Test::More>
(i.e.␣you␣can␣just␣use␣L<Test::More>␣instead␣of␣Test::Simple␣in␣your
programs␣and␣things␣will␣still␣work).

=back

Look␣in␣L<Test::More>'s␣SEE␣ALSO␣for␣more␣testing␣modules.


=head1␣AUTHORS

Idea␣by␣Tony␣Bowden␣and␣Paul␣Johnson,␣code␣by␣Michael␣G␣Schwern
E<lt>schwern@pobox.comE<gt>,␣wardrobe␣by␣Calvin␣Klein.

=head1␣MAINTAINERS

=over␣4

=item␣Chad␣Granum␣E<lt>exodist@cpan.orgE<gt>

=back

=head1␣COPYRIGHT

Copyright␣2001-2008␣by␣Michael␣G␣Schwern␣E<lt>schwern@pobox.comE<gt>.

This␣program␣is␣free␣software;␣you␣can␣redistribute␣it␣and/or␣
modify␣it␣under␣the␣same␣terms␣as␣Perl␣itself.

See␣F<http://www.perl.com/perl/misc/Artistic.html>

=cut
----------
Range: (7358729,7362007) (3278)
=head1␣NAME

Test::More␣-␣yet␣another␣framework␣for␣writing␣test␣scripts

=head1␣SYNOPSIS

␣␣use␣Test::More␣tests␣=>␣23;
␣␣#␣or
␣␣use␣Test::More␣skip_all␣=>␣$reason;
␣␣#␣or
␣␣use␣Test::More;␣␣␣#␣see␣done_testing()

␣␣require_ok(␣'Some::Module'␣);

␣␣#␣Various␣ways␣to␣say␣"ok"
␣␣ok($got␣eq␣$expected,␣$test_name);

␣␣is␣␣($got,␣$expected,␣$test_name);
␣␣isnt($got,␣$expected,␣$test_name);

␣␣#␣Rather␣than␣print␣STDERR␣"#␣here's␣what␣went␣wrong\n"
␣␣diag("here's␣what␣went␣wrong");

␣␣like␣␣($got,␣qr/expected/,␣$test_name);
␣␣unlike($got,␣qr/expected/,␣$test_name);

␣␣cmp_ok($got,␣'==',␣$expected,␣$test_name);

␣␣is_deeply($got_complex_structure,␣$expected_complex_structure,␣$test_name);

␣␣SKIP:␣{
␣␣␣␣␣␣skip␣$why,␣$how_many␣unless␣$have_some_feature;

␣␣␣␣␣␣ok(␣foo(),␣␣␣␣␣␣␣$test_name␣);
␣␣␣␣␣␣is(␣foo(42),␣23,␣$test_name␣);
␣␣};

␣␣TODO:␣{
␣␣␣␣␣␣local␣$TODO␣=␣$why;

␣␣␣␣␣␣ok(␣foo(),␣␣␣␣␣␣␣$test_name␣);
␣␣␣␣␣␣is(␣foo(42),␣23,␣$test_name␣);
␣␣};

␣␣can_ok($module,␣@methods);
␣␣isa_ok($object,␣$class);

␣␣pass($test_name);
␣␣fail($test_name);

␣␣BAIL_OUT($why);

␣␣#␣UNIMPLEMENTED!!!
␣␣my␣@status␣=␣Test::More::status;


=head1␣DESCRIPTION

B<STOP!>␣If␣you're␣just␣getting␣started␣writing␣tests,␣have␣a␣look␣at
L<Test2::Suite>␣first.

This␣is␣a␣drop␣in␣replacement␣for␣Test::Simple␣which␣you␣can␣switch␣to␣once␣you
get␣the␣hang␣of␣basic␣testing.

The␣purpose␣of␣this␣module␣is␣to␣provide␣a␣wide␣range␣of␣testing
utilities.␣␣Various␣ways␣to␣say␣"ok"␣with␣better␣diagnostics,
facilities␣to␣skip␣tests,␣test␣future␣features␣and␣compare␣complicated
data␣structures.␣␣While␣you␣can␣do␣almost␣anything␣with␣a␣simple
C<ok()>␣function,␣it␣doesn't␣provide␣good␣diagnostic␣output.


=head2␣I␣love␣it␣when␣a␣plan␣comes␣together

Before␣anything␣else,␣you␣need␣a␣testing␣plan.␣␣This␣basically␣declares
how␣many␣tests␣your␣script␣is␣going␣to␣run␣to␣protect␣against␣premature
failure.

The␣preferred␣way␣to␣do␣this␣is␣to␣declare␣a␣plan␣when␣you␣C<use␣Test::More>.

␣␣use␣Test::More␣tests␣=>␣23;

There␣are␣cases␣when␣you␣will␣not␣know␣beforehand␣how␣many␣tests␣your
script␣is␣going␣to␣run.␣␣In␣this␣case,␣you␣can␣declare␣your␣tests␣at
the␣end.

␣␣use␣Test::More;

␣␣...␣run␣your␣tests␣...

␣␣done_testing(␣$number_of_tests_run␣);

B<NOTE>␣C<done_testing()>␣should␣never␣be␣called␣in␣an␣C<END␣{␣...␣}>␣block.

Sometimes␣you␣really␣don't␣know␣how␣many␣tests␣were␣run,␣or␣it's␣too
difficult␣to␣calculate.␣␣In␣which␣case␣you␣can␣leave␣off
$number_of_tests_run.

In␣some␣cases,␣you'll␣want␣to␣completely␣skip␣an␣entire␣testing␣script.

␣␣use␣Test::More␣skip_all␣=>␣$skip_reason;

Your␣script␣will␣declare␣a␣skip␣with␣the␣reason␣why␣you␣skipped␣and
exit␣immediately␣with␣a␣zero␣(success).␣␣See␣L<Test::Harness>␣for
details.

If␣you␣want␣to␣control␣what␣functions␣Test::More␣will␣export,␣you
have␣to␣use␣the␣'import'␣option.␣␣For␣example,␣to␣import␣everything
but␣'fail',␣you'd␣do:

␣␣use␣Test::More␣tests␣=>␣23,␣import␣=>␣['!fail'];

Alternatively,␣you␣can␣use␣the␣C<plan()>␣function.␣␣Useful␣for␣when␣you
have␣to␣calculate␣the␣number␣of␣tests.

␣␣use␣Test::More;
␣␣plan␣tests␣=>␣keys␣%Stuff␣*␣3;

or␣for␣deciding␣between␣running␣the␣tests␣at␣all:

␣␣use␣Test::More;
␣␣if(␣$^O␣eq␣'MacOS'␣)␣{
␣␣␣␣␣␣plan␣skip_all␣=>␣'Test␣irrelevant␣on␣MacOS';
␣␣}
␣␣else␣{
␣␣␣␣␣␣plan␣tests␣=>␣42;
␣␣}

=cut
----------
Range: (7364016,7365966) (1950)
}

=head2␣Test␣names

By␣convention,␣each␣test␣is␣assigned␣a␣number␣in␣order.␣␣This␣is
largely␣done␣automatically␣for␣you.␣␣However,␣it's␣often␣very␣useful␣to
assign␣a␣name␣to␣each␣test.␣␣Which␣would␣you␣rather␣see:

␣␣ok␣4
␣␣not␣ok␣5
␣␣ok␣6

or

␣␣ok␣4␣-␣basic␣multi-variable
␣␣not␣ok␣5␣-␣simple␣exponential
␣␣ok␣6␣-␣force␣==␣mass␣*␣acceleration

The␣later␣gives␣you␣some␣idea␣of␣what␣failed.␣␣It␣also␣makes␣it␣easier
to␣find␣the␣test␣in␣your␣script,␣simply␣search␣for␣"simple
exponential".

All␣test␣functions␣take␣a␣name␣argument.␣␣It's␣optional,␣but␣highly
suggested␣that␣you␣use␣it.

=head2␣I'm␣ok,␣you're␣not␣ok.

The␣basic␣purpose␣of␣this␣module␣is␣to␣print␣out␣either␣"ok␣#"␣or␣"not
ok␣#"␣depending␣on␣if␣a␣given␣test␣succeeded␣or␣failed.␣␣Everything
else␣is␣just␣gravy.

All␣of␣the␣following␣print␣"ok"␣or␣"not␣ok"␣depending␣on␣if␣the␣test
succeeded␣or␣failed.␣␣They␣all␣also␣return␣true␣or␣false,
respectively.

=over␣4

=item␣B<ok>

␣␣ok($got␣eq␣$expected,␣$test_name);

This␣simply␣evaluates␣any␣expression␣(C<$got␣eq␣$expected>␣is␣just␣a
simple␣example)␣and␣uses␣that␣to␣determine␣if␣the␣test␣succeeded␣or
failed.␣␣A␣true␣expression␣passes,␣a␣false␣one␣fails.␣␣Very␣simple.

For␣example:

␣␣␣␣ok(␣$exp{9}␣==␣81,␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣'simple␣exponential'␣);
␣␣␣␣ok(␣Film->can('db_Main'),␣␣␣␣␣␣␣␣␣␣␣␣'set_db()'␣);
␣␣␣␣ok(␣$p->tests␣==␣4,␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣'saw␣tests'␣);
␣␣␣␣ok(␣!grep(!defined␣$_,␣@items),␣␣␣␣␣␣'all␣items␣defined'␣);

(Mnemonic:␣␣"This␣is␣ok.")

$test_name␣is␣a␣very␣short␣description␣of␣the␣test␣that␣will␣be␣printed
out.␣␣It␣makes␣it␣very␣easy␣to␣find␣a␣test␣in␣your␣script␣when␣it␣fails
and␣gives␣others␣an␣idea␣of␣your␣intentions.␣␣$test_name␣is␣optional,
but␣we␣B<very>␣strongly␣encourage␣its␣use.

Should␣an␣C<ok()>␣fail,␣it␣will␣produce␣some␣diagnostics:

␣␣␣␣not␣ok␣18␣-␣sufficient␣mucus
␣␣␣␣#␣␣␣Failed␣test␣'sufficient␣mucus'
␣␣␣␣#␣␣␣in␣foo.t␣at␣line␣42.

This␣is␣the␣same␣as␣L<Test::Simple>'s␣C<ok()>␣routine.

=cut
----------
Range: (7366083,7368379) (2296)
}

=item␣B<is>

=item␣B<isnt>

␣␣is␣␣(␣$got,␣$expected,␣$test_name␣);
␣␣isnt(␣$got,␣$expected,␣$test_name␣);

Similar␣to␣C<ok()>,␣C<is()>␣and␣C<isnt()>␣compare␣their␣two␣arguments
with␣C<eq>␣and␣C<ne>␣respectively␣and␣use␣the␣result␣of␣that␣to
determine␣if␣the␣test␣succeeded␣or␣failed.␣␣So␣these:

␣␣␣␣#␣Is␣the␣ultimate␣answer␣42?
␣␣␣␣is(␣ultimate_answer(),␣42,␣␣␣␣␣␣␣␣␣␣"Meaning␣of␣Life"␣);

␣␣␣␣#␣$foo␣isn't␣empty
␣␣␣␣isnt(␣$foo,␣'',␣␣␣␣␣"Got␣some␣foo"␣);

are␣similar␣to␣these:

␣␣␣␣ok(␣ultimate_answer()␣eq␣42,␣␣␣␣␣␣␣␣"Meaning␣of␣Life"␣);
␣␣␣␣ok(␣$foo␣ne␣'',␣␣␣␣␣"Got␣some␣foo"␣);

C<undef>␣will␣only␣ever␣match␣C<undef>.␣␣So␣you␣can␣test␣a␣value
against␣C<undef>␣like␣this:

␣␣␣␣is($not_defined,␣undef,␣"undefined␣as␣expected");

(Mnemonic:␣␣"This␣is␣that."␣␣"This␣isn't␣that.")

So␣why␣use␣these?␣␣They␣produce␣better␣diagnostics␣on␣failure.␣␣C<ok()>
cannot␣know␣what␣you␣are␣testing␣for␣(beyond␣the␣name),␣but␣C<is()>␣and
C<isnt()>␣know␣what␣the␣test␣was␣and␣why␣it␣failed.␣␣For␣example␣this
test:

␣␣␣␣my␣$foo␣=␣'waffle';␣␣my␣$bar␣=␣'yarblokos';
␣␣␣␣is(␣$foo,␣$bar,␣␣␣'Is␣foo␣the␣same␣as␣bar?'␣);

Will␣produce␣something␣like␣this:

␣␣␣␣not␣ok␣17␣-␣Is␣foo␣the␣same␣as␣bar?
␣␣␣␣#␣␣␣Failed␣test␣'Is␣foo␣the␣same␣as␣bar?'
␣␣␣␣#␣␣␣in␣foo.t␣at␣line␣139.
␣␣␣␣#␣␣␣␣␣␣␣␣␣␣got:␣'waffle'
␣␣␣␣#␣␣␣␣␣expected:␣'yarblokos'

So␣you␣can␣figure␣out␣what␣went␣wrong␣without␣rerunning␣the␣test.

You␣are␣encouraged␣to␣use␣C<is()>␣and␣C<isnt()>␣over␣C<ok()>␣where␣possible,
however␣do␣not␣be␣tempted␣to␣use␣them␣to␣find␣out␣if␣something␣is
true␣or␣false!

␣␣#␣XXX␣BAD!
␣␣is(␣exists␣$brooklyn{tree},␣1,␣'A␣tree␣grows␣in␣Brooklyn'␣);

This␣does␣not␣check␣if␣C<exists␣$brooklyn{tree}>␣is␣true,␣it␣checks␣if
it␣returns␣1.␣␣Very␣different.␣␣Similar␣caveats␣exist␣for␣false␣and␣0.
In␣these␣cases,␣use␣C<ok()>.

␣␣ok(␣exists␣$brooklyn{tree},␣␣␣␣'A␣tree␣grows␣in␣Brooklyn'␣);

A␣simple␣call␣to␣C<isnt()>␣usually␣does␣not␣provide␣a␣strong␣test␣but␣there
are␣cases␣when␣you␣cannot␣say␣much␣more␣about␣a␣value␣than␣that␣it␣is
different␣from␣some␣other␣value:

␣␣new_ok␣$obj,␣"Foo";

␣␣my␣$clone␣=␣$obj->clone;
␣␣isa_ok␣$obj,␣"Foo",␣"Foo->clone";

␣␣isnt␣$obj,␣$clone,␣"clone()␣produces␣a␣different␣object";

For␣those␣grammatical␣pedants␣out␣there,␣there's␣an␣C<isn't()>
function␣which␣is␣an␣alias␣of␣C<isnt()>.

=cut
----------
Range: (7376453,7378317) (1864)
}

=item␣B<subtest>

␣␣␣␣subtest␣$name␣=>␣\&code,␣@args;

C<subtest()>␣runs␣the␣&code␣as␣its␣own␣little␣test␣with␣its␣own␣plan␣and
its␣own␣result.␣␣The␣main␣test␣counts␣this␣as␣a␣single␣test␣using␣the
result␣of␣the␣whole␣subtest␣to␣determine␣if␣its␣ok␣or␣not␣ok.

For␣example...

␣␣use␣Test::More␣tests␣=>␣3;
␣
␣␣pass("First␣test");

␣␣subtest␣'An␣example␣subtest'␣=>␣sub␣{
␣␣␣␣␣␣plan␣tests␣=>␣2;

␣␣␣␣␣␣pass("This␣is␣a␣subtest");
␣␣␣␣␣␣pass("So␣is␣this");
␣␣};

␣␣pass("Third␣test");

This␣would␣produce.

␣␣1..3
␣␣ok␣1␣-␣First␣test
␣␣␣␣␣␣#␣Subtest:␣An␣example␣subtest
␣␣␣␣␣␣1..2
␣␣␣␣␣␣ok␣1␣-␣This␣is␣a␣subtest
␣␣␣␣␣␣ok␣2␣-␣So␣is␣this
␣␣ok␣2␣-␣An␣example␣subtest
␣␣ok␣3␣-␣Third␣test

A␣subtest␣may␣call␣C<skip_all>.␣␣No␣tests␣will␣be␣run,␣but␣the␣subtest␣is
considered␣a␣skip.

␣␣subtest␣'skippy'␣=>␣sub␣{
␣␣␣␣␣␣plan␣skip_all␣=>␣'cuz␣I␣said␣so';
␣␣␣␣␣␣pass('this␣test␣will␣never␣be␣run');
␣␣};

Returns␣true␣if␣the␣subtest␣passed,␣false␣otherwise.

Due␣to␣how␣subtests␣work,␣you␣may␣omit␣a␣plan␣if␣you␣desire.␣␣This␣adds␣an
implicit␣C<done_testing()>␣to␣the␣end␣of␣your␣subtest.␣␣The␣following␣two
subtests␣are␣equivalent:

␣␣subtest␣'subtest␣with␣implicit␣done_testing()',␣sub␣{
␣␣␣␣␣␣ok␣1,␣'subtests␣with␣an␣implicit␣done␣testing␣should␣work';
␣␣␣␣␣␣ok␣1,␣'...␣and␣support␣more␣than␣one␣test';
␣␣␣␣␣␣ok␣1,␣'...␣no␣matter␣how␣many␣tests␣are␣run';
␣␣};

␣␣subtest␣'subtest␣with␣explicit␣done_testing()',␣sub␣{
␣␣␣␣␣␣ok␣1,␣'subtests␣with␣an␣explicit␣done␣testing␣should␣work';
␣␣␣␣␣␣ok␣1,␣'...␣and␣support␣more␣than␣one␣test';
␣␣␣␣␣␣ok␣1,␣'...␣no␣matter␣how␣many␣tests␣are␣run';
␣␣␣␣␣␣done_testing();
␣␣};

Extra␣arguments␣given␣to␣C<subtest>␣are␣passed␣to␣the␣callback.␣For␣example:

␣␣␣␣sub␣my_subtest␣{
␣␣␣␣␣␣␣␣my␣$range␣=␣shift;
␣␣␣␣␣␣␣␣...
␣␣␣␣}

␣␣␣␣for␣my␣$range␣(1,␣10,␣100,␣1000)␣{
␣␣␣␣␣␣␣␣subtest␣"testing␣range␣$range",␣\&my_subtest,␣$range;
␣␣␣␣}

=cut
----------
Range: (7384023,7385707) (1684)
}


=back


=head2␣Complex␣data␣structures

Not␣everything␣is␣a␣simple␣eq␣check␣or␣regex.␣␣There␣are␣times␣you
need␣to␣see␣if␣two␣data␣structures␣are␣equivalent.␣␣For␣these
instances␣Test::More␣provides␣a␣handful␣of␣useful␣functions.

B<NOTE>␣I'm␣not␣quite␣sure␣what␣will␣happen␣with␣filehandles.

=over␣4

=item␣B<is_deeply>

␣␣is_deeply(␣$got,␣$expected,␣$test_name␣);

Similar␣to␣C<is()>,␣except␣that␣if␣$got␣and␣$expected␣are␣references,␣it
does␣a␣deep␣comparison␣walking␣each␣data␣structure␣to␣see␣if␣they␣are
equivalent.␣␣If␣the␣two␣structures␣are␣different,␣it␣will␣display␣the
place␣where␣they␣start␣differing.

C<is_deeply()>␣compares␣the␣dereferenced␣values␣of␣references,␣the
references␣themselves␣(except␣for␣their␣type)␣are␣ignored.␣␣This␣means
aspects␣such␣as␣blessing␣and␣ties␣are␣not␣considered␣"different".

C<is_deeply()>␣currently␣has␣very␣limited␣handling␣of␣function␣reference
and␣globs.␣␣It␣merely␣checks␣if␣they␣have␣the␣same␣referent.␣␣This␣may
improve␣in␣the␣future.

L<Test::Differences>␣and␣L<Test::Deep>␣provide␣more␣in-depth␣functionality
along␣these␣lines.

B<NOTE>␣is_deeply()␣has␣limitations␣when␣it␣comes␣to␣comparing␣strings␣and
refs:

␣␣␣␣my␣$path␣=␣path('.');
␣␣␣␣my␣$hash␣=␣{};
␣␣␣␣is_deeply(␣$path,␣"$path"␣);␣#␣ok
␣␣␣␣is_deeply(␣$hash,␣"$hash"␣);␣#␣fail

This␣happens␣because␣is_deeply␣will␣unoverload␣all␣arguments␣unconditionally.
It␣is␣probably␣best␣not␣to␣use␣is_deeply␣with␣overloading.␣For␣legacy␣reasons
this␣is␣not␣likely␣to␣ever␣be␣fixed.␣If␣you␣would␣like␣a␣much␣better␣tool␣for
this␣you␣should␣see␣L<Test2::Suite>␣Specifically␣L<Test2::Tools::Compare>␣has
an␣C<is()>␣function␣that␣works␣like␣C<is_deeply>␣with␣many␣improvements.

=cut
----------
Range: (7390306,7392234) (1928)
}

=back


=head2␣Conditional␣tests

Sometimes␣running␣a␣test␣under␣certain␣conditions␣will␣cause␣the
test␣script␣to␣die.␣␣A␣certain␣function␣or␣method␣isn't␣implemented
(such␣as␣C<fork()>␣on␣MacOS),␣some␣resource␣isn't␣available␣(like␣a␣
net␣connection)␣or␣a␣module␣isn't␣available.␣␣In␣these␣cases␣it's
necessary␣to␣skip␣tests,␣or␣declare␣that␣they␣are␣supposed␣to␣fail
but␣will␣work␣in␣the␣future␣(a␣todo␣test).

For␣more␣details␣on␣the␣mechanics␣of␣skip␣and␣todo␣tests␣see
L<Test::Harness>.

The␣way␣Test::More␣handles␣this␣is␣with␣a␣named␣block.␣␣Basically,␣a
block␣of␣tests␣which␣can␣be␣skipped␣over␣or␣made␣todo.␣␣It's␣best␣if␣I
just␣show␣you...

=over␣4

=item␣B<SKIP:␣BLOCK>

␣␣SKIP:␣{
␣␣␣␣␣␣skip␣$why,␣$how_many␣if␣$condition;

␣␣␣␣␣␣...normal␣testing␣code␣goes␣here...
␣␣}

This␣declares␣a␣block␣of␣tests␣that␣might␣be␣skipped,␣$how_many␣tests
there␣are,␣$why␣and␣under␣what␣$condition␣to␣skip␣them.␣␣An␣example␣is
the␣easiest␣way␣to␣illustrate:

␣␣␣␣SKIP:␣{
␣␣␣␣␣␣␣␣eval␣{␣require␣HTML::Lint␣};

␣␣␣␣␣␣␣␣skip␣"HTML::Lint␣not␣installed",␣2␣if␣$@;

␣␣␣␣␣␣␣␣my␣$lint␣=␣new␣HTML::Lint;
␣␣␣␣␣␣␣␣isa_ok(␣$lint,␣"HTML::Lint"␣);

␣␣␣␣␣␣␣␣$lint->parse(␣$html␣);
␣␣␣␣␣␣␣␣is(␣$lint->errors,␣0,␣"No␣errors␣found␣in␣HTML"␣);
␣␣␣␣}

If␣the␣user␣does␣not␣have␣HTML::Lint␣installed,␣the␣whole␣block␣of
code␣I<won't␣be␣run␣at␣all>.␣␣Test::More␣will␣output␣special␣ok's
which␣Test::Harness␣interprets␣as␣skipped,␣but␣passing,␣tests.

It's␣important␣that␣$how_many␣accurately␣reflects␣the␣number␣of␣tests
in␣the␣SKIP␣block␣so␣the␣#␣of␣tests␣run␣will␣match␣up␣with␣your␣plan.
If␣your␣plan␣is␣C<no_plan>␣$how_many␣is␣optional␣and␣will␣default␣to␣1.

It's␣perfectly␣safe␣to␣nest␣SKIP␣blocks.␣␣Each␣SKIP␣block␣must␣have
the␣label␣C<SKIP>,␣or␣Test::More␣can't␣work␣its␣magic.

You␣don't␣skip␣tests␣which␣are␣failing␣because␣there's␣a␣bug␣in␣your
program,␣or␣for␣which␣you␣don't␣yet␣have␣code␣written.␣␣For␣that␣you
use␣TODO.␣␣Read␣on.

=cut
----------
Range: (7393053,7394978) (1925)
}

=item␣B<TODO:␣BLOCK>

␣␣␣␣TODO:␣{
␣␣␣␣␣␣␣␣local␣$TODO␣=␣$why␣if␣$condition;

␣␣␣␣␣␣␣␣...normal␣testing␣code␣goes␣here...
␣␣␣␣}

Declares␣a␣block␣of␣tests␣you␣expect␣to␣fail␣and␣$why.␣␣Perhaps␣it's
because␣you␣haven't␣fixed␣a␣bug␣or␣haven't␣finished␣a␣new␣feature:

␣␣␣␣TODO:␣{
␣␣␣␣␣␣␣␣local␣$TODO␣=␣"URI::Geller␣not␣finished";

␣␣␣␣␣␣␣␣my␣$card␣=␣"Eight␣of␣clubs";
␣␣␣␣␣␣␣␣is(␣URI::Geller->your_card,␣$card,␣'Is␣THIS␣your␣card?'␣);

␣␣␣␣␣␣␣␣my␣$spoon;
␣␣␣␣␣␣␣␣URI::Geller->bend_spoon;
␣␣␣␣␣␣␣␣is(␣$spoon,␣'bent',␣␣␣␣"Spoon␣bending,␣that's␣original"␣);
␣␣␣␣}

With␣a␣todo␣block,␣the␣tests␣inside␣are␣expected␣to␣fail.␣␣Test::More
will␣run␣the␣tests␣normally,␣but␣print␣out␣special␣flags␣indicating
they␣are␣"todo".␣␣L<Test::Harness>␣will␣interpret␣failures␣as␣being␣ok.
Should␣anything␣succeed,␣it␣will␣report␣it␣as␣an␣unexpected␣success.
You␣then␣know␣the␣thing␣you␣had␣todo␣is␣done␣and␣can␣remove␣the
TODO␣flag.

The␣nice␣part␣about␣todo␣tests,␣as␣opposed␣to␣simply␣commenting␣out␣a
block␣of␣tests,␣is␣that␣it␣is␣like␣having␣a␣programmatic␣todo␣list.␣␣You␣know
how␣much␣work␣is␣left␣to␣be␣done,␣you're␣aware␣of␣what␣bugs␣there␣are,
and␣you'll␣know␣immediately␣when␣they're␣fixed.

Once␣a␣todo␣test␣starts␣succeeding,␣simply␣move␣it␣outside␣the␣block.
When␣the␣block␣is␣empty,␣delete␣it.


=item␣B<todo_skip>

␣␣␣␣TODO:␣{
␣␣␣␣␣␣␣␣todo_skip␣$why,␣$how_many␣if␣$condition;

␣␣␣␣␣␣␣␣...normal␣testing␣code...
␣␣␣␣}

With␣todo␣tests,␣it's␣best␣to␣have␣the␣tests␣actually␣run.␣␣That␣way
you'll␣know␣when␣they␣start␣passing.␣␣Sometimes␣this␣isn't␣possible.
Often␣a␣failing␣test␣will␣cause␣the␣whole␣program␣to␣die␣or␣hang,␣even
inside␣an␣C<eval␣BLOCK>␣with␣and␣using␣C<alarm>.␣␣In␣these␣extreme
cases␣you␣have␣no␣choice␣but␣to␣skip␣over␣the␣broken␣tests␣entirely.

The␣syntax␣and␣behavior␣is␣similar␣to␣a␣C<SKIP:␣BLOCK>␣except␣the
tests␣will␣be␣marked␣as␣failing␣but␣todo.␣␣L<Test::Harness>␣will
interpret␣them␣as␣passing.

=cut
----------
Range: (7403034,7410622) (7588)
}

=back


=head2␣Extending␣and␣Embedding␣Test::More

Sometimes␣the␣Test::More␣interface␣isn't␣quite␣enough.␣␣Fortunately,
Test::More␣is␣built␣on␣top␣of␣L<Test::Builder>␣which␣provides␣a␣single,
unified␣backend␣for␣any␣test␣library␣to␣use.␣␣This␣means␣two␣test
libraries␣which␣both␣use␣<Test::Builder>␣B<can>␣be␣used␣together␣in␣the
same␣program>.

If␣you␣simply␣want␣to␣do␣a␣little␣tweaking␣of␣how␣the␣tests␣behave,
you␣can␣access␣the␣underlying␣L<Test::Builder>␣object␣like␣so:

=over␣4

=item␣B<builder>

␣␣␣␣my␣$test_builder␣=␣Test::More->builder;

Returns␣the␣L<Test::Builder>␣object␣underlying␣Test::More␣for␣you␣to␣play
with.


=back


=head1␣EXIT␣CODES

If␣all␣your␣tests␣passed,␣L<Test::Builder>␣will␣exit␣with␣zero␣(which␣is
normal).␣␣If␣anything␣failed␣it␣will␣exit␣with␣how␣many␣failed.␣␣If
you␣run␣less␣(or␣more)␣tests␣than␣you␣planned,␣the␣missing␣(or␣extras)
will␣be␣considered␣failures.␣␣If␣no␣tests␣were␣ever␣run␣L<Test::Builder>
will␣throw␣a␣warning␣and␣exit␣with␣255.␣␣If␣the␣test␣died,␣even␣after
having␣successfully␣completed␣all␣its␣tests,␣it␣will␣still␣be
considered␣a␣failure␣and␣will␣exit␣with␣255.

So␣the␣exit␣codes␣are...

␣␣␣␣0␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣all␣tests␣successful
␣␣␣␣255␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣test␣died␣or␣all␣passed␣but␣wrong␣#␣of␣tests␣run
␣␣␣␣any␣other␣number␣␣␣␣how␣many␣failed␣(including␣missing␣or␣extras)

If␣you␣fail␣more␣than␣254␣tests,␣it␣will␣be␣reported␣as␣254.

B<NOTE>␣␣This␣behavior␣may␣go␣away␣in␣future␣versions.


=head1␣COMPATIBILITY

Test::More␣works␣with␣Perls␣as␣old␣as␣5.8.1.

Thread␣support␣is␣not␣very␣reliable␣before␣5.10.1,␣but␣that's
because␣threads␣are␣not␣very␣reliable␣before␣5.10.1.

Although␣Test::More␣has␣been␣a␣core␣module␣in␣versions␣of␣Perl␣since␣5.6.2,␣Test::More␣has␣evolved␣since␣then,␣and␣not␣all␣of␣the␣features␣you're␣used␣to␣will␣be␣present␣in␣the␣shipped␣version␣of␣Test::More.␣If␣you␣are␣writing␣a␣module,␣don't␣forget␣to␣indicate␣in␣your␣package␣metadata␣the␣minimum␣version␣of␣Test::More␣that␣you␣require.␣For␣instance,␣if␣you␣want␣to␣use␣C<done_testing()>␣but␣want␣your␣test␣script␣to␣run␣on␣Perl␣5.10.0,␣you␣will␣need␣to␣explicitly␣require␣Test::More␣>␣0.88.

Key␣feature␣milestones␣include:

=over␣4

=item␣subtests

Subtests␣were␣released␣in␣Test::More␣0.94,␣which␣came␣with␣Perl␣5.12.0.␣Subtests␣did␣not␣implicitly␣call␣C<done_testing()>␣until␣0.96;␣the␣first␣Perl␣with␣that␣fix␣was␣Perl␣5.14.0␣with␣0.98.

=item␣C<done_testing()>

This␣was␣released␣in␣Test::More␣0.88␣and␣first␣shipped␣with␣Perl␣in␣5.10.1␣as␣part␣of␣Test::More␣0.92.␣

=item␣C<cmp_ok()>

Although␣C<cmp_ok()>␣was␣introduced␣in␣0.40,␣0.86␣fixed␣an␣important␣bug␣to␣make␣it␣safe␣for␣overloaded␣objects;␣the␣fixed␣first␣shipped␣with␣Perl␣in␣5.10.1␣as␣part␣of␣Test::More␣0.92.

=item␣C<new_ok()>␣C<note()>␣and␣C<explain()>

These␣were␣was␣released␣in␣Test::More␣0.82,␣and␣first␣shipped␣with␣Perl␣in␣5.10.1␣as␣part␣of␣Test::More␣0.92.␣

=back

There␣is␣a␣full␣version␣history␣in␣the␣Changes␣file,␣and␣the␣Test::More␣versions␣included␣as␣core␣can␣be␣found␣using␣L<Module::CoreList>:

␣␣␣␣$␣corelist␣-a␣Test::More


=head1␣CAVEATS␣and␣NOTES

=over␣4

=item␣utf8␣/␣"Wide␣character␣in␣print"

If␣you␣use␣utf8␣or␣other␣non-ASCII␣characters␣with␣Test::More␣you
might␣get␣a␣"Wide␣character␣in␣print"␣warning.␣␣Using
C<<␣binmode␣STDOUT,␣":utf8"␣>>␣will␣not␣fix␣it.
L<Test::Builder>␣(which␣powers
Test::More)␣duplicates␣STDOUT␣and␣STDERR.␣␣So␣any␣changes␣to␣them,
including␣changing␣their␣output␣disciplines,␣will␣not␣be␣seen␣by
Test::More.

One␣work␣around␣is␣to␣apply␣encodings␣to␣STDOUT␣and␣STDERR␣as␣early
as␣possible␣and␣before␣Test::More␣(or␣any␣other␣Test␣module)␣loads.

␣␣␣␣use␣open␣':std',␣':encoding(utf8)';
␣␣␣␣use␣Test::More;

A␣more␣direct␣work␣around␣is␣to␣change␣the␣filehandles␣used␣by
L<Test::Builder>.

␣␣␣␣my␣$builder␣=␣Test::More->builder;
␣␣␣␣binmode␣$builder->output,␣␣␣␣␣␣␣␣␣":encoding(utf8)";
␣␣␣␣binmode␣$builder->failure_output,␣":encoding(utf8)";
␣␣␣␣binmode␣$builder->todo_output,␣␣␣␣":encoding(utf8)";


=item␣Overloaded␣objects

String␣overloaded␣objects␣are␣compared␣B<as␣strings>␣(or␣in␣C<cmp_ok()>'s
case,␣strings␣or␣numbers␣as␣appropriate␣to␣the␣comparison␣op).␣␣This
prevents␣Test::More␣from␣piercing␣an␣object's␣interface␣allowing
better␣blackbox␣testing.␣␣So␣if␣a␣function␣starts␣returning␣overloaded
objects␣instead␣of␣bare␣strings␣your␣tests␣won't␣notice␣the
difference.␣␣This␣is␣good.

However,␣it␣does␣mean␣that␣functions␣like␣C<is_deeply()>␣cannot␣be␣used␣to
test␣the␣internals␣of␣string␣overloaded␣objects.␣␣In␣this␣case␣I␣would
suggest␣L<Test::Deep>␣which␣contains␣more␣flexible␣testing␣functions␣for
complex␣data␣structures.


=item␣Threads

Test::More␣will␣only␣be␣aware␣of␣threads␣if␣C<use␣threads>␣has␣been␣done
I<before>␣Test::More␣is␣loaded.␣␣This␣is␣ok:

␣␣␣␣use␣threads;
␣␣␣␣use␣Test::More;

This␣may␣cause␣problems:

␣␣␣␣use␣Test::More
␣␣␣␣use␣threads;

5.8.1␣and␣above␣are␣supported.␣␣Anything␣below␣that␣has␣too␣many␣bugs.

=back


=head1␣HISTORY

This␣is␣a␣case␣of␣convergent␣evolution␣with␣Joshua␣Pritikin's␣L<Test>
module.␣␣I␣was␣largely␣unaware␣of␣its␣existence␣when␣I'd␣first
written␣my␣own␣C<ok()>␣routines.␣␣This␣module␣exists␣because␣I␣can't
figure␣out␣how␣to␣easily␣wedge␣test␣names␣into␣Test's␣interface␣(along
with␣a␣few␣other␣problems).

The␣goal␣here␣is␣to␣have␣a␣testing␣utility␣that's␣simple␣to␣learn,
quick␣to␣use␣and␣difficult␣to␣trip␣yourself␣up␣with␣while␣still
providing␣more␣flexibility␣than␣the␣existing␣Test.pm.␣␣As␣such,␣the
names␣of␣the␣most␣common␣routines␣are␣kept␣tiny,␣special␣cases␣and
magic␣side-effects␣are␣kept␣to␣a␣minimum.␣␣WYSIWYG.


=head1␣SEE␣ALSO

=head2

=head2␣ALTERNATIVES

L<Test2::Suite>␣is␣the␣most␣recent␣and␣modern␣set␣of␣tools␣for␣testing.

L<Test::Simple>␣if␣all␣this␣confuses␣you␣and␣you␣just␣want␣to␣write
some␣tests.␣␣You␣can␣upgrade␣to␣Test::More␣later␣(it's␣forward
compatible).

L<Test::Legacy>␣tests␣written␣with␣Test.pm,␣the␣original␣testing
module,␣do␣not␣play␣well␣with␣other␣testing␣libraries.␣␣Test::Legacy
emulates␣the␣Test.pm␣interface␣and␣does␣play␣well␣with␣others.

=head2␣ADDITIONAL␣LIBRARIES

L<Test::Differences>␣for␣more␣ways␣to␣test␣complex␣data␣structures.
And␣it␣plays␣well␣with␣Test::More.

L<Test::Class>␣is␣like␣xUnit␣but␣more␣perlish.

L<Test::Deep>␣gives␣you␣more␣powerful␣complex␣data␣structure␣testing.

L<Test::Inline>␣shows␣the␣idea␣of␣embedded␣testing.

L<Mock::Quick>␣The␣ultimate␣mocking␣library.␣Easily␣spawn␣objects␣defined␣on
the␣fly.␣Can␣also␣override,␣block,␣or␣reimplement␣packages␣as␣needed.

L<Test::FixtureBuilder>␣Quickly␣define␣fixture␣data␣for␣unit␣tests.

=head2␣OTHER␣COMPONENTS

L<Test::Harness>␣is␣the␣test␣runner␣and␣output␣interpreter␣for␣Perl.
It's␣the␣thing␣that␣powers␣C<make␣test>␣and␣where␣the␣C<prove>␣utility
comes␣from.

=head2␣BUNDLES

L<Test::Most>␣Most␣commonly␣needed␣test␣functions␣and␣features.

=head1␣AUTHORS

Michael␣G␣Schwern␣E<lt>schwern@pobox.comE<gt>␣with␣much␣inspiration
from␣Joshua␣Pritikin's␣Test␣module␣and␣lots␣of␣help␣from␣Barrie
Slaymaker,␣Tony␣Bowden,␣blackstar.co.uk,␣chromatic,␣Fergal␣Daly␣and
the␣perl-qa␣gang.

=head1␣MAINTAINERS

=over␣4

=item␣Chad␣Granum␣E<lt>exodist@cpan.orgE<gt>

=back


=head1␣BUGS

See␣F<https://github.com/Test-More/test-more/issues>␣to␣report␣and␣view␣bugs.


=head1␣SOURCE

The␣source␣code␣repository␣for␣Test::More␣can␣be␣found␣at
F<http://github.com/Test-More/test-more/>.


=head1␣COPYRIGHT

Copyright␣2001-2008␣by␣Michael␣G␣Schwern␣E<lt>schwern@pobox.comE<gt>.

This␣program␣is␣free␣software;␣you␣can␣redistribute␣it␣and/or
modify␣it␣under␣the␣same␣terms␣as␣Perl␣itself.

See␣F<http://www.perl.com/perl/misc/Artistic.html>

=cut
----------
Range: (7517562,7519641) (2079)
=head1␣NAME

Env␣-␣perl␣module␣that␣imports␣environment␣variables␣as␣scalars␣or␣arrays

=head1␣SYNOPSIS

␣␣␣␣use␣Env;
␣␣␣␣use␣Env␣qw(PATH␣HOME␣TERM);
␣␣␣␣use␣Env␣qw($SHELL␣@LD_LIBRARY_PATH);

=head1␣DESCRIPTION

Perl␣maintains␣environment␣variables␣in␣a␣special␣hash␣named␣C<%ENV>.␣␣For
when␣this␣access␣method␣is␣inconvenient,␣the␣Perl␣module␣C<Env>␣allows
environment␣variables␣to␣be␣treated␣as␣scalar␣or␣array␣variables.

The␣C<Env::import()>␣function␣ties␣environment␣variables␣with␣suitable
names␣to␣global␣Perl␣variables␣with␣the␣same␣names.␣␣By␣default␣it
ties␣all␣existing␣environment␣variables␣(C<keys␣%ENV>)␣to␣scalars.␣␣If
the␣C<import>␣function␣receives␣arguments,␣it␣takes␣them␣to␣be␣a␣list␣of
variables␣to␣tie;␣it's␣okay␣if␣they␣don't␣yet␣exist.␣The␣scalar␣type
prefix␣'$'␣is␣inferred␣for␣any␣element␣of␣this␣list␣not␣prefixed␣by␣'$'
or␣'@'.␣Arrays␣are␣implemented␣in␣terms␣of␣C<split>␣and␣C<join>,␣using
C<$Config::Config{path_sep}>␣as␣the␣delimiter.

After␣an␣environment␣variable␣is␣tied,␣merely␣use␣it␣like␣a␣normal␣variable.
You␣may␣access␣its␣value␣

␣␣␣␣@path␣=␣split(/:/,␣$PATH);
␣␣␣␣print␣join("\n",␣@LD_LIBRARY_PATH),␣"\n";

or␣modify␣it

␣␣␣␣$PATH␣.=␣":/any/path";
␣␣␣␣push␣@LD_LIBRARY_PATH,␣$dir;

however␣you'd␣like.␣Bear␣in␣mind,␣however,␣that␣each␣access␣to␣a␣tied␣array
variable␣requires␣splitting␣the␣environment␣variable's␣string␣anew.

The␣code:

␣␣␣␣use␣Env␣qw(@PATH);
␣␣␣␣push␣@PATH,␣'/any/path';

is␣almost␣equivalent␣to:

␣␣␣␣use␣Env␣qw(PATH);
␣␣␣␣$PATH␣.=␣":/any/path";

except␣that␣if␣C<$ENV{PATH}>␣started␣out␣empty,␣the␣second␣approach␣leaves
it␣with␣the␣(odd)␣value␣"C<:/any/path>",␣but␣the␣first␣approach␣leaves␣it␣with
"C</any/path>".

To␣remove␣a␣tied␣environment␣variable␣from
the␣environment,␣assign␣it␣the␣undefined␣value

␣␣␣␣undef␣$PATH;
␣␣␣␣undef␣@LD_LIBRARY_PATH;

=head1␣LIMITATIONS

On␣VMS␣systems,␣arrays␣tied␣to␣environment␣variables␣are␣read-only.␣Attempting
to␣change␣anything␣will␣cause␣a␣warning.

=head1␣AUTHOR

Chip␣Salzenberg␣E<lt>F<chip@fin.uucp>E<gt>
and
Gregor␣N.␣Purdy␣E<lt>F<gregor@focusresearch.com>E<gt>

=cut
----------
Range: (7525942,7527444) (1502)
}

=head1␣NAME

Archive::Tar␣-␣module␣for␣manipulations␣of␣tar␣archives

=head1␣SYNOPSIS

␣␣␣␣use␣Archive::Tar;
␣␣␣␣my␣$tar␣=␣Archive::Tar->new;

␣␣␣␣$tar->read('origin.tgz');
␣␣␣␣$tar->extract();

␣␣␣␣$tar->add_files('file/foo.pl',␣'docs/README');
␣␣␣␣$tar->add_data('file/baz.txt',␣'This␣is␣the␣contents␣now');

␣␣␣␣$tar->rename('oldname',␣'new/file/name');
␣␣␣␣$tar->chown('/',␣'root');
␣␣␣␣$tar->chown('/',␣'root:root');
␣␣␣␣$tar->chmod('/tmp',␣'1777');

␣␣␣␣$tar->write('files.tar');␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣#␣plain␣tar
␣␣␣␣$tar->write('files.tgz',␣COMPRESS_GZIP);␣␣␣␣#␣gzip␣compressed
␣␣␣␣$tar->write('files.tbz',␣COMPRESS_BZIP);␣␣␣␣#␣bzip2␣compressed
␣␣␣␣$tar->write('files.txz',␣COMPRESS_XZ);␣␣␣␣␣␣#␣xz␣compressed

=head1␣DESCRIPTION

Archive::Tar␣provides␣an␣object␣oriented␣mechanism␣for␣handling␣tar
files.␣␣It␣provides␣class␣methods␣for␣quick␣and␣easy␣files␣handling
while␣also␣allowing␣for␣the␣creation␣of␣tar␣file␣objects␣for␣custom
manipulation.␣␣If␣you␣have␣the␣IO::Zlib␣module␣installed,
Archive::Tar␣will␣also␣support␣compressed␣or␣gzipped␣tar␣files.

An␣object␣of␣class␣Archive::Tar␣represents␣a␣.tar(.gz)␣archive␣full
of␣files␣and␣things.

=head1␣Object␣Methods

=head2␣Archive::Tar->new(␣[$file,␣$compressed]␣)

Returns␣a␣new␣Tar␣object.␣If␣given␣any␣arguments,␣C<new()>␣calls␣the
C<read()>␣method␣automatically,␣passing␣on␣the␣arguments␣provided␣to
the␣C<read()>␣method.

If␣C<new()>␣is␣invoked␣with␣arguments␣and␣the␣C<read()>␣method␣fails
for␣any␣reason,␣C<new()>␣returns␣undef.

=cut
----------
Range: (7528199,7530545) (2346)
}

=head2␣$tar->read␣(␣$filename|$handle,␣[$compressed,␣{opt␣=>␣'val'}]␣)

Read␣the␣given␣tar␣file␣into␣memory.
The␣first␣argument␣can␣either␣be␣the␣name␣of␣a␣file␣or␣a␣reference␣to
an␣already␣open␣filehandle␣(or␣an␣IO::Zlib␣object␣if␣it's␣compressed)

The␣C<read>␣will␣I<replace>␣any␣previous␣content␣in␣C<$tar>!

The␣second␣argument␣may␣be␣considered␣optional,␣but␣remains␣for
backwards␣compatibility.␣Archive::Tar␣now␣looks␣at␣the␣file
magic␣to␣determine␣what␣class␣should␣be␣used␣to␣open␣the␣file
and␣will␣transparently␣Do␣The␣Right␣Thing.

Archive::Tar␣will␣warn␣if␣you␣try␣to␣pass␣a␣bzip2␣/␣xz␣compressed␣file␣and␣the
IO::Uncompress::Bunzip2␣/␣IO::Uncompress::UnXz␣are␣not␣available␣and␣simply␣return.

Note␣that␣you␣can␣currently␣B<not>␣pass␣a␣C<gzip>␣compressed
filehandle,␣which␣is␣not␣opened␣with␣C<IO::Zlib>,␣a␣C<bzip2>␣compressed
filehandle,␣which␣is␣not␣opened␣with␣C<IO::Uncompress::Bunzip2>,␣a␣C<xz>␣compressed
filehandle,␣which␣is␣not␣opened␣with␣C<IO::Uncompress::UnXz>,␣nor␣a␣string
containing␣the␣full␣archive␣information␣(either␣compressed␣or
uncompressed).␣These␣are␣worth␣while␣features,␣but␣not␣currently
implemented.␣See␣the␣C<TODO>␣section.

The␣third␣argument␣can␣be␣a␣hash␣reference␣with␣options.␣Note␣that
all␣options␣are␣case-sensitive.

=over␣4

=item␣limit

Do␣not␣read␣more␣than␣C<limit>␣files.␣This␣is␣useful␣if␣you␣have
very␣big␣archives,␣and␣are␣only␣interested␣in␣the␣first␣few␣files.

=item␣filter

Can␣be␣set␣to␣a␣regular␣expression.␣␣Only␣files␣with␣names␣that␣match
the␣expression␣will␣be␣read.

=item␣md5

Set␣to␣1␣and␣the␣md5sum␣of␣files␣will␣be␣returned␣(instead␣of␣file␣data)
␣␣␣␣my␣$iter␣=␣Archive::Tar->iter(␣$file,␣␣1,␣{md5␣=>␣1}␣);
␣␣␣␣while(␣my␣$f␣=␣$iter->()␣)␣{
␣␣␣␣␣␣␣␣print␣$f->data␣.␣"\t"␣.␣$f->full_path␣.␣$/;
␣␣␣␣}

=item␣extract

If␣set␣to␣true,␣immediately␣extract␣entries␣when␣reading␣them.␣This
gives␣you␣the␣same␣memory␣break␣as␣the␣C<extract_archive>␣function.
Note␣however␣that␣entries␣will␣not␣be␣read␣into␣memory,␣but␣written
straight␣to␣disk.␣This␣means␣no␣C<Archive::Tar::File>␣objects␣are
created␣for␣you␣to␣inspect.

=back

All␣files␣are␣stored␣internally␣as␣C<Archive::Tar::File>␣objects.
Please␣consult␣the␣L<Archive::Tar::File>␣documentation␣for␣details.

Returns␣the␣number␣of␣files␣read␣in␣scalar␣context,␣and␣a␣list␣of
C<Archive::Tar::File>␣objects␣in␣list␣context.

=cut
----------
Range: (7578777,7580371) (1594)
}

=head1␣Class␣Methods

=head2␣Archive::Tar->create_archive($file,␣$compressed,␣@filelist)

Creates␣a␣tar␣file␣from␣the␣list␣of␣files␣provided.␣␣The␣first
argument␣can␣either␣be␣the␣name␣of␣the␣tar␣file␣to␣create␣or␣a
reference␣to␣an␣open␣file␣handle␣(e.g.␣a␣GLOB␣reference).

The␣second␣argument␣is␣used␣to␣indicate␣compression.␣You␣can
compress␣using␣C<gzip>,␣C<bzip2>␣or␣C<xz>.␣If␣you␣pass␣a␣digit,␣it's␣assumed
to␣be␣the␣C<gzip>␣compression␣level␣(between␣1␣and␣9),␣but␣the␣use␣of
constants␣is␣preferred:

␣␣#␣write␣a␣gzip␣compressed␣file
␣␣Archive::Tar->create_archive(␣'out.tgz',␣COMPRESS_GZIP,␣@filelist␣);

␣␣#␣write␣a␣bzip␣compressed␣file
␣␣Archive::Tar->create_archive(␣'out.tbz',␣COMPRESS_BZIP,␣@filelist␣);

␣␣#␣write␣a␣xz␣compressed␣file
␣␣Archive::Tar->create_archive(␣'out.txz',␣COMPRESS_XZ,␣@filelist␣);

Note␣that␣when␣you␣pass␣in␣a␣filehandle,␣the␣compression␣argument
is␣ignored,␣as␣all␣files␣are␣printed␣verbatim␣to␣your␣filehandle.
If␣you␣wish␣to␣enable␣compression␣with␣filehandles,␣use␣an
C<IO::Zlib>,␣C<IO::Compress::Bzip2>␣or␣C<IO::Compress::Xz>␣filehandle␣instead.

The␣remaining␣arguments␣list␣the␣files␣to␣be␣included␣in␣the␣tar␣file.
These␣files␣must␣all␣exist.␣Any␣files␣which␣don't␣exist␣or␣can't␣be
read␣are␣silently␣ignored.

If␣the␣archive␣creation␣fails␣for␣any␣reason,␣C<create_archive>␣will
return␣false.␣Please␣use␣the␣C<error>␣method␣to␣find␣the␣cause␣of␣the
failure.

Note␣that␣this␣method␣does␣not␣write␣C<on␣the␣fly>␣as␣it␣were;␣it
still␣reads␣all␣the␣files␣into␣memory␣before␣writing␣out␣the␣archive.
Consult␣the␣FAQ␣below␣if␣this␣is␣a␣problem.

=cut
----------
Range: (7588770,7591137) (2367)
}
␣␣␣␣}
}

=head1␣NAME

Archive::Tar::File␣-␣a␣subclass␣for␣in-memory␣extracted␣file␣from␣Archive::Tar

=head1␣SYNOPSIS

␣␣␣␣my␣@items␣=␣$tar->get_files;

␣␣␣␣print␣$_->name,␣'␣',␣$_->size,␣"\n"␣for␣@items;

␣␣␣␣print␣$object->get_content;
␣␣␣␣$object->replace_content('new␣content');

␣␣␣␣$object->rename(␣'new/full/path/to/file.c'␣);

=head1␣DESCRIPTION

Archive::Tar::Files␣provides␣a␣neat␣little␣object␣layer␣for␣in-memory
extracted␣files.␣It's␣mostly␣used␣internally␣in␣Archive::Tar␣to␣tidy
up␣the␣code,␣but␣there's␣no␣reason␣users␣shouldn't␣use␣this␣API␣as
well.

=head2␣Accessors

A␣lot␣of␣the␣methods␣in␣this␣package␣are␣accessors␣to␣the␣various
fields␣in␣the␣tar␣header:

=over␣4

=item␣name

The␣file's␣name

=item␣mode

The␣file's␣mode

=item␣uid

The␣user␣id␣owning␣the␣file

=item␣gid

The␣group␣id␣owning␣the␣file

=item␣size

File␣size␣in␣bytes

=item␣mtime

Modification␣time.␣Adjusted␣to␣mac-time␣on␣MacOS␣if␣required

=item␣chksum

Checksum␣field␣for␣the␣tar␣header

=item␣type

File␣type␣--␣numeric,␣but␣comparable␣to␣exported␣constants␣--␣see
Archive::Tar's␣documentation

=item␣linkname

If␣the␣file␣is␣a␣symlink,␣the␣file␣it's␣pointing␣to

=item␣magic

Tar␣magic␣string␣--␣not␣useful␣for␣most␣users

=item␣version

Tar␣version␣string␣--␣not␣useful␣for␣most␣users

=item␣uname

The␣user␣name␣that␣owns␣the␣file

=item␣gname

The␣group␣name␣that␣owns␣the␣file

=item␣devmajor

Device␣major␣number␣in␣case␣of␣a␣special␣file

=item␣devminor

Device␣minor␣number␣in␣case␣of␣a␣special␣file

=item␣prefix

Any␣directory␣to␣prefix␣to␣the␣extraction␣path,␣if␣any

=item␣raw

Raw␣tar␣header␣--␣not␣useful␣for␣most␣users

=back

=head1␣Methods

=head2␣Archive::Tar::File->new(␣file␣=>␣$path␣)

Returns␣a␣new␣Archive::Tar::File␣object␣from␣an␣existing␣file.

Returns␣undef␣on␣failure.

=head2␣Archive::Tar::File->new(␣data␣=>␣$path,␣$data,␣$opt␣)

Returns␣a␣new␣Archive::Tar::File␣object␣from␣data.

C<$path>␣defines␣the␣file␣name␣(which␣need␣not␣exist),␣C<$data>␣the
file␣contents,␣and␣C<$opt>␣is␣a␣reference␣to␣a␣hash␣of␣attributes
which␣may␣be␣used␣to␣override␣the␣default␣attributes␣(fields␣in␣the
tar␣header),␣which␣are␣described␣above␣in␣the␣Accessors␣section.

Returns␣undef␣on␣failure.

=head2␣Archive::Tar::File->new(␣chunk␣=>␣$chunk␣)

Returns␣a␣new␣Archive::Tar::File␣object␣from␣a␣raw␣512-byte␣tar
archive␣chunk.

Returns␣undef␣on␣failure.

=cut
----------
