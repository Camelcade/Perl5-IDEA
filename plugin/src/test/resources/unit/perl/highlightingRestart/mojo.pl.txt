File size: 949702
Re-highlighted ranges: 51680
Avg range size: 18.350677244582045
Min range size: 1
Max range size: 23913
10% of text has range <= 8
20% of text has range <= 16
30% of text has range <= 25
40% of text has range <= 65
50% of text has range <= 2801
60% of text has range <= 4735
70% of text has range <= 7223
80% of text has range <= 10612
90% of text has range <= 18943
----------
Range: (257534,276477) (18943)
=encoding␣utf8

=head1␣NAME

Mojolicious::Controller␣-␣Controller␣base␣class

=head1␣SYNOPSIS

␣␣#␣Controller
␣␣package␣MyApp::Controller::Foo;
␣␣use␣Mojo::Base␣'Mojolicious::Controller',␣-signatures;

␣␣#␣Action
␣␣sub␣bar␣($self)␣{
␣␣␣␣my␣$name␣=␣$self->param('name');
␣␣␣␣$self->res->headers->cache_control('max-age=1,␣no-cache');
␣␣␣␣$self->render(json␣=>␣{hello␣=>␣$name});
␣␣}

=head1␣DESCRIPTION

L<Mojolicious::Controller>␣is␣the␣base␣class␣for␣your␣L<Mojolicious>␣controllers.␣It␣is␣also␣the␣default␣controller
class␣unless␣you␣set␣L<Mojolicious/"controller_class">.

=head1␣ATTRIBUTES

L<Mojolicious::Controller>␣implements␣the␣following␣attributes.

=head2␣app

␣␣my␣$app␣=␣$c->app;
␣␣$c␣␣␣␣␣␣=␣$c->app(Mojolicious->new);

A␣reference␣back␣to␣the␣application␣that␣dispatched␣to␣this␣controller,␣usually␣a␣L<Mojolicious>␣object.␣Note␣that␣this
attribute␣is␣weakened.

␣␣#␣Use␣application␣logger
␣␣$c->app->log->debug('Hello␣Mojo');

␣␣#␣Generate␣path
␣␣my␣$path␣=␣$c->app->home->child('templates',␣'foo',␣'bar.html.ep');

=head2␣match

␣␣my␣$m␣=␣$c->match;
␣␣$c␣␣␣␣=␣$c->match(Mojolicious::Routes::Match->new);

Router␣results␣for␣the␣current␣request,␣defaults␣to␣a␣L<Mojolicious::Routes::Match>␣object.

␣␣#␣Introspect
␣␣my␣$name␣␣␣=␣$c->match->endpoint->name;
␣␣my␣$foo␣␣␣␣=␣$c->match->endpoint->pattern->defaults->{foo};
␣␣my␣$action␣=␣$c->match->stack->[-1]{action};

=head2␣tx

␣␣my␣$tx␣=␣$c->tx;
␣␣$c␣␣␣␣␣=␣$c->tx(Mojo::Transaction::HTTP->new);

The␣transaction␣that␣is␣currently␣being␣processed,␣usually␣a␣L<Mojo::Transaction::HTTP>␣or
L<Mojo::Transaction::WebSocket>␣object.␣Note␣that␣this␣attribute␣is␣weakened.␣So␣the␣object␣needs␣to␣be␣referenced
elsewhere␣as␣well␣when␣you're␣performing␣non-blocking␣operations␣and␣the␣underlying␣connection␣might␣get␣closed␣early.

␣␣#␣Check␣peer␣information
␣␣my␣$address␣=␣$c->tx->remote_address;
␣␣my␣$port␣␣␣␣=␣$c->tx->remote_port;

␣␣#␣Increase␣size␣limit␣for␣WebSocket␣messages␣to␣16MiB
␣␣$c->tx->max_websocket_size(16777216)␣if␣$c->tx->is_websocket;

␣␣#␣Perform␣non-blocking␣operation␣without␣knowing␣the␣connection␣status
␣␣my␣$tx␣=␣$c->tx;
␣␣Mojo::IOLoop->timer(2␣=>␣sub␣{
␣␣␣␣$c->app->log->debug($tx->is_finished␣?␣'Finished'␣:␣'In␣progress');
␣␣});

=head1␣METHODS

L<Mojolicious::Controller>␣inherits␣all␣methods␣from␣L<Mojo::Base>␣and␣implements␣the␣following␣new␣ones.

=head2␣continue

␣␣$c->continue;

Continue␣dispatch␣chain␣from␣an␣intermediate␣destination␣with␣L<Mojolicious::Routes/"continue">.

=head2␣cookie

␣␣my␣$value␣=␣$c->cookie('foo');
␣␣$c␣␣␣␣␣␣␣␣=␣$c->cookie(foo␣=>␣'bar');
␣␣$c␣␣␣␣␣␣␣␣=␣$c->cookie(foo␣=>␣'bar',␣{path␣=>␣'/'});

Access␣request␣cookie␣values␣and␣create␣new␣response␣cookies.␣If␣there␣are␣multiple␣values␣sharing␣the␣same␣name,␣and
you␣want␣to␣access␣more␣than␣just␣the␣last␣one,␣you␣can␣use␣L</"every_cookie">.

␣␣#␣Create␣response␣cookie␣with␣domain␣and␣expiration␣date
␣␣$c->cookie(user␣=>␣'sri',␣{domain␣=>␣'example.com',␣expires␣=>␣time␣+␣60});

␣␣#␣Create␣secure␣response␣cookie
␣␣$c->cookie(secret␣=>␣'I␣<3␣Mojolicious',␣{secure␣=>␣1,␣httponly␣=>␣1});

=head2␣every_cookie

␣␣my␣$values␣=␣$c->every_cookie('foo');

Similar␣to␣L</"cookie">,␣but␣returns␣all␣request␣cookie␣values␣sharing␣the␣same␣name␣as␣an␣array␣reference.

␣␣$␣Get␣first␣cookie␣value
␣␣my␣$first␣=␣$c->every_cookie('foo')->[0];

=head2␣every_param

␣␣my␣$values␣=␣$c->every_param('foo');

Similar␣to␣L</"param">,␣but␣returns␣all␣values␣sharing␣the␣same␣name␣as␣an␣array␣reference.

␣␣#␣Get␣first␣value
␣␣my␣$first␣=␣$c->every_param('foo')->[0];

=head2␣every_signed_cookie

␣␣my␣$values␣=␣$c->every_signed_cookie('foo');

Similar␣to␣L</"signed_cookie">,␣but␣returns␣all␣signed␣request␣cookie␣values␣sharing␣the␣same␣name␣as␣an␣array
reference.

␣␣#␣Get␣first␣signed␣cookie␣value
␣␣my␣$first␣=␣$c->every_signed_cookie('foo')->[0];

=head2␣finish

␣␣$c␣=␣$c->finish;
␣␣$c␣=␣$c->finish(1000);
␣␣$c␣=␣$c->finish(1003␣=>␣'Cannot␣accept␣data!');
␣␣$c␣=␣$c->finish('Bye!');

Close␣WebSocket␣connection␣or␣long␣poll␣stream␣gracefully.␣This␣method␣will␣automatically␣respond␣to␣WebSocket
handshake␣requests␣with␣a␣C<101>␣response␣status,␣to␣establish␣the␣WebSocket␣connection.

=head2␣helpers

␣␣my␣$helpers␣=␣$c->helpers;

Return␣a␣proxy␣object␣containing␣the␣current␣controller␣object␣and␣on␣which␣helpers␣provided␣by␣L</"app">␣can␣be
called.␣This␣includes␣all␣helpers␣from␣L<Mojolicious::Plugin::DefaultHelpers>␣and␣L<Mojolicious::Plugin::TagHelpers>.

␣␣#␣Make␣sure␣to␣use␣the␣"title"␣helper␣and␣not␣the␣controller␣method
␣␣$c->helpers->title('Welcome!');

␣␣#␣Use␣a␣nested␣helper␣instead␣of␣the␣"reply"␣controller␣method
␣␣$c->helpers->reply->not_found;

=head2␣on

␣␣my␣$cb␣=␣$c->on(finish␣=>␣sub␣{...});

Subscribe␣to␣events␣of␣L</"tx">,␣which␣is␣usually␣a␣L<Mojo::Transaction::HTTP>␣or␣L<Mojo::Transaction::WebSocket>
object.␣This␣method␣will␣automatically␣respond␣to␣WebSocket␣handshake␣requests␣with␣a␣C<101>␣response␣status,␣to
establish␣the␣WebSocket␣connection.

␣␣#␣Do␣something␣after␣the␣transaction␣has␣been␣finished
␣␣$c->on(finish␣=>␣sub␣($c)␣{
␣␣␣␣$c->app->log->debug('All␣data␣has␣been␣sent');
␣␣});

␣␣#␣Receive␣WebSocket␣message
␣␣$c->on(message␣=>␣sub␣($c,␣$msg)␣{
␣␣␣␣$c->app->log->debug("Message:␣$msg");
␣␣});

␣␣#␣Receive␣JSON␣object␣via␣WebSocket␣message
␣␣$c->on(json␣=>␣sub␣($c,␣$hash)␣{
␣␣␣␣$c->app->log->debug("Test:␣$hash->{test}");
␣␣});

␣␣#␣Receive␣WebSocket␣"Binary"␣message
␣␣$c->on(binary␣=>␣sub␣($c,␣$bytes)␣{
␣␣␣␣my␣$len␣=␣length␣$bytes;
␣␣␣␣$c->app->log->debug("Received␣$len␣bytes");
␣␣});

=head2␣param

␣␣my␣$value␣=␣$c->param('foo');
␣␣$c␣␣␣␣␣␣␣␣=␣$c->param(foo␣=>␣'ba;r');
␣␣$c␣␣␣␣␣␣␣␣=␣$c->param(foo␣=>␣'ba;r',␣'baz');
␣␣$c␣␣␣␣␣␣␣␣=␣$c->param(foo␣=>␣['ba;r',␣'baz']);

Access␣route␣placeholder␣values␣that␣are␣not␣reserved␣stash␣values,␣file␣uploads␣as␣well␣as␣C<GET>␣and␣C<POST>
parameters␣extracted␣from␣the␣query␣string␣and␣C<application/x-www-form-urlencoded>␣or␣C<multipart/form-data>␣message
body,␣in␣that␣order.␣If␣there␣are␣multiple␣values␣sharing␣the␣same␣name,␣and␣you␣want␣to␣access␣more␣than␣just␣the␣last
one,␣you␣can␣use␣L</"every_param">.␣Parts␣of␣the␣request␣body␣need␣to␣be␣loaded␣into␣memory␣to␣parse␣C<POST>
parameters,␣so␣you␣have␣to␣make␣sure␣it␣is␣not␣excessively␣large.␣There's␣a␣16MiB␣limit␣for␣requests␣by␣default.

␣␣#␣Get␣first␣value
␣␣my␣$first␣=␣$c->every_param('foo')->[0];

For␣more␣control␣you␣can␣also␣access␣request␣information␣directly.

␣␣#␣Only␣GET␣parameters
␣␣my␣$foo␣=␣$c->req->query_params->param('foo');

␣␣#␣Only␣POST␣parameters
␣␣my␣$foo␣=␣$c->req->body_params->param('foo');

␣␣#␣Only␣GET␣and␣POST␣parameters
␣␣my␣$foo␣=␣$c->req->param('foo');

␣␣#␣Only␣file␣uploads
␣␣my␣$foo␣=␣$c->req->upload('foo');

=head2␣render

␣␣my␣$bool␣=␣$c->render;
␣␣my␣$bool␣=␣$c->render(foo␣=>␣'bar',␣baz␣=>␣23);
␣␣my␣$bool␣=␣$c->render(template␣=>␣'foo/index');
␣␣my␣$bool␣=␣$c->render(template␣=>␣'index',␣format␣=>␣'html');
␣␣my␣$bool␣=␣$c->render(data␣=>␣$bytes);
␣␣my␣$bool␣=␣$c->render(text␣=>␣'Hello!');
␣␣my␣$bool␣=␣$c->render(json␣=>␣{foo␣=>␣'bar'});
␣␣my␣$bool␣=␣$c->render(handler␣=>␣'something');
␣␣my␣$bool␣=␣$c->render('foo/index');

Render␣content␣with␣L<Mojolicious/"renderer">␣and␣emit␣hooks␣L<Mojolicious/"before_render">␣as␣well␣as
L<Mojolicious/"after_render">,␣or␣dies␣if␣no␣response␣could␣be␣generated.␣All␣additional␣key/value␣pairs␣get␣merged␣into
the␣L</"stash">.

␣␣#␣Render␣characters
␣␣$c->render(text␣=>␣'I␣♥␣Mojolicious!');

␣␣#␣Render␣characters␣(alternative)
␣␣$c->stash(text␣=>␣'I␣♥␣Mojolicious!')->render;

␣␣#␣Render␣binary␣data
␣␣use␣Mojo::JSON␣qw(encode_json);
␣␣$c->render(data␣=>␣encode_json({test␣=>␣'I␣♥␣Mojolicious!'}));

␣␣#␣Render␣JSON
␣␣$c->render(json␣=>␣{test␣=>␣'I␣♥␣Mojolicious!'});

␣␣#␣Render␣inline␣template
␣␣$c->render(inline␣=>␣'<%=␣1␣+␣1␣%>');

␣␣#␣Render␣template␣"foo/bar.html.ep"
␣␣$c->render(template␣=>␣'foo/bar',␣format␣=>␣'html',␣handler␣=>␣'ep');

␣␣#␣Render␣template␣"test.*.*"␣with␣arbitrary␣values␣"foo"␣and␣"bar"
␣␣$c->render(template␣=>␣'test',␣foo␣=>␣'test',␣bar␣=>␣23);

␣␣#␣Render␣template␣"test.xml.*"
␣␣$c->render(template␣=>␣'test',␣format␣=>␣'xml');

␣␣#␣Render␣template␣"test.xml.*"␣(alternative)
␣␣$c->render('test',␣format␣=>␣'xml');

=head2␣render_later

␣␣$c␣=␣$c->render_later;

Disable␣automatic␣rendering␣to␣delay␣response␣generation,␣only␣necessary␣if␣automatic␣rendering␣would␣result␣in␣a
response.

␣␣#␣Delayed␣rendering
␣␣$c->render_later;
␣␣Mojo::IOLoop->timer(2␣=>␣sub␣{␣$c->render(text␣=>␣'Delayed␣by␣2␣seconds!')␣});

=head2␣render_maybe

␣␣my␣$bool␣=␣$c->render_maybe;
␣␣my␣$bool␣=␣$c->render_maybe(foo␣=>␣'bar',␣baz␣=>␣23);
␣␣my␣$bool␣=␣$c->render_maybe('foo/index',␣format␣=>␣'html');

Try␣to␣render␣content,␣but␣do␣not␣call␣L<Mojolicious::Plugin::DefaultHelpers/"reply-E<gt>not_found">␣if␣no␣response
could␣be␣generated,␣all␣arguments␣get␣localized␣automatically␣and␣are␣only␣available␣during␣this␣render␣operation,
takes␣the␣same␣arguments␣as␣L</"render">.

␣␣#␣Render␣template␣"index_local"␣only␣if␣it␣exists
␣␣$c->render_maybe('index_local')␣or␣$c->render('index');

=head2␣render_to_string

␣␣my␣$output␣=␣$c->render_to_string('foo/index',␣format␣=>␣'pdf');

Try␣to␣render␣content␣and␣return␣it␣wrapped␣in␣a␣L<Mojo::ByteStream>␣object␣or␣return␣C<undef>,␣all␣arguments␣get
localized␣automatically␣and␣are␣only␣available␣during␣this␣render␣operation,␣takes␣the␣same␣arguments␣as␣L</"render">.

␣␣#␣Render␣inline␣template
␣␣my␣$two␣=␣$c->render_to_string(inline␣=>␣'<%=␣1␣+␣1␣%>');

=head2␣rendered

␣␣$c␣=␣$c->rendered;
␣␣$c␣=␣$c->rendered(302);

Finalize␣response␣and␣emit␣hook␣L<Mojolicious/"after_dispatch">,␣defaults␣to␣using␣a␣C<200>␣response␣code.

␣␣#␣Custom␣response
␣␣$c->res->headers->content_type('text/plain');
␣␣$c->res->body('Hello␣World!');
␣␣$c->rendered(200);

=head2␣req

␣␣my␣$req␣=␣$c->req;

Get␣L<Mojo::Message::Request>␣object␣from␣L</"tx">.

␣␣#␣Longer␣version
␣␣my␣$req␣=␣$c->tx->req;

␣␣#␣Extract␣request␣information
␣␣my␣$id␣␣␣␣␣=␣$c->req->request_id;
␣␣my␣$method␣=␣$c->req->method;
␣␣my␣$url␣␣␣␣=␣$c->req->url->to_abs;
␣␣my␣$info␣␣␣=␣$c->req->url->to_abs->userinfo;
␣␣my␣$host␣␣␣=␣$c->req->url->to_abs->host;
␣␣my␣$agent␣␣=␣$c->req->headers->user_agent;
␣␣my␣$custom␣=␣$c->req->headers->header('Custom-Header');
␣␣my␣$bytes␣␣=␣$c->req->body;
␣␣my␣$str␣␣␣␣=␣$c->req->text;
␣␣my␣$hash␣␣␣=␣$c->req->params->to_hash;
␣␣my␣$all␣␣␣␣=␣$c->req->uploads;
␣␣my␣$value␣␣=␣$c->req->json;
␣␣my␣$foo␣␣␣␣=␣$c->req->json('/23/foo');
␣␣my␣$dom␣␣␣␣=␣$c->req->dom;
␣␣my␣$bar␣␣␣␣=␣$c->req->dom('div.bar')->first->text;

=head2␣res

␣␣my␣$res␣=␣$c->res;

Get␣L<Mojo::Message::Response>␣object␣from␣L</"tx">.

␣␣#␣Longer␣version
␣␣my␣$res␣=␣$c->tx->res;

␣␣#␣Force␣file␣download␣by␣setting␣a␣response␣header
␣␣$c->res->headers->content_disposition('attachment;␣filename=foo.png;');

␣␣#␣Use␣a␣custom␣response␣header
␣␣$c->res->headers->header('Custom-Header'␣=>␣'whatever');

␣␣#␣Make␣sure␣response␣is␣cached␣correctly
␣␣$c->res->headers->cache_control('public,␣max-age=300');
␣␣$c->res->headers->append(Vary␣=>␣'Accept-Encoding');

=head2␣send

␣␣$c␣=␣$c->send({binary␣=>␣$bytes});
␣␣$c␣=␣$c->send({text␣␣␣=>␣$bytes});
␣␣$c␣=␣$c->send({json␣␣␣=>␣{test␣=>␣[1,␣2,␣3]}});
␣␣$c␣=␣$c->send([$fin,␣$rsv1,␣$rsv2,␣$rsv3,␣$op,␣$payload]);
␣␣$c␣=␣$c->send($chars);
␣␣$c␣=␣$c->send($chars␣=>␣sub␣($c)␣{...});

Send␣message␣or␣frame␣non-blocking␣via␣WebSocket,␣the␣optional␣drain␣callback␣will␣be␣executed␣once␣all␣data␣has␣been
written.␣This␣method␣will␣automatically␣respond␣to␣WebSocket␣handshake␣requests␣with␣a␣C<101>␣response␣status,␣to
establish␣the␣WebSocket␣connection.

␣␣#␣Send␣"Text"␣message
␣␣$c->send('I␣♥␣Mojolicious!');

␣␣#␣Send␣JSON␣object␣as␣"Text"␣message
␣␣$c->send({json␣=>␣{test␣=>␣'I␣♥␣Mojolicious!'}});

␣␣#␣Send␣JSON␣object␣as␣"Binary"␣message
␣␣use␣Mojo::JSON␣qw(encode_json);
␣␣$c->send({binary␣=>␣encode_json({test␣=>␣'I␣♥␣Mojolicious!'})});

␣␣#␣Send␣"Ping"␣frame
␣␣use␣Mojo::WebSocket␣qw(WS_PING);
␣␣$c->send([1,␣0,␣0,␣0,␣WS_PING,␣'Hello␣World!']);

␣␣#␣Make␣sure␣the␣first␣message␣has␣been␣written␣before␣continuing
␣␣$c->send('First␣message!'␣=>␣sub␣($c)␣{␣$c->send('Second␣message!')␣});

For␣mostly␣idle␣WebSockets␣you␣might␣also␣want␣to␣increase␣the␣inactivity␣timeout␣with
L<Mojolicious::Plugin::DefaultHelpers/"inactivity_timeout">,␣which␣usually␣defaults␣to␣C<30>␣seconds.

␣␣#␣Increase␣inactivity␣timeout␣for␣connection␣to␣300␣seconds
␣␣$c->inactivity_timeout(300);

=head2␣session

␣␣my␣$session␣=␣$c->session;
␣␣my␣$foo␣␣␣␣␣=␣$c->session('foo');
␣␣$c␣␣␣␣␣␣␣␣␣␣=␣$c->session({foo␣=>␣'bar'});
␣␣$c␣␣␣␣␣␣␣␣␣␣=␣$c->session(foo␣=>␣'bar');

Persistent␣data␣storage␣for␣the␣next␣few␣requests,␣all␣session␣data␣gets␣serialized␣with␣L<Mojo::JSON>␣and␣stored
Base64␣encoded␣in␣HMAC-SHA256␣signed␣cookies,␣to␣prevent␣tampering.␣Note␣that␣cookies␣usually␣have␣a␣C<4096>␣byte
(4KiB)␣limit,␣depending␣on␣browser.

␣␣#␣Manipulate␣session
␣␣$c->session->{foo}␣=␣'bar';
␣␣my␣$foo␣=␣$c->session->{foo};
␣␣delete␣$c->session->{foo};

␣␣#␣Expiration␣date␣in␣seconds␣from␣now␣(persists␣between␣requests)
␣␣$c->session(expiration␣=>␣604800);

␣␣#␣Expiration␣date␣as␣absolute␣epoch␣time␣(only␣valid␣for␣one␣request)
␣␣$c->session(expires␣=>␣time␣+␣604800);

␣␣#␣Delete␣whole␣session␣by␣setting␣an␣expiration␣date␣in␣the␣past
␣␣$c->session(expires␣=>␣1);

=head2␣signed_cookie

␣␣my␣$value␣=␣$c->signed_cookie('foo');
␣␣$c␣␣␣␣␣␣␣␣=␣$c->signed_cookie(foo␣=>␣'bar');
␣␣$c␣␣␣␣␣␣␣␣=␣$c->signed_cookie(foo␣=>␣'bar',␣{path␣=>␣'/'});

Access␣signed␣request␣cookie␣values␣and␣create␣new␣signed␣response␣cookies.␣If␣there␣are␣multiple␣values␣sharing␣the
same␣name,␣and␣you␣want␣to␣access␣more␣than␣just␣the␣last␣one,␣you␣can␣use␣L</"every_signed_cookie">.␣Cookies␣are
cryptographically␣signed␣with␣HMAC-SHA256,␣to␣prevent␣tampering,␣and␣the␣ones␣failing␣signature␣verification␣will␣be
automatically␣discarded.

=head2␣stash

␣␣my␣$hash␣=␣$c->stash;
␣␣my␣$foo␣␣=␣$c->stash('foo');
␣␣$c␣␣␣␣␣␣␣=␣$c->stash({foo␣=>␣'bar',␣baz␣=>␣23});
␣␣$c␣␣␣␣␣␣␣=␣$c->stash(foo␣=>␣'bar',␣baz␣=>␣23);

Non-persistent␣data␣storage␣and␣exchange␣for␣the␣current␣request,␣application␣wide␣default␣values␣can␣be␣set␣with
L<Mojolicious/"defaults">.␣Some␣stash␣values␣have␣a␣special␣meaning␣and␣are␣reserved,␣the␣full␣list␣is␣currently
C<action>,␣C<app>,␣C<cb>,␣C<controller>,␣C<data>,␣C<extends>,␣C<format>,␣C<handler>,␣C<inline>,␣C<json>,␣C<layout>,
C<namespace>,␣C<path>,␣C<status>,␣C<template>,␣C<text>␣and␣C<variant>.␣Note␣that␣all␣stash␣values␣with␣a␣C<mojo.*>
prefix␣are␣reserved␣for␣internal␣use.

␣␣#␣Remove␣value
␣␣my␣$foo␣=␣delete␣$c->stash->{foo};

␣␣#␣Assign␣multiple␣values␣at␣once
␣␣$c->stash(foo␣=>␣'test',␣bar␣=>␣23);

=head2␣url_for

␣␣my␣$url␣=␣$c->url_for;
␣␣my␣$url␣=␣$c->url_for(name␣=>␣'sebastian');
␣␣my␣$url␣=␣$c->url_for({name␣=>␣'sebastian'});
␣␣my␣$url␣=␣$c->url_for('test',␣name␣=>␣'sebastian');
␣␣my␣$url␣=␣$c->url_for('test',␣{name␣=>␣'sebastian'});
␣␣my␣$url␣=␣$c->url_for('/index.html');
␣␣my␣$url␣=␣$c->url_for('//example.com/index.html');
␣␣my␣$url␣=␣$c->url_for('http://example.com/index.html');
␣␣my␣$url␣=␣$c->url_for('mailto:sri@example.com');
␣␣my␣$url␣=␣$c->url_for('#whatever');

Generate␣a␣portable␣L<Mojo::URL>␣object␣with␣base␣for␣a␣path,␣URL␣or␣route.

␣␣#␣Rebuild␣URL␣for␣the␣current␣route
␣␣$c->url_for;

␣␣#␣Rebuild␣URL␣for␣the␣current␣route,␣but␣replace␣the␣"name"␣placeholder␣value
␣␣$c->url_for(name␣=>␣'sebastian');

␣␣#␣Absolute␣URL␣for␣the␣current␣route
␣␣$c->url_for->to_abs;

␣␣#␣Build␣URL␣for␣route␣"test"␣with␣two␣placeholder␣values
␣␣$c->url_for('test',␣name␣=>␣'sebastian',␣foo␣=>␣'bar');

␣␣#␣"http://127.0.0.1:3000/index.html"␣if␣application␣was␣started␣with␣Morbo
␣␣$c->url_for('/index.html')->to_abs;

␣␣#␣"https://127.0.0.1:443/index.html"␣if␣application␣was␣started␣with␣Morbo
␣␣$c->url_for('/index.html')->to_abs->scheme('https')->port(443);

␣␣#␣"/index.html?foo=bar"␣if␣application␣is␣deployed␣under␣"/"
␣␣$c->url_for('/index.html')->query(foo␣=>␣'bar');

␣␣#␣"/myapp/index.html?foo=bar"␣if␣application␣is␣deployed␣under␣"/myapp"
␣␣$c->url_for('/index.html')->query(foo␣=>␣'bar');

You␣can␣also␣use␣the␣helper␣L<Mojolicious::Plugin::DefaultHelpers/"url_with">␣to␣inherit␣query␣parameters␣from␣the
current␣request.

␣␣#␣"/list?q=mojo&page=2"␣if␣current␣request␣was␣for␣"/list?q=mojo&page=1"
␣␣$c->url_with->query({page␣=>␣2});


=head2␣url_for_asset

␣␣my␣$url␣=␣$c->url_for_asset('/app.js');

Generate␣a␣portable␣L<Mojo::URL>␣object␣with␣base␣for␣a␣static␣asset.

=head2␣write

␣␣$c␣=␣$c->write;
␣␣$c␣=␣$c->write('');
␣␣$c␣=␣$c->write($bytes);
␣␣$c␣=␣$c->write($bytes␣=>␣sub␣($c)␣{...});

Write␣dynamic␣content␣non-blocking,␣the␣optional␣drain␣callback␣will␣be␣executed␣once␣all␣data␣has␣been␣written.
Calling␣this␣method␣without␣a␣chunk␣of␣data␣will␣finalize␣the␣response␣headers␣and␣allow␣for␣dynamic␣content␣to␣be
written␣later.

␣␣#␣Keep␣connection␣alive␣(with␣Content-Length␣header)
␣␣$c->res->headers->content_length(6);
␣␣$c->write('Hel'␣=>␣sub␣($c)␣{␣$c->write('lo!')␣});

␣␣#␣Close␣connection␣when␣finished␣(without␣Content-Length␣header)
␣␣$c->write('Hel'␣=>␣sub␣($c)␣{
␣␣␣␣$c->write('lo!'␣=>␣sub␣($c)␣{␣$c->finish␣});
␣␣});

You␣can␣call␣L</"finish">␣or␣write␣an␣empty␣chunk␣of␣data␣at␣any␣time␣to␣end␣the␣stream.

␣␣HTTP/1.1␣200␣OK
␣␣Date:␣Sat,␣13␣Sep␣2014␣16:48:29␣GMT
␣␣Content-Length:␣6
␣␣Server:␣Mojolicious␣(Perl)

␣␣Hello!

␣␣HTTP/1.1␣200␣OK
␣␣Connection:␣close
␣␣Date:␣Sat,␣13␣Sep␣2014␣16:48:29␣GMT
␣␣Server:␣Mojolicious␣(Perl)

␣␣Hello!

For␣Comet␣(long␣polling)␣you␣might␣also␣want␣to␣increase␣the␣inactivity␣timeout␣with
L<Mojolicious::Plugin::DefaultHelpers/"inactivity_timeout">,␣which␣usually␣defaults␣to␣C<30>␣seconds.

␣␣#␣Increase␣inactivity␣timeout␣for␣connection␣to␣300␣seconds
␣␣$c->inactivity_timeout(300);

=head2␣write_chunk

␣␣$c␣=␣$c->write_chunk;
␣␣$c␣=␣$c->write_chunk('');
␣␣$c␣=␣$c->write_chunk($bytes);
␣␣$c␣=␣$c->write_chunk($bytes␣=>␣sub␣($c)␣{...});

Write␣dynamic␣content␣non-blocking␣with␣chunked␣transfer␣encoding,␣the␣optional␣drain␣callback␣will␣be␣executed␣once
all␣data␣has␣been␣written.␣Calling␣this␣method␣without␣a␣chunk␣of␣data␣will␣finalize␣the␣response␣headers␣and␣allow␣for
dynamic␣content␣to␣be␣written␣later.

␣␣#␣Make␣sure␣previous␣chunk␣has␣been␣written␣before␣continuing
␣␣$c->write_chunk('H'␣=>␣sub␣($c)␣{
␣␣␣␣$c->write_chunk('ell'␣=>␣sub␣($c)␣{␣$c->finish('o!')␣});
␣␣});

You␣can␣call␣L</"finish">␣or␣write␣an␣empty␣chunk␣of␣data␣at␣any␣time␣to␣end␣the␣stream.

␣␣HTTP/1.1␣200␣OK
␣␣Date:␣Sat,␣13␣Sep␣2014␣16:48:29␣GMT
␣␣Transfer-Encoding:␣chunked
␣␣Server:␣Mojolicious␣(Perl)

␣␣1
␣␣H
␣␣3
␣␣ell
␣␣2
␣␣o!
␣␣0

=head1␣HELPERS

In␣addition␣to␣the␣L</"ATTRIBUTES">␣and␣L</"METHODS">␣above␣you␣can␣also␣call␣helpers␣provided␣by␣L</"app">␣on
L<Mojolicious::Controller>␣objects.␣This␣includes␣all␣helpers␣from␣L<Mojolicious::Plugin::DefaultHelpers>␣and
L<Mojolicious::Plugin::TagHelpers>.

␣␣#␣Call␣helpers
␣␣$c->layout('green');
␣␣$c->title('Welcome!');

␣␣#␣Longer␣version
␣␣$c->helpers->layout('green');

=head1␣SEE␣ALSO

L<Mojolicious>,␣L<Mojolicious::Guides>,␣L<https://mojolicious.org>.

=cut
----------
Range: (315904,337508) (21604)
=encoding␣utf8

=head1␣NAME

Test::Mojo␣-␣Testing␣Mojo

=head1␣SYNOPSIS

␣␣use␣Test::More;
␣␣use␣Test::Mojo;

␣␣my␣$t␣=␣Test::Mojo->new('MyApp');

␣␣#␣HTML/XML
␣␣$t->get_ok('/welcome')->status_is(200)->text_is('div#message'␣=>␣'Hello!');

␣␣#␣JSON
␣␣$t->post_ok('/search.json'␣=>␣form␣=>␣{q␣=>␣'Perl'})
␣␣␣␣->status_is(200)
␣␣␣␣->header_is('Server'␣=>␣'Mojolicious␣(Perl)')
␣␣␣␣->header_isnt('X-Bender'␣=>␣'Bite␣my␣shiny␣metal␣ass!')
␣␣␣␣->json_is('/results/4/title'␣=>␣'Perl␣rocks!')
␣␣␣␣->json_like('/results/7/title'␣=>␣qr/Perl/);

␣␣#␣WebSocket
␣␣$t->websocket_ok('/echo')
␣␣␣␣->send_ok('hello')
␣␣␣␣->message_ok
␣␣␣␣->message_is('echo:␣hello')
␣␣␣␣->finish_ok;

␣␣done_testing();

=head1␣DESCRIPTION

L<Test::Mojo>␣is␣a␣test␣user␣agent␣based␣on␣L<Mojo::UserAgent>,␣it␣is␣usually␣used␣together␣with␣L<Test::More>␣to␣test
L<Mojolicious>␣applications.␣Just␣run␣your␣tests␣with␣L<prove>.

␣␣$␣prove␣-l␣-v
␣␣$␣prove␣-l␣-v␣t/foo.t

If␣it␣is␣not␣already␣defined,␣the␣C<MOJO_LOG_LEVEL>␣environment␣variable␣will␣be␣set␣to␣C<trace>␣or␣C<fatal>,␣depending
on␣the␣value␣of␣the␣C<HARNESS_IS_VERBOSE>␣environment␣variable.␣And␣to␣make␣it␣esier␣to␣test␣HTTPS/WSS␣web␣services
L<Mojo::UserAgent/"insecure">␣will␣be␣activated␣by␣default␣for␣L</"ua">.

See␣L<Mojolicious::Guides::Testing>␣for␣more.

=head1␣ATTRIBUTES

L<Test::Mojo>␣implements␣the␣following␣attributes.

=head2␣handler

␣␣my␣$cb␣=␣$t->handler;
␣␣$t␣␣␣␣␣=␣$t->handler(sub␣{...});

A␣callback␣to␣connect␣L<Test::Mojo>␣with␣L<Test::More>.

␣␣$t->handler(sub␣($name,␣@args)␣{
␣␣␣␣return␣Test::More->can($name)->(@args);
␣␣});

=head2␣message

␣␣my␣$msg␣=␣$t->message;
␣␣$t␣␣␣␣␣␣=␣$t->message([text␣=>␣$bytes]);

Current␣WebSocket␣message␣represented␣as␣an␣array␣reference␣containing␣the␣frame␣type␣and␣payload.

␣␣#␣More␣specific␣tests
␣␣use␣Mojo::JSON␣qw(decode_json);
␣␣my␣$hash␣=␣decode_json␣$t->message->[1];
␣␣is␣ref␣$hash,␣'HASH',␣'right␣reference';
␣␣is␣$hash->{foo},␣'bar',␣'right␣value';

␣␣#␣Test␣custom␣message
␣␣$t->message([binary␣=>␣$bytes])
␣␣␣␣->json_message_has('/foo/bar')
␣␣␣␣->json_message_hasnt('/bar')
␣␣␣␣->json_message_is('/foo/baz'␣=>␣{yada␣=>␣[1,␣2,␣3]});

=head2␣success

␣␣my␣$bool␣=␣$t->success;
␣␣$t␣␣␣␣␣␣␣=␣$t->success($bool);

True␣if␣the␣last␣test␣was␣successful.

␣␣#␣Build␣custom␣tests
␣␣my␣$location_is␣=␣sub␣($t,␣$value,␣$desc␣=␣'')␣{
␣␣␣␣$desc␣||=␣"Location:␣$value";
␣␣␣␣local␣$Test::Builder::Level␣=␣$Test::Builder::Level␣+␣1;
␣␣␣␣return␣$t->success(is($t->tx->res->headers->location,␣$value,␣$desc));
␣␣};
␣␣$t->get_ok('/')
␣␣␣␣->status_is(302)
␣␣␣␣->$location_is('https://mojolicious.org')
␣␣␣␣->or(sub␣{␣diag␣'Must␣have␣been␣Joel!'␣});

=head2␣tx

␣␣my␣$tx␣=␣$t->tx;
␣␣$t␣␣␣␣␣=␣$t->tx(Mojo::Transaction::HTTP->new);

Current␣transaction,␣usually␣a␣L<Mojo::Transaction::HTTP>␣or␣L<Mojo::Transaction::WebSocket>␣object.

␣␣#␣More␣specific␣tests
␣␣is␣$t->tx->res->json->{foo},␣'bar',␣'right␣value';
␣␣ok␣$t->tx->res->content->is_multipart,␣'multipart␣content';
␣␣is␣$t->tx->previous->res->code,␣302,␣'right␣status';

=head2␣ua

␣␣my␣$ua␣=␣$t->ua;
␣␣$t␣␣␣␣␣=␣$t->ua(Mojo::UserAgent->new);

User␣agent␣used␣for␣testing,␣defaults␣to␣a␣L<Mojo::UserAgent>␣object.

␣␣#␣Allow␣redirects
␣␣$t->ua->max_redirects(10);
␣␣$t->get_ok('/redirect')->status_is(200)->content_like(qr/redirected/);

␣␣#␣Switch␣protocol␣from␣HTTP␣to␣HTTPS
␣␣$t->ua->server->url('https');
␣␣$t->get_ok('/secure')->status_is(200)->content_like(qr/secure/);

␣␣#␣Use␣absolute␣URL␣for␣request␣with␣Basic␣authentication
␣␣my␣$url␣=␣$t->ua->server->url->userinfo('sri:secr3t')->path('/secrets.json');
␣␣$t->post_ok($url␣=>␣json␣=>␣{limit␣=>␣10})
␣␣␣␣->status_is(200)
␣␣␣␣->json_is('/1/content',␣'Mojo␣rocks!');

␣␣#␣Customize␣all␣transactions␣(including␣followed␣redirects)
␣␣$t->ua->on(start␣=>␣sub␣($ua,␣$tx)␣{␣$tx->req->headers->accept_language('en-US')␣});
␣␣$t->get_ok('/hello')->status_is(200)->content_like(qr/Howdy/);

=head1␣METHODS

L<Test::Mojo>␣inherits␣all␣methods␣from␣L<Mojo::Base>␣and␣implements␣the␣following␣new␣ones.

=head2␣app

␣␣my␣$app␣=␣$t->app;
␣␣$t␣␣␣␣␣␣=␣$t->app(Mojolicious->new);

Access␣application␣with␣L<Mojo::UserAgent::Server/"app">.

␣␣#␣Change␣log␣level
␣␣$t->app->log->level('fatal');

␣␣#␣Test␣application␣directly
␣␣is␣$t->app->defaults->{foo},␣'bar',␣'right␣value';
␣␣ok␣$t->app->routes->find('echo')->is_websocket,␣'WebSocket␣route';
␣␣my␣$c␣=␣$t->app->build_controller;
␣␣ok␣$c->render(template␣=>␣'foo'),␣'rendering␣was␣successful';
␣␣is␣$c->res->status,␣200,␣'right␣status';
␣␣is␣$c->res->body,␣'Foo!',␣'right␣content';

␣␣#␣Change␣application␣behavior
␣␣$t->app->hook(before_dispatch␣=>␣sub␣($c)␣{
␣␣␣␣$c->render(text␣=>␣'This␣request␣did␣not␣reach␣the␣router.')␣if␣$c->req->url->path->contains('/user');
␣␣});
␣␣$t->get_ok('/user')->status_is(200)->content_like(qr/not␣reach␣the␣router/);

␣␣#␣Extract␣additional␣information
␣␣my␣$stash;
␣␣$t->app->hook(after_dispatch␣=>␣sub␣($c)␣{␣$stash␣=␣$c->stash␣});
␣␣$t->get_ok('/hello')->status_is(200);
␣␣is␣$stash->{foo},␣'bar',␣'right␣value';

=head2␣attr_is

␣␣$t␣=␣$t->attr_is('img.cat',␣'alt',␣'Grumpy␣cat');
␣␣$t␣=␣$t->attr_is('img.cat',␣'alt',␣'Grumpy␣cat',␣'right␣alt␣text');

Checks␣text␣content␣of␣attribute␣with␣L<Mojo::DOM/"attr">␣at␣the␣CSS␣selectors␣first␣matching␣HTML/XML␣element␣for
exact␣match␣with␣L<Mojo::DOM/"at">.

=head2␣attr_isnt

␣␣$t␣=␣$t->attr_isnt('img.cat',␣'alt',␣'Calm␣cat');
␣␣$t␣=␣$t->attr_isnt('img.cat',␣'alt',␣'Calm␣cat',␣'different␣alt␣text');

Opposite␣of␣L</"attr_is">.

=head2␣attr_like

␣␣$t␣=␣$t->attr_like('img.cat',␣'alt',␣qr/Grumpy/);
␣␣$t␣=␣$t->attr_like('img.cat',␣'alt',␣qr/Grumpy/,␣'right␣alt␣text');

Checks␣text␣content␣of␣attribute␣with␣L<Mojo::DOM/"attr">␣at␣the␣CSS␣selectors␣first␣matching␣HTML/XML␣element␣for
similar␣match␣with␣L<Mojo::DOM/"at">.

=head2␣attr_unlike

␣␣$t␣=␣$t->attr_unlike('img.cat',␣'alt',␣qr/Calm/);
␣␣$t␣=␣$t->attr_unlike('img.cat',␣'alt',␣qr/Calm/,␣'different␣alt␣text');

Opposite␣of␣L</"attr_like">.

=head2␣content_is

␣␣$t␣=␣$t->content_is('working!');
␣␣$t␣=␣$t->content_is('working!',␣'right␣content');

Check␣response␣content␣for␣exact␣match␣after␣retrieving␣it␣from␣L<Mojo::Message/"text">.

=head2␣content_isnt

␣␣$t␣=␣$t->content_isnt('working!');
␣␣$t␣=␣$t->content_isnt('working!',␣'different␣content');

Opposite␣of␣L</"content_is">.

=head2␣content_like

␣␣$t␣=␣$t->content_like(qr/working!/);
␣␣$t␣=␣$t->content_like(qr/working!/,␣'right␣content');

Check␣response␣content␣for␣similar␣match␣after␣retrieving␣it␣from␣L<Mojo::Message/"text">.

=head2␣content_type_is

␣␣$t␣=␣$t->content_type_is('text/html');
␣␣$t␣=␣$t->content_type_is('text/html',␣'right␣content␣type');

Check␣response␣C<Content-Type>␣header␣for␣exact␣match.

=head2␣content_type_isnt

␣␣$t␣=␣$t->content_type_isnt('text/html');
␣␣$t␣=␣$t->content_type_isnt('text/html',␣'different␣content␣type');

Opposite␣of␣L</"content_type_is">.

=head2␣content_type_like

␣␣$t␣=␣$t->content_type_like(qr/text/);
␣␣$t␣=␣$t->content_type_like(qr/text/,␣'right␣content␣type');

Check␣response␣C<Content-Type>␣header␣for␣similar␣match.

=head2␣content_type_unlike

␣␣$t␣=␣$t->content_type_unlike(qr/text/);
␣␣$t␣=␣$t->content_type_unlike(qr/text/,␣'different␣content␣type');

Opposite␣of␣L</"content_type_like">.

=head2␣content_unlike

␣␣$t␣=␣$t->content_unlike(qr/working!/);
␣␣$t␣=␣$t->content_unlike(qr/working!/,␣'different␣content');

Opposite␣of␣L</"content_like">.

=head2␣delete_ok

␣␣$t␣=␣$t->delete_ok('http://example.com/foo');
␣␣$t␣=␣$t->delete_ok('/foo');
␣␣$t␣=␣$t->delete_ok('/foo'␣=>␣{Accept␣=>␣'*/*'}␣=>␣'Content!');
␣␣$t␣=␣$t->delete_ok('/foo'␣=>␣{Accept␣=>␣'*/*'}␣=>␣form␣=>␣{a␣=>␣'b'});
␣␣$t␣=␣$t->delete_ok('/foo'␣=>␣{Accept␣=>␣'*/*'}␣=>␣json␣=>␣{a␣=>␣'b'});

Perform␣a␣C<DELETE>␣request␣and␣check␣for␣transport␣errors,␣takes␣the␣same␣arguments␣as␣L<Mojo::UserAgent/"delete">,
except␣for␣the␣callback.

=head2␣element_count_is

␣␣$t␣=␣$t->element_count_is('div.foo[x=y]',␣5);
␣␣$t␣=␣$t->element_count_is('html␣body␣div',␣30,␣'thirty␣elements');

Checks␣the␣number␣of␣HTML/XML␣elements␣matched␣by␣the␣CSS␣selector␣with␣L<Mojo::DOM/"find">.

=head2␣element_exists

␣␣$t␣=␣$t->element_exists('div.foo[x=y]');
␣␣$t␣=␣$t->element_exists('html␣head␣title',␣'has␣a␣title');

Checks␣for␣existence␣of␣the␣CSS␣selectors␣first␣matching␣HTML/XML␣element␣with␣L<Mojo::DOM/"at">.

␣␣#␣Check␣attribute␣values
␣␣$t->get_ok('/login')
␣␣␣␣->element_exists('label[for=email]')
␣␣␣␣->element_exists('input[name=email][type=text][value*="example.com"]')
␣␣␣␣->element_exists('label[for=pass]')
␣␣␣␣->element_exists('input[name=pass][type=password]')
␣␣␣␣->element_exists('input[type=submit][value]');

=head2␣element_exists_not

␣␣$t␣=␣$t->element_exists_not('div.foo[x=y]');
␣␣$t␣=␣$t->element_exists_not('html␣head␣title',␣'has␣no␣title');

Opposite␣of␣L</"element_exists">.

=head2␣finish_ok

␣␣$t␣=␣$t->finish_ok;
␣␣$t␣=␣$t->finish_ok(1000);
␣␣$t␣=␣$t->finish_ok(1003␣=>␣'Cannot␣accept␣data!');

Close␣WebSocket␣connection␣gracefully.

=head2␣finished_ok

␣␣$t␣=␣$t->finished_ok(1000);

Wait␣for␣WebSocket␣connection␣to␣be␣closed␣gracefully␣and␣check␣status.

=head2␣get_ok

␣␣$t␣=␣$t->get_ok('http://example.com/foo');
␣␣$t␣=␣$t->get_ok('/foo');
␣␣$t␣=␣$t->get_ok('/foo'␣=>␣{Accept␣=>␣'*/*'}␣=>␣'Content!');
␣␣$t␣=␣$t->get_ok('/foo'␣=>␣{Accept␣=>␣'*/*'}␣=>␣form␣=>␣{a␣=>␣'b'});
␣␣$t␣=␣$t->get_ok('/foo'␣=>␣{Accept␣=>␣'*/*'}␣=>␣json␣=>␣{a␣=>␣'b'});

Perform␣a␣C<GET>␣request␣and␣check␣for␣transport␣errors,␣takes␣the␣same␣arguments␣as␣L<Mojo::UserAgent/"get">,␣except
for␣the␣callback.

␣␣#␣Run␣tests␣against␣remote␣host
␣␣$t->get_ok('https://docs.mojolicious.org')->status_is(200);

␣␣#␣Use␣relative␣URL␣for␣request␣with␣Basic␣authentication
␣␣$t->get_ok('//sri:secr3t@/secrets.json')
␣␣␣␣->status_is(200)
␣␣␣␣->json_is('/1/content',␣'Mojo␣rocks!');

␣␣#␣Run␣additional␣tests␣on␣the␣transaction
␣␣$t->get_ok('/foo')->status_is(200);
␣␣is␣$t->tx->res->dom->at('input')->val,␣'whatever',␣'right␣value';

=head2␣head_ok

␣␣$t␣=␣$t->head_ok('http://example.com/foo');
␣␣$t␣=␣$t->head_ok('/foo');
␣␣$t␣=␣$t->head_ok('/foo'␣=>␣{Accept␣=>␣'*/*'}␣=>␣'Content!');
␣␣$t␣=␣$t->head_ok('/foo'␣=>␣{Accept␣=>␣'*/*'}␣=>␣form␣=>␣{a␣=>␣'b'});
␣␣$t␣=␣$t->head_ok('/foo'␣=>␣{Accept␣=>␣'*/*'}␣=>␣json␣=>␣{a␣=>␣'b'});

Perform␣a␣C<HEAD>␣request␣and␣check␣for␣transport␣errors,␣takes␣the␣same␣arguments␣as␣L<Mojo::UserAgent/"head">,␣except
for␣the␣callback.

=head2␣header_exists

␣␣$t␣=␣$t->header_exists('ETag');
␣␣$t␣=␣$t->header_exists('ETag',␣'header␣exists');

Check␣if␣response␣header␣exists.

=head2␣header_exists_not

␣␣$t␣=␣$t->header_exists_not('ETag');
␣␣$t␣=␣$t->header_exists_not('ETag',␣'header␣is␣missing');

Opposite␣of␣L</"header_exists">.

=head2␣header_is

␣␣$t␣=␣$t->header_is(ETag␣=>␣'"abc321"');
␣␣$t␣=␣$t->header_is(ETag␣=>␣'"abc321"',␣'right␣header');

Check␣response␣header␣for␣exact␣match.

=head2␣header_isnt

␣␣$t␣=␣$t->header_isnt(Etag␣=>␣'"abc321"');
␣␣$t␣=␣$t->header_isnt(ETag␣=>␣'"abc321"',␣'different␣header');

Opposite␣of␣L</"header_is">.

=head2␣header_like

␣␣$t␣=␣$t->header_like(ETag␣=>␣qr/abc/);
␣␣$t␣=␣$t->header_like(ETag␣=>␣qr/abc/,␣'right␣header');

Check␣response␣header␣for␣similar␣match.

=head2␣header_unlike

␣␣$t␣=␣$t->header_unlike(ETag␣=>␣qr/abc/);
␣␣$t␣=␣$t->header_unlike(ETag␣=>␣qr/abc/,␣'different␣header');

Opposite␣of␣L</"header_like">.

=head2␣json_has

␣␣$t␣=␣$t->json_has('/foo');
␣␣$t␣=␣$t->json_has('/minibar',␣'has␣a␣minibar');

Check␣if␣JSON␣response␣contains␣a␣value␣that␣can␣be␣identified␣using␣the␣given␣JSON␣Pointer␣with
L<Mojo::JSON::Pointer>.

=head2␣json_hasnt

␣␣$t␣=␣$t->json_hasnt('/foo');
␣␣$t␣=␣$t->json_hasnt('/minibar',␣'no␣minibar');

Opposite␣of␣L</"json_has">.

=head2␣json_is

␣␣$t␣=␣$t->json_is({foo␣=>␣[1,␣2,␣3]});
␣␣$t␣=␣$t->json_is('/foo'␣=>␣[1,␣2,␣3]);
␣␣$t␣=␣$t->json_is('/foo/1'␣=>␣2,␣'right␣value');

Check␣the␣value␣extracted␣from␣JSON␣response␣using␣the␣given␣JSON␣Pointer␣with␣L<Mojo::JSON::Pointer>,␣which␣defaults
to␣the␣root␣value␣if␣it␣is␣omitted.

␣␣#␣Use␣an␣empty␣JSON␣Pointer␣to␣test␣the␣whole␣JSON␣response␣with␣a␣test␣description
␣␣$t->json_is(''␣=>␣{foo␣=>␣[1,␣2,␣3]},␣'right␣object');

=head2␣json_like

␣␣$t␣=␣$t->json_like('/foo/1'␣=>␣qr/^\d+$/);
␣␣$t␣=␣$t->json_like('/foo/1'␣=>␣qr/^\d+$/,␣'right␣value');

Check␣the␣value␣extracted␣from␣JSON␣response␣using␣the␣given␣JSON␣Pointer␣with␣L<Mojo::JSON::Pointer>␣for␣similar
match.

=head2␣json_message_has

␣␣$t␣=␣$t->json_message_has('/foo');
␣␣$t␣=␣$t->json_message_has('/minibar',␣'has␣a␣minibar');

Check␣if␣JSON␣WebSocket␣message␣contains␣a␣value␣that␣can␣be␣identified␣using␣the␣given␣JSON␣Pointer␣with
L<Mojo::JSON::Pointer>.

=head2␣json_message_hasnt

␣␣$t␣=␣$t->json_message_hasnt('/foo');
␣␣$t␣=␣$t->json_message_hasnt('/minibar',␣'no␣minibar');

Opposite␣of␣L</"json_message_has">.

=head2␣json_message_is

␣␣$t␣=␣$t->json_message_is({foo␣=>␣[1,␣2,␣3]});
␣␣$t␣=␣$t->json_message_is('/foo'␣=>␣[1,␣2,␣3]);
␣␣$t␣=␣$t->json_message_is('/foo/1'␣=>␣2,␣'right␣value');

Check␣the␣value␣extracted␣from␣JSON␣WebSocket␣message␣using␣the␣given␣JSON␣Pointer␣with␣L<Mojo::JSON::Pointer>,␣which
defaults␣to␣the␣root␣value␣if␣it␣is␣omitted.

=head2␣json_message_like

␣␣$t␣=␣$t->json_message_like('/foo/1'␣=>␣qr/^\d+$/);
␣␣$t␣=␣$t->json_message_like('/foo/1'␣=>␣qr/^\d+$/,␣'right␣value');

Check␣the␣value␣extracted␣from␣JSON␣WebSocket␣message␣using␣the␣given␣JSON␣Pointer␣with␣L<Mojo::JSON::Pointer>␣for
similar␣match.

=head2␣json_message_unlike

␣␣$t␣=␣$t->json_message_unlike('/foo/1'␣=>␣qr/^\d+$/);
␣␣$t␣=␣$t->json_message_unlike('/foo/1'␣=>␣qr/^\d+$/,␣'different␣value');

Opposite␣of␣L</"json_message_like">.

=head2␣json_unlike

␣␣$t␣=␣$t->json_unlike('/foo/1'␣=>␣qr/^\d+$/);
␣␣$t␣=␣$t->json_unlike('/foo/1'␣=>␣qr/^\d+$/,␣'different␣value');

Opposite␣of␣L</"json_like">.

=head2␣message_is

␣␣$t␣=␣$t->message_is({binary␣=>␣$bytes});
␣␣$t␣=␣$t->message_is({text␣␣␣=>␣$bytes});
␣␣$t␣=␣$t->message_is('working!');
␣␣$t␣=␣$t->message_is('working!',␣'right␣message');

Check␣WebSocket␣message␣for␣exact␣match.

=head2␣message_isnt

␣␣$t␣=␣$t->message_isnt({binary␣=>␣$bytes});
␣␣$t␣=␣$t->message_isnt({text␣␣␣=>␣$bytes});
␣␣$t␣=␣$t->message_isnt('working!');
␣␣$t␣=␣$t->message_isnt('working!',␣'different␣message');

Opposite␣of␣L</"message_is">.

=head2␣message_like

␣␣$t␣=␣$t->message_like({binary␣=>␣qr/$bytes/});
␣␣$t␣=␣$t->message_like({text␣␣␣=>␣qr/$bytes/});
␣␣$t␣=␣$t->message_like(qr/working!/);
␣␣$t␣=␣$t->message_like(qr/working!/,␣'right␣message');

Check␣WebSocket␣message␣for␣similar␣match.

=head2␣message_ok

␣␣$t␣=␣$t->message_ok;
␣␣$t␣=␣$t->message_ok('got␣a␣message');

Wait␣for␣next␣WebSocket␣message␣to␣arrive.

␣␣#␣Wait␣for␣message␣and␣perform␣multiple␣tests␣on␣it
␣␣$t->websocket_ok('/time')
␣␣␣␣->message_ok
␣␣␣␣->message_like(qr/\d+/)
␣␣␣␣->message_unlike(qr/\w+/)
␣␣␣␣->finish_ok;

=head2␣message_unlike

␣␣$t␣=␣$t->message_unlike({binary␣=>␣qr/$bytes/});
␣␣$t␣=␣$t->message_unlike({text␣␣␣=>␣qr/$bytes/});
␣␣$t␣=␣$t->message_unlike(qr/working!/);
␣␣$t␣=␣$t->message_unlike(qr/working!/,␣'different␣message');

Opposite␣of␣L</"message_like">.

=head2␣new

␣␣my␣$t␣=␣Test::Mojo->new;
␣␣my␣$t␣=␣Test::Mojo->new('MyApp');
␣␣my␣$t␣=␣Test::Mojo->new('MyApp',␣{foo␣=>␣'bar'});
␣␣my␣$t␣=␣Test::Mojo->new(Mojo::File->new('/path/to/myapp.pl'));
␣␣my␣$t␣=␣Test::Mojo->new(Mojo::File->new('/path/to/myapp.pl'),␣{foo␣=>␣'bar'});
␣␣my␣$t␣=␣Test::Mojo->new(MyApp->new);
␣␣my␣$t␣=␣Test::Mojo->new(MyApp->new,␣{foo␣=>␣'bar'});

Construct␣a␣new␣L<Test::Mojo>␣object.␣In␣addition␣to␣a␣class␣name␣or␣L<Mojo::File>␣object␣pointing␣to␣the␣application
script,␣you␣can␣pass␣along␣a␣hash␣reference␣with␣configuration␣values␣that␣will␣be␣used␣to␣override␣the␣application
configuration.␣The␣special␣configuration␣value␣C<config_override>␣will␣be␣set␣in␣L<Mojolicious/"config">␣as␣well,␣which
is␣used␣to␣disable␣configuration␣plugins␣like␣L<Mojolicious::Plugin::Config>,␣L<Mojolicious::Plugin::JSONConfig>␣and
L<Mojolicious::Plugin::NotYAMLConfig>␣for␣tests.

␣␣#␣Load␣application␣script␣relative␣to␣the␣"t"␣directory
␣␣use␣Mojo::File␣qw(curfile);
␣␣my␣$t␣=␣Test::Mojo->new(curfile->dirname->sibling('myapp.pl'));

=head2␣options_ok

␣␣$t␣=␣$t->options_ok('http://example.com/foo');
␣␣$t␣=␣$t->options_ok('/foo');
␣␣$t␣=␣$t->options_ok('/foo'␣=>␣{Accept␣=>␣'*/*'}␣=>␣'Content!');
␣␣$t␣=␣$t->options_ok('/foo'␣=>␣{Accept␣=>␣'*/*'}␣=>␣form␣=>␣{a␣=>␣'b'});
␣␣$t␣=␣$t->options_ok('/foo'␣=>␣{Accept␣=>␣'*/*'}␣=>␣json␣=>␣{a␣=>␣'b'});

Perform␣a␣C<OPTIONS>␣request␣and␣check␣for␣transport␣errors,␣takes␣the␣same␣arguments␣as␣L<Mojo::UserAgent/"options">,
except␣for␣the␣callback.

=head2␣or

␣␣$t␣=␣$t->or(sub␣{...});

Execute␣callback␣if␣the␣value␣of␣L</"success">␣is␣false.

␣␣#␣Diagnostics
␣␣$t->get_ok('/bad')->or(sub␣{␣diag␣'Must␣have␣been␣Glen!'␣})
␣␣␣␣->status_is(200)->or(sub␣{␣diag␣$t->tx->res->dom->at('title')->text␣});

=head2␣patch_ok

␣␣$t␣=␣$t->patch_ok('http://example.com/foo');
␣␣$t␣=␣$t->patch_ok('/foo');
␣␣$t␣=␣$t->patch_ok('/foo'␣=>␣{Accept␣=>␣'*/*'}␣=>␣'Content!');
␣␣$t␣=␣$t->patch_ok('/foo'␣=>␣{Accept␣=>␣'*/*'}␣=>␣form␣=>␣{a␣=>␣'b'});
␣␣$t␣=␣$t->patch_ok('/foo'␣=>␣{Accept␣=>␣'*/*'}␣=>␣json␣=>␣{a␣=>␣'b'});

Perform␣a␣C<PATCH>␣request␣and␣check␣for␣transport␣errors,␣takes␣the␣same␣arguments␣as␣L<Mojo::UserAgent/"patch">,
except␣for␣the␣callback.

=head2␣post_ok

␣␣$t␣=␣$t->post_ok('http://example.com/foo');
␣␣$t␣=␣$t->post_ok('/foo');
␣␣$t␣=␣$t->post_ok('/foo'␣=>␣{Accept␣=>␣'*/*'}␣=>␣'Content!');
␣␣$t␣=␣$t->post_ok('/foo'␣=>␣{Accept␣=>␣'*/*'}␣=>␣form␣=>␣{a␣=>␣'b'});
␣␣$t␣=␣$t->post_ok('/foo'␣=>␣{Accept␣=>␣'*/*'}␣=>␣json␣=>␣{a␣=>␣'b'});

Perform␣a␣C<POST>␣request␣and␣check␣for␣transport␣errors,␣takes␣the␣same␣arguments␣as␣L<Mojo::UserAgent/"post">,␣except
for␣the␣callback.

␣␣#␣Test␣file␣upload
␣␣my␣$upload␣=␣{foo␣=>␣{content␣=>␣'bar',␣filename␣=>␣'baz.txt'}};
␣␣$t->post_ok('/upload'␣=>␣form␣=>␣$upload)->status_is(200);

␣␣#␣Test␣JSON␣API
␣␣$t->post_ok('/hello.json'␣=>␣json␣=>␣{hello␣=>␣'world'})
␣␣␣␣->status_is(200)
␣␣␣␣->json_is({bye␣=>␣'world'});

=head2␣put_ok

␣␣$t␣=␣$t->put_ok('http://example.com/foo');
␣␣$t␣=␣$t->put_ok('/foo');
␣␣$t␣=␣$t->put_ok('/foo'␣=>␣{Accept␣=>␣'*/*'}␣=>␣'Content!');
␣␣$t␣=␣$t->put_ok('/foo'␣=>␣{Accept␣=>␣'*/*'}␣=>␣form␣=>␣{a␣=>␣'b'});
␣␣$t␣=␣$t->put_ok('/foo'␣=>␣{Accept␣=>␣'*/*'}␣=>␣json␣=>␣{a␣=>␣'b'});

Perform␣a␣C<PUT>␣request␣and␣check␣for␣transport␣errors,␣takes␣the␣same␣arguments␣as␣L<Mojo::UserAgent/"put">,␣except
for␣the␣callback.

=head2␣request_ok

␣␣$t␣=␣$t->request_ok(Mojo::Transaction::HTTP->new);

Perform␣request␣and␣check␣for␣transport␣errors.

␣␣#␣Request␣with␣custom␣method
␣␣my␣$tx␣=␣$t->ua->build_tx(FOO␣=>␣'/test.json'␣=>␣json␣=>␣{foo␣=>␣1});
␣␣$t->request_ok($tx)->status_is(200)->json_is({success␣=>␣1});

␣␣#␣Request␣with␣custom␣cookie
␣␣my␣$tx␣=␣$t->ua->build_tx(GET␣=>␣'/account');
␣␣$tx->req->cookies({name␣=>␣'user',␣value␣=>␣'sri'});
␣␣$t->request_ok($tx)->status_is(200)->text_is('head␣>␣title'␣=>␣'Hello␣sri');

␣␣#␣Custom␣WebSocket␣handshake
␣␣my␣$tx␣=␣$t->ua->build_websocket_tx('/foo');
␣␣$tx->req->headers->remove('User-Agent');
␣␣$t->request_ok($tx)->message_ok->message_is('bar')->finish_ok;

=head2␣reset_session

␣␣$t␣=␣$t->reset_session;

Reset␣user␣agent␣session.

=head2␣send_ok

␣␣$t␣=␣$t->send_ok({binary␣=>␣$bytes});
␣␣$t␣=␣$t->send_ok({text␣␣␣=>␣$bytes});
␣␣$t␣=␣$t->send_ok({json␣␣␣=>␣{test␣=>␣[1,␣2,␣3]}});
␣␣$t␣=␣$t->send_ok([$fin,␣$rsv1,␣$rsv2,␣$rsv3,␣$op,␣$payload]);
␣␣$t␣=␣$t->send_ok($chars);
␣␣$t␣=␣$t->send_ok($chars,␣'sent␣successfully');

Send␣message␣or␣frame␣via␣WebSocket.

␣␣#␣Send␣JSON␣object␣as␣"Text"␣message
␣␣$t->websocket_ok('/echo.json')
␣␣␣␣->send_ok({json␣=>␣{test␣=>␣'I␣♥␣Mojolicious!'}})
␣␣␣␣->message_ok
␣␣␣␣->json_message_is('/test'␣=>␣'I␣♥␣Mojolicious!')
␣␣␣␣->finish_ok;

=head2␣status_is

␣␣$t␣=␣$t->status_is(200);
␣␣$t␣=␣$t->status_is(200,␣'right␣status');

Check␣response␣status␣for␣exact␣match.

=head2␣status_isnt

␣␣$t␣=␣$t->status_isnt(200);
␣␣$t␣=␣$t->status_isnt(200,␣'different␣status');

Opposite␣of␣L</"status_is">.

=head2␣test

␣␣$t␣=␣$t->test('is',␣'first␣value',␣'second␣value',␣'right␣value');

Call␣L<Test::More>␣functions␣through␣L</"handler">,␣used␣to␣implement␣L<Test::Mojo>␣roles.␣The␣result␣will␣be␣stored␣in
L</"success">.

=head2␣text_is

␣␣$t␣=␣$t->text_is('div.foo[x=y]'␣=>␣'Hello!');
␣␣$t␣=␣$t->text_is('html␣head␣title'␣=>␣'Hello!',␣'right␣title');

Checks␣text␣content␣of␣the␣CSS␣selectors␣first␣matching␣HTML/XML␣element␣for␣exact␣match␣with␣L<Mojo::DOM/"at">.

=head2␣text_isnt

␣␣$t␣=␣$t->text_isnt('div.foo[x=y]'␣=>␣'Hello!');
␣␣$t␣=␣$t->text_isnt('html␣head␣title'␣=>␣'Hello!',␣'different␣title');

Opposite␣of␣L</"text_is">.

=head2␣text_like

␣␣$t␣=␣$t->text_like('div.foo[x=y]'␣=>␣qr/Hello/);
␣␣$t␣=␣$t->text_like('html␣head␣title'␣=>␣qr/Hello/,␣'right␣title');

Checks␣text␣content␣of␣the␣CSS␣selectors␣first␣matching␣HTML/XML␣element␣for␣similar␣match␣with␣L<Mojo::DOM/"at">.

=head2␣text_unlike

␣␣$t␣=␣$t->text_unlike('div.foo[x=y]'␣=>␣qr/Hello/);
␣␣$t␣=␣$t->text_unlike('html␣head␣title'␣=>␣qr/Hello/,␣'different␣title');

Opposite␣of␣L</"text_like">.

=head2␣websocket_ok

␣␣$t␣=␣$t->websocket_ok('http://example.com/echo');
␣␣$t␣=␣$t->websocket_ok('/echo');
␣␣$t␣=␣$t->websocket_ok('/echo'␣=>␣{DNT␣=>␣1}␣=>␣['v1.proto']);

Open␣a␣WebSocket␣connection␣with␣transparent␣handshake,␣takes␣the␣same␣arguments␣as␣L<Mojo::UserAgent/"websocket">,
except␣for␣the␣callback.

␣␣#␣WebSocket␣with␣permessage-deflate␣compression
␣␣$t->websocket_ok('/'␣=>␣{'Sec-WebSocket-Extensions'␣=>␣'permessage-deflate'})
␣␣␣␣->send_ok('y'␣x␣50000)
␣␣␣␣->message_ok
␣␣␣␣->message_is('z'␣x␣50000)
␣␣␣␣->finish_ok;

=head1␣SEE␣ALSO

L<Mojolicious>,␣L<Mojolicious::Guides>,␣L<https://mojolicious.org>.

=cut
----------
Range: (343532,367022) (23490)
=encoding␣utf8

=head1␣NAME

Mojolicious␣-␣Real-time␣web␣framework

=head1␣SYNOPSIS

␣␣#␣Application
␣␣package␣MyApp;
␣␣use␣Mojo::Base␣'Mojolicious',␣-signatures;

␣␣#␣Route
␣␣sub␣startup␣($self)␣{
␣␣␣␣$self->routes->get('/hello')->to('foo#hello');
␣␣}

␣␣#␣Controller
␣␣package␣MyApp::Controller::Foo;
␣␣use␣Mojo::Base␣'Mojolicious::Controller',␣-signatures;

␣␣#␣Action
␣␣sub␣hello␣($self)␣{
␣␣␣␣$self->render(text␣=>␣'Hello␣World!');
␣␣}

=head1␣DESCRIPTION

An␣amazing␣real-time␣web␣framework␣built␣on␣top␣of␣the␣powerful␣L<Mojo>␣web␣development␣toolkit.␣With␣support␣for
RESTful␣routes,␣plugins,␣commands,␣Perl-ish␣templates,␣content␣negotiation,␣session␣management,␣form␣validation,
testing␣framework,␣static␣file␣server,␣C<CGI>/C<PSGI>␣detection,␣first␣class␣Unicode␣support␣and␣much␣more␣for␣you␣to
discover.

Take␣a␣look␣at␣our␣excellent␣documentation␣in␣L<Mojolicious::Guides>!

=head1␣HOOKS

L<Mojolicious>␣will␣emit␣the␣following␣hooks␣in␣the␣listed␣order.

=head2␣before_command

Emitted␣right␣before␣the␣application␣runs␣a␣command␣through␣the␣command␣line␣interface.

␣␣$app->hook(before_command␣=>␣sub␣($command,␣$args)␣{...});

Useful␣for␣reconfiguring␣the␣application␣before␣running␣a␣command␣or␣to␣modify␣the␣behavior␣of␣a␣command.␣(Passed␣the
command␣object␣and␣the␣command␣arguments)

=head2␣before_server_start

Emitted␣right␣before␣the␣application␣server␣is␣started,␣for␣web␣servers␣that␣support␣it,␣which␣includes␣all␣the
built-in␣ones.

␣␣$app->hook(before_server_start␣=>␣sub␣($server,␣$app)␣{...});

Useful␣for␣reconfiguring␣application␣servers␣dynamically␣or␣collecting␣server␣diagnostics␣information.␣(Passed␣the
server␣and␣application␣objects)

=head2␣after_build_tx

Emitted␣right␣after␣the␣transaction␣is␣built␣and␣before␣the␣HTTP␣request␣gets␣parsed.

␣␣$app->hook(after_build_tx␣=>␣sub␣($tx,␣$app)␣{...});

This␣is␣a␣very␣powerful␣hook␣and␣should␣not␣be␣used␣lightly,␣it␣makes␣some␣rather␣advanced␣features␣such␣as␣upload
progress␣bars␣possible.␣Note␣that␣this␣hook␣will␣not␣work␣for␣embedded␣applications,␣because␣only␣the␣host␣application
gets␣to␣build␣transactions.␣(Passed␣the␣transaction␣and␣application␣objects)

=head2␣around_dispatch

Emitted␣right␣after␣a␣new␣request␣has␣been␣received␣and␣wraps␣around␣the␣whole␣dispatch␣process,␣so␣you␣have␣to
manually␣forward␣to␣the␣next␣hook␣if␣you␣want␣to␣continue␣the␣chain.␣Default␣exception␣handling␣with
L<Mojolicious::Plugin::DefaultHelpers/"reply-E<gt>exception">␣is␣the␣first␣hook␣in␣the␣chain␣and␣a␣call␣to
L</"dispatch">␣the␣last,␣yours␣will␣be␣in␣between.

␣␣$app->hook(around_dispatch␣=>␣sub␣($next,␣$c)␣{
␣␣␣␣...
␣␣␣␣$next->();
␣␣␣␣...
␣␣});

This␣is␣a␣very␣powerful␣hook␣and␣should␣not␣be␣used␣lightly,␣it␣allows␣you␣to,␣for␣example,␣customize␣application-wide
exception␣handling,␣consider␣it␣the␣sledgehammer␣in␣your␣toolbox.␣(Passed␣a␣callback␣leading␣to␣the␣next␣hook␣and␣the
default␣controller␣object)

=head2␣before_dispatch

Emitted␣right␣before␣the␣static␣file␣server␣and␣router␣start␣their␣work.

␣␣$app->hook(before_dispatch␣=>␣sub␣($c)␣{...});

Very␣useful␣for␣rewriting␣incoming␣requests␣and␣other␣preprocessing␣tasks.␣(Passed␣the␣default␣controller␣object)

=head2␣after_static

Emitted␣after␣a␣static␣file␣response␣has␣been␣generated␣by␣the␣static␣file␣server.

␣␣$app->hook(after_static␣=>␣sub␣($c)␣{...});

Mostly␣used␣for␣post-processing␣static␣file␣responses.␣(Passed␣the␣default␣controller␣object)

=head2␣before_routes

Emitted␣after␣the␣static␣file␣server␣determined␣if␣a␣static␣file␣should␣be␣served␣and␣before␣the␣router␣starts␣its
work.

␣␣$app->hook(before_routes␣=>␣sub␣($c)␣{...});

Mostly␣used␣for␣custom␣dispatchers␣and␣collecting␣metrics.␣(Passed␣the␣default␣controller␣object)

=head2␣around_action

Emitted␣right␣before␣an␣action␣gets␣executed␣and␣wraps␣around␣it,␣so␣you␣have␣to␣manually␣forward␣to␣the␣next␣hook␣if
you␣want␣to␣continue␣the␣chain.␣Default␣action␣dispatching␣is␣the␣last␣hook␣in␣the␣chain,␣yours␣will␣run␣before␣it.

␣␣$app->hook(around_action␣=>␣sub␣($next,␣$c,␣$action,␣$last)␣{
␣␣␣␣...
␣␣␣␣return␣$next->();
␣␣});

This␣is␣a␣very␣powerful␣hook␣and␣should␣not␣be␣used␣lightly,␣it␣allows␣you␣for␣example␣to␣pass␣additional␣arguments␣to
actions␣or␣handle␣return␣values␣differently.␣Note␣that␣this␣hook␣can␣trigger␣more␣than␣once␣for␣the␣same␣request␣if
there␣are␣nested␣routes.␣(Passed␣a␣callback␣leading␣to␣the␣next␣hook,␣the␣current␣controller␣object,␣the␣action
callback␣and␣a␣flag␣indicating␣if␣this␣action␣is␣an␣endpoint)

=head2␣before_render

Emitted␣before␣content␣is␣generated␣by␣the␣renderer.␣Note␣that␣this␣hook␣can␣trigger␣out␣of␣order␣due␣to␣its␣dynamic
nature,␣and␣with␣embedded␣applications␣will␣only␣work␣for␣the␣application␣that␣is␣rendering.

␣␣$app->hook(before_render␣=>␣sub␣($c,␣$args)␣{...});

Mostly␣used␣for␣pre-processing␣arguments␣passed␣to␣the␣renderer.␣(Passed␣the␣current␣controller␣object␣and␣the␣render
arguments)

=head2␣after_render

Emitted␣after␣content␣has␣been␣generated␣by␣the␣renderer␣that␣will␣be␣assigned␣to␣the␣response.␣Note␣that␣this␣hook␣can
trigger␣out␣of␣order␣due␣to␣its␣dynamic␣nature,␣and␣with␣embedded␣applications␣will␣only␣work␣for␣the␣application␣that
is␣rendering.

␣␣$app->hook(after_render␣=>␣sub␣($c,␣$output,␣$format)␣{...});

Mostly␣used␣for␣post-processing␣dynamically␣generated␣content.␣(Passed␣the␣current␣controller␣object,␣a␣reference␣to
the␣content␣and␣the␣format)

=head2␣after_dispatch

Emitted␣in␣reverse␣order␣after␣a␣response␣has␣been␣generated.␣Note␣that␣this␣hook␣can␣trigger␣out␣of␣order␣due␣to␣its
dynamic␣nature,␣and␣with␣embedded␣applications␣will␣only␣work␣for␣the␣application␣that␣is␣generating␣the␣response.

␣␣$app->hook(after_dispatch␣=>␣sub␣($c)␣{...});

Useful␣for␣rewriting␣outgoing␣responses␣and␣other␣post-processing␣tasks.␣(Passed␣the␣current␣controller␣object)

=head1␣ATTRIBUTES

L<Mojolicious>␣implements␣the␣following␣attributes.

=head2␣commands

␣␣my␣$commands␣=␣$app->commands;
␣␣$app␣␣␣␣␣␣␣␣␣=␣$app->commands(Mojolicious::Commands->new);

Command␣line␣interface␣for␣your␣application,␣defaults␣to␣a␣L<Mojolicious::Commands>␣object.

␣␣#␣Add␣another␣namespace␣to␣load␣commands␣from
␣␣push␣@{$app->commands->namespaces},␣'MyApp::Command';

=head2␣controller_class

␣␣my␣$class␣=␣$app->controller_class;
␣␣$app␣␣␣␣␣␣=␣$app->controller_class('Mojolicious::Controller');

Class␣to␣be␣used␣for␣the␣default␣controller,␣defaults␣to␣L<Mojolicious::Controller>.␣Note␣that␣this␣class␣needs␣to␣have
already␣been␣loaded␣before␣the␣first␣request␣arrives.

=head2␣exception_format

␣␣my␣$format␣=␣$app->exception_format;
␣␣$app␣␣␣␣␣␣␣=␣$app->exception_format('txt');

Format␣for␣HTTP␣exceptions␣(C<html>,␣C<json>,␣or␣C<txt>),␣defaults␣to␣C<html>.

=head2␣home

␣␣my␣$home␣=␣$app->home;
␣␣$app␣␣␣␣␣=␣$app->home(Mojo::Home->new);

The␣home␣directory␣of␣your␣application,␣defaults␣to␣a␣L<Mojo::Home>␣object␣which␣stringifies␣to␣the␣actual␣path.

␣␣#␣Portably␣generate␣path␣relative␣to␣home␣directory
␣␣my␣$path␣=␣$app->home->child('data',␣'important.txt');

=head2␣log

␣␣my␣$log␣=␣$app->log;
␣␣$app␣␣␣␣=␣$app->log(Mojo::Log->new);

The␣logging␣layer␣of␣your␣application,␣defaults␣to␣a␣L<Mojo::Log>␣object.␣The␣level␣will␣default␣to␣either␣the
C<MOJO_LOG_LEVEL>␣environment␣variable,␣C<trace>␣if␣the␣L</mode>␣is␣C<development>,␣or␣C<info>␣otherwise.␣All␣messages
will␣be␣written␣to␣C<STDERR>␣by␣default.

␣␣#␣Log␣debug␣message
␣␣$app->log->debug('It␣works');

=head2␣max_request_size

␣␣my␣$max␣=␣$app->max_request_size;
␣␣$app␣␣␣␣=␣$app->max_request_size(16777216);

Maximum␣request␣size␣in␣bytes,␣defaults␣to␣the␣value␣of␣L<Mojo::Message/"max_message_size">.␣Setting␣the␣value␣to␣C<0>
will␣allow␣requests␣of␣indefinite␣size.␣Note␣that␣increasing␣this␣value␣can␣also␣drastically␣increase␣memory␣usage,
should␣you␣for␣example␣attempt␣to␣parse␣an␣excessively␣large␣request␣body␣with␣the␣methods␣L<Mojo::Message/"dom">␣or
L<Mojo::Message/"json">.

=head2␣mode

␣␣my␣$mode␣=␣$app->mode;
␣␣$app␣␣␣␣␣=␣$app->mode('production');

The␣operating␣mode␣for␣your␣application,␣defaults␣to␣a␣value␣from␣the␣C<MOJO_MODE>␣and␣C<PLACK_ENV>␣environment
variables␣or␣C<development>.

=head2␣moniker

␣␣my␣$moniker␣=␣$app->moniker;
␣␣$app␣␣␣␣␣␣␣␣=␣$app->moniker('foo_bar');

Moniker␣of␣this␣application,␣often␣used␣as␣default␣filename␣for␣configuration␣files␣and␣the␣like,␣defaults␣to
decamelizing␣the␣application␣class␣with␣L<Mojo::Util/"decamelize">.

=head2␣plugins

␣␣my␣$plugins␣=␣$app->plugins;
␣␣$app␣␣␣␣␣␣␣␣=␣$app->plugins(Mojolicious::Plugins->new);

The␣plugin␣manager,␣defaults␣to␣a␣L<Mojolicious::Plugins>␣object.␣See␣the␣L</"plugin">␣method␣below␣if␣you␣want␣to␣load
a␣plugin.

␣␣#␣Add␣another␣namespace␣to␣load␣plugins␣from
␣␣push␣@{$app->plugins->namespaces},␣'MyApp::Plugin';

=head2␣preload_namespaces

␣␣my␣$namespaces␣=␣$app->preload_namespaces;
␣␣$app␣␣␣␣␣␣␣␣␣␣␣=␣$app->preload_namespaces(['MyApp::Controller']);

Namespaces␣to␣preload␣classes␣from␣during␣application␣startup.

=head2␣renderer

␣␣my␣$renderer␣=␣$app->renderer;
␣␣$app␣␣␣␣␣␣␣␣␣=␣$app->renderer(Mojolicious::Renderer->new);

Used␣to␣render␣content,␣defaults␣to␣a␣L<Mojolicious::Renderer>␣object.␣For␣more␣information␣about␣how␣to␣generate
content␣see␣L<Mojolicious::Guides::Rendering>.

␣␣#␣Enable␣compression
␣␣$app->renderer->compress(1);

␣␣#␣Add␣another␣"templates"␣directory
␣␣push␣@{$app->renderer->paths},␣'/home/sri/templates';

␣␣#␣Add␣another␣"templates"␣directory␣with␣higher␣precedence
␣␣unshift␣@{$app->renderer->paths},␣'/home/sri/themes/blue/templates';

␣␣#␣Add␣another␣class␣with␣templates␣in␣DATA␣section
␣␣push␣@{$app->renderer->classes},␣'Mojolicious::Plugin::Fun';

=head2␣routes

␣␣my␣$routes␣=␣$app->routes;
␣␣$app␣␣␣␣␣␣␣=␣$app->routes(Mojolicious::Routes->new);

The␣router,␣defaults␣to␣a␣L<Mojolicious::Routes>␣object.␣You␣use␣this␣in␣your␣startup␣method␣to␣define␣the␣url
endpoints␣for␣your␣application.

␣␣#␣Add␣routes
␣␣my␣$r␣=␣$app->routes;
␣␣$r->get('/foo/bar')->to('test#foo',␣title␣=>␣'Hello␣Mojo!');
␣␣$r->post('/baz')->to('test#baz');

␣␣#␣Add␣another␣namespace␣to␣load␣controllers␣from
␣␣push␣@{$app->routes->namespaces},␣'MyApp::MyController';

=head2␣secrets

␣␣my␣$secrets␣=␣$app->secrets;
␣␣$app␣␣␣␣␣␣␣␣=␣$app->secrets([$bytes]);

Secret␣passphrases␣used␣for␣signed␣cookies␣and␣the␣like,␣defaults␣to␣the␣L</"moniker">␣of␣this␣application,␣which␣is
not␣very␣secure,␣so␣you␣should␣change␣it!!!␣As␣long␣as␣you␣are␣using␣the␣insecure␣default␣there␣will␣be␣debug␣messages
in␣the␣log␣file␣reminding␣you␣to␣change␣your␣passphrase.␣Only␣the␣first␣passphrase␣is␣used␣to␣create␣new␣signatures,
but␣all␣of␣them␣for␣verification.␣So␣you␣can␣increase␣security␣without␣invalidating␣all␣your␣existing␣signed␣cookies␣by
rotating␣passphrases,␣just␣add␣new␣ones␣to␣the␣front␣and␣remove␣old␣ones␣from␣the␣back.

␣␣#␣Rotate␣passphrases
␣␣$app->secrets(['new_passw0rd',␣'old_passw0rd',␣'very_old_passw0rd']);

=head2␣sessions

␣␣my␣$sessions␣=␣$app->sessions;
␣␣$app␣␣␣␣␣␣␣␣␣=␣$app->sessions(Mojolicious::Sessions->new);

Signed␣cookie␣based␣session␣manager,␣defaults␣to␣a␣L<Mojolicious::Sessions>␣object.␣You␣can␣usually␣leave␣this␣alone,
see␣L<Mojolicious::Controller/"session">␣for␣more␣information␣about␣working␣with␣session␣data.

␣␣#␣Change␣name␣of␣cookie␣used␣for␣all␣sessions
␣␣$app->sessions->cookie_name('mysession');

␣␣#␣Disable␣SameSite␣feature
␣␣$app->sessions->samesite(undef);

=head2␣static

␣␣my␣$static␣=␣$app->static;
␣␣$app␣␣␣␣␣␣␣=␣$app->static(Mojolicious::Static->new);

For␣serving␣static␣files␣from␣your␣C<public>␣directories,␣defaults␣to␣a␣L<Mojolicious::Static>␣object.

␣␣#␣Add␣another␣"public"␣directory
␣␣push␣@{$app->static->paths},␣'/home/sri/public';

␣␣#␣Add␣another␣"public"␣directory␣with␣higher␣precedence
␣␣unshift␣@{$app->static->paths},␣'/home/sri/themes/blue/public';

␣␣#␣Add␣another␣class␣with␣static␣files␣in␣DATA␣section
␣␣push␣@{$app->static->classes},␣'Mojolicious::Plugin::Fun';

␣␣#␣Remove␣built-in␣favicon
␣␣delete␣$app->static->extra->{'favicon.ico'};

=head2␣types

␣␣my␣$types␣=␣$app->types;
␣␣$app␣␣␣␣␣␣=␣$app->types(Mojolicious::Types->new);

Responsible␣for␣connecting␣file␣extensions␣with␣MIME␣types,␣defaults␣to␣a␣L<Mojolicious::Types>␣object.

␣␣#␣Add␣custom␣MIME␣type
␣␣$app->types->type(twt␣=>␣'text/tweet');

=head2␣ua

␣␣my␣$ua␣=␣$app->ua;
␣␣$app␣␣␣=␣$app->ua(Mojo::UserAgent->new);

A␣full␣featured␣HTTP␣user␣agent␣for␣use␣in␣your␣applications,␣defaults␣to␣a␣L<Mojo::UserAgent>␣object.

␣␣#␣Perform␣blocking␣request
␣␣say␣$app->ua->get('example.com')->result->body;

=head2␣validator

␣␣my␣$validator␣=␣$app->validator;
␣␣$app␣␣␣␣␣␣␣␣␣␣=␣$app->validator(Mojolicious::Validator->new);

Validate␣values,␣defaults␣to␣a␣L<Mojolicious::Validator>␣object.

␣␣#␣Add␣validation␣check
␣␣$app->validator->add_check(foo␣=>␣sub␣($v,␣$name,␣$value)␣{
␣␣␣␣return␣$value␣ne␣'foo';
␣␣});

␣␣#␣Add␣validation␣filter
␣␣$app->validator->add_filter(quotemeta␣=>␣sub␣($v,␣$name,␣$value)␣{
␣␣␣␣return␣quotemeta␣$value;
␣␣});

=head1␣METHODS

L<Mojolicious>␣inherits␣all␣methods␣from␣L<Mojo::Base>␣and␣implements␣the␣following␣new␣ones.

=head2␣build_controller

␣␣my␣$c␣=␣$app->build_controller;
␣␣my␣$c␣=␣$app->build_controller(Mojo::Transaction::HTTP->new);
␣␣my␣$c␣=␣$app->build_controller(Mojolicious::Controller->new);

Build␣default␣controller␣object␣with␣L</"controller_class">.

␣␣#␣Render␣template␣from␣application
␣␣my␣$foo␣=␣$app->build_controller->render_to_string(template␣=>␣'foo');

=head2␣build_tx

␣␣my␣$tx␣=␣$app->build_tx;

Build␣L<Mojo::Transaction::HTTP>␣object␣and␣emit␣L</"after_build_tx">␣hook.

=head2␣config

␣␣my␣$hash␣=␣$app->config;
␣␣my␣$foo␣␣=␣$app->config('foo');
␣␣$app␣␣␣␣␣=␣$app->config({foo␣=>␣'bar',␣baz␣=>␣23});
␣␣$app␣␣␣␣␣=␣$app->config(foo␣=>␣'bar',␣baz␣=>␣23);

Application␣configuration.

␣␣#␣Remove␣value
␣␣my␣$foo␣=␣delete␣$app->config->{foo};

␣␣#␣Assign␣multiple␣values␣at␣once
␣␣$app->config(foo␣=>␣'test',␣bar␣=>␣23);

=head2␣defaults

␣␣my␣$hash␣=␣$app->defaults;
␣␣my␣$foo␣␣=␣$app->defaults('foo');
␣␣$app␣␣␣␣␣=␣$app->defaults({foo␣=>␣'bar',␣baz␣=>␣23});
␣␣$app␣␣␣␣␣=␣$app->defaults(foo␣=>␣'bar',␣baz␣=>␣23);

Default␣values␣for␣L<Mojolicious::Controller/"stash">,␣assigned␣for␣every␣new␣request.

␣␣#␣Remove␣value
␣␣my␣$foo␣=␣delete␣$app->defaults->{foo};

␣␣#␣Assign␣multiple␣values␣at␣once
␣␣$app->defaults(foo␣=>␣'test',␣bar␣=>␣23);

=head2␣dispatch

␣␣$app->dispatch(Mojolicious::Controller->new);

The␣heart␣of␣every␣L<Mojolicious>␣application,␣calls␣the␣L</"static">␣and␣L</"routes">␣dispatchers␣for␣every␣request
and␣passes␣them␣a␣L<Mojolicious::Controller>␣object.

=head2␣handler

␣␣$app->handler(Mojo::Transaction::HTTP->new);
␣␣$app->handler(Mojolicious::Controller->new);

Sets␣up␣the␣default␣controller␣and␣emits␣the␣L</"around_dispatch">␣hook␣for␣every␣request.

=head2␣helper

␣␣$app->helper(foo␣=>␣sub␣{...});

Add␣or␣replace␣a␣helper␣that␣will␣be␣available␣as␣a␣method␣of␣the␣controller␣object␣and␣the␣application␣object,␣as␣well
as␣a␣function␣in␣C<ep>␣templates.␣For␣a␣full␣list␣of␣helpers␣that␣are␣available␣by␣default␣see
L<Mojolicious::Plugin::DefaultHelpers>␣and␣L<Mojolicious::Plugin::TagHelpers>.

␣␣#␣Helper
␣␣$app->helper(cache␣=>␣sub␣{␣state␣$cache␣=␣{}␣});

␣␣#␣Application
␣␣$app->cache->{foo}␣=␣'bar';
␣␣my␣$result␣=␣$app->cache->{foo};

␣␣#␣Controller
␣␣$c->cache->{foo}␣=␣'bar';
␣␣my␣$result␣=␣$c->cache->{foo};

␣␣#␣Template
␣␣%␣cache->{foo}␣=␣'bar';
␣␣%=␣cache->{foo}

=head2␣hook

␣␣$app->hook(after_dispatch␣=>␣sub␣{...});

Extend␣L<Mojolicious>␣with␣hooks,␣which␣allow␣code␣to␣be␣shared␣with␣all␣requests␣indiscriminately,␣for␣a␣full␣list␣of
available␣hooks␣see␣L</"HOOKS">.

␣␣#␣Dispatchers␣will␣not␣run␣if␣there's␣already␣a␣response␣code␣defined
␣␣$app->hook(before_dispatch␣=>␣sub␣($c)␣{
␣␣␣␣$c->render(text␣=>␣'Skipped␣static␣file␣server␣and␣router!')
␣␣␣␣␣␣if␣$c->req->url->path->to_route␣=~␣/do_not_dispatch/;
␣␣});

=head2␣new

␣␣my␣$app␣=␣Mojolicious->new;
␣␣my␣$app␣=␣Mojolicious->new(moniker␣=>␣'foo_bar');
␣␣my␣$app␣=␣Mojolicious->new({moniker␣=>␣'foo_bar'});

Construct␣a␣new␣L<Mojolicious>␣application␣and␣call␣L</"startup">.␣Will␣automatically␣detect␣your␣home␣directory.␣Also
sets␣up␣the␣renderer,␣static␣file␣server,␣a␣default␣set␣of␣plugins␣and␣an␣L</"around_dispatch">␣hook␣with␣the␣default
exception␣handling.

=head2␣plugin

␣␣$app->plugin('some_thing');
␣␣$app->plugin('some_thing',␣foo␣=>␣23);
␣␣$app->plugin('some_thing',␣{foo␣=>␣23});
␣␣$app->plugin('SomeThing');
␣␣$app->plugin('SomeThing',␣foo␣=>␣23);
␣␣$app->plugin('SomeThing',␣{foo␣=>␣23});
␣␣$app->plugin('MyApp::Plugin::SomeThing');
␣␣$app->plugin('MyApp::Plugin::SomeThing',␣foo␣=>␣23);
␣␣$app->plugin('MyApp::Plugin::SomeThing',␣{foo␣=>␣23});

Load␣a␣plugin,␣for␣a␣full␣list␣of␣example␣plugins␣included␣in␣the␣L<Mojolicious>␣distribution␣see
L<Mojolicious::Plugins/"PLUGINS">.

=head2␣server

␣␣$app->server(Mojo::Server->new);

Emits␣the␣L</"before_server_start">␣hook.

=head2␣start

␣␣$app->start;
␣␣$app->start(@ARGV);

Start␣the␣command␣line␣interface␣for␣your␣application.␣For␣a␣full␣list␣of␣commands␣that␣are␣available␣by␣default␣see
L<Mojolicious::Commands/"COMMANDS">.␣Note␣that␣the␣options␣C<-h>/C<--help>,␣C<--home>␣and␣C<-m>/C<--mode>,␣which␣are
shared␣by␣all␣commands,␣will␣be␣parsed␣from␣C<@ARGV>␣during␣compile␣time.

␣␣#␣Always␣start␣daemon
␣␣$app->start('daemon',␣'-l',␣'http://*:8080');

=head2␣startup

␣␣$app->startup;

This␣is␣your␣main␣hook␣into␣the␣application,␣it␣will␣be␣called␣at␣application␣startup.␣Meant␣to␣be␣overloaded␣in␣a
subclass.

␣␣sub␣startup␣($self)␣{...}

=head2␣warmup

␣␣$app->warmup;

Preload␣classes␣from␣L</"preload_namespaces">␣for␣future␣use.

=head1␣HELPERS

In␣addition␣to␣the␣L</"ATTRIBUTES">␣and␣L</"METHODS">␣above␣you␣can␣also␣call␣helpers␣on␣L<Mojolicious>␣objects.␣This
includes␣all␣helpers␣from␣L<Mojolicious::Plugin::DefaultHelpers>␣and␣L<Mojolicious::Plugin::TagHelpers>.␣Note␣that
application␣helpers␣are␣always␣called␣with␣a␣new␣default␣controller␣object,␣so␣they␣can't␣depend␣on␣or␣change
controller␣state,␣which␣includes␣request,␣response␣and␣stash.

␣␣#␣Call␣helper
␣␣say␣$app->dumper({foo␣=>␣'bar'});

␣␣#␣Longer␣version
␣␣say␣$app->build_controller->helpers->dumper({foo␣=>␣'bar'});

=head1␣BUNDLED␣FILES

The␣L<Mojolicious>␣distribution␣includes␣a␣few␣files␣with␣different␣licenses␣that␣have␣been␣bundled␣for␣internal␣use.

=head2␣Mojolicious␣Artwork

␣␣Copyright␣(C)␣2010-2023,␣Sebastian␣Riedel.

Licensed␣under␣the␣CC-SA␣License,␣Version␣4.0␣L<http://creativecommons.org/licenses/by-sa/4.0>.

=head2␣jQuery

␣␣Copyright␣(C)␣jQuery␣Foundation.

Licensed␣under␣the␣MIT␣License,␣L<http://creativecommons.org/licenses/MIT>.

=head2␣highlight.js

␣␣Copyright␣(C)␣2006,␣Ivan␣Sagalaev.

Licensed␣under␣the␣BSD␣License,␣L<https://github.com/highlightjs/highlight.js/blob/master/LICENSE>.

=head2␣Bootstrap

␣␣Copyright␣2011-2020␣The␣Bootstrap␣Authors.
␣␣Copyright␣2011-2020␣Twitter,␣Inc.

Licensed␣under␣the␣MIT␣License,␣L<http://creativecommons.org/licenses/MIT>.

=head2␣Font␣Awesome

Licensed␣under␣the␣CC-BY␣License,␣Version␣4.0␣L<https://creativecommons.org/licenses/by/4.0/>␣and␣SIL␣OFL,␣Version␣1.1
L<https://opensource.org/licenses/OFL-1.1>.

=head1␣CODE␣NAMES

Every␣major␣release␣of␣L<Mojolicious>␣has␣a␣code␣name,␣these␣are␣the␣ones␣that␣have␣been␣used␣in␣the␣past.

9.0,␣C<Waffle>␣(U+1F9C7)

8.0,␣C<Supervillain>␣(U+1F9B9)

7.0,␣C<Doughnut>␣(U+1F369)

6.0,␣C<Clinking␣Beer␣Mugs>␣(U+1F37B)

5.0,␣C<Tiger␣Face>␣(U+1F42F)

4.0,␣C<Top␣Hat>␣(U+1F3A9)

3.0,␣C<Rainbow>␣(U+1F308)

2.0,␣C<Leaf␣Fluttering␣In␣Wind>␣(U+1F343)

1.0,␣C<Snowflake>␣(U+2744)

=head1␣SPONSORS

=over␣2

=item

L<Stix|https://stix.no>␣sponsored␣the␣creation␣of␣the␣Mojolicious␣logo␣(designed␣by␣Nicolai␣Graesdal)␣and␣transferred
its␣copyright␣to␣Sebastian␣Riedel.

=item

Some␣of␣the␣work␣on␣this␣distribution␣has␣been␣sponsored␣by␣L<The␣Perl␣Foundation|https://www.perlfoundation.org>.

=back

=head1␣AUTHORS

L<Mojolicious>␣is␣an␣open␣source␣project␣that␣relies␣on␣the␣tireless␣support␣of␣its␣contributors.

=head2␣Project␣Founder

Sebastian␣Riedel,␣C<kraih@mojolicious.org>

=head2␣Core␣Developers

Current␣voting␣members␣of␣the␣core␣team␣in␣alphabetical␣order:

=over␣2

CandyAngel,␣C<candyangel@mojolicious.org>

Christopher␣Rasch-Olsen␣Raa,␣C<christopher@mojolicious.org>

Dan␣Book,␣C<grinnz@mojolicious.org>

Jan␣Henning␣Thorsen,␣C<batman@mojolicious.org>

Joel␣Berger,␣C<jberger@mojolicious.org>

Marcus␣Ramberg,␣C<marcus@mojolicious.org>

=back

The␣following␣members␣of␣the␣core␣team␣are␣currently␣on␣hiatus:

=over␣2

Abhijit␣Menon-Sen,␣C<ams@cpan.org>

Glen␣Hinkle,␣C<tempire@cpan.org>

=back

=head2␣Contributors

In␣alphabetical␣order:

=over␣2

Adam␣Kennedy

Adriano␣Ferreira

Al␣Newkirk

Alex␣Efros

Alex␣Salimon

Alexander␣Karelas

Alexey␣Likhatskiy

Anatoly␣Sharifulin

Andre␣Parker

Andre␣Vieth

Andreas␣Guldstrand

Andreas␣Jaekel

Andreas␣Koenig

Andrew␣Fresh

Andrew␣Nugged

Andrey␣Khozov

Andrey␣Kuzmin

Andy␣Grundman

Andy␣Lester

Aristotle␣Pagaltzis

Ashley␣Dev

Ask␣Bjoern␣Hansen

Audrey␣Tang

Ben␣Tyler

Ben␣van␣Staveren

Benjamin␣Erhart

Bernhard␣Graf

Breno␣G.␣de␣Oliveira

Brian␣Duggan

Brian␣Medley

Burak␣Gursoy

Ch␣Lamprecht

Charlie␣Brady

Chas.␣J.␣Owens␣IV

Chase␣Whitener

Chris␣Scheller

Christian␣Hansen

chromatic

Curt␣Tilmes

Daniel␣Kimsey

Daniel␣Mantovani

Danijel␣Tasov

Dagfinn␣Ilmari␣Manns�ker

Danny␣Thomas

David␣Davis

David␣Webb

Diego␣Kuperman

Dmitriy␣Shalashov

Dmitry␣Konstantinov

Dominik␣Jarmulowicz

Dominique␣Dumont

Dotan␣Dimet

Douglas␣Christopher␣Wilson

Elmar␣S.␣Heeb

Ettore␣Di␣Giacinto

Eugen␣Konkov

Eugene␣Toropov

Flavio␣Poletti

Gisle␣Aas

Graham␣Barr

Graham␣Knop

Heiko␣Jansen

Henry␣Tang

Hideki␣Yamamura

Hiroki␣Toyokawa

Ian␣Goodacre

Ilya␣Chesnokov

Ilya␣Rassadin

James␣Duncan

Jan␣Jona␣Javorsek

Jan␣Schmidt

Jaroslav␣Muhin

Jesse␣Vincent

Johannes␣Plunien

John␣Kingsley

Jonathan␣Yu

Josh␣Leder

Kamen␣Naydenov

Karen␣Etheridge

Kazuhiro␣Shibuya

Kevin␣Old

Kitamura␣Akatsuki

Klaus␣S.␣Madsen

Knut␣Arne␣Bjorndal

Lars␣Balker␣Rasmussen

Lee␣Johnson

Leon␣Brocard

Lukas␣Mai

Magnus␣Holm

Maik␣Fischer

Mark␣Fowler

Mark␣Grimes

Mark␣Stosberg

Martin␣McGrath

Marty␣Tennison

Matt␣S␣Trout

Matthew␣Lineen

Maksym␣Komar

Maxim␣Vuets

Michael␣Gregorowicz

Michael␣Harris

Michael␣Jemmeson

Mike␣Magowan

Mirko␣Westermeier

Mons␣Anderson

Moritz␣Lenz

Neil␣Watkiss

Nic␣Sandfield

Nils␣Diewald

Oleg␣Zhelo

Olivier␣Mengue

Pascal␣Gaudette

Paul␣Evans

Paul␣Robins

Paul␣Tomlin

Pavel␣Shaydo

Pedro␣Melo

Peter␣Edwards

Pierre-Yves␣Ritschard

Piotr␣Roszatycki

Quentin␣Carbonneaux

Rafal␣Pocztarski

Randal␣Schwartz

Rawley␣Fowler

Richard␣Elberger

Rick␣Delaney

Robert␣Hicks

Robert␣Rothenberg

Robin␣Lee

Roland␣Lammel

Roy␣Storey

Ryan␣Jendoubi

Salvador␣Fandino

Santiago␣Zarate

Sascha␣Kiefer

Scott␣Wiersdorf

Sebastian␣Paaske␣Torholm

Sergey␣Zasenko

Simon␣Bertrang

Simone␣Tampieri

Shoichi␣Kaji

Shu␣Cho

Skye␣Shaw

Stanis␣Trendelenburg

Stefan␣Adams

Steffen␣Ullrich

Stephan␣Kulow

Stephane␣Este-Gracias

Stevan␣Little

Steve␣Atkins

Tatsuhiko␣Miyagawa

Terrence␣Brannon

Tianon␣Gravi

Tomas␣Znamenacek

Tudor␣Constantin

Ulrich␣Habel

Ulrich␣Kautz

Uwe␣Voelker

Veesh␣Goldman

Viacheslav␣Tykhanovskyi

Victor␣Engmark

Viliam␣Pucik

Wes␣Cravens

William␣Lindley

Yaroslav␣Korshak

Yuki␣Kimoto

Zak␣B.␣Elep

Zoffix␣Znet

=back

=head1␣COPYRIGHT␣AND␣LICENSE

Copyright␣(C)␣2008-2023,␣Sebastian␣Riedel␣and␣others.

This␣program␣is␣free␣software,␣you␣can␣redistribute␣it␣and/or␣modify␣it␣under␣the␣terms␣of␣the␣Artistic␣License␣version
2.0.

=head1␣SEE␣ALSO

L<https://github.com/mojolicious/mojo>,␣L<Mojolicious::Guides>,␣L<https://mojolicious.org>.

=cut
----------
Range: (746467,767743) (21276)
=encoding␣utf8

=head1␣NAME

Mojo::DOM␣-␣Minimalistic␣HTML/XML␣DOM␣parser␣with␣CSS␣selectors

=head1␣SYNOPSIS

␣␣use␣Mojo::DOM;

␣␣#␣Parse
␣␣my␣$dom␣=␣Mojo::DOM->new('<div><p␣id="a">Test</p><p␣id="b">123</p></div>');

␣␣#␣Find
␣␣say␣$dom->at('#b')->text;
␣␣say␣$dom->find('p')->map('text')->join("\n");
␣␣say␣$dom->find('[id]')->map(attr␣=>␣'id')->join("\n");

␣␣#␣Iterate
␣␣$dom->find('p[id]')->reverse->each(sub␣{␣say␣$_->{id}␣});

␣␣#␣Loop
␣␣for␣my␣$e␣($dom->find('p[id]')->each)␣{
␣␣␣␣say␣$e->{id},␣':',␣$e->text;
␣␣}

␣␣#␣Modify
␣␣$dom->find('div␣p')->last->append('<p␣id="c">456</p>');
␣␣$dom->at('#c')->prepend($dom->new_tag('p',␣id␣=>␣'d',␣'789'));
␣␣$dom->find(':not(p)')->map('strip');

␣␣#␣Render
␣␣say␣"$dom";

=head1␣DESCRIPTION

L<Mojo::DOM>␣is␣a␣minimalistic␣and␣relaxed␣HTML/XML␣DOM␣parser␣with␣CSS␣selector␣support.␣It␣will␣even␣try␣to␣interpret
broken␣HTML␣and␣XML,␣so␣you␣should␣not␣use␣it␣for␣validation.

=head1␣NODES␣AND␣ELEMENTS

When␣we␣parse␣an␣HTML/XML␣fragment,␣it␣gets␣turned␣into␣a␣tree␣of␣nodes.

␣␣<!DOCTYPE␣html>
␣␣<html>
␣␣␣␣<head><title>Hello</title></head>
␣␣␣␣<body>World!</body>
␣␣</html>

There␣are␣currently␣eight␣different␣kinds␣of␣nodes,␣C<cdata>,␣C<comment>,␣C<doctype>,␣C<pi>,␣C<raw>,␣C<root>,␣C<tag>
and␣C<text>.␣Elements␣are␣nodes␣of␣the␣type␣C<tag>.

␣␣root
␣␣|-␣doctype␣(html)
␣␣+-␣tag␣(html)
␣␣␣␣␣|-␣tag␣(head)
␣␣␣␣␣|␣␣+-␣tag␣(title)
␣␣␣␣␣|␣␣␣␣␣+-␣raw␣(Hello)
␣␣␣␣␣+-␣tag␣(body)
␣␣␣␣␣␣␣␣+-␣text␣(World!)

While␣all␣node␣types␣are␣represented␣as␣L<Mojo::DOM>␣objects,␣some␣methods␣like␣L</"attr">␣and␣L</"namespace">␣only
apply␣to␣elements.

=head1␣HTML␣AND␣XML

L<Mojo::DOM>␣defaults␣to␣HTML␣semantics,␣that␣means␣all␣tags␣and␣attribute␣names␣are␣lowercased␣and␣selectors␣need␣to
be␣lowercase␣as␣well.

␣␣#␣HTML␣semantics
␣␣my␣$dom␣=␣Mojo::DOM->new('<P␣ID="greeting">Hi!</P>');
␣␣say␣$dom->at('p[id]')->text;

If␣an␣XML␣declaration␣is␣found,␣the␣parser␣will␣automatically␣switch␣into␣XML␣mode␣and␣everything␣becomes
case-sensitive.

␣␣#␣XML␣semantics
␣␣my␣$dom␣=␣Mojo::DOM->new('<?xml␣version="1.0"?><P␣ID="greeting">Hi!</P>');
␣␣say␣$dom->at('P[ID]')->text;

HTML␣or␣XML␣semantics␣can␣also␣be␣forced␣with␣the␣L</"xml">␣method.

␣␣#␣Force␣HTML␣semantics
␣␣my␣$dom␣=␣Mojo::DOM->new->xml(0)->parse('<P␣ID="greeting">Hi!</P>');
␣␣say␣$dom->at('p[id]')->text;

␣␣#␣Force␣XML␣semantics
␣␣my␣$dom␣=␣Mojo::DOM->new->xml(1)->parse('<P␣ID="greeting">Hi!</P>');
␣␣say␣$dom->at('P[ID]')->text;

=head1␣METHODS

L<Mojo::DOM>␣implements␣the␣following␣methods.

=head2␣all_text

␣␣my␣$text␣=␣$dom->all_text;

Extract␣text␣content␣from␣all␣descendant␣nodes␣of␣this␣element.␣For␣HTML␣documents␣C<script>␣and␣C<style>␣elements␣are
excluded.

␣␣#␣"foo\nbarbaz\n"
␣␣$dom->parse("<div>foo\n<p>bar</p>baz\n</div>")->at('div')->all_text;

=head2␣ancestors

␣␣my␣$collection␣=␣$dom->ancestors;
␣␣my␣$collection␣=␣$dom->ancestors('div␣~␣p');

Find␣all␣ancestor␣elements␣of␣this␣node␣matching␣the␣CSS␣selector␣and␣return␣a␣L<Mojo::Collection>␣object␣containing
these␣elements␣as␣L<Mojo::DOM>␣objects.␣All␣selectors␣from␣L<Mojo::DOM::CSS/"SELECTORS">␣are␣supported.

␣␣#␣List␣tag␣names␣of␣ancestor␣elements
␣␣say␣$dom->ancestors->map('tag')->join("\n");

=head2␣append

␣␣$dom␣=␣$dom->append('<p>I␣♥␣Mojolicious!</p>');
␣␣$dom␣=␣$dom->append(Mojo::DOM->new);

Append␣HTML/XML␣fragment␣to␣this␣node␣(for␣all␣node␣types␣other␣than␣C<root>).

␣␣#␣"<div><h1>Test</h1><h2>123</h2></div>"
␣␣$dom->parse('<div><h1>Test</h1></div>')
␣␣␣␣->at('h1')->append('<h2>123</h2>')->root;

␣␣#␣"<p>Test␣123</p>"
␣␣$dom->parse('<p>Test</p>')->at('p')
␣␣␣␣->child_nodes->first->append('␣123')->root;

=head2␣append_content

␣␣$dom␣=␣$dom->append_content('<p>I␣♥␣Mojolicious!</p>');
␣␣$dom␣=␣$dom->append_content(Mojo::DOM->new);

Append␣HTML/XML␣fragment␣(for␣C<root>␣and␣C<tag>␣nodes)␣or␣raw␣content␣to␣this␣node's␣content.

␣␣#␣"<div><h1>Test123</h1></div>"
␣␣$dom->parse('<div><h1>Test</h1></div>')
␣␣␣␣->at('h1')->append_content('123')->root;

␣␣#␣"<!--␣Test␣123␣--><br>"
␣␣$dom->parse('<!--␣Test␣--><br>')
␣␣␣␣->child_nodes->first->append_content('123␣')->root;

␣␣#␣"<p>Test<i>123</i></p>"
␣␣$dom->parse('<p>Test</p>')->at('p')->append_content('<i>123</i>')->root;

=head2␣at

␣␣my␣$result␣=␣$dom->at('div␣~␣p');
␣␣my␣$result␣=␣$dom->at('svg|line',␣svg␣=>␣'http://www.w3.org/2000/svg');

Find␣first␣descendant␣element␣of␣this␣element␣matching␣the␣CSS␣selector␣and␣return␣it␣as␣a␣L<Mojo::DOM>␣object,␣or
C<undef>␣if␣none␣could␣be␣found.␣All␣selectors␣from␣L<Mojo::DOM::CSS/"SELECTORS">␣are␣supported.

␣␣#␣Find␣first␣element␣with␣"svg"␣namespace␣definition
␣␣my␣$namespace␣=␣$dom->at('[xmlns\:svg]')->{'xmlns:svg'};

Trailing␣key/value␣pairs␣can␣be␣used␣to␣declare␣xml␣namespace␣aliases.

␣␣#␣"<rect␣/>"
␣␣$dom->parse('<svg␣xmlns="http://www.w3.org/2000/svg"><rect␣/></svg>')
␣␣␣␣->at('svg|rect',␣svg␣=>␣'http://www.w3.org/2000/svg');

=head2␣attr

␣␣my␣$hash␣=␣$dom->attr;
␣␣my␣$foo␣␣=␣$dom->attr('foo');
␣␣$dom␣␣␣␣␣=␣$dom->attr({foo␣=>␣'bar'});
␣␣$dom␣␣␣␣␣=␣$dom->attr(foo␣=>␣'bar');

This␣element's␣attributes.

␣␣#␣Remove␣an␣attribute
␣␣delete␣$dom->attr->{id};

␣␣#␣Attribute␣without␣value
␣␣$dom->attr(selected␣=>␣undef);

␣␣#␣List␣id␣attributes
␣␣say␣$dom->find('*')->map(attr␣=>␣'id')->compact->join("\n");

=head2␣child_nodes

␣␣my␣$collection␣=␣$dom->child_nodes;

Return␣a␣L<Mojo::Collection>␣object␣containing␣all␣child␣nodes␣of␣this␣element␣as␣L<Mojo::DOM>␣objects.

␣␣#␣"<p><b>123</b></p>"
␣␣$dom->parse('<p>Test<b>123</b></p>')->at('p')->child_nodes->first->remove;

␣␣#␣"<!DOCTYPE␣html>"
␣␣$dom->parse('<!DOCTYPE␣html><b>123</b>')->child_nodes->first;

␣␣#␣"␣Test␣"
␣␣$dom->parse('<b>123</b><!--␣Test␣-->')->child_nodes->last->content;

=head2␣children

␣␣my␣$collection␣=␣$dom->children;
␣␣my␣$collection␣=␣$dom->children('div␣~␣p');

Find␣all␣child␣elements␣of␣this␣element␣matching␣the␣CSS␣selector␣and␣return␣a␣L<Mojo::Collection>␣object␣containing
these␣elements␣as␣L<Mojo::DOM>␣objects.␣All␣selectors␣from␣L<Mojo::DOM::CSS/"SELECTORS">␣are␣supported.

␣␣#␣Show␣tag␣name␣of␣random␣child␣element
␣␣say␣$dom->children->shuffle->first->tag;

=head2␣content

␣␣my␣$str␣=␣$dom->content;
␣␣$dom␣␣␣␣=␣$dom->content('<p>I␣♥␣Mojolicious!</p>');
␣␣$dom␣␣␣␣=␣$dom->content(Mojo::DOM->new);

Return␣this␣node's␣content␣or␣replace␣it␣with␣HTML/XML␣fragment␣(for␣C<root>␣and␣C<tag>␣nodes)␣or␣raw␣content.

␣␣#␣"<b>Test</b>"
␣␣$dom->parse('<div><b>Test</b></div>')->at('div')->content;

␣␣#␣"<div><h1>123</h1></div>"
␣␣$dom->parse('<div><h1>Test</h1></div>')->at('h1')->content('123')->root;

␣␣#␣"<p><i>123</i></p>"
␣␣$dom->parse('<p>Test</p>')->at('p')->content('<i>123</i>')->root;

␣␣#␣"<div><h1></h1></div>"
␣␣$dom->parse('<div><h1>Test</h1></div>')->at('h1')->content('')->root;

␣␣#␣"␣Test␣"
␣␣$dom->parse('<!--␣Test␣--><br>')->child_nodes->first->content;

␣␣#␣"<div><!--␣123␣-->456</div>"
␣␣$dom->parse('<div><!--␣Test␣-->456</div>')
␣␣␣␣->at('div')->child_nodes->first->content('␣123␣')->root;

=head2␣descendant_nodes

␣␣my␣$collection␣=␣$dom->descendant_nodes;

Return␣a␣L<Mojo::Collection>␣object␣containing␣all␣descendant␣nodes␣of␣this␣element␣as␣L<Mojo::DOM>␣objects.

␣␣#␣"<p><b>123</b></p>"
␣␣$dom->parse('<p><!--␣Test␣--><b>123<!--␣456␣--></b></p>')
␣␣␣␣->descendant_nodes->grep(sub␣{␣$_->type␣eq␣'comment'␣})
␣␣␣␣->map('remove')->first;

␣␣#␣"<p><b>test</b>test</p>"
␣␣$dom->parse('<p><b>123</b>456</p>')
␣␣␣␣->at('p')->descendant_nodes->grep(sub␣{␣$_->type␣eq␣'text'␣})
␣␣␣␣->map(content␣=>␣'test')->first->root;

=head2␣find

␣␣my␣$collection␣=␣$dom->find('div␣~␣p');
␣␣my␣$collection␣=␣$dom->find('svg|line',␣svg␣=>␣'http://www.w3.org/2000/svg');

Find␣all␣descendant␣elements␣of␣this␣element␣matching␣the␣CSS␣selector␣and␣return␣a␣L<Mojo::Collection>␣object
containing␣these␣elements␣as␣L<Mojo::DOM>␣objects.␣All␣selectors␣from␣L<Mojo::DOM::CSS/"SELECTORS">␣are␣supported.

␣␣#␣Find␣a␣specific␣element␣and␣extract␣information
␣␣my␣$id␣=␣$dom->find('div')->[23]{id};

␣␣#␣Extract␣information␣from␣multiple␣elements
␣␣my␣@headers␣=␣$dom->find('h1,␣h2,␣h3')->map('text')->each;

␣␣#␣Count␣all␣the␣different␣tags
␣␣my␣$hash␣=␣$dom->find('*')->reduce(sub␣{␣$a->{$b->tag}++;␣$a␣},␣{});

␣␣#␣Find␣elements␣with␣a␣class␣that␣contains␣dots
␣␣my␣@divs␣=␣$dom->find('div.foo\.bar')->each;

Trailing␣key/value␣pairs␣can␣be␣used␣to␣declare␣xml␣namespace␣aliases.

␣␣#␣"<rect␣/>"
␣␣$dom->parse('<svg␣xmlns="http://www.w3.org/2000/svg"><rect␣/></svg>')
␣␣␣␣->find('svg|rect',␣svg␣=>␣'http://www.w3.org/2000/svg')->first;

=head2␣following

␣␣my␣$collection␣=␣$dom->following;
␣␣my␣$collection␣=␣$dom->following('div␣~␣p');

Find␣all␣sibling␣elements␣after␣this␣node␣matching␣the␣CSS␣selector␣and␣return␣a␣L<Mojo::Collection>␣object␣containing
these␣elements␣as␣L<Mojo::DOM>␣objects.␣All␣selectors␣from␣L<Mojo::DOM::CSS/"SELECTORS">␣are␣supported.

␣␣#␣List␣tags␣of␣sibling␣elements␣after␣this␣node
␣␣say␣$dom->following->map('tag')->join("\n");

=head2␣following_nodes

␣␣my␣$collection␣=␣$dom->following_nodes;

Return␣a␣L<Mojo::Collection>␣object␣containing␣all␣sibling␣nodes␣after␣this␣node␣as␣L<Mojo::DOM>␣objects.

␣␣#␣"C"
␣␣$dom->parse('<p>A</p><!--␣B␣-->C')->at('p')->following_nodes->last->content;

=head2␣matches

␣␣my␣$bool␣=␣$dom->matches('div␣~␣p');
␣␣my␣$bool␣=␣$dom->matches('svg|line',␣svg␣=>␣'http://www.w3.org/2000/svg');

Check␣if␣this␣element␣matches␣the␣CSS␣selector.␣All␣selectors␣from␣L<Mojo::DOM::CSS/"SELECTORS">␣are␣supported.

␣␣#␣True
␣␣$dom->parse('<p␣class="a">A</p>')->at('p')->matches('.a');
␣␣$dom->parse('<p␣class="a">A</p>')->at('p')->matches('p[class]');

␣␣#␣False
␣␣$dom->parse('<p␣class="a">A</p>')->at('p')->matches('.b');
␣␣$dom->parse('<p␣class="a">A</p>')->at('p')->matches('p[id]');

Trailing␣key/value␣pairs␣can␣be␣used␣to␣declare␣xml␣namespace␣aliases.

␣␣#␣True
␣␣$dom->parse('<svg␣xmlns="http://www.w3.org/2000/svg"><rect␣/></svg>')
␣␣␣␣->matches('svg|rect',␣svg␣=>␣'http://www.w3.org/2000/svg');

=head2␣namespace

␣␣my␣$namespace␣=␣$dom->namespace;

Find␣this␣element's␣namespace,␣or␣return␣C<undef>␣if␣none␣could␣be␣found.

␣␣#␣"http://www.w3.org/2000/svg"
␣␣Mojo::DOM->new('<svg␣xmlns:svg="http://www.w3.org/2000/svg"><svg:circle>3.14</svg:circle></svg>')->at('svg\:circle')->namespace;

␣␣#␣Find␣namespace␣for␣an␣element␣with␣namespace␣prefix
␣␣my␣$namespace␣=␣$dom->at('svg␣>␣svg\:circle')->namespace;

␣␣#␣Find␣namespace␣for␣an␣element␣that␣may␣or␣may␣not␣have␣a␣namespace␣prefix
␣␣my␣$namespace␣=␣$dom->at('svg␣>␣circle')->namespace;

=head2␣new

␣␣my␣$dom␣=␣Mojo::DOM->new;
␣␣my␣$dom␣=␣Mojo::DOM->new('<foo␣bar="baz">I␣♥␣Mojolicious!</foo>');

Construct␣a␣new␣scalar-based␣L<Mojo::DOM>␣object␣and␣L</"parse">␣HTML/XML␣fragment␣if␣necessary.

=head2␣new_tag

␣␣my␣$tag␣=␣Mojo::DOM->new_tag('div');
␣␣my␣$tag␣=␣$dom->new_tag('div');
␣␣my␣$tag␣=␣$dom->new_tag('div',␣id␣=>␣'foo',␣hidden␣=>␣undef);
␣␣my␣$tag␣=␣$dom->new_tag('div',␣'safe␣content');
␣␣my␣$tag␣=␣$dom->new_tag('div',␣id␣=>␣'foo',␣'safe␣content');
␣␣my␣$tag␣=␣$dom->new_tag('div',␣data␣=>␣{mojo␣=>␣'rocks'},␣'safe␣content');
␣␣my␣$tag␣=␣$dom->new_tag('div',␣id␣=>␣'foo',␣sub␣{␣'unsafe␣content'␣});

Construct␣a␣new␣L<Mojo::DOM>␣object␣for␣an␣HTML/XML␣tag␣with␣or␣without␣attributes␣and␣content.␣The␣C<data>␣attribute
may␣contain␣a␣hash␣reference␣with␣key/value␣pairs␣to␣generate␣attributes␣from.

␣␣#␣"<br>"
␣␣$dom->new_tag('br');

␣␣#␣"<div></div>"
␣␣$dom->new_tag('div');

␣␣#␣"<div␣id="foo"␣hidden></div>"
␣␣$dom->new_tag('div',␣id␣=>␣'foo',␣hidden␣=>␣undef);

␣␣#␣"<div>test␣&amp;␣123</div>"
␣␣$dom->new_tag('div',␣'test␣&␣123');

␣␣#␣"<div␣id="foo">test␣&amp;␣123</div>"
␣␣$dom->new_tag('div',␣id␣=>␣'foo',␣'test␣&␣123');

␣␣#␣"<div␣data-foo="1"␣data-bar="test">test␣&amp;␣123</div>""
␣␣$dom->new_tag('div',␣data␣=>␣{foo␣=>␣1,␣Bar␣=>␣'test'},␣'test␣&␣123');

␣␣#␣"<div␣id="foo">test␣&␣123</div>"
␣␣$dom->new_tag('div',␣id␣=>␣'foo',␣sub␣{␣'test␣&␣123'␣});

␣␣#␣"<div>Hello<b>Mojo!</b></div>"
␣␣$dom->parse('<div>Hello</div>')->at('div')
␣␣␣␣->append_content($dom->new_tag('b',␣'Mojo!'))->root;

=head2␣next

␣␣my␣$sibling␣=␣$dom->next;

Return␣L<Mojo::DOM>␣object␣for␣next␣sibling␣element,␣or␣C<undef>␣if␣there␣are␣no␣more␣siblings.

␣␣#␣"<h2>123</h2>"
␣␣$dom->parse('<div><h1>Test</h1><h2>123</h2></div>')->at('h1')->next;

=head2␣next_node

␣␣my␣$sibling␣=␣$dom->next_node;

Return␣L<Mojo::DOM>␣object␣for␣next␣sibling␣node,␣or␣C<undef>␣if␣there␣are␣no␣more␣siblings.

␣␣#␣"456"
␣␣$dom->parse('<p><b>123</b><!--␣Test␣-->456</p>')
␣␣␣␣->at('b')->next_node->next_node;

␣␣#␣"␣Test␣"
␣␣$dom->parse('<p><b>123</b><!--␣Test␣-->456</p>')
␣␣␣␣->at('b')->next_node->content;

=head2␣parent

␣␣my␣$parent␣=␣$dom->parent;

Return␣L<Mojo::DOM>␣object␣for␣parent␣of␣this␣node,␣or␣C<undef>␣if␣this␣node␣has␣no␣parent.

␣␣#␣"<b><i>Test</i></b>"
␣␣$dom->parse('<p><b><i>Test</i></b></p>')->at('i')->parent;

=head2␣parse

␣␣$dom␣=␣$dom->parse('<foo␣bar="baz">I␣♥␣Mojolicious!</foo>');

Parse␣HTML/XML␣fragment␣with␣L<Mojo::DOM::HTML>.

␣␣#␣Parse␣XML
␣␣my␣$dom␣=␣Mojo::DOM->new->xml(1)->parse('<foo>I␣♥␣Mojolicious!</foo>');

=head2␣preceding

␣␣my␣$collection␣=␣$dom->preceding;
␣␣my␣$collection␣=␣$dom->preceding('div␣~␣p');

Find␣all␣sibling␣elements␣before␣this␣node␣matching␣the␣CSS␣selector␣and␣return␣a␣L<Mojo::Collection>␣object␣containing
these␣elements␣as␣L<Mojo::DOM>␣objects.␣All␣selectors␣from␣L<Mojo::DOM::CSS/"SELECTORS">␣are␣supported.

␣␣#␣List␣tags␣of␣sibling␣elements␣before␣this␣node
␣␣say␣$dom->preceding->map('tag')->join("\n");

=head2␣preceding_nodes

␣␣my␣$collection␣=␣$dom->preceding_nodes;

Return␣a␣L<Mojo::Collection>␣object␣containing␣all␣sibling␣nodes␣before␣this␣node␣as␣L<Mojo::DOM>␣objects.

␣␣#␣"A"
␣␣$dom->parse('A<!--␣B␣--><p>C</p>')->at('p')->preceding_nodes->first->content;

=head2␣prepend

␣␣$dom␣=␣$dom->prepend('<p>I␣♥␣Mojolicious!</p>');
␣␣$dom␣=␣$dom->prepend(Mojo::DOM->new);

Prepend␣HTML/XML␣fragment␣to␣this␣node␣(for␣all␣node␣types␣other␣than␣C<root>).

␣␣#␣"<div><h1>Test</h1><h2>123</h2></div>"
␣␣$dom->parse('<div><h2>123</h2></div>')
␣␣␣␣->at('h2')->prepend('<h1>Test</h1>')->root;

␣␣#␣"<p>Test␣123</p>"
␣␣$dom->parse('<p>123</p>')
␣␣␣␣->at('p')->child_nodes->first->prepend('Test␣')->root;

=head2␣prepend_content

␣␣$dom␣=␣$dom->prepend_content('<p>I␣♥␣Mojolicious!</p>');
␣␣$dom␣=␣$dom->prepend_content(Mojo::DOM->new);

Prepend␣HTML/XML␣fragment␣(for␣C<root>␣and␣C<tag>␣nodes)␣or␣raw␣content␣to␣this␣node's␣content.

␣␣#␣"<div><h2>Test123</h2></div>"
␣␣$dom->parse('<div><h2>123</h2></div>')
␣␣␣␣->at('h2')->prepend_content('Test')->root;

␣␣#␣"<!--␣Test␣123␣--><br>"
␣␣$dom->parse('<!--␣123␣--><br>')
␣␣␣␣->child_nodes->first->prepend_content('␣Test')->root;

␣␣#␣"<p><i>123</i>Test</p>"
␣␣$dom->parse('<p>Test</p>')->at('p')->prepend_content('<i>123</i>')->root;

=head2␣previous

␣␣my␣$sibling␣=␣$dom->previous;

Return␣L<Mojo::DOM>␣object␣for␣previous␣sibling␣element,␣or␣C<undef>␣if␣there␣are␣no␣more␣siblings.

␣␣#␣"<h1>Test</h1>"
␣␣$dom->parse('<div><h1>Test</h1><h2>123</h2></div>')->at('h2')->previous;

=head2␣previous_node

␣␣my␣$sibling␣=␣$dom->previous_node;

Return␣L<Mojo::DOM>␣object␣for␣previous␣sibling␣node,␣or␣C<undef>␣if␣there␣are␣no␣more␣siblings.

␣␣#␣"123"
␣␣$dom->parse('<p>123<!--␣Test␣--><b>456</b></p>')
␣␣␣␣->at('b')->previous_node->previous_node;

␣␣#␣"␣Test␣"
␣␣$dom->parse('<p>123<!--␣Test␣--><b>456</b></p>')
␣␣␣␣->at('b')->previous_node->content;

=head2␣remove

␣␣my␣$parent␣=␣$dom->remove;

Remove␣this␣node␣and␣return␣L</"root">␣(for␣C<root>␣nodes)␣or␣L</"parent">.

␣␣#␣"<div></div>"
␣␣$dom->parse('<div><h1>Test</h1></div>')->at('h1')->remove;

␣␣#␣"<p><b>456</b></p>"
␣␣$dom->parse('<p>123<b>456</b></p>')
␣␣␣␣->at('p')->child_nodes->first->remove->root;

=head2␣replace

␣␣my␣$parent␣=␣$dom->replace('<div>I␣♥␣Mojolicious!</div>');
␣␣my␣$parent␣=␣$dom->replace(Mojo::DOM->new);

Replace␣this␣node␣with␣HTML/XML␣fragment␣and␣return␣L</"root">␣(for␣C<root>␣nodes)␣or␣L</"parent">.

␣␣#␣"<div><h2>123</h2></div>"
␣␣$dom->parse('<div><h1>Test</h1></div>')->at('h1')->replace('<h2>123</h2>');

␣␣#␣"<p><b>123</b></p>"
␣␣$dom->parse('<p>Test</p>')
␣␣␣␣->at('p')->child_nodes->[0]->replace('<b>123</b>')->root;

=head2␣root

␣␣my␣$root␣=␣$dom->root;

Return␣L<Mojo::DOM>␣object␣for␣C<root>␣node.

=head2␣selector

␣␣my␣$selector␣=␣$dom->selector;

Get␣a␣unique␣CSS␣selector␣for␣this␣element.

␣␣#␣"ul:nth-child(1)␣>␣li:nth-child(2)"
␣␣$dom->parse('<ul><li>Test</li><li>123</li></ul>')->find('li')->last->selector;

␣␣#␣"p:nth-child(1)␣>␣b:nth-child(1)␣>␣i:nth-child(1)"
␣␣$dom->parse('<p><b><i>Test</i></b></p>')->at('i')->selector;

=head2␣strip

␣␣my␣$parent␣=␣$dom->strip;

Remove␣this␣element␣while␣preserving␣its␣content␣and␣return␣L</"parent">.

␣␣#␣"<div>Test</div>"
␣␣$dom->parse('<div><h1>Test</h1></div>')->at('h1')->strip;

=head2␣tag

␣␣my␣$tag␣=␣$dom->tag;
␣␣$dom␣␣␣␣=␣$dom->tag('div');

This␣element's␣tag␣name.

␣␣#␣List␣tag␣names␣of␣child␣elements
␣␣say␣$dom->children->map('tag')->join("\n");

=head2␣tap

␣␣$dom␣=␣$dom->tap(sub␣{...});

Alias␣for␣L<Mojo::Base/"tap">.

=head2␣text

␣␣my␣$text␣=␣$dom->text;

Extract␣text␣content␣from␣this␣element␣only␣(not␣including␣child␣elements).

␣␣#␣"bar"
␣␣$dom->parse("<div>foo<p>bar</p>baz</div>")->at('p')->text;

␣␣#␣"foo\nbaz\n"
␣␣$dom->parse("<div>foo\n<p>bar</p>baz\n</div>")->at('div')->text;

To␣extract␣text␣content␣from␣all␣descendant␣nodes␣see␣L</"all_text">.

=head2␣to_string

␣␣my␣$str␣=␣$dom->to_string;

Render␣this␣node␣and␣its␣content␣to␣HTML/XML.

␣␣#␣"<b>Test</b>"
␣␣$dom->parse('<div><b>Test</b></div>')->at('div␣b')->to_string;

=head2␣tree

␣␣my␣$tree␣=␣$dom->tree;
␣␣$dom␣␣␣␣␣=␣$dom->tree(['root']);

Document␣Object␣Model.␣Note␣that␣this␣structure␣should␣only␣be␣used␣very␣carefully␣since␣it␣is␣very␣dynamic.

=head2␣type

␣␣my␣$type␣=␣$dom->type;

This␣node's␣type,␣usually␣C<cdata>,␣C<comment>,␣C<doctype>,␣C<pi>,␣C<raw>,␣C<root>,␣C<tag>␣or␣C<text>.

␣␣#␣"cdata"
␣␣$dom->parse('<![CDATA[Test]]>')->child_nodes->first->type;

␣␣#␣"comment"
␣␣$dom->parse('<!--␣Test␣-->')->child_nodes->first->type;

␣␣#␣"doctype"
␣␣$dom->parse('<!DOCTYPE␣html>')->child_nodes->first->type;

␣␣#␣"pi"
␣␣$dom->parse('<?xml␣version="1.0"?>')->child_nodes->first->type;

␣␣#␣"raw"
␣␣$dom->parse('<title>Test</title>')->at('title')->child_nodes->first->type;

␣␣#␣"root"
␣␣$dom->parse('<p>Test</p>')->type;

␣␣#␣"tag"
␣␣$dom->parse('<p>Test</p>')->at('p')->type;

␣␣#␣"text"
␣␣$dom->parse('<p>Test</p>')->at('p')->child_nodes->first->type;

=head2␣val

␣␣my␣$value␣=␣$dom->val;

Extract␣value␣from␣form␣element␣(such␣as␣C<button>,␣C<input>,␣C<option>,␣C<select>␣and␣C<textarea>),␣or␣return␣C<undef>
if␣this␣element␣has␣no␣value.␣In␣the␣case␣of␣C<select>␣with␣C<multiple>␣attribute,␣find␣C<option>␣elements␣with
C<selected>␣attribute␣and␣return␣an␣array␣reference␣with␣all␣values,␣or␣C<undef>␣if␣none␣could␣be␣found.

␣␣#␣"a"
␣␣$dom->parse('<input␣name=test␣value=a>')->at('input')->val;

␣␣#␣"b"
␣␣$dom->parse('<textarea>b</textarea>')->at('textarea')->val;

␣␣#␣"c"
␣␣$dom->parse('<option␣value="c">Test</option>')->at('option')->val;

␣␣#␣"d"
␣␣$dom->parse('<select><option␣selected>d</option></select>')
␣␣␣␣->at('select')->val;

␣␣#␣"e"
␣␣$dom->parse('<select␣multiple><option␣selected>e</option></select>')
␣␣␣␣->at('select')->val->[0];

␣␣#␣"on"
␣␣$dom->parse('<input␣name=test␣type=checkbox>')->at('input')->val;

=head2␣with_roles

␣␣my␣$new_class␣=␣Mojo::DOM->with_roles('Mojo::DOM::Role::One');
␣␣my␣$new_class␣=␣Mojo::DOM->with_roles('+One',␣'+Two');
␣␣$dom␣␣␣␣␣␣␣␣␣␣=␣$dom->with_roles('+One',␣'+Two');

Alias␣for␣L<Mojo::Base/"with_roles">.

=head2␣wrap

␣␣$dom␣=␣$dom->wrap('<div></div>');
␣␣$dom␣=␣$dom->wrap(Mojo::DOM->new);

Wrap␣HTML/XML␣fragment␣around␣this␣node␣(for␣all␣node␣types␣other␣than␣C<root>),␣placing␣it␣as␣the␣last␣child␣of␣the
first␣innermost␣element.

␣␣#␣"<p>123<b>Test</b></p>"
␣␣$dom->parse('<b>Test</b>')->at('b')->wrap('<p>123</p>')->root;

␣␣#␣"<div><p><b>Test</b></p>123</div>"
␣␣$dom->parse('<b>Test</b>')->at('b')->wrap('<div><p></p>123</div>')->root;

␣␣#␣"<p><b>Test</b></p><p>123</p>"
␣␣$dom->parse('<b>Test</b>')->at('b')->wrap('<p></p><p>123</p>')->root;

␣␣#␣"<p><b>Test</b></p>"
␣␣$dom->parse('<p>Test</p>')->at('p')->child_nodes->first->wrap('<b>')->root;

=head2␣wrap_content

␣␣$dom␣=␣$dom->wrap_content('<div></div>');
␣␣$dom␣=␣$dom->wrap_content(Mojo::DOM->new);

Wrap␣HTML/XML␣fragment␣around␣this␣node's␣content␣(for␣C<root>␣and␣C<tag>␣nodes),␣placing␣it␣as␣the␣last␣children␣of
the␣first␣innermost␣element.

␣␣#␣"<p><b>123Test</b></p>"
␣␣$dom->parse('<p>Test<p>')->at('p')->wrap_content('<b>123</b>')->root;

␣␣#␣"<p><b>Test</b></p><p>123</p>"
␣␣$dom->parse('<b>Test</b>')->wrap_content('<p></p><p>123</p>');

=head2␣xml

␣␣my␣$bool␣=␣$dom->xml;
␣␣$dom␣␣␣␣␣=␣$dom->xml($bool);

Disable␣HTML␣semantics␣in␣parser␣and␣activate␣case-sensitivity,␣defaults␣to␣auto-detection␣based␣on␣XML␣declarations.

=head1␣OPERATORS

L<Mojo::DOM>␣overloads␣the␣following␣operators.

=head2␣array

␣␣my␣@nodes␣=␣@$dom;

Alias␣for␣L</"child_nodes">.

␣␣#␣"<!--␣Test␣-->"
␣␣$dom->parse('<!--␣Test␣--><b>123</b>')->[0];

=head2␣bool

␣␣my␣$bool␣=␣!!$dom;

Always␣true.

=head2␣hash

␣␣my␣%attrs␣=␣%$dom;

Alias␣for␣L</"attr">.

␣␣#␣"test"
␣␣$dom->parse('<div␣id="test">Test</div>')->at('div')->{id};

=head2␣stringify

␣␣my␣$str␣=␣"$dom";

Alias␣for␣L</"to_string">.

=head1␣SEE␣ALSO

L<Mojolicious>,␣L<Mojolicious::Guides>,␣L<https://mojolicious.org>.

=cut
----------
Range: (893548,917461) (23913)
=encoding␣utf8

=head1␣NAME

Mojo::UserAgent␣-␣Non-blocking␣I/O␣HTTP␣and␣WebSocket␣user␣agent

=head1␣SYNOPSIS

␣␣use␣Mojo::UserAgent;

␣␣#␣Fine␣grained␣response␣handling␣(dies␣on␣connection␣errors)
␣␣my␣$ua␣␣=␣Mojo::UserAgent->new;
␣␣my␣$res␣=␣$ua->get('docs.mojolicious.org')->result;
␣␣if␣␣␣␣($res->is_success)␣␣{␣say␣$res->body␣}
␣␣elsif␣($res->is_error)␣␣␣␣{␣say␣$res->message␣}
␣␣elsif␣($res->code␣==␣301)␣{␣say␣$res->headers->location␣}
␣␣else␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣␣{␣say␣'Whatever...'␣}

␣␣#␣Say␣hello␣to␣the␣Unicode␣snowman␣and␣include␣an␣Accept␣header
␣␣say␣$ua->get('www.☃.net?hello=there'␣=>␣{Accept␣=>␣'*/*'})->result->body;

␣␣#␣Extract␣data␣from␣HTML␣and␣XML␣resources␣with␣CSS␣selectors
␣␣say␣$ua->get('www.perl.org')->result->dom->at('title')->text;

␣␣#␣Scrape␣the␣latest␣headlines␣from␣a␣news␣site
␣␣say␣$ua->get('blogs.perl.org')->result->dom->find('h2␣>␣a')->map('text')->join("\n");

␣␣#␣IPv6␣PUT␣request␣with␣Content-Type␣header␣and␣content
␣␣my␣$tx␣=␣$ua->put('[::1]:3000'␣=>␣{'Content-Type'␣=>␣'text/plain'}␣=>␣'Hi!');

␣␣#␣Quick␣JSON␣API␣request␣with␣Basic␣authentication
␣␣my␣$url␣=␣Mojo::URL->new('https://example.com/test.json')->userinfo('sri:☃');
␣␣my␣$value␣=␣$ua->get($url)->result->json;

␣␣#␣JSON␣POST␣(application/json)␣with␣TLS␣certificate␣authentication
␣␣my␣$tx␣=␣$ua->cert('tls.crt')->key('tls.key')->post('https://example.com'␣=>␣json␣=>␣{top␣=>␣'secret'});

␣␣#␣Form␣POST␣(application/x-www-form-urlencoded)
␣␣my␣$tx␣=␣$ua->post('https://metacpan.org/search'␣=>␣form␣=>␣{q␣=>␣'mojo'});

␣␣#␣Search␣DuckDuckGo␣anonymously␣through␣Tor
␣␣$ua->proxy->http('socks://127.0.0.1:9050');
␣␣say␣$ua->get('api.3g2upl4pq6kufc4m.onion/?q=mojolicious&format=json')->result->json('/Abstract');

␣␣#␣GET␣request␣via␣UNIX␣domain␣socket␣"/tmp/myapp.sock"␣(percent␣encoded␣slash)
␣␣say␣$ua->get('http+unix://%2Ftmp%2Fmyapp.sock/test')->result->body;

␣␣#␣Follow␣redirects␣to␣download␣Mojolicious␣from␣GitHub
␣␣$ua->max_redirects(5)
␣␣␣␣->get('https://www.github.com/mojolicious/mojo/tarball/main')
␣␣␣␣->result->save_to('/home/sri/mojo.tar.gz');

␣␣#␣Non-blocking␣request
␣␣$ua->get('mojolicious.org'␣=>␣sub␣($ua,␣$tx)␣{␣say␣$tx->result->dom->at('title')->text␣});
␣␣Mojo::IOLoop->start␣unless␣Mojo::IOLoop->is_running;

␣␣#␣Concurrent␣non-blocking␣requests␣(synchronized␣with␣promises)
␣␣my␣$mojo_promise␣=␣$ua->get_p('mojolicious.org');
␣␣my␣$cpan_promise␣=␣$ua->get_p('cpan.org');
␣␣Mojo::Promise->all($mojo_promise,␣$cpan_promise)->then(sub␣($mojo,␣$cpan)␣{
␣␣␣␣say␣$mojo->[0]->result->dom->at('title')->text;
␣␣␣␣say␣$cpan->[0]->result->dom->at('title')->text;
␣␣})->wait;

␣␣#␣WebSocket␣connection␣sending␣and␣receiving␣JSON␣via␣UNIX␣domain␣socket
␣␣$ua->websocket('ws+unix://%2Ftmp%2Fmyapp.sock/echo.json'␣=>␣sub␣($ua,␣$tx)␣{
␣␣␣␣say␣'WebSocket␣handshake␣failed!'␣and␣return␣unless␣$tx->is_websocket;
␣␣␣␣$tx->on(json␣=>␣sub␣($tx,␣$hash)␣{
␣␣␣␣␣␣say␣"WebSocket␣message␣via␣JSON:␣$hash->{msg}";
␣␣␣␣␣␣$tx->finish;
␣␣␣␣});
␣␣␣␣$tx->send({json␣=>␣{msg␣=>␣'Hello␣World!'}});
␣␣});
␣␣Mojo::IOLoop->start␣unless␣Mojo::IOLoop->is_running;

=head1␣DESCRIPTION

L<Mojo::UserAgent>␣is␣a␣full␣featured␣non-blocking␣I/O␣HTTP␣and␣WebSocket␣user␣agent,␣with␣IPv6,␣TLS,␣SNI,␣IDNA,
HTTP/SOCKS5␣proxy,␣UNIX␣domain␣socket,␣Comet␣(long␣polling),␣Promises/A+,␣keep-alive,␣connection␣pooling,␣timeout,
cookie,␣multipart,␣gzip␣compression␣and␣multiple␣event␣loop␣support.

All␣connections␣will␣be␣reset␣automatically␣if␣a␣new␣process␣has␣been␣forked,␣this␣allows␣multiple␣processes␣to␣share
the␣same␣L<Mojo::UserAgent>␣object␣safely.

For␣better␣scalability␣(epoll,␣kqueue)␣and␣to␣provide␣non-blocking␣name␣resolution,␣SOCKS5␣as␣well␣as␣TLS␣support,␣the
optional␣modules␣L<EV>␣(4.32+),␣L<Net::DNS::Native>␣(0.15+),␣L<IO::Socket::Socks>␣(0.64+)␣and␣L<IO::Socket::SSL>
(2.009+)␣will␣be␣used␣automatically␣if␣possible.␣Individual␣features␣can␣also␣be␣disabled␣with␣the␣C<MOJO_NO_NNR>,
C<MOJO_NO_SOCKS>␣and␣C<MOJO_NO_TLS>␣environment␣variables.

See␣L<Mojolicious::Guides::Cookbook/"USER␣AGENT">␣for␣more.

=head1␣EVENTS

L<Mojo::UserAgent>␣inherits␣all␣events␣from␣L<Mojo::EventEmitter>␣and␣can␣emit␣the␣following␣new␣ones.

=head2␣prepare

␣␣$ua->on(prepare␣=>␣sub␣($ua,␣$tx)␣{...});

Emitted␣whenever␣a␣new␣transaction␣is␣being␣prepared,␣before␣relative␣URLs␣are␣rewritten␣and␣cookies␣added.␣This
includes␣automatically␣prepared␣proxy␣C<CONNECT>␣requests␣and␣followed␣redirects.

␣␣$ua->on(prepare␣=>␣sub␣($ua,␣$tx)␣{
␣␣␣␣$tx->req->url(Mojo::URL->new('/mock-mojolicious'))␣if␣$tx->req->url->host␣eq␣'mojolicious.org';
␣␣});

=head2␣start

␣␣$ua->on(start␣=>␣sub␣($ua,␣$tx)␣{...});

Emitted␣whenever␣a␣new␣transaction␣is␣about␣to␣start.␣This␣includes␣automatically␣prepared␣proxy␣C<CONNECT>␣requests
and␣followed␣redirects.

␣␣$ua->on(start␣=>␣sub␣($ua,␣$tx)␣{
␣␣␣␣$tx->req->headers->header('X-Bender'␣=>␣'Bite␣my␣shiny␣metal␣ass!');
␣␣});

=head1␣ATTRIBUTES

L<Mojo::UserAgent>␣implements␣the␣following␣attributes.

=head2␣ca

␣␣my␣$ca␣=␣$ua->ca;
␣␣$ua␣␣␣␣=␣$ua->ca('/etc/tls/ca.crt');

Path␣to␣TLS␣certificate␣authority␣file␣used␣to␣verify␣the␣peer␣certificate,␣defaults␣to␣the␣value␣of␣the
C<MOJO_CA_FILE>␣environment␣variable.

␣␣#␣Show␣certificate␣authorities␣for␣debugging
␣␣IO::Socket::SSL::set_defaults(SSL_verify_callback␣=>␣sub␣{␣say␣"Authority:␣$_[2]"␣and␣return␣$_[0]␣});

=head2␣cert

␣␣my␣$cert␣=␣$ua->cert;
␣␣$ua␣␣␣␣␣␣=␣$ua->cert('/etc/tls/client.crt');

Path␣to␣TLS␣certificate␣file,␣defaults␣to␣the␣value␣of␣the␣C<MOJO_CERT_FILE>␣environment␣variable.

=head2␣connect_timeout

␣␣my␣$timeout␣=␣$ua->connect_timeout;
␣␣$ua␣␣␣␣␣␣␣␣␣=␣$ua->connect_timeout(5);

Maximum␣amount␣of␣time␣in␣seconds␣establishing␣a␣connection␣may␣take␣before␣getting␣canceled,␣defaults␣to␣the␣value␣of
the␣C<MOJO_CONNECT_TIMEOUT>␣environment␣variable␣or␣C<10>.

=head2␣cookie_jar

␣␣my␣$cookie_jar␣=␣$ua->cookie_jar;
␣␣$ua␣␣␣␣␣␣␣␣␣␣␣␣=␣$ua->cookie_jar(Mojo::UserAgent::CookieJar->new);

Cookie␣jar␣to␣use␣for␣requests␣performed␣by␣this␣user␣agent,␣defaults␣to␣a␣L<Mojo::UserAgent::CookieJar>␣object.

␣␣#␣Ignore␣all␣cookies
␣␣$ua->cookie_jar->ignore(sub␣{␣1␣});

␣␣#␣Ignore␣cookies␣for␣public␣suffixes
␣␣my␣$ps␣=␣IO::Socket::SSL::PublicSuffix->default;
␣␣$ua->cookie_jar->ignore(sub␣($cookie)␣{
␣␣␣␣return␣undef␣unless␣my␣$domain␣=␣$cookie->domain;
␣␣␣␣return␣($ps->public_suffix($domain))[0]␣eq␣'';
␣␣});

␣␣#␣Add␣custom␣cookie␣to␣the␣jar
␣␣$ua->cookie_jar->add(
␣␣␣␣Mojo::Cookie::Response->new(
␣␣␣␣␣␣name␣␣␣=>␣'foo',
␣␣␣␣␣␣value␣␣=>␣'bar',
␣␣␣␣␣␣domain␣=>␣'docs.mojolicious.org',
␣␣␣␣␣␣path␣␣␣=>␣'/Mojolicious'
␣␣␣␣)
␣␣);

=head2␣inactivity_timeout

␣␣my␣$timeout␣=␣$ua->inactivity_timeout;
␣␣$ua␣␣␣␣␣␣␣␣␣=␣$ua->inactivity_timeout(15);

Maximum␣amount␣of␣time␣in␣seconds␣a␣connection␣can␣be␣inactive␣before␣getting␣closed,␣defaults␣to␣the␣value␣of␣the
C<MOJO_INACTIVITY_TIMEOUT>␣environment␣variable␣or␣C<40>.␣Setting␣the␣value␣to␣C<0>␣will␣allow␣connections␣to␣be
inactive␣indefinitely.

=head2␣insecure

␣␣my␣$bool␣=␣$ua->insecure;
␣␣$ua␣␣␣␣␣␣=␣$ua->insecure($bool);

Do␣not␣require␣a␣valid␣TLS␣certificate␣to␣access␣HTTPS/WSS␣sites,␣defaults␣to␣the␣value␣of␣the␣C<MOJO_INSECURE>
environment␣variable.

␣␣#␣Disable␣TLS␣certificate␣verification␣for␣testing
␣␣say␣$ua->insecure(1)->get('https://127.0.0.1:3000')->result->code;

=head2␣ioloop

␣␣my␣$loop␣=␣$ua->ioloop;
␣␣$ua␣␣␣␣␣␣=␣$ua->ioloop(Mojo::IOLoop->new);

Event␣loop␣object␣to␣use␣for␣blocking␣I/O␣operations,␣defaults␣to␣a␣L<Mojo::IOLoop>␣object.

=head2␣key

␣␣my␣$key␣=␣$ua->key;
␣␣$ua␣␣␣␣␣=␣$ua->key('/etc/tls/client.crt');

Path␣to␣TLS␣key␣file,␣defaults␣to␣the␣value␣of␣the␣C<MOJO_KEY_FILE>␣environment␣variable.

=head2␣max_connections

␣␣my␣$max␣=␣$ua->max_connections;
␣␣$ua␣␣␣␣␣=␣$ua->max_connections(5);

Maximum␣number␣of␣keep-alive␣connections␣that␣the␣user␣agent␣will␣retain␣before␣it␣starts␣closing␣the␣oldest␣ones,
defaults␣to␣C<5>.␣Setting␣the␣value␣to␣C<0>␣will␣prevent␣any␣connections␣from␣being␣kept␣alive.

=head2␣max_redirects

␣␣my␣$max␣=␣$ua->max_redirects;
␣␣$ua␣␣␣␣␣=␣$ua->max_redirects(3);

Maximum␣number␣of␣redirects␣the␣user␣agent␣will␣follow␣before␣it␣fails,␣defaults␣to␣the␣value␣of␣the
C<MOJO_MAX_REDIRECTS>␣environment␣variable␣or␣C<0>.

=head2␣max_response_size

␣␣my␣$max␣=␣$ua->max_response_size;
␣␣$ua␣␣␣␣␣=␣$ua->max_response_size(16777216);

Maximum␣response␣size␣in␣bytes,␣defaults␣to␣the␣value␣of␣L<Mojo::Message::Response/"max_message_size">.␣Setting␣the
value␣to␣C<0>␣will␣allow␣responses␣of␣indefinite␣size.␣Note␣that␣increasing␣this␣value␣can␣also␣drastically␣increase
memory␣usage,␣should␣you␣for␣example␣attempt␣to␣parse␣an␣excessively␣large␣response␣body␣with␣the␣methods
L<Mojo::Message/"dom">␣or␣L<Mojo::Message/"json">.

=head2␣proxy

␣␣my␣$proxy␣=␣$ua->proxy;
␣␣$ua␣␣␣␣␣␣␣=␣$ua->proxy(Mojo::UserAgent::Proxy->new);

Proxy␣manager,␣defaults␣to␣a␣L<Mojo::UserAgent::Proxy>␣object.

␣␣#␣Detect␣proxy␣servers␣from␣environment
␣␣$ua->proxy->detect;

␣␣#␣Manually␣configure␣HTTP␣proxy␣(using␣CONNECT␣for␣HTTPS/WebSockets)
␣␣$ua->proxy->http('http://127.0.0.1:8080')->https('http://127.0.0.1:8080');

␣␣#␣Manually␣configure␣Tor␣(SOCKS5)
␣␣$ua->proxy->http('socks://127.0.0.1:9050')->https('socks://127.0.0.1:9050');

␣␣#␣Manually␣configure␣UNIX␣domain␣socket␣(using␣CONNECT␣for␣HTTPS/WebSockets)
␣␣$ua->proxy->http('http+unix://%2Ftmp%2Fproxy.sock')␣->https('http+unix://%2Ftmp%2Fproxy.sock');

=head2␣request_timeout

␣␣my␣$timeout␣=␣$ua->request_timeout;
␣␣$ua␣␣␣␣␣␣␣␣␣=␣$ua->request_timeout(5);

Maximum␣amount␣of␣time␣in␣seconds␣establishing␣a␣connection,␣sending␣the␣request␣and␣receiving␣a␣whole␣response␣may
take␣before␣getting␣canceled,␣defaults␣to␣the␣value␣of␣the␣C<MOJO_REQUEST_TIMEOUT>␣environment␣variable␣or␣C<0>.
Setting␣the␣value␣to␣C<0>␣will␣allow␣the␣user␣agent␣to␣wait␣indefinitely.␣The␣timeout␣will␣reset␣for␣every␣followed
redirect.

␣␣#␣Total␣limit␣of␣5␣seconds,␣of␣which␣3␣seconds␣may␣be␣spent␣connecting
␣␣$ua->max_redirects(0)->connect_timeout(3)->request_timeout(5);

=head2␣server

␣␣my␣$server␣=␣$ua->server;
␣␣$ua␣␣␣␣␣␣␣␣=␣$ua->server(Mojo::UserAgent::Server->new);

Application␣server␣relative␣URLs␣will␣be␣processed␣with,␣defaults␣to␣a␣L<Mojo::UserAgent::Server>␣object.

␣␣#␣Mock␣web␣service
␣␣$ua->server->app(Mojolicious->new);
␣␣$ua->server->app->routes->get('/time'␣=>␣sub␣($c)␣{
␣␣␣␣$c->render(json␣=>␣{now␣=>␣time});
␣␣});
␣␣my␣$time␣=␣$ua->get('/time')->result->json->{now};

␣␣#␣Change␣log␣level
␣␣$ua->server->app->log->level('fatal');

␣␣#␣Port␣currently␣used␣for␣processing␣relative␣URLs␣blocking
␣␣say␣$ua->server->url->port;

␣␣#␣Port␣currently␣used␣for␣processing␣relative␣URLs␣non-blocking
␣␣say␣$ua->server->nb_url->port;

=head2␣socket_options

␣␣my␣$options␣=␣$ua->socket_options;
␣␣$ua␣␣␣␣␣␣␣␣␣=␣$ua->socket_options({LocalAddr␣=>␣'127.0.0.1'});

Additional␣options␣for␣L<IO::Socket::IP>␣when␣opening␣new␣connections.

=head2␣tls_options

␣␣my␣$options␣=␣$ua->tls_options;
␣␣$ua␣␣␣␣␣␣␣␣␣=␣$ua->tls_options({SSL_cipher_list␣=>␣'DEFAULT:!DH@SECLEVEL=1'});

Additional␣options␣for␣L<IO::Socket::SSL>␣when␣opening␣new␣connections.

=head2␣transactor

␣␣my␣$t␣=␣$ua->transactor;
␣␣$ua␣␣␣=␣$ua->transactor(Mojo::UserAgent::Transactor->new);

Transaction␣builder,␣defaults␣to␣a␣L<Mojo::UserAgent::Transactor>␣object.

␣␣#␣Change␣name␣of␣user␣agent
␣␣$ua->transactor->name('MyUA␣1.0');

␣␣#␣Disable␣compression
␣␣$ua->transactor->compressed(0);

=head1␣METHODS

L<Mojo::UserAgent>␣inherits␣all␣methods␣from␣L<Mojo::EventEmitter>␣and␣implements␣the␣following␣new␣ones.

=head2␣build_tx

␣␣my␣$tx␣=␣$ua->build_tx(GET␣=>␣'example.com');
␣␣my␣$tx␣=␣$ua->build_tx(PUT␣=>␣'http://example.com'␣=>␣{Accept␣=>␣'*/*'}␣=>␣'Content!');
␣␣my␣$tx␣=␣$ua->build_tx(PUT␣=>␣'http://example.com'␣=>␣{Accept␣=>␣'*/*'}␣=>␣form␣=>␣{a␣=>␣'b'});
␣␣my␣$tx␣=␣$ua->build_tx(PUT␣=>␣'http://example.com'␣=>␣{Accept␣=>␣'*/*'}␣=>␣json␣=>␣{a␣=>␣'b'});

Generate␣L<Mojo::Transaction::HTTP>␣object␣with␣L<Mojo::UserAgent::Transactor/"tx">.

␣␣#␣Request␣with␣custom␣cookie
␣␣my␣$tx␣=␣$ua->build_tx(GET␣=>␣'https://example.com/account');
␣␣$tx->req->cookies({name␣=>␣'user',␣value␣=>␣'sri'});
␣␣$tx␣=␣$ua->start($tx);

␣␣#␣Deactivate␣gzip␣compression
␣␣my␣$tx␣=␣$ua->build_tx(GET␣=>␣'example.com');
␣␣$tx->req->headers->remove('Accept-Encoding');
␣␣$tx␣=␣$ua->start($tx);

␣␣#␣Interrupt␣response␣by␣raising␣an␣error
␣␣my␣$tx␣=␣$ua->build_tx(GET␣=>␣'http://example.com');
␣␣$tx->res->on(progress␣=>␣sub␣($res)␣{
␣␣␣␣return␣unless␣my␣$server␣=␣$res->headers->server;
␣␣␣␣$res->error({message␣=>␣'Oh␣noes,␣it␣is␣IIS!'})␣if␣$server␣=~␣/IIS/;
␣␣});
␣␣$tx␣=␣$ua->start($tx);

=head2␣build_websocket_tx

␣␣my␣$tx␣=␣$ua->build_websocket_tx('ws://example.com');
␣␣my␣$tx␣=␣$ua->build_websocket_tx(␣'ws://example.com'␣=>␣{DNT␣=>␣1}␣=>␣['v1.proto']);

Generate␣L<Mojo::Transaction::HTTP>␣object␣with␣L<Mojo::UserAgent::Transactor/"websocket">.

␣␣#␣Custom␣WebSocket␣handshake␣with␣cookie
␣␣my␣$tx␣=␣$ua->build_websocket_tx('wss://example.com/echo');
␣␣$tx->req->cookies({name␣=>␣'user',␣value␣=>␣'sri'});
␣␣$ua->start($tx␣=>␣sub␣($ua,␣$tx)␣{
␣␣␣␣say␣'WebSocket␣handshake␣failed!'␣and␣return␣unless␣$tx->is_websocket;
␣␣␣␣$tx->on(message␣=>␣sub␣($tx,␣$msg)␣{
␣␣␣␣␣␣say␣"WebSocket␣message:␣$msg";
␣␣␣␣␣␣$tx->finish;
␣␣␣␣});
␣␣␣␣$tx->send('Hi!');
␣␣});
␣␣Mojo::IOLoop->start␣unless␣Mojo::IOLoop->is_running;

=head2␣delete

␣␣my␣$tx␣=␣$ua->delete('example.com');
␣␣my␣$tx␣=␣$ua->delete('http://example.com'␣=>␣{Accept␣=>␣'*/*'}␣=>␣'Content!');
␣␣my␣$tx␣=␣$ua->delete('http://example.com'␣=>␣{Accept␣=>␣'*/*'}␣=>␣form␣=>␣{a␣=>␣'b'});
␣␣my␣$tx␣=␣$ua->delete('http://example.com'␣=>␣{Accept␣=>␣'*/*'}␣=>␣json␣=>␣{a␣=>␣'b'});

Perform␣blocking␣C<DELETE>␣request␣and␣return␣resulting␣L<Mojo::Transaction::HTTP>␣object,␣takes␣the␣same␣arguments␣as
L<Mojo::UserAgent::Transactor/"tx">␣(except␣for␣the␣C<DELETE>␣method,␣which␣is␣implied).␣You␣can␣also␣append␣a␣callback
to␣perform␣requests␣non-blocking.

␣␣$ua->delete('http://example.com'␣=>␣json␣=>␣{a␣=>␣'b'}␣=>␣sub␣($ua,␣$tx)␣{␣say␣$tx->result->body␣});
␣␣Mojo::IOLoop->start␣unless␣Mojo::IOLoop->is_running;

=head2␣delete_p

␣␣my␣$promise␣=␣$ua->delete_p('http://example.com');

Same␣as␣L</"delete">,␣but␣performs␣all␣requests␣non-blocking␣and␣returns␣a␣L<Mojo::Promise>␣object␣instead␣of␣accepting
a␣callback.

␣␣$ua->delete_p('http://example.com'␣=>␣json␣=>␣{a␣=>␣'b'})->then(sub␣($tx)␣{
␣␣␣␣say␣$tx->result->body;
␣␣})->catch(sub␣($err)␣{
␣␣␣␣warn␣"Connection␣error:␣$err";
␣␣})->wait;

=head2␣get

␣␣my␣$tx␣=␣$ua->get('example.com');
␣␣my␣$tx␣=␣$ua->get('http://example.com'␣=>␣{Accept␣=>␣'*/*'}␣=>␣'Content!');
␣␣my␣$tx␣=␣$ua->get('http://example.com'␣=>␣{Accept␣=>␣'*/*'}␣=>␣form␣=>␣{a␣=>␣'b'});
␣␣my␣$tx␣=␣$ua->get('http://example.com'␣=>␣{Accept␣=>␣'*/*'}␣=>␣json␣=>␣{a␣=>␣'b'});

Perform␣blocking␣C<GET>␣request␣and␣return␣resulting␣L<Mojo::Transaction::HTTP>␣object,␣takes␣the␣same␣arguments␣as
L<Mojo::UserAgent::Transactor/"tx">␣(except␣for␣the␣C<GET>␣method,␣which␣is␣implied).␣You␣can␣also␣append␣a␣callback␣to
perform␣requests␣non-blocking.

␣␣$ua->get('http://example.com'␣=>␣json␣=>␣{a␣=>␣'b'}␣=>␣sub␣($ua,␣$tx)␣{␣say␣$tx->result->body␣});
␣␣Mojo::IOLoop->start␣unless␣Mojo::IOLoop->is_running;

=head2␣get_p

␣␣my␣$promise␣=␣$ua->get_p('http://example.com');

Same␣as␣L</"get">,␣but␣performs␣all␣requests␣non-blocking␣and␣returns␣a␣L<Mojo::Promise>␣object␣instead␣of␣accepting␣a
callback.

␣␣$ua->get_p('http://example.com'␣=>␣json␣=>␣{a␣=>␣'b'})->then(sub␣($tx)␣{
␣␣␣␣say␣$tx->result->body;
␣␣})->catch(sub␣($err)␣{
␣␣␣␣warn␣"Connection␣error:␣$err";
␣␣})->wait;

=head2␣head

␣␣my␣$tx␣=␣$ua->head('example.com');
␣␣my␣$tx␣=␣$ua->head('http://example.com'␣=>␣{Accept␣=>␣'*/*'}␣=>␣'Content!');
␣␣my␣$tx␣=␣$ua->head('http://example.com'␣=>␣{Accept␣=>␣'*/*'}␣=>␣form␣=>␣{a␣=>␣'b'});
␣␣my␣$tx␣=␣$ua->head('http://example.com'␣=>␣{Accept␣=>␣'*/*'}␣=>␣json␣=>␣{a␣=>␣'b'});

Perform␣blocking␣C<HEAD>␣request␣and␣return␣resulting␣L<Mojo::Transaction::HTTP>␣object,␣takes␣the␣same␣arguments␣as
L<Mojo::UserAgent::Transactor/"tx">␣(except␣for␣the␣C<HEAD>␣method,␣which␣is␣implied).␣You␣can␣also␣append␣a␣callback
to␣perform␣requests␣non-blocking.

␣␣$ua->head('http://example.com'␣=>␣json␣=>␣{a␣=>␣'b'}␣=>␣sub␣($ua,␣$tx)␣{␣say␣$tx->result->body␣});
␣␣Mojo::IOLoop->start␣unless␣Mojo::IOLoop->is_running;

=head2␣head_p

␣␣my␣$promise␣=␣$ua->head_p('http://example.com');

Same␣as␣L</"head">,␣but␣performs␣all␣requests␣non-blocking␣and␣returns␣a␣L<Mojo::Promise>␣object␣instead␣of␣accepting␣a
callback.

␣␣$ua->head_p('http://example.com'␣=>␣json␣=>␣{a␣=>␣'b'})->then(sub␣($tx)␣{
␣␣␣␣say␣$tx->result->body;
␣␣})->catch(sub␣($err)␣{
␣␣␣␣warn␣"Connection␣error:␣$err";
␣␣})->wait;

=head2␣options

␣␣my␣$tx␣=␣$ua->options('example.com');
␣␣my␣$tx␣=␣$ua->options('http://example.com'␣=>␣{Accept␣=>␣'*/*'}␣=>␣'Content!');
␣␣my␣$tx␣=␣$ua->options('http://example.com'␣=>␣{Accept␣=>␣'*/*'}␣=>␣form␣=>␣{a␣=>␣'b'});
␣␣my␣$tx␣=␣$ua->options('http://example.com'␣=>␣{Accept␣=>␣'*/*'}␣=>␣json␣=>␣{a␣=>␣'b'});

Perform␣blocking␣C<OPTIONS>␣request␣and␣return␣resulting␣L<Mojo::Transaction::HTTP>␣object,␣takes␣the␣same␣arguments␣as
L<Mojo::UserAgent::Transactor/"tx">␣(except␣for␣the␣C<OPTIONS>␣method,␣which␣is␣implied).␣You␣can␣also␣append␣a
callback␣to␣perform␣requests␣non-blocking.

␣␣$ua->options('http://example.com'␣=>␣json␣=>␣{a␣=>␣'b'}␣=>␣sub␣($ua,␣$tx)␣{␣say␣$tx->result->body␣});
␣␣Mojo::IOLoop->start␣unless␣Mojo::IOLoop->is_running;

=head2␣options_p

␣␣my␣$promise␣=␣$ua->options_p('http://example.com');

Same␣as␣L</"options">,␣but␣performs␣all␣requests␣non-blocking␣and␣returns␣a␣L<Mojo::Promise>␣object␣instead␣of
accepting␣a␣callback.

␣␣$ua->options_p('http://example.com'␣=>␣json␣=>␣{a␣=>␣'b'})->then(sub␣($tx)␣{
␣␣␣␣say␣$tx->result->body;
␣␣})->catch(sub␣($err)␣{
␣␣␣␣warn␣"Connection␣error:␣$err";
␣␣})->wait;

=head2␣patch

␣␣my␣$tx␣=␣$ua->patch('example.com');
␣␣my␣$tx␣=␣$ua->patch('http://example.com'␣=>␣{Accept␣=>␣'*/*'}␣=>␣'Content!');
␣␣my␣$tx␣=␣$ua->patch('http://example.com'␣=>␣{Accept␣=>␣'*/*'}␣=>␣form␣=>␣{a␣=>␣'b'});
␣␣my␣$tx␣=␣$ua->patch('http://example.com'␣=>␣{Accept␣=>␣'*/*'}␣=>␣json␣=>␣{a␣=>␣'b'});

Perform␣blocking␣C<PATCH>␣request␣and␣return␣resulting␣L<Mojo::Transaction::HTTP>␣object,␣takes␣the␣same␣arguments␣as
L<Mojo::UserAgent::Transactor/"tx">␣(except␣for␣the␣C<PATCH>␣method,␣which␣is␣implied).␣You␣can␣also␣append␣a␣callback
to␣perform␣requests␣non-blocking.

␣␣$ua->patch('http://example.com'␣=>␣json␣=>␣{a␣=>␣'b'}␣=>␣sub␣($ua,␣$tx)␣{␣say␣$tx->result->body␣});
␣␣Mojo::IOLoop->start␣unless␣Mojo::IOLoop->is_running;

=head2␣patch_p

␣␣my␣$promise␣=␣$ua->patch_p('http://example.com');

Same␣as␣L</"patch">,␣but␣performs␣all␣requests␣non-blocking␣and␣returns␣a␣L<Mojo::Promise>␣object␣instead␣of␣accepting
a␣callback.

␣␣$ua->patch_p('http://example.com'␣=>␣json␣=>␣{a␣=>␣'b'})->then(sub␣($tx)␣{
␣␣␣␣say␣$tx->result->body;
␣␣})->catch(sub␣($err)␣{
␣␣␣␣warn␣"Connection␣error:␣$err";
␣␣})->wait;

=head2␣post

␣␣my␣$tx␣=␣$ua->post('example.com');
␣␣my␣$tx␣=␣$ua->post('http://example.com'␣=>␣{Accept␣=>␣'*/*'}␣=>␣'Content!');
␣␣my␣$tx␣=␣$ua->post('http://example.com'␣=>␣{Accept␣=>␣'*/*'}␣=>␣form␣=>␣{a␣=>␣'b'});
␣␣my␣$tx␣=␣$ua->post('http://example.com'␣=>␣{Accept␣=>␣'*/*'}␣=>␣json␣=>␣{a␣=>␣'b'});

Perform␣blocking␣C<POST>␣request␣and␣return␣resulting␣L<Mojo::Transaction::HTTP>␣object,␣takes␣the␣same␣arguments␣as
L<Mojo::UserAgent::Transactor/"tx">␣(except␣for␣the␣C<POST>␣method,␣which␣is␣implied).␣You␣can␣also␣append␣a␣callback
to␣perform␣requests␣non-blocking.

␣␣$ua->post('http://example.com'␣=>␣json␣=>␣{a␣=>␣'b'}␣=>␣sub␣($ua,␣$tx)␣{␣say␣$tx->result->body␣});
␣␣Mojo::IOLoop->start␣unless␣Mojo::IOLoop->is_running;

=head2␣post_p

␣␣my␣$promise␣=␣$ua->post_p('http://example.com');

Same␣as␣L</"post">,␣but␣performs␣all␣requests␣non-blocking␣and␣returns␣a␣L<Mojo::Promise>␣object␣instead␣of␣accepting␣a
callback.

␣␣$ua->post_p('http://example.com'␣=>␣json␣=>␣{a␣=>␣'b'})->then(sub␣($tx)␣{
␣␣␣␣say␣$tx->result->body;
␣␣})->catch(sub␣($err)␣{
␣␣␣␣warn␣"Connection␣error:␣$err";
␣␣})->wait;

=head2␣put

␣␣my␣$tx␣=␣$ua->put('example.com');
␣␣my␣$tx␣=␣$ua->put('http://example.com'␣=>␣{Accept␣=>␣'*/*'}␣=>␣'Content!');
␣␣my␣$tx␣=␣$ua->put('http://example.com'␣=>␣{Accept␣=>␣'*/*'}␣=>␣form␣=>␣{a␣=>␣'b'});
␣␣my␣$tx␣=␣$ua->put('http://example.com'␣=>␣{Accept␣=>␣'*/*'}␣=>␣json␣=>␣{a␣=>␣'b'});

Perform␣blocking␣C<PUT>␣request␣and␣return␣resulting␣L<Mojo::Transaction::HTTP>␣object,␣takes␣the␣same␣arguments␣as
L<Mojo::UserAgent::Transactor/"tx">␣(except␣for␣the␣C<PUT>␣method,␣which␣is␣implied).␣You␣can␣also␣append␣a␣callback␣to
perform␣requests␣non-blocking.

␣␣$ua->put('http://example.com'␣=>␣json␣=>␣{a␣=>␣'b'}␣=>␣sub␣($ua,␣$tx)␣{␣say␣$tx->result->body␣});
␣␣Mojo::IOLoop->start␣unless␣Mojo::IOLoop->is_running;

=head2␣put_p

␣␣my␣$promise␣=␣$ua->put_p('http://example.com');

Same␣as␣L</"put">,␣but␣performs␣all␣requests␣non-blocking␣and␣returns␣a␣L<Mojo::Promise>␣object␣instead␣of␣accepting␣a
callback.

␣␣$ua->put_p('http://example.com'␣=>␣json␣=>␣{a␣=>␣'b'})->then(sub␣($tx)␣{
␣␣␣␣say␣$tx->result->body;
␣␣})->catch(sub␣($err)␣{
␣␣␣␣warn␣"Connection␣error:␣$err";
␣␣})->wait;

=head2␣start

␣␣my␣$tx␣=␣$ua->start(Mojo::Transaction::HTTP->new);

Perform␣blocking␣request␣for␣a␣custom␣L<Mojo::Transaction::HTTP>␣object,␣which␣can␣be␣prepared␣manually␣or␣with
L</"build_tx">.␣You␣can␣also␣append␣a␣callback␣to␣perform␣requests␣non-blocking.

␣␣my␣$tx␣=␣$ua->build_tx(GET␣=>␣'http://example.com');
␣␣$ua->start($tx␣=>␣sub␣($ua,␣$tx)␣{␣say␣$tx->result->body␣});
␣␣Mojo::IOLoop->start␣unless␣Mojo::IOLoop->is_running;

=head2␣start_p

␣␣my␣$promise␣=␣$ua->start_p(Mojo::Transaction::HTTP->new);

Same␣as␣L</"start">,␣but␣performs␣all␣requests␣non-blocking␣and␣returns␣a␣L<Mojo::Promise>␣object␣instead␣of␣accepting
a␣callback.

␣␣my␣$tx␣=␣$ua->build_tx(GET␣=>␣'http://example.com');
␣␣$ua->start_p($tx)->then(sub␣($tx)␣{
␣␣␣␣say␣$tx->result->body;
␣␣})->catch(sub␣($err)␣{
␣␣␣␣warn␣"Connection␣error:␣$err";
␣␣})->wait;

=head2␣websocket

␣␣$ua->websocket('ws://example.com'␣=>␣sub␣{...});
␣␣$ua->websocket('ws://example.com'␣=>␣{DNT␣=>␣1}␣=>␣['v1.proto']␣=>␣sub␣{...});

Open␣a␣non-blocking␣WebSocket␣connection␣with␣transparent␣handshake,␣takes␣the␣same␣arguments␣as
L<Mojo::UserAgent::Transactor/"websocket">.␣The␣callback␣will␣receive␣either␣a␣L<Mojo::Transaction::WebSocket>␣or
L<Mojo::Transaction::HTTP>␣object,␣depending␣on␣if␣the␣handshake␣was␣successful.

␣␣$ua->websocket('wss://example.com/echo'␣=>␣['v1.proto']␣=>␣sub␣($ua,␣$tx)␣{
␣␣␣␣say␣'WebSocket␣handshake␣failed!'␣and␣return␣unless␣$tx->is_websocket;
␣␣␣␣say␣'Subprotocol␣negotiation␣failed!'␣and␣return␣unless␣$tx->protocol;
␣␣␣␣$tx->on(finish␣=>␣sub␣($tx,␣$code,␣$reason)␣{␣say␣"WebSocket␣closed␣with␣status␣$code."␣});
␣␣␣␣$tx->on(message␣=>␣sub␣($tx,␣$msg)␣{
␣␣␣␣␣␣say␣"WebSocket␣message:␣$msg";
␣␣␣␣␣␣$tx->finish;
␣␣␣␣});
␣␣␣␣$tx->send('Hi!');
␣␣});
␣␣Mojo::IOLoop->start␣unless␣Mojo::IOLoop->is_running;

You␣can␣activate␣C<permessage-deflate>␣compression␣by␣setting␣the␣C<Sec-WebSocket-Extensions>␣header,␣this␣can␣result
in␣much␣better␣performance,␣but␣also␣increases␣memory␣usage␣by␣up␣to␣300KiB␣per␣connection.

␣␣$ua->websocket('ws://example.com/foo'␣=>␣{
␣␣␣␣'Sec-WebSocket-Extensions'␣=>␣'permessage-deflate'
␣␣}␣=>␣sub␣{...});

=head2␣websocket_p

␣␣my␣$promise␣=␣$ua->websocket_p('ws://example.com');

Same␣as␣L</"websocket">,␣but␣returns␣a␣L<Mojo::Promise>␣object␣instead␣of␣accepting␣a␣callback.

␣␣$ua->websocket_p('wss://example.com/echo')->then(sub␣($tx)␣{
␣␣␣␣my␣$promise␣=␣Mojo::Promise->new;
␣␣␣␣$tx->on(finish␣=>␣sub␣{␣$promise->resolve␣});
␣␣␣␣$tx->on(message␣=>␣sub␣($tx,␣$msg)␣{
␣␣␣␣␣␣say␣"WebSocket␣message:␣$msg";
␣␣␣␣␣␣$tx->finish;
␣␣␣␣});
␣␣␣␣$tx->send('Hi!');
␣␣␣␣return␣$promise;
␣␣})->catch(sub␣($err)␣{
␣␣␣␣warn␣"WebSocket␣error:␣$err";
␣␣})->wait;

=head1␣DEBUGGING

You␣can␣set␣the␣C<MOJO_CLIENT_DEBUG>␣environment␣variable␣to␣get␣some␣advanced␣diagnostics␣information␣printed␣to
C<STDERR>.

␣␣MOJO_CLIENT_DEBUG=1

=head1␣SEE␣ALSO

L<Mojolicious>,␣L<Mojolicious::Guides>,␣L<https://mojolicious.org>.

=cut
----------
