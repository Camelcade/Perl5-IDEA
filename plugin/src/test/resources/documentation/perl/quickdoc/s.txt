<p><a href="psi_element://perlop">perlop</a>: <a href="psi_element://perlop%2FDESCRIPTION">DESCRIPTION</a>: <a href="psi_element://perlop%2FRegexp+Quote-Like+Operators">Regexp Quote-Like Operators</a></p><dl><dt style="padding-bottom:4px;font-weight:bold;"><code>s/<i>PATTERN</i>/<i>REPLACEMENT</i>/msixpodualngcer</code>
    
          </dt><dd style="padding-top:6px;"><p style="padding-bottom: 10px;">Searches a string for a pattern, and if found, replaces that pattern
with the replacement text and returns the number of substitutions
made.  Otherwise it returns false (a value that is both an empty string (<code>&quot;&quot;</code>)
and numeric zero (<code>0</code>) as described in <a href="psi_element://perlop%2FRelational+Operators">Relational Operators</a>).</p>
<p style="padding-bottom: 10px;">If the <code>/r</code> (non-destructive) option is used then it runs the
substitution on a copy of the string and instead of returning the
number of substitutions, it returns the copy whether or not a
substitution occurred.  The original string is never changed when
<code>/r</code> is used.  The copy will always be a plain string, even if the
input is an object or a tied variable.</p>
<p style="padding-bottom: 10px;">If no string is specified via the <code>=~</code> or <code>!~</code> operator, the <code>$_</code>
variable is searched and modified.  Unless the <code>/r</code> option is used,
the string specified must be a scalar variable, an array element, a
hash element, or an assignment to one of those; that is, some sort of
scalar lvalue.</p>
<p style="padding-bottom: 10px;">If the delimiter chosen is a single quote, no variable interpolation is
done on either the <i>PATTERN</i> or the <i>REPLACEMENT</i>.  Otherwise, if the
<i>PATTERN</i> contains a <code>$</code> that looks like a variable rather than an
end-of-string test, the variable will be interpolated into the pattern
at run-time.  If you want the pattern compiled only once the first time
the variable is interpolated, use the <code>/o</code> option.  If the pattern
evaluates to the empty string, the last successfully executed regular
expression is used instead.  See <a href="psi_element://perlre">perlre</a> for further explanation on these.</p>
<p style="padding-bottom: 10px;">Options are as with <code>m//</code> with the addition of the following replacement
specific options:</p>
<div style="padding-bottom: 10px;"><pre><code>    e	Evaluate the right side as an expression.
    ee  Evaluate the right side as a string then eval the
        result.
    r   Return substitution and leave the original string
        untouched.</code></pre></div>
<p style="padding-bottom: 10px;">Any non-whitespace delimiter may replace the slashes.  Add space after
the <code>s</code> when using a character allowed in identifiers.  If single quotes
are used, no interpretation is done on the replacement string (the <code>/e</code>
modifier overrides this, however).  Note that Perl treats backticks
as normal delimiters; the replacement text is not evaluated as a command.
If the <i>PATTERN</i> is delimited by bracketing quotes, the <i>REPLACEMENT</i> has
its own pair of quotes, which may or may not be bracketing quotes, for example,
<code>s(foo)(bar)</code> or <code>s&lt;foo&gt;/bar/</code>.  A <code>/e</code> will cause the
replacement portion to be treated as a full-fledged Perl expression
and evaluated right then and there.  It is, however, syntax checked at
compile-time.  A second <code>e</code> modifier will cause the replacement portion
to be <code>eval</code>ed before being run as a Perl expression.</p>
<p style="padding-bottom: 10px;">Examples:</p>
<div style="padding-bottom: 10px;"><pre><code>    s/\bgreen\b/mauve/g;	      # don't change wintergreen

    $path =~ s|/usr/bin|/usr/local/bin|;

    s/Login: $foo/Login: $bar/; # run-time pattern

    ($foo = $bar) =~ s/this/that/;	# copy first, then
                                        # change
    ($foo = &quot;$bar&quot;) =~ s/this/that/;	# convert to string,
                                        # copy, then change
    $foo = $bar =~ s/this/that/r;	# Same as above using /r
    $foo = $bar =~ s/this/that/r
                =~ s/that/the other/r;	# Chained substitutes
                                        # using /r
    @foo = map { s/this/that/r } @bar	# /r is very useful in
                                        # maps

    $count = ($paragraph =~ s/Mister\b/Mr./g);  # get change-cnt

    $_ = 'abc123xyz';
    s/\d+/$&amp;*2/e;		# yields 'abc246xyz'
    s/\d+/sprintf(&quot;%5d&quot;,$&amp;)/e;	# yields 'abc  246xyz'
    s/\w/$&amp; x 2/eg;		# yields 'aabbcc  224466xxyyzz'

    s/%(.)/$percent{$1}/g;	# change percent escapes; no /e
    s/%(.)/$percent{$1} || $&amp;/ge;	# expr now, so /e
    s/^=(\w+)/pod($1)/ge;	# use function call

    $_ = 'abc123xyz';
    $x = s/abc/def/r;           # $x is 'def123xyz' and
                                # $_ remains 'abc123xyz'.

    # expand variables in $_, but dynamics only, using
    # symbolic dereferencing
    s/\$(\w+)/${$1}/g;

    # Add one to the value of any numbers in the string
    s/(\d+)/1 + $1/eg;

    # Titlecase words in the last 30 characters only
    substr($str, -30) =~ s/\b(\p{Alpha}+)\b/\u\L$1/g;

    # This will expand any embedded scalar variable
    # (including lexicals) in $_ : First $1 is interpolated
    # to the variable name, and then evaluated
    s/(\$\w+)/$1/eeg;

    # Delete (most) C comments.
    $program =~ s {
	/\*	# Match the opening delimiter.
	.*?	# Match a minimal number of characters.
	\*/	# Match the closing delimiter.
    } []gsx;

    s/^\s*(.*?)\s*$/$1/;	# trim whitespace in $_,
                                # expensively

    for ($variable) {		# trim whitespace in $variable,
                                # cheap
	s/^\s+//;
	s/\s+$//;
    }

    s/([^ ]*) *([^ ]*)/$2 $1/;	# reverse 1st two fields</code></pre></div>
<p style="padding-bottom: 10px;">Note the use of <code>$</code> instead of <code>\</code> in the last example.  Unlike
<B>sed</B>, we use the \&lt;<i>digit</i>&gt; form only in the left hand side.
Anywhere else it's $&lt;<i>digit</i>&gt;.</p>
<p style="padding-bottom: 10px;">Occasionally, you can't use just a <code>/g</code> to get all the changes
to occur that you might want.  Here are two common cases:</p>
<div style="padding-bottom: 10px;"><pre><code>    # put commas in the right places in an integer
    1 while s/(\d)(\d\d\d)(?!\d)/$1,$2/g;

    # expand tabs to 8-column spacing
    1 while s/\t+/' ' x (length($&amp;)*8 - length($`)%8)/e;</code></pre></div></dd></dl>
