<p><a href="psi_element://perlvar">perlvar</a>: <a href="psi_element://perlvar%2FSPECIAL+VARIABLES">SPECIAL VARIABLES</a>: <a href="psi_element://perlvar%2FGeneral+Variables">General Variables</a></p><dl><dt style="padding-bottom:4px;font-weight:bold;">%ENV</dt><dd style="padding-top:6px;"><p style="padding-bottom: 10px;">The hash <code>%ENV</code> contains your current environment.  Setting a
value in <code>ENV</code> changes the environment for any child processes
you subsequently <code>fork()</code> off.</p>
<p style="padding-bottom: 10px;">As of v5.18.0, both keys and values stored in <code>%ENV</code> are stringified.</p>
<div style="padding-bottom: 10px;"><pre><code>    my $foo = 1;
    $ENV{'bar'} = \$foo;
    if( ref $ENV{'bar'} ) {
        say &quot;Pre 5.18.0 Behaviour&quot;;
    } else {
        say &quot;Post 5.18.0 Behaviour&quot;;
    }</code></pre></div>
<p style="padding-bottom: 10px;">Previously, only child processes received stringified values:</p>
<div style="padding-bottom: 10px;"><pre><code>    my $foo = 1;
    $ENV{'bar'} = \$foo;

    # Always printed 'non ref'
    system($^X, '-e',
           q/print ( ref $ENV{'bar'}  ? 'ref' : 'non ref' ) /);</code></pre></div>
<p style="padding-bottom: 10px;">This happens because you can't really share arbitrary data structures with
foreign processes.</p></dd></dl>
