<p><a href="psi_element://perlfunc">perlfunc</a>: <a href="psi_element://perlfunc%2FDESCRIPTION">DESCRIPTION</a>: <a href="psi_element://perlfunc%2FAlphabetical+Listing+of+Perl+Functions">Alphabetical Listing of Perl Functions</a></p><dl><dt style="padding-bottom:4px;font-weight:bold;">semop KEY,OPSTRING</dt><dd style="padding-top:6px;">
<p style="padding-bottom: 10px;">Calls the System V IPC function <a href="psi_element://semop%282%29" style="color:red">semop(2)</a> for semaphore operations
such as signalling and waiting.  OPSTRING must be a packed array of
semop structures.  Each semop structure can be generated with
<code>pack(&quot;s!3&quot;, $semnum, $semop, $semflag)</code>.  The length of OPSTRING
implies the number of semaphore operations.  Returns true if
successful, false on error.  As an example, the
following code waits on semaphore $semnum of semaphore id $semid:</p>
<div style="padding-bottom: 10px;"><pre><code>    my $semop = pack(&quot;s!3&quot;, $semnum, -1, 0);
    die &quot;Semaphore trouble: $!\n&quot; unless semop($semid, $semop);</code></pre></div>
<p style="padding-bottom: 10px;">To signal the semaphore, replace <code>-1</code> with <code>1</code>.  See also
<a href="psi_element://perlipc%2FSysV+IPC">SysV IPC in perlipc</a> and the documentation for
<a href="psi_element://IPC%3A%3ASysV" style="color:red"><code>IPC::SysV</code></a> and <a href="psi_element://IPC%3A%3ASemaphore" style="color:red"><code>IPC::Semaphore</code></a>.</p>
<p style="padding-bottom: 10px;">Portability issues: <a href="psi_element://perlport%2Fsemop">semop in perlport</a>.</p></dd></dl>
