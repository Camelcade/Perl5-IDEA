// Generated by JFlex 1.9.2 http://jflex.de/  (tweaked for IntelliJ platform)
// source: grammar/Pod.flex

/*
Copyright 2015 Alexandr Evstigneev

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
package com.perl5.lang.pod.lexer;

import com.intellij.psi.TokenType;
import com.intellij.psi.tree.IElementType;
import com.perl5.lang.perl.lexer.PerlProtoLexer;
import org.jetbrains.annotations.NotNull;


public abstract class PodLexerGenerated extends PerlProtoLexer implements PodElementTypes {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int LEX_PREPARSED_ITEMS = 2;
  public static final int LEX_COMMAND_READY = 4;
  public static final int LEX_COMMAND_WAITING = 6;
  public static final int OPENING_ANGLE = 8;
  public static final int CLOSING_SPACED_ANGLE = 10;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5, 5
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\2\u1f00\1\u2000\7\u1f00\1\u2100\1\u2200\1\u2300"+
    "\1\u1f00\1\u2400\1\u2500\2\u1f00\31\u0100\1\u2600\121\u0100\1\u2700"+
    "\4\u0100\1\u2800\1\u0100\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00"+
    "\1\u2e00\53\u0100\1\u2f00\41\u1f00\1\u0100\1\u3000\1\u3100\1\u0100"+
    "\1\u3200\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900"+
    "\1\u3a00\1\u0100\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000"+
    "\1\u4100\1\u4200\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700\1\u4800"+
    "\1\u4900\1\u4a00\1\u4b00\1\u4c00\1\u4d00\1\u4e00\1\u1f00\1\u4f00"+
    "\1\u5000\1\u5100\1\u5200\3\u0100\1\u5300\1\u5400\1\u5500\11\u1f00"+
    "\1\u5600\4\u0100\1\u5700\17\u1f00\2\u0100\1\u5800\41\u1f00\2\u0100"+
    "\1\u5900\1\u5a00\2\u1f00\1\u5b00\1\u5c00\27\u0100\1\u5d00\2\u0100"+
    "\1\u5e00\1\u5f00\1\u6000\1\u6100\41\u1f00\1\u6200\1\u0100\1\u6300"+
    "\1\u6400\11\u1f00\1\u6500\22\u1f00\1\u6600\1\u1f00\1\u6700\1\u6800"+
    "\1\u1f00\1\u6900\1\u6a00\1\u6b00\1\u6c00\2\u1f00\1\u6d00\4\u1f00"+
    "\1\u6e00\1\u6f00\1\u7000\1\u7100\1\u1f00\1\u7200\2\u1f00\1\u7300"+
    "\1\u7400\1\u7500\2\u1f00\1\u7600\1\u1f00\1\u7700\2\u1f00\1\u7800"+
    "\11\u1f00\1\u7900\4\u1f00\246\u0100\1\u7a00\20\u0100\1\u7b00\1\u7c00"+
    "\25\u0100\1\u7d00\34\u0100\1\u7e00\14\u1f00\2\u0100\1\u7f00\5\u1f00"+
    "\23\u5f00\1\u8000\17\u5f00\1\u8100\u0adc\u1f00\1\u8200\1\u8300\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\4\1\5\16\0\4\6"+
    "\1\1\1\6\1\7\1\6\1\0\2\6\1\10\1\11"+
    "\1\12\1\13\1\14\1\6\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\5\24\1\25\1\6\1\26"+
    "\1\27\1\30\2\6\1\31\1\32\1\33\1\31\1\34"+
    "\1\35\2\36\1\37\2\36\1\40\6\36\1\41\4\36"+
    "\1\42\1\36\1\43\1\44\1\45\1\46\1\6\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57"+
    "\1\60\1\61\1\36\1\62\1\36\1\63\1\64\1\65"+
    "\1\66\1\36\1\67\1\36\1\70\1\71\1\72\1\36"+
    "\1\73\2\36\1\74\1\75\1\76\1\6\6\0\1\77"+
    "\32\0\1\100\1\6\4\0\4\6\1\36\2\6\1\0"+
    "\7\6\1\36\4\6\1\36\5\6\27\36\1\6\37\36"+
    "\1\6\u01ca\36\4\6\14\36\16\6\5\36\7\6\1\36"+
    "\1\6\1\36\21\6\165\36\1\6\2\36\2\6\4\36"+
    "\1\6\1\36\6\6\1\36\1\6\3\36\1\6\1\36"+
    "\1\6\24\36\1\6\123\36\1\6\213\36\1\6\5\36"+
    "\2\101\246\36\1\6\46\36\2\6\1\36\6\6\51\36"+
    "\6\6\1\0\1\6\55\36\1\6\1\36\1\6\2\36"+
    "\1\6\2\36\1\6\1\36\10\6\33\36\4\6\4\36"+
    "\15\6\6\0\5\6\1\0\4\6\13\36\1\6\1\0"+
    "\3\6\100\36\12\102\4\6\146\36\1\6\10\36\1\0"+
    "\1\6\12\36\1\6\6\36\12\102\3\36\2\6\1\36"+
    "\17\6\1\0\73\36\2\6\145\36\16\6\12\102\54\36"+
    "\4\6\1\36\2\6\1\36\2\0\56\36\22\6\34\36"+
    "\4\6\13\36\5\6\30\0\1\6\6\0\1\6\2\0"+
    "\6\6\10\0\25\36\1\0\10\36\25\0\17\36\1\0"+
    "\201\36\2\6\12\102\1\6\23\36\1\6\10\36\2\6"+
    "\2\36\2\6\26\36\1\6\7\36\1\6\1\36\3\6"+
    "\4\36\2\6\11\36\2\6\2\36\2\6\4\36\10\6"+
    "\1\36\4\6\2\36\1\6\5\36\2\6\12\102\2\36"+
    "\2\0\7\6\1\0\1\36\1\6\1\36\2\6\3\36"+
    "\1\6\6\36\4\6\2\36\2\6\26\36\1\6\7\36"+
    "\1\6\2\36\1\6\2\36\1\6\2\36\2\6\1\36"+
    "\1\6\5\36\4\6\2\36\2\6\3\36\3\6\1\36"+
    "\7\6\4\36\1\6\1\36\7\6\12\102\6\36\13\6"+
    "\3\36\1\6\11\36\1\6\3\36\1\6\26\36\1\6"+
    "\7\36\1\6\2\36\1\6\5\36\2\6\12\36\1\6"+
    "\3\36\1\6\3\36\2\6\1\36\17\6\4\36\2\6"+
    "\12\102\1\6\1\0\7\6\7\36\1\6\3\36\1\6"+
    "\10\36\2\6\2\36\2\6\26\36\1\6\7\36\1\6"+
    "\2\36\1\6\5\36\2\6\11\36\2\6\2\36\2\6"+
    "\3\36\7\6\1\0\2\36\4\6\2\36\1\6\5\36"+
    "\2\6\12\102\1\6\1\36\20\6\2\36\1\6\6\36"+
    "\3\6\3\36\1\6\4\36\3\6\2\36\1\6\1\36"+
    "\1\6\2\36\3\6\2\36\3\6\3\36\3\6\14\36"+
    "\4\6\5\36\3\6\3\36\1\6\4\36\2\6\1\36"+
    "\6\6\1\36\16\6\12\102\11\6\1\0\6\6\15\36"+
    "\1\6\3\36\1\6\27\36\1\6\20\36\2\6\1\0"+
    "\10\36\1\6\3\36\1\6\4\36\7\6\2\36\1\6"+
    "\3\36\2\6\1\0\2\6\4\36\2\6\12\102\20\6"+
    "\4\36\1\6\10\36\1\6\3\36\1\6\27\36\1\6"+
    "\12\36\1\6\5\36\2\6\11\36\1\6\3\36\1\6"+
    "\4\36\7\6\2\36\6\6\1\0\1\36\1\6\4\36"+
    "\2\6\12\102\1\6\2\36\1\0\14\6\4\36\1\0"+
    "\10\36\1\6\3\36\1\6\63\36\1\6\3\36\1\6"+
    "\5\36\5\6\4\36\7\6\5\36\2\6\12\102\12\6"+
    "\6\36\1\6\1\0\2\36\1\6\22\36\3\6\30\36"+
    "\1\6\11\36\1\6\1\36\2\6\7\36\3\6\1\36"+
    "\4\6\6\36\1\6\1\36\1\6\10\36\6\6\12\102"+
    "\2\6\2\36\15\6\72\36\4\6\1\0\17\36\1\6"+
    "\12\102\47\6\2\36\1\6\1\36\1\6\5\36\1\6"+
    "\30\36\1\6\1\36\1\6\27\36\2\6\5\36\1\6"+
    "\1\36\1\6\6\36\1\0\1\6\12\102\2\6\4\36"+
    "\40\6\1\36\27\6\2\36\6\6\12\102\13\6\1\36"+
    "\1\6\1\36\1\6\1\36\4\6\12\36\1\6\44\36"+
    "\4\6\24\36\1\6\22\36\1\6\44\36\11\6\1\36"+
    "\71\6\100\36\12\102\6\6\100\36\12\102\4\36\2\6"+
    "\46\36\1\6\1\36\5\6\1\36\2\6\53\36\1\6"+
    "\115\36\1\6\4\36\2\6\7\36\1\6\1\36\1\6"+
    "\4\36\2\6\51\36\1\6\4\36\2\6\41\36\1\6"+
    "\4\36\2\6\7\36\1\6\1\36\1\6\4\36\2\6"+
    "\17\36\1\6\71\36\1\6\4\36\2\6\103\36\2\6"+
    "\3\36\40\6\20\36\20\6\126\36\2\6\6\36\3\6"+
    "\u016c\36\2\6\21\36\1\100\32\36\5\6\113\36\3\6"+
    "\13\36\7\6\15\36\1\0\7\36\1\0\11\6\1\0"+
    "\25\36\13\6\24\36\14\6\15\36\1\6\3\36\1\6"+
    "\2\36\14\6\124\36\3\6\1\36\3\6\1\0\2\36"+
    "\2\6\12\102\41\6\3\36\2\0\12\102\6\6\131\36"+
    "\7\6\53\36\5\6\106\36\12\6\37\36\1\6\14\36"+
    "\4\6\14\36\12\6\12\102\36\36\2\6\5\36\13\6"+
    "\54\36\4\6\32\36\6\6\12\102\46\6\34\36\4\6"+
    "\77\36\1\6\35\36\2\6\1\36\12\102\6\6\12\102"+
    "\15\6\1\36\10\6\16\36\1\101\20\0\61\6\114\36"+
    "\1\0\3\6\12\102\21\6\11\36\14\6\60\36\12\102"+
    "\72\36\14\6\70\36\10\6\12\102\3\6\3\36\12\102"+
    "\44\36\2\6\11\36\7\6\53\36\2\6\3\36\20\6"+
    "\3\36\1\6\47\36\5\6\372\36\1\0\33\36\2\6"+
    "\6\36\2\6\46\36\2\6\6\36\2\6\10\36\1\6"+
    "\1\36\1\6\1\36\1\6\1\36\1\6\37\36\2\6"+
    "\65\36\1\6\7\36\1\6\1\36\3\6\3\36\1\6"+
    "\7\36\3\6\4\36\2\6\6\36\4\6\15\36\5\6"+
    "\3\36\1\6\7\36\3\6\13\100\5\0\30\6\2\3"+
    "\5\0\1\100\17\6\2\36\23\6\1\36\12\6\1\100"+
    "\5\0\1\6\12\0\1\6\1\36\15\6\1\36\20\6"+
    "\15\36\3\6\41\0\17\6\15\36\4\101\1\36\3\101"+
    "\14\36\21\6\1\36\4\6\1\36\2\6\12\36\1\6"+
    "\1\36\3\6\5\36\6\6\1\36\1\6\1\36\1\6"+
    "\1\36\1\6\4\36\1\6\13\36\2\6\4\36\5\6"+
    "\5\36\4\6\1\36\21\6\51\36\u022d\6\64\101\26\6"+
    "\57\36\1\0\57\36\1\0\205\36\6\6\11\36\14\6"+
    "\46\36\1\6\1\36\5\6\1\36\2\6\70\36\7\6"+
    "\1\36\17\6\30\36\11\6\7\36\1\6\7\36\1\6"+
    "\7\36\1\6\7\36\1\6\7\36\1\6\7\36\1\6"+
    "\7\36\1\6\7\36\1\6\40\36\57\6\1\36\320\6"+
    "\1\100\4\6\3\36\31\6\17\36\1\6\5\36\2\6"+
    "\5\36\4\6\126\36\2\6\2\36\2\6\3\36\1\6"+
    "\132\36\1\6\4\36\5\6\53\36\1\6\136\36\21\6"+
    "\33\36\5\0\60\6\306\36\12\0\100\6\360\36\20\0"+
    "\215\36\103\6\56\36\2\6\15\36\3\6\20\36\12\102"+
    "\2\36\24\6\60\36\3\101\1\6\12\36\1\6\163\36"+
    "\45\6\11\36\2\6\147\36\2\6\65\36\2\0\5\36"+
    "\4\0\5\6\2\0\1\6\1\0\1\6\5\0\30\6"+
    "\5\0\61\36\4\6\1\0\13\6\1\0\7\6\64\36"+
    "\14\6\106\36\12\6\12\102\6\6\30\36\3\6\1\36"+
    "\1\6\3\36\12\102\44\36\2\6\44\36\14\6\35\36"+
    "\3\6\101\36\16\6\1\36\12\102\6\6\20\36\12\102"+
    "\5\36\1\6\67\36\11\6\16\36\2\6\12\102\6\6"+
    "\27\36\3\6\111\36\30\6\3\36\2\6\20\36\2\6"+
    "\5\36\12\6\6\36\2\6\6\36\2\6\6\36\11\6"+
    "\7\36\1\6\7\36\1\6\53\36\1\6\14\36\2\0"+
    "\6\6\173\36\1\6\2\36\2\6\12\102\6\6\244\36"+
    "\14\6\27\36\4\6\61\36\4\6\156\36\2\6\152\36"+
    "\46\6\7\36\14\6\5\36\5\6\14\36\1\6\15\36"+
    "\1\6\5\36\1\6\1\36\1\6\2\36\1\6\2\36"+
    "\1\6\154\36\41\6\153\36\22\6\100\36\2\6\66\36"+
    "\50\6\14\36\1\0\3\6\20\36\20\6\20\36\3\6"+
    "\2\36\30\6\3\36\31\6\1\0\6\6\5\36\1\6"+
    "\207\36\2\6\1\0\4\6\1\0\13\6\12\102\7\6"+
    "\32\36\4\6\1\36\1\6\32\36\13\6\131\36\3\6"+
    "\6\36\2\6\6\36\2\6\6\36\2\6\3\36\3\6"+
    "\2\0\3\6\2\0\22\6\3\0\4\6\14\36\1\6"+
    "\32\36\1\6\23\36\1\6\2\36\1\6\17\36\2\6"+
    "\16\36\42\6\173\36\105\6\65\36\210\6\1\36\202\6"+
    "\35\36\3\6\61\36\17\6\1\36\37\6\40\36\15\6"+
    "\36\36\5\6\53\36\5\6\36\36\2\6\44\36\4\6"+
    "\10\36\1\6\5\36\52\6\236\36\2\6\12\102\6\6"+
    "\44\36\4\6\44\36\4\6\50\36\10\6\64\36\14\6"+
    "\13\0\1\6\17\0\1\6\7\0\1\6\2\0\1\6"+
    "\13\0\1\6\17\0\1\6\7\0\1\6\2\0\103\6"+
    "\67\36\11\6\26\36\12\6\10\36\30\6\6\0\1\6"+
    "\52\0\1\6\11\0\105\6\6\36\2\6\1\36\1\6"+
    "\54\36\1\6\2\36\3\6\1\36\2\6\27\36\12\6"+
    "\27\36\11\6\37\36\101\6\23\36\1\6\2\36\12\6"+
    "\26\36\12\6\32\36\106\6\70\36\6\6\2\36\100\6"+
    "\4\36\1\6\2\36\5\6\10\36\1\6\3\36\1\6"+
    "\35\36\2\6\3\36\4\6\1\36\40\6\35\36\3\6"+
    "\35\36\43\6\10\36\1\6\36\36\31\6\66\36\12\6"+
    "\26\36\12\6\23\36\15\6\22\36\156\6\111\36\67\6"+
    "\63\36\15\6\63\36\15\6\50\36\10\6\12\102\u0146\6"+
    "\52\0\1\6\2\0\3\6\2\0\113\6\3\0\35\36"+
    "\12\6\1\36\10\6\41\36\37\6\26\0\52\6\25\0"+
    "\33\6\27\36\11\6\107\36\37\6\12\102\6\0\11\6"+
    "\74\36\2\6\1\0\4\6\1\0\12\6\1\0\2\6"+
    "\31\36\7\6\12\102\6\6\65\36\1\6\12\102\4\6"+
    "\3\36\1\0\10\6\44\36\2\6\1\36\11\6\105\36"+
    "\4\6\4\36\1\6\2\0\12\102\1\36\1\6\1\36"+
    "\43\6\22\36\1\6\45\36\6\6\1\36\3\0\76\6"+
    "\7\36\1\6\1\36\1\6\4\36\1\6\17\36\1\6"+
    "\12\36\7\6\73\36\5\6\12\102\6\6\4\36\1\6"+
    "\10\36\2\6\2\36\2\6\26\36\1\6\7\36\1\6"+
    "\2\36\1\6\5\36\1\6\12\36\2\6\2\36\2\6"+
    "\3\36\2\6\1\36\6\6\1\36\5\6\7\36\2\6"+
    "\7\36\3\6\5\36\213\6\113\36\5\6\12\102\4\6"+
    "\2\36\2\0\36\6\106\36\1\6\1\36\10\6\12\102"+
    "\246\6\66\36\2\6\11\36\27\6\6\36\42\6\101\36"+
    "\3\6\1\36\13\6\12\102\46\6\71\36\7\6\12\102"+
    "\66\6\33\36\2\6\17\36\4\6\12\102\6\6\7\0"+
    "\271\6\73\36\145\6\100\36\12\102\25\6\1\36\7\0"+
    "\2\6\1\0\2\6\10\0\1\6\2\0\1\6\36\0"+
    "\1\6\2\0\2\6\11\0\14\6\12\0\106\6\10\36"+
    "\2\6\56\36\2\6\10\36\1\6\2\36\33\6\77\36"+
    "\10\6\1\36\10\6\112\36\3\6\1\36\22\6\20\0"+
    "\71\36\7\6\11\36\1\6\55\36\1\6\11\36\17\6"+
    "\12\102\30\6\36\36\2\6\26\36\1\6\16\36\111\6"+
    "\7\36\1\6\2\36\1\6\54\36\3\6\1\36\1\6"+
    "\2\36\1\6\11\36\10\6\12\102\6\6\6\36\1\6"+
    "\2\36\1\6\45\36\1\6\2\36\1\6\6\36\7\6"+
    "\12\102\u0136\6\27\36\11\6\21\0\1\6\51\0\3\6"+
    "\5\0\15\6\12\0\126\6\1\0\54\6\4\0\37\6"+
    "\232\36\146\6\157\36\21\6\304\36\u014c\6\141\0\17\6"+
    "\57\36\47\0\252\6\107\36\271\6\71\36\7\6\37\36"+
    "\1\6\12\102\6\6\117\0\1\6\12\0\6\6\36\36"+
    "\2\6\5\36\13\6\67\36\11\6\4\36\14\6\12\102"+
    "\11\6\25\36\5\6\23\36\260\6\100\36\200\6\113\36"+
    "\4\6\71\36\7\6\21\36\100\6\2\36\1\6\1\36"+
    "\1\0\13\6\2\0\16\6\370\36\10\6\363\36\u01e3\0"+
    "\52\6\11\0\u01e7\6\4\0\1\6\7\0\1\6\2\0"+
    "\1\6\37\36\4\0\17\6\1\0\35\6\3\36\2\6"+
    "\1\0\16\6\4\36\10\6\u018c\36\4\6\153\36\5\6"+
    "\15\36\3\6\11\36\7\6\12\36\3\6\2\36\1\6"+
    "\4\0\134\6\56\0\2\6\27\0\u011e\6\5\36\3\6"+
    "\6\36\10\0\10\36\2\6\7\36\36\6\4\36\224\6"+
    "\3\36\273\6\125\36\1\6\107\36\1\6\2\36\2\6"+
    "\1\36\2\6\2\36\2\6\4\36\1\6\14\36\1\6"+
    "\1\36\1\6\7\36\1\6\101\36\1\6\4\36\2\6"+
    "\10\36\1\6\7\36\1\6\34\36\1\6\4\36\1\6"+
    "\5\36\1\6\1\36\3\6\7\36\1\6\u0154\36\2\6"+
    "\31\36\1\6\31\36\1\6\37\36\1\6\31\36\1\6"+
    "\37\36\1\6\31\36\1\6\37\36\1\6\31\36\1\6"+
    "\37\36\1\6\31\36\1\6\10\36\2\6\62\102\67\36"+
    "\4\6\62\36\10\6\1\36\16\6\1\36\26\6\5\36"+
    "\1\6\17\36\120\6\37\0\6\6\6\0\325\6\7\36"+
    "\1\6\21\36\2\6\7\36\1\6\2\36\1\6\5\36"+
    "\5\6\76\0\41\6\1\0\160\6\55\36\3\6\16\36"+
    "\2\6\12\102\4\6\1\36\u0141\6\37\0\21\6\60\36"+
    "\12\102\5\6\1\0\320\6\52\0\346\6\7\0\1\6"+
    "\4\0\1\6\2\0\1\6\17\0\1\6\305\36\13\6"+
    "\7\36\51\6\114\36\4\6\12\102\u0156\6\1\0\117\6"+
    "\4\36\1\6\33\36\1\6\2\36\1\6\1\36\2\6"+
    "\1\36\1\6\12\36\1\6\4\36\1\6\1\36\1\6"+
    "\1\36\6\6\1\36\4\6\1\36\1\6\1\36\1\6"+
    "\1\36\1\6\3\36\1\6\2\36\1\6\1\36\2\6"+
    "\1\36\1\6\1\36\1\6\1\36\1\6\1\36\1\6"+
    "\1\36\1\6\2\36\1\6\1\36\2\6\4\36\1\6"+
    "\7\36\1\6\4\36\1\6\4\36\1\6\1\36\1\6"+
    "\12\36\1\6\21\36\5\6\3\36\1\6\5\36\1\6"+
    "\21\36\164\6\32\101\6\6\32\101\6\6\32\101\u0166\6"+
    "\12\0\6\6\327\36\11\0\40\6\65\36\5\0\6\6"+
    "\336\36\2\6\u0182\36\16\6\u0131\36\37\6\36\36\342\6"+
    "\113\0\5\6\u0160\0\121\6\1\0\36\6\140\0\200\6"+
    "\360\36\20\6";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[33792];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\6\0\1\1\4\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\2\10\1\12\1\13\12\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\14\2\2\3\24"+
    "\1\25\1\26\20\25\1\27\1\30\2\0\1\31\1\0"+
    "\4\32\1\10\1\0\1\10\4\14\1\10\3\14\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\0\1\44\13\45\2\0\1\10\2\14\1\10\1\46"+
    "\3\10\14\45\1\47\1\50\1\0\3\45\1\51\1\45"+
    "\1\52\1\53\5\45\1\54\1\55\1\56\3\45\1\57"+
    "\1\45\1\60\1\61\1\45\1\62\1\63\1\64\3\45"+
    "\1\65";

  private static int [] zzUnpackAction() {
    int [] result = new int[161];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\103\0\206\0\311\0\u010c\0\u014f\0\u0192\0\u01d5"+
    "\0\u0218\0\u025b\0\u029e\0\u0192\0\u0192\0\u0192\0\u0192\0\u0192"+
    "\0\u02e1\0\u0192\0\u0324\0\u0367\0\u0192\0\u0192\0\u03aa\0\u03ed"+
    "\0\u0430\0\u0473\0\u04b6\0\u04f9\0\u053c\0\u057f\0\u05c2\0\u0605"+
    "\0\u0192\0\u0192\0\u0192\0\u0192\0\u0192\0\u0192\0\u0192\0\u0648"+
    "\0\u068b\0\u06ce\0\u068b\0\u01d5\0\u0711\0\u0192\0\u0754\0\u068b"+
    "\0\u02e1\0\u0324\0\u0367\0\u0797\0\u03aa\0\u03ed\0\u0430\0\u0473"+
    "\0\u04b6\0\u04f9\0\u053c\0\u057f\0\u05c2\0\u0605\0\u0648\0\u07da"+
    "\0\u081d\0\u068b\0\u0860\0\u0192\0\u08a3\0\u08a3\0\u0218\0\u025b"+
    "\0\u029e\0\u08e6\0\u0929\0\u096c\0\u09af\0\u09f2\0\u0a35\0\u0a78"+
    "\0\u0abb\0\u0afe\0\u0b41\0\u0b84\0\u0192\0\u0192\0\u0192\0\u0192"+
    "\0\u0192\0\u0192\0\u0192\0\u0192\0\u0192\0\u0bc7\0\u0c0a\0\u0c4d"+
    "\0\u0c90\0\u0cd3\0\u0d16\0\u0d59\0\u0d9c\0\u0ddf\0\u0e22\0\u0e65"+
    "\0\u0ea8\0\u0eeb\0\u0f2e\0\u0f71\0\u0f71\0\u0fb4\0\u0ff7\0\u0afe"+
    "\0\u0192\0\u103a\0\u0b84\0\u0a78\0\u107d\0\u10c0\0\u1103\0\u1146"+
    "\0\u1189\0\u11cc\0\u120f\0\u1252\0\u1295\0\u12d8\0\u131b\0\u135e"+
    "\0\u0192\0\u0192\0\u13a1\0\u13e4\0\u1427\0\u146a\0\u0c4d\0\u14ad"+
    "\0\u0c4d\0\u0c4d\0\u14f0\0\u1533\0\u1576\0\u15b9\0\u15fc\0\u0c4d"+
    "\0\u0c4d\0\u0c4d\0\u163f\0\u1682\0\u16c5\0\u0c4d\0\u1708\0\u0c4d"+
    "\0\u0c4d\0\u174b\0\u0c4d\0\u0c4d\0\u0c4d\0\u178e\0\u17d1\0\u1814"+
    "\0\u0c4d";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[161];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\7\1\10\2\11\1\12\1\13\1\7\1\14\1\15"+
    "\1\16\1\17\1\20\1\7\1\21\1\22\1\23\5\24"+
    "\1\25\2\7\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\27\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\27\1\44\23\27\1\45\1\46\1\47\1\11"+
    "\1\7\1\27\1\50\1\7\1\10\2\51\1\10\1\52"+
    "\1\7\1\14\1\15\1\16\1\17\1\20\1\7\1\21"+
    "\1\22\1\23\5\24\1\25\2\7\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\27\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\27\1\44\23\27\1\45"+
    "\1\46\1\47\1\51\1\7\1\27\1\50\1\7\1\10"+
    "\2\53\1\54\1\55\1\7\1\14\1\15\1\16\1\17"+
    "\1\20\1\7\1\21\1\22\1\23\5\24\1\25\2\7"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\27\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\27"+
    "\1\44\23\27\1\45\1\46\1\47\1\53\1\7\1\27"+
    "\1\50\1\56\1\57\1\51\1\60\1\57\1\52\7\56"+
    "\1\61\1\56\1\62\5\63\2\56\1\64\1\56\1\65"+
    "\1\66\1\67\1\70\1\71\1\65\1\72\1\73\1\74"+
    "\1\75\1\76\3\56\1\65\1\56\23\65\3\56\1\60"+
    "\1\56\1\65\1\77\1\7\1\10\2\51\1\10\1\52"+
    "\1\7\1\14\1\15\1\16\1\17\1\20\1\7\1\21"+
    "\1\22\1\23\5\24\1\25\1\100\1\7\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\27\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\27\1\44\23\27"+
    "\1\45\1\46\1\47\1\51\1\7\1\27\1\50\1\7"+
    "\1\10\2\51\1\10\1\52\1\7\1\14\1\15\1\16"+
    "\1\17\1\20\1\7\1\21\1\22\1\23\5\24\1\25"+
    "\2\7\1\101\1\27\1\30\1\31\1\32\1\33\1\27"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\27\1\44\23\27\1\45\1\46\1\47\1\51\1\7"+
    "\1\27\1\50\104\0\1\10\2\102\1\10\1\103\22\0"+
    "\1\104\46\0\1\102\4\0\1\105\4\106\22\0\1\104"+
    "\46\0\1\106\4\0\1\12\2\107\1\110\1\111\22\0"+
    "\1\104\46\0\1\107\4\0\1\105\1\107\3\106\22\0"+
    "\1\104\46\0\1\106\22\0\6\112\7\0\1\113\20\0"+
    "\1\113\42\0\1\114\1\0\6\24\4\0\1\27\1\115"+
    "\1\116\1\117\1\116\1\27\3\116\1\120\1\116\3\0"+
    "\1\121\1\0\1\27\1\122\2\27\1\123\15\27\1\124"+
    "\5\0\1\27\1\50\15\0\1\114\1\0\6\24\4\0"+
    "\1\27\2\116\1\117\1\116\1\27\5\116\3\0\1\121"+
    "\1\0\4\27\1\123\16\27\5\0\1\27\1\50\17\0"+
    "\6\27\4\0\1\27\4\116\1\27\5\116\3\0\1\27"+
    "\1\0\23\27\5\0\2\27\17\0\6\27\1\0\1\125"+
    "\2\0\1\27\4\116\1\27\5\116\3\0\1\27\1\0"+
    "\23\27\5\0\2\27\17\0\6\27\1\0\1\126\2\0"+
    "\1\27\4\116\1\27\5\116\3\0\1\27\1\0\23\27"+
    "\5\0\2\27\17\0\6\27\1\0\1\127\2\0\1\27"+
    "\4\116\1\27\5\116\3\0\1\27\1\0\23\27\5\0"+
    "\2\27\17\0\6\27\1\0\1\130\2\0\1\27\4\116"+
    "\1\27\5\116\3\0\1\27\1\0\23\27\5\0\2\27"+
    "\17\0\6\27\1\0\1\131\2\0\1\27\4\116\1\27"+
    "\5\116\3\0\1\27\1\0\23\27\5\0\2\27\17\0"+
    "\6\27\1\0\1\132\2\0\1\27\4\116\1\27\5\116"+
    "\3\0\1\27\1\0\23\27\5\0\2\27\17\0\6\27"+
    "\1\0\1\133\2\0\1\27\4\116\1\27\5\116\3\0"+
    "\1\27\1\0\23\27\5\0\2\27\17\0\6\27\1\0"+
    "\1\134\2\0\1\27\4\116\1\27\5\116\3\0\1\27"+
    "\1\0\23\27\5\0\2\27\17\0\6\27\1\0\1\135"+
    "\2\0\1\27\4\116\1\27\5\116\3\0\1\27\1\0"+
    "\23\27\5\0\2\27\15\0\1\136\1\0\6\50\4\0"+
    "\1\27\4\116\1\27\5\116\3\0\1\27\1\0\23\27"+
    "\5\0\1\27\1\50\30\0\1\104\54\0\1\51\25\0"+
    "\1\104\54\0\1\53\25\0\1\104\52\0\1\137\1\57"+
    "\1\102\1\137\1\57\1\103\75\137\1\140\16\0\6\140"+
    "\4\0\13\140\3\0\1\140\1\0\1\141\1\142\1\143"+
    "\1\140\1\144\1\145\1\140\1\146\1\147\1\140\1\150"+
    "\1\140\1\151\1\152\5\140\3\0\1\140\2\0\1\140"+
    "\26\0\1\153\104\0\1\101\54\0\1\102\25\0\1\104"+
    "\53\0\1\105\4\106\71\0\1\106\22\0\6\112\7\0"+
    "\1\113\12\0\1\112\5\0\1\113\41\0\1\154\2\0"+
    "\6\155\22\0\1\155\52\0\6\156\7\0\1\113\20\0"+
    "\1\113\24\0\1\157\17\0\2\160\4\27\1\0\1\161"+
    "\2\0\1\27\4\116\1\27\5\116\3\0\1\160\1\0"+
    "\23\27\5\0\2\27\17\0\6\27\1\0\1\161\2\0"+
    "\1\27\4\116\1\27\5\116\3\0\1\27\1\0\23\27"+
    "\5\0\2\27\14\0\1\154\2\0\6\162\1\0\1\161"+
    "\2\0\1\27\4\116\1\27\5\116\3\0\1\162\1\0"+
    "\23\27\5\0\2\27\17\0\6\163\1\0\1\161\2\0"+
    "\1\163\4\164\1\27\5\116\3\0\1\163\1\0\6\163"+
    "\15\27\5\0\2\27\15\0\1\21\1\0\6\121\4\0"+
    "\1\27\2\116\1\117\1\116\1\27\5\116\3\0\1\121"+
    "\1\0\4\27\1\123\16\27\5\0\2\27\17\0\2\160"+
    "\4\27\4\0\1\27\4\116\1\27\5\116\3\0\1\160"+
    "\1\0\23\27\5\0\2\27\14\0\1\154\2\0\6\162"+
    "\4\0\1\27\4\116\1\27\5\116\3\0\1\162\1\0"+
    "\23\27\5\0\2\27\17\0\6\163\4\0\1\163\4\164"+
    "\1\27\5\116\3\0\1\163\1\0\6\163\15\27\5\0"+
    "\2\27\17\0\6\157\55\0\1\157\1\137\2\0\1\137"+
    "\2\0\75\137\1\140\16\0\6\140\4\0\13\140\3\0"+
    "\1\140\1\0\23\140\3\0\1\140\2\0\2\140\16\0"+
    "\6\140\4\0\13\140\3\0\1\140\1\0\17\140\1\165"+
    "\3\140\3\0\1\140\2\0\2\140\16\0\6\140\4\0"+
    "\13\140\3\0\1\140\1\0\1\166\3\140\1\167\16\140"+
    "\3\0\1\140\2\0\2\140\16\0\6\140\4\0\13\140"+
    "\3\0\1\140\1\0\20\140\1\170\2\140\3\0\1\140"+
    "\2\0\2\140\16\0\6\140\4\0\13\140\3\0\1\140"+
    "\1\0\13\140\1\171\7\140\3\0\1\140\2\0\2\140"+
    "\16\0\6\140\4\0\13\140\3\0\1\140\1\0\14\140"+
    "\1\172\3\140\1\173\2\140\3\0\1\140\2\0\2\140"+
    "\16\0\6\140\4\0\13\140\3\0\1\140\1\0\4\140"+
    "\1\174\16\140\3\0\1\140\2\0\2\140\16\0\6\140"+
    "\4\0\13\140\3\0\1\140\1\0\17\140\1\175\3\140"+
    "\3\0\1\140\2\0\2\140\16\0\6\140\4\0\13\140"+
    "\3\0\1\140\1\0\4\140\1\176\16\140\3\0\1\140"+
    "\2\0\2\140\16\0\6\140\4\0\13\140\3\0\1\140"+
    "\1\0\21\140\1\177\1\140\3\0\1\140\2\0\2\140"+
    "\16\0\6\140\4\0\13\140\3\0\1\140\1\0\14\140"+
    "\1\200\6\140\3\0\1\140\2\0\1\140\1\201\5\202"+
    "\20\201\1\203\50\201\2\202\2\201\17\0\6\155\22\0"+
    "\1\155\50\0\1\136\1\0\6\156\7\0\1\113\12\0"+
    "\1\112\5\0\1\113\24\0\1\157\15\0\1\136\1\0"+
    "\6\157\55\0\1\157\17\0\6\162\4\0\1\27\4\116"+
    "\1\27\5\116\3\0\1\162\1\0\23\27\5\0\2\27"+
    "\1\140\16\0\6\140\4\0\13\140\3\0\1\140\1\0"+
    "\17\140\1\204\3\140\3\0\1\140\2\0\2\140\16\0"+
    "\6\140\4\0\13\140\3\0\1\140\1\0\2\140\1\205"+
    "\20\140\3\0\1\140\2\0\2\140\16\0\6\140\4\0"+
    "\13\140\3\0\1\140\1\0\6\140\1\206\14\140\3\0"+
    "\1\140\2\0\2\140\16\0\6\140\4\0\13\140\3\0"+
    "\1\140\1\0\17\140\1\207\3\140\3\0\1\140\2\0"+
    "\2\140\16\0\6\140\4\0\13\140\3\0\1\140\1\0"+
    "\2\140\1\210\1\211\17\140\3\0\1\140\2\0\2\140"+
    "\16\0\6\140\4\0\13\140\3\0\1\140\1\0\16\140"+
    "\1\212\4\140\3\0\1\140\2\0\2\140\16\0\6\140"+
    "\4\0\13\140\3\0\1\140\1\0\13\140\1\213\7\140"+
    "\3\0\1\140\2\0\2\140\16\0\6\140\4\0\13\140"+
    "\3\0\1\140\1\0\1\214\22\140\3\0\1\140\2\0"+
    "\2\140\16\0\6\140\4\0\13\140\3\0\1\140\1\0"+
    "\4\140\1\215\16\140\3\0\1\140\2\0\2\140\16\0"+
    "\6\140\4\0\13\140\3\0\1\140\1\0\17\140\1\216"+
    "\3\140\3\0\1\140\2\0\2\140\16\0\6\140\4\0"+
    "\13\140\3\0\1\140\1\0\4\140\1\217\16\140\3\0"+
    "\1\140\2\0\2\140\16\0\6\140\4\0\13\140\3\0"+
    "\1\140\1\0\3\140\1\220\17\140\3\0\1\140\2\0"+
    "\1\140\1\0\5\202\20\0\1\203\50\0\2\202\2\0"+
    "\1\140\16\0\6\140\4\0\13\140\3\0\1\140\1\0"+
    "\16\140\1\221\4\140\3\0\1\140\2\0\2\140\16\0"+
    "\6\140\4\0\13\140\3\0\1\140\1\0\11\140\1\222"+
    "\11\140\3\0\1\140\2\0\2\140\16\0\6\140\4\0"+
    "\13\140\3\0\1\140\1\0\10\140\1\223\12\140\3\0"+
    "\1\140\2\0\2\140\16\0\6\140\4\0\13\140\3\0"+
    "\1\140\1\0\14\140\1\224\6\140\3\0\1\140\2\0"+
    "\2\140\16\0\6\140\4\0\13\140\3\0\1\140\1\0"+
    "\2\140\1\221\20\140\3\0\1\140\2\0\2\140\16\0"+
    "\6\140\4\0\13\140\3\0\1\140\1\0\3\140\1\225"+
    "\17\140\3\0\1\140\2\0\2\140\16\0\6\140\4\0"+
    "\13\140\3\0\1\140\1\0\12\140\1\226\10\140\3\0"+
    "\1\140\2\0\2\140\16\0\6\140\4\0\13\140\3\0"+
    "\1\140\1\0\7\140\1\227\13\140\3\0\1\140\2\0"+
    "\2\140\16\0\6\140\4\0\13\140\3\0\1\140\1\0"+
    "\16\140\1\230\4\140\3\0\1\140\2\0\2\140\16\0"+
    "\6\140\4\0\13\140\3\0\1\140\1\0\13\140\1\231"+
    "\7\140\3\0\1\140\2\0\2\140\16\0\6\140\4\0"+
    "\13\140\3\0\1\140\1\0\3\140\1\232\17\140\3\0"+
    "\1\140\2\0\2\140\16\0\1\140\1\233\1\221\1\234"+
    "\1\235\1\140\4\0\13\140\3\0\1\140\1\0\23\140"+
    "\3\0\1\140\2\0\2\140\16\0\6\140\4\0\13\140"+
    "\3\0\1\140\1\0\14\140\1\236\6\140\3\0\1\140"+
    "\2\0\2\140\16\0\6\140\4\0\13\140\3\0\1\140"+
    "\1\0\10\140\1\237\12\140\3\0\1\140\2\0\2\140"+
    "\16\0\6\140\4\0\13\140\3\0\1\140\1\0\3\140"+
    "\1\221\17\140\3\0\1\140\2\0\2\140\16\0\6\140"+
    "\4\0\13\140\3\0\1\140\1\0\13\140\1\240\7\140"+
    "\3\0\1\140\2\0\2\140\16\0\6\140\4\0\13\140"+
    "\3\0\1\140\1\0\6\140\1\241\14\140\3\0\1\140"+
    "\2\0\1\140";

  private static int [] zzUnpacktrans() {
    int [] result = new int[6231];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\6\0\1\11\4\1\5\11\1\1\1\11\2\1\2\11"+
    "\12\1\7\11\6\1\1\11\23\1\2\0\1\11\1\0"+
    "\5\1\1\0\11\1\11\11\1\0\14\1\2\0\4\1"+
    "\1\11\17\1\2\11\1\0\36\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[161];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
        protected abstract IElementType parseExample();
        protected abstract IElementType parseCutToken();
        protected abstract void pushAngle();
        @NotNull
        protected abstract IElementType popAngle();
        protected abstract void checkPendingSpacedAngles();
        @NotNull
        protected abstract IElementType lexOptional(@NotNull IElementType type);


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public PodLexerGenerated(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }
	protected int bufferStart;

    public void setTokenStart(int position){zzCurrentPos = zzStartRead = position;}
    public void setTokenEnd(int position){zzMarkedPos = position;}
    public CharSequence getBuffer(){ return zzBuffer;}
    public int getBufferEnd() {return zzEndRead;}
    public int getNextTokenStart(){ return zzMarkedPos;}
    public boolean isLastToken(){ return zzMarkedPos == zzEndRead; }
	public int getBufferStart(){ return bufferStart;	}
 	public int getRealLexicalState() {return zzLexicalState;  }

 	public void pullback(int i)
 	{
 		int length = yylength();
 		if( i == length)
 		{
 			return;
 		}
 		assert i < length: "Pulling back for " + i + " of " + length + " for: " + yytext();
		yypushback(length - i);
 	}

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return zzMarkedPos;
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    bufferStart = zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
    resetInternals();
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public int yystate() {
    return isInitialState() ? zzLexicalState: 0xFFFF;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }
    message += "; Real state is: " + zzLexicalState + "; yystate(): " + yystate();

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType perlAdvance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return POD_SYMBOL;
            }
          // fall through
          case 54: break;
          case 2:
            { return TokenType.WHITE_SPACE;
            }
          // fall through
          case 55: break;
          case 3:
            { return POD_QUOTE_DOUBLE;
            }
          // fall through
          case 56: break;
          case 4:
            { return POD_QUOTE_SINGLE;
            }
          // fall through
          case 57: break;
          case 5:
            { return POD_PAREN_LEFT;
            }
          // fall through
          case 58: break;
          case 6:
            { return POD_PAREN_RIGHT;
            }
          // fall through
          case 59: break;
          case 7:
            { return POD_ASTERISK;
            }
          // fall through
          case 60: break;
          case 8:
            { return POD_NUMBER;
            }
          // fall through
          case 61: break;
          case 9:
            { return lexOptional(POD_DIV);
            }
          // fall through
          case 62: break;
          case 10:
            { return POD_COLON;
            }
          // fall through
          case 63: break;
          case 11:
            { return popAngle();
            }
          // fall through
          case 64: break;
          case 12:
            { return POD_IDENTIFIER;
            }
          // fall through
          case 65: break;
          case 13:
            { return POD_BRACKET_LEFT;
            }
          // fall through
          case 66: break;
          case 14:
            { return POD_BACKREF;
            }
          // fall through
          case 67: break;
          case 15:
            { return POD_BRACKET_RIGHT;
            }
          // fall through
          case 68: break;
          case 16:
            { return POD_QUOTE_TICK;
            }
          // fall through
          case 69: break;
          case 17:
            { return POD_BRACE_LEFT;
            }
          // fall through
          case 70: break;
          case 18:
            { return lexOptional(POD_PIPE);
            }
          // fall through
          case 71: break;
          case 19:
            { return POD_BRACE_RIGHT;
            }
          // fall through
          case 72: break;
          case 20:
            { yybegin(LEX_COMMAND_WAITING); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 73: break;
          case 21:
            { yybegin(YYINITIAL);yypushback(yylength());
            }
          // fall through
          case 74: break;
          case 22:
            { yybegin(LEX_COMMAND_READY);return TokenType.WHITE_SPACE;
            }
          // fall through
          case 75: break;
          case 23:
            { pushAngle();yybegin(YYINITIAL);return POD_ANGLE_LEFT;
            }
          // fall through
          case 76: break;
          case 24:
            { yybegin(YYINITIAL);return popAngle();
            }
          // fall through
          case 77: break;
          case 25:
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzMarkedPos, -1);
            { checkPendingSpacedAngles();return TokenType.WHITE_SPACE;
            }
          // fall through
          case 78: break;
          case 26:
            { yypushback(yylength()-1);yybegin(LEX_COMMAND_READY);return POD_NEWLINE;
            }
          // fall through
          case 79: break;
          case 27:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 1);
            { yybegin(OPENING_ANGLE);return POD_B;
            }
          // fall through
          case 80: break;
          case 28:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 1);
            { yybegin(OPENING_ANGLE);return POD_C;
            }
          // fall through
          case 81: break;
          case 29:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 1);
            { yybegin(OPENING_ANGLE);return POD_E;
            }
          // fall through
          case 82: break;
          case 30:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 1);
            { yybegin(OPENING_ANGLE);return POD_F;
            }
          // fall through
          case 83: break;
          case 31:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 1);
            { yybegin(OPENING_ANGLE);return POD_I;
            }
          // fall through
          case 84: break;
          case 32:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 1);
            { yybegin(OPENING_ANGLE);return POD_L;
            }
          // fall through
          case 85: break;
          case 33:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 1);
            { yybegin(OPENING_ANGLE);return POD_S;
            }
          // fall through
          case 86: break;
          case 34:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 1);
            { yybegin(OPENING_ANGLE);return POD_X;
            }
          // fall through
          case 87: break;
          case 35:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 1);
            { yybegin(OPENING_ANGLE);return POD_Z;
            }
          // fall through
          case 88: break;
          case 36:
            { return parseExample();
            }
          // fall through
          case 89: break;
          case 37:
            { yybegin(YYINITIAL);return POD_UNKNOWN;
            }
          // fall through
          case 90: break;
          case 38:
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzMarkedPos, -2);
            { return POD_IDENTIFIER;
            }
          // fall through
          case 91: break;
          case 39:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 1);
            { pushAngle();yybegin(YYINITIAL);return POD_ANGLE_LEFT;
            }
          // fall through
          case 92: break;
          case 40:
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzMarkedPos, -1);
            { pushAngle();yybegin(YYINITIAL);return POD_ANGLE_LEFT;
            }
          // fall through
          case 93: break;
          case 41:
            { return parseCutToken();
            }
          // fall through
          case 94: break;
          case 42:
            { yybegin(YYINITIAL);return POD_END;
            }
          // fall through
          case 95: break;
          case 43:
            { yybegin(YYINITIAL);return POD_FOR;
            }
          // fall through
          case 96: break;
          case 44:
            { yybegin(YYINITIAL);return POD_POD;
            }
          // fall through
          case 97: break;
          case 45:
            { yybegin(YYINITIAL);return POD_HEAD2;
            }
          // fall through
          case 98: break;
          case 46:
            { yybegin(YYINITIAL);return POD_BACK;
            }
          // fall through
          case 99: break;
          case 47:
            { yybegin(YYINITIAL);return POD_ITEM;
            }
          // fall through
          case 100: break;
          case 48:
            { yybegin(YYINITIAL);return POD_OVER;
            }
          // fall through
          case 101: break;
          case 49:
            { yybegin(YYINITIAL);return POD_BEGIN;
            }
          // fall through
          case 102: break;
          case 50:
            { yybegin(YYINITIAL);return POD_HEAD1;
            }
          // fall through
          case 103: break;
          case 51:
            { yybegin(YYINITIAL);return POD_HEAD3;
            }
          // fall through
          case 104: break;
          case 52:
            { yybegin(YYINITIAL);return POD_HEAD4;
            }
          // fall through
          case 105: break;
          case 53:
            { yybegin(YYINITIAL);return POD_ENCODING;
            }
          // fall through
          case 106: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
