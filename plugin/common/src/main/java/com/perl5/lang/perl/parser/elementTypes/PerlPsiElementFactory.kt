/*
 * Copyright 2015-2025 Alexandr Evstigneev
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.perl5.lang.perl.parser.elementTypes

import com.intellij.lang.ASTNode
import com.intellij.psi.PsiElement
import com.intellij.psi.tree.IElementType
import com.perl5.lang.perl.idea.formatter.PerlFormattingTokenSets.FOR_OR_FOREACH
import com.perl5.lang.perl.parser.PerlElementTypesGenerated.*
import com.perl5.lang.perl.parser.moose.MooseElementTypes.*
import com.perl5.lang.perl.parser.moose.psi.impl.*
import com.perl5.lang.perl.psi.impl.*

object PerlPsiElementFactory {
  private val factories = mapOf(

    ADD_EXPR to ::PsiPerlAddExprImpl,
    AFTER_MODIFIER to ::PsiPerlAfterModifierImpl,
    AND_EXPR to ::PsiPerlAndExprImpl,
    ANNOTATION_ABSTRACT to ::PsiPerlAnnotationAbstractImpl,
    ANNOTATION_DEPRECATED to ::PsiPerlAnnotationDeprecatedImpl,
    ANNOTATION_INJECT to ::PsiPerlAnnotationInjectImpl,
    ANNOTATION_METHOD to ::PsiPerlAnnotationMethodImpl,
    ANNOTATION_NOINSPECTION to ::PsiPerlAnnotationNoinspectionImpl,
    ANNOTATION_NO_INJECT to ::PsiPerlAnnotationNoInjectImpl,
    ANNOTATION_OVERRIDE to ::PsiPerlAnnotationOverrideImpl,
    ANNOTATION_RETURNS to ::PsiPerlAnnotationReturnsImpl,
    ANNOTATION_TYPE to ::PsiPerlAnnotationTypeImpl,
    ANNOTATION_VARIABLE to ::PsiPerlAnnotationVariableImpl,
    ANON_ARRAY to ::PsiPerlAnonArrayImpl,
    ANON_HASH to ::PsiPerlAnonHashImpl,
    AROUND_MODIFIER to ::PsiPerlAroundModifierImpl,
    AROUND_SIGNATURE_INVOCANTS to ::PsiPerlAroundSignatureInvocantsImpl,
    ARRAYREF_TYPE to ::PsiPerlArrayrefTypeImpl,
    ARRAY_CAST_EXPR to ::PsiPerlArrayCastExprImpl,
    ARRAY_ELEMENT to ::PsiPerlArrayElementImpl,
    ARRAY_INDEX to ::PsiPerlArrayIndexImpl,
    ARRAY_INDEX_VARIABLE to ::PsiPerlArrayIndexVariableImpl,
    ARRAY_POP_EXPR to ::PsiPerlArrayPopExprImpl,
    ARRAY_PUSH_EXPR to ::PsiPerlArrayPushExprImpl,
    ARRAY_SHIFT_EXPR to ::PsiPerlArrayShiftExprImpl,
    ARRAY_SLICE to ::PsiPerlArraySliceImpl,
    ARRAY_UNSHIFT_EXPR to ::PsiPerlArrayUnshiftExprImpl,
    ARRAY_VARIABLE to ::PsiPerlArrayVariableImpl,
    ASSIGN_EXPR to ::PsiPerlAssignExprImpl,
    ATTRIBUTE to ::PsiPerlAttributeImpl,
    ATTRIBUTES to ::PsiPerlAttributesImpl,
    AUGMENT_MODIFIER to ::PsiPerlAugmentModifierImpl,
    BEFORE_MODIFIER to ::PsiPerlBeforeModifierImpl,
    BITWISE_AND_EXPR to ::PsiPerlBitwiseAndExprImpl,
    BITWISE_OR_XOR_EXPR to ::PsiPerlBitwiseOrXorExprImpl,
    BLESS_EXPR to ::PsiPerlBlessExprImpl,
    BLOCK to ::PsiPerlBlockImpl,
    BLOCK_ARRAY to ::PsiPerlBlockArrayImpl,
    BLOCK_BRACELESS to ::PsiPerlBlockBracelessImpl,
    BLOCK_CODE to ::PsiPerlBlockCodeImpl,
    BLOCK_COMPOUND to ::PsiPerlBlockCompoundImpl,
    BLOCK_GLOB to ::PsiPerlBlockGlobImpl,
    BLOCK_HASH to ::PsiPerlBlockHashImpl,
    BLOCK_SCALAR to ::PsiPerlBlockScalarImpl,
    CALL_ARGUMENTS to ::PsiPerlCallArgumentsImpl,
    CASE_COMPOUND to ::PsiPerlCaseCompoundImpl,
    CASE_CONDITION to ::PsiPerlCaseConditionImpl,
    CASE_DEFAULT to ::PsiPerlCaseDefaultImpl,
    CATCH_CONDITION to ::PsiPerlCatchConditionImpl,
    CATCH_EXPR to ::PsiPerlCatchExprImpl,
    CODE_CAST_EXPR to ::PsiPerlCodeCastExprImpl,
    CODE_VARIABLE to ::PsiPerlCodeVariableImpl,
    COMMA_SEQUENCE_EXPR to ::PsiPerlCommaSequenceExprImpl,
    COMMENT_ANNOTATION to ::PerlAnnotationContainerImpl,
    COMPARE_EXPR to ::PsiPerlCompareExprImpl,
    COMPILE_REGEX to ::PsiPerlCompileRegexImpl,
    CONDITIONAL_BLOCK to ::PsiPerlConditionalBlockImpl,
    CONDITION_EXPR to ::PsiPerlConditionExprImpl,
    CONTINUATION_EXPR to ::PsiPerlContinuationExprImpl,
    CONTINUE_BLOCK to ::PsiPerlContinueBlockImpl,
    CONTINUE_EXPR to ::PsiPerlContinueExprImpl,
    CUSTOM_ATOM_EXPR to ::PsiPerlCustomAtomExprImpl,
    DEFAULT_COMPOUND to ::PsiPerlDefaultCompoundImpl,
    DEFINED_EXPR to ::PsiPerlDefinedExprImpl,
    DELETE_EXPR to ::PsiPerlDeleteExprImpl,
    DEREF_EXPR to ::PsiPerlDerefExprImpl,
    DO_BLOCK_EXPR to ::PsiPerlDoBlockExprImpl,
    EACH_EXPR to ::PsiPerlEachExprImpl,
    EQUAL_EXPR to ::PsiPerlEqualExprImpl,
    ESC_CHAR to ::PsiPerlEscCharImpl,
    EVAL_EXPR to ::PsiPerlEvalExprImpl,
    EXCEPT_EXPR to ::PsiPerlExceptExprImpl,
    EXIT_EXPR to ::PsiPerlExitExprImpl,
    EXPR to ::PerlCompositeElementImpl,
    FILE_GLOB_EXPR to ::PsiPerlFileGlobExprImpl,
    FILE_READ_EXPR to ::PsiPerlFileReadExprImpl,
    FINALLY_EXPR to ::PsiPerlFinallyExprImpl,
    FLIPFLOP_EXPR to ::PsiPerlFlipflopExprImpl,
    FOREACH_COMPOUND to ::PsiPerlForeachCompoundImpl,
    FOREACH_ITERATOR to ::PsiPerlForeachIteratorImpl,
    FORMAT_DEFINITION to ::PsiPerlFormatDefinitionImpl,
    FOR_COMPOUND to ::PsiPerlForCompoundImpl,
    FOR_CONDITION to ::PsiPerlForConditionImpl,
    FOR_INIT to ::PsiPerlForInitImpl,
    FOR_MUTATOR to ::PsiPerlForMutatorImpl,
    FOR_OR_FOREACH to ::PerlCompositeElementImpl,
    FOR_STATEMENT_MODIFIER to ::PsiPerlForStatementModifierImpl,
    FUN_EXPR to ::PsiPerlFunExprImpl,
    GIVEN_COMPOUND to ::PsiPerlGivenCompoundImpl,
    GLOB_CAST_EXPR to ::PsiPerlGlobCastExprImpl,
    GLOB_SLOT to ::PsiPerlGlobSlotImpl,
    GOTO_EXPR to ::PsiPerlGotoExprImpl,
    GREP_EXPR to ::PsiPerlGrepExprImpl,
    HASHREF_TYPE to ::PsiPerlHashrefTypeImpl,
    HASH_ARRAY_SLICE to ::PsiPerlHashArraySliceImpl,
    HASH_CAST_EXPR to ::PsiPerlHashCastExprImpl,
    HASH_ELEMENT to ::PsiPerlHashElementImpl,
    HASH_HASH_SLICE to ::PsiPerlHashHashSliceImpl,
    HASH_INDEX to ::PsiPerlHashIndexImpl,
    HASH_SLICE to ::PsiPerlHashSliceImpl,
    HASH_VARIABLE to ::PsiPerlHashVariableImpl,
    HEREDOC to ::PerlHeredocElementImpl,
    HEREDOC_OPENER to ::PsiPerlHeredocOpenerImpl,
    HEREDOC_QQ to ::PerlHeredocElementImpl,
    HEREDOC_QX to ::PerlHeredocElementImpl,
    HEX_CHAR to ::PsiPerlHexCharImpl,
    IF_COMPOUND to ::PsiPerlIfCompoundImpl,
    IF_STATEMENT_MODIFIER to ::PsiPerlIfStatementModifierImpl,
    ISA_EXPR to ::PsiPerlIsaExprImpl,
    KEYS_EXPR to ::PsiPerlKeysExprImpl,
    LABEL_DECLARATION to ::PsiPerlLabelDeclarationImpl,
    LABEL_EXPR to ::PsiPerlLabelExprImpl,
    LAST_EXPR to ::PsiPerlLastExprImpl,
    LP_AND_EXPR to ::PsiPerlLpAndExprImpl,
    LP_NOT_EXPR to ::PsiPerlLpNotExprImpl,
    LP_OR_XOR_EXPR to ::PsiPerlLpOrXorExprImpl,
    MAP_EXPR to ::PsiPerlMapExprImpl,
    MATCH_REGEX to ::PsiPerlMatchRegexImpl,
    METHOD to ::PsiPerlMethodImpl,
    METHOD_EXPR to ::PsiPerlMethodExprImpl,
    METHOD_SIGNATURE_INVOCANT to ::PsiPerlMethodSignatureInvocantImpl,
    MOOSE_STATEMENT_AFTER to ::PerlMooseAfterStatementImpl,
    MOOSE_STATEMENT_AROUND to ::PerlMooseAroundStatementImpl,
    MOOSE_STATEMENT_BEFORE to ::PerlMooseBeforeStatementImpl,
    MOOSE_STATEMENT_EXTENDS to ::PerlMooseExtendsStatementImpl,
    MOOSE_STATEMENT_META to ::PerlMooseMetaStatementImpl,
    MOOSE_STATEMENT_WITH to ::PerlMooseWithStatementImpl,
    MUL_EXPR to ::PsiPerlMulExprImpl,
    NAMED_BLOCK to ::PsiPerlNamedBlockImpl,
    NAMESPACE_CONTENT to ::PsiPerlNamespaceContentImpl,
    NEXT_EXPR to ::PsiPerlNextExprImpl,
    NUMBER_CONSTANT to ::PsiPerlNumberConstantImpl,
    NYI_STATEMENT to ::PsiPerlNyiStatementImpl,
    OCT_CHAR to ::PsiPerlOctCharImpl,
    OR_EXPR to ::PsiPerlOrExprImpl,
    OTHERWISE_EXPR to ::PsiPerlOtherwiseExprImpl,
    PACKAGE_EXPR to ::PsiPerlPackageExprImpl,
    PARENTHESISED_CALL_ARGUMENTS to ::PsiPerlParenthesisedCallArgumentsImpl,
    PARENTHESISED_EXPR to ::PsiPerlParenthesisedExprImpl,
    PARSABLE_STRING_USE_VARS to ::PerlCompositeElementImpl,
    PERL_HANDLE_EXPR to ::PsiPerlPerlHandleExprImpl,
    PERL_REGEX to ::PsiPerlPerlRegexImpl,
    PERL_REGEX_MODIFIERS to ::PsiPerlPerlRegexModifiersImpl,
    POST_DEREF_ARRAY_SLICE_EXPR to ::PsiPerlPostDerefArraySliceExprImpl,
    POST_DEREF_EXPR to ::PsiPerlPostDerefExprImpl,
    POST_DEREF_GLOB_EXPR to ::PsiPerlPostDerefGlobExprImpl,
    POST_DEREF_HASH_SLICE_EXPR to ::PsiPerlPostDerefHashSliceExprImpl,
    POW_EXPR to ::PsiPerlPowExprImpl,
    PREFIX_UNARY_EXPR to ::PsiPerlPrefixUnaryExprImpl,
    PREF_PP_EXPR to ::PsiPerlPrefPpExprImpl,
    PRINT_EXPR to ::PsiPerlPrintExprImpl,
    REDO_EXPR to ::PsiPerlRedoExprImpl,
    REF_EXPR to ::PsiPerlRefExprImpl,
    REGEX_EXPR to ::PsiPerlRegexExprImpl,
    REGEX_REPLACEMENT to ::PsiPerlRegexReplacementImpl,
    REPLACEMENT_REGEX to ::PsiPerlReplacementRegexImpl,
    RETURN_EXPR to ::PsiPerlReturnExprImpl,
    SCALAR_CALL to ::PsiPerlScalarCallImpl,
    SCALAR_CAST_EXPR to ::PsiPerlScalarCastExprImpl,
    SCALAR_EXPR to ::PsiPerlScalarExprImpl,
    SCALAR_INDEX_CAST_EXPR to ::PsiPerlScalarIndexCastExprImpl,
    SCALAR_VARIABLE to ::PsiPerlScalarVariableImpl,
    SHIFT_EXPR to ::PsiPerlShiftExprImpl,
    SIGNATURE_CONTENT to ::PsiPerlSignatureContentImpl,
    SIGNATURE_ELEMENT to ::PsiPerlSignatureElementImpl,
    SORT_EXPR to ::PsiPerlSortExprImpl,
    SPLICE_EXPR to ::PsiPerlSpliceExprImpl,
    STATEMENT to ::PsiPerlStatementImpl,
    STATEMENT_MODIFIER to ::PerlCompositeElementImpl,
    STRING_BARE to ::PsiPerlStringBareImpl,
    STRING_DQ to ::PsiPerlStringDqImpl,
    STRING_LIST to ::PsiPerlStringListImpl,
    STRING_SQ to ::PsiPerlStringSqImpl,
    STRING_XQ to ::PsiPerlStringXqImpl,
    SUB_EXPR to ::PsiPerlSubExprImpl,
    SUB_SIGNATURE_ELEMENT_IGNORE to ::PsiPerlSubSignatureElementIgnoreImpl,
    SUFF_PP_EXPR to ::PsiPerlSuffPpExprImpl,
    SWITCH_COMPOUND to ::PsiPerlSwitchCompoundImpl,
    SWITCH_CONDITION to ::PsiPerlSwitchConditionImpl,
    TAG_SCALAR to ::PsiPerlTagScalarImpl,
    TERNARY_EXPR to ::PsiPerlTernaryExprImpl,
    TRYCATCH_COMPOUND to ::PsiPerlTrycatchCompoundImpl,
    TRYCATCH_EXPR to ::PsiPerlTrycatchExprImpl,
    TRY_EXPR to ::PsiPerlTryExprImpl,
    TR_MODIFIERS to ::PsiPerlTrModifiersImpl,
    TR_REGEX to ::PsiPerlTrRegexImpl,
    TR_REPLACEMENTLIST to ::PsiPerlTrReplacementlistImpl,
    TR_SEARCHLIST to ::PsiPerlTrSearchlistImpl,
    TYPE_CONSTRAINTS to ::PsiPerlTypeConstraintsImpl,
    TYPE_SPECIFIER to ::PsiPerlTypeSpecifierImpl,
    UNCONDITIONAL_BLOCK to ::PsiPerlUnconditionalBlockImpl,
    UNDEF_EXPR to ::PsiPerlUndefExprImpl,
    UNICODE_CHAR to ::PsiPerlUnicodeCharImpl,
    UNLESS_COMPOUND to ::PsiPerlUnlessCompoundImpl,
    UNLESS_STATEMENT_MODIFIER to ::PsiPerlUnlessStatementModifierImpl,
    UNTIL_COMPOUND to ::PsiPerlUntilCompoundImpl,
    UNTIL_STATEMENT_MODIFIER to ::PsiPerlUntilStatementModifierImpl,
    VALUES_EXPR to ::PsiPerlValuesExprImpl,
    VARIABLE_DECLARATION_GLOBAL to ::PsiPerlVariableDeclarationGlobalImpl,
    VARIABLE_DECLARATION_LEXICAL to ::PsiPerlVariableDeclarationLexicalImpl,
    VARIABLE_DECLARATION_LOCAL to ::PsiPerlVariableDeclarationLocalImpl,
    WANTARRAY_EXPR to ::PsiPerlWantarrayExprImpl,
    WHEN_COMPOUND to ::PsiPerlWhenCompoundImpl,
    WHEN_STATEMENT_MODIFIER to ::PsiPerlWhenStatementModifierImpl,
    WHILE_COMPOUND to ::PsiPerlWhileCompoundImpl,
    WHILE_STATEMENT_MODIFIER to ::PsiPerlWhileStatementModifierImpl,
  )

  @JvmStatic
  fun create(elementType: IElementType, node: ASTNode): PsiElement =
    (elementType as? PsiElementProvider)?.getPsiElement(node) ?: factories[elementType]?.let { it(node) }
    ?: throw IllegalArgumentException("No factory registered for $elementType (${elementType.javaClass}")
}