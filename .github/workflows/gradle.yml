# This workflow will build a Java project with Gradle
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-gradle

name: Tests with Coverage & Sonarqube analysis

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
  workflow_dispatch:
    branches: [ "master" ]

jobs:
  test:
    name: Plugin tests
    runs-on: ubuntu-latest
    env:
      ORG_GRADLE_PROJECT_downloadIdeaSources: false
      WITH_COVERAGE: true
      COVERALLS_REPO_TOKEN: ${{ secrets.COVERALLS_REPO_TOKEN }}
      CI: GitHub
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      PERL_TEST_VERSION: 5.36.0
      TEST_PERL_MODULES: Mojolicious Devel::Camelcadedb Devel::Cover JSON App::Prove::Plugin::PassEnv TAP::Formatter::Camelcade Devel::NYTProf Perl::Tidy Perl::Critic B::Debug Types::Serialiser
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'corretto'
          java-version: 17
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      - name: Cache perlbrew and perl
        uses: actions/cache@v3
        env:
          cache-name: cache-perlbrew
          cache-version: 7
        with:
          path: |
            ~/perl5
            ~/.perlbrew
          key: ${{ runner.os }}-build-${{ env.cache-name }}-v${{ env.cache-version }}
      - name: Set up perlbrew
        run: |
          \curl -L https://install.perlbrew.pl | bash
      - name: Set up perl on perlbrew
        run: |
          source ~/perl5/perlbrew/etc/bashrc
          perlbrew install --verbose perl-${{ env.PERL_TEST_VERSION }} --notest --noman || true
          perlbrew clean
      - name: Create test lib and installing perl libs
        run: |
          source ~/perl5/perlbrew/etc/bashrc
          perlbrew exec -q --with perl-${{ env.PERL_TEST_VERSION }} cpan App::cpanminus
          perlbrew lib create perl-${{ env.PERL_TEST_VERSION }}@plugin_test || true
          perlbrew exec -q --with perl-${{ env.PERL_TEST_VERSION }}@plugin_test cpanm --notest ${{ env.TEST_PERL_MODULES }}
      - name: Cache plenv and installed perls
        uses: actions/cache@v3
        env:
          cache-name: cache-plenv
          cache-version: 0
        with:
          path: |
            ~/.plenv
          key: ${{ runner.os }}-build-${{ env.cache-name }}-v${{ env.cache-version }}
      - name: Set up plenv and perl
        env:
          PLENV_VERSION: ${{ env.PERL_TEST_VERSION }}
        run: |
          git clone --depth 1 https://github.com/tokuhirom/plenv.git ~/.plenv || git -C $(realpath ~/.plenv) pull
          git clone --depth 1 https://github.com/tokuhirom/Perl-Build.git ~/.plenv/plugins/perl-build/ || git -C $(realpath ~/.plenv/plugins/perl-build) pull
          ~/.plenv/bin/plenv install ${{ env.PLENV_VERSION }} --noman -j 8 || true
          ~/.plenv/bin/plenv install-cpanm
          ~/.plenv/bin/plenv exec cpanm --notest ${{ env.TEST_PERL_MODULES }}
      - name: Cache asdf and installed perls
        uses: actions/cache@v3
        env:
          cache-name: cache-asdf
          cache-version: 0
        with:
          path: |
            ~/.asdf
          key: ${{ runner.os }}-build-${{ env.cache-name }}-v${{ env.cache-version }}
      - name: Set up asdf and perl
        env:
          ASDF_PERL_VERSION: ${{ env.PERL_TEST_VERSION }}
        run: |
          git clone --depth 1 https://github.com/asdf-vm/asdf.git ~/.asdf --branch v0.11.2
          ~/.asdf/bin/asdf plugin add perl
          ~/.asdf/bin/asdf install perl ${{ env.PLENV_VERSION }} --noman -j 8 || true
          ~/.asdf/bin/asdf exec cpan install App::cpanminus
          ~/.asdf/bin/asdf exec cpanm --notest  ${{ env.TEST_PERL_MODULES }}
      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache gradle data
        uses: actions/cache@v3
        env:
          cache-name: cache-gradle
          cache-version: 1
        with:
          path: |
            ~/.gradle/wrapper
            ~/.gradle/caches
            !~/.gradle/caches/modules-2/modules-2.lock
            !~/.gradle/caches/**/plugin-resolution
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/build.gradle') }}-${{ hashFiles('**gradle*.properties') }}-${{ env.cache-version }}
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
      - name: Pre-pull test images
        run: |
          docker --version
          docker pull hurricup/camelcade-test:perl5-${{ env.PERL_TEST_VERSION }}
      - name: Test with Gradle
        env:
          PERL_MM_USE_DEFAULT: 1
        run: |
          java --version
          ./gradlew test -PincludeHeavy=1 -Pyoutrack.token=${{ secrets.YOUTRACK_TOKEN }}
      - name: Uploading test results artifact
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: |
            ./plugin/build/test-results/*
            ./plugin/build/reports/tests/*
            ./mason/mason2/build/test-results/*
            ./mason/mason2/build/reports/tests/*
            ./mason/htmlmason/build/test-results/*
            ./mason/htmlmason/build/reports/tests/*
            ./embedded/build/test-results/*
            ./embedded/build/reports/tests/*
            ./mojo/build/test-results/*
            ./mojo/build/reports/tests/*
            ./tt2/build/test-results/*
            ./tt2/build/reports/tests/*
      - name: Generating root coverage reports
        run: |
          ./gradlew jacocoRootReport
      - name: Uploading coverage results artifact
        uses: actions/upload-artifact@v3
        with:
          name: coverage
          path: |
            ./build/jacoco/test.exec
            ./build/reports/jacoco/jacocoRootReport/*
            ./plugin/build/jacoco/test.exec
            ./mason/mason2/build/jacoco/test.exec
            ./mason/htmlmason/build/jacoco/test.exec
            ./embedded/build/jacoco/test.exec
            ./mojo/build/jacoco/test.exec
            ./tt2/build/jacoco/test.exec
      - name: Upload coveralls data
        run: |
          ./gradlew coveralls
      - name: SonarCube analysis
        run: |
          ./gradlew sonarqube --info
      - name: Building plugins
        run: |
          ./gradlew buildPlugin
      - name: Uploading Perl plugin artifact
        uses: actions/upload-artifact@v3
        with:
          name: plugins
          path: ./plugin/build/distributions/*.zip
      - name: Uploading Embedded Perl plugin artifact
        uses: actions/upload-artifact@v3
        with:
          name: plugins
          path: ./embedded/build/distributions/*.zip
      - name: Uploading Mason Framework plugin artifact
        uses: actions/upload-artifact@v3
        with:
          name: plugins
          path: ./mason/core/build/distributions/*.zip
      - name: Uploading Mason2 plugin artifact
        uses: actions/upload-artifact@v3
        with:
          name: plugins
          path: ./mason/mason2/build/distributions/*.zip
      - name: Uploading HTML::Mason plugin artifact
        uses: actions/upload-artifact@v3
        with:
          name: plugins
          path: ./mason/htmlmason/build/distributions/*.zip
      - name: Uploading Mojolicious plugin artifact
        uses: actions/upload-artifact@v3
        with:
          name: plugins
          path: ./mojo/build/distributions/*.zip
      - name: Uploading Template Toolkit plugin artifact
        uses: actions/upload-artifact@v3
        with:
          name: plugins
          path: ./tt2/build/distributions/*.zip
