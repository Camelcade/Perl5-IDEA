/* The following code was generated by JFlex 1.7.0-1 tweaked for IntelliJ platform */

package com.perl5.lang.htmlmason.lexer;

import com.intellij.psi.TokenType;
import com.intellij.psi.tree.IElementType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-1
 * from the specification file <tt>/home/hurricup/Projects/IDEA-Perl5/mason/htmlmason/grammar/HTMLMason.flex</tt>
 */
public class HTMLMasonLexer extends HTMLMasonBaseLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int NON_CLEAR_LINE = 2;
  public static final int CHECK_SPACE_CLEAR_LINE = 4;
  public static final int CHECK_SPACE = 6;
  public static final int PARAMETRIZED_TAG = 8;
  public static final int PERL_LINE = 10;
  public static final int PERL_EXPR = 12;
  public static final int PERL_EXPR_FILTER = 14;
  public static final int SELECT_OPEN_TAG = 16;
  public static final int SELECT_CLOSE_TAG = 18;
  public static final int SELECT_OPEN_TAG_WITH_CUSTOM_TAGS = 20;
  public static final int SELECT_CLOSE_TAG_WITH_CUSTOM_TAGS = 22;
  public static final int CALL_OPENER = 24;
  public static final int CALL_PATH = 26;
  public static final int CALL_OPENER_DELEGATED = 28;
  public static final int CALL_OPENER_FILTERING = 30;
  public static final int CALL_OPENER_COMMON = 32;
  public static final int CALL_CLOSER = 34;
  public static final int CALL_CLOSER_NAME = 36;
  public static final int AFTER_PERL_LINE = 38;
  public static final int AFTER_PERL_BLOCK = 40;
  public static final int INIT = 42;
  public static final int CLEANUP = 44;
  public static final int ONCE = 46;
  public static final int SHARED = 48;
  public static final int PARAMETRIZED_OPENER = 50;
  public static final int FLAGS = 52;
  public static final int ATTR = 54;
  public static final int FILTER = 56;
  public static final int PERL = 58;
  public static final int PERL_WITH_CUSTOM_CLOSER = 60;
  public static final int ARGS = 62;
  public static final int ARGS_WITH_CUSTOM_CLOSER = 64;
  public static final int DOC = 66;
  public static final int NON_EMPTY_DOC = 68;
  public static final int TEXT = 70;
  public static final int NON_EMPTY_TEXT = 72;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 
    16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 23, 
    24, 24, 25, 25, 26, 26, 27, 27, 28, 28, 29, 29, 30, 30, 31, 31, 
    32, 32, 33, 33, 34, 34, 35, 35, 36, 36
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [12, 6, 3]
   * Total runtime size is 17344 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>9]<<6)|((ch>>3)&0x3f)]<<3)|(ch&0x7)];
  }

  /* The ZZ_CMAP_Z table has 2176 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1"+
    "\20\1\21\1\22\3\21\1\23\1\24\1\25\1\21\14\26\1\27\50\26\1\30\2\26\1\31\1\32"+
    "\1\33\1\34\25\26\1\35\20\21\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1"+
    "\47\1\50\1\21\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\21\1\26\1\60\1\61\5\21"+
    "\2\26\1\62\7\21\1\26\1\63\20\21\1\26\1\64\1\21\1\65\13\26\1\66\1\26\1\67\22"+
    "\21\1\70\5\21\1\71\11\21\1\72\1\73\1\74\1\75\1\21\1\76\2\21\1\77\3\21\1\100"+
    "\2\21\1\101\1\102\7\21\123\26\1\103\7\26\1\104\1\105\12\26\1\106\24\21\1\26"+
    "\1\107\u0582\21\1\110\u017f\21");

  /* The ZZ_CMAP_Y table has 4672 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\2\0\1\2\1\3\1\4\1\5\1\6\2\7\1\10\1\11\1\12\1\13\1\14\1\15\4\0\1\16"+
    "\1\17\1\16\2\7\1\20\3\7\1\20\71\7\1\21\1\7\1\22\1\0\1\23\1\24\2\0\16\4\1\25"+
    "\1\26\1\27\1\30\2\7\1\31\11\7\1\32\21\7\1\33\1\34\24\7\1\6\3\7\1\20\1\35\1"+
    "\6\4\7\1\0\1\36\4\4\1\37\1\40\1\0\3\7\2\41\3\0\1\4\1\42\5\7\1\43\3\4\1\44"+
    "\1\45\13\7\1\46\1\47\1\50\1\51\1\4\1\52\2\0\1\53\3\7\3\4\1\54\12\7\1\55\1"+
    "\4\1\56\1\0\1\4\1\57\3\7\1\43\1\60\1\16\2\7\1\55\1\61\1\62\1\63\2\0\3\7\1"+
    "\64\10\0\2\7\1\25\1\65\2\0\1\66\1\4\1\67\3\4\1\70\6\7\1\71\2\4\1\72\1\7\1"+
    "\73\1\4\1\6\1\7\1\74\1\75\1\76\2\7\1\77\1\100\1\101\1\47\1\102\1\103\1\104"+
    "\1\73\1\4\1\22\1\0\1\105\1\10\1\76\2\7\1\77\1\106\1\107\1\110\1\111\1\112"+
    "\1\113\1\114\1\4\1\115\1\0\1\105\1\32\1\31\2\7\1\77\1\116\1\101\1\37\1\117"+
    "\1\120\1\0\1\73\1\4\1\0\1\35\1\105\1\75\1\76\2\7\1\77\1\116\1\101\1\47\1\111"+
    "\1\114\1\104\1\73\1\4\1\35\1\0\1\121\1\122\1\123\1\124\1\125\1\122\1\7\1\126"+
    "\1\127\1\130\1\131\1\0\1\114\1\4\2\0\1\132\1\25\1\77\2\7\1\77\1\7\1\133\1"+
    "\134\1\130\1\135\1\41\1\73\1\4\2\0\1\74\1\25\1\77\2\7\1\77\1\136\1\101\1\134"+
    "\1\130\1\135\1\27\1\73\1\4\1\137\1\0\1\105\1\25\1\77\4\7\1\140\1\134\1\141"+
    "\1\142\1\143\1\73\1\4\1\0\1\144\1\145\1\7\1\20\1\144\2\7\1\31\1\146\1\20\1"+
    "\147\1\150\1\4\1\114\1\4\1\151\1\0\1\6\5\7\1\152\1\42\1\153\1\154\1\4\1\155"+
    "\4\0\1\156\1\157\1\160\1\6\1\161\1\162\1\152\1\163\1\164\1\165\1\4\1\166\4"+
    "\0\1\120\2\0\1\155\1\4\1\155\1\167\1\170\1\7\1\6\3\7\1\23\1\36\1\4\1\134\1"+
    "\171\1\4\1\36\3\4\1\172\1\173\7\0\5\7\1\43\1\4\1\174\1\4\1\155\1\55\1\175"+
    "\1\176\1\177\1\200\1\7\1\201\1\202\1\4\1\165\4\7\1\32\1\17\5\7\1\203\51\7"+
    "\1\123\1\20\1\123\5\7\1\123\4\7\1\123\1\20\1\123\1\7\1\20\7\7\1\123\10\7\1"+
    "\204\4\0\2\7\2\0\12\7\2\65\1\6\114\7\1\75\2\7\1\6\2\7\1\41\11\7\1\122\1\7"+
    "\1\120\1\7\1\25\1\205\1\0\2\7\1\205\1\0\2\7\1\206\1\0\1\7\1\25\1\207\1\0\6"+
    "\7\1\210\3\4\1\211\1\212\1\4\1\155\3\0\1\213\1\4\1\155\13\7\1\0\5\7\1\214"+
    "\10\7\1\65\1\0\3\7\1\20\1\4\1\215\1\4\1\215\1\114\1\4\3\7\1\65\1\23\1\0\5"+
    "\7\1\216\3\7\1\22\1\4\1\155\4\0\2\7\1\153\1\215\6\7\1\171\1\154\3\4\1\47\1"+
    "\4\1\155\1\4\1\155\1\143\1\0\1\4\1\217\10\0\1\220\5\7\1\210\1\4\1\220\1\216"+
    "\1\4\1\155\1\0\1\221\1\215\1\0\1\222\3\7\1\72\1\177\1\4\1\57\4\7\1\55\1\4"+
    "\1\215\1\0\4\7\1\210\2\4\1\0\1\4\1\223\1\4\1\57\3\7\1\65\1\7\1\120\10\0\1"+
    "\224\2\4\1\225\1\226\1\155\30\7\6\4\1\165\1\221\42\7\2\65\4\7\2\65\1\7\1\227"+
    "\3\7\1\65\6\7\1\25\1\164\1\230\1\23\1\231\1\216\1\7\1\23\1\230\1\23\5\0\1"+
    "\232\1\0\1\103\1\233\1\0\1\234\3\0\1\35\1\143\2\0\1\7\1\23\6\0\1\4\1\235\1"+
    "\236\1\4\1\233\1\0\1\237\1\144\1\146\1\240\1\24\1\241\1\7\1\242\1\243\1\244"+
    "\2\0\5\7\1\120\144\0\1\245\6\246\1\247\42\0\5\7\1\20\5\7\1\20\20\7\1\23\1"+
    "\250\1\251\1\0\4\7\1\32\1\17\7\7\1\143\1\0\1\103\2\7\1\20\1\0\10\20\4\4\5"+
    "\0\1\252\72\0\1\243\3\0\1\6\1\201\1\240\1\23\1\6\11\7\1\20\1\253\1\6\12\7"+
    "\1\203\1\243\4\7\1\65\1\6\12\7\1\20\2\0\3\7\1\41\6\0\170\7\1\65\11\0\72\7"+
    "\1\65\5\0\21\7\1\23\10\0\5\7\1\65\41\7\1\23\2\7\1\4\1\251\2\0\5\7\1\153\1"+
    "\254\1\255\3\7\1\55\12\7\1\155\3\0\1\143\1\7\1\144\14\7\1\76\3\7\1\20\1\7"+
    "\7\0\1\143\1\7\1\256\1\257\2\7\1\43\3\0\6\7\1\216\1\0\1\57\5\7\1\210\1\4\1"+
    "\165\1\0\1\4\1\155\2\4\1\57\1\260\1\4\1\57\2\7\1\55\1\165\2\7\1\153\1\4\1"+
    "\215\1\0\3\7\1\23\1\70\5\7\1\43\1\4\1\233\1\143\1\4\1\155\1\261\1\7\1\4\1"+
    "\262\5\7\1\72\1\154\1\0\1\257\1\263\1\4\1\155\2\7\1\20\1\264\6\7\1\176\1\265"+
    "\1\214\2\0\1\266\1\7\1\43\1\267\1\0\3\270\1\0\2\20\5\7\1\203\1\65\1\0\16\7"+
    "\1\43\1\271\1\4\1\155\64\7\1\216\1\0\2\7\1\20\1\272\5\7\1\216\40\0\55\7\1"+
    "\65\15\7\1\22\4\0\1\20\1\0\1\272\1\273\1\7\1\77\1\20\1\164\1\274\15\7\1\22"+
    "\3\0\1\272\20\7\1\275\1\276\32\7\1\65\2\0\10\7\1\144\6\7\5\0\1\7\1\277\2\4"+
    "\2\0\2\4\1\300\2\0\1\301\4\0\1\302\1\303\17\7\1\23\2\0\1\4\1\155\1\6\2\7\1"+
    "\304\1\6\2\7\1\41\1\305\6\7\1\55\3\7\1\20\3\144\1\306\4\0\1\7\1\136\2\7\1"+
    "\20\2\7\1\307\1\7\1\65\1\7\1\65\4\0\17\7\1\41\10\0\6\7\1\23\20\0\1\310\20"+
    "\0\3\7\1\23\6\7\1\120\1\0\1\233\3\0\4\7\2\0\3\7\1\41\4\7\1\55\1\42\3\7\1\65"+
    "\4\7\1\216\1\7\1\240\5\0\23\7\1\65\1\4\1\155\4\7\1\216\4\7\1\216\5\7\1\0\6"+
    "\7\1\216\23\0\46\7\1\20\1\0\2\7\1\65\1\0\1\7\23\0\1\65\1\77\4\7\1\32\1\311"+
    "\2\7\1\65\1\0\2\7\1\20\1\0\3\7\1\20\10\0\2\7\1\312\1\0\2\7\1\65\1\0\3\7\1"+
    "\22\10\0\7\7\1\305\10\0\1\313\1\66\1\136\1\6\2\7\1\216\1\110\4\0\3\7\1\23"+
    "\3\7\1\23\4\0\1\7\1\6\2\7\1\314\3\0\6\7\1\65\1\0\2\7\1\65\1\0\2\7\1\41\1\0"+
    "\2\7\1\22\15\0\11\7\1\120\6\0\6\7\1\41\1\0\6\7\1\41\41\0\1\222\6\7\1\4\1\154"+
    "\3\0\1\114\1\4\1\0\1\103\1\222\5\7\1\4\1\42\2\0\3\7\1\120\1\4\1\155\1\222"+
    "\3\7\1\153\1\4\1\134\1\4\2\0\4\7\1\315\1\0\1\222\5\7\1\43\1\4\1\316\1\317"+
    "\1\4\1\320\4\0\2\7\1\31\2\7\1\210\1\4\1\173\10\0\1\20\1\241\1\7\1\32\1\7\1"+
    "\120\5\7\1\153\1\4\1\42\1\4\1\155\1\132\1\75\1\76\2\7\1\77\1\116\1\101\1\47"+
    "\1\111\1\131\1\243\1\73\2\172\21\0\6\7\1\171\1\4\1\174\1\41\1\4\1\155\4\0"+
    "\6\7\2\4\1\321\1\0\1\4\1\155\24\0\5\7\1\153\1\165\1\4\1\233\2\0\1\263\4\0"+
    "\6\7\2\4\1\322\1\0\1\4\1\155\4\0\5\7\1\43\1\4\1\0\1\4\1\155\6\0\3\7\1\323"+
    "\1\4\1\215\1\4\1\155\54\0\10\7\1\4\1\155\1\0\1\143\70\0\7\7\1\120\40\0\1\7"+
    "\1\77\3\7\1\153\1\154\1\4\1\120\1\0\1\4\1\155\2\0\1\144\3\7\1\324\2\4\1\36"+
    "\1\154\51\0\63\7\1\22\14\0\15\7\1\20\2\0\30\7\1\216\27\0\5\7\1\20\72\0\10"+
    "\7\1\20\67\0\7\7\1\120\3\7\1\20\1\4\1\155\14\0\3\7\1\65\1\172\1\0\6\7\1\154"+
    "\1\0\1\216\1\0\1\4\1\155\1\272\2\7\1\243\2\7\56\0\10\7\1\23\1\0\1\72\4\4\1"+
    "\154\1\0\1\103\1\222\1\7\10\0\1\120\3\0\75\7\1\23\2\0\36\7\1\41\41\0\1\22"+
    "\77\0\15\7\1\41\1\7\1\23\1\7\1\120\1\7\1\325\130\0\1\301\1\326\1\42\1\221"+
    "\1\327\1\215\3\0\1\330\22\0\1\317\67\0\12\7\1\25\10\7\1\25\1\331\1\332\1\7"+
    "\1\333\1\136\7\7\1\32\1\334\2\25\3\7\1\335\1\164\1\144\1\77\51\7\1\65\3\7"+
    "\1\77\2\7\1\203\3\7\1\203\2\7\1\25\3\7\1\25\2\7\1\20\3\7\1\20\3\7\1\77\3\7"+
    "\1\77\2\7\1\203\1\336\14\4\1\154\1\221\5\4\1\172\1\310\1\0\1\234\2\0\1\221"+
    "\1\36\1\4\52\0\1\154\2\4\1\337\1\340\1\42\72\0\30\7\1\23\1\0\1\154\5\0\10"+
    "\7\1\210\1\42\1\4\1\155\24\0\1\136\3\7\1\156\1\6\1\203\1\341\1\237\1\342\1"+
    "\156\1\227\1\156\2\203\1\113\1\7\1\31\1\7\1\216\1\343\1\31\1\7\1\216\116\0"+
    "\3\246\1\247\3\246\1\247\3\246\1\247\16\0\32\7\1\20\5\0\106\7\1\23\1\0\33"+
    "\7\1\65\120\7\1\22\53\0\3\7\1\65\134\0\36\4\2\0");

  /* The ZZ_CMAP_A table has 1824 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\3\1\6\1\4\1\5\1\7\2\0\1\3\4\0\1\10\1\14\5\0\1\20\1\17\1\16\1\13\12"+
    "\2\2\0\1\12\1\0\1\11\2\0\22\1\4\0\1\1\1\0\1\34\1\1\1\32\1\21\1\22\1\23\1\41"+
    "\1\26\1\30\2\1\1\33\1\24\1\31\1\27\1\36\1\1\1\40\1\37\1\25\1\35\2\1\1\42\2"+
    "\1\1\0\1\15\10\0\1\4\4\0\1\1\12\0\1\1\2\0\7\1\1\0\2\1\4\0\4\1\6\0\5\1\7\0"+
    "\1\1\1\0\1\1\1\0\5\1\1\0\2\1\2\0\1\16\3\1\1\0\1\1\6\0\1\1\1\0\3\1\1\0\1\1"+
    "\1\0\4\1\1\0\13\1\1\0\3\1\1\0\5\2\2\16\6\1\1\0\1\1\7\0\15\2\1\0\1\2\1\0\2"+
    "\2\1\0\2\2\1\0\1\2\3\1\5\0\3\2\5\0\3\1\7\2\4\0\2\1\1\2\13\1\1\0\1\1\7\2\2"+
    "\0\6\2\2\1\2\2\1\0\4\2\2\1\2\2\3\1\2\0\2\1\1\2\6\1\3\2\2\0\11\1\3\2\1\1\6"+
    "\0\2\2\6\1\4\2\2\1\2\0\2\2\1\1\11\2\1\1\3\2\1\1\5\2\2\0\1\1\3\2\4\0\6\1\6"+
    "\0\6\2\1\0\11\2\6\1\3\2\1\1\2\2\1\1\7\2\2\1\2\2\2\0\2\2\1\1\3\2\1\0\10\1\2"+
    "\0\2\1\2\0\6\1\1\0\7\1\1\0\1\1\3\0\4\1\2\0\1\2\1\1\3\2\2\0\3\2\1\1\10\0\1"+
    "\2\4\0\2\1\1\0\1\1\1\0\3\2\1\0\4\1\1\0\2\1\1\0\2\1\1\0\2\1\2\0\1\2\1\0\5\2"+
    "\4\0\2\2\2\0\3\2\3\0\1\2\7\0\4\1\1\0\1\1\7\0\4\2\3\1\1\2\2\0\1\1\1\0\2\1\1"+
    "\0\3\1\2\2\1\0\3\2\2\0\1\1\11\0\1\2\1\1\1\0\6\1\3\0\3\1\1\0\4\1\3\0\2\1\1"+
    "\0\1\1\1\0\2\1\3\0\2\1\3\0\2\1\4\0\5\2\3\0\3\2\1\0\4\2\2\0\1\1\6\0\5\2\1\0"+
    "\5\1\3\0\1\1\7\2\1\0\2\2\5\0\2\2\1\0\4\1\1\0\3\1\1\0\2\1\5\0\3\1\2\0\1\1\3"+
    "\2\1\0\4\2\1\1\5\0\3\1\1\2\7\0\1\1\2\0\6\1\2\0\2\2\1\0\7\1\1\0\1\1\4\0\1\2"+
    "\4\0\6\2\1\0\1\2\3\0\2\2\4\0\1\1\1\2\1\1\5\2\7\1\10\2\1\0\2\2\7\0\2\1\1\0"+
    "\1\1\2\0\2\1\1\0\1\1\2\0\1\1\6\0\4\1\1\0\3\1\1\0\1\1\1\0\1\1\2\0\2\1\1\0\3"+
    "\1\2\2\1\0\2\2\1\1\2\0\5\1\1\0\1\1\1\0\6\2\2\0\2\2\2\0\4\1\5\0\1\2\1\0\1\2"+
    "\1\0\1\2\4\0\2\2\5\1\10\2\11\0\1\2\1\0\7\2\1\1\2\2\4\1\3\2\1\1\3\2\2\1\7\2"+
    "\3\1\4\2\5\1\14\2\1\1\1\2\3\1\1\0\7\1\2\0\3\2\2\1\3\2\3\0\2\1\2\2\4\0\1\1"+
    "\1\0\2\2\4\0\4\1\10\2\3\0\1\1\4\0\1\1\1\2\5\0\3\2\2\0\1\1\1\2\1\1\5\0\4\2"+
    "\4\0\4\1\4\0\6\2\1\16\1\0\5\2\3\1\3\0\10\2\5\1\2\2\3\0\3\1\3\2\1\0\5\2\4\1"+
    "\1\2\4\1\3\2\2\1\2\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1\2\0\3\1\1\0\6\1\2\0\2\1\2"+
    "\4\6\0\1\2\13\0\1\2\3\0\5\2\4\16\1\2\3\16\3\2\2\0\1\1\4\0\1\1\1\0\5\1\2\0"+
    "\1\1\1\0\4\1\1\0\3\1\2\0\4\1\5\0\5\1\4\0\1\1\7\0\14\16\11\0\4\1\3\2\2\1\13"+
    "\0\1\16\1\0\2\2\2\0\3\1\3\16\1\0\12\2\1\0\3\1\1\2\3\1\1\2\4\1\1\2\4\1\3\0"+
    "\1\1\1\0\1\1\2\0\5\1\1\2\2\1\2\2\5\1\1\0\4\1\2\2\4\0\1\1\3\2\2\1\1\2\5\1\2"+
    "\2\3\0\3\1\4\0\3\1\2\2\2\0\6\1\1\0\3\2\1\0\2\2\5\0\5\1\5\0\1\1\1\2\3\1\1\0"+
    "\2\1\1\0\10\1\6\16\6\1\2\16\7\0\2\2\10\0\3\2\1\16\1\1\1\16\1\1\1\16\1\0\1"+
    "\16\1\1\1\16\1\1\1\16\1\1\1\16\1\1\1\16\4\1\4\0\1\2\6\0\2\1\2\0\3\1\3\0\3"+
    "\1\1\0\2\1\1\0\1\1\5\0\1\2\2\0\1\1\3\0\1\1\2\0\4\1\1\0\2\1\2\0\1\1\3\2\1\0"+
    "\2\2\1\0\5\1\2\2\1\0\3\1\1\2\2\0\1\1\1\0\1\2\4\1\5\0\3\2\3\0\2\2\1\1\1\0\1"+
    "\1\3\0\4\2\2\1\1\0\1\1\1\2\3\0\1\1\3\0\2\1\3\0\3\2\2\0\6\2\2\1\3\0\2\2\1\0"+
    "\2\2\3\0\6\2\2\0\3\2\2\0\4\2\4\0\1\1\2\0\2\1\2\0\4\1\1\0\4\1\1\0\1\1\1\0\6"+
    "\1\2\0\5\1\1\0\4\1\1\0\4\1\2\0\3\2\2\0\7\2\1\0\2\2\1\0\2\2\1\0\1\1\1\0\1\1"+
    "\5\0\1\1\1\0\1\1\1\0\3\1\1\0\3\1\1\0\3\1");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\45\0\1\1\1\2\2\3\1\4\2\1\1\5\1\6"+
    "\1\5\1\7\1\10\2\11\2\10\1\12\1\13\1\7"+
    "\1\14\13\15\3\16\13\17\3\16\2\20\3\21\1\22"+
    "\1\23\1\10\1\20\1\24\1\25\1\24\1\26\1\27"+
    "\3\21\1\30\1\31\1\32\1\33\1\34\4\10\1\35"+
    "\1\36\2\37\1\10\2\40\6\10\2\41\2\21\2\42"+
    "\1\21\1\43\1\0\1\44\1\45\1\0\1\45\1\46"+
    "\21\0\1\47\15\17\1\0\1\50\2\0\1\51\1\0"+
    "\1\52\1\53\17\0\1\54\1\55\1\56\2\0\1\57"+
    "\16\0\1\57\14\17\21\0\1\60\1\61\13\0\1\62"+
    "\1\0\13\17\23\0\1\63\1\64\1\65\1\0\1\66"+
    "\1\67\1\70\2\0\5\17\11\0\1\71\1\0\1\72"+
    "\5\0\1\73\1\74\3\0\1\17\1\74\2\17\16\0"+
    "\1\75\1\0\1\76\1\77\1\17\11\0\1\100\1\101"+
    "\2\0\1\102\1\103\1\0\1\104\2\0\1\105\1\0"+
    "\1\106\1\107\1\110\1\111\2\0\1\112\2\0\1\113"+
    "\1\114\1\115";

  private static int [] zzUnpackAction() {
    int [] result = new int[379];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\43\0\106\0\151\0\214\0\257\0\322\0\365"+
    "\0\u0118\0\u013b\0\u015e\0\u0181\0\u01a4\0\u01c7\0\u01ea\0\u020d"+
    "\0\u0230\0\u0253\0\u0276\0\u0299\0\u02bc\0\u02df\0\u0302\0\u0325"+
    "\0\u0348\0\u036b\0\u038e\0\u03b1\0\u03d4\0\u03f7\0\u041a\0\u043d"+
    "\0\u0460\0\u0483\0\u04a6\0\u04c9\0\u04ec\0\u050f\0\u0532\0\u0555"+
    "\0\u0532\0\u0578\0\u059b\0\u0578\0\u0578\0\u0578\0\u05be\0\u0578"+
    "\0\u0578\0\u0578\0\u05e1\0\u0604\0\u0627\0\u064a\0\u066d\0\u0604"+
    "\0\u0578\0\u0578\0\u0690\0\u06b3\0\u06d6\0\u06f9\0\u071c\0\u073f"+
    "\0\u0762\0\u0785\0\u07a8\0\u07cb\0\u0578\0\u07ee\0\u0811\0\u0834"+
    "\0\u0857\0\u087a\0\u089d\0\u08c0\0\u08e3\0\u0906\0\u0929\0\u094c"+
    "\0\u096f\0\u0992\0\u09b5\0\u09d8\0\u09fb\0\u0578\0\u0a1e\0\u0a41"+
    "\0\u0a64\0\u0a87\0\u0aaa\0\u0578\0\u0acd\0\u0af0\0\u0578\0\u0578"+
    "\0\u0acd\0\u0578\0\u0578\0\u0b13\0\u0b36\0\u0276\0\u0578\0\u0578"+
    "\0\u0b59\0\u0b59\0\u0578\0\u0b7c\0\u0b9f\0\u0bc2\0\u0be5\0\u0c08"+
    "\0\u0578\0\u0578\0\u0c2b\0\u0c4e\0\u0578\0\u0c71\0\u0c94\0\u0cb7"+
    "\0\u0cda\0\u0cfd\0\u0d20\0\u0d43\0\u0578\0\u0d66\0\u0d89\0\u0dac"+
    "\0\u0578\0\u0dcf\0\u0df2\0\u0578\0\u0e15\0\u0e38\0\u0578\0\u0e5b"+
    "\0\u0e7e\0\u0578\0\u0ea1\0\u0627\0\u0ec4\0\u0ee7\0\u0f0a\0\u0f2d"+
    "\0\u0f50\0\u0f73\0\u0f96\0\u0fb9\0\u0fdc\0\u0fff\0\u1022\0\u1045"+
    "\0\u1068\0\u108b\0\u10ae\0\u0578\0\u10d1\0\u10f4\0\u1117\0\u113a"+
    "\0\u115d\0\u1180\0\u11a3\0\u11c6\0\u11e9\0\u120c\0\u122f\0\u1252"+
    "\0\u1275\0\u09b5\0\u0578\0\u1298\0\u12bb\0\u0578\0\u0aaa\0\u0578"+
    "\0\u0578\0\u12de\0\u1301\0\u1324\0\u1347\0\u136a\0\u138d\0\u13b0"+
    "\0\u13d3\0\u13f6\0\u1419\0\u143c\0\u145f\0\u1482\0\u14a5\0\u14c8"+
    "\0\u0578\0\u0578\0\u0578\0\u14eb\0\u150e\0\u0578\0\u1531\0\u1554"+
    "\0\u1577\0\u159a\0\u15bd\0\u15e0\0\u1603\0\u1626\0\u1649\0\u166c"+
    "\0\u168f\0\u16b2\0\u16d5\0\u16f8\0\u0834\0\u171b\0\u173e\0\u1761"+
    "\0\u1784\0\u17a7\0\u17ca\0\u17ed\0\u1810\0\u1833\0\u1856\0\u1879"+
    "\0\u189c\0\u18bf\0\u18e2\0\u1905\0\u1928\0\u194b\0\u196e\0\u1991"+
    "\0\u19b4\0\u19d7\0\u19fa\0\u1a1d\0\u1a40\0\u1a63\0\u1a86\0\u1aa9"+
    "\0\u1acc\0\u1aef\0\u0578\0\u0578\0\u1b12\0\u1b35\0\u1b58\0\u1b7b"+
    "\0\u1b9e\0\u1bc1\0\u1be4\0\u1c07\0\u1c2a\0\u1c4d\0\u1c70\0\u0578"+
    "\0\u1c93\0\u1cb6\0\u1cd9\0\u1cfc\0\u1d1f\0\u1d42\0\u1d65\0\u1d88"+
    "\0\u1dab\0\u1dce\0\u1df1\0\u1e14\0\u1e37\0\u1e5a\0\u1e7d\0\u1ea0"+
    "\0\u1ec3\0\u1ee6\0\u1f09\0\u1f2c\0\u1f4f\0\u1f72\0\u1f95\0\u1fb8"+
    "\0\u1fdb\0\u1ffe\0\u2021\0\u2044\0\u2067\0\u208a\0\u20ad\0\u0578"+
    "\0\u0578\0\u0578\0\u20d0\0\u0578\0\u0578\0\u0578\0\u20f3\0\u2116"+
    "\0\u2139\0\u215c\0\u217f\0\u21a2\0\u21c5\0\u21e8\0\u220b\0\u222e"+
    "\0\u2251\0\u2274\0\u2297\0\u22ba\0\u22dd\0\u2300\0\u0578\0\u2323"+
    "\0\u0578\0\u2346\0\u2369\0\u238c\0\u23af\0\u23d2\0\u0578\0\u0578"+
    "\0\u23f5\0\u2418\0\u243b\0\u245e\0\u0834\0\u2481\0\u24a4\0\u24c7"+
    "\0\u24ea\0\u250d\0\u2530\0\u2553\0\u2576\0\u2599\0\u25bc\0\u25df"+
    "\0\u2602\0\u2625\0\u2648\0\u266b\0\u268e\0\u0578\0\u26b1\0\u0578"+
    "\0\u0578\0\u26d4\0\u26f7\0\u271a\0\u273d\0\u2760\0\u2783\0\u27a6"+
    "\0\u27c9\0\u27ec\0\u280f\0\u0578\0\u0578\0\u2832\0\u2855\0\u0578"+
    "\0\u0578\0\u2878\0\u0578\0\u289b\0\u28be\0\u0578\0\u28e1\0\u0578"+
    "\0\u0578\0\u0578\0\u0578\0\u2904\0\u2927\0\u0578\0\u294a\0\u296d"+
    "\0\u0578\0\u0578\0\u0578";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[379];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\3\46\1\47\1\50\3\51\1\52\1\46\1\53\33\46"+
    "\1\47\1\50\3\51\1\54\1\46\1\53\30\46\10\55"+
    "\1\56\1\55\1\57\42\55\1\57\30\55\43\60\4\61"+
    "\3\62\1\63\43\61\1\64\4\61\1\65\25\61\1\60"+
    "\1\66\1\60\5\67\1\70\7\60\1\71\22\66\21\72"+
    "\1\73\1\72\1\74\1\75\1\76\1\72\1\77\1\100"+
    "\1\72\1\101\1\72\1\102\1\72\1\103\1\104\3\72"+
    "\21\105\1\106\2\105\1\107\16\105\1\72\1\110\17\72"+
    "\1\111\1\110\1\112\1\113\1\114\1\110\1\115\1\116"+
    "\1\110\1\117\1\110\1\120\1\110\1\121\1\122\3\110"+
    "\1\105\1\123\17\105\1\124\2\123\1\125\16\123\14\126"+
    "\1\127\26\126\3\130\1\131\1\132\3\131\4\130\1\133"+
    "\3\130\1\134\22\130\14\61\1\135\26\61\14\126\1\136"+
    "\26\126\1\137\2\140\5\67\3\137\1\140\1\141\1\137"+
    "\1\140\2\137\22\140\3\142\5\67\1\142\1\143\31\142"+
    "\3\144\1\145\1\146\3\145\1\144\1\147\31\144\3\150"+
    "\1\151\4\152\33\150\3\153\1\151\4\152\33\153\12\61"+
    "\1\154\42\61\1\155\42\61\1\156\42\61\1\157\30\61"+
    "\1\60\2\160\5\67\1\60\1\161\4\60\2\160\1\60"+
    "\22\160\4\61\3\162\1\163\2\61\1\164\34\61\3\165"+
    "\1\166\2\61\1\167\42\61\1\170\42\61\1\171\42\61"+
    "\1\172\34\61\3\165\1\166\2\61\1\173\34\61\3\165"+
    "\1\166\2\61\1\174\30\61\12\175\1\176\30\175\12\177"+
    "\1\200\30\177\12\201\1\202\30\201\12\177\1\203\30\177"+
    "\3\46\1\0\1\46\4\0\1\46\1\0\30\46\3\0"+
    "\1\47\4\51\33\0\3\46\1\47\1\50\3\51\1\0"+
    "\1\46\1\0\30\46\53\0\1\204\2\0\1\205\1\206"+
    "\36\0\1\207\2\0\1\210\1\211\34\0\1\62\45\0"+
    "\1\212\32\0\1\213\1\0\5\214\11\0\22\213\1\0"+
    "\2\66\16\0\22\66\3\0\5\67\55\0\1\215\4\0"+
    "\1\216\43\0\1\217\2\0\1\220\31\0\1\221\42\0"+
    "\1\222\51\0\1\223\42\0\1\224\44\0\1\225\34\0"+
    "\1\226\12\0\1\227\24\0\1\230\46\0\1\231\36\0"+
    "\1\232\42\0\1\233\21\0\2\110\6\0\1\234\7\0"+
    "\22\110\1\0\2\110\6\0\1\234\7\0\1\110\1\235"+
    "\4\110\1\236\13\110\1\0\2\110\6\0\1\234\7\0"+
    "\7\110\1\237\2\110\1\240\7\110\1\0\2\110\6\0"+
    "\1\234\7\0\1\110\1\241\20\110\1\0\2\110\6\0"+
    "\1\234\7\0\1\110\1\242\20\110\1\0\2\110\6\0"+
    "\1\234\7\0\10\110\1\243\11\110\1\0\2\110\6\0"+
    "\1\234\7\0\10\110\1\244\11\110\1\0\2\110\6\0"+
    "\1\234\7\0\12\110\1\245\7\110\1\0\2\110\6\0"+
    "\1\234\7\0\4\110\1\246\12\110\1\247\2\110\1\0"+
    "\2\110\6\0\1\234\7\0\1\110\1\250\20\110\1\0"+
    "\2\110\6\0\1\234\7\0\5\110\1\251\14\110\1\0"+
    "\2\252\6\0\1\253\7\0\22\252\1\0\2\252\6\0"+
    "\1\253\7\0\1\252\1\254\20\252\1\0\2\252\6\0"+
    "\1\253\7\0\1\252\1\255\20\252\11\0\1\256\31\0"+
    "\3\130\1\0\1\130\3\0\4\130\1\0\3\130\1\0"+
    "\22\130\3\0\5\131\4\0\1\257\3\0\1\134\22\0"+
    "\3\130\1\131\1\132\3\131\4\130\1\257\3\130\1\134"+
    "\22\130\11\0\1\134\42\0\1\260\42\0\1\261\31\0"+
    "\3\144\1\0\1\144\3\0\1\144\1\0\31\144\3\0"+
    "\5\145\1\0\1\147\34\0\1\151\4\152\46\0\1\262"+
    "\42\0\1\263\42\0\1\264\42\0\1\265\30\0\2\160"+
    "\13\0\2\160\1\0\22\160\6\0\1\162\47\0\1\266"+
    "\35\0\1\165\47\0\1\267\42\0\1\270\42\0\1\271"+
    "\42\0\1\272\42\0\1\273\42\0\1\274\42\0\1\275"+
    "\27\0\12\177\1\0\30\177\13\0\1\276\42\0\1\277"+
    "\42\0\1\300\37\0\1\301\3\0\1\302\43\0\1\303"+
    "\35\0\1\207\3\0\1\207\43\0\1\207\26\0\2\213"+
    "\5\304\1\305\7\0\1\214\22\213\23\0\1\306\51\0"+
    "\1\307\43\0\1\310\43\0\1\311\33\0\1\312\57\0"+
    "\1\313\32\0\1\314\40\0\1\315\34\0\1\316\45\0"+
    "\1\317\56\0\1\320\41\0\1\321\36\0\1\322\31\0"+
    "\1\323\44\0\1\324\16\0\2\110\6\0\1\234\7\0"+
    "\2\110\1\325\17\110\1\0\2\110\6\0\1\234\7\0"+
    "\11\110\1\326\10\110\1\0\2\110\6\0\1\234\7\0"+
    "\12\110\1\327\7\110\1\0\2\110\6\0\1\234\7\0"+
    "\13\110\1\330\6\110\1\0\2\110\6\0\1\234\7\0"+
    "\4\110\1\331\15\110\1\0\2\110\6\0\1\234\7\0"+
    "\21\110\1\332\1\0\2\110\6\0\1\234\7\0\11\110"+
    "\1\333\10\110\1\0\2\110\6\0\1\234\7\0\7\110"+
    "\1\334\12\110\1\0\2\110\6\0\1\234\7\0\1\110"+
    "\1\335\20\110\1\0\2\110\6\0\1\234\7\0\4\110"+
    "\1\336\15\110\1\0\2\110\6\0\1\234\7\0\20\110"+
    "\1\337\1\110\1\0\2\110\6\0\1\234\7\0\17\110"+
    "\1\340\2\110\1\0\2\110\6\0\1\234\7\0\13\110"+
    "\1\341\6\110\1\0\2\252\6\0\1\253\7\0\2\252"+
    "\1\342\17\252\1\0\2\252\6\0\1\253\7\0\4\252"+
    "\1\343\15\252\10\0\1\344\42\0\1\345\42\0\1\346"+
    "\42\0\1\347\42\0\1\350\42\0\1\351\42\0\1\352"+
    "\42\0\1\353\42\0\1\354\42\0\1\355\42\0\1\356"+
    "\42\0\1\357\42\0\1\360\42\0\1\361\42\0\1\362"+
    "\35\0\5\304\1\305\43\0\1\363\42\0\1\364\56\0"+
    "\1\365\56\0\1\366\27\0\1\367\41\0\1\370\37\0"+
    "\1\371\45\0\1\372\51\0\1\373\46\0\1\374\41\0"+
    "\1\375\36\0\1\376\47\0\1\377\13\0\1\u0100\57\0"+
    "\1\u0101\15\0\2\110\6\0\1\364\7\0\22\110\1\0"+
    "\2\110\6\0\1\234\7\0\4\110\1\u0102\15\110\1\0"+
    "\2\110\6\0\1\234\7\0\20\110\1\u0103\1\110\1\0"+
    "\2\110\6\0\1\234\7\0\5\110\1\u0104\14\110\1\0"+
    "\2\110\6\0\1\234\7\0\4\110\1\u0105\15\110\1\0"+
    "\2\110\6\0\1\234\7\0\1\110\1\u0106\20\110\1\0"+
    "\2\110\6\0\1\234\7\0\4\110\1\u0107\15\110\1\0"+
    "\2\110\6\0\1\234\7\0\13\110\1\u0108\6\110\1\0"+
    "\2\110\6\0\1\234\7\0\17\110\1\u0109\2\110\1\0"+
    "\2\110\6\0\1\234\7\0\16\110\1\u010a\3\110\1\0"+
    "\2\110\6\0\1\234\7\0\12\110\1\u010b\7\110\1\0"+
    "\2\110\6\0\1\234\7\0\17\110\1\u010c\2\110\1\0"+
    "\2\252\6\0\1\u0100\7\0\22\252\1\0\2\252\6\0"+
    "\1\253\7\0\5\252\1\u010d\14\252\30\0\1\u010e\44\0"+
    "\1\u010f\37\0\1\u0110\52\0\1\u0111\26\0\1\u0112\53\0"+
    "\1\u0113\31\0\1\u0114\55\0\1\u0115\5\0\1\u0116\17\0"+
    "\22\u0116\34\0\1\u0117\7\0\1\u0118\17\0\22\u0118\21\0"+
    "\1\u0119\42\0\1\u011a\46\0\1\u011b\42\0\1\u011c\37\0"+
    "\1\u011d\57\0\1\u011e\32\0\1\u011f\24\0\1\u0120\42\0"+
    "\1\u0121\42\0\1\u0122\62\0\1\u0123\22\0\1\u0124\42\0"+
    "\1\u0125\42\0\1\u0126\53\0\1\u0127\47\0\1\u0128\14\0"+
    "\2\110\6\0\1\234\7\0\1\110\1\u0129\20\110\1\0"+
    "\2\110\6\0\1\234\7\0\16\110\1\u012a\3\110\1\0"+
    "\2\110\6\0\1\234\7\0\6\110\1\u012b\13\110\1\0"+
    "\2\110\6\0\1\u0120\7\0\22\110\1\0\2\110\6\0"+
    "\1\u0121\7\0\22\110\1\0\2\110\6\0\1\u0122\7\0"+
    "\22\110\1\0\2\110\6\0\1\234\7\0\10\110\1\u012c"+
    "\11\110\1\0\2\110\6\0\1\u0124\7\0\22\110\1\0"+
    "\2\110\6\0\1\u0125\7\0\22\110\1\0\2\110\6\0"+
    "\1\u0126\7\0\22\110\1\0\2\110\6\0\1\234\7\0"+
    "\1\110\1\u012d\20\110\1\0\2\252\6\0\1\253\7\0"+
    "\6\252\1\u012e\13\252\31\0\1\u012f\44\0\1\u0130\40\0"+
    "\1\u0131\37\0\1\u0132\47\0\1\u0133\34\0\1\u0134\45\0"+
    "\1\u0135\34\0\1\u0136\21\0\2\u0116\6\0\1\u0137\7\0"+
    "\22\u0116\40\0\1\u0138\3\0\2\u0118\6\0\1\u0139\7\0"+
    "\22\u0118\27\0\1\u013a\42\0\1\u013b\35\0\1\u013c\42\0"+
    "\1\u013d\60\0\1\u013e\13\0\1\u013f\52\0\1\u0140\56\0"+
    "\1\u0141\26\0\1\u0142\42\0\1\u0143\22\0\2\110\6\0"+
    "\1\234\7\0\17\110\1\u0144\2\110\1\0\2\110\6\0"+
    "\1\u013f\7\0\22\110\1\0\2\110\6\0\1\234\7\0"+
    "\1\u0145\21\110\1\0\2\110\6\0\1\234\7\0\14\110"+
    "\1\u0146\5\110\1\0\2\110\6\0\1\234\7\0\1\u0147"+
    "\21\110\1\0\2\252\6\0\1\253\7\0\1\u0148\21\252"+
    "\30\0\1\u0149\34\0\1\u014a\52\0\1\u014b\44\0\1\u014c"+
    "\42\0\1\u014d\33\0\1\u014e\50\0\1\u014f\47\0\1\u0150"+
    "\43\0\1\u0151\33\0\1\u0152\42\0\1\u0153\52\0\1\u0154"+
    "\42\0\1\u0155\11\0\1\u0156\67\0\1\u0157\15\0\1\u0158"+
    "\42\0\1\u0159\32\0\2\110\6\0\1\u0156\7\0\22\110"+
    "\1\0\2\110\6\0\1\234\7\0\15\110\1\u015a\4\110"+
    "\1\0\2\110\6\0\1\u0158\7\0\22\110\1\0\2\252"+
    "\6\0\1\u0159\7\0\22\252\25\0\1\u015b\51\0\1\u015c"+
    "\30\0\1\u015d\60\0\1\u015e\43\0\1\u015f\41\0\1\u0160"+
    "\27\0\1\u0161\50\0\1\u0162\46\0\1\u0163\14\0\1\u0164"+
    "\42\0\1\u0165\56\0\1\u0166\42\0\1\u0167\26\0\1\u0168"+
    "\32\0\2\110\6\0\1\u0168\7\0\22\110\11\0\1\u0169"+
    "\62\0\1\u016a\22\0\1\u016b\53\0\1\u016c\57\0\1\u016d"+
    "\14\0\1\u016e\53\0\1\u016f\31\0\1\u0170\42\0\1\u0171"+
    "\42\0\1\u0172\42\0\1\u0173\66\0\1\u0174\26\0\1\u0175"+
    "\32\0\1\u0176\71\0\1\u0177\40\0\1\u0178\15\0\1\u0179"+
    "\42\0\1\u017a\42\0\1\u017b\31\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10640];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\45\0\4\1\1\11\1\1\3\11\1\1\3\11\6\1"+
    "\2\11\12\1\1\11\20\1\1\11\5\1\1\11\2\1"+
    "\2\11\1\1\2\11\3\1\2\11\2\1\1\11\5\1"+
    "\2\11\2\1\1\11\7\1\1\11\3\1\1\11\2\1"+
    "\1\11\1\0\1\1\1\11\1\0\1\1\1\11\21\0"+
    "\1\11\15\1\1\0\1\11\2\0\1\11\1\0\2\11"+
    "\17\0\3\11\2\0\1\11\16\0\15\1\21\0\2\11"+
    "\13\0\1\11\1\0\13\1\23\0\3\11\1\0\3\11"+
    "\2\0\5\1\11\0\1\11\1\0\1\11\5\0\2\11"+
    "\3\0\4\1\16\0\1\11\1\0\2\11\1\1\11\0"+
    "\2\11\2\0\2\11\1\0\1\11\2\0\1\11\1\0"+
    "\4\11\2\0\1\11\2\0\3\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[379];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public HTMLMasonLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }
	protected int bufferStart;

    public void setTokenStart(int position){zzCurrentPos = zzStartRead = position;}
    public void setTokenEnd(int position){zzMarkedPos = position;}
    public CharSequence getBuffer(){ return zzBuffer;}
    public int getBufferEnd() {return zzEndRead;}
    public int getNextTokenStart(){ return zzMarkedPos;}
    public boolean isLastToken(){ return zzMarkedPos == zzEndRead; }
	public int getBufferStart(){ return bufferStart;	}
 	public int getRealLexicalState() {return zzLexicalState;  }

 	public void pullback(int i)
 	{
 		int length = yylength();
 		if( i == length)
 		{
 			return;
 		}
 		assert i < length: "Pulling back for " + i + " of " + length + " for: " + yytext();
		yypushback(length - i);
 	}

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return zzMarkedPos;
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    bufferStart = zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
    resetInternals();
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public int yystate() {
    return packState(myPerlLexer.yystate(), isInitialState() ? zzLexicalState: 0xFFFF);
  }

  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }
    message += "; Real state is: " + zzLexicalState + "; yystate(): " + yystate();

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType perlAdvance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        switch (zzLexicalState) {
            case CHECK_SPACE_CLEAR_LINE: {
              yybegin(YYINITIAL);return HTML_MASON_TEMPLATE_BLOCK_HTML;
            }  // fall though
            case 380: break;
            case CHECK_SPACE: {
              yybegin(YYINITIAL);return HTML_MASON_TEMPLATE_BLOCK_HTML;
            }  // fall though
            case 381: break;
            case SELECT_OPEN_TAG: {
              yybegin(YYINITIAL);return HTML_MASON_BLOCK_OPENER;
            }  // fall though
            case 382: break;
            case SELECT_CLOSE_TAG: {
              return processCloseTagFallback();
            }  // fall though
            case 383: break;
            case SELECT_OPEN_TAG_WITH_CUSTOM_TAGS: {
              yybegin(YYINITIAL);return HTML_MASON_BLOCK_OPENER;
            }  // fall though
            case 384: break;
            case SELECT_CLOSE_TAG_WITH_CUSTOM_TAGS: {
              return processCloseTagFallback();
            }  // fall though
            case 385: break;
            case CALL_PATH: {
              popState();yybegin(YYINITIAL);return STRING_CONTENT;
            }  // fall though
            case 386: break;
            case CALL_CLOSER_NAME: {
              yybegin(YYINITIAL);return STRING_CONTENT;
            }  // fall though
            case 387: break;
            case NON_EMPTY_DOC: {
              yybegin(YYINITIAL);return COMMENT_BLOCK;
            }  // fall though
            case 388: break;
            case NON_EMPTY_TEXT: {
              yybegin(YYINITIAL);return STRING_CONTENT;
            }  // fall though
            case 389: break;
            default:
        return null;
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { yybegin(NON_CLEAR_LINE);return HTML_MASON_TEMPLATE_BLOCK_HTML;
            } 
            // fall through
          case 78: break;
          case 2: 
            { yybegin(CHECK_SPACE);
            } 
            // fall through
          case 79: break;
          case 3: 
            { yybegin(CHECK_SPACE_CLEAR_LINE);
            } 
            // fall through
          case 80: break;
          case 4: 
            { yybegin(PERL_LINE);return HTML_MASON_LINE_OPENER;
            } 
            // fall through
          case 81: break;
          case 5: 
            { pushback();yybegin(NON_CLEAR_LINE);return HTML_MASON_TEMPLATE_BLOCK_HTML;
            } 
            // fall through
          case 82: break;
          case 6: 
            { pushback();yybegin(YYINITIAL);return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 83: break;
          case 7: 
            { return TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 84: break;
          case 8: 
            { return delegateLexing();
            } 
            // fall through
          case 85: break;
          case 9: 
            { yybegin(AFTER_PERL_LINE);return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 86: break;
          case 10: 
            { return HTML_MASON_ESCAPER_NAME;
            } 
            // fall through
          case 87: break;
          case 11: 
            { return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 88: break;
          case 12: 
            { return COMMA;
            } 
            // fall through
          case 89: break;
          case 13: 
            { return processOpenTagFallback();
            } 
            // fall through
          case 90: break;
          case 14: 
            { return processCloseTagFallback();
            } 
            // fall through
          case 91: break;
          case 15: 
            { return processCustomComplexOpenTag();
            } 
            // fall through
          case 92: break;
          case 16: 
            { pushback();pushStateAndBegin(CALL_OPENER_COMMON);
            } 
            // fall through
          case 93: break;
          case 17: 
            { 
            } 
            // fall through
          case 94: break;
          case 18: 
            { popState();yybegin(YYINITIAL);return STRING_CONTENT;
            } 
            // fall through
          case 95: break;
          case 19: 
            { pushback();yybegin(CALL_OPENER_DELEGATED);return STRING_CONTENT;
            } 
            // fall through
          case 96: break;
          case 20: 
            { pushback();yybegin(CALL_OPENER_DELEGATED);
            } 
            // fall through
          case 97: break;
          case 21: 
            { yybegin(CALL_PATH);
            } 
            // fall through
          case 98: break;
          case 22: 
            { pushback();yybegin(CALL_CLOSER_NAME);
            } 
            // fall through
          case 99: break;
          case 23: 
            { yybegin(AFTER_PERL_BLOCK);return HTML_MASON_TAG_CLOSER;
            } 
            // fall through
          case 100: break;
          case 24: 
            { pushback();yybegin(CALL_CLOSER);return STRING_CONTENT;
            } 
            // fall through
          case 101: break;
          case 25: 
            { pushback();yybegin(YYINITIAL);
            } 
            // fall through
          case 102: break;
          case 26: 
            { yybegin(NON_CLEAR_LINE);return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 103: break;
          case 27: 
            { yybegin(YYINITIAL);return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 104: break;
          case 28: 
            { pushback();yybegin(NON_CLEAR_LINE);
            } 
            // fall through
          case 105: break;
          case 29: 
            { return IDENTIFIER;
            } 
            // fall through
          case 106: break;
          case 30: 
            { yybegin(AFTER_PERL_BLOCK);setPerlToInitial();return HTML_MASON_TAG_CLOSER;
            } 
            // fall through
          case 107: break;
          case 31: 
            { setPerlToInitial();return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 108: break;
          case 32: 
            { setPerlToInitial();return HTML_MASON_HARD_NEWLINE;
            } 
            // fall through
          case 109: break;
          case 33: 
            { yybegin(NON_EMPTY_DOC);
            } 
            // fall through
          case 110: break;
          case 34: 
            { yybegin(NON_EMPTY_TEXT);
            } 
            // fall through
          case 111: break;
          case 35: 
            { if( myCustomTagsMap == null ){
				yybegin(SELECT_OPEN_TAG);
			}
			else
			{
				yybegin(SELECT_OPEN_TAG_WITH_CUSTOM_TAGS);
			}
            } 
            // fall through
          case 112: break;
          case 36: 
            { yybegin(CALL_OPENER);startPerlExpression();return HTML_MASON_CALL_OPENER;
            } 
            // fall through
          case 113: break;
          case 37: 
            { pushback();yybegin(NON_CLEAR_LINE);return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 114: break;
          case 38: 
            { yybegin(AFTER_PERL_BLOCK);endPerlExpression();return HTML_MASON_BLOCK_CLOSER;
            } 
            // fall through
          case 115: break;
          case 39: 
            { return processCustomSimpleOpenTag();
            } 
            // fall through
          case 116: break;
          case 40: 
            { return processCustomCloseTag();
            } 
            // fall through
          case 117: break;
          case 41: 
            { endPerlExpression();yybegin(AFTER_PERL_BLOCK);return HTML_MASON_CALL_CLOSER;
            } 
            // fall through
          case 118: break;
          case 42: 
            { pushback();popState();
            } 
            // fall through
          case 119: break;
          case 43: 
            { endPerlExpression();yybegin(AFTER_PERL_BLOCK);return HTML_MASON_CALL_CLOSER_UNMATCHED;
            } 
            // fall through
          case 120: break;
          case 44: 
            { if( myCustomTagsMap == null ){
				yybegin(SELECT_CLOSE_TAG);
			}
			else
			{
				yybegin(SELECT_CLOSE_TAG_WITH_CUSTOM_TAGS);
			}
            } 
            // fall through
          case 121: break;
          case 45: 
            { yybegin(CALL_CLOSER); return HTML_MASON_CALL_CLOSE_TAG_START;
            } 
            // fall through
          case 122: break;
          case 46: 
            { yybegin(CALL_OPENER_FILTERING);startPerlExpression();return HTML_MASON_CALL_FILTERING_OPENER;
            } 
            // fall through
          case 123: break;
          case 47: 
            { return processDefOpenTag();
            } 
            // fall through
          case 124: break;
          case 48: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 1);
            { yybegin(PERL_EXPR_FILTER);return HTML_MASON_EXPR_FILTER_PIPE;
            } 
            // fall through
          case 125: break;
          case 49: 
            { yybegin(DOC);return HTML_MASON_DOC_OPENER;
            } 
            // fall through
          case 126: break;
          case 50: 
            { return processDefCloseTag();
            } 
            // fall through
          case 127: break;
          case 51: 
            { yybegin(TEXT);return HTML_MASON_TEXT_OPENER;
            } 
            // fall through
          case 128: break;
          case 52: 
            { yybegin(ONCE);startPerlExpression();return HTML_MASON_ONCE_OPENER;
            } 
            // fall through
          case 129: break;
          case 53: 
            { yybegin(INIT);startPerlExpression();return HTML_MASON_INIT_OPENER;
            } 
            // fall through
          case 130: break;
          case 54: 
            { yybegin(ATTR);startPerlExpression();return HTML_MASON_ATTR_OPENER;
            } 
            // fall through
          case 131: break;
          case 55: 
            { return processArgsOpenTag(ARGS);
            } 
            // fall through
          case 132: break;
          case 56: 
            { return processPerlOpenTag(PERL);
            } 
            // fall through
          case 133: break;
          case 57: 
            { return processCustomPerlCloser();
            } 
            // fall through
          case 134: break;
          case 58: 
            { return processCustomArgsCloser();
            } 
            // fall through
          case 135: break;
          case 59: 
            { yybegin(FLAGS);startPerlExpression();return HTML_MASON_FLAGS_OPENER;
            } 
            // fall through
          case 136: break;
          case 60: 
            { return processMethodOpenTag();
            } 
            // fall through
          case 137: break;
          case 61: 
            { yybegin(FILTER);startPerlExpression();return HTML_MASON_FILTER_OPENER;
            } 
            // fall through
          case 138: break;
          case 62: 
            { yybegin(SHARED);startPerlExpression();return HTML_MASON_SHARED_OPENER;
            } 
            // fall through
          case 139: break;
          case 63: 
            { return processMethodCloseTag();
            } 
            // fall through
          case 140: break;
          case 64: 
            { yybegin(AFTER_PERL_BLOCK);return HTML_MASON_DOC_CLOSER;
            } 
            // fall through
          case 141: break;
          case 65: 
            { yybegin(DOC);pushback();return COMMENT_BLOCK;
            } 
            // fall through
          case 142: break;
          case 66: 
            { yybegin(CLEANUP);startPerlExpression();return HTML_MASON_CLEANUP_OPENER;
            } 
            // fall through
          case 143: break;
          case 67: 
            { endPerlExpression();yybegin(AFTER_PERL_BLOCK);return HTML_MASON_INIT_CLOSER;
            } 
            // fall through
          case 144: break;
          case 68: 
            { endPerlExpression();yybegin(AFTER_PERL_BLOCK);return HTML_MASON_ONCE_CLOSER;
            } 
            // fall through
          case 145: break;
          case 69: 
            { endPerlExpression();yybegin(AFTER_PERL_BLOCK);return HTML_MASON_ATTR_CLOSER;
            } 
            // fall through
          case 146: break;
          case 70: 
            { return processPerlCloser();
            } 
            // fall through
          case 147: break;
          case 71: 
            { return processArgsCloser();
            } 
            // fall through
          case 148: break;
          case 72: 
            { yybegin(AFTER_PERL_BLOCK);return HTML_MASON_TEXT_CLOSER;
            } 
            // fall through
          case 149: break;
          case 73: 
            { yybegin(TEXT);pushback();return STRING_CONTENT;
            } 
            // fall through
          case 150: break;
          case 74: 
            { endPerlExpression();yybegin(AFTER_PERL_BLOCK);return HTML_MASON_FLAGS_CLOSER;
            } 
            // fall through
          case 151: break;
          case 75: 
            { endPerlExpression();yybegin(AFTER_PERL_BLOCK);return HTML_MASON_SHARED_CLOSER;
            } 
            // fall through
          case 152: break;
          case 76: 
            { endPerlExpression();yybegin(AFTER_PERL_BLOCK);return HTML_MASON_FILTER_CLOSER;
            } 
            // fall through
          case 153: break;
          case 77: 
            { endPerlExpression();yybegin(AFTER_PERL_BLOCK);return HTML_MASON_CLEANUP_CLOSER;
            } 
            // fall through
          case 154: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
