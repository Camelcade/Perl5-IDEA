// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: grammar/HTMLMason.flex

package com.perl5.lang.htmlmason.lexer;

import com.intellij.psi.TokenType;
import com.intellij.psi.tree.IElementType;
import static com.perl5.lang.htmlmason.elementType.HTMLMasonElementTypes.*;


public class HTMLMasonLexer extends HTMLMasonBaseLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int NON_CLEAR_LINE = 2;
  public static final int CHECK_SPACE_CLEAR_LINE = 4;
  public static final int CHECK_SPACE = 6;
  public static final int PARAMETRIZED_TAG = 8;
  public static final int PERL_LINE = 10;
  public static final int PERL_EXPR = 12;
  public static final int PERL_EXPR_FILTER = 14;
  public static final int SELECT_OPEN_TAG = 16;
  public static final int SELECT_CLOSE_TAG = 18;
  public static final int SELECT_OPEN_TAG_WITH_CUSTOM_TAGS = 20;
  public static final int SELECT_CLOSE_TAG_WITH_CUSTOM_TAGS = 22;
  public static final int CALL_OPENER = 24;
  public static final int CALL_PATH = 26;
  public static final int CALL_OPENER_DELEGATED = 28;
  public static final int CALL_OPENER_FILTERING = 30;
  public static final int CALL_OPENER_COMMON = 32;
  public static final int CALL_CLOSER = 34;
  public static final int CALL_CLOSER_NAME = 36;
  public static final int AFTER_PERL_LINE = 38;
  public static final int AFTER_PERL_BLOCK = 40;
  public static final int INIT = 42;
  public static final int CLEANUP = 44;
  public static final int ONCE = 46;
  public static final int SHARED = 48;
  public static final int PARAMETRIZED_OPENER = 50;
  public static final int FLAGS = 52;
  public static final int ATTR = 54;
  public static final int FILTER = 56;
  public static final int PERL = 58;
  public static final int PERL_WITH_CUSTOM_CLOSER = 60;
  public static final int ARGS = 62;
  public static final int ARGS_WITH_CUSTOM_CLOSER = 64;
  public static final int DOC = 66;
  public static final int NON_EMPTY_DOC = 68;
  public static final int TEXT = 70;
  public static final int NON_EMPTY_TEXT = 72;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 
    16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 23, 
    24, 24, 25, 25, 26, 26, 27, 27, 28, 28, 29, 29, 30, 30, 31, 31, 
    32, 32, 33, 33, 34, 34, 35, 35, 36, 36
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\2\u1f00\1\u2000\7\u1f00\1\u2100\1\u2200\1\u2300"+
    "\1\u1f00\1\u2400\1\u2500\2\u1f00\31\u0100\1\u2600\121\u0100\1\u2700"+
    "\4\u0100\1\u2800\1\u0100\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00"+
    "\1\u2e00\53\u0100\1\u2f00\41\u1f00\1\u0100\1\u3000\1\u3100\1\u3200"+
    "\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900\1\u3a00"+
    "\1\u3b00\1\u0100\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000\1\u4100"+
    "\1\u4200\1\u1f00\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700\1\u4800"+
    "\1\u4900\1\u4a00\1\u4b00\1\u4c00\1\u4d00\1\u4e00\1\u1f00\1\u4f00"+
    "\1\u5000\1\u5100\1\u1f00\3\u0100\1\u5200\1\u5300\1\u5400\12\u1f00"+
    "\4\u0100\1\u5500\17\u1f00\2\u0100\1\u5600\41\u1f00\2\u0100\1\u5700"+
    "\1\u5800\2\u1f00\1\u5900\1\u5a00\27\u0100\1\u5b00\2\u0100\1\u5c00"+
    "\45\u1f00\1\u0100\1\u5d00\1\u5e00\11\u1f00\1\u5f00\24\u1f00\1\u6000"+
    "\1\u6100\1\u1f00\1\u6200\1\u6300\1\u6400\1\u6500\2\u1f00\1\u6600"+
    "\5\u1f00\1\u6700\1\u6800\1\u6900\5\u1f00\1\u6a00\1\u6b00\4\u1f00"+
    "\1\u6c00\2\u1f00\1\u6d00\16\u1f00\246\u0100\1\u6e00\20\u0100\1\u6f00"+
    "\1\u7000\25\u0100\1\u7100\34\u0100\1\u7200\14\u1f00\2\u0100\1\u7300"+
    "\u0b06\u1f00\1\u7400\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\4\1\5\22\0\1\1"+
    "\4\0\1\6\1\7\5\0\1\10\1\11\1\12\1\13"+
    "\12\14\2\0\1\15\1\0\1\16\2\0\32\17\4\0"+
    "\1\17\1\0\1\20\1\17\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\2\17\1\30\1\31\1\32\1\33"+
    "\1\34\1\17\1\35\1\36\1\37\1\40\2\17\1\41"+
    "\2\17\1\0\1\42\10\0\1\3\44\0\1\17\12\0"+
    "\1\17\4\0\1\17\5\0\27\17\1\0\37\17\1\0"+
    "\u01ca\17\4\0\14\17\16\0\5\17\7\0\1\17\1\0"+
    "\1\17\21\0\160\14\5\17\1\0\2\17\2\0\1\12"+
    "\3\17\1\0\1\17\6\0\1\17\1\0\3\17\1\0"+
    "\1\17\1\0\24\17\1\0\123\17\1\0\213\17\1\0"+
    "\5\14\2\12\246\17\1\0\46\17\2\0\1\17\6\0"+
    "\51\17\10\0\55\14\1\0\1\14\1\0\2\14\1\0"+
    "\2\14\1\0\1\14\10\0\33\17\4\0\4\17\35\0"+
    "\13\14\5\0\53\17\37\14\4\0\2\17\1\14\143\17"+
    "\1\0\1\17\7\14\2\0\6\14\2\17\2\14\1\0"+
    "\4\14\2\17\12\14\3\17\2\0\1\17\20\0\1\17"+
    "\1\14\36\17\33\14\2\0\131\17\13\14\1\17\16\0"+
    "\12\14\41\17\11\14\2\17\4\0\1\17\2\0\1\14"+
    "\2\0\26\17\4\14\1\17\11\14\1\17\3\14\1\17"+
    "\5\14\22\0\31\17\3\14\4\0\13\17\65\0\25\17"+
    "\1\0\10\17\25\0\17\14\1\0\41\14\66\17\3\14"+
    "\1\17\22\14\1\17\7\14\12\17\2\14\2\0\12\14"+
    "\1\0\20\17\3\14\1\0\10\17\2\0\2\17\2\0"+
    "\26\17\1\0\7\17\1\0\1\17\3\0\4\17\2\0"+
    "\1\14\1\17\7\14\2\0\2\14\2\0\3\14\1\17"+
    "\10\0\1\14\4\0\2\17\1\0\3\17\2\14\2\0"+
    "\12\14\2\17\12\0\1\17\1\0\1\14\2\0\3\14"+
    "\1\0\6\17\4\0\2\17\2\0\26\17\1\0\7\17"+
    "\1\0\2\17\1\0\2\17\1\0\2\17\2\0\1\14"+
    "\1\0\5\14\4\0\2\14\2\0\3\14\3\0\1\14"+
    "\7\0\4\17\1\0\1\17\7\0\14\14\3\17\1\14"+
    "\13\0\3\14\1\0\11\17\1\0\3\17\1\0\26\17"+
    "\1\0\7\17\1\0\2\17\1\0\5\17\2\0\1\14"+
    "\1\17\10\14\1\0\3\14\1\0\3\14\2\0\1\17"+
    "\17\0\2\17\2\14\2\0\12\14\11\0\1\17\6\14"+
    "\1\0\3\14\1\0\10\17\2\0\2\17\2\0\26\17"+
    "\1\0\7\17\1\0\2\17\1\0\5\17\2\0\1\14"+
    "\1\17\7\14\2\0\2\14\2\0\3\14\10\0\2\14"+
    "\4\0\2\17\1\0\3\17\2\14\2\0\12\14\1\0"+
    "\1\17\20\0\1\14\1\17\1\0\6\17\3\0\3\17"+
    "\1\0\4\17\3\0\2\17\1\0\1\17\1\0\2\17"+
    "\3\0\2\17\3\0\3\17\3\0\14\17\4\0\5\14"+
    "\3\0\3\14\1\0\4\14\2\0\1\17\6\0\1\14"+
    "\16\0\12\14\20\0\5\14\10\17\1\0\3\17\1\0"+
    "\27\17\1\0\20\17\3\0\1\17\7\14\1\0\3\14"+
    "\1\0\4\14\7\0\2\14\1\0\3\17\5\0\2\17"+
    "\2\14\2\0\12\14\20\0\1\17\3\14\1\0\10\17"+
    "\1\0\3\17\1\0\27\17\1\0\12\17\1\0\5\17"+
    "\2\0\1\14\1\17\7\14\1\0\3\14\1\0\4\14"+
    "\7\0\2\14\7\0\1\17\1\0\2\17\2\14\2\0"+
    "\12\14\1\0\2\17\15\0\4\14\1\0\10\17\1\0"+
    "\3\17\1\0\51\17\2\14\1\17\7\14\1\0\3\14"+
    "\1\0\4\14\1\17\5\0\3\17\1\14\7\0\3\17"+
    "\2\14\2\0\12\14\12\0\6\17\2\0\2\14\1\0"+
    "\22\17\3\0\30\17\1\0\11\17\1\0\1\17\2\0"+
    "\7\17\3\0\1\14\4\0\6\14\1\0\1\14\1\0"+
    "\10\14\6\0\12\14\2\0\2\14\15\0\60\17\1\14"+
    "\1\17\10\14\5\0\7\17\10\14\1\0\12\14\47\0"+
    "\2\17\1\0\1\17\1\0\5\17\1\0\30\17\1\0"+
    "\1\17\1\0\12\17\1\14\1\17\12\14\1\17\2\0"+
    "\5\17\1\0\1\17\1\0\6\14\2\0\12\14\2\0"+
    "\4\17\40\0\1\17\27\0\2\14\6\0\12\14\13\0"+
    "\1\14\1\0\1\14\1\0\1\14\4\0\2\14\10\17"+
    "\1\0\44\17\4\0\24\14\1\0\2\14\5\17\13\14"+
    "\1\0\44\14\11\0\1\14\71\0\53\17\24\14\1\17"+
    "\12\14\6\0\6\17\4\14\4\17\3\14\1\17\3\14"+
    "\2\17\7\14\3\17\4\14\15\17\14\14\1\17\17\14"+
    "\2\0\46\17\1\0\1\17\5\0\1\17\2\0\53\17"+
    "\1\0\115\17\1\0\4\17\2\0\7\17\1\0\1\17"+
    "\1\0\4\17\2\0\51\17\1\0\4\17\2\0\41\17"+
    "\1\0\4\17\2\0\7\17\1\0\1\17\1\0\4\17"+
    "\2\0\17\17\1\0\71\17\1\0\4\17\2\0\103\17"+
    "\2\0\3\14\40\0\20\17\20\0\126\17\2\0\6\17"+
    "\3\0\u016c\17\2\0\21\17\1\0\32\17\5\0\113\17"+
    "\3\0\13\17\7\0\15\17\1\0\4\17\3\14\13\0"+
    "\22\17\3\14\13\0\22\17\2\14\14\0\15\17\1\0"+
    "\3\17\1\0\2\14\14\0\64\17\40\14\3\0\1\17"+
    "\4\0\1\17\1\14\2\0\12\14\41\0\3\14\2\0"+
    "\12\14\6\0\131\17\7\0\51\17\1\14\1\17\5\0"+
    "\106\17\12\0\37\17\1\0\14\14\4\0\14\14\12\0"+
    "\12\14\36\17\2\0\5\17\13\0\54\17\4\0\32\17"+
    "\6\0\12\14\46\0\27\17\5\14\4\0\65\17\12\14"+
    "\1\0\35\14\2\0\13\14\6\0\12\14\15\0\1\17"+
    "\10\0\16\14\1\12\101\0\5\14\57\17\21\14\7\17"+
    "\4\0\12\14\21\0\11\14\14\0\3\14\36\17\15\14"+
    "\2\17\12\14\54\17\16\14\14\0\44\17\24\14\10\0"+
    "\12\14\3\0\3\17\12\14\44\17\2\0\11\17\7\0"+
    "\53\17\2\0\3\17\20\0\3\14\1\0\25\14\4\17"+
    "\1\14\6\17\1\14\2\17\3\14\1\17\5\0\300\17"+
    "\72\14\1\0\5\14\26\17\2\0\6\17\2\0\46\17"+
    "\2\0\6\17\2\0\10\17\1\0\1\17\1\0\1\17"+
    "\1\0\1\17\1\0\37\17\2\0\65\17\1\0\7\17"+
    "\1\0\1\17\3\0\3\17\1\0\7\17\3\0\4\17"+
    "\2\0\6\17\4\0\15\17\5\0\3\17\1\0\7\17"+
    "\53\0\2\3\25\0\2\14\23\0\1\14\34\0\1\17"+
    "\15\0\1\17\20\0\15\17\63\0\15\14\4\12\1\14"+
    "\3\12\14\14\21\0\1\17\4\0\1\17\2\0\12\17"+
    "\1\0\1\17\3\0\5\17\6\0\1\17\1\0\1\17"+
    "\1\0\1\17\1\0\4\17\1\0\13\17\2\0\4\17"+
    "\5\0\5\17\4\0\1\17\21\0\51\17\u022d\0\64\12"+
    "\26\0\57\17\1\0\57\17\1\0\205\17\6\0\4\17"+
    "\3\14\2\17\14\0\46\17\1\0\1\17\5\0\1\17"+
    "\2\0\70\17\7\0\1\17\17\0\1\14\27\17\11\0"+
    "\7\17\1\0\7\17\1\0\7\17\1\0\7\17\1\0"+
    "\7\17\1\0\7\17\1\0\7\17\1\0\7\17\1\0"+
    "\40\14\57\0\1\12\325\0\3\17\31\0\11\17\6\14"+
    "\1\0\5\17\2\0\5\17\4\0\126\17\2\0\2\14"+
    "\2\0\3\17\1\0\132\17\1\0\4\17\5\0\53\17"+
    "\1\0\136\17\21\0\33\17\65\0\306\17\112\0\360\17"+
    "\20\0\215\17\103\0\56\17\2\0\15\17\3\0\20\17"+
    "\12\14\2\17\24\0\57\17\1\14\3\12\1\0\12\14"+
    "\1\0\37\17\2\14\120\17\2\14\45\0\11\17\2\0"+
    "\147\17\2\0\65\17\2\0\5\17\60\0\13\17\1\14"+
    "\3\17\1\14\4\17\1\14\27\17\5\14\30\0\64\17"+
    "\14\0\2\14\62\17\22\14\12\0\12\14\6\0\22\14"+
    "\6\17\3\0\1\17\1\0\2\17\13\14\34\17\10\14"+
    "\2\0\27\17\15\14\14\0\35\17\3\0\4\14\57\17"+
    "\16\14\16\0\1\17\12\14\6\0\5\17\1\14\12\17"+
    "\12\14\5\17\1\0\51\17\16\14\11\0\3\17\1\14"+
    "\10\17\2\14\2\0\12\14\6\0\27\17\3\0\1\17"+
    "\3\14\62\17\1\14\1\17\3\14\2\17\2\14\5\17"+
    "\2\14\1\17\1\14\1\17\30\0\3\17\2\0\13\17"+
    "\5\14\2\0\3\17\2\14\12\0\6\17\2\0\6\17"+
    "\2\0\6\17\11\0\7\17\1\0\7\17\1\0\53\17"+
    "\1\0\14\17\10\0\163\17\10\14\1\0\2\14\2\0"+
    "\12\14\6\0\244\17\14\0\27\17\4\0\61\17\4\0"+
    "\156\17\2\0\152\17\46\0\7\17\14\0\5\17\5\0"+
    "\1\17\1\14\12\17\1\0\15\17\1\0\5\17\1\0"+
    "\1\17\1\0\2\17\1\0\2\17\1\0\154\17\41\0"+
    "\213\17\6\12\332\17\22\0\100\17\2\0\66\17\50\0"+
    "\12\17\2\12\4\0\20\14\20\0\20\14\3\0\2\14"+
    "\30\0\3\14\40\0\1\12\1\17\1\12\1\17\1\12"+
    "\1\0\1\12\1\17\1\12\1\17\1\12\1\17\1\12"+
    "\1\17\1\12\176\17\23\0\12\14\7\0\32\17\4\0"+
    "\1\14\1\0\32\17\13\0\70\17\2\14\37\17\3\0"+
    "\6\17\2\0\6\17\2\0\6\17\2\0\3\17\43\0"+
    "\14\17\1\0\32\17\1\0\23\17\1\0\2\17\1\0"+
    "\17\17\2\0\16\17\42\0\173\17\105\0\65\17\210\0"+
    "\1\14\202\0\35\17\3\0\61\17\17\0\1\14\37\0"+
    "\40\17\15\0\36\17\5\0\46\17\5\14\5\0\36\17"+
    "\2\0\44\17\4\0\10\17\1\0\5\17\52\0\236\17"+
    "\2\0\12\14\6\0\44\17\4\0\44\17\4\0\50\17"+
    "\10\0\64\17\234\0\67\17\11\0\26\17\12\0\10\17"+
    "\230\0\6\17\2\0\1\17\1\0\54\17\1\0\2\17"+
    "\3\0\1\17\2\0\27\17\12\0\27\17\11\0\37\17"+
    "\101\0\23\17\1\0\2\17\12\0\26\17\12\0\32\17"+
    "\106\0\70\17\6\0\2\17\100\0\1\17\3\14\1\0"+
    "\2\14\5\0\4\14\4\17\1\0\3\17\1\0\35\17"+
    "\2\0\3\14\4\0\1\14\40\0\35\17\3\0\35\17"+
    "\43\0\10\17\1\0\34\17\2\14\31\0\66\17\12\0"+
    "\26\17\12\0\23\17\15\0\22\17\156\0\111\17\67\0"+
    "\63\17\15\0\63\17\15\0\44\17\4\14\10\0\12\14"+
    "\306\0\35\17\12\0\1\17\10\0\26\17\13\14\217\0"+
    "\27\17\11\0\3\14\65\17\17\14\37\0\12\14\17\0"+
    "\4\14\55\17\13\14\25\0\31\17\7\0\12\14\6\0"+
    "\3\14\44\17\16\14\1\0\12\14\4\0\1\17\2\14"+
    "\11\0\43\17\1\14\2\0\1\17\11\0\3\14\60\17"+
    "\16\14\4\17\4\0\4\14\3\0\12\14\1\17\1\0"+
    "\1\17\43\0\22\17\1\0\31\17\14\14\6\0\1\14"+
    "\101\0\7\17\1\0\1\17\1\0\4\17\1\0\17\17"+
    "\1\0\12\17\7\0\57\17\14\14\5\0\12\14\6\0"+
    "\4\14\1\0\10\17\2\0\2\17\2\0\26\17\1\0"+
    "\7\17\1\0\2\17\1\0\5\17\1\0\2\14\1\17"+
    "\7\14\2\0\2\14\2\0\3\14\2\0\1\17\6\0"+
    "\1\14\5\0\5\17\2\14\2\0\7\14\3\0\5\14"+
    "\213\0\65\17\22\14\4\17\5\0\12\14\4\0\1\14"+
    "\1\17\40\0\60\17\24\14\2\17\1\0\1\17\10\0"+
    "\12\14\246\0\57\17\7\14\2\0\11\14\27\0\4\17"+
    "\2\14\42\0\60\17\21\14\3\0\1\17\13\0\12\14"+
    "\46\0\53\17\15\14\1\17\7\0\12\14\66\0\33\17"+
    "\2\0\17\14\4\0\12\14\306\0\54\17\17\14\145\0"+
    "\100\17\12\14\25\0\1\17\240\0\10\17\2\0\47\17"+
    "\7\14\2\0\7\14\1\17\1\0\1\17\1\14\33\0"+
    "\1\17\12\14\50\17\7\14\1\17\4\14\10\0\1\14"+
    "\10\0\1\17\13\14\56\17\20\14\3\0\1\17\42\0"+
    "\71\17\7\0\11\17\1\0\45\17\10\14\1\0\10\14"+
    "\1\17\17\0\12\14\30\0\36\17\2\0\26\14\1\0"+
    "\16\14\111\0\7\17\1\0\2\17\1\0\46\17\6\14"+
    "\3\0\1\14\1\0\2\14\1\0\7\14\1\17\1\14"+
    "\10\0\12\14\6\0\6\17\1\0\2\17\1\0\40\17"+
    "\5\14\1\0\2\14\1\0\5\14\1\17\7\0\12\14"+
    "\u0136\0\23\17\4\14\11\0\232\17\146\0\157\17\21\0"+
    "\304\17\274\0\57\17\321\0\107\17\271\0\71\17\7\0"+
    "\37\17\1\0\12\14\146\0\36\17\2\0\5\14\13\0"+
    "\60\17\7\14\11\0\4\17\14\0\12\14\11\0\25\17"+
    "\5\0\23\17\260\0\100\17\200\0\113\17\4\0\1\14"+
    "\1\17\67\14\7\0\4\14\15\17\100\0\2\17\1\0"+
    "\1\17\34\0\370\17\10\0\363\17\15\0\37\17\61\0"+
    "\3\17\21\0\4\17\10\0\u018c\17\4\0\153\17\5\0"+
    "\15\17\3\0\11\17\7\0\12\17\3\0\2\14\306\0"+
    "\5\14\3\0\6\14\10\0\10\14\2\0\7\14\36\0"+
    "\4\14\224\0\3\14\273\0\125\17\1\0\107\17\1\0"+
    "\2\17\2\0\1\17\2\0\2\17\2\0\4\17\1\0"+
    "\14\17\1\0\1\17\1\0\7\17\1\0\101\17\1\0"+
    "\4\17\2\0\10\17\1\0\7\17\1\0\34\17\1\0"+
    "\4\17\1\0\5\17\1\0\1\17\3\0\7\17\1\0"+
    "\u0154\17\2\0\31\17\1\0\31\17\1\0\37\17\1\0"+
    "\31\17\1\0\37\17\1\0\31\17\1\0\37\17\1\0"+
    "\31\17\1\0\37\17\1\0\31\17\1\0\10\17\2\0"+
    "\151\14\4\0\62\14\10\0\1\14\16\0\1\14\26\0"+
    "\5\14\1\0\17\14\120\0\7\14\1\0\21\14\2\0"+
    "\7\14\1\0\2\14\1\0\5\14\325\0\55\17\3\0"+
    "\7\14\7\17\2\0\12\14\4\0\1\17\u0171\0\54\17"+
    "\16\14\6\0\305\17\13\0\7\14\51\0\104\17\7\14"+
    "\1\17\4\0\12\14\246\0\4\17\1\0\33\17\1\0"+
    "\2\17\1\0\1\17\2\0\1\17\1\0\12\17\1\0"+
    "\4\17\1\0\1\17\1\0\1\17\6\0\1\17\4\0"+
    "\1\17\1\0\1\17\1\0\1\17\1\0\3\17\1\0"+
    "\2\17\1\0\1\17\2\0\1\17\1\0\1\17\1\0"+
    "\1\17\1\0\1\17\1\0\1\17\1\0\2\17\1\0"+
    "\1\17\2\0\4\17\1\0\7\17\1\0\4\17\1\0"+
    "\4\17\1\0\1\17\1\0\12\17\1\0\21\17\5\0"+
    "\3\17\1\0\5\17\1\0\21\17\164\0\32\12\6\0"+
    "\32\12\6\0\32\12\166\0\327\17\51\0\65\17\13\0"+
    "\336\17\2\0\u0182\17\16\0\u0131\17\37\0\36\17\342\0"+
    "\360\14\20\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[29952];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\45\0\1\1\1\2\2\3\1\4\2\1\1\5\1\6"+
    "\1\5\1\7\1\10\2\11\2\10\1\12\1\7\1\13"+
    "\1\14\13\15\3\16\13\17\3\16\2\20\3\21\1\22"+
    "\1\23\1\10\1\20\2\24\1\25\1\26\1\27\3\21"+
    "\1\30\1\31\1\32\1\33\1\34\4\10\1\35\1\36"+
    "\2\37\1\10\2\40\6\10\2\41\2\21\2\42\1\21"+
    "\1\43\1\44\1\0\2\45\1\0\1\46\21\0\1\47"+
    "\15\17\1\0\1\50\2\0\1\51\1\0\1\52\1\53"+
    "\17\0\1\54\1\55\1\56\5\0\1\57\13\0\3\17"+
    "\1\57\11\17\21\0\1\60\3\0\1\61\10\0\1\62"+
    "\1\0\13\17\20\0\1\63\1\64\3\0\1\65\1\0"+
    "\1\66\1\67\1\0\1\70\1\0\5\17\11\0\1\71"+
    "\1\0\1\72\6\0\1\73\1\74\2\0\2\17\1\74"+
    "\1\17\17\0\1\75\1\76\1\77\1\17\11\0\1\100"+
    "\1\101\2\0\1\102\1\103\1\0\1\104\2\0\1\105"+
    "\1\0\1\106\1\107\1\110\1\111\2\0\1\112\2\0"+
    "\1\113\1\114\1\115";

  private static int [] zzUnpackAction() {
    int [] result = new int[379];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\43\0\106\0\151\0\214\0\257\0\322\0\365"+
    "\0\u0118\0\u013b\0\u015e\0\u0181\0\u01a4\0\u01c7\0\u01ea\0\u020d"+
    "\0\u0230\0\u0253\0\u0276\0\u0299\0\u02bc\0\u02df\0\u0302\0\u0325"+
    "\0\u0348\0\u036b\0\u038e\0\u03b1\0\u03d4\0\u03f7\0\u041a\0\u043d"+
    "\0\u0460\0\u0483\0\u04a6\0\u04c9\0\u04ec\0\u050f\0\u0532\0\u0532"+
    "\0\u0555\0\u0578\0\u059b\0\u0578\0\u0578\0\u0578\0\u05be\0\u0578"+
    "\0\u0578\0\u0578\0\u05e1\0\u0604\0\u0627\0\u064a\0\u0604\0\u0578"+
    "\0\u066d\0\u0578\0\u0690\0\u06b3\0\u06d6\0\u06f9\0\u071c\0\u073f"+
    "\0\u0762\0\u0785\0\u07a8\0\u07cb\0\u0578\0\u07ee\0\u0811\0\u0834"+
    "\0\u0857\0\u087a\0\u089d\0\u08c0\0\u08e3\0\u0906\0\u0929\0\u094c"+
    "\0\u096f\0\u0992\0\u09b5\0\u09d8\0\u09fb\0\u0578\0\u0a1e\0\u0a41"+
    "\0\u0a64\0\u0a87\0\u0aaa\0\u0578\0\u0acd\0\u0af0\0\u0578\0\u0acd"+
    "\0\u0578\0\u0578\0\u0578\0\u0b13\0\u0b36\0\u0276\0\u0578\0\u0578"+
    "\0\u0b59\0\u0b59\0\u0578\0\u0b7c\0\u0b9f\0\u0bc2\0\u0be5\0\u0c08"+
    "\0\u0578\0\u0578\0\u0c2b\0\u0c4e\0\u0578\0\u0c71\0\u0c94\0\u0cb7"+
    "\0\u0cda\0\u0cfd\0\u0d20\0\u0d43\0\u0578\0\u0d66\0\u0d89\0\u0dac"+
    "\0\u0578\0\u0dcf\0\u0df2\0\u0578\0\u0e15\0\u0e38\0\u0578\0\u0e5b"+
    "\0\u0e7e\0\u0578\0\u0627\0\u0ea1\0\u0ec4\0\u0ee7\0\u0f0a\0\u0f2d"+
    "\0\u0f50\0\u0f73\0\u0f96\0\u0fb9\0\u0fdc\0\u0fff\0\u1022\0\u1045"+
    "\0\u1068\0\u108b\0\u10ae\0\u0578\0\u10d1\0\u10f4\0\u1117\0\u113a"+
    "\0\u115d\0\u1180\0\u11a3\0\u11c6\0\u11e9\0\u120c\0\u122f\0\u1252"+
    "\0\u1275\0\u09b5\0\u0578\0\u1298\0\u12bb\0\u0578\0\u0aaa\0\u0578"+
    "\0\u0578\0\u12de\0\u1301\0\u1324\0\u1347\0\u136a\0\u138d\0\u13b0"+
    "\0\u13d3\0\u13f6\0\u1419\0\u143c\0\u145f\0\u1482\0\u14a5\0\u14c8"+
    "\0\u0578\0\u0578\0\u0578\0\u14eb\0\u150e\0\u1531\0\u1554\0\u1577"+
    "\0\u0578\0\u159a\0\u15bd\0\u15e0\0\u1603\0\u1626\0\u1649\0\u166c"+
    "\0\u168f\0\u16b2\0\u16d5\0\u16f8\0\u171b\0\u173e\0\u1761\0\u0834"+
    "\0\u1784\0\u17a7\0\u17ca\0\u17ed\0\u1810\0\u1833\0\u1856\0\u1879"+
    "\0\u189c\0\u18bf\0\u18e2\0\u1905\0\u1928\0\u194b\0\u196e\0\u1991"+
    "\0\u19b4\0\u19d7\0\u19fa\0\u1a1d\0\u1a40\0\u1a63\0\u1a86\0\u1aa9"+
    "\0\u1acc\0\u1aef\0\u0578\0\u1b12\0\u1b35\0\u1b58\0\u0578\0\u1b7b"+
    "\0\u1b9e\0\u1bc1\0\u1be4\0\u1c07\0\u1c2a\0\u1c4d\0\u1c70\0\u0578"+
    "\0\u1c93\0\u1cb6\0\u1cd9\0\u1cfc\0\u1d1f\0\u1d42\0\u1d65\0\u1d88"+
    "\0\u1dab\0\u1dce\0\u1df1\0\u1e14\0\u1e37\0\u1e5a\0\u1e7d\0\u1ea0"+
    "\0\u1ec3\0\u1ee6\0\u1f09\0\u1f2c\0\u1f4f\0\u1f72\0\u1f95\0\u1fb8"+
    "\0\u1fdb\0\u1ffe\0\u2021\0\u2044\0\u0578\0\u0578\0\u2067\0\u208a"+
    "\0\u20ad\0\u0578\0\u20d0\0\u0578\0\u0578\0\u20f3\0\u0578\0\u2116"+
    "\0\u2139\0\u215c\0\u217f\0\u21a2\0\u21c5\0\u21e8\0\u220b\0\u222e"+
    "\0\u2251\0\u2274\0\u2297\0\u22ba\0\u22dd\0\u2300\0\u0578\0\u2323"+
    "\0\u0578\0\u2346\0\u2369\0\u238c\0\u23af\0\u23d2\0\u23f5\0\u0578"+
    "\0\u0578\0\u2418\0\u243b\0\u245e\0\u2481\0\u0834\0\u24a4\0\u24c7"+
    "\0\u24ea\0\u250d\0\u2530\0\u2553\0\u2576\0\u2599\0\u25bc\0\u25df"+
    "\0\u2602\0\u2625\0\u2648\0\u266b\0\u268e\0\u26b1\0\u0578\0\u0578"+
    "\0\u0578\0\u26d4\0\u26f7\0\u271a\0\u273d\0\u2760\0\u2783\0\u27a6"+
    "\0\u27c9\0\u27ec\0\u280f\0\u0578\0\u0578\0\u2832\0\u2855\0\u0578"+
    "\0\u0578\0\u2878\0\u0578\0\u289b\0\u28be\0\u0578\0\u28e1\0\u0578"+
    "\0\u0578\0\u0578\0\u0578\0\u2904\0\u2927\0\u0578\0\u294a\0\u296d"+
    "\0\u0578\0\u0578\0\u0578";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[379];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\46\1\47\1\50\1\51\2\50\1\52\6\46\1\53"+
    "\26\46\1\47\1\50\1\51\2\50\1\54\6\46\1\53"+
    "\25\46\6\55\1\56\6\55\1\57\42\55\1\57\25\55"+
    "\43\60\2\61\3\62\1\63\43\61\1\64\33\61\1\65"+
    "\1\60\5\66\1\67\1\60\1\70\6\60\23\71\1\60"+
    "\20\72\1\73\1\74\1\75\1\72\1\76\2\72\1\77"+
    "\1\72\1\100\1\72\1\101\1\102\1\72\1\103\1\104"+
    "\3\72\22\105\1\106\6\105\1\107\11\105\17\72\1\110"+
    "\1\111\1\112\1\113\1\110\1\114\2\110\1\115\1\110"+
    "\1\116\1\110\1\117\1\120\1\110\1\121\1\122\2\110"+
    "\1\72\17\105\3\123\1\124\6\123\1\125\10\123\1\105"+
    "\7\126\1\127\33\126\1\130\2\131\1\132\2\131\1\130"+
    "\1\133\1\134\32\130\7\61\1\135\33\61\7\126\1\136"+
    "\33\126\1\137\5\66\1\137\1\140\2\137\3\141\2\137"+
    "\23\141\1\137\1\142\5\66\10\142\1\143\24\142\1\144"+
    "\2\145\1\146\2\145\10\144\1\147\24\144\1\150\1\151"+
    "\4\152\35\150\1\153\1\151\4\152\35\153\15\61\1\154"+
    "\42\61\1\155\42\61\1\156\42\61\1\157\25\61\1\60"+
    "\5\66\3\60\2\160\1\60\1\160\1\60\1\161\23\160"+
    "\1\60\2\61\3\162\1\163\7\61\1\164\27\61\3\165"+
    "\1\166\7\61\1\167\42\61\1\170\42\61\1\171\42\61"+
    "\1\172\27\61\3\165\1\166\7\61\1\173\27\61\3\165"+
    "\1\166\7\61\1\174\25\61\15\175\1\176\25\175\15\177"+
    "\1\200\25\177\15\201\1\202\25\201\15\177\1\203\25\177"+
    "\1\46\2\0\1\46\3\0\6\46\1\0\25\46\1\0"+
    "\1\47\4\50\35\0\1\46\1\47\1\50\1\51\2\50"+
    "\1\0\6\46\1\0\25\46\51\0\1\204\1\205\3\0"+
    "\1\206\35\0\1\207\1\210\3\0\1\211\31\0\1\62"+
    "\56\0\1\212\25\0\5\213\11\0\23\214\2\0\5\66"+
    "\51\0\1\71\2\0\23\71\36\0\1\215\1\0\1\216"+
    "\33\0\1\217\35\0\1\220\7\0\1\221\36\0\1\222"+
    "\1\223\44\0\1\224\33\0\1\225\51\0\1\226\33\0"+
    "\1\227\45\0\1\230\37\0\1\231\42\0\1\232\42\0"+
    "\1\233\33\0\1\110\1\0\1\234\23\110\15\0\1\110"+
    "\1\0\1\234\16\110\1\235\1\110\1\236\2\110\15\0"+
    "\1\110\1\0\1\234\11\110\1\237\11\110\15\0\1\110"+
    "\1\0\1\234\4\110\1\240\7\110\1\241\6\110\15\0"+
    "\1\110\1\0\1\234\10\110\1\242\1\243\11\110\15\0"+
    "\1\110\1\0\1\234\13\110\1\244\7\110\15\0\1\110"+
    "\1\0\1\234\4\110\1\245\16\110\15\0\1\110\1\0"+
    "\1\234\13\110\1\246\7\110\15\0\1\110\1\0\1\234"+
    "\4\110\1\247\16\110\15\0\1\110\1\0\1\234\7\110"+
    "\1\250\13\110\15\0\1\110\1\0\1\234\4\110\1\251"+
    "\16\110\15\0\1\252\1\0\1\253\23\252\15\0\1\252"+
    "\1\0\1\253\4\252\1\254\16\252\15\0\1\252\1\0"+
    "\1\253\4\252\1\255\16\252\17\0\1\256\24\0\1\130"+
    "\2\0\1\130\2\0\1\130\2\0\32\130\1\0\5\131"+
    "\1\0\1\257\1\134\32\0\1\130\2\131\1\132\2\131"+
    "\1\130\1\257\1\134\32\130\16\0\1\134\42\0\1\260"+
    "\42\0\1\261\24\0\1\144\2\0\1\144\2\0\10\144"+
    "\1\0\24\144\1\0\5\145\10\0\1\147\25\0\1\151"+
    "\4\152\50\0\1\262\42\0\1\263\42\0\1\264\42\0"+
    "\1\265\40\0\2\160\1\0\1\160\2\0\23\160\3\0"+
    "\1\162\53\0\1\266\31\0\1\165\53\0\1\267\42\0"+
    "\1\270\42\0\1\271\42\0\1\272\42\0\1\273\42\0"+
    "\1\274\42\0\1\275\27\0\15\177\1\0\25\177\13\0"+
    "\1\276\42\0\1\277\42\0\1\300\71\0\1\301\6\0"+
    "\1\302\1\303\75\0\1\207\6\0\2\207\34\0\5\304"+
    "\1\305\1\0\1\213\3\0\1\214\2\0\23\214\26\0"+
    "\1\306\54\0\1\307\26\0\1\310\43\0\1\311\37\0"+
    "\1\312\51\0\1\313\32\0\1\314\51\0\1\315\52\0"+
    "\1\316\24\0\1\317\56\0\1\320\25\0\1\321\63\0"+
    "\1\322\25\0\1\323\55\0\1\324\17\0\1\110\1\0"+
    "\1\234\6\110\1\325\14\110\15\0\1\110\1\0\1\234"+
    "\20\110\1\326\2\110\15\0\1\110\1\0\1\234\4\110"+
    "\1\327\16\110\15\0\1\110\1\0\1\234\5\110\1\330"+
    "\15\110\15\0\1\110\1\0\1\234\2\110\1\331\20\110"+
    "\15\0\1\110\1\0\1\234\11\110\1\332\11\110\15\0"+
    "\1\110\1\0\1\234\1\110\1\333\21\110\15\0\1\110"+
    "\1\0\1\234\10\110\1\334\12\110\15\0\1\110\1\0"+
    "\1\234\20\110\1\335\2\110\15\0\1\110\1\0\1\234"+
    "\2\110\1\336\20\110\15\0\1\110\1\0\1\234\16\110"+
    "\1\337\4\110\15\0\1\110\1\0\1\234\1\110\1\340"+
    "\21\110\15\0\1\110\1\0\1\234\22\110\1\341\15\0"+
    "\1\252\1\0\1\253\5\252\1\342\15\252\15\0\1\252"+
    "\1\0\1\253\20\252\1\343\2\252\7\0\1\344\42\0"+
    "\1\345\42\0\1\346\42\0\1\347\42\0\1\350\42\0"+
    "\1\351\42\0\1\352\42\0\1\353\42\0\1\354\42\0"+
    "\1\355\42\0\1\356\42\0\1\357\42\0\1\360\42\0"+
    "\1\361\42\0\1\362\35\0\5\304\1\305\52\0\1\363"+
    "\62\0\1\364\41\0\1\365\25\0\1\366\40\0\1\367"+
    "\63\0\1\370\30\0\1\371\54\0\1\372\31\0\1\373"+
    "\37\0\1\374\47\0\1\375\47\0\1\376\44\0\1\377"+
    "\21\0\1\u0100\52\0\1\u0101\30\0\1\110\1\0\1\234"+
    "\17\110\1\u0102\3\110\15\0\1\110\1\0\1\234\16\110"+
    "\1\u0103\4\110\15\0\1\110\1\0\1\234\1\110\1\u0104"+
    "\21\110\15\0\1\110\1\0\1\367\23\110\15\0\1\110"+
    "\1\0\1\234\20\110\1\u0105\2\110\15\0\1\110\1\0"+
    "\1\234\6\110\1\u0106\14\110\15\0\1\110\1\0\1\234"+
    "\20\110\1\u0107\2\110\15\0\1\110\1\0\1\234\7\110"+
    "\1\u0108\13\110\15\0\1\110\1\0\1\234\4\110\1\u0109"+
    "\16\110\15\0\1\110\1\0\1\234\11\110\1\u010a\11\110"+
    "\15\0\1\110\1\0\1\234\16\110\1\u010b\4\110\15\0"+
    "\1\110\1\0\1\234\20\110\1\u010c\2\110\15\0\1\252"+
    "\1\0\1\u0100\23\252\15\0\1\252\1\0\1\253\7\252"+
    "\1\u010d\13\252\30\0\1\u010e\34\0\1\u010f\54\0\1\u0110"+
    "\45\0\1\u0111\30\0\1\u0112\36\0\1\u0113\46\0\1\u0114"+
    "\52\0\1\u0115\25\0\23\u0116\21\0\1\u0117\41\0\23\u0118"+
    "\23\0\1\u0119\42\0\1\u011a\57\0\1\u011b\42\0\1\u011c"+
    "\21\0\1\u011d\42\0\1\u011e\56\0\1\u011f\33\0\1\u0120"+
    "\55\0\1\u0121\22\0\1\u0122\57\0\1\u0123\25\0\1\u0124"+
    "\42\0\1\u0125\47\0\1\u0126\35\0\1\u0127\57\0\1\u0128"+
    "\23\0\1\110\1\0\1\u011d\23\110\15\0\1\110\1\0"+
    "\1\u011e\23\110\15\0\1\110\1\0\1\234\13\110\1\u0129"+
    "\7\110\15\0\1\110\1\0\1\234\4\110\1\u012a\16\110"+
    "\15\0\1\110\1\0\1\234\17\110\1\u012b\3\110\15\0"+
    "\1\110\1\0\1\u0122\23\110\15\0\1\110\1\0\1\234"+
    "\14\110\1\u012c\6\110\15\0\1\110\1\0\1\u0124\23\110"+
    "\15\0\1\110\1\0\1\u0125\23\110\15\0\1\110\1\0"+
    "\1\234\4\110\1\u012d\16\110\15\0\1\110\1\0\1\u0127"+
    "\23\110\15\0\1\252\1\0\1\253\14\252\1\u012e\6\252"+
    "\33\0\1\u012f\40\0\1\u0130\44\0\1\u0131\36\0\1\u0132"+
    "\44\0\1\u0133\51\0\1\u0134\32\0\1\u0135\36\0\1\u0136"+
    "\33\0\1\u0116\1\0\1\u0137\23\u0116\36\0\1\u0138\21\0"+
    "\1\u0118\1\0\1\u0139\23\u0118\34\0\1\u013a\42\0\1\u013b"+
    "\32\0\1\u013c\42\0\1\u013d\57\0\1\u013e\37\0\1\u013f"+
    "\23\0\1\u0140\46\0\1\u0141\42\0\1\u0142\42\0\1\u0143"+
    "\34\0\1\110\1\0\1\234\21\110\1\u0144\1\110\15\0"+
    "\1\110\1\0\1\234\16\110\1\u0145\4\110\15\0\1\110"+
    "\1\0\1\u0140\23\110\15\0\1\110\1\0\1\234\3\110"+
    "\1\u0146\17\110\15\0\1\110\1\0\1\234\3\110\1\u0147"+
    "\17\110\15\0\1\252\1\0\1\253\3\252\1\u0148\17\252"+
    "\30\0\1\u0149\36\0\1\u014a\40\0\1\u014b\41\0\1\u014c"+
    "\42\0\1\u014d\61\0\1\u014e\33\0\1\u014f\47\0\1\u0150"+
    "\32\0\1\u0151\36\0\1\u0152\42\0\1\u0153\62\0\1\u0154"+
    "\42\0\1\u0155\35\0\1\u0156\24\0\1\u0157\42\0\1\u0158"+
    "\42\0\1\u0159\40\0\1\110\1\0\1\234\15\110\1\u015a"+
    "\5\110\15\0\1\110\1\0\1\u0157\23\110\15\0\1\110"+
    "\1\0\1\u0158\23\110\15\0\1\252\1\0\1\u0159\23\252"+
    "\40\0\1\u015b\23\0\1\u015c\45\0\1\u015d\54\0\1\u015e"+
    "\32\0\1\u015f\52\0\1\u0160\44\0\1\u0161\33\0\1\u0162"+
    "\50\0\1\u0163\22\0\1\u0164\42\0\1\u0165\63\0\1\u0166"+
    "\42\0\1\u0167\21\0\1\u0168\40\0\1\110\1\0\1\u0168"+
    "\23\110\17\0\1\u0169\56\0\1\u016a\26\0\1\u016b\47\0"+
    "\1\u016c\55\0\1\u016d\22\0\1\u016e\47\0\1\u016f\35\0"+
    "\1\u0170\42\0\1\u0171\42\0\1\u0172\42\0\1\u0173\64\0"+
    "\1\u0174\24\0\1\u0175\36\0\1\u0176\61\0\1\u0177\41\0"+
    "\1\u0178\24\0\1\u0179\42\0\1\u017a\42\0\1\u017b\24\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[10640];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\45\0\4\1\1\11\1\1\3\11\1\1\3\11\5\1"+
    "\1\11\1\1\1\11\12\1\1\11\20\1\1\11\5\1"+
    "\1\11\2\1\1\11\1\1\3\11\3\1\2\11\2\1"+
    "\1\11\5\1\2\11\2\1\1\11\7\1\1\11\3\1"+
    "\1\11\2\1\1\11\1\1\1\0\1\11\1\1\1\0"+
    "\1\11\21\0\1\11\15\1\1\0\1\11\2\0\1\11"+
    "\1\0\2\11\17\0\3\11\5\0\1\11\13\0\15\1"+
    "\21\0\1\11\3\0\1\11\10\0\1\11\1\0\13\1"+
    "\20\0\2\11\3\0\1\11\1\0\2\11\1\0\1\11"+
    "\1\0\5\1\11\0\1\11\1\0\1\11\6\0\2\11"+
    "\2\0\4\1\17\0\3\11\1\1\11\0\2\11\2\0"+
    "\2\11\1\0\1\11\2\0\1\11\1\0\4\11\2\0"+
    "\1\11\2\0\3\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[379];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public HTMLMasonLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }
	protected int bufferStart;

    public void setTokenStart(int position){zzCurrentPos = zzStartRead = position;}
    public void setTokenEnd(int position){zzMarkedPos = position;}
    public CharSequence getBuffer(){ return zzBuffer;}
    public int getBufferEnd() {return zzEndRead;}
    public int getNextTokenStart(){ return zzMarkedPos;}
    public boolean isLastToken(){ return zzMarkedPos == zzEndRead; }
	public int getBufferStart(){ return bufferStart;	}
 	public int getRealLexicalState() {return zzLexicalState;  }

 	public void pullback(int i)
 	{
 		int length = yylength();
 		if( i == length)
 		{
 			return;
 		}
 		assert i < length: "Pulling back for " + i + " of " + length + " for: " + yytext();
		yypushback(length - i);
 	}

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return zzMarkedPos;
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    bufferStart = zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
    resetInternals();
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public int yystate() {
    return packState(myPerlLexer.yystate(), isInitialState() ? zzLexicalState: 0xFFFF);
  }

  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }
    message += "; Real state is: " + zzLexicalState + "; yystate(): " + yystate();

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType perlAdvance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            switch (zzLexicalState) {
            case CHECK_SPACE_CLEAR_LINE: {
              yybegin(YYINITIAL);return HTML_MASON_TEMPLATE_BLOCK_HTML;
            }  // fall though
            case 380: break;
            case CHECK_SPACE: {
              yybegin(YYINITIAL);return HTML_MASON_TEMPLATE_BLOCK_HTML;
            }  // fall though
            case 381: break;
            case SELECT_OPEN_TAG: {
              yybegin(YYINITIAL);return HTML_MASON_BLOCK_OPENER;
            }  // fall though
            case 382: break;
            case SELECT_CLOSE_TAG: {
              return processCloseTagFallback();
            }  // fall though
            case 383: break;
            case SELECT_OPEN_TAG_WITH_CUSTOM_TAGS: {
              yybegin(YYINITIAL);return HTML_MASON_BLOCK_OPENER;
            }  // fall though
            case 384: break;
            case SELECT_CLOSE_TAG_WITH_CUSTOM_TAGS: {
              return processCloseTagFallback();
            }  // fall though
            case 385: break;
            case CALL_PATH: {
              popState();yybegin(YYINITIAL);return STRING_CONTENT;
            }  // fall though
            case 386: break;
            case CALL_CLOSER_NAME: {
              yybegin(YYINITIAL);return STRING_CONTENT;
            }  // fall though
            case 387: break;
            case NON_EMPTY_DOC: {
              yybegin(YYINITIAL);return COMMENT_BLOCK;
            }  // fall though
            case 388: break;
            case NON_EMPTY_TEXT: {
              yybegin(YYINITIAL);return STRING_CONTENT;
            }  // fall though
            case 389: break;
            default:
        return null;
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { yybegin(NON_CLEAR_LINE);return HTML_MASON_TEMPLATE_BLOCK_HTML;
            }
          // fall through
          case 78: break;
          case 2:
            { yybegin(CHECK_SPACE);
            }
          // fall through
          case 79: break;
          case 3:
            { yybegin(CHECK_SPACE_CLEAR_LINE);
            }
          // fall through
          case 80: break;
          case 4:
            { yybegin(PERL_LINE);return HTML_MASON_LINE_OPENER;
            }
          // fall through
          case 81: break;
          case 5:
            { pushback();yybegin(NON_CLEAR_LINE);return HTML_MASON_TEMPLATE_BLOCK_HTML;
            }
          // fall through
          case 82: break;
          case 6:
            { pushback();yybegin(YYINITIAL);return TokenType.WHITE_SPACE;
            }
          // fall through
          case 83: break;
          case 7:
            { return TokenType.BAD_CHARACTER;
            }
          // fall through
          case 84: break;
          case 8:
            { return delegateLexing();
            }
          // fall through
          case 85: break;
          case 9:
            { yybegin(AFTER_PERL_LINE);return TokenType.WHITE_SPACE;
            }
          // fall through
          case 86: break;
          case 10:
            { return TokenType.WHITE_SPACE;
            }
          // fall through
          case 87: break;
          case 11:
            { return COMMA;
            }
          // fall through
          case 88: break;
          case 12:
            { return HTML_MASON_ESCAPER_NAME;
            }
          // fall through
          case 89: break;
          case 13:
            { return processOpenTagFallback();
            }
          // fall through
          case 90: break;
          case 14:
            { return processCloseTagFallback();
            }
          // fall through
          case 91: break;
          case 15:
            { return processCustomComplexOpenTag();
            }
          // fall through
          case 92: break;
          case 16:
            { pushback();pushStateAndBegin(CALL_OPENER_COMMON);
            }
          // fall through
          case 93: break;
          case 17:
            { 
            }
          // fall through
          case 94: break;
          case 18:
            { popState();yybegin(YYINITIAL);return STRING_CONTENT;
            }
          // fall through
          case 95: break;
          case 19:
            { pushback();yybegin(CALL_OPENER_DELEGATED);return STRING_CONTENT;
            }
          // fall through
          case 96: break;
          case 20:
            { pushback();yybegin(CALL_OPENER_DELEGATED);
            }
          // fall through
          case 97: break;
          case 21:
            { yybegin(CALL_PATH);
            }
          // fall through
          case 98: break;
          case 22:
            { pushback();yybegin(CALL_CLOSER_NAME);
            }
          // fall through
          case 99: break;
          case 23:
            { yybegin(AFTER_PERL_BLOCK);return HTML_MASON_TAG_CLOSER;
            }
          // fall through
          case 100: break;
          case 24:
            { pushback();yybegin(CALL_CLOSER);return STRING_CONTENT;
            }
          // fall through
          case 101: break;
          case 25:
            { pushback();yybegin(YYINITIAL);
            }
          // fall through
          case 102: break;
          case 26:
            { yybegin(NON_CLEAR_LINE);return TokenType.WHITE_SPACE;
            }
          // fall through
          case 103: break;
          case 27:
            { yybegin(YYINITIAL);return TokenType.WHITE_SPACE;
            }
          // fall through
          case 104: break;
          case 28:
            { pushback();yybegin(NON_CLEAR_LINE);
            }
          // fall through
          case 105: break;
          case 29:
            { return IDENTIFIER;
            }
          // fall through
          case 106: break;
          case 30:
            { yybegin(AFTER_PERL_BLOCK);setPerlToInitial();return HTML_MASON_TAG_CLOSER;
            }
          // fall through
          case 107: break;
          case 31:
            { setPerlToInitial();return TokenType.WHITE_SPACE;
            }
          // fall through
          case 108: break;
          case 32:
            { setPerlToInitial();return HTML_MASON_HARD_NEWLINE;
            }
          // fall through
          case 109: break;
          case 33:
            { yybegin(NON_EMPTY_DOC);
            }
          // fall through
          case 110: break;
          case 34:
            { yybegin(NON_EMPTY_TEXT);
            }
          // fall through
          case 111: break;
          case 35:
            { if( myCustomTagsMap == null ){
				yybegin(SELECT_OPEN_TAG);
			}
			else
			{
				yybegin(SELECT_OPEN_TAG_WITH_CUSTOM_TAGS);
			}
            }
          // fall through
          case 112: break;
          case 36:
            { yybegin(CALL_OPENER);startPerlExpression();return HTML_MASON_CALL_OPENER;
            }
          // fall through
          case 113: break;
          case 37:
            { pushback();yybegin(NON_CLEAR_LINE);return TokenType.WHITE_SPACE;
            }
          // fall through
          case 114: break;
          case 38:
            { yybegin(AFTER_PERL_BLOCK);endPerlExpression();return HTML_MASON_BLOCK_CLOSER;
            }
          // fall through
          case 115: break;
          case 39:
            { return processCustomSimpleOpenTag();
            }
          // fall through
          case 116: break;
          case 40:
            { return processCustomCloseTag();
            }
          // fall through
          case 117: break;
          case 41:
            { endPerlExpression();yybegin(AFTER_PERL_BLOCK);return HTML_MASON_CALL_CLOSER;
            }
          // fall through
          case 118: break;
          case 42:
            { pushback();popState();
            }
          // fall through
          case 119: break;
          case 43:
            { endPerlExpression();yybegin(AFTER_PERL_BLOCK);return HTML_MASON_CALL_CLOSER_UNMATCHED;
            }
          // fall through
          case 120: break;
          case 44:
            { yybegin(CALL_OPENER_FILTERING);startPerlExpression();return HTML_MASON_CALL_FILTERING_OPENER;
            }
          // fall through
          case 121: break;
          case 45:
            { if( myCustomTagsMap == null ){
				yybegin(SELECT_CLOSE_TAG);
			}
			else
			{
				yybegin(SELECT_CLOSE_TAG_WITH_CUSTOM_TAGS);
			}
            }
          // fall through
          case 122: break;
          case 46:
            { yybegin(CALL_CLOSER); return HTML_MASON_CALL_CLOSE_TAG_START;
            }
          // fall through
          case 123: break;
          case 47:
            { return processDefOpenTag();
            }
          // fall through
          case 124: break;
          case 48:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 1);
            { yybegin(PERL_EXPR_FILTER);return HTML_MASON_EXPR_FILTER_PIPE;
            }
          // fall through
          case 125: break;
          case 49:
            { yybegin(DOC);return HTML_MASON_DOC_OPENER;
            }
          // fall through
          case 126: break;
          case 50:
            { return processDefCloseTag();
            }
          // fall through
          case 127: break;
          case 51:
            { return processArgsOpenTag(ARGS);
            }
          // fall through
          case 128: break;
          case 52:
            { yybegin(ATTR);startPerlExpression();return HTML_MASON_ATTR_OPENER;
            }
          // fall through
          case 129: break;
          case 53:
            { yybegin(INIT);startPerlExpression();return HTML_MASON_INIT_OPENER;
            }
          // fall through
          case 130: break;
          case 54:
            { yybegin(ONCE);startPerlExpression();return HTML_MASON_ONCE_OPENER;
            }
          // fall through
          case 131: break;
          case 55:
            { return processPerlOpenTag(PERL);
            }
          // fall through
          case 132: break;
          case 56:
            { yybegin(TEXT);return HTML_MASON_TEXT_OPENER;
            }
          // fall through
          case 133: break;
          case 57:
            { return processCustomPerlCloser();
            }
          // fall through
          case 134: break;
          case 58:
            { return processCustomArgsCloser();
            }
          // fall through
          case 135: break;
          case 59:
            { yybegin(FLAGS);startPerlExpression();return HTML_MASON_FLAGS_OPENER;
            }
          // fall through
          case 136: break;
          case 60:
            { return processMethodOpenTag();
            }
          // fall through
          case 137: break;
          case 61:
            { yybegin(FILTER);startPerlExpression();return HTML_MASON_FILTER_OPENER;
            }
          // fall through
          case 138: break;
          case 62:
            { yybegin(SHARED);startPerlExpression();return HTML_MASON_SHARED_OPENER;
            }
          // fall through
          case 139: break;
          case 63:
            { return processMethodCloseTag();
            }
          // fall through
          case 140: break;
          case 64:
            { yybegin(AFTER_PERL_BLOCK);return HTML_MASON_DOC_CLOSER;
            }
          // fall through
          case 141: break;
          case 65:
            { yybegin(DOC);pushback();return COMMENT_BLOCK;
            }
          // fall through
          case 142: break;
          case 66:
            { yybegin(CLEANUP);startPerlExpression();return HTML_MASON_CLEANUP_OPENER;
            }
          // fall through
          case 143: break;
          case 67:
            { endPerlExpression();yybegin(AFTER_PERL_BLOCK);return HTML_MASON_INIT_CLOSER;
            }
          // fall through
          case 144: break;
          case 68:
            { endPerlExpression();yybegin(AFTER_PERL_BLOCK);return HTML_MASON_ONCE_CLOSER;
            }
          // fall through
          case 145: break;
          case 69:
            { endPerlExpression();yybegin(AFTER_PERL_BLOCK);return HTML_MASON_ATTR_CLOSER;
            }
          // fall through
          case 146: break;
          case 70:
            { return processPerlCloser();
            }
          // fall through
          case 147: break;
          case 71:
            { return processArgsCloser();
            }
          // fall through
          case 148: break;
          case 72:
            { yybegin(AFTER_PERL_BLOCK);return HTML_MASON_TEXT_CLOSER;
            }
          // fall through
          case 149: break;
          case 73:
            { yybegin(TEXT);pushback();return STRING_CONTENT;
            }
          // fall through
          case 150: break;
          case 74:
            { endPerlExpression();yybegin(AFTER_PERL_BLOCK);return HTML_MASON_FLAGS_CLOSER;
            }
          // fall through
          case 151: break;
          case 75:
            { endPerlExpression();yybegin(AFTER_PERL_BLOCK);return HTML_MASON_SHARED_CLOSER;
            }
          // fall through
          case 152: break;
          case 76:
            { endPerlExpression();yybegin(AFTER_PERL_BLOCK);return HTML_MASON_FILTER_CLOSER;
            }
          // fall through
          case 153: break;
          case 77:
            { endPerlExpression();yybegin(AFTER_PERL_BLOCK);return HTML_MASON_CLEANUP_CLOSER;
            }
          // fall through
          case 154: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
