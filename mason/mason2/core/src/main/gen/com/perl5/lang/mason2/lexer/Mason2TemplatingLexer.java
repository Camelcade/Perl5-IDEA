// Generated by JFlex 1.9.0 http://jflex.de/  (tweaked for IntelliJ platform)
// source: grammar/Mason2.flex

package com.perl5.lang.mason2.lexer;

import com.intellij.psi.TokenType;
import com.intellij.psi.tree.IElementType;

public class Mason2TemplatingLexer extends Mason2TemplatingLexerBase {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int NON_CLEAR_LINE = 2;
  public static final int PERL_LINE = 4;
  public static final int PERL_BLOCK = 6;
  public static final int PERL_EXPR_BLOCK = 8;
  public static final int PERL_EXPR_BLOCK_FILTER = 10;
  public static final int CALL_EXPRESSION = 12;
  public static final int CALL_EXPRESSION_DELEGATED = 14;
  public static final int CALL_PATH = 16;
  public static final int AFTER_PERL_LINE = 18;
  public static final int AFTER_PERL_BLOCK = 20;
  public static final int SELECT_OPEN_TAG = 22;
  public static final int SELECT_CLOSE_TAG = 24;
  public static final int OPENING_TAG = 26;
  public static final int DOC = 28;
  public static final int NON_EMPTY_DOC = 30;
  public static final int FLAGS = 32;
  public static final int CLASS = 34;
  public static final int INIT = 36;
  public static final int TEXT = 38;
  public static final int NON_EMPTY_TEXT = 40;
  public static final int PERL = 42;
  public static final int PARAMETRIZED_TAG = 44;
  public static final int CHECK_SPACE_CLEAR_LINE = 46;
  public static final int CHECK_SPACE = 48;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 
    16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 23, 
    24, 24
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\2\u1f00\1\u2000\7\u1f00\1\u2100\1\u2200\1\u2300"+
    "\1\u1f00\1\u2400\1\u2500\2\u1f00\31\u0100\1\u2600\121\u0100\1\u2700"+
    "\4\u0100\1\u2800\1\u0100\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00"+
    "\1\u2e00\53\u0100\1\u2f00\10\u3000\31\u1f00\1\u0100\1\u3100\1\u3200"+
    "\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900\1\u3a00"+
    "\1\u3b00\1\u3c00\1\u0100\1\u3d00\1\u3e00\1\u3f00\1\u4000\1\u4100"+
    "\1\u4200\1\u4300\1\u1f00\1\u4400\1\u4500\1\u4600\1\u4700\1\u4800"+
    "\1\u4900\1\u4a00\1\u4b00\1\u4c00\1\u4d00\1\u4e00\1\u4f00\1\u1f00"+
    "\1\u5000\1\u5100\1\u5200\1\u1f00\3\u0100\1\u5300\1\u5400\1\u5500"+
    "\12\u1f00\4\u0100\1\u5600\17\u1f00\2\u0100\1\u5700\41\u1f00\2\u0100"+
    "\1\u5800\1\u5900\2\u1f00\1\u5a00\1\u5b00\27\u0100\1\u5c00\2\u0100"+
    "\1\u5d00\45\u1f00\1\u0100\1\u5e00\1\u5f00\11\u1f00\1\u6000\24\u1f00"+
    "\1\u6100\1\u6200\1\u1f00\1\u6300\1\u6400\1\u6500\1\u6600\2\u1f00"+
    "\1\u6700\5\u1f00\1\u6800\1\u6900\1\u6a00\5\u1f00\1\u6b00\1\u6c00"+
    "\4\u1f00\1\u6d00\2\u1f00\1\u6e00\16\u1f00\246\u0100\1\u6f00\20\u0100"+
    "\1\u7000\1\u7100\25\u0100\1\u7200\34\u0100\1\u7300\14\u1f00\2\u0100"+
    "\1\u7400\u0b06\u1f00\1\u7500\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\4\1\5\22\0\1\6"+
    "\2\0\1\7\1\10\1\11\1\12\5\0\1\13\1\0"+
    "\1\14\1\15\12\16\2\0\1\17\1\0\1\20\2\0"+
    "\32\21\4\0\1\21\1\0\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\2\21\1\33\1\34"+
    "\1\35\1\36\1\37\1\21\1\40\1\41\1\42\1\43"+
    "\1\44\1\21\1\45\2\21\1\46\1\47\1\50\7\0"+
    "\1\3\44\0\1\21\12\0\1\21\4\0\1\21\5\0"+
    "\27\21\1\0\37\21\1\0\u01ca\21\4\0\14\21\16\0"+
    "\5\21\7\0\1\21\1\0\1\21\21\0\160\16\5\21"+
    "\1\0\2\21\2\0\1\51\3\21\1\0\1\21\6\0"+
    "\1\21\1\0\3\21\1\0\1\21\1\0\24\21\1\0"+
    "\123\21\1\0\213\21\1\0\5\16\2\51\246\21\1\0"+
    "\46\21\2\0\1\21\6\0\51\21\10\0\55\16\1\0"+
    "\1\16\1\0\2\16\1\0\2\16\1\0\1\16\10\0"+
    "\33\21\4\0\4\21\35\0\13\16\5\0\53\21\37\16"+
    "\4\0\2\21\1\16\143\21\1\0\1\21\7\16\2\0"+
    "\6\16\2\21\2\16\1\0\4\16\2\21\12\16\3\21"+
    "\2\0\1\21\20\0\1\21\1\16\36\21\33\16\2\0"+
    "\131\21\13\16\1\21\16\0\12\16\41\21\11\16\2\21"+
    "\4\0\1\21\2\0\1\16\2\0\26\21\4\16\1\21"+
    "\11\16\1\21\3\16\1\21\5\16\22\0\31\21\3\16"+
    "\4\0\13\21\65\0\25\21\1\0\10\21\25\0\17\16"+
    "\1\0\41\16\66\21\3\16\1\21\22\16\1\21\7\16"+
    "\12\21\2\16\2\0\12\16\1\0\20\21\3\16\1\0"+
    "\10\21\2\0\2\21\2\0\26\21\1\0\7\21\1\0"+
    "\1\21\3\0\4\21\2\0\1\16\1\21\7\16\2\0"+
    "\2\16\2\0\3\16\1\21\10\0\1\16\4\0\2\21"+
    "\1\0\3\21\2\16\2\0\12\16\2\21\12\0\1\21"+
    "\1\0\1\16\2\0\3\16\1\0\6\21\4\0\2\21"+
    "\2\0\26\21\1\0\7\21\1\0\2\21\1\0\2\21"+
    "\1\0\2\21\2\0\1\16\1\0\5\16\4\0\2\16"+
    "\2\0\3\16\3\0\1\16\7\0\4\21\1\0\1\21"+
    "\7\0\14\16\3\21\1\16\13\0\3\16\1\0\11\21"+
    "\1\0\3\21\1\0\26\21\1\0\7\21\1\0\2\21"+
    "\1\0\5\21\2\0\1\16\1\21\10\16\1\0\3\16"+
    "\1\0\3\16\2\0\1\21\17\0\2\21\2\16\2\0"+
    "\12\16\11\0\1\21\6\16\1\0\3\16\1\0\10\21"+
    "\2\0\2\21\2\0\26\21\1\0\7\21\1\0\2\21"+
    "\1\0\5\21\2\0\1\16\1\21\7\16\2\0\2\16"+
    "\2\0\3\16\10\0\2\16\4\0\2\21\1\0\3\21"+
    "\2\16\2\0\12\16\1\0\1\21\20\0\1\16\1\21"+
    "\1\0\6\21\3\0\3\21\1\0\4\21\3\0\2\21"+
    "\1\0\1\21\1\0\2\21\3\0\2\21\3\0\3\21"+
    "\3\0\14\21\4\0\5\16\3\0\3\16\1\0\4\16"+
    "\2\0\1\21\6\0\1\16\16\0\12\16\20\0\5\16"+
    "\10\21\1\0\3\21\1\0\27\21\1\0\20\21\3\0"+
    "\1\21\7\16\1\0\3\16\1\0\4\16\7\0\2\16"+
    "\1\0\3\21\5\0\2\21\2\16\2\0\12\16\20\0"+
    "\1\21\3\16\1\0\10\21\1\0\3\21\1\0\27\21"+
    "\1\0\12\21\1\0\5\21\2\0\1\16\1\21\7\16"+
    "\1\0\3\16\1\0\4\16\7\0\2\16\7\0\1\21"+
    "\1\0\2\21\2\16\2\0\12\16\1\0\2\21\15\0"+
    "\4\16\1\0\10\21\1\0\3\21\1\0\51\21\2\16"+
    "\1\21\7\16\1\0\3\16\1\0\4\16\1\21\5\0"+
    "\3\21\1\16\7\0\3\21\2\16\2\0\12\16\12\0"+
    "\6\21\2\0\2\16\1\0\22\21\3\0\30\21\1\0"+
    "\11\21\1\0\1\21\2\0\7\21\3\0\1\16\4\0"+
    "\6\16\1\0\1\16\1\0\10\16\6\0\12\16\2\0"+
    "\2\16\15\0\60\21\1\16\1\21\10\16\5\0\7\21"+
    "\10\16\1\0\12\16\47\0\2\21\1\0\1\21\1\0"+
    "\5\21\1\0\30\21\1\0\1\21\1\0\12\21\1\16"+
    "\1\21\12\16\1\21\2\0\5\21\1\0\1\21\1\0"+
    "\6\16\2\0\12\16\2\0\4\21\40\0\1\21\27\0"+
    "\2\16\6\0\12\16\13\0\1\16\1\0\1\16\1\0"+
    "\1\16\4\0\2\16\10\21\1\0\44\21\4\0\24\16"+
    "\1\0\2\16\5\21\13\16\1\0\44\16\11\0\1\16"+
    "\71\0\53\21\24\16\1\21\12\16\6\0\6\21\4\16"+
    "\4\21\3\16\1\21\3\16\2\21\7\16\3\21\4\16"+
    "\15\21\14\16\1\21\17\16\2\0\46\21\1\0\1\21"+
    "\5\0\1\21\2\0\53\21\1\0\115\21\1\0\4\21"+
    "\2\0\7\21\1\0\1\21\1\0\4\21\2\0\51\21"+
    "\1\0\4\21\2\0\41\21\1\0\4\21\2\0\7\21"+
    "\1\0\1\21\1\0\4\21\2\0\17\21\1\0\71\21"+
    "\1\0\4\21\2\0\103\21\2\0\3\16\40\0\20\21"+
    "\20\0\126\21\2\0\6\21\3\0\u016c\21\2\0\21\21"+
    "\1\0\32\21\5\0\113\21\3\0\13\21\7\0\15\21"+
    "\1\0\4\21\3\16\13\0\22\21\3\16\13\0\22\21"+
    "\2\16\14\0\15\21\1\0\3\21\1\0\2\16\14\0"+
    "\64\21\40\16\3\0\1\21\4\0\1\21\1\16\2\0"+
    "\12\16\41\0\3\16\2\0\12\16\6\0\131\21\7\0"+
    "\51\21\1\16\1\21\5\0\106\21\12\0\37\21\1\0"+
    "\14\16\4\0\14\16\12\0\12\16\36\21\2\0\5\21"+
    "\13\0\54\21\4\0\32\21\6\0\12\16\46\0\27\21"+
    "\5\16\4\0\65\21\12\16\1\0\35\16\2\0\13\16"+
    "\6\0\12\16\15\0\1\21\10\0\16\16\1\51\101\0"+
    "\5\16\57\21\21\16\7\21\4\0\12\16\21\0\11\16"+
    "\14\0\3\16\36\21\15\16\2\21\12\16\54\21\16\16"+
    "\14\0\44\21\24\16\10\0\12\16\3\0\3\21\12\16"+
    "\44\21\2\0\11\21\7\0\53\21\2\0\3\21\20\0"+
    "\3\16\1\0\25\16\4\21\1\16\6\21\1\16\2\21"+
    "\3\16\1\21\5\0\300\21\72\16\1\0\5\16\26\21"+
    "\2\0\6\21\2\0\46\21\2\0\6\21\2\0\10\21"+
    "\1\0\1\21\1\0\1\21\1\0\1\21\1\0\37\21"+
    "\2\0\65\21\1\0\7\21\1\0\1\21\3\0\3\21"+
    "\1\0\7\21\3\0\4\21\2\0\6\21\4\0\15\21"+
    "\5\0\3\21\1\0\7\21\53\0\2\3\25\0\2\16"+
    "\23\0\1\16\34\0\1\21\15\0\1\21\20\0\15\21"+
    "\63\0\15\16\4\51\1\16\3\51\14\16\21\0\1\21"+
    "\4\0\1\21\2\0\12\21\1\0\1\21\3\0\5\21"+
    "\6\0\1\21\1\0\1\21\1\0\1\21\1\0\4\21"+
    "\1\0\13\21\2\0\4\21\5\0\5\21\4\0\1\21"+
    "\21\0\51\21\u022d\0\64\51\26\0\57\21\1\0\57\21"+
    "\1\0\205\21\6\0\4\21\3\16\2\21\14\0\46\21"+
    "\1\0\1\21\5\0\1\21\2\0\70\21\7\0\1\21"+
    "\17\0\1\16\27\21\11\0\7\21\1\0\7\21\1\0"+
    "\7\21\1\0\7\21\1\0\7\21\1\0\7\21\1\0"+
    "\7\21\1\0\7\21\1\0\40\16\57\0\1\51\325\0"+
    "\3\21\31\0\11\21\6\16\1\0\5\21\2\0\5\21"+
    "\4\0\126\21\2\0\2\16\2\0\3\21\1\0\132\21"+
    "\1\0\4\21\5\0\53\21\1\0\136\21\21\0\33\21"+
    "\65\0\306\21\112\0\360\21\20\0\215\21\103\0\56\21"+
    "\2\0\15\21\3\0\20\21\12\16\2\21\24\0\57\21"+
    "\1\16\3\51\1\0\12\16\1\0\37\21\2\16\120\21"+
    "\2\16\45\0\11\21\2\0\147\21\2\0\65\21\2\0"+
    "\5\21\60\0\13\21\1\16\3\21\1\16\4\21\1\16"+
    "\27\21\5\16\30\0\64\21\14\0\2\16\62\21\22\16"+
    "\12\0\12\16\6\0\22\16\6\21\3\0\1\21\1\0"+
    "\2\21\13\16\34\21\10\16\2\0\27\21\15\16\14\0"+
    "\35\21\3\0\4\16\57\21\16\16\16\0\1\21\12\16"+
    "\6\0\5\21\1\16\12\21\12\16\5\21\1\0\51\21"+
    "\16\16\11\0\3\21\1\16\10\21\2\16\2\0\12\16"+
    "\6\0\27\21\3\0\1\21\3\16\62\21\1\16\1\21"+
    "\3\16\2\21\2\16\5\21\2\16\1\21\1\16\1\21"+
    "\30\0\3\21\2\0\13\21\5\16\2\0\3\21\2\16"+
    "\12\0\6\21\2\0\6\21\2\0\6\21\11\0\7\21"+
    "\1\0\7\21\1\0\53\21\1\0\14\21\10\0\163\21"+
    "\10\16\1\0\2\16\2\0\12\16\6\0\244\21\14\0"+
    "\27\21\4\0\61\21\4\0\u0100\52\156\21\2\0\152\21"+
    "\46\0\7\21\14\0\5\21\5\0\1\21\1\16\12\21"+
    "\1\0\15\21\1\0\5\21\1\0\1\21\1\0\2\21"+
    "\1\0\2\21\1\0\154\21\41\0\213\21\6\51\332\21"+
    "\22\0\100\21\2\0\66\21\50\0\12\21\2\51\4\0"+
    "\20\16\20\0\20\16\3\0\2\16\30\0\3\16\40\0"+
    "\1\51\1\21\1\51\1\21\1\51\1\0\1\51\1\21"+
    "\1\51\1\21\1\51\1\21\1\51\1\21\1\51\176\21"+
    "\23\0\12\16\7\0\32\21\4\0\1\16\1\0\32\21"+
    "\13\0\70\21\2\16\37\21\3\0\6\21\2\0\6\21"+
    "\2\0\6\21\2\0\3\21\43\0\14\21\1\0\32\21"+
    "\1\0\23\21\1\0\2\21\1\0\17\21\2\0\16\21"+
    "\42\0\173\21\105\0\65\21\210\0\1\16\202\0\35\21"+
    "\3\0\61\21\17\0\1\16\37\0\40\21\15\0\36\21"+
    "\5\0\46\21\5\16\5\0\36\21\2\0\44\21\4\0"+
    "\10\21\1\0\5\21\52\0\236\21\2\0\12\16\6\0"+
    "\44\21\4\0\44\21\4\0\50\21\10\0\64\21\234\0"+
    "\67\21\11\0\26\21\12\0\10\21\230\0\6\21\2\0"+
    "\1\21\1\0\54\21\1\0\2\21\3\0\1\21\2\0"+
    "\27\21\12\0\27\21\11\0\37\21\101\0\23\21\1\0"+
    "\2\21\12\0\26\21\12\0\32\21\106\0\70\21\6\0"+
    "\2\21\100\0\1\21\3\16\1\0\2\16\5\0\4\16"+
    "\4\21\1\0\3\21\1\0\35\21\2\0\3\16\4\0"+
    "\1\16\40\0\35\21\3\0\35\21\43\0\10\21\1\0"+
    "\34\21\2\16\31\0\66\21\12\0\26\21\12\0\23\21"+
    "\15\0\22\21\156\0\111\21\67\0\63\21\15\0\63\21"+
    "\15\0\44\21\4\16\10\0\12\16\306\0\35\21\12\0"+
    "\1\21\10\0\26\21\13\16\217\0\27\21\11\0\3\16"+
    "\65\21\17\16\37\0\12\16\17\0\4\16\55\21\13\16"+
    "\25\0\31\21\7\0\12\16\6\0\3\16\44\21\16\16"+
    "\1\0\12\16\4\0\1\21\2\16\11\0\43\21\1\16"+
    "\2\0\1\21\11\0\3\16\60\21\16\16\4\21\4\0"+
    "\4\16\3\0\12\16\1\21\1\0\1\21\43\0\22\21"+
    "\1\0\31\21\14\16\6\0\1\16\101\0\7\21\1\0"+
    "\1\21\1\0\4\21\1\0\17\21\1\0\12\21\7\0"+
    "\57\21\14\16\5\0\12\16\6\0\4\16\1\0\10\21"+
    "\2\0\2\21\2\0\26\21\1\0\7\21\1\0\2\21"+
    "\1\0\5\21\1\0\2\16\1\21\7\16\2\0\2\16"+
    "\2\0\3\16\2\0\1\21\6\0\1\16\5\0\5\21"+
    "\2\16\2\0\7\16\3\0\5\16\213\0\65\21\22\16"+
    "\4\21\5\0\12\16\4\0\1\16\1\21\40\0\60\21"+
    "\24\16\2\21\1\0\1\21\10\0\12\16\246\0\57\21"+
    "\7\16\2\0\11\16\27\0\4\21\2\16\42\0\60\21"+
    "\21\16\3\0\1\21\13\0\12\16\46\0\53\21\15\16"+
    "\1\21\7\0\12\16\66\0\33\21\2\0\17\16\4\0"+
    "\12\16\306\0\54\21\17\16\145\0\100\21\12\16\25\0"+
    "\1\21\240\0\10\21\2\0\47\21\7\16\2\0\7\16"+
    "\1\21\1\0\1\21\1\16\33\0\1\21\12\16\50\21"+
    "\7\16\1\21\4\16\10\0\1\16\10\0\1\21\13\16"+
    "\56\21\20\16\3\0\1\21\42\0\71\21\7\0\11\21"+
    "\1\0\45\21\10\16\1\0\10\16\1\21\17\0\12\16"+
    "\30\0\36\21\2\0\26\16\1\0\16\16\111\0\7\21"+
    "\1\0\2\21\1\0\46\21\6\16\3\0\1\16\1\0"+
    "\2\16\1\0\7\16\1\21\1\16\10\0\12\16\6\0"+
    "\6\21\1\0\2\21\1\0\40\21\5\16\1\0\2\16"+
    "\1\0\5\16\1\21\7\0\12\16\u0136\0\23\21\4\16"+
    "\11\0\232\21\146\0\157\21\21\0\304\21\274\0\57\21"+
    "\321\0\107\21\271\0\71\21\7\0\37\21\1\0\12\16"+
    "\146\0\36\21\2\0\5\16\13\0\60\21\7\16\11\0"+
    "\4\21\14\0\12\16\11\0\25\21\5\0\23\21\260\0"+
    "\100\21\200\0\113\21\4\0\1\16\1\21\67\16\7\0"+
    "\4\16\15\21\100\0\2\21\1\0\1\21\34\0\370\21"+
    "\10\0\363\21\15\0\37\21\61\0\3\21\21\0\4\21"+
    "\10\0\u018c\21\4\0\153\21\5\0\15\21\3\0\11\21"+
    "\7\0\12\21\3\0\2\16\306\0\5\16\3\0\6\16"+
    "\10\0\10\16\2\0\7\16\36\0\4\16\224\0\3\16"+
    "\273\0\125\21\1\0\107\21\1\0\2\21\2\0\1\21"+
    "\2\0\2\21\2\0\4\21\1\0\14\21\1\0\1\21"+
    "\1\0\7\21\1\0\101\21\1\0\4\21\2\0\10\21"+
    "\1\0\7\21\1\0\34\21\1\0\4\21\1\0\5\21"+
    "\1\0\1\21\3\0\7\21\1\0\u0154\21\2\0\31\21"+
    "\1\0\31\21\1\0\37\21\1\0\31\21\1\0\37\21"+
    "\1\0\31\21\1\0\37\21\1\0\31\21\1\0\37\21"+
    "\1\0\31\21\1\0\10\21\2\0\151\16\4\0\62\16"+
    "\10\0\1\16\16\0\1\16\26\0\5\16\1\0\17\16"+
    "\120\0\7\16\1\0\21\16\2\0\7\16\1\0\2\16"+
    "\1\0\5\16\325\0\55\21\3\0\7\16\7\21\2\0"+
    "\12\16\4\0\1\21\u0171\0\54\21\16\16\6\0\305\21"+
    "\13\0\7\16\51\0\104\21\7\16\1\21\4\0\12\16"+
    "\246\0\4\21\1\0\33\21\1\0\2\21\1\0\1\21"+
    "\2\0\1\21\1\0\12\21\1\0\4\21\1\0\1\21"+
    "\1\0\1\21\6\0\1\21\4\0\1\21\1\0\1\21"+
    "\1\0\1\21\1\0\3\21\1\0\2\21\1\0\1\21"+
    "\2\0\1\21\1\0\1\21\1\0\1\21\1\0\1\21"+
    "\1\0\1\21\1\0\2\21\1\0\1\21\2\0\4\21"+
    "\1\0\7\21\1\0\4\21\1\0\4\21\1\0\1\21"+
    "\1\0\12\21\1\0\21\21\5\0\3\21\1\0\5\21"+
    "\1\0\21\21\164\0\32\51\6\0\32\51\6\0\32\51"+
    "\166\0\327\21\51\0\65\21\13\0\336\21\2\0\u0182\21"+
    "\16\0\u0131\21\37\0\36\21\342\0\360\16\20\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[30208];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\31\0\1\1\2\2\2\1\1\3\1\1\1\4\2\5"+
    "\3\4\1\0\3\4\2\6\1\7\1\10\1\11\2\6"+
    "\1\12\2\4\3\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\17\21\1\23\2\24\2\13\2\25\3\4"+
    "\2\26\1\13\1\4\1\27\2\21\1\30\1\31\3\0"+
    "\1\32\1\33\5\0\2\6\42\0\1\34\2\0\1\35"+
    "\1\36\1\37\3\32\3\33\1\0\1\40\2\0\1\41"+
    "\34\0\1\42\6\0\1\43\26\0\1\44\1\45\6\0"+
    "\1\46\2\0\1\47\1\50\17\0\1\51\1\0\1\52"+
    "\1\53\1\54\1\55\1\56\1\0\1\57\16\0\1\60"+
    "\1\0\1\61\1\0\1\62\1\63\1\64\1\0\1\65"+
    "\1\66\6\0\1\67\1\70\3\0\1\71\1\72\1\73"+
    "\1\74\1\75\1\76\1\77";

  private static int [] zzUnpackAction() {
    int [] result = new int[296];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\53\0\126\0\201\0\254\0\327\0\u0102\0\u012d"+
    "\0\u0158\0\u0183\0\u01ae\0\u01d9\0\u0204\0\u022f\0\u025a\0\u0285"+
    "\0\u02b0\0\u02db\0\u0306\0\u0331\0\u035c\0\u0387\0\u03b2\0\u03dd"+
    "\0\u0408\0\u0433\0\u045e\0\u0489\0\u04b4\0\u04df\0\u050a\0\u0535"+
    "\0\u0535\0\u0535\0\u0560\0\u058b\0\u05b6\0\u05e1\0\u058b\0\u060c"+
    "\0\u0637\0\u0662\0\u068d\0\u06b8\0\u0535\0\u06e3\0\u0535\0\u070e"+
    "\0\u0739\0\u0535\0\u0764\0\u078f\0\u0535\0\u07ba\0\u07e5\0\u0535"+
    "\0\u0535\0\u0810\0\u0535\0\u083b\0\u0535\0\u0535\0\u0866\0\u0891"+
    "\0\u08bc\0\u08e7\0\u0912\0\u093d\0\u0968\0\u0993\0\u09be\0\u09e9"+
    "\0\u0a14\0\u0a3f\0\u0a6a\0\u0a95\0\u0ac0\0\u0535\0\u0535\0\u0aeb"+
    "\0\u0b16\0\u0b41\0\u0535\0\u0b6c\0\u0b97\0\u0bc2\0\u0bed\0\u0535"+
    "\0\u0c18\0\u0c43\0\u0c6e\0\u0535\0\u0c99\0\u0cc4\0\u0535\0\u0535"+
    "\0\u0cef\0\u0d1a\0\u0d45\0\u0d70\0\u0d9b\0\u060c\0\u0dc6\0\u0df1"+
    "\0\u0662\0\u0e1c\0\u0e47\0\u0e72\0\u0e9d\0\u0764\0\u0ec8\0\u07ba"+
    "\0\u07e5\0\u0ef3\0\u0f1e\0\u0f49\0\u0f74\0\u0f9f\0\u0fca\0\u0ff5"+
    "\0\u1020\0\u104b\0\u1076\0\u10a1\0\u10cc\0\u10f7\0\u1122\0\u114d"+
    "\0\u1178\0\u11a3\0\u11ce\0\u11f9\0\u1224\0\u124f\0\u127a\0\u12a5"+
    "\0\u12d0\0\u12fb\0\u1326\0\u1351\0\u137c\0\u13a7\0\u0535\0\u0c99"+
    "\0\u13d2\0\u0535\0\u0535\0\u13fd\0\u0535\0\u1428\0\u1453\0\u0535"+
    "\0\u147e\0\u14a9\0\u14d4\0\u0535\0\u14ff\0\u152a\0\u0535\0\u1555"+
    "\0\u1580\0\u15ab\0\u15d6\0\u1601\0\u162c\0\u1657\0\u1682\0\u16ad"+
    "\0\u16d8\0\u1703\0\u172e\0\u1759\0\u1784\0\u17af\0\u17da\0\u1805"+
    "\0\u1830\0\u185b\0\u1886\0\u18b1\0\u18dc\0\u1907\0\u1932\0\u195d"+
    "\0\u1988\0\u19b3\0\u19de\0\u0535\0\u1a09\0\u1a34\0\u1a5f\0\u1a8a"+
    "\0\u1ab5\0\u1ae0\0\u0535\0\u1b0b\0\u1b36\0\u1b61\0\u1b8c\0\u1bb7"+
    "\0\u1be2\0\u1c0d\0\u1c38\0\u1c63\0\u1c8e\0\u1cb9\0\u1ce4\0\u1d0f"+
    "\0\u1d3a\0\u1d65\0\u1d90\0\u1dbb\0\u1de6\0\u1e11\0\u1e3c\0\u1e67"+
    "\0\u1e92\0\u0535\0\u0535\0\u1ebd\0\u1ee8\0\u1f13\0\u1f3e\0\u1f69"+
    "\0\u1f94\0\u0535\0\u1fbf\0\u1fea\0\u0535\0\u0535\0\u2015\0\u2040"+
    "\0\u206b\0\u2096\0\u20c1\0\u20ec\0\u2117\0\u2142\0\u216d\0\u2198"+
    "\0\u21c3\0\u21ee\0\u2219\0\u2244\0\u226f\0\u0535\0\u229a\0\u0535"+
    "\0\u0535\0\u0535\0\u0535\0\u0535\0\u22c5\0\u0535\0\u22f0\0\u231b"+
    "\0\u2346\0\u2371\0\u239c\0\u23c7\0\u23f2\0\u241d\0\u2448\0\u2473"+
    "\0\u249e\0\u24c9\0\u24f4\0\u251f\0\u0535\0\u254a\0\u0535\0\u2575"+
    "\0\u0535\0\u0535\0\u0535\0\u25a0\0\u0535\0\u0535\0\u25cb\0\u25f6"+
    "\0\u2621\0\u264c\0\u2677\0\u26a2\0\u0535\0\u0535\0\u26cd\0\u26f8"+
    "\0\u2723\0\u0535\0\u0535\0\u0535\0\u0535\0\u0535\0\u0535\0\u0535";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[296];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\32\2\33\1\34\3\33\2\32\1\35\5\32\1\36"+
    "\34\32\1\37\1\33\1\34\1\37\1\33\1\37\2\32"+
    "\1\40\5\32\1\36\33\32\2\41\3\42\1\43\2\41"+
    "\1\44\35\41\1\45\1\41\1\46\2\41\10\0\1\47"+
    "\42\0\1\41\5\50\1\51\40\41\1\52\3\41\1\0"+
    "\5\53\1\54\4\0\1\55\5\0\25\56\5\0\1\57"+
    "\5\60\1\61\5\57\3\62\2\57\25\62\3\57\1\62"+
    "\1\57\1\41\5\63\1\64\44\41\1\65\5\66\1\67"+
    "\4\65\1\70\37\65\1\71\6\72\44\71\1\73\1\74"+
    "\4\72\1\74\44\73\6\75\1\76\13\75\1\77\1\100"+
    "\1\101\1\102\1\75\1\103\2\75\1\104\1\75\1\105"+
    "\1\75\1\106\1\107\2\75\1\110\32\75\1\111\1\112"+
    "\3\75\1\113\4\75\1\114\1\75\1\115\14\75\20\41"+
    "\1\116\32\41\17\117\1\120\33\117\17\121\1\122\33\121"+
    "\2\41\3\123\1\124\11\41\1\125\52\41\1\126\52\41"+
    "\1\127\33\41\17\130\1\131\33\130\17\121\1\132\33\121"+
    "\17\41\1\133\53\41\1\134\32\41\11\75\1\135\5\75"+
    "\1\136\52\75\1\136\33\75\1\32\2\0\1\32\3\0"+
    "\2\32\1\0\5\32\1\0\33\32\1\0\6\33\44\0"+
    "\1\32\2\33\1\34\3\33\2\32\1\0\5\32\1\0"+
    "\33\32\6\0\1\137\55\0\1\140\1\141\2\0\1\142"+
    "\36\0\1\37\2\33\1\37\1\33\1\37\121\0\1\42"+
    "\64\0\1\143\104\0\1\144\54\0\1\145\3\0\5\146"+
    "\1\147\45\0\5\146\1\147\2\0\1\150\42\0\6\151"+
    "\12\0\25\152\6\0\5\53\1\153\45\0\5\53\1\153"+
    "\2\0\1\150\57\0\1\56\2\0\25\56\6\0\5\60"+
    "\1\154\45\0\5\60\1\154\3\0\1\155\41\0\5\156"+
    "\1\157\45\0\5\156\1\157\3\0\1\155\41\0\5\160"+
    "\1\161\4\0\1\70\40\0\5\160\1\161\3\0\1\162"+
    "\1\70\40\0\6\72\45\0\1\74\4\72\1\74\73\0"+
    "\1\163\10\0\1\164\2\0\1\165\35\0\1\166\57\0"+
    "\1\167\55\0\1\170\46\0\1\171\1\172\54\0\1\173"+
    "\43\0\1\174\70\0\1\175\34\0\1\176\52\0\1\177"+
    "\53\0\1\200\10\0\1\201\2\0\1\202\35\0\1\203"+
    "\56\0\1\204\46\0\1\205\70\0\1\206\23\0\1\207"+
    "\35\0\17\121\1\0\33\121\15\0\1\210\37\0\1\123"+
    "\65\0\1\211\52\0\1\212\52\0\1\213\52\0\1\214"+
    "\52\0\1\215\52\0\1\216\43\0\1\217\55\0\1\217"+
    "\1\220\2\0\1\221\43\0\1\222\55\0\1\223\62\0"+
    "\25\224\6\0\1\144\2\225\1\144\1\226\1\144\1\227"+
    "\44\0\1\145\2\230\1\145\1\231\1\145\1\232\44\0"+
    "\5\146\1\147\2\0\1\233\61\0\1\234\33\0\5\235"+
    "\1\236\4\0\1\151\2\0\1\152\2\0\25\152\6\0"+
    "\5\53\1\153\2\0\1\233\42\0\5\60\1\154\3\0"+
    "\1\233\60\0\1\237\33\0\5\156\1\157\3\0\1\233"+
    "\60\0\1\70\74\0\1\240\46\0\1\241\44\0\1\242"+
    "\51\0\1\243\45\0\1\244\54\0\1\245\61\0\1\246"+
    "\41\0\1\247\62\0\1\250\62\0\1\251\36\0\1\252"+
    "\64\0\1\253\57\0\1\254\47\0\1\255\46\0\1\256"+
    "\44\0\1\257\51\0\1\260\56\0\1\261\61\0\1\262"+
    "\36\0\1\263\35\0\1\264\52\0\1\265\52\0\1\266"+
    "\52\0\1\267\52\0\1\270\52\0\1\271\52\0\1\272"+
    "\52\0\1\273\52\0\1\217\57\0\1\224\2\0\25\224"+
    "\7\0\1\225\50\0\2\227\3\225\1\226\44\227\3\0"+
    "\1\230\50\0\2\232\3\230\1\231\44\232\21\0\1\274"+
    "\33\0\5\235\1\236\45\0\5\235\1\236\2\0\1\275"+
    "\67\0\1\276\67\0\1\277\43\0\1\300\54\0\1\301"+
    "\55\0\1\302\31\0\1\303\74\0\1\304\40\0\1\305"+
    "\64\0\1\306\41\0\1\307\61\0\1\310\45\0\1\311"+
    "\61\0\1\312\36\0\1\313\67\0\1\314\43\0\1\315"+
    "\54\0\1\316\56\0\1\317\41\0\1\320\61\0\1\321"+
    "\37\0\1\322\52\0\1\323\54\0\1\324\47\0\1\325"+
    "\60\0\1\326\62\0\1\327\52\0\1\330\47\0\1\331"+
    "\33\0\1\332\72\0\1\333\47\0\1\334\43\0\1\335"+
    "\64\0\1\336\53\0\1\337\37\0\1\340\65\0\1\341"+
    "\31\0\1\342\70\0\1\343\54\0\1\344\32\0\1\345"+
    "\52\0\1\346\72\0\1\347\47\0\1\350\43\0\1\351"+
    "\64\0\1\352\40\0\1\353\62\0\1\354\54\0\1\355"+
    "\50\0\1\356\52\0\1\357\47\0\1\360\52\0\1\361"+
    "\54\0\1\362\43\0\1\363\52\0\1\364\52\0\1\365"+
    "\51\0\1\366\62\0\1\367\43\0\1\370\44\0\1\371"+
    "\72\0\1\372\32\0\1\373\57\0\1\374\57\0\1\375"+
    "\40\0\1\376\57\0\1\377\62\0\1\u0100\43\0\1\u0101"+
    "\64\0\1\u0102\37\0\1\u0103\57\0\1\u0104\44\0\1\u0105"+
    "\52\0\1\u0106\50\0\1\u0107\52\0\1\u0108\62\0\1\u0109"+
    "\65\0\1\u010a\52\0\1\u010b\45\0\1\u010c\54\0\1\u010d"+
    "\35\0\1\u010e\45\0\1\u010f\74\0\1\u0110\30\0\1\u0111"+
    "\52\0\1\u0112\52\0\1\u0113\57\0\1\u0114\45\0\1\u0115"+
    "\52\0\1\u0116\62\0\1\u0117\63\0\1\u0118\53\0\1\u0119"+
    "\52\0\1\u011a\52\0\1\u011b\43\0\1\u011c\45\0\1\u011d"+
    "\44\0\1\u011e\60\0\1\u011f\65\0\1\u0120\52\0\1\u0121"+
    "\31\0\1\u0122\52\0\1\u0123\52\0\1\u0124\52\0\1\u0125"+
    "\52\0\1\u0126\52\0\1\u0127\52\0\1\u0128\32\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[10062];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\31\0\6\1\3\11\4\1\1\0\5\1\1\11\1\1"+
    "\1\11\2\1\1\11\2\1\1\11\2\1\2\11\1\1"+
    "\1\11\1\1\2\11\17\1\2\11\3\1\1\11\4\1"+
    "\1\11\3\1\1\11\2\1\2\11\3\0\2\1\5\0"+
    "\2\1\42\0\1\11\2\0\2\11\1\1\1\11\2\1"+
    "\1\11\2\1\1\0\1\11\2\0\1\11\34\0\1\11"+
    "\6\0\1\11\26\0\2\11\6\0\1\11\2\0\2\11"+
    "\17\0\1\11\1\0\5\11\1\0\1\11\16\0\1\11"+
    "\1\0\1\11\1\0\3\11\1\0\2\11\6\0\2\11"+
    "\3\0\7\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[296];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Mason2TemplatingLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }
	protected int bufferStart;

    public void setTokenStart(int position){zzCurrentPos = zzStartRead = position;}
    public void setTokenEnd(int position){zzMarkedPos = position;}
    public CharSequence getBuffer(){ return zzBuffer;}
    public int getBufferEnd() {return zzEndRead;}
    public int getNextTokenStart(){ return zzMarkedPos;}
    public boolean isLastToken(){ return zzMarkedPos == zzEndRead; }
	public int getBufferStart(){ return bufferStart;	}
 	public int getRealLexicalState() {return zzLexicalState;  }

 	public void pullback(int i)
 	{
 		int length = yylength();
 		if( i == length)
 		{
 			return;
 		}
 		assert i < length: "Pulling back for " + i + " of " + length + " for: " + yytext();
		yypushback(length - i);
 	}

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return zzMarkedPos;
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    bufferStart = zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
    resetInternals();
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public int yystate() {
    return packState(myPerlLexer.yystate(), isInitialState() ? zzLexicalState: 0xFFFF);
  }

  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }
    message += "; Real state is: " + zzLexicalState + "; yystate(): " + yystate();

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType perlAdvance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            switch (zzLexicalState) {
            case CALL_PATH: {
              yybegin(YYINITIAL);return STRING_CONTENT;
            }  // fall though
            case 297: break;
            case SELECT_OPEN_TAG: {
              yybegin(YYINITIAL);return MASON_TEMPLATE_BLOCK_HTML;
            }  // fall though
            case 298: break;
            case SELECT_CLOSE_TAG: {
              yybegin(YYINITIAL);return MASON_TEMPLATE_BLOCK_HTML;
            }  // fall though
            case 299: break;
            case NON_EMPTY_DOC: {
              yybegin(YYINITIAL);return COMMENT_BLOCK;
            }  // fall though
            case 300: break;
            case NON_EMPTY_TEXT: {
              yybegin(YYINITIAL);return STRING_CONTENT;
            }  // fall though
            case 301: break;
            case CHECK_SPACE_CLEAR_LINE: {
              yybegin(YYINITIAL);return MASON_TEMPLATE_BLOCK_HTML;
            }  // fall though
            case 302: break;
            case CHECK_SPACE: {
              yybegin(YYINITIAL);return MASON_TEMPLATE_BLOCK_HTML;
            }  // fall though
            case 303: break;
            default:
        return null;
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { yybegin(NON_CLEAR_LINE);return MASON_TEMPLATE_BLOCK_HTML;
            }
          // fall through
          case 64: break;
          case 2:
            { yybegin(CHECK_SPACE_CLEAR_LINE);
            }
          // fall through
          case 65: break;
          case 3:
            { yybegin(CHECK_SPACE);
            }
          // fall through
          case 66: break;
          case 4:
            { return delegateLexing();
            }
          // fall through
          case 67: break;
          case 5:
            { yybegin(AFTER_PERL_LINE);return SEMICOLON;
            }
          // fall through
          case 68: break;
          case 6:
            { return TokenType.WHITE_SPACE;
            }
          // fall through
          case 69: break;
          case 7:
            { return COMMA;
            }
          // fall through
          case 70: break;
          case 8:
            { return IDENTIFIER;
            }
          // fall through
          case 71: break;
          case 9:
            { pushback();yybegin(CALL_EXPRESSION_DELEGATED);
            }
          // fall through
          case 72: break;
          case 10:
            { yybegin(CALL_PATH);
            }
          // fall through
          case 73: break;
          case 11:
            { 
            }
          // fall through
          case 74: break;
          case 12:
            { pushback();yybegin(CALL_EXPRESSION);return STRING_CONTENT;
            }
          // fall through
          case 75: break;
          case 13:
            { yypushback(1);yybegin(YYINITIAL);
            }
          // fall through
          case 76: break;
          case 14:
            { yybegin(YYINITIAL);return TokenType.WHITE_SPACE;
            }
          // fall through
          case 77: break;
          case 15:
            { yypushback(1);yybegin(NON_CLEAR_LINE);
            }
          // fall through
          case 78: break;
          case 16:
            { yybegin(NON_CLEAR_LINE);return TokenType.WHITE_SPACE;
            }
          // fall through
          case 79: break;
          case 17:
            { yypushback(1);yybegin(NON_CLEAR_LINE);return MASON_TEMPLATE_BLOCK_HTML;
            }
          // fall through
          case 80: break;
          case 18:
            { yybegin(PERL_EXPR_BLOCK); startPerlExpression(); return MASON_BLOCK_OPENER;
            }
          // fall through
          case 81: break;
          case 19:
            { yybegin(AFTER_PERL_BLOCK);return MASON_TAG_CLOSER;
            }
          // fall through
          case 82: break;
          case 20:
            { yybegin(NON_EMPTY_DOC);
            }
          // fall through
          case 83: break;
          case 21:
            { setPerlToInitial();return TokenType.WHITE_SPACE;
            }
          // fall through
          case 84: break;
          case 22:
            { yybegin(NON_EMPTY_TEXT);
            }
          // fall through
          case 85: break;
          case 23:
            { yybegin(AFTER_PERL_BLOCK);endPerlExpression();return MASON_TAG_CLOSER;
            }
          // fall through
          case 86: break;
          case 24:
            { yybegin(PERL_LINE);return MASON_LINE_OPENER;
            }
          // fall through
          case 87: break;
          case 25:
            { yybegin(SELECT_OPEN_TAG);
            }
          // fall through
          case 88: break;
          case 26:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 2);
            { setPerlToInitial();return MASON_FILTERED_BLOCK_OPENER;
            }
          // fall through
          case 89: break;
          case 27:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 2);
            { setPerlToInitial();return MASON_FILTERED_BLOCK_CLOSER;
            }
          // fall through
          case 90: break;
          case 28:
            { pushback();yybegin(YYINITIAL);return TokenType.WHITE_SPACE;
            }
          // fall through
          case 91: break;
          case 29:
            { yybegin(CALL_EXPRESSION);startPerlExpression();return MASON_CALL_OPENER;
            }
          // fall through
          case 92: break;
          case 30:
            { yybegin(SELECT_CLOSE_TAG);
            }
          // fall through
          case 93: break;
          case 31:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 2);
            { return MASON_SELF_POINTER;
            }
          // fall through
          case 94: break;
          case 32:
            { yybegin(AFTER_PERL_BLOCK);endPerlExpression();return MASON_BLOCK_CLOSER;
            }
          // fall through
          case 95: break;
          case 33:
            { yybegin(AFTER_PERL_BLOCK);endPerlExpression();return MASON_CALL_CLOSER;
            }
          // fall through
          case 96: break;
          case 34:
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzMarkedPos, -3);
            { return TokenType.WHITE_SPACE;
            }
          // fall through
          case 97: break;
          case 35:
            { yybegin(DOC);return MASON_DOC_OPENER;
            }
          // fall through
          case 98: break;
          case 36:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 1);
            { yybegin(PERL_EXPR_BLOCK_FILTER);return MASON_EXPR_FILTER_PIPE;
            }
          // fall through
          case 99: break;
          case 37:
            { yybegin(PARAMETRIZED_TAG);startPerlExpression();return MASON_AFTER_OPENER;
            }
          // fall through
          case 100: break;
          case 38:
            { yybegin(INIT);startPerlExpression();return MASON_INIT_OPENER;
            }
          // fall through
          case 101: break;
          case 39:
            { yybegin(PERL);return MASON_PERL_OPENER;
            }
          // fall through
          case 102: break;
          case 40:
            { yybegin(TEXT);return MASON_TEXT_OPENER;
            }
          // fall through
          case 103: break;
          case 41:
            { yybegin(PARAMETRIZED_TAG);startPerlExpression();return MASON_AROUND_OPENER;
            }
          // fall through
          case 104: break;
          case 42:
            { yybegin(PARAMETRIZED_TAG);startPerlExpression();return MASON_BEFORE_OPENER;
            }
          // fall through
          case 105: break;
          case 43:
            { yybegin(CLASS);startPerlExpression();return MASON_CLASS_OPENER;
            }
          // fall through
          case 106: break;
          case 44:
            { yybegin(PARAMETRIZED_TAG);startPerlExpression();return MASON_FILTER_OPENER;
            }
          // fall through
          case 107: break;
          case 45:
            { yybegin(FLAGS);startPerlExpression();return MASON_FLAGS_OPENER;
            }
          // fall through
          case 108: break;
          case 46:
            { yybegin(PARAMETRIZED_TAG);startPerlExpression();return MASON_METHOD_OPENER;
            }
          // fall through
          case 109: break;
          case 47:
            { yybegin(AFTER_PERL_BLOCK);return MASON_AFTER_CLOSER;
            }
          // fall through
          case 110: break;
          case 48:
            { yybegin(PARAMETRIZED_TAG);startPerlExpression();return MASON_AUGMENT_OPENER;
            }
          // fall through
          case 111: break;
          case 49:
            { yybegin(AFTER_PERL_BLOCK);return MASON_AROUND_CLOSER;
            }
          // fall through
          case 112: break;
          case 50:
            { yybegin(AFTER_PERL_BLOCK);return MASON_BEFORE_CLOSER;
            }
          // fall through
          case 113: break;
          case 51:
            { yybegin(AFTER_PERL_BLOCK);return MASON_FILTER_CLOSER;
            }
          // fall through
          case 114: break;
          case 52:
            { yybegin(AFTER_PERL_BLOCK);return MASON_METHOD_CLOSER;
            }
          // fall through
          case 115: break;
          case 53:
            { yybegin(AFTER_PERL_BLOCK);return MASON_DOC_CLOSER;
            }
          // fall through
          case 116: break;
          case 54:
            { pushback();yybegin(DOC);return COMMENT_BLOCK;
            }
          // fall through
          case 117: break;
          case 55:
            { yybegin(PARAMETRIZED_TAG);startPerlExpression();return MASON_OVERRIDE_OPENER;
            }
          // fall through
          case 118: break;
          case 56:
            { yybegin(AFTER_PERL_BLOCK);return MASON_AUGMENT_CLOSER;
            }
          // fall through
          case 119: break;
          case 57:
            { endPerlExpression();yybegin(AFTER_PERL_BLOCK);return MASON_INIT_CLOSER;
            }
          // fall through
          case 120: break;
          case 58:
            { yybegin(AFTER_PERL_BLOCK);return MASON_TEXT_CLOSER;
            }
          // fall through
          case 121: break;
          case 59:
            { pushback();yybegin(TEXT);return STRING_CONTENT;
            }
          // fall through
          case 122: break;
          case 60:
            { yybegin(AFTER_PERL_BLOCK);return MASON_PERL_CLOSER;
            }
          // fall through
          case 123: break;
          case 61:
            { yybegin(AFTER_PERL_BLOCK);return MASON_OVERRIDE_CLOSER;
            }
          // fall through
          case 124: break;
          case 62:
            { endPerlExpression();yybegin(AFTER_PERL_BLOCK);return MASON_FLAGS_CLOSER;
            }
          // fall through
          case 125: break;
          case 63:
            { endPerlExpression();yybegin(AFTER_PERL_BLOCK);return MASON_CLASS_CLOSER;
            }
          // fall through
          case 126: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
