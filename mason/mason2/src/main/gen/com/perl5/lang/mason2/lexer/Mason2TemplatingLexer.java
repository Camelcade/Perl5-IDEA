/* The following code was generated by JFlex 1.7.0-1 tweaked for IntelliJ platform */

package com.perl5.lang.mason2.lexer;

import com.intellij.psi.TokenType;
import com.intellij.psi.tree.IElementType;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-1
 * from the specification file <tt>/home/hurricup/Projects/IDEA-Perl5/mason/mason2/grammar/Mason2.flex</tt>
 */
public class Mason2TemplatingLexer extends Mason2TemplatingLexerBase {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int NON_CLEAR_LINE = 2;
  public static final int PERL_LINE = 4;
  public static final int PERL_BLOCK = 6;
  public static final int PERL_EXPR_BLOCK = 8;
  public static final int PERL_EXPR_BLOCK_FILTER = 10;
  public static final int CALL_EXPRESSION = 12;
  public static final int CALL_EXPRESSION_DELEGATED = 14;
  public static final int CALL_PATH = 16;
  public static final int AFTER_PERL_LINE = 18;
  public static final int AFTER_PERL_BLOCK = 20;
  public static final int SELECT_OPEN_TAG = 22;
  public static final int SELECT_CLOSE_TAG = 24;
  public static final int OPENING_TAG = 26;
  public static final int DOC = 28;
  public static final int NON_EMPTY_DOC = 30;
  public static final int FLAGS = 32;
  public static final int CLASS = 34;
  public static final int INIT = 36;
  public static final int TEXT = 38;
  public static final int NON_EMPTY_TEXT = 40;
  public static final int PERL = 42;
  public static final int PARAMETRIZED_TAG = 44;
  public static final int CHECK_SPACE_CLEAR_LINE = 46;
  public static final int CHECK_SPACE = 48;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 
    16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 23, 
    24, 24
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [12, 6, 3]
   * Total runtime size is 17344 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>9]<<6)|((ch>>3)&0x3f)]<<3)|(ch&0x7)];
  }

  /* The ZZ_CMAP_Z table has 2176 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1"+
    "\20\1\21\1\22\3\21\1\23\1\24\1\25\1\21\14\26\1\27\50\26\1\30\2\26\1\31\1\32"+
    "\1\33\1\34\25\26\1\35\20\21\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1"+
    "\47\1\50\1\21\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\21\1\26\1\60\1\61\5\21"+
    "\2\26\1\62\7\21\1\26\1\63\20\21\1\26\1\64\1\21\1\65\13\26\1\66\1\26\1\67\22"+
    "\21\1\70\5\21\1\71\11\21\1\72\1\73\1\74\1\75\1\21\1\76\2\21\1\77\3\21\1\100"+
    "\2\21\1\101\1\102\7\21\123\26\1\103\7\26\1\104\1\105\12\26\1\106\24\21\1\26"+
    "\1\107\u0582\21\1\110\u017f\21");

  /* The ZZ_CMAP_Y table has 4672 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\2\0\1\2\1\3\1\4\1\5\1\6\2\7\1\10\1\11\1\12\1\13\1\14\1\15\4\0\1\16"+
    "\1\17\1\16\2\7\1\20\3\7\1\20\71\7\1\21\1\7\1\22\1\0\1\23\1\24\2\0\16\4\1\25"+
    "\1\26\1\27\1\30\2\7\1\31\11\7\1\32\21\7\1\33\1\34\24\7\1\6\3\7\1\20\1\35\1"+
    "\6\4\7\1\0\1\36\4\4\1\37\1\40\1\0\3\7\2\41\3\0\1\4\1\42\5\7\1\43\3\4\1\44"+
    "\1\45\13\7\1\46\1\47\1\50\1\51\1\4\1\52\2\0\1\53\3\7\3\4\1\54\12\7\1\55\1"+
    "\4\1\56\1\0\1\4\1\57\3\7\1\43\1\60\1\16\2\7\1\55\1\61\1\62\1\63\2\0\3\7\1"+
    "\64\10\0\2\7\1\25\1\65\2\0\1\66\1\4\1\67\3\4\1\70\6\7\1\71\2\4\1\72\1\7\1"+
    "\73\1\4\1\6\1\7\1\74\1\75\1\76\2\7\1\77\1\100\1\101\1\47\1\102\1\103\1\104"+
    "\1\73\1\4\1\22\1\0\1\105\1\10\1\76\2\7\1\77\1\106\1\107\1\110\1\111\1\112"+
    "\1\113\1\114\1\4\1\115\1\0\1\105\1\32\1\31\2\7\1\77\1\116\1\101\1\37\1\117"+
    "\1\120\1\0\1\73\1\4\1\0\1\35\1\105\1\75\1\76\2\7\1\77\1\116\1\101\1\47\1\111"+
    "\1\114\1\104\1\73\1\4\1\35\1\0\1\121\1\122\1\123\1\124\1\125\1\122\1\7\1\126"+
    "\1\127\1\130\1\131\1\0\1\114\1\4\2\0\1\132\1\25\1\77\2\7\1\77\1\7\1\133\1"+
    "\134\1\130\1\135\1\41\1\73\1\4\2\0\1\74\1\25\1\77\2\7\1\77\1\136\1\101\1\134"+
    "\1\130\1\135\1\27\1\73\1\4\1\137\1\0\1\105\1\25\1\77\4\7\1\140\1\134\1\141"+
    "\1\142\1\143\1\73\1\4\1\0\1\144\1\145\1\7\1\20\1\144\2\7\1\31\1\146\1\20\1"+
    "\147\1\150\1\4\1\114\1\4\1\151\1\0\1\6\5\7\1\152\1\42\1\153\1\154\1\4\1\155"+
    "\4\0\1\156\1\157\1\160\1\6\1\161\1\162\1\152\1\163\1\164\1\165\1\4\1\166\4"+
    "\0\1\120\2\0\1\155\1\4\1\155\1\167\1\170\1\7\1\6\3\7\1\23\1\36\1\4\1\134\1"+
    "\171\1\4\1\36\3\4\1\172\1\173\7\0\5\7\1\43\1\4\1\174\1\4\1\155\1\55\1\175"+
    "\1\176\1\177\1\200\1\7\1\201\1\202\1\4\1\165\4\7\1\32\1\17\5\7\1\203\51\7"+
    "\1\123\1\20\1\123\5\7\1\123\4\7\1\123\1\20\1\123\1\7\1\20\7\7\1\123\10\7\1"+
    "\204\4\0\2\7\2\0\12\7\2\65\1\6\114\7\1\75\2\7\1\6\2\7\1\41\11\7\1\122\1\7"+
    "\1\120\1\7\1\25\1\205\1\0\2\7\1\205\1\0\2\7\1\206\1\0\1\7\1\25\1\207\1\0\6"+
    "\7\1\210\3\4\1\211\1\212\1\4\1\155\3\0\1\213\1\4\1\155\13\7\1\0\5\7\1\214"+
    "\10\7\1\65\1\0\3\7\1\20\1\4\1\215\1\4\1\215\1\114\1\4\3\7\1\65\1\23\1\0\5"+
    "\7\1\216\3\7\1\22\1\4\1\155\4\0\2\7\1\153\1\215\6\7\1\171\1\154\3\4\1\47\1"+
    "\4\1\155\1\4\1\155\1\143\1\0\1\4\1\217\10\0\1\220\5\7\1\210\1\4\1\220\1\216"+
    "\1\4\1\155\1\0\1\221\1\215\1\0\1\222\3\7\1\72\1\177\1\4\1\57\4\7\1\55\1\4"+
    "\1\215\1\0\4\7\1\210\2\4\1\0\1\4\1\223\1\4\1\57\3\7\1\65\1\7\1\120\10\0\1"+
    "\224\2\4\1\225\1\226\1\155\30\7\6\4\1\165\1\221\42\7\2\65\4\7\2\65\1\7\1\227"+
    "\3\7\1\65\6\7\1\25\1\164\1\230\1\23\1\231\1\216\1\7\1\23\1\230\1\23\5\0\1"+
    "\232\1\0\1\103\1\233\1\0\1\234\3\0\1\35\1\143\2\0\1\7\1\23\6\0\1\4\1\235\1"+
    "\236\1\4\1\233\1\0\1\237\1\144\1\146\1\240\1\24\1\241\1\7\1\242\1\243\1\244"+
    "\2\0\5\7\1\120\144\0\1\245\6\246\1\247\42\0\5\7\1\20\5\7\1\20\20\7\1\23\1"+
    "\250\1\251\1\0\4\7\1\32\1\17\7\7\1\143\1\0\1\103\2\7\1\20\1\0\10\20\4\4\5"+
    "\0\1\252\72\0\1\243\3\0\1\6\1\201\1\240\1\23\1\6\11\7\1\20\1\253\1\6\12\7"+
    "\1\203\1\243\4\7\1\65\1\6\12\7\1\20\2\0\3\7\1\41\6\0\170\7\1\65\11\0\72\7"+
    "\1\65\5\0\21\7\1\23\10\0\5\7\1\65\41\7\1\23\2\7\1\4\1\251\2\0\5\7\1\153\1"+
    "\254\1\255\3\7\1\55\12\7\1\155\3\0\1\143\1\7\1\144\14\7\1\76\3\7\1\20\1\7"+
    "\7\0\1\143\1\7\1\256\1\257\2\7\1\43\3\0\6\7\1\216\1\0\1\57\5\7\1\210\1\4\1"+
    "\165\1\0\1\4\1\155\2\4\1\57\1\260\1\4\1\57\2\7\1\55\1\165\2\7\1\153\1\4\1"+
    "\215\1\0\3\7\1\23\1\70\5\7\1\43\1\4\1\233\1\143\1\4\1\155\1\261\1\7\1\4\1"+
    "\262\5\7\1\72\1\154\1\0\1\257\1\263\1\4\1\155\2\7\1\20\1\264\6\7\1\176\1\265"+
    "\1\214\2\0\1\266\1\7\1\43\1\267\1\0\3\270\1\0\2\20\5\7\1\203\1\65\1\0\16\7"+
    "\1\43\1\271\1\4\1\155\64\7\1\216\1\0\2\7\1\20\1\272\5\7\1\216\40\0\55\7\1"+
    "\65\15\7\1\22\4\0\1\20\1\0\1\272\1\273\1\7\1\77\1\20\1\164\1\274\15\7\1\22"+
    "\3\0\1\272\20\7\1\275\1\276\32\7\1\65\2\0\10\7\1\144\6\7\5\0\1\7\1\277\2\4"+
    "\2\0\2\4\1\300\2\0\1\301\4\0\1\302\1\303\17\7\1\23\2\0\1\4\1\155\1\6\2\7\1"+
    "\304\1\6\2\7\1\41\1\305\6\7\1\55\3\7\1\20\3\144\1\306\4\0\1\7\1\136\2\7\1"+
    "\20\2\7\1\307\1\7\1\65\1\7\1\65\4\0\17\7\1\41\10\0\6\7\1\23\20\0\1\310\20"+
    "\0\3\7\1\23\6\7\1\120\1\0\1\233\3\0\4\7\2\0\3\7\1\41\4\7\1\55\1\42\3\7\1\65"+
    "\4\7\1\216\1\7\1\240\5\0\23\7\1\65\1\4\1\155\4\7\1\216\4\7\1\216\5\7\1\0\6"+
    "\7\1\216\23\0\46\7\1\20\1\0\2\7\1\65\1\0\1\7\23\0\1\65\1\77\4\7\1\32\1\311"+
    "\2\7\1\65\1\0\2\7\1\20\1\0\3\7\1\20\10\0\2\7\1\312\1\0\2\7\1\65\1\0\3\7\1"+
    "\22\10\0\7\7\1\305\10\0\1\313\1\66\1\136\1\6\2\7\1\216\1\110\4\0\3\7\1\23"+
    "\3\7\1\23\4\0\1\7\1\6\2\7\1\314\3\0\6\7\1\65\1\0\2\7\1\65\1\0\2\7\1\41\1\0"+
    "\2\7\1\22\15\0\11\7\1\120\6\0\6\7\1\41\1\0\6\7\1\41\41\0\1\222\6\7\1\4\1\154"+
    "\3\0\1\114\1\4\1\0\1\103\1\222\5\7\1\4\1\42\2\0\3\7\1\120\1\4\1\155\1\222"+
    "\3\7\1\153\1\4\1\134\1\4\2\0\4\7\1\315\1\0\1\222\5\7\1\43\1\4\1\316\1\317"+
    "\1\4\1\320\4\0\2\7\1\31\2\7\1\210\1\4\1\173\10\0\1\20\1\241\1\7\1\32\1\7\1"+
    "\120\5\7\1\153\1\4\1\42\1\4\1\155\1\132\1\75\1\76\2\7\1\77\1\116\1\101\1\47"+
    "\1\111\1\131\1\243\1\73\2\172\21\0\6\7\1\171\1\4\1\174\1\41\1\4\1\155\4\0"+
    "\6\7\2\4\1\321\1\0\1\4\1\155\24\0\5\7\1\153\1\165\1\4\1\233\2\0\1\263\4\0"+
    "\6\7\2\4\1\322\1\0\1\4\1\155\4\0\5\7\1\43\1\4\1\0\1\4\1\155\6\0\3\7\1\323"+
    "\1\4\1\215\1\4\1\155\54\0\10\7\1\4\1\155\1\0\1\143\70\0\7\7\1\120\40\0\1\7"+
    "\1\77\3\7\1\153\1\154\1\4\1\120\1\0\1\4\1\155\2\0\1\144\3\7\1\324\2\4\1\36"+
    "\1\154\51\0\63\7\1\22\14\0\15\7\1\20\2\0\30\7\1\216\27\0\5\7\1\20\72\0\10"+
    "\7\1\20\67\0\7\7\1\120\3\7\1\20\1\4\1\155\14\0\3\7\1\65\1\172\1\0\6\7\1\154"+
    "\1\0\1\216\1\0\1\4\1\155\1\272\2\7\1\243\2\7\56\0\10\7\1\23\1\0\1\72\4\4\1"+
    "\154\1\0\1\103\1\222\1\7\10\0\1\120\3\0\75\7\1\23\2\0\36\7\1\41\41\0\1\22"+
    "\77\0\15\7\1\41\1\7\1\23\1\7\1\120\1\7\1\325\130\0\1\301\1\326\1\42\1\221"+
    "\1\327\1\215\3\0\1\330\22\0\1\317\67\0\12\7\1\25\10\7\1\25\1\331\1\332\1\7"+
    "\1\333\1\136\7\7\1\32\1\334\2\25\3\7\1\335\1\164\1\144\1\77\51\7\1\65\3\7"+
    "\1\77\2\7\1\203\3\7\1\203\2\7\1\25\3\7\1\25\2\7\1\20\3\7\1\20\3\7\1\77\3\7"+
    "\1\77\2\7\1\203\1\336\14\4\1\154\1\221\5\4\1\172\1\310\1\0\1\234\2\0\1\221"+
    "\1\36\1\4\52\0\1\154\2\4\1\337\1\340\1\42\72\0\30\7\1\23\1\0\1\154\5\0\10"+
    "\7\1\210\1\42\1\4\1\155\24\0\1\136\3\7\1\156\1\6\1\203\1\341\1\237\1\342\1"+
    "\156\1\227\1\156\2\203\1\113\1\7\1\31\1\7\1\216\1\343\1\31\1\7\1\216\116\0"+
    "\3\246\1\247\3\246\1\247\3\246\1\247\16\0\32\7\1\20\5\0\106\7\1\23\1\0\33"+
    "\7\1\65\120\7\1\22\53\0\3\7\1\65\134\0\36\4\2\0");

  /* The ZZ_CMAP_A table has 1824 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\3\1\6\1\4\1\5\1\7\2\0\1\35\2\0\1\10\1\45\1\36\1\42\5\0\1\44\1\0\1"+
    "\46\1\41\12\2\2\0\1\40\1\0\1\37\2\0\22\1\4\0\1\1\1\0\1\23\1\27\1\31\1\16\1"+
    "\12\1\17\1\25\1\14\1\20\2\1\1\21\1\11\1\26\1\15\1\33\1\1\1\22\1\32\1\13\1"+
    "\24\1\30\1\1\1\34\2\1\1\50\1\47\1\51\7\0\1\4\4\0\1\1\12\0\1\1\2\0\7\1\1\0"+
    "\2\1\4\0\4\1\6\0\5\1\7\0\1\1\1\0\1\1\1\0\5\1\1\0\2\1\2\0\1\43\3\1\1\0\1\1"+
    "\6\0\1\1\1\0\3\1\1\0\1\1\1\0\4\1\1\0\13\1\1\0\3\1\1\0\5\2\2\43\6\1\1\0\1\1"+
    "\7\0\15\2\1\0\1\2\1\0\2\2\1\0\2\2\1\0\1\2\3\1\5\0\3\2\5\0\3\1\7\2\4\0\2\1"+
    "\1\2\13\1\1\0\1\1\7\2\2\0\6\2\2\1\2\2\1\0\4\2\2\1\2\2\3\1\2\0\2\1\1\2\6\1"+
    "\3\2\2\0\11\1\3\2\1\1\6\0\2\2\6\1\4\2\2\1\2\0\2\2\1\1\11\2\1\1\3\2\1\1\5\2"+
    "\2\0\1\1\3\2\4\0\6\1\6\0\6\2\1\0\11\2\6\1\3\2\1\1\2\2\1\1\7\2\2\1\2\2\2\0"+
    "\2\2\1\1\3\2\1\0\10\1\2\0\2\1\2\0\6\1\1\0\7\1\1\0\1\1\3\0\4\1\2\0\1\2\1\1"+
    "\3\2\2\0\3\2\1\1\10\0\1\2\4\0\2\1\1\0\1\1\1\0\3\2\1\0\4\1\1\0\2\1\1\0\2\1"+
    "\1\0\2\1\2\0\1\2\1\0\5\2\4\0\2\2\2\0\3\2\3\0\1\2\7\0\4\1\1\0\1\1\7\0\4\2\3"+
    "\1\1\2\2\0\1\1\1\0\2\1\1\0\3\1\2\2\1\0\3\2\2\0\1\1\11\0\1\2\1\1\1\0\6\1\3"+
    "\0\3\1\1\0\4\1\3\0\2\1\1\0\1\1\1\0\2\1\3\0\2\1\3\0\2\1\4\0\5\2\3\0\3\2\1\0"+
    "\4\2\2\0\1\1\6\0\5\2\1\0\5\1\3\0\1\1\7\2\1\0\2\2\5\0\2\2\1\0\4\1\1\0\3\1\1"+
    "\0\2\1\5\0\3\1\2\0\1\1\3\2\1\0\4\2\1\1\5\0\3\1\1\2\7\0\1\1\2\0\6\1\2\0\2\2"+
    "\1\0\7\1\1\0\1\1\4\0\1\2\4\0\6\2\1\0\1\2\3\0\2\2\4\0\1\1\1\2\1\1\5\2\7\1\10"+
    "\2\1\0\2\2\7\0\2\1\1\0\1\1\2\0\2\1\1\0\1\1\2\0\1\1\6\0\4\1\1\0\3\1\1\0\1\1"+
    "\1\0\1\1\2\0\2\1\1\0\3\1\2\2\1\0\2\2\1\1\2\0\5\1\1\0\1\1\1\0\6\2\2\0\2\2\2"+
    "\0\4\1\5\0\1\2\1\0\1\2\1\0\1\2\4\0\2\2\5\1\10\2\11\0\1\2\1\0\7\2\1\1\2\2\4"+
    "\1\3\2\1\1\3\2\2\1\7\2\3\1\4\2\5\1\14\2\1\1\1\2\3\1\1\0\7\1\2\0\3\2\2\1\3"+
    "\2\3\0\2\1\2\2\4\0\1\1\1\0\2\2\4\0\4\1\10\2\3\0\1\1\4\0\1\1\1\2\5\0\3\2\2"+
    "\0\1\1\1\2\1\1\5\0\4\2\4\0\4\1\4\0\6\2\1\43\1\0\5\2\3\1\3\0\10\2\5\1\2\2\3"+
    "\0\3\1\3\2\1\0\5\2\4\1\1\2\4\1\3\2\2\1\2\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1\2\0"+
    "\3\1\1\0\6\1\2\0\2\1\2\4\6\0\1\2\13\0\1\2\3\0\5\2\4\43\1\2\3\43\3\2\2\0\1"+
    "\1\4\0\1\1\1\0\5\1\2\0\1\1\1\0\4\1\1\0\3\1\2\0\4\1\5\0\5\1\4\0\1\1\7\0\14"+
    "\43\11\0\4\1\3\2\2\1\13\0\1\43\1\0\2\2\2\0\3\1\3\43\1\0\12\2\1\0\3\1\1\2\3"+
    "\1\1\2\4\1\1\2\4\1\3\0\1\1\1\0\1\1\2\0\5\1\1\2\2\1\2\2\5\1\1\0\4\1\2\2\4\0"+
    "\1\1\3\2\2\1\1\2\5\1\2\2\3\0\3\1\4\0\3\1\2\2\2\0\6\1\1\0\3\2\1\0\2\2\5\0\5"+
    "\1\5\0\1\1\1\2\3\1\1\0\2\1\1\0\10\1\6\43\6\1\2\43\7\0\2\2\10\0\3\2\1\43\1"+
    "\1\1\43\1\1\1\43\1\0\1\43\1\1\1\43\1\1\1\43\1\1\1\43\1\1\1\43\4\1\4\0\1\2"+
    "\6\0\2\1\2\0\3\1\3\0\3\1\1\0\2\1\1\0\1\1\5\0\1\2\2\0\1\1\3\0\1\1\2\0\4\1\1"+
    "\0\2\1\2\0\1\1\3\2\1\0\2\2\1\0\5\1\2\2\1\0\3\1\1\2\2\0\1\1\1\0\1\2\4\1\5\0"+
    "\3\2\3\0\2\2\1\1\1\0\1\1\3\0\4\2\2\1\1\0\1\1\1\2\3\0\1\1\3\0\2\1\3\0\3\2\2"+
    "\0\6\2\2\1\3\0\2\2\1\0\2\2\3\0\6\2\2\0\3\2\2\0\4\2\4\0\1\1\2\0\2\1\2\0\4\1"+
    "\1\0\4\1\1\0\1\1\1\0\6\1\2\0\5\1\1\0\4\1\1\0\4\1\2\0\3\2\2\0\7\2\1\0\2\2\1"+
    "\0\2\2\1\0\1\1\1\0\1\1\5\0\1\1\1\0\1\1\1\0\3\1\1\0\3\1\1\0\3\1");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\31\0\1\1\2\2\2\1\1\3\1\1\1\4\2\5"+
    "\3\4\1\0\3\4\1\6\2\7\1\10\1\11\1\12"+
    "\2\7\2\4\3\13\1\14\1\15\1\16\1\17\1\20"+
    "\13\21\1\22\5\21\1\23\2\24\2\13\2\25\3\4"+
    "\2\26\1\13\1\4\1\27\2\21\1\30\1\31\3\0"+
    "\1\32\1\33\5\0\2\7\42\0\1\34\2\0\1\35"+
    "\1\36\1\37\3\32\3\33\1\0\1\40\2\0\1\41"+
    "\34\0\1\42\4\0\1\43\30\0\1\44\1\0\1\45"+
    "\3\0\1\46\1\47\4\0\1\50\17\0\1\51\1\0"+
    "\1\52\1\53\1\54\1\0\1\55\1\56\3\0\1\57"+
    "\14\0\1\60\1\61\1\0\1\62\1\63\1\0\1\64"+
    "\1\65\1\66\6\0\1\67\1\0\1\70\2\0\1\71"+
    "\1\72\1\73\1\74\1\75\1\76\1\77";

  private static int [] zzUnpackAction() {
    int [] result = new int[296];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\52\0\124\0\176\0\250\0\322\0\374\0\u0126"+
    "\0\u0150\0\u017a\0\u01a4\0\u01ce\0\u01f8\0\u0222\0\u024c\0\u0276"+
    "\0\u02a0\0\u02ca\0\u02f4\0\u031e\0\u0348\0\u0372\0\u039c\0\u03c6"+
    "\0\u03f0\0\u041a\0\u0444\0\u046e\0\u0498\0\u04c2\0\u04ec\0\u0516"+
    "\0\u0516\0\u0516\0\u0540\0\u056a\0\u0594\0\u05be\0\u056a\0\u05e8"+
    "\0\u0612\0\u063c\0\u0666\0\u0690\0\u06ba\0\u0516\0\u0516\0\u0516"+
    "\0\u06e4\0\u070e\0\u0738\0\u0762\0\u0516\0\u078c\0\u07b6\0\u0516"+
    "\0\u0516\0\u07e0\0\u0516\0\u080a\0\u0516\0\u0834\0\u085e\0\u0888"+
    "\0\u08b2\0\u08dc\0\u0906\0\u0930\0\u095a\0\u0984\0\u09ae\0\u0516"+
    "\0\u09d8\0\u0a02\0\u0a2c\0\u0a56\0\u0a80\0\u0516\0\u0516\0\u0aaa"+
    "\0\u0ad4\0\u0afe\0\u0516\0\u0b28\0\u0b52\0\u0b7c\0\u0ba6\0\u0516"+
    "\0\u0bd0\0\u0bfa\0\u0c24\0\u0516\0\u0c4e\0\u0c78\0\u0516\0\u0516"+
    "\0\u0ca2\0\u0ccc\0\u0cf6\0\u0d20\0\u0d4a\0\u05e8\0\u0d74\0\u0d9e"+
    "\0\u0dc8\0\u063c\0\u0df2\0\u0e1c\0\u0e46\0\u0738\0\u0e70\0\u078c"+
    "\0\u07b6\0\u0e9a\0\u0ec4\0\u0eee\0\u0f18\0\u0f42\0\u0f6c\0\u0f96"+
    "\0\u0fc0\0\u0fea\0\u1014\0\u103e\0\u1068\0\u1092\0\u10bc\0\u10e6"+
    "\0\u1110\0\u113a\0\u1164\0\u118e\0\u11b8\0\u11e2\0\u120c\0\u1236"+
    "\0\u1260\0\u128a\0\u12b4\0\u12de\0\u1308\0\u1332\0\u0516\0\u135c"+
    "\0\u0c4e\0\u0516\0\u0516\0\u1386\0\u0516\0\u13b0\0\u13da\0\u0516"+
    "\0\u1404\0\u142e\0\u1458\0\u0516\0\u1482\0\u14ac\0\u0516\0\u14d6"+
    "\0\u1500\0\u152a\0\u1554\0\u157e\0\u15a8\0\u15d2\0\u15fc\0\u1626"+
    "\0\u1650\0\u167a\0\u16a4\0\u16ce\0\u16f8\0\u1722\0\u174c\0\u1776"+
    "\0\u17a0\0\u17ca\0\u17f4\0\u181e\0\u1848\0\u1872\0\u189c\0\u18c6"+
    "\0\u18f0\0\u191a\0\u1944\0\u0516\0\u196e\0\u1998\0\u19c2\0\u19ec"+
    "\0\u0516\0\u1a16\0\u1a40\0\u1a6a\0\u1a94\0\u1abe\0\u1ae8\0\u1b12"+
    "\0\u1b3c\0\u1b66\0\u1b90\0\u1bba\0\u1be4\0\u1c0e\0\u1c38\0\u1c62"+
    "\0\u1c8c\0\u1cb6\0\u1ce0\0\u1d0a\0\u1d34\0\u1d5e\0\u1d88\0\u1db2"+
    "\0\u1ddc\0\u0516\0\u1e06\0\u0516\0\u1e30\0\u1e5a\0\u1e84\0\u0516"+
    "\0\u0516\0\u1eae\0\u1ed8\0\u1f02\0\u1f2c\0\u0516\0\u1f56\0\u1f80"+
    "\0\u1faa\0\u1fd4\0\u1ffe\0\u2028\0\u2052\0\u207c\0\u20a6\0\u20d0"+
    "\0\u20fa\0\u2124\0\u214e\0\u2178\0\u21a2\0\u0516\0\u21cc\0\u0516"+
    "\0\u0516\0\u0516\0\u21f6\0\u0516\0\u0516\0\u2220\0\u224a\0\u2274"+
    "\0\u0516\0\u229e\0\u22c8\0\u22f2\0\u231c\0\u2346\0\u2370\0\u239a"+
    "\0\u23c4\0\u23ee\0\u2418\0\u2442\0\u246c\0\u0516\0\u0516\0\u2496"+
    "\0\u0516\0\u0516\0\u24c0\0\u0516\0\u0516\0\u0516\0\u24ea\0\u2514"+
    "\0\u253e\0\u2568\0\u2592\0\u25bc\0\u0516\0\u25e6\0\u0516\0\u2610"+
    "\0\u263a\0\u0516\0\u0516\0\u0516\0\u0516\0\u0516\0\u0516\0\u0516";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[296];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\3\32\1\33\1\34\3\33\25\32\1\33\1\35\1\32"+
    "\1\36\14\32\1\37\1\34\1\37\2\33\25\32\1\37"+
    "\1\40\1\32\1\36\11\32\4\41\3\42\1\43\35\41"+
    "\1\44\2\41\1\45\1\46\45\0\1\47\4\0\3\41"+
    "\5\50\25\41\1\51\11\41\1\52\2\41\1\0\1\53"+
    "\1\0\5\54\1\0\24\53\1\55\6\0\1\56\5\0"+
    "\1\57\2\60\5\61\1\57\24\60\1\62\3\57\1\60"+
    "\1\57\1\60\2\57\1\60\3\57\3\41\5\63\25\41"+
    "\1\64\14\41\3\65\5\66\25\65\1\67\6\65\1\70"+
    "\5\65\3\71\5\72\25\71\1\72\14\71\3\73\1\74"+
    "\4\72\25\73\1\74\14\73\11\75\1\76\1\75\1\77"+
    "\1\75\1\100\1\101\1\102\1\103\2\75\1\104\3\75"+
    "\1\105\1\75\1\106\1\75\1\107\1\75\1\110\25\75"+
    "\1\111\3\75\1\112\1\75\1\113\3\75\1\114\3\75"+
    "\1\115\22\75\37\41\1\116\12\41\40\117\1\120\11\117"+
    "\40\121\1\122\11\121\4\41\3\123\1\124\30\41\1\125"+
    "\51\41\1\126\51\41\1\127\11\41\40\130\1\131\11\130"+
    "\40\121\1\132\11\121\40\41\1\133\50\41\1\134\12\41"+
    "\36\75\1\135\1\75\1\136\51\75\1\136\11\75\3\32"+
    "\1\0\1\32\3\0\25\32\2\0\1\32\1\0\11\32"+
    "\3\0\5\33\25\0\1\33\14\0\3\32\1\33\1\34"+
    "\3\33\25\32\1\33\1\0\1\32\1\0\11\32\35\0"+
    "\1\137\52\0\1\140\2\0\1\141\1\142\12\0\1\37"+
    "\1\33\1\37\2\33\25\0\1\37\74\0\1\42\111\0"+
    "\1\143\53\0\1\144\52\0\1\145\3\0\5\146\25\0"+
    "\1\147\17\0\5\146\25\0\1\147\1\150\14\0\1\151"+
    "\1\0\5\152\1\0\24\151\1\152\15\0\2\53\6\0"+
    "\24\53\20\0\5\54\25\0\1\153\17\0\5\54\25\0"+
    "\1\153\1\150\16\0\5\61\25\0\1\154\17\0\5\61"+
    "\25\0\1\154\4\0\1\155\12\0\5\156\25\0\1\157"+
    "\17\0\5\156\25\0\1\157\4\0\1\155\12\0\5\160"+
    "\25\0\1\161\6\0\1\70\10\0\5\160\25\0\1\161"+
    "\4\0\1\162\1\0\1\70\10\0\5\72\25\0\1\72"+
    "\17\0\1\74\4\72\25\0\1\74\26\0\1\163\51\0"+
    "\1\164\67\0\1\165\36\0\1\166\54\0\1\167\1\170"+
    "\56\0\1\171\42\0\1\172\2\0\1\173\1\0\1\174"+
    "\37\0\1\175\60\0\1\176\42\0\1\177\51\0\1\200"+
    "\67\0\1\201\41\0\1\202\50\0\1\203\2\0\1\204"+
    "\1\0\1\205\37\0\1\206\100\0\1\207\10\0\40\121"+
    "\1\0\11\121\41\0\1\210\16\0\1\123\104\0\1\211"+
    "\51\0\1\212\51\0\1\213\51\0\1\214\51\0\1\215"+
    "\51\0\1\216\45\0\1\217\52\0\1\217\2\0\1\220"+
    "\1\221\45\0\1\222\50\0\1\223\15\0\1\224\7\0"+
    "\24\224\20\0\1\144\1\225\1\144\1\225\1\226\1\227"+
    "\24\0\1\144\17\0\1\145\1\230\1\145\1\230\1\231"+
    "\1\232\24\0\1\145\17\0\5\146\25\0\1\147\1\233"+
    "\52\0\1\234\13\0\2\151\5\235\1\0\24\151\1\236"+
    "\6\0\1\152\10\0\5\54\25\0\1\153\1\233\16\0"+
    "\5\61\25\0\1\154\4\0\1\233\46\0\1\237\15\0"+
    "\5\156\25\0\1\157\4\0\1\233\46\0\1\70\25\0"+
    "\1\240\72\0\1\241\27\0\1\242\70\0\1\243\41\0"+
    "\1\244\53\0\1\245\46\0\1\246\44\0\1\247\53\0"+
    "\1\250\61\0\1\251\43\0\1\252\55\0\1\253\50\0"+
    "\1\254\42\0\1\255\50\0\1\256\60\0\1\257\43\0"+
    "\1\260\53\0\1\261\61\0\1\262\43\0\1\263\70\0"+
    "\1\264\51\0\1\265\51\0\1\266\51\0\1\267\51\0"+
    "\1\270\51\0\1\271\51\0\1\272\51\0\1\273\51\0"+
    "\1\217\14\0\2\224\6\0\24\224\23\0\1\225\43\0"+
    "\4\227\3\225\1\226\42\227\6\0\1\230\43\0\4\232"+
    "\3\230\1\231\42\232\37\0\1\274\15\0\5\235\25\0"+
    "\1\236\17\0\5\235\25\0\1\236\1\275\27\0\1\276"+
    "\50\0\1\277\60\0\1\300\66\0\1\301\25\0\1\302"+
    "\63\0\1\303\37\0\1\304\50\0\1\305\63\0\1\306"+
    "\36\0\1\307\55\0\1\310\66\0\1\311\40\0\1\312"+
    "\44\0\1\313\57\0\1\314\42\0\1\315\50\0\1\316"+
    "\63\0\1\317\36\0\1\320\55\0\1\321\52\0\1\322"+
    "\51\0\1\323\52\0\1\324\63\0\1\325\40\0\1\326"+
    "\44\0\1\327\51\0\1\330\71\0\1\331\55\0\1\332"+
    "\27\0\1\333\73\0\1\334\34\0\1\335\41\0\1\336"+
    "\71\0\1\337\56\0\1\340\34\0\1\341\55\0\1\342"+
    "\35\0\1\343\61\0\1\344\61\0\1\345\56\0\1\346"+
    "\27\0\1\347\56\0\1\350\41\0\1\351\61\0\1\352"+
    "\55\0\1\353\35\0\1\354\61\0\1\355\44\0\1\356"+
    "\51\0\1\357\55\0\1\360\51\0\1\361\56\0\1\362"+
    "\35\0\1\363\51\0\1\364\51\0\1\365\55\0\1\366"+
    "\53\0\1\367\53\0\1\370\66\0\1\371\30\0\1\372"+
    "\61\0\1\373\35\0\1\374\76\0\1\375\30\0\1\376"+
    "\53\0\1\377\53\0\1\u0100\66\0\1\u0101\30\0\1\u0102"+
    "\61\0\1\u0103\35\0\1\u0104\70\0\1\u0105\51\0\1\u0106"+
    "\43\0\1\u0107\51\0\1\u0108\46\0\1\u0109\65\0\1\u010a"+
    "\51\0\1\u010b\37\0\1\u010c\45\0\1\u010d\46\0\1\u010e"+
    "\75\0\1\u010f\30\0\1\u0110\72\0\1\u0111\51\0\1\u0112"+
    "\25\0\1\u0113\75\0\1\u0114\51\0\1\u0115\51\0\1\u0116"+
    "\37\0\1\u0117\56\0\1\u0118\32\0\1\u0119\51\0\1\u011a"+
    "\51\0\1\u011b\57\0\1\u011c\42\0\1\u011d\51\0\1\u011e"+
    "\76\0\1\u011f\44\0\1\u0120\51\0\1\u0121\56\0\1\u0122"+
    "\51\0\1\u0123\51\0\1\u0124\51\0\1\u0125\51\0\1\u0126"+
    "\51\0\1\u0127\51\0\1\u0128\12\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9828];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\31\0\6\1\3\11\4\1\1\0\6\1\3\11\4\1"+
    "\1\11\2\1\2\11\1\1\1\11\1\1\1\11\12\1"+
    "\1\11\5\1\2\11\3\1\1\11\4\1\1\11\3\1"+
    "\1\11\2\1\2\11\3\0\2\1\5\0\2\1\42\0"+
    "\1\11\2\0\2\11\1\1\1\11\2\1\1\11\2\1"+
    "\1\0\1\11\2\0\1\11\34\0\1\11\4\0\1\11"+
    "\30\0\1\11\1\0\1\11\3\0\2\11\4\0\1\11"+
    "\17\0\1\11\1\0\3\11\1\0\2\11\3\0\1\11"+
    "\14\0\2\11\1\0\2\11\1\0\3\11\6\0\1\11"+
    "\1\0\1\11\2\0\7\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[296];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Mason2TemplatingLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }
	protected int bufferStart;

    public void setTokenStart(int position){zzCurrentPos = zzStartRead = position;}
    public void setTokenEnd(int position){zzMarkedPos = position;}
    public CharSequence getBuffer(){ return zzBuffer;}
    public int getBufferEnd() {return zzEndRead;}
    public int getNextTokenStart(){ return zzMarkedPos;}
    public boolean isLastToken(){ return zzMarkedPos == zzEndRead; }
	public int getBufferStart(){ return bufferStart;	}
 	public int getRealLexicalState() {return zzLexicalState;  }

 	public void pullback(int i)
 	{
 		int length = yylength();
 		if( i == length)
 		{
 			return;
 		}
 		assert i < length: "Pulling back for " + i + " of " + length + " for: " + yytext();
		yypushback(length - i);
 	}

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return zzMarkedPos;
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    bufferStart = zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
    resetInternals();
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public int yystate() {
    return packState(myPerlLexer.yystate(), isInitialState() ? zzLexicalState: 0xFFFF);
  }

  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }
    message += "; Real state is: " + zzLexicalState + "; yystate(): " + yystate();

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType perlAdvance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        switch (zzLexicalState) {
            case CALL_PATH: {
              yybegin(YYINITIAL);return STRING_CONTENT;
            }  // fall though
            case 297: break;
            case SELECT_OPEN_TAG: {
              yybegin(YYINITIAL);return MASON_TEMPLATE_BLOCK_HTML;
            }  // fall though
            case 298: break;
            case SELECT_CLOSE_TAG: {
              yybegin(YYINITIAL);return MASON_TEMPLATE_BLOCK_HTML;
            }  // fall though
            case 299: break;
            case NON_EMPTY_DOC: {
              yybegin(YYINITIAL);return COMMENT_BLOCK;
            }  // fall though
            case 300: break;
            case NON_EMPTY_TEXT: {
              yybegin(YYINITIAL);return STRING_CONTENT;
            }  // fall though
            case 301: break;
            case CHECK_SPACE_CLEAR_LINE: {
              yybegin(YYINITIAL);return MASON_TEMPLATE_BLOCK_HTML;
            }  // fall though
            case 302: break;
            case CHECK_SPACE: {
              yybegin(YYINITIAL);return MASON_TEMPLATE_BLOCK_HTML;
            }  // fall though
            case 303: break;
            default:
        return null;
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { yybegin(NON_CLEAR_LINE);return MASON_TEMPLATE_BLOCK_HTML;
            } 
            // fall through
          case 64: break;
          case 2: 
            { yybegin(CHECK_SPACE_CLEAR_LINE);
            } 
            // fall through
          case 65: break;
          case 3: 
            { yybegin(CHECK_SPACE);
            } 
            // fall through
          case 66: break;
          case 4: 
            { return delegateLexing();
            } 
            // fall through
          case 67: break;
          case 5: 
            { yybegin(AFTER_PERL_LINE);return SEMICOLON;
            } 
            // fall through
          case 68: break;
          case 6: 
            { return IDENTIFIER;
            } 
            // fall through
          case 69: break;
          case 7: 
            { return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 70: break;
          case 8: 
            { return COMMA;
            } 
            // fall through
          case 71: break;
          case 9: 
            { pushback();yybegin(CALL_EXPRESSION_DELEGATED);
            } 
            // fall through
          case 72: break;
          case 10: 
            { yybegin(CALL_PATH);
            } 
            // fall through
          case 73: break;
          case 11: 
            { 
            } 
            // fall through
          case 74: break;
          case 12: 
            { pushback();yybegin(CALL_EXPRESSION);return STRING_CONTENT;
            } 
            // fall through
          case 75: break;
          case 13: 
            { yypushback(1);yybegin(YYINITIAL);
            } 
            // fall through
          case 76: break;
          case 14: 
            { yybegin(YYINITIAL);return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 77: break;
          case 15: 
            { yypushback(1);yybegin(NON_CLEAR_LINE);
            } 
            // fall through
          case 78: break;
          case 16: 
            { yybegin(NON_CLEAR_LINE);return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 79: break;
          case 17: 
            { yypushback(1);yybegin(NON_CLEAR_LINE);return MASON_TEMPLATE_BLOCK_HTML;
            } 
            // fall through
          case 80: break;
          case 18: 
            { yybegin(PERL_EXPR_BLOCK); startPerlExpression(); return MASON_BLOCK_OPENER;
            } 
            // fall through
          case 81: break;
          case 19: 
            { yybegin(AFTER_PERL_BLOCK);return MASON_TAG_CLOSER;
            } 
            // fall through
          case 82: break;
          case 20: 
            { yybegin(NON_EMPTY_DOC);
            } 
            // fall through
          case 83: break;
          case 21: 
            { setPerlToInitial();return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 84: break;
          case 22: 
            { yybegin(NON_EMPTY_TEXT);
            } 
            // fall through
          case 85: break;
          case 23: 
            { yybegin(AFTER_PERL_BLOCK);endPerlExpression();return MASON_TAG_CLOSER;
            } 
            // fall through
          case 86: break;
          case 24: 
            { yybegin(PERL_LINE);return MASON_LINE_OPENER;
            } 
            // fall through
          case 87: break;
          case 25: 
            { yybegin(SELECT_OPEN_TAG);
            } 
            // fall through
          case 88: break;
          case 26: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 2);
            { setPerlToInitial();return MASON_FILTERED_BLOCK_OPENER;
            } 
            // fall through
          case 89: break;
          case 27: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 2);
            { setPerlToInitial();return MASON_FILTERED_BLOCK_CLOSER;
            } 
            // fall through
          case 90: break;
          case 28: 
            { pushback();yybegin(YYINITIAL);return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 91: break;
          case 29: 
            { yybegin(SELECT_CLOSE_TAG);
            } 
            // fall through
          case 92: break;
          case 30: 
            { yybegin(CALL_EXPRESSION);startPerlExpression();return MASON_CALL_OPENER;
            } 
            // fall through
          case 93: break;
          case 31: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 2);
            { return MASON_SELF_POINTER;
            } 
            // fall through
          case 94: break;
          case 32: 
            { yybegin(AFTER_PERL_BLOCK);endPerlExpression();return MASON_BLOCK_CLOSER;
            } 
            // fall through
          case 95: break;
          case 33: 
            { yybegin(AFTER_PERL_BLOCK);endPerlExpression();return MASON_CALL_CLOSER;
            } 
            // fall through
          case 96: break;
          case 34: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzMarkedPos, -3);
            { return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 97: break;
          case 35: 
            { yybegin(DOC);return MASON_DOC_OPENER;
            } 
            // fall through
          case 98: break;
          case 36: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 1);
            { yybegin(PERL_EXPR_BLOCK_FILTER);return MASON_EXPR_FILTER_PIPE;
            } 
            // fall through
          case 99: break;
          case 37: 
            { yybegin(TEXT);return MASON_TEXT_OPENER;
            } 
            // fall through
          case 100: break;
          case 38: 
            { yybegin(INIT);startPerlExpression();return MASON_INIT_OPENER;
            } 
            // fall through
          case 101: break;
          case 39: 
            { yybegin(PARAMETRIZED_TAG);startPerlExpression();return MASON_AFTER_OPENER;
            } 
            // fall through
          case 102: break;
          case 40: 
            { yybegin(PERL);return MASON_PERL_OPENER;
            } 
            // fall through
          case 103: break;
          case 41: 
            { yybegin(PARAMETRIZED_TAG);startPerlExpression();return MASON_METHOD_OPENER;
            } 
            // fall through
          case 104: break;
          case 42: 
            { yybegin(PARAMETRIZED_TAG);startPerlExpression();return MASON_FILTER_OPENER;
            } 
            // fall through
          case 105: break;
          case 43: 
            { yybegin(FLAGS);startPerlExpression();return MASON_FLAGS_OPENER;
            } 
            // fall through
          case 106: break;
          case 44: 
            { yybegin(PARAMETRIZED_TAG);startPerlExpression();return MASON_AROUND_OPENER;
            } 
            // fall through
          case 107: break;
          case 45: 
            { yybegin(PARAMETRIZED_TAG);startPerlExpression();return MASON_BEFORE_OPENER;
            } 
            // fall through
          case 108: break;
          case 46: 
            { yybegin(CLASS);startPerlExpression();return MASON_CLASS_OPENER;
            } 
            // fall through
          case 109: break;
          case 47: 
            { yybegin(AFTER_PERL_BLOCK);return MASON_AFTER_CLOSER;
            } 
            // fall through
          case 110: break;
          case 48: 
            { yybegin(PARAMETRIZED_TAG);startPerlExpression();return MASON_AUGMENT_OPENER;
            } 
            // fall through
          case 111: break;
          case 49: 
            { yybegin(AFTER_PERL_BLOCK);return MASON_METHOD_CLOSER;
            } 
            // fall through
          case 112: break;
          case 50: 
            { yybegin(AFTER_PERL_BLOCK);return MASON_FILTER_CLOSER;
            } 
            // fall through
          case 113: break;
          case 51: 
            { yybegin(AFTER_PERL_BLOCK);return MASON_AROUND_CLOSER;
            } 
            // fall through
          case 114: break;
          case 52: 
            { yybegin(AFTER_PERL_BLOCK);return MASON_BEFORE_CLOSER;
            } 
            // fall through
          case 115: break;
          case 53: 
            { yybegin(AFTER_PERL_BLOCK);return MASON_DOC_CLOSER;
            } 
            // fall through
          case 116: break;
          case 54: 
            { pushback();yybegin(DOC);return COMMENT_BLOCK;
            } 
            // fall through
          case 117: break;
          case 55: 
            { yybegin(PARAMETRIZED_TAG);startPerlExpression();return MASON_OVERRIDE_OPENER;
            } 
            // fall through
          case 118: break;
          case 56: 
            { yybegin(AFTER_PERL_BLOCK);return MASON_AUGMENT_CLOSER;
            } 
            // fall through
          case 119: break;
          case 57: 
            { endPerlExpression();yybegin(AFTER_PERL_BLOCK);return MASON_INIT_CLOSER;
            } 
            // fall through
          case 120: break;
          case 58: 
            { yybegin(AFTER_PERL_BLOCK);return MASON_TEXT_CLOSER;
            } 
            // fall through
          case 121: break;
          case 59: 
            { pushback();yybegin(TEXT);return STRING_CONTENT;
            } 
            // fall through
          case 122: break;
          case 60: 
            { yybegin(AFTER_PERL_BLOCK);return MASON_PERL_CLOSER;
            } 
            // fall through
          case 123: break;
          case 61: 
            { yybegin(AFTER_PERL_BLOCK);return MASON_OVERRIDE_CLOSER;
            } 
            // fall through
          case 124: break;
          case 62: 
            { endPerlExpression();yybegin(AFTER_PERL_BLOCK);return MASON_FLAGS_CLOSER;
            } 
            // fall through
          case 125: break;
          case 63: 
            { endPerlExpression();yybegin(AFTER_PERL_BLOCK);return MASON_CLASS_CLOSER;
            } 
            // fall through
          case 126: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
